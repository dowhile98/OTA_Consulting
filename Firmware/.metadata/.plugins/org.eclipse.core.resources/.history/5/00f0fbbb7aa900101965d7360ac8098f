/**
 * @file ymodem.c
 * @brief YMODEM Protocol Implementation for Embedded Systems
 * @version 1.0
 */

#include "ymodem.h"
#include <string.h>
#include <stdlib.h>

/* Private Function Prototypes */
static uint16_t ymodem_calculate_crc16(const uint8_t *data, size_t length);
static ymodem_result_t ymodem_wait_for_byte(ymodem_handle_t *handle, uint8_t expected_byte);
static ymodem_result_t ymodem_send_packet(ymodem_handle_t *handle, uint8_t header,
                                         const uint8_t *data, size_t data_size);
static ymodem_result_t ymodem_receive_header_packet(ymodem_handle_t *handle);
static ymodem_result_t ymodem_receive_data_packet(ymodem_handle_t *handle);
static ymodem_result_t ymodem_send_file_header(ymodem_handle_t *handle);
static ymodem_result_t ymodem_send_data_packet(ymodem_handle_t *handle);
static ymodem_result_t ymodem_send_eot(ymodem_handle_t *handle);
static void ymodem_change_state(ymodem_handle_t *handle, ymodem_state_t new_state);
static void ymodem_reset_transfer(ymodem_handle_t *handle);
static ymodem_result_t ymodem_serial_put_byte(ymodem_handle_t *handle, uint8_t byte);
static ymodem_result_t ymodem_receive_packet(ymodem_handle_t *handle,
                                           uint32_t *packet_length,
                                           uint32_t timeout);

/* CRC-16-CCITT Lookup Table */
static const uint16_t crc16_table[256] = {
    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
    0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
    0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
    0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
    0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
    0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
    0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
    0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
    0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
    0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
    0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
    0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
    0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
    0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
    0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
    0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
    0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
    0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
    0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
    0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
    0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
    0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
    0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
    0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
    0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
    0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
    0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
    0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
    0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
    0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};

/* Private Functions */

static uint16_t ymodem_calculate_crc16(const uint8_t *data, size_t length)
{
    uint16_t crc = 0;

    for (size_t i = 0; i < length; i++) {
        crc = (crc << 8) ^ crc16_table[((crc >> 8) ^ data[i]) & 0xFF];
    }

    return crc;
}

static ymodem_result_t ymodem_serial_put_byte(ymodem_handle_t *handle, uint8_t param)
{
    if(handle->write_cb == NULL){
        return YMODEM_ERROR_IO;
    }
    return handle->write_cb(&param, 1);
}

static void ymodem_change_state(ymodem_handle_t *handle, ymodem_state_t new_state)
{
    if (handle && handle->state != new_state) {
        handle->state = new_state;

        if (handle->status_cb) {
            handle->status_cb(new_state, handle->last_error);
        }
    }
}

static ymodem_result_t ymodem_receive_packet(ymodem_handle_t *handle,
                                           uint32_t *packet_length,
                                           uint32_t timeout)
{
    uint32_t crc;
    uint32_t packet_size = 0;
    ymodem_result_t status;
    uint8_t char1;

    *packet_length = 0;

    if(handle->read_cb == NULL){
        return YMODEM_ERROR_IO;
    }

    status = handle->read_cb(&char1, 1, timeout);

    if (status == YMODEM_OK)
    {
        switch (char1)
        {
        case YMODEM_SOH:
            packet_size = YMODEM_PACKET_SIZE;
            break;
        case YMODEM_STX:
            packet_size = YMODEM_PACKET_1K_SIZE;
            break;
        case YMODEM_EOT:
            break;
        case YMODEM_CAN:
            if((handle->read_cb(&char1, 1, timeout) == YMODEM_OK) && (char1 == YMODEM_CAN))
            {
                packet_size = 2;
            }
            else
            {
                status = YMODEM_ERROR_PROTOCOL;
            }
            break;
        default:
            status = YMODEM_ERROR_PROTOCOL;
            break;
        }

        handle->rx_buffer[0] = char1;

        if (packet_size >= YMODEM_PACKET_SIZE)
        {
            #define PACKET_NUMBER_INDEX      1
            #define PACKET_CNUMBER_INDEX     2
            #define PACKET_DATA_INDEX        3

            status = handle->read_cb(&handle->rx_buffer[PACKET_NUMBER_INDEX],
                                   packet_size + 3, timeout);

            if (status == YMODEM_OK)
            {
                if (handle->rx_buffer[PACKET_NUMBER_INDEX] !=
                    ((handle->rx_buffer[PACKET_CNUMBER_INDEX]) ^ 0xFF))
                {
                    packet_size = 0;
                    status = YMODEM_ERROR_SEQUENCE;
                }
                else
                {
                    crc = handle->rx_buffer[packet_size + PACKET_DATA_INDEX] << 8;
                    crc += handle->rx_buffer[packet_size + PACKET_DATA_INDEX + 1];

                    if (ymodem_calculate_crc16(&handle->rx_buffer[PACKET_DATA_INDEX],
                                             packet_size) != crc)
                    {
                        packet_size = 0;
                        status = YMODEM_ERROR_CRC;
                    }
                }
            }
            else
            {
                packet_size = 0;
            }
        }
    }

    *packet_length = packet_size;
    return status;
}

/* Public Functions */
ymodem_result_t ymodem_init(ymodem_handle_t *handle,
                           ymodem_read_cb_t read_cb,
                           ymodem_write_cb_t write_cb)
{
    if (handle == NULL || read_cb == NULL || write_cb == NULL) {
        return YMODEM_ERROR_INVALID_PARAM;
    }

    memset(handle, 0, sizeof(ymodem_handle_t));

    handle->read_cb = read_cb;
    handle->write_cb = write_cb;
    handle->state = YMODEM_STATE_IDLE;
    handle->timeout_ms = YMODEM_TIMEOUT_MS;
    handle->max_retries = YMODEM_MAX_RETRIES;
    handle->use_1k_blocks = true;

    return YMODEM_OK;
}

void ymodem_set_data_callbacks(ymodem_handle_t *handle,
                              ymodem_data_write_cb_t data_write_cb,
                              ymodem_data_read_cb_t data_read_cb)
{
    if (handle) {
        handle->data_write_cb = data_write_cb;
        handle->data_read_cb = data_read_cb;
    }
}

void ymodem_set_event_callbacks(ymodem_handle_t *handle,
                               ymodem_progress_cb_t progress_cb,
                               ymodem_status_cb_t status_cb)
{
    if (handle) {
        handle->progress_cb = progress_cb;
        handle->status_cb = status_cb;
    }
}

void ymodem_set_config(ymodem_handle_t *handle,
                      bool use_1k_blocks,
                      uint32_t timeout_ms,
                      uint8_t max_retries)
{
    if (handle) {
        handle->use_1k_blocks = use_1k_blocks;
        handle->timeout_ms = timeout_ms;
        handle->max_retries = max_retries;
    }
}

ymodem_result_t ymodem_receive(ymodem_handle_t *handle)
{
    uint32_t i, packet_length, session_done = 0, file_done, errors = 0;
    uint32_t session_begin = 0, packets_received = 0, bytes_received = 0;
    uint32_t filesize;
    uint8_t *file_ptr, *data_ptr;
    uint8_t file_size[YMODEM_MAX_FILE_SIZE_LEN];
    ymodem_result_t result = YMODEM_OK;

    if((handle == NULL) || (handle->data_write_cb == NULL)){
        return YMODEM_ERROR_INVALID_PARAM;
    }

    ymodem_reset_transfer(handle);
    ymodem_change_state(handle, YMODEM_STATE_WAIT_C);

    // Iniciar con 'C' para CRC16
    ymodem_serial_put_byte(handle, YMODEM_C);

    while ((session_done == 0) && (result == YMODEM_OK))
    {
        packets_received = 0;
        file_done = 0;
        while ((file_done == 0) && (result == YMODEM_OK))
        {
            switch (ymodem_receive_packet(handle, &packet_length, handle->timeout_ms))
            {
            case YMODEM_OK:
                errors = 0;
                switch (packet_length)
                {
                case 2:  /* Abort by sender */
                    ymodem_serial_put_byte(handle, YMODEM_ACK);
                    result = YMODEM_ERROR_CANCELLED;
                    break;

                case 0:  /* End of transmission */
                    ymodem_serial_put_byte(handle, YMODEM_ACK);
                    file_done = 1;
                    ymodem_change_state(handle, YMODEM_STATE_RECEIVE_EOT);
                    break;

                default: /* Normal packet */
                    if (handle->rx_buffer[1] != (packets_received & 0xFF))
                    {
                        ymodem_serial_put_byte(handle, YMODEM_NAK);
                    }
                    else
                    {
                        if (packets_received == 0)
                        {
                            /* File name packet */
                            if (handle->rx_buffer[3] != 0)
                            {
                                /* File name extraction */
                                i = 0;
                                file_ptr = handle->rx_buffer + 3;
                                while ((*file_ptr != 0) && (i < YMODEM_MAX_FILENAME_LEN))
                                {
                                    handle->filename[i++] = *file_ptr++;
                                }
                                handle->filename[i] = '\0';

                                /* File size extraction */
                                i = 0;
                                file_ptr++;
                                while ((*file_ptr != ' ') && (i < YMODEM_MAX_FILE_SIZE_LEN))
                                {
                                    file_size[i++] = *file_ptr++;
                                }
                                file_size[i] = '\0';

                                filesize = atoi((const char *)file_size);
                                handle->file_size = filesize;
                                handle->bytes_transferred = 0;

                                // Notificar progreso
                                if (handle->progress_cb) {
                                    handle->progress_cb(handle->file_size, 0, handle->filename);
                                }

                                // ACK y solicitar siguiente paquete con CRC
                                ymodem_serial_put_byte(handle, YMODEM_ACK);
                                ymodem_serial_put_byte(handle, YMODEM_C);
                            }
                            else
                            {
                                /* File header packet is empty, end session */
                                ymodem_serial_put_byte(handle, YMODEM_ACK);
                                file_done = 1;
                                session_done = 1;
                                ymodem_change_state(handle, YMODEM_STATE_COMPLETE);
                            }
                        }
                        else
                        {
                            /* Data packet */
                            data_ptr = handle->rx_buffer + 3;

                            // Manejar padding del último paquete
                            if((handle->file_size - bytes_received) < YMODEM_PACKET_1K_SIZE)
                            {
                                // Eliminar bytes de relleno (0x1A)
                                while(data_ptr[packet_length-1] == 0x1A)
                                {
                                    packet_length--;
                                }
                            }

                            // Escribir datos
                            if(handle->data_write_cb(data_ptr, packet_length, bytes_received) == YMODEM_OK)
                            {
                                bytes_received += packet_length;
                                handle->bytes_transferred = bytes_received;

                                // Actualizar progreso
                                if (handle->progress_cb) {
                                    handle->progress_cb(handle->file_size, bytes_received, handle->filename);
                                }

                                ymodem_serial_put_byte(handle, YMODEM_ACK);
                            }
                            else
                            {
                                /* Error writing data */
                                ymodem_serial_put_byte(handle, YMODEM_CAN);
                                ymodem_serial_put_byte(handle, YMODEM_CAN);
                                result = YMODEM_ERROR_IO;
                                ymodem_change_state(handle, YMODEM_STATE_ERROR);
                            }
                        }
                        packets_received++;
                        session_begin = 1;
                        ymodem_change_state(handle, YMODEM_STATE_RECEIVE_DATA);
                    }
                    break;
                }
                break;

            case YMODEM_ERROR_CANCELLED:
                ymodem_serial_put_byte(handle, YMODEM_CAN);
                ymodem_serial_put_byte(handle, YMODEM_CAN);
                result = YMODEM_ERROR_CANCELLED;
                ymodem_change_state(handle, YMODEM_STATE_ERROR);
                break;

            default:
                if (session_begin > 0)
                {
                    errors++;
                }
                if (errors > handle->max_retries)
                {
                    /* Abort communication */
                    ymodem_serial_put_byte(handle, YMODEM_CAN);
                    ymodem_serial_put_byte(handle, YMODEM_CAN);
                    result = YMODEM_ERROR_TIMEOUT;
                    ymodem_change_state(handle, YMODEM_STATE_ERROR);
                }
                else
                {
                    ymodem_serial_put_byte(handle, YMODEM_C);
                }
                break;
            }
        }
    }

    if (result == YMODEM_OK) {
        ymodem_change_state(handle, YMODEM_STATE_COMPLETE);
    }

    return result;
}

ymodem_result_t ymodem_transmit(ymodem_handle_t *handle,
                               const char *filename,
                               uint32_t file_size)
{
    // Implementación simplificada - puedes expandirla según necesites
    (void)handle;
    (void)filename;
    (void)file_size;
    return YMODEM_ERROR_IO; // No implementado por ahora
}

void ymodem_abort(ymodem_handle_t *handle)
{
    if (handle && handle->transfer_active) {
        ymodem_serial_put_byte(handle, YMODEM_CAN);
        ymodem_serial_put_byte(handle, YMODEM_CAN);
        handle->transfer_active = false;
        ymodem_change_state(handle, YMODEM_STATE_IDLE);
    }
}

ymodem_state_t ymodem_get_state(const ymodem_handle_t *handle)
{
    return handle ? handle->state : YMODEM_STATE_ERROR;
}

ymodem_result_t ymodem_get_last_error(const ymodem_handle_t *handle)
{
    return handle ? handle->last_error : YMODEM_ERROR_INVALID_PARAM;
}

void ymodem_deinit(ymodem_handle_t *handle)
{
    if (handle) {
        memset(handle, 0, sizeof(ymodem_handle_t));
    }
}

static void ymodem_reset_transfer(ymodem_handle_t *handle)
{
    if (handle) {
        handle->packet_number = 0;
        handle->expected_packet = 0;
        handle->bytes_transferred = 0;
        handle->file_size = 0;
        handle->filename[0] = '\0';
        handle->transfer_active = true;
        handle->last_error = YMODEM_OK;
    }
}

// Funciones no utilizadas pero requeridas para evitar warnings
static ymodem_result_t ymodem_wait_for_byte(ymodem_handle_t *handle, uint8_t expected_byte)
{
    (void)handle;
    (void)expected_byte;
    return YMODEM_OK;
}

static ymodem_result_t ymodem_send_packet(ymodem_handle_t *handle, uint8_t header,
                                         const uint8_t *data, size_t data_size)
{
    (void)handle;
    (void)header;
    (void)data;
    (void)data_size;
    return YMODEM_OK;
}

static ymodem_result_t ymodem_receive_header_packet(ymodem_handle_t *handle)
{
    (void)handle;
    return YMODEM_OK;
}

static ymodem_result_t ymodem_receive_data_packet(ymodem_handle_t *handle)
{
    (void)handle;
    return YMODEM_OK;
}

static ymodem_result_t ymodem_send_file_header(ymodem_handle_t *handle)
{
    (void)handle;
    return YMODEM_OK;
}

static ymodem_result_t ymodem_send_data_packet(ymodem_handle_t *handle)
{
    (void)handle;
    return YMODEM_OK;
}

static ymodem_result_t ymodem_send_eot(ymodem_handle_t *handle)
{
    (void)handle;
    return YMODEM_OK;
}
