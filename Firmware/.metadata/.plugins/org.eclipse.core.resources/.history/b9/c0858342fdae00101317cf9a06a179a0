/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "dma.h"
#include "rng.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "lwprintf.h"
#include <string.h>
#include <stdio.h>
#include <ymodem.h>
#include "resource_manager.h"
#include "hardware/stm32f4xx/stm32f4xx_crypto.h"
#include "rng/trng.h"
#include "path.h"
#include "version.h"
#include "update/update.h"
#include "security/verify.h"
#include "drivers/memory/flash/internal/stm32f4xx_flash_driver.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
ymodem_handle_t ymodem;
const uint8_t* pemUpdtSignPublicKey;
size_t pemUpdtSignPublicKeyLen;

UpdateSettings updateSettings;
UpdateContext updateContext;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
	ITM_SendChar(ch);

	return ch;
}


// User-provided read function (example for UART)
COM_StatusTypeDef uart_read(uint8_t *data, size_t size, uint32_t timeout_ms) {
	return HAL_UART_Receive(&huart2, data, size, timeout_ms);

}

// User-provided write function (example for UART)
COM_StatusTypeDef uart_write(const uint8_t *data, size_t size) {

	return HAL_UART_Transmit(&huart2, data, size, 2000);

}

// User data callback to process received data
COM_StatusTypeDef data_callback(uint8_t *data, size_t length, uint32_t offset) {

	error_t error;
	//write to flash
	error = updateProcess(&updateContext, data, length);

	return error;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	error_t error;
	cboot_error_t cerror;
	COM_StatusTypeDef result;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_RNG_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  for(uint8_t i = 0; i < 15; i++)
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
	  HAL_Delay(100);
  }
  HAL_Delay(1000);
//	printf("user application started...\r\n!");
//
//	COM_StatusTypeDef result;
//
//	// Initialize YMODEM with user I/O functions
	ymodem_init(&ymodem, uart_read, uart_write);
//
//	// Start YMODEM reception
////	result = ymodem_receive(&ymodem, data_callback);
//	DirEntry dir;
//	if(resSearchFile("/data/test.txt", &dir) == NO_ERROR)
//	{
//		printf("archivo encontrado: %d\r\n", (int)dir.dataLength);
//		resGetData("/data/test.txt", (const uint8_t **)&data, &len);
//
//		printf("%s\r\n", data);
//	}
//	else
//	{
//		printf("not found\r\n");
//	}
	if(resGetData("/keys/rsa_public_key.pem", &pemUpdtSignPublicKey, &pemUpdtSignPublicKeyLen) != NO_ERROR)
	{
		printf("public key not found!\r\n");

		Error_Handler();
	}
	else
	{
		printf("Public key found!");
	}
	//->criptografia
	error = stm32f4xxCryptoInit();
	if(error)
	{
		printf("failed hardware crypto!");
		Error_Handler();
	}
	//generador de numeros aleatorios
	error = trngInit();
	if(error)
	{
		printf("failed trng init");
		Error_Handler();
	}

    //User update settings security configuration
    updateSettings.imageInCrypto.verifySettings.verifyMethod    = VERIFY_METHOD_SIGNATURE;
    updateSettings.imageInCrypto.verifySettings.signAlgo        = VERIFY_SIGN_RSA;
    updateSettings.imageInCrypto.verifySettings.signHashAlgo    = SHA256_HASH_ALGO;
    updateSettings.imageInCrypto.verifySettings.signKey         = (const char_t*) pemUpdtSignPublicKey;
    updateSettings.imageInCrypto.verifySettings.signKeyLen      = pemUpdtSignPublicKeyLen;
    updateSettings.imageInCrypto.cipherAlgo                     = AES_CIPHER_ALGO;
    updateSettings.imageInCrypto.cipherMode                     = CIPHER_MODE_CBC;
    updateSettings.imageInCrypto.cipherKey                      = (const uint8_t *)"aa3ff7d43cc015682c7dfd00de9379e7";
    updateSettings.imageInCrypto.cipherKeyLen                   = 32;

    //User update settings primary memory configuration
    updateSettings.memories[0].memoryRole 			   = MEMORY_ROLE_PRIMARY;
    updateSettings.memories[0].memoryType 			   = MEMORY_TYPE_FLASH;
    updateSettings.memories[0].driver     			   = &stm32f4xxFlashDriver;
    updateSettings.memories[0].nbSlots    			   = 2;
    //User update settings primary memory slot 0 configuration
    updateSettings.memories[0].slots[0].type 		   = SLOT_TYPE_DIRECT;
    updateSettings.memories[0].slots[0].cType 		= SLOT_CONTENT_APP;
    updateSettings.memories[0].slots[0].memParent 	= &updateSettings.memories[0];
    updateSettings.memories[0].slots[0].addr 		   = 0x08020000;
    updateSettings.memories[0].slots[0].size 		   = 0x60000; //128x3 = 384kb

    //User update setting primary memory slot 1 configuration
    updateSettings.memories[0].slots[1].type 		   = SLOT_TYPE_DIRECT;
    updateSettings.memories[0].slots[1].cType 		= SLOT_CONTENT_APP | SLOT_CONTENT_BACKUP;
    updateSettings.memories[0].slots[1].memParent 	= &updateSettings.memories[0];
    updateSettings.memories[0].slots[1].addr 		   = 0x08080000;
    updateSettings.memories[0].slots[1].size 		   = 0x60000;	//128x3 = 384kb

    //Initialize IAP update context
    cerror = updateInit(&updateContext, &updateSettings);

    if(cerror)
    {
    	printf("failed to initialize IAP\r\n"); // in application programming
    	Error_Handler();
    }

    printf("Receiving firmware update image...\r\n");

    result = ymodem_receive(&ymodem, data_callback);

    if(result == COM_OK)
    {
    	printf("firmware receive ok!");

    	cerror = updateFinalize(&updateContext);

    	if(cerror != CBOOT_NO_ERROR)
    	{
    		printf("failed to finalize firmware\r\n");
    	}

    	error = updateReboot(&updateContext);

    	if(cerror != CBOOT_NO_ERROR)
    	{
    		printf("failed reboot\r\n");
    	}
    }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		LED1_GPIO_Port->ODR ^= LED1_Pin;
		HAL_Delay(1000);
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
