#include "ymodem.h"
#include <string.h>

/* Private Function Prototypes */
static uint16_t ymodem_calculate_crc16(const uint8_t* data, uint32_t size);
static ymodem_result_t ymodem_receive_packet(ymodem_handle_t *handle,
                                           uint32_t *packet_length,
                                           uint32_t timeout);
static ymodem_result_t ymodem_serial_put_byte(ymodem_handle_t *handle, uint8_t byte);

/* CRC-16 Calculation (igual que tu versión) */
static uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
{
    uint32_t crc = crc_in;
    uint32_t in = byte | 0x100;

    do
    {
        crc <<= 1;
        in <<= 1;
        if(in & 0x100)
            ++crc;
        if(crc & 0x10000)
            crc ^= 0x1021;
    }
    while(!(in & 0x10000));

    return crc & 0xffffu;
}

static uint16_t ymodem_calculate_crc16(const uint8_t* data, uint32_t size)
{
    uint32_t crc = 0;
    const uint8_t* dataEnd = data + size;

    while(data < dataEnd)
        crc = UpdateCRC16(crc, *data++);

    crc = UpdateCRC16(crc, 0);
    crc = UpdateCRC16(crc, 0);

    return crc & 0xffffu;
}

static ymodem_result_t ymodem_serial_put_byte(ymodem_handle_t *handle, uint8_t param)
{
    if(handle->write_cb == NULL){
        return YMODEM_ERROR_IO;
    }
    return handle->write_cb(&param, 1);
}

static ymodem_result_t ymodem_receive_packet(ymodem_handle_t *handle,
                                           uint32_t *packet_length,
                                           uint32_t timeout)
{
    uint32_t crc;
    uint32_t packet_size = 0;
    ymodem_result_t status;
    uint8_t char1;

    *packet_length = 0;

    if(handle->read_cb == NULL){
        return YMODEM_ERROR_IO;
    }

    status = handle->read_cb(&char1, 1, timeout);

    if (status == YMODEM_OK)
    {
        switch (char1)
        {
        case YMODEM_SOH:
            packet_size = YMODEM_PACKET_SIZE;
            break;
        case YMODEM_STX:
            packet_size = YMODEM_PACKET_1K_SIZE;
            break;
        case YMODEM_EOT:
            break;
        case YMODEM_CAN:
            if((handle->read_cb(&char1, 1, timeout) == YMODEM_OK) && (char1 == YMODEM_CAN))
            {
                packet_size = 2;
            }
            else
            {
                status = YMODEM_ERROR_PROTOCOL;
            }
            break;
        default:
            status = YMODEM_ERROR_PROTOCOL;
            break;
        }

        handle->packet_data[0] = char1;

        if (packet_size >= YMODEM_PACKET_SIZE)
        {
            // Índices compatibles con tu código
            #define PACKET_NUMBER_INDEX      1
            #define PACKET_CNUMBER_INDEX     2
            #define PACKET_DATA_INDEX        3
            #define PACKET_OVERHEAD_SIZE     4  // SOH+num+cnum+data

            status = handle->read_cb(&handle->packet_data[PACKET_NUMBER_INDEX],
                                   packet_size + 3, timeout); // +3 para num, cnum, y 2 bytes CRC

            if (status == YMODEM_OK)
            {
                // Verificar complemento del número de paquete
                if (handle->packet_data[PACKET_NUMBER_INDEX] !=
                    ((handle->packet_data[PACKET_CNUMBER_INDEX]) ^ 0xFF))
                {
                    packet_size = 0;
                    status = YMODEM_ERROR_SEQUENCE;
                }
                else
                {
                    // Verificar CRC
                    crc = handle->packet_data[packet_size + PACKET_DATA_INDEX] << 8;
                    crc += handle->packet_data[packet_size + PACKET_DATA_INDEX + 1];

                    if (ymodem_calculate_crc16(&handle->packet_data[PACKET_DATA_INDEX],
                                             packet_size) != crc)
                    {
                        packet_size = 0;
                        status = YMODEM_ERROR_CRC;
                    }
                }
            }
            else
            {
                packet_size = 0;
            }
        }
    }

    *packet_length = packet_size;
    return status;
}

/* Public Functions */
ymodem_result_t ymodem_init(ymodem_handle_t *handle,
                           ymodem_read_cb_t read_cb,
                           ymodem_write_cb_t write_cb)
{
    if (handle == NULL || read_cb == NULL || write_cb == NULL) {
        return YMODEM_ERROR_INVALID_PARAM;
    }

    memset(handle, 0, sizeof(ymodem_handle_t));

    handle->read_cb = read_cb;
    handle->write_cb = write_cb;
    handle->state = YMODEM_STATE_IDLE;
    handle->timeout_ms = YMODEM_TIMEOUT_MS;
    handle->max_retries = YMODEM_MAX_RETRIES;

    return YMODEM_OK;
}

void ymodem_set_data_callbacks(ymodem_handle_t *handle,
                              ymodem_data_write_cb_t data_write_cb)
{
    if (handle) {
        handle->data_write_cb = data_write_cb;
    }
}

void ymodem_set_event_callbacks(ymodem_handle_t *handle,
                               ymodem_progress_cb_t progress_cb,
                               ymodem_status_cb_t status_cb)
{
    if (handle) {
        handle->progress_cb = progress_cb;
        handle->status_cb = status_cb;
    }
}

void ymodem_set_config(ymodem_handle_t *handle,
                      uint32_t timeout_ms,
                      uint8_t max_retries)
{
    if (handle) {
        handle->timeout_ms = timeout_ms;
        handle->max_retries = max_retries;
    }
}

ymodem_result_t ymodem_receive(ymodem_handle_t *handle)
{
    uint32_t i, packet_length, session_done = 0, file_done, errors = 0;
    uint32_t session_begin = 0, packets_received = 0, bytes_received = 0;
    uint32_t filesize;
    uint8_t *file_ptr, *data_ptr;
    uint8_t file_size[YMODEM_MAX_FILE_SIZE_LENGTH];
    ymodem_result_t result = YMODEM_OK;

    if((handle == NULL) || (handle->data_write_cb == NULL)){
        return YMODEM_ERROR_INVALID_PARAM;
    }

    ymodem_change_state(handle, YMODEM_STATE_WAIT_C);

    // Iniciar con 'C' para CRC16
    ymodem_serial_put_byte(handle, YMODEM_C);

    while ((session_done == 0) && (result == YMODEM_OK))
    {
        packets_received = 0;
        file_done = 0;
        while ((file_done == 0) && (result == YMODEM_OK))
        {
            switch (ymodem_receive_packet(handle, &packet_length, handle->timeout_ms))
            {
            case YMODEM_OK:
                errors = 0;
                switch (packet_length)
                {
                case 2:  /* Abort by sender */
                    ymodem_serial_put_byte(handle, YMODEM_ACK);
                    result = YMODEM_ERROR_CANCELLED;
                    break;

                case 0:  /* End of transmission */
                    ymodem_serial_put_byte(handle, YMODEM_ACK);
                    file_done = 1;
                    ymodem_change_state(handle, YMODEM_STATE_RECEIVE_EOT);
                    break;

                default: /* Normal packet */
                    if (handle->packet_data[1] != (packets_received & 0xFF))
                    {
                        ymodem_serial_put_byte(handle, YMODEM_NAK);
                    }
                    else
                    {
                        if (packets_received == 0)
                        {
                            /* File name packet */
                            if (handle->packet_data[3] != 0)
                            {
                                /* File name extraction */
                                i = 0;
                                file_ptr = handle->packet_data + 3;
                                while ((*file_ptr != 0) && (i < YMODEM_MAX_FILENAME_LENGTH))
                                {
                                    handle->filename[i++] = *file_ptr++;
                                }
                                handle->filename[i] = '\0';

                                /* File size extraction */
                                i = 0;
                                file_ptr++;
                                while ((*file_ptr != ' ') && (i < YMODEM_MAX_FILE_SIZE_LENGTH))
                                {
                                    file_size[i++] = *file_ptr++;
                                }
                                file_size[i] = '\0';

                                filesize = atoi((const char *)file_size);
                                handle->file_size = filesize;
                                handle->bytes_transferred = 0;

                                // Notificar progreso
                                if (handle->progress_cb) {
                                    handle->progress_cb(handle->file_size, 0, handle->filename);
                                }

                                // ACK y solicitar siguiente paquete con CRC
                                ymodem_serial_put_byte(handle, YMODEM_ACK);
                                ymodem_serial_put_byte(handle, YMODEM_C);
                            }
                            else
                            {
                                /* File header packet is empty, end session */
                                ymodem_serial_put_byte(handle, YMODEM_ACK);
                                file_done = 1;
                                session_done = 1;
                                ymodem_change_state(handle, YMODEM_STATE_COMPLETE);
                            }
                        }
                        else
                        {
                            /* Data packet */
                            data_ptr = handle->packet_data + 3;

                            // Manejar padding del último paquete
                            if((handle->file_size - bytes_received) < YMODEM_PACKET_1K_SIZE)
                            {
                                // Eliminar bytes de relleno (0x1A)
                                while(data_ptr[packet_length-1] == 0x1A)
                                {
                                    packet_length--;
                                }
                            }

                            // Escribir datos
                            if(handle->data_write_cb(data_ptr, packet_length, bytes_received) == YMODEM_OK)
                            {
                                bytes_received += packet_length;
                                handle->bytes_transferred = bytes_received;

                                // Actualizar progreso
                                if (handle->progress_cb) {
                                    handle->progress_cb(handle->file_size, bytes_received, handle->filename);
                                }

                                ymodem_serial_put_byte(handle, YMODEM_ACK);
                            }
                            else
                            {
                                /* Error writing data */
                                ymodem_serial_put_byte(handle, YMODEM_CAN);
                                ymodem_serial_put_byte(handle, YMODEM_CAN);
                                result = YMODEM_ERROR_IO;
                                ymodem_change_state(handle, YMODEM_STATE_ERROR);
                            }
                        }
                        packets_received++;
                        session_begin = 1;
                        ymodem_change_state(handle, YMODEM_STATE_RECEIVE_DATA);
                    }
                    break;
                }
                break;

            case YMODEM_ERROR_CANCELLED:
                ymodem_serial_put_byte(handle, YMODEM_CAN);
                ymodem_serial_put_byte(handle, YMODEM_CAN);
                result = YMODEM_ERROR_CANCELLED;
                ymodem_change_state(handle, YMODEM_STATE_ERROR);
                break;

            default:
                if (session_begin > 0)
                {
                    errors++;
                }
                if (errors > handle->max_retries)
                {
                    /* Abort communication */
                    ymodem_serial_put_byte(handle, YMODEM_CAN);
                    ymodem_serial_put_byte(handle, YMODEM_CAN);
                    result = YMODEM_ERROR_TIMEOUT;
                    ymodem_change_state(handle, YMODEM_STATE_ERROR);
                }
                else
                {
                    ymodem_serial_put_byte(handle, YMODEM_C);
                }
                break;
            }
        }
    }

    if (result == YMODEM_OK) {
        ymodem_change_state(handle, YMODEM_STATE_COMPLETE);
    }

    return result;
}

void ymodem_abort(ymodem_handle_t *handle)
{
    if (handle && handle->transfer_active) {
        ymodem_serial_put_byte(handle, YMODEM_CAN);
        ymodem_serial_put_byte(handle, YMODEM_CAN);
        handle->transfer_active = false;
        ymodem_change_state(handle, YMODEM_STATE_IDLE);
    }
}

ymodem_state_t ymodem_get_state(const ymodem_handle_t *handle)
{
    return handle ? handle->state : YMODEM_STATE_ERROR;
}

ymodem_result_t ymodem_get_last_error(const ymodem_handle_t *handle)
{
    return handle ? handle->last_error : YMODEM_ERROR_INVALID_PARAM;
}

void ymodem_deinit(ymodem_handle_t *handle)
{
    if (handle) {
        memset(handle, 0, sizeof(ymodem_handle_t));
    }
}

/* Función auxiliar para cambio de estado */
static void ymodem_change_state(ymodem_handle_t *handle, ymodem_state_t new_state)
{
    if (handle && handle->state != new_state) {
        handle->state = new_state;

        if (handle->status_cb) {
            handle->status_cb(new_state, handle->last_error);
        }
    }
}
