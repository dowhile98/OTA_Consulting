/**
 * @file ymodem.c
 * @brief YMODEM Protocol Implementation for Embedded Systems
 * @version 1.0
 */

#include <string.h>
#include <ymodem.h>

/* Private Function Prototypes */
static uint16_t ymodem_calculate_crc16(const uint8_t *data, size_t length);
static ymodem_result_t ymodem_wait_for_byte(ymodem_handle_t *handle, uint8_t expected_byte);
static ymodem_result_t ymodem_send_packet(ymodem_handle_t *handle, uint8_t header,
                                         const uint8_t *data, size_t data_size);
static ymodem_result_t ymodem_receive_header_packet(ymodem_handle_t *handle);
static ymodem_result_t ymodem_receive_data_packet(ymodem_handle_t *handle);
static ymodem_result_t ymodem_send_file_header(ymodem_handle_t *handle);
static ymodem_result_t ymodem_send_data_packet(ymodem_handle_t *handle);
static ymodem_result_t ymodem_send_eot(ymodem_handle_t *handle);
static void ymodem_change_state(ymodem_handle_t *handle, ymodem_state_t new_state);
static void ymodem_reset_transfer(ymodem_handle_t *handle);

/* CRC-16-CCITT Lookup Table */
static const uint16_t crc16_table[256] = {
    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
    0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
    0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
    0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
    0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
    0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
    0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
    0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
    0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
    0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
    0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
    0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
    0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
    0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
    0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
    0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
    0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
    0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
    0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
    0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
    0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
    0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
    0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
    0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
    0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
    0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
    0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
    0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
    0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
    0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};

ymodem_result_t ymodem_init(ymodem_handle_t *handle,
                           ymodem_read_cb_t read_cb,
                           ymodem_write_cb_t write_cb)
{
    if (handle == NULL || read_cb == NULL || write_cb == NULL) {
        return YMODEM_ERROR_INVALID_PARAM;
    }

    memset(handle, 0, sizeof(ymodem_handle_t));

    handle->read_cb = read_cb;
    handle->write_cb = write_cb;
    handle->state = YMODEM_STATE_IDLE;
    handle->timeout_ms = YMODEM_TIMEOUT_MS;
    handle->max_retries = YMODEM_MAX_RETRIES;
    handle->use_1k_blocks = true;

    /* Buffers are now static arrays, no allocation needed */

    return YMODEM_OK;
}

void ymodem_set_data_callbacks(ymodem_handle_t *handle,
                              ymodem_data_write_cb_t data_write_cb,
                              ymodem_data_read_cb_t data_read_cb)
{
    if (handle) {
        handle->data_write_cb = data_write_cb;
        handle->data_read_cb = data_read_cb;
    }
}

void ymodem_set_event_callbacks(ymodem_handle_t *handle,
                               ymodem_progress_cb_t progress_cb,
                               ymodem_status_cb_t status_cb)
{
    if (handle) {
        handle->progress_cb = progress_cb;
        handle->status_cb = status_cb;
    }
}

void ymodem_set_config(ymodem_handle_t *handle,
                      bool use_1k_blocks,
                      uint32_t timeout_ms,
                      uint8_t max_retries)
{
    if (handle) {
        handle->use_1k_blocks = use_1k_blocks;
        handle->timeout_ms = timeout_ms;
        handle->max_retries = max_retries;
    }
}

ymodem_result_t ymodem_receive(ymodem_handle_t *handle)
{
    ymodem_result_t result = YMODEM_OK;

    if (handle == NULL) {
        return YMODEM_ERROR_INVALID_PARAM;
    }

    ymodem_reset_transfer(handle);
    ymodem_change_state(handle, YMODEM_STATE_WAIT_C);

    /* Send 'C' to start CRC mode */
    uint8_t c_byte = YMODEM_C;
    result = handle->write_cb(&c_byte, 1);
    if (result != YMODEM_OK) {
        ymodem_change_state(handle, YMODEM_STATE_ERROR);
        handle->last_error = result;
        return result;
    }

    /* Receive file header packet */
    result = ymodem_receive_header_packet(handle);
    if (result != YMODEM_OK) {
        ymodem_change_state(handle, YMODEM_STATE_ERROR);
        handle->last_error = result;
        return result;
    }

    ymodem_change_state(handle, YMODEM_STATE_RECEIVE_DATA);

    /* Receive data packets */
    uint32_t packet_count = 0;
    while (handle->state == YMODEM_STATE_RECEIVE_DATA) {
        packet_count++;

        result = ymodem_receive_data_packet(handle);

        if (result == YMODEM_OK) {
            /* Update progress */
            if (handle->progress_cb) {
                handle->progress_cb(handle->file_size,
                                  handle->bytes_transferred,
                                  handle->filename);
            }

            /* Check if transfer is complete */
            if (handle->file_size > 0 && handle->bytes_transferred >= handle->file_size) {
                break;
            }
        } else {
            ymodem_change_state(handle, YMODEM_STATE_ERROR);
            handle->last_error = result;
            break;
        }

        /* Safety check to prevent infinite loop */
        if (packet_count > 10000) {
            result = YMODEM_ERROR_PROTOCOL;
            ymodem_change_state(handle, YMODEM_STATE_ERROR);
            handle->last_error = result;
            break;
        }
    }

    if (result == YMODEM_OK) {
        ymodem_change_state(handle, YMODEM_STATE_COMPLETE);

        /* Send final ACK */
        uint8_t ack = YMODEM_ACK;
        handle->write_cb(&ack, 1);
    }

    return result;
}

ymodem_result_t ymodem_transmit(ymodem_handle_t *handle,
                               const char *filename,
                               uint32_t file_size)
{
    ymodem_result_t result = YMODEM_OK;

    if (handle == NULL || filename == NULL) {
        return YMODEM_ERROR_INVALID_PARAM;
    }

    ymodem_reset_transfer(handle);

    /* Store file info */
    strncpy(handle->filename, filename, YMODEM_MAX_FILENAME_LEN - 1);
    handle->filename[YMODEM_MAX_FILENAME_LEN - 1] = '\0';
    handle->file_size = file_size;

    ymodem_change_state(handle, YMODEM_STATE_WAIT_C);

    /* Wait for receiver to send 'C' */
    result = ymodem_wait_for_byte(handle, YMODEM_C);
    if (result != YMODEM_OK) {
        ymodem_change_state(handle, YMODEM_STATE_ERROR);
        handle->last_error = result;
        return result;
    }

    ymodem_change_state(handle, YMODEM_STATE_RECEIVE_HEADER);

    /* Send file header */
    result = ymodem_send_file_header(handle);
    if (result != YMODEM_OK) {
        ymodem_change_state(handle, YMODEM_STATE_ERROR);
        handle->last_error = result;
        return result;
    }

    ymodem_change_state(handle, YMODEM_STATE_RECEIVE_DATA);

    /* Send data packets */
    while (handle->bytes_transferred < handle->file_size &&
           handle->state == YMODEM_STATE_RECEIVE_DATA) {

        result = ymodem_send_data_packet(handle);
        if (result != YMODEM_OK) {
            ymodem_change_state(handle, YMODEM_STATE_ERROR);
            handle->last_error = result;
            break;
        }

        /* Update progress */
        if (handle->progress_cb) {
            handle->progress_cb(handle->file_size,
                              handle->bytes_transferred,
                              handle->filename);
        }
    }

    if (result == YMODEM_OK) {
        /* Send EOT */
        result = ymodem_send_eot(handle);
        if (result == YMODEM_OK) {
            ymodem_change_state(handle, YMODEM_STATE_COMPLETE);
        } else {
            ymodem_change_state(handle, YMODEM_STATE_ERROR);
            handle->last_error = result;
        }
    }

    return result;
}

void ymodem_abort(ymodem_handle_t *handle)
{
    if (handle && handle->transfer_active) {
        /* Send CAN bytes to abort transfer */
        uint8_t can_bytes[3] = {YMODEM_CAN, YMODEM_CAN, YMODEM_CAN};
        handle->write_cb(can_bytes, 3);

        handle->transfer_active = false;
        ymodem_change_state(handle, YMODEM_STATE_IDLE);
    }
}

ymodem_state_t ymodem_get_state(const ymodem_handle_t *handle)
{
    return handle ? handle->state : YMODEM_STATE_ERROR;
}

ymodem_result_t ymodem_get_last_error(const ymodem_handle_t *handle)
{
    return handle ? handle->last_error : YMODEM_ERROR_INVALID_PARAM;
}

void ymodem_deinit(ymodem_handle_t *handle)
{
    if (handle) {
        /* Buffers are static, no need to free */
        memset(handle, 0, sizeof(ymodem_handle_t));
    }
}

/* Private Functions */

static uint16_t ymodem_calculate_crc16(const uint8_t *data, size_t length)
{
    uint16_t crc = 0;

    for (size_t i = 0; i < length; i++) {
        crc = (crc << 8) ^ crc16_table[((crc >> 8) ^ data[i]) & 0xFF];
    }

    return crc;
}

static ymodem_result_t ymodem_wait_for_byte(ymodem_handle_t *handle, uint8_t expected_byte)
{
    uint8_t received_byte;
    uint8_t retries = 0;

    while (retries < handle->max_retries) {
        ymodem_result_t result = handle->read_cb(&received_byte, 1, handle->timeout_ms);

        if (result == YMODEM_OK) {
            if (received_byte == expected_byte) {
                return YMODEM_OK;
            } else if (received_byte == YMODEM_CAN) {
                return YMODEM_ERROR_CANCELLED;
            }
        }

        retries++;
    }

    return YMODEM_ERROR_TIMEOUT;
}

static ymodem_result_t ymodem_send_packet(ymodem_handle_t *handle, uint8_t header,
                                         const uint8_t *data, size_t data_size)
{
    uint8_t retries = 0;
    ymodem_result_t result;

    while (retries < handle->max_retries) {
        /* Prepare packet */
        size_t packet_size = 0;
        handle->tx_buffer[packet_size++] = header;
        handle->tx_buffer[packet_size++] = handle->packet_number;
        handle->tx_buffer[packet_size++] = 0xFF - handle->packet_number;

        /* Copy data */
        if (data != NULL && data_size > 0) {
            memcpy(&handle->tx_buffer[packet_size], data, data_size);
            packet_size += data_size;

            /* Calculate and append CRC */
            uint16_t crc = ymodem_calculate_crc16(data, data_size);
            handle->tx_buffer[packet_size++] = (crc >> 8) & 0xFF;
            handle->tx_buffer[packet_size++] = crc & 0xFF;
        } else {
            /* For empty packets, send zero CRC */
            handle->tx_buffer[packet_size++] = 0x00;
            handle->tx_buffer[packet_size++] = 0x00;
        }

        /* Send packet */
        result = handle->write_cb(handle->tx_buffer, packet_size);
        if (result != YMODEM_OK) {
            retries++;
            continue;
        }

        /* Wait for ACK */
        uint8_t response;
        result = handle->read_cb(&response, 1, handle->timeout_ms);

        if (result == YMODEM_OK) {
            if (response == YMODEM_ACK) {
                handle->packet_number = (handle->packet_number + 1) & 0xFF;
                return YMODEM_OK;
            } else if (response == YMODEM_CAN) {
                return YMODEM_ERROR_CANCELLED;
            } else if (response == YMODEM_NAK) {
                /* Retry on NAK */
                retries++;
                continue;
            }
        }

        retries++;
    }

    return YMODEM_ERROR_TIMEOUT;
}

static ymodem_result_t ymodem_receive_header_packet(ymodem_handle_t *handle)
{
    uint8_t retries = 0;

    while (retries < handle->max_retries) {
        /* Read packet header */
        uint8_t header[3];
        ymodem_result_t result = handle->read_cb(header, 3, handle->timeout_ms);

        if (result != YMODEM_OK) {
            retries++;
            continue;
        }

        /* Check packet type */
        if (header[0] != YMODEM_SOH) {
            if (header[0] == YMODEM_CAN) {
                return YMODEM_ERROR_CANCELLED;
            }
            retries++;
            continue;
        }

        /* Check sequence numbers - header packet should be 0 */
        if (header[1] != 0x00 || header[2] != 0xFF) {
            retries++;
            continue;
        }

        /* Read filename and file size */
        uint8_t file_info[128];
        result = handle->read_cb(file_info, 128, handle->timeout_ms);
        if (result != YMODEM_OK) {
            retries++;
            continue;
        }

        /* Read CRC */
        uint8_t crc_bytes[2];
        result = handle->read_cb(crc_bytes, 2, handle->timeout_ms);
        if (result != YMODEM_OK) {
            retries++;
            continue;
        }

        /* Verify CRC */
        uint16_t received_crc = (crc_bytes[0] << 8) | crc_bytes[1];
        uint16_t calculated_crc = ymodem_calculate_crc16(file_info, 128);

        if (received_crc != calculated_crc) {
            retries++;
            continue;
        }

        /* Parse filename and file size */
        size_t filename_len = 0;
        while (filename_len < YMODEM_MAX_FILENAME_LEN - 1 &&
               file_info[filename_len] != '\0') {
            handle->filename[filename_len] = file_info[filename_len];
            filename_len++;
        }
        handle->filename[filename_len] = '\0';

        /* Parse file size */
        char file_size_str[YMODEM_MAX_FILE_SIZE_LEN] = {0};
        size_t size_idx = filename_len + 1;
        size_t size_len = 0;

        while (size_len < YMODEM_MAX_FILE_SIZE_LEN - 1 &&
               file_info[size_idx] != '\0' &&
               file_info[size_idx] != ' ') {
            file_size_str[size_len++] = file_info[size_idx++];
        }
        file_size_str[size_len] = '\0';

        handle->file_size = strtoul(file_size_str, NULL, 10);

        /* Set expected packet to 1 for first data packet */
        handle->expected_packet = 1;

        /* Send ACK */
        uint8_t ack = YMODEM_ACK;
        result = handle->write_cb(&ack, 1);
        if (result != YMODEM_OK) {
            return result;
        }

        /* Send 'C' for next packet */
        uint8_t c_byte = YMODEM_C;
        result = handle->write_cb(&c_byte, 1);
        if (result != YMODEM_OK) {
            return result;
        }

        return YMODEM_OK;
    }

    return YMODEM_ERROR_TIMEOUT;
}

static ymodem_result_t ymodem_receive_data_packet(ymodem_handle_t *handle)
{
    uint8_t retries = 0;

    while (retries < handle->max_retries) {
        /* Read packet header */
        uint8_t header[3];
        ymodem_result_t result = handle->read_cb(header, 3, handle->timeout_ms);

        if (result != YMODEM_OK) {
            retries++;
            continue;
        }

        /* Check for EOT */
        if (header[0] == YMODEM_EOT) {
            /* Send NAK first, then ACK after second EOT */
            uint8_t nak = YMODEM_NAK;
            handle->write_cb(&nak, 1);

            /* Wait for second EOT */
            result = handle->read_cb(header, 1, handle->timeout_ms);
            if (result == YMODEM_OK && header[0] == YMODEM_EOT) {
                uint8_t ack = YMODEM_ACK;
                handle->write_cb(&ack, 1);
                ymodem_change_state(handle, YMODEM_STATE_RECEIVE_EOT);
                return YMODEM_OK;
            }

            retries++;
            continue;
        }

        /* Check for CAN */
        if (header[0] == YMODEM_CAN) {
            return YMODEM_ERROR_CANCELLED;
        }

        /* Check packet type */
        uint8_t packet_type = header[0];
        size_t data_size = 0;

        if (packet_type == YMODEM_SOH) {
            data_size = YMODEM_DATA_SIZE;
        } else if (packet_type == YMODEM_STX) {
            data_size = YMODEM_DATA_1K_SIZE;
        } else {
            retries++;
            continue;
        }

        /* Check sequence numbers */
        uint8_t packet_num = header[1];
        uint8_t packet_num_complement = header[2];

        if (packet_num != handle->expected_packet) {
            /* Sequence error - send NAK and retry */
            uint8_t nak = YMODEM_NAK;
            handle->write_cb(&nak, 1);
            retries++;
            continue;
        }

        if (packet_num_complement != (0xFF - handle->expected_packet)) {
            /* Complement error - send NAK and retry */
            uint8_t nak = YMODEM_NAK;
            handle->write_cb(&nak, 1);
            retries++;
            continue;
        }

        /* Read data */
        result = handle->read_cb(handle->rx_buffer, data_size, handle->timeout_ms);
        if (result != YMODEM_OK) {
            retries++;
            continue;
        }

        /* Read CRC */
        uint8_t crc_bytes[2];
        result = handle->read_cb(crc_bytes, 2, handle->timeout_ms);
        if (result != YMODEM_OK) {
            retries++;
            continue;
        }

        /* Verify CRC */
        uint16_t received_crc = (crc_bytes[0] << 8) | crc_bytes[1];
        uint16_t calculated_crc = ymodem_calculate_crc16(handle->rx_buffer, data_size);

        if (received_crc != calculated_crc) {
            /* CRC error - send NAK and retry */
            uint8_t nak = YMODEM_NAK;
            handle->write_cb(&nak, 1);
            retries++;
            continue;
        }

        /* Calculate actual data to write (handle last packet) */
        size_t actual_data_size = data_size;
        if (handle->file_size > 0) {
            uint32_t remaining = handle->file_size - handle->bytes_transferred;
            if (remaining < data_size) {
                actual_data_size = remaining;
            }
        }

        /* Write data to storage */
        if (handle->data_write_cb && actual_data_size > 0) {
            result = handle->data_write_cb(handle->rx_buffer, actual_data_size, handle->bytes_transferred);
            if (result != YMODEM_OK) {
                return result;
            }
        }

        handle->bytes_transferred += actual_data_size;
        handle->expected_packet = (handle->expected_packet + 1) & 0xFF;

        /* Send ACK */
        uint8_t ack = YMODEM_ACK;
        result = handle->write_cb(&ack, 1);
        if (result != YMODEM_OK) {
            return result;
        }

        return YMODEM_OK;
    }

    return YMODEM_ERROR_TIMEOUT;
}

static ymodem_result_t ymodem_send_file_header(ymodem_handle_t *handle)
{
    /* Prepare file information packet */
    uint8_t file_info[128] = {0};
    size_t info_len = 0;

    /* Copy filename */
    size_t filename_len = strlen(handle->filename);
    memcpy(&file_info[info_len], handle->filename, filename_len);
    info_len += filename_len;
    file_info[info_len++] = '\0';

    /* Copy file size as string */
    char file_size_str[YMODEM_MAX_FILE_SIZE_LEN];
    snprintf(file_size_str, sizeof(file_size_str), "%lu", (unsigned long)handle->file_size);
    size_t size_len = strlen(file_size_str);
    memcpy(&file_info[info_len], file_size_str, size_len);
    info_len += size_len;
    file_info[info_len++] = '\0';

    /* Fill remaining with zeros */
    while (info_len < 128) {
        file_info[info_len++] = 0;
    }

    /* Send header packet */
    return ymodem_send_packet(handle, YMODEM_SOH, file_info, 128);
}

static ymodem_result_t ymodem_send_data_packet(ymodem_handle_t *handle)
{
    size_t max_data_size = handle->use_1k_blocks ? YMODEM_DATA_1K_SIZE : YMODEM_DATA_SIZE;
    size_t remaining = handle->file_size - handle->bytes_transferred;
    size_t data_size = (remaining < max_data_size) ? remaining : max_data_size;

    /* Read data from storage */
    if (handle->data_read_cb) {
        ymodem_result_t result = handle->data_read_cb(handle->tx_buffer, data_size, handle->bytes_transferred);
        if (result != YMODEM_OK) {
            return result;
        }
    }

    /* Pad with EOF if needed (for last packet) */
    if (data_size < max_data_size) {
        memset(&handle->tx_buffer[data_size], 0x1A, max_data_size - data_size);
    }

    /* Send packet */
    uint8_t header = handle->use_1k_blocks ? YMODEM_STX : YMODEM_SOH;
    ymodem_result_t result = ymodem_send_packet(handle, header, handle->tx_buffer, max_data_size);

    if (result == YMODEM_OK) {
        handle->bytes_transferred += data_size;
    }

    return result;
}

static ymodem_result_t ymodem_send_eot(ymodem_handle_t *handle)
{
    uint8_t retries = 0;

    while (retries < handle->max_retries) {
        /* Send EOT */
        uint8_t eot = YMODEM_EOT;
        ymodem_result_t result = handle->write_cb(&eot, 1);
        if (result != YMODEM_OK) {
            retries++;
            continue;
        }

        /* Wait for ACK */
        uint8_t response;
        result = handle->read_cb(&response, 1, handle->timeout_ms);

        if (result == YMODEM_OK) {
            if (response == YMODEM_ACK) {
                return YMODEM_OK;
            } else if (response == YMODEM_CAN) {
                return YMODEM_ERROR_CANCELLED;
            } else if (response == YMODEM_NAK) {
                /* Retry on NAK */
                retries++;
                continue;
            }
        }

        retries++;
    }

    return YMODEM_ERROR_TIMEOUT;
}

static void ymodem_change_state(ymodem_handle_t *handle, ymodem_state_t new_state)
{
    if (handle && handle->state != new_state) {
        handle->state = new_state;

        if (handle->status_cb) {
            handle->status_cb(new_state, handle->last_error);
        }
    }
}

static void ymodem_reset_transfer(ymodem_handle_t *handle)
{
    if (handle) {
        handle->packet_number = 0;
        handle->expected_packet = 0;
        handle->bytes_transferred = 0;
        handle->file_size = 0;
        handle->filename[0] = '\0';
        handle->transfer_active = true;
        handle->last_error = YMODEM_OK;
    }
}
