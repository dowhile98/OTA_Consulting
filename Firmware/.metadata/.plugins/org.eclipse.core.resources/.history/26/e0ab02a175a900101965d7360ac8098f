/*
 * ymodem.h
 *
 * Librería YMODEM completa y portable en C para sistemas embebidos.
 *
 * Características:
 * - Independiente de la plataforma: El usuario provee las funciones de lectura y escritura.
 * - Sin memoria dinámica: No utiliza malloc/free. El usuario provee los buffers.
 * - Soporte para envío (send) y recepción (receive).
 * - Transferencia por lotes (múltiples archivos) en una sola sesión.
 * - Verificación de errores mediante CRC-16.
 * - Reintentos y timeouts para una comunicación robusta.
 *
 * Para usarla:
 * 1. Incluye este archivo en tu proyecto.
 * 2. Implementa tus propias funciones de lectura y escritura de un byte (ej. para tu UART).
 * 3. Crea una instancia de la estructura 'ymodem_state_t'.
 * 4. Inicializa la estructura con punteros a tus funciones y buffers.
 * 5. Llama a ymodem_send() o ymodem_receive().
 *
 * Autor: Gemini
 * Versión: 1.0
 */

#ifndef YMODEM_H
#define YMODEM_H


#ifdef __cplusplus
extern "C"{
#endif


#include <stdint.h>
#include <stddef.h>


/*Defines ------------------------------------------------------------------------------------------------------*/
//Packet structure defines
#define PACKET_HEADER_SIZE      ((uint32_t)3)
#define PACKET_DATA_INDEX       ((uint32_t)4)
#define PACKET_START_INDEX      ((uint32_t)1)
#define PACKET_NUMBER_INDEX     ((uint32_t)2)
#define PACKET_CNUMBER_INDEX    ((uint32_t)3)
#define PACKET_TRAILER_SIZE     ((uint32_t)2)
#define PACKET_OVERHEAD_SIZE    (PACKET_HEADER_SIZE + PACKET_TRAILER_SIZE - 1)
#define PACKET_SIZE             ((uint32_t)128)
#define PACKET_1K_SIZE          ((uint32_t)1024)

/* /-------- Packet in IAP memory ------------------------------------------\
 * | 0      |  1    |  2     |  3   |  4      | ... | n+4     | n+5  | n+6  |
 * |------------------------------------------------------------------------|
 * | unused | start | number | !num | data[0] | ... | data[n] | crc0 | crc1 |
 * \------------------------------------------------------------------------/
 * the first byte is left unused for memory alignment reasons                 */

#define FILE_NAME_LENGTH        ((uint32_t)64)
#define FILE_SIZE_LENGTH        ((uint32_t)16)

#define SOH                     ((uint8_t)0x01)  /* start of 128-byte data packet */
#define STX                     ((uint8_t)0x02)  /* start of 1024-byte data packet */
#define EOT                     ((uint8_t)0x04)  /* end of transmission */
#define ACK                     ((uint8_t)0x06)  /* acknowledge */
#define NAK                     ((uint8_t)0x15)  /* negative acknowledge */
#define CA                      ((uint32_t)0x18) /* two of these in succession aborts transfer */
#define CRC16                   ((uint8_t)0x43)  /* 'C' == 0x43, request 16-bit CRC */
#define NEGATIVE_BYTE           ((uint8_t)0xFF)

#define ABORT1                  ((uint8_t)0x41)  /* 'A' == 0x41, abort by user */
#define ABORT2                  ((uint8_t)0x61)  /* 'a' == 0x61, abort by user */

#define NAK_TIMEOUT             ((uint32_t)0x100000)
#define DOWNLOAD_TIMEOUT        ((uint32_t)10000) /* 10 second retry delay */
#define MAX_ERRORS              ((uint32_t)5)

/*Typedefs ----------------------------------------------------------------------------------------------------------*/
/**
 * @brief  Comm status structures definition
 **/

typedef enum
{
  COM_OK       = 0x00,
  COM_ERROR    = 0x01,
  COM_ABORT    = 0x02,
  COM_TIMEOUT  = 0x03,
  COM_DATA     = 0x04,
  COM_LIMIT    = 0x05
} COM_StatusTypeDef;


typedef COM_StatusTypeDef  (*Ymodem_read_t)(uint8_t *buff, size_t length, uint32_t timeout_ms);
typedef COM_StatusTypeDef (*Ymodem_write_t)(uint8_t *buff, size_t length, uint32_t timeout_ms);

typedef struct Ymodem{
	Ymodem_read_t read_fn;
	Ymodem_write_t write_fn;
	uint8_t aFileName[FILE_NAME_LENGTH];
	uint8_t aPacketData[PACKET_1K_SIZE + PACKET_DATA_INDEX + PACKET_TRAILER_SIZE];
	uint32_t size ;
}Ymodem_t;

typedef COM_StatusTypeDef (*Ymodem_rx_callback)(char *filename, uint32_t size, uint8_t *data, size_t length);

/*Function prototype ---------------------------------------------------------------------------------------------*/


//Y-Modem public related routines
COM_StatusTypeDef Ymodem_receive(Ymodem_t *state, Ymodem_rx_callback callback);
COM_StatusTypeDef Ymodem_Receive(uint32_t *p_size);

#ifdef __cplusplus
}
#endif
#endif // YMODEM_H
