
OTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036ac  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08003838  08003838  00004838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003978  08003978  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003978  08003978  00004978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003980  08003980  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003980  08003980  00004980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003984  08003984  00004984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003988  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005010  2**0
                  CONTENTS
 10 .bss          00000040  20000010  20000010  00005010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  00005010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004998  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015b2  00000000  00000000  000099d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000570  00000000  00000000  0000af90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003e2  00000000  00000000  0000b500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020899  00000000  00000000  0000b8e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000075d5  00000000  00000000  0002c17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1f80  00000000  00000000  00033750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f56d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000016a8  00000000  00000000  000f5714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  000f6dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800381c 	.word	0x0800381c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800381c 	.word	0x0800381c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_ldivmod>:
 8000a74:	b97b      	cbnz	r3, 8000a96 <__aeabi_ldivmod+0x22>
 8000a76:	b972      	cbnz	r2, 8000a96 <__aeabi_ldivmod+0x22>
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	bfbe      	ittt	lt
 8000a7c:	2000      	movlt	r0, #0
 8000a7e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000a82:	e006      	blt.n	8000a92 <__aeabi_ldivmod+0x1e>
 8000a84:	bf08      	it	eq
 8000a86:	2800      	cmpeq	r0, #0
 8000a88:	bf1c      	itt	ne
 8000a8a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000a8e:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a92:	f000 ba09 	b.w	8000ea8 <__aeabi_idiv0>
 8000a96:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a9a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9e:	2900      	cmp	r1, #0
 8000aa0:	db09      	blt.n	8000ab6 <__aeabi_ldivmod+0x42>
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db1a      	blt.n	8000adc <__aeabi_ldivmod+0x68>
 8000aa6:	f000 f883 	bl	8000bb0 <__udivmoddi4>
 8000aaa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab2:	b004      	add	sp, #16
 8000ab4:	4770      	bx	lr
 8000ab6:	4240      	negs	r0, r0
 8000ab8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db1b      	blt.n	8000af8 <__aeabi_ldivmod+0x84>
 8000ac0:	f000 f876 	bl	8000bb0 <__udivmoddi4>
 8000ac4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000acc:	b004      	add	sp, #16
 8000ace:	4240      	negs	r0, r0
 8000ad0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ad4:	4252      	negs	r2, r2
 8000ad6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ada:	4770      	bx	lr
 8000adc:	4252      	negs	r2, r2
 8000ade:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ae2:	f000 f865 	bl	8000bb0 <__udivmoddi4>
 8000ae6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aee:	b004      	add	sp, #16
 8000af0:	4240      	negs	r0, r0
 8000af2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af6:	4770      	bx	lr
 8000af8:	4252      	negs	r2, r2
 8000afa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000afe:	f000 f857 	bl	8000bb0 <__udivmoddi4>
 8000b02:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0a:	b004      	add	sp, #16
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b28:	f000 b9be 	b.w	8000ea8 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f83c 	bl	8000bb0 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_d2lz>:
 8000b44:	b538      	push	{r3, r4, r5, lr}
 8000b46:	2200      	movs	r2, #0
 8000b48:	2300      	movs	r3, #0
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	460d      	mov	r5, r1
 8000b4e:	f7ff ff69 	bl	8000a24 <__aeabi_dcmplt>
 8000b52:	b928      	cbnz	r0, 8000b60 <__aeabi_d2lz+0x1c>
 8000b54:	4620      	mov	r0, r4
 8000b56:	4629      	mov	r1, r5
 8000b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b5c:	f000 b80a 	b.w	8000b74 <__aeabi_d2ulz>
 8000b60:	4620      	mov	r0, r4
 8000b62:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b66:	f000 f805 	bl	8000b74 <__aeabi_d2ulz>
 8000b6a:	4240      	negs	r0, r0
 8000b6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b70:	bd38      	pop	{r3, r4, r5, pc}
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2ulz>:
 8000b74:	b5d0      	push	{r4, r6, r7, lr}
 8000b76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <__aeabi_d2ulz+0x34>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	4606      	mov	r6, r0
 8000b7c:	460f      	mov	r7, r1
 8000b7e:	f7ff fcdf 	bl	8000540 <__aeabi_dmul>
 8000b82:	f000 f993 	bl	8000eac <__aeabi_d2uiz>
 8000b86:	4604      	mov	r4, r0
 8000b88:	f7ff fc60 	bl	800044c <__aeabi_ui2d>
 8000b8c:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <__aeabi_d2ulz+0x38>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f7ff fcd6 	bl	8000540 <__aeabi_dmul>
 8000b94:	4602      	mov	r2, r0
 8000b96:	460b      	mov	r3, r1
 8000b98:	4630      	mov	r0, r6
 8000b9a:	4639      	mov	r1, r7
 8000b9c:	f7ff fb18 	bl	80001d0 <__aeabi_dsub>
 8000ba0:	f000 f984 	bl	8000eac <__aeabi_d2uiz>
 8000ba4:	4621      	mov	r1, r4
 8000ba6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ba8:	3df00000 	.word	0x3df00000
 8000bac:	41f00000 	.word	0x41f00000

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	468e      	mov	lr, r1
 8000bb8:	4604      	mov	r4, r0
 8000bba:	4688      	mov	r8, r1
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d14a      	bne.n	8000c56 <__udivmoddi4+0xa6>
 8000bc0:	428a      	cmp	r2, r1
 8000bc2:	4617      	mov	r7, r2
 8000bc4:	d962      	bls.n	8000c8c <__udivmoddi4+0xdc>
 8000bc6:	fab2 f682 	clz	r6, r2
 8000bca:	b14e      	cbz	r6, 8000be0 <__udivmoddi4+0x30>
 8000bcc:	f1c6 0320 	rsb	r3, r6, #32
 8000bd0:	fa01 f806 	lsl.w	r8, r1, r6
 8000bd4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd8:	40b7      	lsls	r7, r6
 8000bda:	ea43 0808 	orr.w	r8, r3, r8
 8000bde:	40b4      	lsls	r4, r6
 8000be0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000be4:	fa1f fc87 	uxth.w	ip, r7
 8000be8:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bec:	0c23      	lsrs	r3, r4, #16
 8000bee:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bf2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bf6:	fb01 f20c 	mul.w	r2, r1, ip
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d909      	bls.n	8000c12 <__udivmoddi4+0x62>
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c04:	f080 80ea 	bcs.w	8000ddc <__udivmoddi4+0x22c>
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	f240 80e7 	bls.w	8000ddc <__udivmoddi4+0x22c>
 8000c0e:	3902      	subs	r1, #2
 8000c10:	443b      	add	r3, r7
 8000c12:	1a9a      	subs	r2, r3, r2
 8000c14:	b2a3      	uxth	r3, r4
 8000c16:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c1a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c22:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c26:	459c      	cmp	ip, r3
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0x8e>
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c30:	f080 80d6 	bcs.w	8000de0 <__udivmoddi4+0x230>
 8000c34:	459c      	cmp	ip, r3
 8000c36:	f240 80d3 	bls.w	8000de0 <__udivmoddi4+0x230>
 8000c3a:	443b      	add	r3, r7
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c42:	eba3 030c 	sub.w	r3, r3, ip
 8000c46:	2100      	movs	r1, #0
 8000c48:	b11d      	cbz	r5, 8000c52 <__udivmoddi4+0xa2>
 8000c4a:	40f3      	lsrs	r3, r6
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d905      	bls.n	8000c66 <__udivmoddi4+0xb6>
 8000c5a:	b10d      	cbz	r5, 8000c60 <__udivmoddi4+0xb0>
 8000c5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c60:	2100      	movs	r1, #0
 8000c62:	4608      	mov	r0, r1
 8000c64:	e7f5      	b.n	8000c52 <__udivmoddi4+0xa2>
 8000c66:	fab3 f183 	clz	r1, r3
 8000c6a:	2900      	cmp	r1, #0
 8000c6c:	d146      	bne.n	8000cfc <__udivmoddi4+0x14c>
 8000c6e:	4573      	cmp	r3, lr
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xc8>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 8105 	bhi.w	8000e82 <__udivmoddi4+0x2d2>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	4690      	mov	r8, r2
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	d0e5      	beq.n	8000c52 <__udivmoddi4+0xa2>
 8000c86:	e9c5 4800 	strd	r4, r8, [r5]
 8000c8a:	e7e2      	b.n	8000c52 <__udivmoddi4+0xa2>
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	f000 8090 	beq.w	8000db2 <__udivmoddi4+0x202>
 8000c92:	fab2 f682 	clz	r6, r2
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f040 80a4 	bne.w	8000de4 <__udivmoddi4+0x234>
 8000c9c:	1a8a      	subs	r2, r1, r2
 8000c9e:	0c03      	lsrs	r3, r0, #16
 8000ca0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca4:	b280      	uxth	r0, r0
 8000ca6:	b2bc      	uxth	r4, r7
 8000ca8:	2101      	movs	r1, #1
 8000caa:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cae:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cb6:	fb04 f20c 	mul.w	r2, r4, ip
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d907      	bls.n	8000cce <__udivmoddi4+0x11e>
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cc4:	d202      	bcs.n	8000ccc <__udivmoddi4+0x11c>
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	f200 80e0 	bhi.w	8000e8c <__udivmoddi4+0x2dc>
 8000ccc:	46c4      	mov	ip, r8
 8000cce:	1a9b      	subs	r3, r3, r2
 8000cd0:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cd4:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cd8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cdc:	fb02 f404 	mul.w	r4, r2, r4
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x144>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x142>
 8000cec:	429c      	cmp	r4, r3
 8000cee:	f200 80ca 	bhi.w	8000e86 <__udivmoddi4+0x2d6>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	1b1b      	subs	r3, r3, r4
 8000cf6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cfa:	e7a5      	b.n	8000c48 <__udivmoddi4+0x98>
 8000cfc:	f1c1 0620 	rsb	r6, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa22 f706 	lsr.w	r7, r2, r6
 8000d06:	431f      	orrs	r7, r3
 8000d08:	fa0e f401 	lsl.w	r4, lr, r1
 8000d0c:	fa20 f306 	lsr.w	r3, r0, r6
 8000d10:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d14:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d18:	4323      	orrs	r3, r4
 8000d1a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d1e:	fa1f fc87 	uxth.w	ip, r7
 8000d22:	fbbe f0f9 	udiv	r0, lr, r9
 8000d26:	0c1c      	lsrs	r4, r3, #16
 8000d28:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d2c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d30:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d34:	45a6      	cmp	lr, r4
 8000d36:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3a:	d909      	bls.n	8000d50 <__udivmoddi4+0x1a0>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d42:	f080 809c 	bcs.w	8000e7e <__udivmoddi4+0x2ce>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f240 8099 	bls.w	8000e7e <__udivmoddi4+0x2ce>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	443c      	add	r4, r7
 8000d50:	eba4 040e 	sub.w	r4, r4, lr
 8000d54:	fa1f fe83 	uxth.w	lr, r3
 8000d58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d60:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d64:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d68:	45a4      	cmp	ip, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1ce>
 8000d6c:	193c      	adds	r4, r7, r4
 8000d6e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d72:	f080 8082 	bcs.w	8000e7a <__udivmoddi4+0x2ca>
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d97f      	bls.n	8000e7a <__udivmoddi4+0x2ca>
 8000d7a:	3b02      	subs	r3, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d82:	eba4 040c 	sub.w	r4, r4, ip
 8000d86:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d8a:	4564      	cmp	r4, ip
 8000d8c:	4673      	mov	r3, lr
 8000d8e:	46e1      	mov	r9, ip
 8000d90:	d362      	bcc.n	8000e58 <__udivmoddi4+0x2a8>
 8000d92:	d05f      	beq.n	8000e54 <__udivmoddi4+0x2a4>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x1fe>
 8000d96:	ebb8 0203 	subs.w	r2, r8, r3
 8000d9a:	eb64 0409 	sbc.w	r4, r4, r9
 8000d9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000da2:	fa22 f301 	lsr.w	r3, r2, r1
 8000da6:	431e      	orrs	r6, r3
 8000da8:	40cc      	lsrs	r4, r1
 8000daa:	e9c5 6400 	strd	r6, r4, [r5]
 8000dae:	2100      	movs	r1, #0
 8000db0:	e74f      	b.n	8000c52 <__udivmoddi4+0xa2>
 8000db2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000db6:	0c01      	lsrs	r1, r0, #16
 8000db8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dbc:	b280      	uxth	r0, r0
 8000dbe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4638      	mov	r0, r7
 8000dc6:	463c      	mov	r4, r7
 8000dc8:	46b8      	mov	r8, r7
 8000dca:	46be      	mov	lr, r7
 8000dcc:	2620      	movs	r6, #32
 8000dce:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dd2:	eba2 0208 	sub.w	r2, r2, r8
 8000dd6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dda:	e766      	b.n	8000caa <__udivmoddi4+0xfa>
 8000ddc:	4601      	mov	r1, r0
 8000dde:	e718      	b.n	8000c12 <__udivmoddi4+0x62>
 8000de0:	4610      	mov	r0, r2
 8000de2:	e72c      	b.n	8000c3e <__udivmoddi4+0x8e>
 8000de4:	f1c6 0220 	rsb	r2, r6, #32
 8000de8:	fa2e f302 	lsr.w	r3, lr, r2
 8000dec:	40b7      	lsls	r7, r6
 8000dee:	40b1      	lsls	r1, r6
 8000df0:	fa20 f202 	lsr.w	r2, r0, r2
 8000df4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dfe:	b2bc      	uxth	r4, r7
 8000e00:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e04:	0c11      	lsrs	r1, r2, #16
 8000e06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0a:	fb08 f904 	mul.w	r9, r8, r4
 8000e0e:	40b0      	lsls	r0, r6
 8000e10:	4589      	cmp	r9, r1
 8000e12:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e16:	b280      	uxth	r0, r0
 8000e18:	d93e      	bls.n	8000e98 <__udivmoddi4+0x2e8>
 8000e1a:	1879      	adds	r1, r7, r1
 8000e1c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e20:	d201      	bcs.n	8000e26 <__udivmoddi4+0x276>
 8000e22:	4589      	cmp	r9, r1
 8000e24:	d81f      	bhi.n	8000e66 <__udivmoddi4+0x2b6>
 8000e26:	eba1 0109 	sub.w	r1, r1, r9
 8000e2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2e:	fb09 f804 	mul.w	r8, r9, r4
 8000e32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e36:	b292      	uxth	r2, r2
 8000e38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3c:	4542      	cmp	r2, r8
 8000e3e:	d229      	bcs.n	8000e94 <__udivmoddi4+0x2e4>
 8000e40:	18ba      	adds	r2, r7, r2
 8000e42:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e46:	d2c4      	bcs.n	8000dd2 <__udivmoddi4+0x222>
 8000e48:	4542      	cmp	r2, r8
 8000e4a:	d2c2      	bcs.n	8000dd2 <__udivmoddi4+0x222>
 8000e4c:	f1a9 0102 	sub.w	r1, r9, #2
 8000e50:	443a      	add	r2, r7
 8000e52:	e7be      	b.n	8000dd2 <__udivmoddi4+0x222>
 8000e54:	45f0      	cmp	r8, lr
 8000e56:	d29d      	bcs.n	8000d94 <__udivmoddi4+0x1e4>
 8000e58:	ebbe 0302 	subs.w	r3, lr, r2
 8000e5c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e60:	3801      	subs	r0, #1
 8000e62:	46e1      	mov	r9, ip
 8000e64:	e796      	b.n	8000d94 <__udivmoddi4+0x1e4>
 8000e66:	eba7 0909 	sub.w	r9, r7, r9
 8000e6a:	4449      	add	r1, r9
 8000e6c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e70:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e74:	fb09 f804 	mul.w	r8, r9, r4
 8000e78:	e7db      	b.n	8000e32 <__udivmoddi4+0x282>
 8000e7a:	4673      	mov	r3, lr
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1ce>
 8000e7e:	4650      	mov	r0, sl
 8000e80:	e766      	b.n	8000d50 <__udivmoddi4+0x1a0>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e6fd      	b.n	8000c82 <__udivmoddi4+0xd2>
 8000e86:	443b      	add	r3, r7
 8000e88:	3a02      	subs	r2, #2
 8000e8a:	e733      	b.n	8000cf4 <__udivmoddi4+0x144>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	443b      	add	r3, r7
 8000e92:	e71c      	b.n	8000cce <__udivmoddi4+0x11e>
 8000e94:	4649      	mov	r1, r9
 8000e96:	e79c      	b.n	8000dd2 <__udivmoddi4+0x222>
 8000e98:	eba1 0109 	sub.w	r1, r1, r9
 8000e9c:	46c4      	mov	ip, r8
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	e7c4      	b.n	8000e32 <__udivmoddi4+0x282>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <__aeabi_d2uiz>:
 8000eac:	004a      	lsls	r2, r1, #1
 8000eae:	d211      	bcs.n	8000ed4 <__aeabi_d2uiz+0x28>
 8000eb0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000eb4:	d211      	bcs.n	8000eda <__aeabi_d2uiz+0x2e>
 8000eb6:	d50d      	bpl.n	8000ed4 <__aeabi_d2uiz+0x28>
 8000eb8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ebc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ec0:	d40e      	bmi.n	8000ee0 <__aeabi_d2uiz+0x34>
 8000ec2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ec6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000eca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ece:	fa23 f002 	lsr.w	r0, r3, r2
 8000ed2:	4770      	bx	lr
 8000ed4:	f04f 0000 	mov.w	r0, #0
 8000ed8:	4770      	bx	lr
 8000eda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ede:	d102      	bne.n	8000ee6 <__aeabi_d2uiz+0x3a>
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ee4:	4770      	bx	lr
 8000ee6:	f04f 0000 	mov.w	r0, #0
 8000eea:	4770      	bx	lr

08000eec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <MX_GPIO_Init+0x30>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a08      	ldr	r2, [pc, #32]	@ (8000f1c <MX_GPIO_Init+0x30>)
 8000efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <MX_GPIO_Init+0x30>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800

08000f20 <eeprom_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t eeprom_init(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

	return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f36:	f000 f981 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3a:	f000 f82b 	bl	8000f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3e:	f7ff ffd5 	bl	8000eec <MX_GPIO_Init>
  MX_RNG_Init();
 8000f42:	f000 f8b1 	bl	80010a8 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
	stm32_log_init(NULL);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f002 fbe0 	bl	800370c <stm32_log_init>

	STM32_LOGI(TAG, "%s, %s\r\n", __DATE__, __TIME__);
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <main+0x54>)
 8000f4e:	681c      	ldr	r4, [r3, #0]
 8000f50:	f002 fbf6 	bl	8003740 <stm32_log_timestamp>
 8000f54:	4602      	mov	r2, r0
 8000f56:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <main+0x54>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	490b      	ldr	r1, [pc, #44]	@ (8000f88 <main+0x58>)
 8000f5c:	9102      	str	r1, [sp, #8]
 8000f5e:	490b      	ldr	r1, [pc, #44]	@ (8000f8c <main+0x5c>)
 8000f60:	9101      	str	r1, [sp, #4]
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	4613      	mov	r3, r2
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <main+0x60>)
 8000f68:	4621      	mov	r1, r4
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f002 fbf0 	bl	8003750 <stm32_log_write>

	ASSERT((eeprom_init() == HAL_OK));
 8000f70:	f7ff ffd6 	bl	8000f20 <eeprom_init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d002      	beq.n	8000f80 <main+0x50>
 8000f7a:	f000 f875 	bl	8001068 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000f7e:	bf00      	nop
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <main+0x50>
 8000f84:	20000000 	.word	0x20000000
 8000f88:	08003858 	.word	0x08003858
 8000f8c:	08003864 	.word	0x08003864
 8000f90:	08003840 	.word	0x08003840

08000f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b094      	sub	sp, #80	@ 0x50
 8000f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	f107 0320 	add.w	r3, r7, #32
 8000f9e:	2230      	movs	r2, #48	@ 0x30
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 fc05 	bl	80037b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	4b28      	ldr	r3, [pc, #160]	@ (8001060 <SystemClock_Config+0xcc>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc0:	4a27      	ldr	r2, [pc, #156]	@ (8001060 <SystemClock_Config+0xcc>)
 8000fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc8:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <SystemClock_Config+0xcc>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	4b22      	ldr	r3, [pc, #136]	@ (8001064 <SystemClock_Config+0xd0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a21      	ldr	r2, [pc, #132]	@ (8001064 <SystemClock_Config+0xd0>)
 8000fde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8001064 <SystemClock_Config+0xd0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001000:	2300      	movs	r3, #0
 8001002:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001004:	2308      	movs	r3, #8
 8001006:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001008:	23a8      	movs	r3, #168	@ 0xa8
 800100a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100c:	2302      	movs	r3, #2
 800100e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001010:	2307      	movs	r3, #7
 8001012:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fa67 	bl	80014ec <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001024:	f000 f820 	bl	8001068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102c:	2302      	movs	r3, #2
 800102e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001034:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001038:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800103a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800103e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2105      	movs	r1, #5
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fcc8 	bl	80019dc <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001052:	f000 f809 	bl	8001068 <Error_Handler>
  }
}
 8001056:	bf00      	nop
 8001058:	3750      	adds	r7, #80	@ 0x50
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40007000 	.word	0x40007000

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b085      	sub	sp, #20
 800106c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN Error_Handler_Debug */
	STM32_LOGE(TAG, "%s, line: %d", __FILE__,__LINE__);
 800106e:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <Error_Handler+0x34>)
 8001070:	681c      	ldr	r4, [r3, #0]
 8001072:	f002 fb65 	bl	8003740 <stm32_log_timestamp>
 8001076:	4602      	mov	r2, r0
 8001078:	4b08      	ldr	r3, [pc, #32]	@ (800109c <Error_Handler+0x34>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	21af      	movs	r1, #175	@ 0xaf
 800107e:	9102      	str	r1, [sp, #8]
 8001080:	4907      	ldr	r1, [pc, #28]	@ (80010a0 <Error_Handler+0x38>)
 8001082:	9101      	str	r1, [sp, #4]
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	4613      	mov	r3, r2
 8001088:	4a06      	ldr	r2, [pc, #24]	@ (80010a4 <Error_Handler+0x3c>)
 800108a:	4621      	mov	r1, r4
 800108c:	2001      	movs	r0, #1
 800108e:	f002 fb5f 	bl	8003750 <stm32_log_write>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001092:	b672      	cpsid	i
}
 8001094:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001096:	bf00      	nop
 8001098:	e7fd      	b.n	8001096 <Error_Handler+0x2e>
 800109a:	bf00      	nop
 800109c:	20000000 	.word	0x20000000
 80010a0:	0800388c 	.word	0x0800388c
 80010a4:	08003870 	.word	0x08003870

080010a8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <MX_RNG_Init+0x20>)
 80010ae:	4a07      	ldr	r2, [pc, #28]	@ (80010cc <MX_RNG_Init+0x24>)
 80010b0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <MX_RNG_Init+0x20>)
 80010b4:	f000 fe7e 	bl	8001db4 <HAL_RNG_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80010be:	f7ff ffd3 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000002c 	.word	0x2000002c
 80010cc:	50060800 	.word	0x50060800

080010d0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0b      	ldr	r2, [pc, #44]	@ (800110c <HAL_RNG_MspInit+0x3c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d10d      	bne.n	80010fe <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <HAL_RNG_MspInit+0x40>)
 80010e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ea:	4a09      	ldr	r2, [pc, #36]	@ (8001110 <HAL_RNG_MspInit+0x40>)
 80010ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010f0:	6353      	str	r3, [r2, #52]	@ 0x34
 80010f2:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <HAL_RNG_MspInit+0x40>)
 80010f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	50060800 	.word	0x50060800
 8001110:	40023800 	.word	0x40023800

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <HAL_MspInit+0x4c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	4a0f      	ldr	r2, [pc, #60]	@ (8001160 <HAL_MspInit+0x4c>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001128:	6453      	str	r3, [r2, #68]	@ 0x44
 800112a:	4b0d      	ldr	r3, [pc, #52]	@ (8001160 <HAL_MspInit+0x4c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <HAL_MspInit+0x4c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	4a08      	ldr	r2, [pc, #32]	@ (8001160 <HAL_MspInit+0x4c>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	@ 0x40
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_MspInit+0x4c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <NMI_Handler+0x4>

0800116c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <MemManage_Handler+0x4>

0800117c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <UsageFault_Handler+0x4>

0800118c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ba:	f000 f891 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <SystemInit+0x20>)
 80011ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ce:	4a05      	ldr	r2, [pc, #20]	@ (80011e4 <SystemInit+0x20>)
 80011d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001220 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011ec:	f7ff ffea 	bl	80011c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f0:	480c      	ldr	r0, [pc, #48]	@ (8001224 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011f2:	490d      	ldr	r1, [pc, #52]	@ (8001228 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f4:	4a0d      	ldr	r2, [pc, #52]	@ (800122c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001208:	4c0a      	ldr	r4, [pc, #40]	@ (8001234 <LoopFillZerobss+0x22>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001216:	f002 fad5 	bl	80037c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121a:	f7ff fe89 	bl	8000f30 <main>
  bx  lr    
 800121e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001220:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001228:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800122c:	08003988 	.word	0x08003988
  ldr r2, =_sbss
 8001230:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001234:	20000050 	.word	0x20000050

08001238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC_IRQHandler>
	...

0800123c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001240:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0d      	ldr	r2, [pc, #52]	@ (800127c <HAL_Init+0x40>)
 8001246:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800124a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800124c:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <HAL_Init+0x40>)
 8001252:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001258:	4b08      	ldr	r3, [pc, #32]	@ (800127c <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a07      	ldr	r2, [pc, #28]	@ (800127c <HAL_Init+0x40>)
 800125e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001264:	2003      	movs	r0, #3
 8001266:	f000 f90d 	bl	8001484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126a:	200f      	movs	r0, #15
 800126c:	f000 f808 	bl	8001280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001270:	f7ff ff50 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023c00 	.word	0x40023c00

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001288:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <HAL_InitTick+0x54>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <HAL_InitTick+0x58>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001296:	fbb3 f3f1 	udiv	r3, r3, r1
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f917 	bl	80014d2 <HAL_SYSTICK_Config>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00e      	b.n	80012cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d80a      	bhi.n	80012ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012bc:	f000 f8ed 	bl	800149a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c0:	4a06      	ldr	r2, [pc, #24]	@ (80012dc <HAL_InitTick+0x5c>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e000      	b.n	80012cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000004 	.word	0x20000004
 80012d8:	2000000c 	.word	0x2000000c
 80012dc:	20000008 	.word	0x20000008

080012e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_IncTick+0x20>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_IncTick+0x24>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <HAL_IncTick+0x24>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2000000c 	.word	0x2000000c
 8001304:	2000003c 	.word	0x2000003c

08001308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <HAL_GetTick+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	2000003c 	.word	0x2000003c

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	@ (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	@ (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	@ (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	@ 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	@ 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001450:	d301      	bcc.n	8001456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001452:	2301      	movs	r3, #1
 8001454:	e00f      	b.n	8001476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001456:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <SysTick_Config+0x40>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145e:	210f      	movs	r1, #15
 8001460:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001464:	f7ff ff8e 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <SysTick_Config+0x40>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146e:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <SysTick_Config+0x40>)
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010

08001484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff47 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ac:	f7ff ff5c 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff8e 	bl	80013d8 <NVIC_EncodePriority>
 80014bc:	4602      	mov	r2, r0
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff5d 	bl	8001384 <__NVIC_SetPriority>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ffb0 	bl	8001440 <SysTick_Config>
 80014e0:	4603      	mov	r3, r0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e267      	b.n	80019ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d075      	beq.n	80015f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800150a:	4b88      	ldr	r3, [pc, #544]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b04      	cmp	r3, #4
 8001514:	d00c      	beq.n	8001530 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001516:	4b85      	ldr	r3, [pc, #532]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800151e:	2b08      	cmp	r3, #8
 8001520:	d112      	bne.n	8001548 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001522:	4b82      	ldr	r3, [pc, #520]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800152a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800152e:	d10b      	bne.n	8001548 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	4b7e      	ldr	r3, [pc, #504]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d05b      	beq.n	80015f4 <HAL_RCC_OscConfig+0x108>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d157      	bne.n	80015f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e242      	b.n	80019ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001550:	d106      	bne.n	8001560 <HAL_RCC_OscConfig+0x74>
 8001552:	4b76      	ldr	r3, [pc, #472]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a75      	ldr	r2, [pc, #468]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e01d      	b.n	800159c <HAL_RCC_OscConfig+0xb0>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x98>
 800156a:	4b70      	ldr	r3, [pc, #448]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a6f      	ldr	r2, [pc, #444]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 8001570:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b6d      	ldr	r3, [pc, #436]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a6c      	ldr	r2, [pc, #432]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e00b      	b.n	800159c <HAL_RCC_OscConfig+0xb0>
 8001584:	4b69      	ldr	r3, [pc, #420]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a68      	ldr	r2, [pc, #416]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 800158a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b66      	ldr	r3, [pc, #408]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a65      	ldr	r2, [pc, #404]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 8001596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800159a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d013      	beq.n	80015cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff feb0 	bl	8001308 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff feac 	bl	8001308 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	@ 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e207      	b.n	80019ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	4b5b      	ldr	r3, [pc, #364]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0xc0>
 80015ca:	e014      	b.n	80015f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fe9c 	bl	8001308 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fe98 	bl	8001308 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	@ 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e1f3      	b.n	80019ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e6:	4b51      	ldr	r3, [pc, #324]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0xe8>
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d063      	beq.n	80016ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001602:	4b4a      	ldr	r3, [pc, #296]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00b      	beq.n	8001626 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800160e:	4b47      	ldr	r3, [pc, #284]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001616:	2b08      	cmp	r3, #8
 8001618:	d11c      	bne.n	8001654 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800161a:	4b44      	ldr	r3, [pc, #272]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d116      	bne.n	8001654 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	4b41      	ldr	r3, [pc, #260]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d005      	beq.n	800163e <HAL_RCC_OscConfig+0x152>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d001      	beq.n	800163e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e1c7      	b.n	80019ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4937      	ldr	r1, [pc, #220]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	e03a      	b.n	80016ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800165c:	4b34      	ldr	r3, [pc, #208]	@ (8001730 <HAL_RCC_OscConfig+0x244>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001662:	f7ff fe51 	bl	8001308 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166a:	f7ff fe4d 	bl	8001308 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e1a8      	b.n	80019ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167c:	4b2b      	ldr	r3, [pc, #172]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001688:	4b28      	ldr	r3, [pc, #160]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4925      	ldr	r1, [pc, #148]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
 800169c:	e015      	b.n	80016ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169e:	4b24      	ldr	r3, [pc, #144]	@ (8001730 <HAL_RCC_OscConfig+0x244>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fe30 	bl	8001308 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ac:	f7ff fe2c 	bl	8001308 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e187      	b.n	80019ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016be:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d036      	beq.n	8001744 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d016      	beq.n	800170c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <HAL_RCC_OscConfig+0x248>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e4:	f7ff fe10 	bl	8001308 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ec:	f7ff fe0c 	bl	8001308 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e167      	b.n	80019ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fe:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <HAL_RCC_OscConfig+0x240>)
 8001700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x200>
 800170a:	e01b      	b.n	8001744 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170c:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <HAL_RCC_OscConfig+0x248>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001712:	f7ff fdf9 	bl	8001308 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	e00e      	b.n	8001738 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171a:	f7ff fdf5 	bl	8001308 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d907      	bls.n	8001738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e150      	b.n	80019ce <HAL_RCC_OscConfig+0x4e2>
 800172c:	40023800 	.word	0x40023800
 8001730:	42470000 	.word	0x42470000
 8001734:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001738:	4b88      	ldr	r3, [pc, #544]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 800173a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1ea      	bne.n	800171a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 8097 	beq.w	8001880 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001756:	4b81      	ldr	r3, [pc, #516]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10f      	bne.n	8001782 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	4b7d      	ldr	r3, [pc, #500]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	4a7c      	ldr	r2, [pc, #496]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	@ 0x40
 8001772:	4b7a      	ldr	r3, [pc, #488]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800177e:	2301      	movs	r3, #1
 8001780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001782:	4b77      	ldr	r3, [pc, #476]	@ (8001960 <HAL_RCC_OscConfig+0x474>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800178a:	2b00      	cmp	r3, #0
 800178c:	d118      	bne.n	80017c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800178e:	4b74      	ldr	r3, [pc, #464]	@ (8001960 <HAL_RCC_OscConfig+0x474>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a73      	ldr	r2, [pc, #460]	@ (8001960 <HAL_RCC_OscConfig+0x474>)
 8001794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179a:	f7ff fdb5 	bl	8001308 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a2:	f7ff fdb1 	bl	8001308 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e10c      	b.n	80019ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001960 <HAL_RCC_OscConfig+0x474>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d106      	bne.n	80017d6 <HAL_RCC_OscConfig+0x2ea>
 80017c8:	4b64      	ldr	r3, [pc, #400]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017cc:	4a63      	ldr	r2, [pc, #396]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d4:	e01c      	b.n	8001810 <HAL_RCC_OscConfig+0x324>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x30c>
 80017de:	4b5f      	ldr	r3, [pc, #380]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 80017e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e2:	4a5e      	ldr	r2, [pc, #376]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ea:	4b5c      	ldr	r3, [pc, #368]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ee:	4a5b      	ldr	r2, [pc, #364]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f6:	e00b      	b.n	8001810 <HAL_RCC_OscConfig+0x324>
 80017f8:	4b58      	ldr	r3, [pc, #352]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 80017fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017fc:	4a57      	ldr	r2, [pc, #348]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	6713      	str	r3, [r2, #112]	@ 0x70
 8001804:	4b55      	ldr	r3, [pc, #340]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 8001806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001808:	4a54      	ldr	r2, [pc, #336]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 800180a:	f023 0304 	bic.w	r3, r3, #4
 800180e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d015      	beq.n	8001844 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff fd76 	bl	8001308 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181e:	e00a      	b.n	8001836 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f7ff fd72 	bl	8001308 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e0cb      	b.n	80019ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001836:	4b49      	ldr	r3, [pc, #292]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 8001838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0ee      	beq.n	8001820 <HAL_RCC_OscConfig+0x334>
 8001842:	e014      	b.n	800186e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001844:	f7ff fd60 	bl	8001308 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184a:	e00a      	b.n	8001862 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7ff fd5c 	bl	8001308 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e0b5      	b.n	80019ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001862:	4b3e      	ldr	r3, [pc, #248]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1ee      	bne.n	800184c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800186e:	7dfb      	ldrb	r3, [r7, #23]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d105      	bne.n	8001880 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001874:	4b39      	ldr	r3, [pc, #228]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	4a38      	ldr	r2, [pc, #224]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 800187a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800187e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 80a1 	beq.w	80019cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800188a:	4b34      	ldr	r3, [pc, #208]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b08      	cmp	r3, #8
 8001894:	d05c      	beq.n	8001950 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d141      	bne.n	8001922 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189e:	4b31      	ldr	r3, [pc, #196]	@ (8001964 <HAL_RCC_OscConfig+0x478>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fd30 	bl	8001308 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff fd2c 	bl	8001308 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e087      	b.n	80019ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018be:	4b27      	ldr	r3, [pc, #156]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69da      	ldr	r2, [r3, #28]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d8:	019b      	lsls	r3, r3, #6
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e0:	085b      	lsrs	r3, r3, #1
 80018e2:	3b01      	subs	r3, #1
 80018e4:	041b      	lsls	r3, r3, #16
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ec:	061b      	lsls	r3, r3, #24
 80018ee:	491b      	ldr	r1, [pc, #108]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <HAL_RCC_OscConfig+0x478>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fa:	f7ff fd05 	bl	8001308 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001902:	f7ff fd01 	bl	8001308 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e05c      	b.n	80019ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001914:	4b11      	ldr	r3, [pc, #68]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x416>
 8001920:	e054      	b.n	80019cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <HAL_RCC_OscConfig+0x478>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff fcee 	bl	8001308 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff fcea 	bl	8001308 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e045      	b.n	80019ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_RCC_OscConfig+0x470>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x444>
 800194e:	e03d      	b.n	80019cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d107      	bne.n	8001968 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e038      	b.n	80019ce <HAL_RCC_OscConfig+0x4e2>
 800195c:	40023800 	.word	0x40023800
 8001960:	40007000 	.word	0x40007000
 8001964:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001968:	4b1b      	ldr	r3, [pc, #108]	@ (80019d8 <HAL_RCC_OscConfig+0x4ec>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d028      	beq.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d121      	bne.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d11a      	bne.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001998:	4013      	ands	r3, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800199e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d111      	bne.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ae:	085b      	lsrs	r3, r3, #1
 80019b0:	3b01      	subs	r3, #1
 80019b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d107      	bne.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800

080019dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0cc      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019f0:	4b68      	ldr	r3, [pc, #416]	@ (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d90c      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b65      	ldr	r3, [pc, #404]	@ (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b63      	ldr	r3, [pc, #396]	@ (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0b8      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a30:	4b59      	ldr	r3, [pc, #356]	@ (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4a58      	ldr	r2, [pc, #352]	@ (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a48:	4b53      	ldr	r3, [pc, #332]	@ (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	4a52      	ldr	r2, [pc, #328]	@ (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a54:	4b50      	ldr	r3, [pc, #320]	@ (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	494d      	ldr	r1, [pc, #308]	@ (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d044      	beq.n	8001afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	4b47      	ldr	r3, [pc, #284]	@ (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d119      	bne.n	8001aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e07f      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d003      	beq.n	8001a9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d109      	bne.n	8001aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e06f      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e067      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aba:	4b37      	ldr	r3, [pc, #220]	@ (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f023 0203 	bic.w	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4934      	ldr	r1, [pc, #208]	@ (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001acc:	f7ff fc1c 	bl	8001308 <HAL_GetTick>
 8001ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad4:	f7ff fc18 	bl	8001308 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e04f      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aea:	4b2b      	ldr	r3, [pc, #172]	@ (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 020c 	and.w	r2, r3, #12
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d1eb      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001afc:	4b25      	ldr	r3, [pc, #148]	@ (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d20c      	bcs.n	8001b24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b22      	ldr	r3, [pc, #136]	@ (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b20      	ldr	r3, [pc, #128]	@ (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e032      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b30:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4916      	ldr	r1, [pc, #88]	@ (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b4e:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	490e      	ldr	r1, [pc, #56]	@ (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b62:	f000 f821 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	490a      	ldr	r1, [pc, #40]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	5ccb      	ldrb	r3, [r1, r3]
 8001b76:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fb7c 	bl	8001280 <HAL_InitTick>

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023c00 	.word	0x40023c00
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	080038cc 	.word	0x080038cc
 8001ba0:	20000004 	.word	0x20000004
 8001ba4:	20000008 	.word	0x20000008

08001ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bac:	b094      	sub	sp, #80	@ 0x50
 8001bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bc0:	4b79      	ldr	r3, [pc, #484]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d00d      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x40>
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	f200 80e1 	bhi.w	8001d94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_RCC_GetSysClockFreq+0x34>
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d003      	beq.n	8001be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bda:	e0db      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bdc:	4b73      	ldr	r3, [pc, #460]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x204>)
 8001bde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001be0:	e0db      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001be2:	4b73      	ldr	r3, [pc, #460]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001be4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001be6:	e0d8      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be8:	4b6f      	ldr	r3, [pc, #444]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bf0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bf2:	4b6d      	ldr	r3, [pc, #436]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d063      	beq.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfe:	4b6a      	ldr	r3, [pc, #424]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	099b      	lsrs	r3, r3, #6
 8001c04:	2200      	movs	r2, #0
 8001c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c12:	2300      	movs	r3, #0
 8001c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c1a:	4622      	mov	r2, r4
 8001c1c:	462b      	mov	r3, r5
 8001c1e:	f04f 0000 	mov.w	r0, #0
 8001c22:	f04f 0100 	mov.w	r1, #0
 8001c26:	0159      	lsls	r1, r3, #5
 8001c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c2c:	0150      	lsls	r0, r2, #5
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4621      	mov	r1, r4
 8001c34:	1a51      	subs	r1, r2, r1
 8001c36:	6139      	str	r1, [r7, #16]
 8001c38:	4629      	mov	r1, r5
 8001c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c4c:	4659      	mov	r1, fp
 8001c4e:	018b      	lsls	r3, r1, #6
 8001c50:	4651      	mov	r1, sl
 8001c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c56:	4651      	mov	r1, sl
 8001c58:	018a      	lsls	r2, r1, #6
 8001c5a:	4651      	mov	r1, sl
 8001c5c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c60:	4659      	mov	r1, fp
 8001c62:	eb63 0901 	sbc.w	r9, r3, r1
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c7a:	4690      	mov	r8, r2
 8001c7c:	4699      	mov	r9, r3
 8001c7e:	4623      	mov	r3, r4
 8001c80:	eb18 0303 	adds.w	r3, r8, r3
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	462b      	mov	r3, r5
 8001c88:	eb49 0303 	adc.w	r3, r9, r3
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	024b      	lsls	r3, r1, #9
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	024a      	lsls	r2, r1, #9
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cae:	2200      	movs	r2, #0
 8001cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001cb8:	f7fe ff2c 	bl	8000b14 <__aeabi_uldivmod>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cc4:	e058      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc6:	4b38      	ldr	r3, [pc, #224]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	099b      	lsrs	r3, r3, #6
 8001ccc:	2200      	movs	r2, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cd6:	623b      	str	r3, [r7, #32]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ce0:	4642      	mov	r2, r8
 8001ce2:	464b      	mov	r3, r9
 8001ce4:	f04f 0000 	mov.w	r0, #0
 8001ce8:	f04f 0100 	mov.w	r1, #0
 8001cec:	0159      	lsls	r1, r3, #5
 8001cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf2:	0150      	lsls	r0, r2, #5
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4641      	mov	r1, r8
 8001cfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cfe:	4649      	mov	r1, r9
 8001d00:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d18:	ebb2 040a 	subs.w	r4, r2, sl
 8001d1c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	00eb      	lsls	r3, r5, #3
 8001d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d2e:	00e2      	lsls	r2, r4, #3
 8001d30:	4614      	mov	r4, r2
 8001d32:	461d      	mov	r5, r3
 8001d34:	4643      	mov	r3, r8
 8001d36:	18e3      	adds	r3, r4, r3
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	464b      	mov	r3, r9
 8001d3c:	eb45 0303 	adc.w	r3, r5, r3
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d4e:	4629      	mov	r1, r5
 8001d50:	028b      	lsls	r3, r1, #10
 8001d52:	4621      	mov	r1, r4
 8001d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d58:	4621      	mov	r1, r4
 8001d5a:	028a      	lsls	r2, r1, #10
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d62:	2200      	movs	r2, #0
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	61fa      	str	r2, [r7, #28]
 8001d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d6c:	f7fe fed2 	bl	8000b14 <__aeabi_uldivmod>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4613      	mov	r3, r2
 8001d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d78:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	3301      	adds	r3, #1
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d92:	e002      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d94:	4b05      	ldr	r3, [pc, #20]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x204>)
 8001d96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3750      	adds	r7, #80	@ 0x50
 8001da0:	46bd      	mov	sp, r7
 8001da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	00f42400 	.word	0x00f42400
 8001db0:	007a1200 	.word	0x007a1200

08001db4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e01c      	b.n	8001e00 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	795b      	ldrb	r3, [r3, #5]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff f97a 	bl	80010d0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0204 	orr.w	r2, r2, #4
 8001df0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <prv_out_fn_print>:
 * \param[in]       ptr: LwPRINTF internal instance
 * \param[in]       chr: Character to print
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_fn_print(lwprintf_int_t* lwi, const char chr) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
    if (lwi->is_print_cancelled) {
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7e1b      	ldrb	r3, [r3, #24]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <prv_out_fn_print+0x18>
        return 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	e01a      	b.n	8001e56 <prv_out_fn_print+0x4e>
    }

    /* Send character to output */
    if (!lwi->lwobj->out_fn(chr, lwi->lwobj)) {
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	78f8      	ldrb	r0, [r7, #3]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4798      	blx	r3
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <prv_out_fn_print+0x34>
        lwi->is_print_cancelled = 1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	761a      	strb	r2, [r3, #24]
    }
    if (chr != '\0' && !lwi->is_print_cancelled) {
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d008      	beq.n	8001e54 <prv_out_fn_print+0x4c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7e1b      	ldrb	r3, [r3, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d104      	bne.n	8001e54 <prv_out_fn_print+0x4c>
        ++lwi->n_len;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	611a      	str	r2, [r3, #16]
    }
    return 1;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <prv_parse_num>:
 * \brief           Parse number from input string
 * \param[in,out]   format: Input text to process
 * \return          Parsed number
 */
static int
prv_parse_num(const char** format) {
 8001e5e:	b480      	push	{r7}
 8001e60:	b085      	sub	sp, #20
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
    int num = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]

    for (; CHARISNUM(**format); ++(*format)) {
 8001e6a:	e010      	b.n	8001e8e <prv_parse_num+0x30>
        num = (int)10 * num + CHARTONUM(**format);
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	461a      	mov	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	3b30      	subs	r3, #48	@ 0x30
 8001e80:	4413      	add	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
    for (; CHARISNUM(**format); ++(*format)) {
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b2f      	cmp	r3, #47	@ 0x2f
 8001e96:	d904      	bls.n	8001ea2 <prv_parse_num+0x44>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b39      	cmp	r3, #57	@ 0x39
 8001ea0:	d9e4      	bls.n	8001e6c <prv_parse_num+0xe>
    }
    return num;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <prv_out_str_before>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_before(lwprintf_int_t* lwi, size_t buff_size) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
    /* Check for width */
    if (lwi->m.width > 0
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	dd12      	ble.n	8001ee8 <prv_out_str_before+0x38>
        /* If number is negative, add negative sign or if positive and has plus sign forced */
        && (lwi->m.flags.is_negative || lwi->m.flags.plus)) {
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7f5b      	ldrb	r3, [r3, #29]
 8001ec6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d106      	bne.n	8001ede <prv_out_str_before+0x2e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7f1b      	ldrb	r3, [r3, #28]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d004      	beq.n	8001ee8 <prv_out_str_before+0x38>
        --lwi->m.width;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	1e5a      	subs	r2, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Check for alternate mode */
    if (lwi->m.flags.alt && !lwi->m.flags.is_num_zero) {
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7f1b      	ldrb	r3, [r3, #28]
 8001eec:	f003 0320 	and.w	r3, r3, #32
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d02c      	beq.n	8001f50 <prv_out_str_before+0xa0>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7f9b      	ldrb	r3, [r3, #30]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d125      	bne.n	8001f50 <prv_out_str_before+0xa0>
        if (lwi->m.base == 8) {
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d109      	bne.n	8001f22 <prv_out_str_before+0x72>
            if (lwi->m.width > 0) {
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	dd1c      	ble.n	8001f50 <prv_out_str_before+0xa0>
                --lwi->m.width;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1a:	1e5a      	subs	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f20:	e016      	b.n	8001f50 <prv_out_str_before+0xa0>
            }
        } else if (lwi->m.base == 16 || lwi->m.base == 2) {
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f28:	2b10      	cmp	r3, #16
 8001f2a:	d004      	beq.n	8001f36 <prv_out_str_before+0x86>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d10c      	bne.n	8001f50 <prv_out_str_before+0xa0>
            if (lwi->m.width >= 2) {
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	dd05      	ble.n	8001f4a <prv_out_str_before+0x9a>
                lwi->m.width -= 2;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f42:	1e9a      	subs	r2, r3, #2
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f48:	e002      	b.n	8001f50 <prv_out_str_before+0xa0>
            } else {
                lwi->m.width = 0;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
        }
    }

    /* Add negative sign (or positive in case of + flag or space in case of space flag) before when zeros are used to fill width */
    if (lwi->m.flags.zero) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7f1b      	ldrb	r3, [r3, #28]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d025      	beq.n	8001faa <prv_out_str_before+0xfa>
        if (lwi->m.flags.is_negative) {
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	7f5b      	ldrb	r3, [r3, #29]
 8001f62:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <prv_out_str_before+0xc8>
            lwi->out_fn(lwi, '-');
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	212d      	movs	r1, #45	@ 0x2d
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4798      	blx	r3
 8001f76:	e018      	b.n	8001faa <prv_out_str_before+0xfa>
        } else if (lwi->m.flags.plus) {
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7f1b      	ldrb	r3, [r3, #28]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <prv_out_str_before+0xe2>
            lwi->out_fn(lwi, '+');
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	212b      	movs	r1, #43	@ 0x2b
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4798      	blx	r3
 8001f90:	e00b      	b.n	8001faa <prv_out_str_before+0xfa>
        } else if (lwi->m.flags.space) {
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7f1b      	ldrb	r3, [r3, #28]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d004      	beq.n	8001faa <prv_out_str_before+0xfa>
            lwi->out_fn(lwi, ' ');
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	2120      	movs	r1, #32
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	4798      	blx	r3
        }
    }

    /* Check for flags output */
    if (lwi->m.flags.alt && !lwi->m.flags.is_num_zero) {
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7f1b      	ldrb	r3, [r3, #28]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d044      	beq.n	8002042 <prv_out_str_before+0x192>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7f9b      	ldrb	r3, [r3, #30]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d13d      	bne.n	8002042 <prv_out_str_before+0x192>
        if (lwi->m.base == 8) {
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d105      	bne.n	8001fdc <prv_out_str_before+0x12c>
            lwi->out_fn(lwi, '0');
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	2130      	movs	r1, #48	@ 0x30
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	4798      	blx	r3
 8001fda:	e032      	b.n	8002042 <prv_out_str_before+0x192>
        } else if (lwi->m.base == 16) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001fe2:	2b10      	cmp	r3, #16
 8001fe4:	d114      	bne.n	8002010 <prv_out_str_before+0x160>
            lwi->out_fn(lwi, '0');
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	2130      	movs	r1, #48	@ 0x30
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
            lwi->out_fn(lwi, lwi->m.flags.uc ? 'X' : 'x');
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	7f52      	ldrb	r2, [r2, #29]
 8001ff8:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d001      	beq.n	8002006 <prv_out_str_before+0x156>
 8002002:	2258      	movs	r2, #88	@ 0x58
 8002004:	e000      	b.n	8002008 <prv_out_str_before+0x158>
 8002006:	2278      	movs	r2, #120	@ 0x78
 8002008:	4611      	mov	r1, r2
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	4798      	blx	r3
 800200e:	e018      	b.n	8002042 <prv_out_str_before+0x192>
        } else if (lwi->m.base == 2) {
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002016:	2b02      	cmp	r3, #2
 8002018:	d113      	bne.n	8002042 <prv_out_str_before+0x192>
            lwi->out_fn(lwi, '0');
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	2130      	movs	r1, #48	@ 0x30
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
            lwi->out_fn(lwi, lwi->m.flags.uc ? 'B' : 'b');
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	7f52      	ldrb	r2, [r2, #29]
 800202c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	2a00      	cmp	r2, #0
 8002034:	d001      	beq.n	800203a <prv_out_str_before+0x18a>
 8002036:	2242      	movs	r2, #66	@ 0x42
 8002038:	e000      	b.n	800203c <prv_out_str_before+0x18c>
 800203a:	2262      	movs	r2, #98	@ 0x62
 800203c:	4611      	mov	r1, r2
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	4798      	blx	r3
        }
    }

    /* Right alignment, spaces or zeros */
    if (!lwi->m.flags.left_align && lwi->m.width > 0) {
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	7f1b      	ldrb	r3, [r3, #28]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d125      	bne.n	800209c <prv_out_str_before+0x1ec>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002054:	2b00      	cmp	r3, #0
 8002056:	dd21      	ble.n	800209c <prv_out_str_before+0x1ec>
        for (size_t idx = buff_size; !lwi->m.flags.left_align && idx < (size_t)lwi->m.width; ++idx) {
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	e011      	b.n	8002082 <prv_out_str_before+0x1d2>
            lwi->out_fn(lwi, lwi->m.flags.zero ? '0' : ' ');
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	7f12      	ldrb	r2, [r2, #28]
 8002066:	f002 0208 	and.w	r2, r2, #8
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	2a00      	cmp	r2, #0
 800206e:	d001      	beq.n	8002074 <prv_out_str_before+0x1c4>
 8002070:	2230      	movs	r2, #48	@ 0x30
 8002072:	e000      	b.n	8002076 <prv_out_str_before+0x1c6>
 8002074:	2220      	movs	r2, #32
 8002076:	4611      	mov	r1, r2
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	4798      	blx	r3
        for (size_t idx = buff_size; !lwi->m.flags.left_align && idx < (size_t)lwi->m.width; ++idx) {
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3301      	adds	r3, #1
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	7f1b      	ldrb	r3, [r3, #28]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d105      	bne.n	800209c <prv_out_str_before+0x1ec>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002094:	461a      	mov	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4293      	cmp	r3, r2
 800209a:	d3e0      	bcc.n	800205e <prv_out_str_before+0x1ae>
        }
    }

    /* Add negative sign here when spaces are used for width */
    if (!lwi->m.flags.zero) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7f1b      	ldrb	r3, [r3, #28]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d12b      	bne.n	8002102 <prv_out_str_before+0x252>
        if (lwi->m.flags.is_negative) {
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	7f5b      	ldrb	r3, [r3, #29]
 80020ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <prv_out_str_before+0x214>
            lwi->out_fn(lwi, '-');
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	212d      	movs	r1, #45	@ 0x2d
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	4798      	blx	r3
 80020c2:	e01e      	b.n	8002102 <prv_out_str_before+0x252>
        } else if (lwi->m.flags.plus) {
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	7f1b      	ldrb	r3, [r3, #28]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <prv_out_str_before+0x22e>
            lwi->out_fn(lwi, '+');
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	212b      	movs	r1, #43	@ 0x2b
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	4798      	blx	r3
 80020dc:	e011      	b.n	8002102 <prv_out_str_before+0x252>
        } else if (lwi->m.flags.space && buff_size >= (size_t)lwi->m.width) {
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7f1b      	ldrb	r3, [r3, #28]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <prv_out_str_before+0x252>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	461a      	mov	r2, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d304      	bcc.n	8002102 <prv_out_str_before+0x252>
            lwi->out_fn(lwi, ' ');
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	2120      	movs	r1, #32
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	4798      	blx	r3
        }
    }

    return 1;
 8002102:	2301      	movs	r3, #1
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <prv_out_str_after>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_after(lwprintf_int_t* lwi, size_t buff_size) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
    /* Left alignment, but only with spaces */
    if (lwi->m.flags.left_align) {
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7f1b      	ldrb	r3, [r3, #28]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d010      	beq.n	8002146 <prv_out_str_after+0x3a>
        for (size_t idx = buff_size; idx < (size_t)lwi->m.width; ++idx) {
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	e007      	b.n	800213a <prv_out_str_after+0x2e>
            lwi->out_fn(lwi, ' ');
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	2120      	movs	r1, #32
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4798      	blx	r3
        for (size_t idx = buff_size; idx < (size_t)lwi->m.width; ++idx) {
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3301      	adds	r3, #1
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4293      	cmp	r3, r2
 8002144:	d3f1      	bcc.n	800212a <prv_out_str_after+0x1e>
        }
    }
    return 1;
 8002146:	2301      	movs	r3, #1
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <prv_out_str_raw>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_raw(lwprintf_int_t* lwi, const char* buff, size_t buff_size) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
    for (size_t idx = 0; idx < buff_size; ++idx) {
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	e00b      	b.n	800217a <prv_out_str_raw+0x2a>
        lwi->out_fn(lwi, buff[idx]);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	440a      	add	r2, r1
 800216c:	7812      	ldrb	r2, [r2, #0]
 800216e:	4611      	mov	r1, r2
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	4798      	blx	r3
    for (size_t idx = 0; idx < buff_size; ++idx) {
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3301      	adds	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	429a      	cmp	r2, r3
 8002180:	d3ef      	bcc.n	8002162 <prv_out_str_raw+0x12>
    }
    return 1;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <prv_out_str>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str(lwprintf_int_t* lwi, const char* buff, size_t buff_size) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
    prv_out_str_before(lwi, buff_size);    /* Implement pre-format */
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f7ff fe88 	bl	8001eb0 <prv_out_str_before>
    prv_out_str_raw(lwi, buff, buff_size); /* Print actual string */
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68b9      	ldr	r1, [r7, #8]
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f7ff ffd3 	bl	8002150 <prv_out_str_raw>
    prv_out_str_after(lwi, buff_size);     /* Implement post-format */
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f7ff ffad 	bl	800210c <prv_out_str_after>

    return 1;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <prv_longest_unsigned_int_to_str>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_longest_unsigned_int_to_str(lwprintf_int_t* lwi, uint_maxtype_t num) {
 80021bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021c0:	b092      	sub	sp, #72	@ 0x48
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	e9c7 2300 	strd	r2, r3, [r7]
    /* Start with digits length, support binary with int, that is 32-bits maximum width */
    char num_buf[33], *num_buf_ptr = &num_buf[sizeof(num_buf)];
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	3321      	adds	r3, #33	@ 0x21
 80021d0:	647b      	str	r3, [r7, #68]	@ 0x44
    char adder_ch = (lwi->m.flags.uc ? 'A' : 'a') - 10;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	7f5b      	ldrb	r3, [r3, #29]
 80021d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <prv_longest_unsigned_int_to_str+0x28>
 80021e0:	2337      	movs	r3, #55	@ 0x37
 80021e2:	e000      	b.n	80021e6 <prv_longest_unsigned_int_to_str+0x2a>
 80021e4:	2357      	movs	r3, #87	@ 0x57
 80021e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    size_t len = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check if number is zero */
    lwi->m.flags.is_num_zero = num == 0;
 80021ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	bf0c      	ite	eq
 80021f6:	2301      	moveq	r3, #1
 80021f8:	2300      	movne	r3, #0
 80021fa:	b2d9      	uxtb	r1, r3
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	7f93      	ldrb	r3, [r2, #30]
 8002200:	f361 0300 	bfi	r3, r1, #0, #1
 8002204:	7793      	strb	r3, [r2, #30]

    /* Fill the buffer backward */
    *--num_buf_ptr = '\0';
 8002206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002208:	3b01      	subs	r3, #1
 800220a:	647b      	str	r3, [r7, #68]	@ 0x44
 800220c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
    do {
        int digit = num % lwi->m.base;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2200      	movs	r2, #0
 800221c:	461c      	mov	r4, r3
 800221e:	4615      	mov	r5, r2
 8002220:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002224:	4622      	mov	r2, r4
 8002226:	462b      	mov	r3, r5
 8002228:	f7fe fc74 	bl	8000b14 <__aeabi_uldivmod>
 800222c:	4613      	mov	r3, r2
 800222e:	63bb      	str	r3, [r7, #56]	@ 0x38
        num /= lwi->m.base;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2200      	movs	r2, #0
 800223a:	4698      	mov	r8, r3
 800223c:	4691      	mov	r9, r2
 800223e:	4642      	mov	r2, r8
 8002240:	464b      	mov	r3, r9
 8002242:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002246:	f7fe fc65 	bl	8000b14 <__aeabi_uldivmod>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	e9c7 2300 	strd	r2, r3, [r7]
        *--num_buf_ptr = (char)digit + (char)(digit >= 10 ? adder_ch : '0');
 8002252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002254:	b2da      	uxtb	r2, r3
 8002256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002258:	2b09      	cmp	r3, #9
 800225a:	dd02      	ble.n	8002262 <prv_longest_unsigned_int_to_str+0xa6>
 800225c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002260:	e000      	b.n	8002264 <prv_longest_unsigned_int_to_str+0xa8>
 8002262:	2330      	movs	r3, #48	@ 0x30
 8002264:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002266:	3901      	subs	r1, #1
 8002268:	6479      	str	r1, [r7, #68]	@ 0x44
 800226a:	4413      	add	r3, r2
 800226c:	b2da      	uxtb	r2, r3
 800226e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002270:	701a      	strb	r2, [r3, #0]
    } while (num > 0);
 8002272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002276:	4313      	orrs	r3, r2
 8002278:	d1cb      	bne.n	8002212 <prv_longest_unsigned_int_to_str+0x56>

    /* Calculate and generate the output */
    len = sizeof(num_buf) - (size_t)((uintptr_t)num_buf_ptr - (uintptr_t)num_buf) - 1;
 800227a:	f107 0214 	add.w	r2, r7, #20
 800227e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	3320      	adds	r3, #32
 8002284:	63fb      	str	r3, [r7, #60]	@ 0x3c
    prv_out_str_before(lwi, len);
 8002286:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f7ff fe11 	bl	8001eb0 <prv_out_str_before>
    for (; *num_buf_ptr;) {
 800228e:	e008      	b.n	80022a2 <prv_longest_unsigned_int_to_str+0xe6>
        lwi->out_fn(lwi, *num_buf_ptr++);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002296:	1c59      	adds	r1, r3, #1
 8002298:	6479      	str	r1, [r7, #68]	@ 0x44
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	4790      	blx	r2
    for (; *num_buf_ptr;) {
 80022a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f2      	bne.n	8002290 <prv_longest_unsigned_int_to_str+0xd4>
    }
    prv_out_str_after(lwi, len);
 80022aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f7ff ff2d 	bl	800210c <prv_out_str_after>
    return 1;
 80022b2:	2301      	movs	r3, #1
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3748      	adds	r7, #72	@ 0x48
 80022b8:	46bd      	mov	sp, r7
 80022ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080022be <prv_longest_signed_int_to_str>:
 * \param[in,out]   lwi: LwPRINTF instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_longest_signed_int_to_str(lwprintf_int_t* lwi, int_maxtype_t num) {
 80022be:	b5b0      	push	{r4, r5, r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	e9c7 2300 	strd	r2, r3, [r7]
    SIGNED_CHECK_NEGATIVE(lwi, num);
 80022ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	da0c      	bge.n	80022ec <prv_longest_signed_int_to_str+0x2e>
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	7f53      	ldrb	r3, [r2, #29]
 80022d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022da:	7753      	strb	r3, [r2, #29]
 80022dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022e0:	2100      	movs	r1, #0
 80022e2:	4254      	negs	r4, r2
 80022e4:	eb61 0503 	sbc.w	r5, r1, r3
 80022e8:	e9c7 4500 	strd	r4, r5, [r7]
    return prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)num);
 80022ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f7ff ff63 	bl	80021bc <prv_longest_unsigned_int_to_str>
 80022f6:	4603      	mov	r3, r0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bdb0      	pop	{r4, r5, r7, pc}

08002300 <prv_strnlen>:
 * \param           str: String to calculate
 * \param           max_n: Max number of bytes at which length is cut
 * \return          String length in bytes
 */
size_t
prv_strnlen(const char* str, size_t max_n) {
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]

    for (; *str != '\0' && length < max_n; ++length, ++str) {}
 800230e:	e005      	b.n	800231c <prv_strnlen+0x1c>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3301      	adds	r3, #1
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3301      	adds	r3, #1
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <prv_strnlen+0x2c>
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d3f1      	bcc.n	8002310 <prv_strnlen+0x10>
    return length;
 800232c:	68fb      	ldr	r3, [r7, #12]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	0000      	movs	r0, r0
 800233c:	0000      	movs	r0, r0
	...

08002340 <prv_calculate_dbl_num_data>:
 * \param[in]       n: Float number instance
 * \param[in]       num: Input number
 * \param[in]       type: Format type
 */
static void
prv_calculate_dbl_num_data(lwprintf_int_t* lwi, float_num_t* n, double num, const char type) {
 8002340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002344:	b090      	sub	sp, #64	@ 0x40
 8002346:	af00      	add	r7, sp, #0
 8002348:	6278      	str	r0, [r7, #36]	@ 0x24
 800234a:	6239      	str	r1, [r7, #32]
 800234c:	ed87 0b06 	vstr	d0, [r7, #24]
 8002350:	4613      	mov	r3, r2
 8002352:	75fb      	strb	r3, [r7, #23]
    memset(n, 0x00, sizeof(*n));
 8002354:	2228      	movs	r2, #40	@ 0x28
 8002356:	2100      	movs	r1, #0
 8002358:	6a38      	ldr	r0, [r7, #32]
 800235a:	f001 fa2a 	bl	80037b2 <memset>

    if (lwi->m.precision >= (int)LWPRINTF_ARRAYSIZE(powers_of_10)) {
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	2b12      	cmp	r3, #18
 8002364:	dd02      	ble.n	800236c <prv_calculate_dbl_num_data+0x2c>
        lwi->m.precision = (int)LWPRINTF_ARRAYSIZE(powers_of_10) - 1;
 8002366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002368:	2212      	movs	r2, #18
 800236a:	621a      	str	r2, [r3, #32]
     * decimal_part_dbl = 3456.78   -> Decimal part multiplied by 10^precision, keeping it in double format
     * decimal_part = 3456          -> Integer part of decimal number
     * diff = 0.78                  -> Difference between actual decimal and integer part of decimal
     *                                  This is used for rounding of last digit (if necessary)
     */
    num += 0.000000000000005;
 800236c:	a3a2      	add	r3, pc, #648	@ (adr r3, 80025f8 <prv_calculate_dbl_num_data+0x2b8>)
 800236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002372:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002376:	f7fd ff2d 	bl	80001d4 <__adddf3>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    n->integer_part = (float_long_t)num;
 8002382:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002386:	f7fe fbdd 	bl	8000b44 <__aeabi_d2lz>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	6a39      	ldr	r1, [r7, #32]
 8002390:	e9c1 2300 	strd	r2, r3, [r1]
    n->decimal_part_dbl = (num - (double)n->integer_part) * (double)powers_of_10[lwi->m.precision];
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239a:	4610      	mov	r0, r2
 800239c:	4619      	mov	r1, r3
 800239e:	f7fe f8a1 	bl	80004e4 <__aeabi_l2d>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023aa:	f7fd ff11 	bl	80001d0 <__aeabi_dsub>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4614      	mov	r4, r2
 80023b4:	461d      	mov	r5, r3
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4a8d      	ldr	r2, [pc, #564]	@ (80025f0 <prv_calculate_dbl_num_data+0x2b0>)
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	f7fe f88c 	bl	80004e4 <__aeabi_l2d>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4620      	mov	r0, r4
 80023d2:	4629      	mov	r1, r5
 80023d4:	f7fe f8b4 	bl	8000540 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	6a39      	ldr	r1, [r7, #32]
 80023de:	e9c1 2302 	strd	r2, r3, [r1, #8]
    n->decimal_part = (float_long_t)n->decimal_part_dbl;
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	f7fe fbaa 	bl	8000b44 <__aeabi_d2lz>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	6a39      	ldr	r1, [r7, #32]
 80023f6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    n->diff = n->decimal_part_dbl - (double)((float_long_t)n->decimal_part);
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f7fe f86b 	bl	80004e4 <__aeabi_l2d>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4620      	mov	r0, r4
 8002414:	4629      	mov	r1, r5
 8002416:	f7fd fedb 	bl	80001d0 <__aeabi_dsub>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	6a39      	ldr	r1, [r7, #32]
 8002420:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* Rounding check of last digit */
    if (n->diff > 0.5) {
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	4b71      	ldr	r3, [pc, #452]	@ (80025f4 <prv_calculate_dbl_num_data+0x2b4>)
 8002430:	f7fe fb16 	bl	8000a60 <__aeabi_dcmpgt>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d02f      	beq.n	800249a <prv_calculate_dbl_num_data+0x15a>
        ++n->decimal_part;
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002440:	1c51      	adds	r1, r2, #1
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	f143 0300 	adc.w	r3, r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002450:	e9c3 1204 	strd	r1, r2, [r3, #16]
        if (n->decimal_part >= powers_of_10[lwi->m.precision]) {
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a64      	ldr	r2, [pc, #400]	@ (80025f0 <prv_calculate_dbl_num_data+0x2b0>)
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002468:	4290      	cmp	r0, r2
 800246a:	eb71 0303 	sbcs.w	r3, r1, r3
 800246e:	db39      	blt.n	80024e4 <prv_calculate_dbl_num_data+0x1a4>
            n->decimal_part = 0;
 8002470:	6a39      	ldr	r1, [r7, #32]
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	e9c1 2304 	strd	r2, r3, [r1, #16]
            ++n->integer_part;
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002484:	1c51      	adds	r1, r2, #1
 8002486:	6039      	str	r1, [r7, #0]
 8002488:	f143 0300 	adc.w	r3, r3, #0
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002494:	e9c3 1200 	strd	r1, r2, [r3]
 8002498:	e024      	b.n	80024e4 <prv_calculate_dbl_num_data+0x1a4>
        }
    } else if (n->diff < 0.5) {
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	4b53      	ldr	r3, [pc, #332]	@ (80025f4 <prv_calculate_dbl_num_data+0x2b4>)
 80024a6:	f7fe fabd 	bl	8000a24 <__aeabi_dcmplt>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d119      	bne.n	80024e4 <prv_calculate_dbl_num_data+0x1a4>
        /* Used in separate if, since comparing float to == will certainly result to false */
    } else {
        /* Difference is exactly 0.5 */
        if (n->decimal_part == 0) {
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	d10a      	bne.n	80024d0 <prv_calculate_dbl_num_data+0x190>
            ++n->integer_part;
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c0:	f112 0a01 	adds.w	sl, r2, #1
 80024c4:	f143 0b00 	adc.w	fp, r3, #0
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	e9c3 ab00 	strd	sl, fp, [r3]
 80024ce:	e009      	b.n	80024e4 <prv_calculate_dbl_num_data+0x1a4>
        } else {
            ++n->decimal_part;
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80024d6:	f112 0801 	adds.w	r8, r2, #1
 80024da:	f143 0900 	adc.w	r9, r3, #0
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	e9c3 8904 	strd	r8, r9, [r3, #16]
        }
    }

    /* Calculate number of digits for integer and decimal parts */
    if (n->integer_part == 0) {
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	d103      	bne.n	80024f6 <prv_calculate_dbl_num_data+0x1b6>
        n->digits_cnt_integer_part = 1;
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	2201      	movs	r2, #1
 80024f2:	841a      	strh	r2, [r3, #32]
 80024f4:	e023      	b.n	800253e <prv_calculate_dbl_num_data+0x1fe>
    } else {
        float_long_t tmp;
        for (n->digits_cnt_integer_part = 0, tmp = n->integer_part; tmp > 0; ++n->digits_cnt_integer_part, tmp /= 10) {}
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	2200      	movs	r2, #0
 80024fa:	841a      	strh	r2, [r3, #32]
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8002506:	e014      	b.n	8002532 <prv_calculate_dbl_num_data+0x1f2>
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800250e:	b29b      	uxth	r3, r3
 8002510:	3301      	adds	r3, #1
 8002512:	b29b      	uxth	r3, r3
 8002514:	b21a      	sxth	r2, r3
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	841a      	strh	r2, [r3, #32]
 800251a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800251e:	f04f 020a 	mov.w	r2, #10
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	f7fe faa5 	bl	8000a74 <__aeabi_ldivmod>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8002532:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002536:	2a01      	cmp	r2, #1
 8002538:	f173 0300 	sbcs.w	r3, r3, #0
 800253c:	dae4      	bge.n	8002508 <prv_calculate_dbl_num_data+0x1c8>
    }
    n->digits_cnt_decimal_part = (short)lwi->m.precision;
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	b21a      	sxth	r2, r3
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	845a      	strh	r2, [r3, #34]	@ 0x22

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Calculate minimum useful digits for decimal (excl last useless zeros) */
    if (type == 'g') {
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	2b67      	cmp	r3, #103	@ 0x67
 800254c:	d143      	bne.n	80025d6 <prv_calculate_dbl_num_data+0x296>
        float_long_t tmp = n->decimal_part;
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002554:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        short adder, i;

        for (adder = 0, i = 0; tmp > 0 || i < (short)lwi->m.precision;
 8002558:	2300      	movs	r3, #0
 800255a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800255c:	2300      	movs	r3, #0
 800255e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8002560:	e02b      	b.n	80025ba <prv_calculate_dbl_num_data+0x27a>
             tmp /= 10, n->digits_cnt_decimal_part_useful += adder, ++i) {
            if (adder == 0 && (tmp % 10) > 0) {
 8002562:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10d      	bne.n	8002586 <prv_calculate_dbl_num_data+0x246>
 800256a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800256e:	f04f 020a 	mov.w	r2, #10
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	f7fe fa7d 	bl	8000a74 <__aeabi_ldivmod>
 800257a:	2a01      	cmp	r2, #1
 800257c:	f173 0300 	sbcs.w	r3, r3, #0
 8002580:	db01      	blt.n	8002586 <prv_calculate_dbl_num_data+0x246>
                adder = 1;
 8002582:	2301      	movs	r3, #1
 8002584:	85fb      	strh	r3, [r7, #46]	@ 0x2e
             tmp /= 10, n->digits_cnt_decimal_part_useful += adder, ++i) {
 8002586:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800258a:	f04f 020a 	mov.w	r2, #10
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	f7fe fa6f 	bl	8000a74 <__aeabi_ldivmod>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80025a8:	4413      	add	r3, r2
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	849a      	strh	r2, [r3, #36]	@ 0x24
 80025b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80025b4:	3301      	adds	r3, #1
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        for (adder = 0, i = 0; tmp > 0 || i < (short)lwi->m.precision;
 80025ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80025be:	2a01      	cmp	r2, #1
 80025c0:	f173 0300 	sbcs.w	r3, r3, #0
 80025c4:	dacd      	bge.n	8002562 <prv_calculate_dbl_num_data+0x222>
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 80025d0:	429a      	cmp	r2, r3
 80025d2:	dbc6      	blt.n	8002562 <prv_calculate_dbl_num_data+0x222>
    } else
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    {
        n->digits_cnt_decimal_part_useful = (short)lwi->m.precision;
    }
}
 80025d4:	e004      	b.n	80025e0 <prv_calculate_dbl_num_data+0x2a0>
        n->digits_cnt_decimal_part_useful = (short)lwi->m.precision;
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	b21a      	sxth	r2, r3
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	849a      	strh	r2, [r3, #36]	@ 0x24
}
 80025e0:	bf00      	nop
 80025e2:	3740      	adds	r7, #64	@ 0x40
 80025e4:	46bd      	mov	sp, r7
 80025e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ea:	bf00      	nop
 80025ec:	f3af 8000 	nop.w
 80025f0:	080038e0 	.word	0x080038e0
 80025f4:	3fe00000 	.word	0x3fe00000
 80025f8:	86a12b9b 	.word	0x86a12b9b
 80025fc:	3cf6849b 	.word	0x3cf6849b

08002600 <prv_double_to_str>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_double_to_str(lwprintf_int_t* lwi, double in_num) {
 8002600:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002604:	b0a0      	sub	sp, #128	@ 0x80
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	ed87 0b00 	vstr	d0, [r7]
    float_num_t dblnum;
    double orig_num = in_num;
 800260e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002612:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    int digits_cnt, chosen_precision, i;
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    int exp_cnt = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	673b      	str	r3, [r7, #112]	@ 0x70
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    char def_type = lwi->m.type;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002620:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
     * - Print negative infinity if number is less than -FLOAT_MAX_B_ENG and engineering mode is disabled
     * - Print positive infinity if number is greater than absolute minimum
     * - Print positive infinity if number is greater than FLOAT_MAX_B_ENG and engineering mode is disabled
     * - Go to engineering mode if it is enabled and `in_num < -FLOAT_MAX_B_ENG` or `in_num > FLOAT_MAX_B_ENG`
     */
    if (in_num != in_num) {
 8002624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002628:	e9d7 0100 	ldrd	r0, r1, [r7]
 800262c:	f7fe f9f0 	bl	8000a10 <__aeabi_dcmpeq>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d110      	bne.n	8002658 <prv_double_to_str+0x58>
        return prv_out_str(lwi, lwi->m.flags.uc ? "NAN" : "nan", 3);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	7f5b      	ldrb	r3, [r3, #29]
 800263a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <prv_double_to_str+0x48>
 8002644:	4ba6      	ldr	r3, [pc, #664]	@ (80028e0 <prv_double_to_str+0x2e0>)
 8002646:	e000      	b.n	800264a <prv_double_to_str+0x4a>
 8002648:	4ba6      	ldr	r3, [pc, #664]	@ (80028e4 <prv_double_to_str+0x2e4>)
 800264a:	2203      	movs	r2, #3
 800264c:	4619      	mov	r1, r3
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f7ff fd9c 	bl	800218c <prv_out_str>
 8002654:	4603      	mov	r3, r0
 8002656:	e32b      	b.n	8002cb0 <prv_double_to_str+0x6b0>
    } else if (in_num < -DBL_MAX
 8002658:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800265c:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 8002660:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002664:	f7fe f9de 	bl	8000a24 <__aeabi_dcmplt>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d010      	beq.n	8002690 <prv_double_to_str+0x90>
#if !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
               || in_num < -FLOAT_MAX_B_ENG
#endif /* !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    ) {
        return prv_out_str(lwi, lwi->m.flags.uc ? "-INF" : "-inf", 4);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	7f5b      	ldrb	r3, [r3, #29]
 8002672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <prv_double_to_str+0x80>
 800267c:	4b9a      	ldr	r3, [pc, #616]	@ (80028e8 <prv_double_to_str+0x2e8>)
 800267e:	e000      	b.n	8002682 <prv_double_to_str+0x82>
 8002680:	4b9a      	ldr	r3, [pc, #616]	@ (80028ec <prv_double_to_str+0x2ec>)
 8002682:	2204      	movs	r2, #4
 8002684:	4619      	mov	r1, r3
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f7ff fd80 	bl	800218c <prv_out_str>
 800268c:	4603      	mov	r3, r0
 800268e:	e30f      	b.n	8002cb0 <prv_double_to_str+0x6b0>
    } else if (in_num > DBL_MAX
 8002690:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002694:	4b96      	ldr	r3, [pc, #600]	@ (80028f0 <prv_double_to_str+0x2f0>)
 8002696:	e9d7 0100 	ldrd	r0, r1, [r7]
 800269a:	f7fe f9e1 	bl	8000a60 <__aeabi_dcmpgt>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d02e      	beq.n	8002702 <prv_double_to_str+0x102>
#if !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
               || in_num > FLOAT_MAX_B_ENG
#endif /* !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    ) {
        char str[5], *s_ptr = str;
 80026a4:	f107 0310 	add.w	r3, r7, #16
 80026a8:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (lwi->m.flags.plus) {
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	7f1b      	ldrb	r3, [r3, #28]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <prv_double_to_str+0xc2>
            *s_ptr++ = '+';
 80026b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	66ba      	str	r2, [r7, #104]	@ 0x68
 80026be:	222b      	movs	r2, #43	@ 0x2b
 80026c0:	701a      	strb	r2, [r3, #0]
        }
        strcpy(s_ptr, lwi->m.flags.uc ? "INF" : "inf");
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	7f5b      	ldrb	r3, [r3, #29]
 80026c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <prv_double_to_str+0xd4>
 80026d0:	4b88      	ldr	r3, [pc, #544]	@ (80028f4 <prv_double_to_str+0x2f4>)
 80026d2:	e000      	b.n	80026d6 <prv_double_to_str+0xd6>
 80026d4:	4b88      	ldr	r3, [pc, #544]	@ (80028f8 <prv_double_to_str+0x2f8>)
 80026d6:	4619      	mov	r1, r3
 80026d8:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80026da:	f001 f897 	bl	800380c <strcpy>
        return prv_out_str(lwi, str, lwi->m.flags.plus ? 4 : 3);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	7f1b      	ldrb	r3, [r3, #28]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <prv_double_to_str+0xf0>
 80026ec:	2204      	movs	r2, #4
 80026ee:	e000      	b.n	80026f2 <prv_double_to_str+0xf2>
 80026f0:	2203      	movs	r2, #3
 80026f2:	f107 0310 	add.w	r3, r7, #16
 80026f6:	4619      	mov	r1, r3
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f7ff fd47 	bl	800218c <prv_out_str>
 80026fe:	4603      	mov	r3, r0
 8002700:	e2d6      	b.n	8002cb0 <prv_double_to_str+0x6b0>
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    } else if ((in_num < -FLOAT_MAX_B_ENG || in_num > FLOAT_MAX_B_ENG) && def_type != 'g') {
 8002702:	a375      	add	r3, pc, #468	@ (adr r3, 80028d8 <prv_double_to_str+0x2d8>)
 8002704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002708:	2100      	movs	r1, #0
 800270a:	f1d2 0800 	rsbs	r8, r2, #0
 800270e:	eb61 0903 	sbc.w	r9, r1, r3
 8002712:	4640      	mov	r0, r8
 8002714:	4649      	mov	r1, r9
 8002716:	f7fd fee5 	bl	80004e4 <__aeabi_l2d>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002722:	f7fe f97f 	bl	8000a24 <__aeabi_dcmplt>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10f      	bne.n	800274c <prv_double_to_str+0x14c>
 800272c:	a36a      	add	r3, pc, #424	@ (adr r3, 80028d8 <prv_double_to_str+0x2d8>)
 800272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f7fd fed5 	bl	80004e4 <__aeabi_l2d>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002742:	f7fe f98d 	bl	8000a60 <__aeabi_dcmpgt>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00b      	beq.n	8002764 <prv_double_to_str+0x164>
 800274c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002750:	2b67      	cmp	r3, #103	@ 0x67
 8002752:	d007      	beq.n	8002764 <prv_double_to_str+0x164>
        lwi->m.type = def_type = 'e'; /* Go to engineering mode */
 8002754:	2365      	movs	r3, #101	@ 0x65
 8002756:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8002760:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
#endif                                /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    }

    /* Check sign of the number */
    SIGNED_CHECK_NEGATIVE(lwi, in_num);
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002770:	f7fe f958 	bl	8000a24 <__aeabi_dcmplt>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <prv_double_to_str+0x190>
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	7f53      	ldrb	r3, [r2, #29]
 800277e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002782:	7753      	strb	r3, [r2, #29]
 8002784:	683c      	ldr	r4, [r7, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800278c:	e9c7 4500 	strd	r4, r5, [r7]
    orig_num = in_num;
 8002790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002794:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Engineering mode check for number of exponents */
    if (def_type == 'e' || def_type == 'g'
 8002798:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800279c:	2b65      	cmp	r3, #101	@ 0x65
 800279e:	d013      	beq.n	80027c8 <prv_double_to_str+0x1c8>
 80027a0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80027a4:	2b67      	cmp	r3, #103	@ 0x67
 80027a6:	d00f      	beq.n	80027c8 <prv_double_to_str+0x1c8>
        || in_num > (double)(powers_of_10[LWPRINTF_ARRAYSIZE(powers_of_10) - 1])) { /* More vs what float can hold */
 80027a8:	a34b      	add	r3, pc, #300	@ (adr r3, 80028d8 <prv_double_to_str+0x2d8>)
 80027aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	f7fd fe97 	bl	80004e4 <__aeabi_l2d>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027be:	f7fe f94f 	bl	8000a60 <__aeabi_dcmpgt>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d054      	beq.n	8002872 <prv_double_to_str+0x272>
        if (lwi->m.type != 'g') {
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80027ce:	2b67      	cmp	r3, #103	@ 0x67
 80027d0:	d003      	beq.n	80027da <prv_double_to_str+0x1da>
            lwi->m.type = 'e';
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2265      	movs	r2, #101	@ 0x65
 80027d6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        }

        /* Normalize number to be between 0 and 1 and count decimals for exponent */
        if (in_num < 1) {
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	4b47      	ldr	r3, [pc, #284]	@ (80028fc <prv_double_to_str+0x2fc>)
 80027e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027e4:	f7fe f91e 	bl	8000a24 <__aeabi_dcmplt>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d026      	beq.n	800283c <prv_double_to_str+0x23c>
            for (exp_cnt = 0; in_num < 1 && in_num > 0; in_num *= 10, --exp_cnt) {}
 80027ee:	2300      	movs	r3, #0
 80027f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80027f2:	e00d      	b.n	8002810 <prv_double_to_str+0x210>
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	4b41      	ldr	r3, [pc, #260]	@ (8002900 <prv_double_to_str+0x300>)
 80027fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027fe:	f7fd fe9f 	bl	8000540 <__aeabi_dmul>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	e9c7 2300 	strd	r2, r3, [r7]
 800280a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800280c:	3b01      	subs	r3, #1
 800280e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	4b39      	ldr	r3, [pc, #228]	@ (80028fc <prv_double_to_str+0x2fc>)
 8002816:	e9d7 0100 	ldrd	r0, r1, [r7]
 800281a:	f7fe f903 	bl	8000a24 <__aeabi_dcmplt>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d026      	beq.n	8002872 <prv_double_to_str+0x272>
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002830:	f7fe f916 	bl	8000a60 <__aeabi_dcmpgt>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1dc      	bne.n	80027f4 <prv_double_to_str+0x1f4>
 800283a:	e01a      	b.n	8002872 <prv_double_to_str+0x272>
        } else {
            for (exp_cnt = 0; in_num >= 10; in_num /= 10, ++exp_cnt) {}
 800283c:	2300      	movs	r3, #0
 800283e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002840:	e00d      	b.n	800285e <prv_double_to_str+0x25e>
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	4b2e      	ldr	r3, [pc, #184]	@ (8002900 <prv_double_to_str+0x300>)
 8002848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800284c:	f7fd ffa2 	bl	8000794 <__aeabi_ddiv>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	e9c7 2300 	strd	r2, r3, [r7]
 8002858:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800285a:	3301      	adds	r3, #1
 800285c:	673b      	str	r3, [r7, #112]	@ 0x70
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	4b27      	ldr	r3, [pc, #156]	@ (8002900 <prv_double_to_str+0x300>)
 8002864:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002868:	f7fe f8f0 	bl	8000a4c <__aeabi_dcmpge>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1e7      	bne.n	8002842 <prv_double_to_str+0x242>
        }
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */

    /* Check precision data */
    chosen_precision = lwi->m.precision; /* This is default value coming from app */
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (lwi->m.precision >= (int)LWPRINTF_ARRAYSIZE(powers_of_10)) {
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	2b12      	cmp	r3, #18
 800287e:	dd03      	ble.n	8002888 <prv_double_to_str+0x288>
        lwi->m.precision = (int)LWPRINTF_ARRAYSIZE(powers_of_10) - 1; /* Limit to maximum precision */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2212      	movs	r2, #18
 8002884:	621a      	str	r2, [r3, #32]
 8002886:	e01f      	b.n	80028c8 <prv_double_to_str+0x2c8>
        /*
         * Precision is lower than the one selected by app (or user).
         * It means that we have to append ending zeros for precision when printing data
         */
    } else if (!lwi->m.flags.precision) {
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	7f1b      	ldrb	r3, [r3, #28]
 800288c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <prv_double_to_str+0x2a4>
        lwi->m.precision = LWPRINTF_CFG_FLOAT_DEFAULT_PRECISION; /* Default precision when not used */
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2206      	movs	r2, #6
 800289a:	621a      	str	r2, [r3, #32]
        chosen_precision = lwi->m.precision;                     /* There was no precision, update chosen precision */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028a2:	e011      	b.n	80028c8 <prv_double_to_str+0x2c8>
    } else if (lwi->m.flags.precision && lwi->m.precision == 0) {
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	7f1b      	ldrb	r3, [r3, #28]
 80028a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <prv_double_to_str+0x2c8>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <prv_double_to_str+0x2c8>
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
        /* Precision must be set to 1 if set to 0 by default */
        if (def_type == 'g') {
 80028ba:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80028be:	2b67      	cmp	r3, #103	@ 0x67
 80028c0:	d102      	bne.n	80028c8 <prv_double_to_str+0x2c8>
            lwi->m.precision = 1;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	621a      	str	r2, [r3, #32]
     *
     * A double argument representing an infinity or 'NaN' is converted in the style of an 'f' or 'F' conversion specifier.
     */

    /* Calculate data for number */
    prv_calculate_dbl_num_data(lwi, &dblnum, def_type == 'e' ? in_num : orig_num, def_type);
 80028c8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80028cc:	2b65      	cmp	r3, #101	@ 0x65
 80028ce:	d119      	bne.n	8002904 <prv_double_to_str+0x304>
 80028d0:	ed97 7b00 	vldr	d7, [r7]
 80028d4:	e018      	b.n	8002908 <prv_double_to_str+0x308>
 80028d6:	bf00      	nop
 80028d8:	a7640000 	.word	0xa7640000
 80028dc:	0de0b6b3 	.word	0x0de0b6b3
 80028e0:	080038a0 	.word	0x080038a0
 80028e4:	080038a4 	.word	0x080038a4
 80028e8:	080038a8 	.word	0x080038a8
 80028ec:	080038b0 	.word	0x080038b0
 80028f0:	7fefffff 	.word	0x7fefffff
 80028f4:	080038b8 	.word	0x080038b8
 80028f8:	080038bc 	.word	0x080038bc
 80028fc:	3ff00000 	.word	0x3ff00000
 8002900:	40240000 	.word	0x40240000
 8002904:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8002908:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800290c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002910:	eeb0 0a47 	vmov.f32	s0, s14
 8002914:	eef0 0a67 	vmov.f32	s1, s15
 8002918:	4619      	mov	r1, r3
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f7ff fd10 	bl	8002340 <prv_calculate_dbl_num_data>

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Set type G */
    if (def_type == 'g') {
 8002920:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002924:	2b67      	cmp	r3, #103	@ 0x67
 8002926:	d137      	bne.n	8002998 <prv_double_to_str+0x398>
        /* As per standard to decide level of precision */
        if (exp_cnt >= -4 && exp_cnt < lwi->m.precision) {
 8002928:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800292a:	f113 0f04 	cmn.w	r3, #4
 800292e:	db19      	blt.n	8002964 <prv_double_to_str+0x364>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002936:	429a      	cmp	r2, r3
 8002938:	da14      	bge.n	8002964 <prv_double_to_str+0x364>
            lwi->m.precision -= exp_cnt + 1;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a1a      	ldr	r2, [r3, #32]
 800293e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002940:	3301      	adds	r3, #1
 8002942:	1ad2      	subs	r2, r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	621a      	str	r2, [r3, #32]
            chosen_precision -= exp_cnt + 1;
 8002948:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800294a:	3301      	adds	r3, #1
 800294c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	67bb      	str	r3, [r7, #120]	@ 0x78
            lwi->m.type = 'f';
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2266      	movs	r2, #102	@ 0x66
 8002956:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            in_num = orig_num;
 800295a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800295e:	e9c7 2300 	strd	r2, r3, [r7]
 8002962:	e00f      	b.n	8002984 <prv_double_to_str+0x384>
        } else {
            lwi->m.type = 'e';
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2265      	movs	r2, #101	@ 0x65
 8002968:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            if (lwi->m.precision > 0) {
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	2b00      	cmp	r3, #0
 8002972:	dd07      	ble.n	8002984 <prv_double_to_str+0x384>
                --lwi->m.precision;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	1e5a      	subs	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	621a      	str	r2, [r3, #32]
                --chosen_precision;
 800297e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002980:	3b01      	subs	r3, #1
 8002982:	67bb      	str	r3, [r7, #120]	@ 0x78
            }
        }
        prv_calculate_dbl_num_data(lwi, &dblnum, in_num, def_type);
 8002984:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8002988:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800298c:	ed97 0b00 	vldr	d0, [r7]
 8002990:	4619      	mov	r1, r3
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f7ff fcd4 	bl	8002340 <prv_calculate_dbl_num_data>
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */

    /* Set number of digits to display */
    digits_cnt = dblnum.digits_cnt_integer_part;
 8002998:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 800299c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (0) {
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    } else if (def_type == 'g' && lwi->m.precision > 0) {
 800299e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80029a2:	2b67      	cmp	r3, #103	@ 0x67
 80029a4:	d111      	bne.n	80029ca <prv_double_to_str+0x3ca>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	dd0d      	ble.n	80029ca <prv_double_to_str+0x3ca>
        digits_cnt += dblnum.digits_cnt_decimal_part_useful;
 80029ae:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 80029b2:	461a      	mov	r2, r3
 80029b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029b6:	4413      	add	r3, r2
 80029b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 80029ba:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 80029be:	2b00      	cmp	r3, #0
 80029c0:	dd12      	ble.n	80029e8 <prv_double_to_str+0x3e8>
            ++digits_cnt;
 80029c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029c4:	3301      	adds	r3, #1
 80029c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 80029c8:	e00e      	b.n	80029e8 <prv_double_to_str+0x3e8>
        }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    } else {
        if (chosen_precision > 0 && lwi->m.flags.precision) {
 80029ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	dd0b      	ble.n	80029e8 <prv_double_to_str+0x3e8>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	7f1b      	ldrb	r3, [r3, #28]
 80029d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d004      	beq.n	80029e8 <prv_double_to_str+0x3e8>
            /* Add precision digits + dot separator */
            digits_cnt += chosen_precision + 1;
 80029de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029e0:	3301      	adds	r3, #1
 80029e2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80029e4:	4413      	add	r3, r2
 80029e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
        }
    }

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Increase number of digits to display */
    if (lwi->m.type == 'e') {
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80029ee:	2b65      	cmp	r3, #101	@ 0x65
 80029f0:	d10d      	bne.n	8002a0e <prv_double_to_str+0x40e>
        /* Format is +Exxx, so add 4 or 5 characters (max is 307, min is 00 for exponent) */
        digits_cnt += 4 + (exp_cnt >= 100 || exp_cnt <= -100);
 80029f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029f4:	2b63      	cmp	r3, #99	@ 0x63
 80029f6:	dc03      	bgt.n	8002a00 <prv_double_to_str+0x400>
 80029f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029fa:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 80029fe:	da01      	bge.n	8002a04 <prv_double_to_str+0x404>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <prv_double_to_str+0x406>
 8002a04:	2300      	movs	r3, #0
 8002a06:	3304      	adds	r3, #4
 8002a08:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002a0a:	4413      	add	r3, r2
 8002a0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */

    /* Output strings */
    prv_out_str_before(lwi, digits_cnt);
 8002a0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a10:	4619      	mov	r1, r3
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff fa4c 	bl	8001eb0 <prv_out_str_before>

    /* Output integer part of number */
    if (dblnum.integer_part == 0) {
 8002a18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	d105      	bne.n	8002a2c <prv_double_to_str+0x42c>
        lwi->out_fn(lwi, '0');
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	2130      	movs	r1, #48	@ 0x30
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	4798      	blx	r3
 8002a2a:	e03a      	b.n	8002aa2 <prv_double_to_str+0x4a2>
    } else {
        for (i = 0; dblnum.integer_part > 0; dblnum.integer_part /= 10, ++i) {
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a30:	e01f      	b.n	8002a72 <prv_double_to_str+0x472>
            str[i] = (char)'0' + (char)(dblnum.integer_part % 10);
 8002a32:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002a36:	f04f 020a 	mov.w	r2, #10
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	f7fe f819 	bl	8000a74 <__aeabi_ldivmod>
 8002a42:	b2d3      	uxtb	r3, r2
 8002a44:	3330      	adds	r3, #48	@ 0x30
 8002a46:	b2d9      	uxtb	r1, r3
 8002a48:	f107 0218 	add.w	r2, r7, #24
 8002a4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a4e:	4413      	add	r3, r2
 8002a50:	460a      	mov	r2, r1
 8002a52:	701a      	strb	r2, [r3, #0]
        for (i = 0; dblnum.integer_part > 0; dblnum.integer_part /= 10, ++i) {
 8002a54:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002a58:	f04f 020a 	mov.w	r2, #10
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	f7fe f808 	bl	8000a74 <__aeabi_ldivmod>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8002a6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a6e:	3301      	adds	r3, #1
 8002a70:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002a76:	2a01      	cmp	r2, #1
 8002a78:	f173 0300 	sbcs.w	r3, r3, #0
 8002a7c:	dad9      	bge.n	8002a32 <prv_double_to_str+0x432>
        }
        for (; i > 0; --i) {
 8002a7e:	e00d      	b.n	8002a9c <prv_double_to_str+0x49c>
            lwi->out_fn(lwi, str[i - 1]);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a86:	3a01      	subs	r2, #1
 8002a88:	3280      	adds	r2, #128	@ 0x80
 8002a8a:	443a      	add	r2, r7
 8002a8c:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002a90:	4611      	mov	r1, r2
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	4798      	blx	r3
        for (; i > 0; --i) {
 8002a96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	dcee      	bgt.n	8002a80 <prv_double_to_str+0x480>
        }
    }

    /* Output decimal part */
    if (lwi->m.precision > 0) {
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f340 809a 	ble.w	8002be0 <prv_double_to_str+0x5e0>
        int x;
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 8002aac:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	dd04      	ble.n	8002abe <prv_double_to_str+0x4be>
            lwi->out_fn(lwi, '.');
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	212e      	movs	r1, #46	@ 0x2e
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	4798      	blx	r3
        }
        for (i = 0; dblnum.decimal_part > 0; dblnum.decimal_part /= 10, ++i) {
 8002abe:	2300      	movs	r3, #0
 8002ac0:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ac2:	e01f      	b.n	8002b04 <prv_double_to_str+0x504>
            str[i] = (char)'0' + (char)(dblnum.decimal_part % 10);
 8002ac4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002ac8:	f04f 020a 	mov.w	r2, #10
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	f7fd ffd0 	bl	8000a74 <__aeabi_ldivmod>
 8002ad4:	b2d3      	uxtb	r3, r2
 8002ad6:	3330      	adds	r3, #48	@ 0x30
 8002ad8:	b2d9      	uxtb	r1, r3
 8002ada:	f107 0218 	add.w	r2, r7, #24
 8002ade:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ae0:	4413      	add	r3, r2
 8002ae2:	460a      	mov	r2, r1
 8002ae4:	701a      	strb	r2, [r3, #0]
        for (i = 0; dblnum.decimal_part > 0; dblnum.decimal_part /= 10, ++i) {
 8002ae6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002aea:	f04f 020a 	mov.w	r2, #10
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	f7fd ffbf 	bl	8000a74 <__aeabi_ldivmod>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002afe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b00:	3301      	adds	r3, #1
 8002b02:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b08:	2a01      	cmp	r2, #1
 8002b0a:	f173 0300 	sbcs.w	r3, r3, #0
 8002b0e:	dad9      	bge.n	8002ac4 <prv_double_to_str+0x4c4>
        }

        /* Output relevant zeros first, string to print is opposite way */
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
        if (def_type == 'g') {
 8002b10:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002b14:	2b67      	cmp	r3, #103	@ 0x67
 8002b16:	d11e      	bne.n	8002b56 <prv_double_to_str+0x556>
            /* TODO: This is to be checked */
            for (x = 0; x < (lwi->m.precision - i) && dblnum.digits_cnt_decimal_part_useful > 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b1c:	e00f      	b.n	8002b3e <prv_double_to_str+0x53e>
                 ++x, --dblnum.digits_cnt_decimal_part_useful) {
                lwi->out_fn(lwi, '0');
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	2130      	movs	r1, #48	@ 0x30
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	4798      	blx	r3
                 ++x, --dblnum.digits_cnt_decimal_part_useful) {
 8002b28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b2e:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	b21b      	sxth	r3, r3
 8002b3a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
            for (x = 0; x < (lwi->m.precision - i) && dblnum.digits_cnt_decimal_part_useful > 0;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a1a      	ldr	r2, [r3, #32]
 8002b42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	da33      	bge.n	8002bb4 <prv_double_to_str+0x5b4>
 8002b4c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	dce4      	bgt.n	8002b1e <prv_double_to_str+0x51e>
 8002b54:	e02e      	b.n	8002bb4 <prv_double_to_str+0x5b4>
            }
        } else
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
        {
            for (x = i; x < lwi->m.precision; ++x) {
 8002b56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b58:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b5a:	e007      	b.n	8002b6c <prv_double_to_str+0x56c>
                lwi->out_fn(lwi, '0');
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	2130      	movs	r1, #48	@ 0x30
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	4798      	blx	r3
            for (x = i; x < lwi->m.precision; ++x) {
 8002b66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b68:	3301      	adds	r3, #1
 8002b6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002b72:	429a      	cmp	r2, r3
 8002b74:	dbf2      	blt.n	8002b5c <prv_double_to_str+0x55c>
            }
        }

        /* Now print string itself */
        for (; i > 0; --i) {
 8002b76:	e01d      	b.n	8002bb4 <prv_double_to_str+0x5b4>
            lwi->out_fn(lwi, str[i - 1]);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002b7e:	3a01      	subs	r2, #1
 8002b80:	3280      	adds	r2, #128	@ 0x80
 8002b82:	443a      	add	r2, r7
 8002b84:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002b88:	4611      	mov	r1, r2
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	4798      	blx	r3
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
            if (def_type == 'g' && --dblnum.digits_cnt_decimal_part_useful == 0) {
 8002b8e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002b92:	2b67      	cmp	r3, #103	@ 0x67
 8002b94:	d10b      	bne.n	8002bae <prv_double_to_str+0x5ae>
 8002b96:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	b21b      	sxth	r3, r3
 8002ba2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8002ba6:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d006      	beq.n	8002bbc <prv_double_to_str+0x5bc>
        for (; i > 0; --i) {
 8002bae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	677b      	str	r3, [r7, #116]	@ 0x74
 8002bb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	dcde      	bgt.n	8002b78 <prv_double_to_str+0x578>
 8002bba:	e000      	b.n	8002bbe <prv_double_to_str+0x5be>
                break;
 8002bbc:	bf00      	nop
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
        }

        /* Print ending zeros if selected precision is bigger than maximum supported */
        if (def_type != 'g') {
 8002bbe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002bc2:	2b67      	cmp	r3, #103	@ 0x67
 8002bc4:	d00c      	beq.n	8002be0 <prv_double_to_str+0x5e0>
            for (; x < chosen_precision; ++x) {
 8002bc6:	e007      	b.n	8002bd8 <prv_double_to_str+0x5d8>
                lwi->out_fn(lwi, '0');
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	2130      	movs	r1, #48	@ 0x30
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	4798      	blx	r3
            for (; x < chosen_precision; ++x) {
 8002bd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bd8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002bda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	dbf3      	blt.n	8002bc8 <prv_double_to_str+0x5c8>
        }
    }

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Engineering mode output, add exponent part */
    if (lwi->m.type == 'e') {
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002be6:	2b65      	cmp	r3, #101	@ 0x65
 8002be8:	d15c      	bne.n	8002ca4 <prv_double_to_str+0x6a4>
        lwi->out_fn(lwi, lwi->m.flags.uc ? 'E' : 'e');
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	7f52      	ldrb	r2, [r2, #29]
 8002bf2:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	2a00      	cmp	r2, #0
 8002bfa:	d001      	beq.n	8002c00 <prv_double_to_str+0x600>
 8002bfc:	2245      	movs	r2, #69	@ 0x45
 8002bfe:	e000      	b.n	8002c02 <prv_double_to_str+0x602>
 8002c00:	2265      	movs	r2, #101	@ 0x65
 8002c02:	4611      	mov	r1, r2
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	4798      	blx	r3
        lwi->out_fn(lwi, exp_cnt >= 0 ? '+' : '-');
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002c0e:	2a00      	cmp	r2, #0
 8002c10:	db01      	blt.n	8002c16 <prv_double_to_str+0x616>
 8002c12:	222b      	movs	r2, #43	@ 0x2b
 8002c14:	e000      	b.n	8002c18 <prv_double_to_str+0x618>
 8002c16:	222d      	movs	r2, #45	@ 0x2d
 8002c18:	4611      	mov	r1, r2
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	4798      	blx	r3
        if (exp_cnt < 0) {
 8002c1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	da02      	bge.n	8002c2a <prv_double_to_str+0x62a>
            exp_cnt = -exp_cnt;
 8002c24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c26:	425b      	negs	r3, r3
 8002c28:	673b      	str	r3, [r7, #112]	@ 0x70
        }
        if (exp_cnt >= 100) {
 8002c2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c2c:	2b63      	cmp	r3, #99	@ 0x63
 8002c2e:	dd16      	ble.n	8002c5e <prv_double_to_str+0x65e>
            lwi->out_fn(lwi, (char)'0' + (char)(exp_cnt / 100));
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c36:	4921      	ldr	r1, [pc, #132]	@ (8002cbc <prv_double_to_str+0x6bc>)
 8002c38:	fb81 0103 	smull	r0, r1, r1, r3
 8002c3c:	1149      	asrs	r1, r1, #5
 8002c3e:	17db      	asrs	r3, r3, #31
 8002c40:	1acb      	subs	r3, r1, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	3330      	adds	r3, #48	@ 0x30
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	4619      	mov	r1, r3
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	4790      	blx	r2
            exp_cnt /= 100;
 8002c4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c50:	4a1a      	ldr	r2, [pc, #104]	@ (8002cbc <prv_double_to_str+0x6bc>)
 8002c52:	fb82 1203 	smull	r1, r2, r2, r3
 8002c56:	1152      	asrs	r2, r2, #5
 8002c58:	17db      	asrs	r3, r3, #31
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	673b      	str	r3, [r7, #112]	@ 0x70
        }
        lwi->out_fn(lwi, (char)'0' + (char)(exp_cnt / 10));
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c64:	4916      	ldr	r1, [pc, #88]	@ (8002cc0 <prv_double_to_str+0x6c0>)
 8002c66:	fb81 0103 	smull	r0, r1, r1, r3
 8002c6a:	1089      	asrs	r1, r1, #2
 8002c6c:	17db      	asrs	r3, r3, #31
 8002c6e:	1acb      	subs	r3, r1, r3
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	3330      	adds	r3, #48	@ 0x30
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	4619      	mov	r1, r3
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	4790      	blx	r2
        lwi->out_fn(lwi, (char)'0' + (char)(exp_cnt % 10));
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	695c      	ldr	r4, [r3, #20]
 8002c80:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002c82:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc0 <prv_double_to_str+0x6c0>)
 8002c84:	fb83 1302 	smull	r1, r3, r3, r2
 8002c88:	1099      	asrs	r1, r3, #2
 8002c8a:	17d3      	asrs	r3, r2, #31
 8002c8c:	1ac9      	subs	r1, r1, r3
 8002c8e:	460b      	mov	r3, r1
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	1ad1      	subs	r1, r2, r3
 8002c98:	b2cb      	uxtb	r3, r1
 8002c9a:	3330      	adds	r3, #48	@ 0x30
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	47a0      	blx	r4
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    prv_out_str_after(lwi, digits_cnt);
 8002ca4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff fa2f 	bl	800210c <prv_out_str_after>

    return 1;
 8002cae:	2301      	movs	r3, #1
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3780      	adds	r7, #128	@ 0x80
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002cba:	bf00      	nop
 8002cbc:	51eb851f 	.word	0x51eb851f
 8002cc0:	66666667 	.word	0x66666667

08002cc4 <prv_format>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       arg: Variable parameters list
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_format(lwprintf_int_t* lwi, va_list arg) {
 8002cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc8:	b09d      	sub	sp, #116	@ 0x74
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6378      	str	r0, [r7, #52]	@ 0x34
 8002cce:	6339      	str	r1, [r7, #48]	@ 0x30
    uint8_t detected = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    const char* fmt = lwi->fmt;
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	63bb      	str	r3, [r7, #56]	@ 0x38
         || !lwprintf_sys_mutex_wait(&lwi->lwobj->mutex))) { /* Cannot acquire mutex */
        return 0;
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */

    while (fmt != NULL && *fmt != '\0') {
 8002cdc:	f000 bc91 	b.w	8003602 <prv_format+0x93e>
        /* Check if we should stop processing */
        if (lwi->is_print_cancelled) {
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce2:	7e1b      	ldrb	r3, [r3, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f040 8495 	bne.w	8003614 <prv_format+0x950>
            break;
        }

        /* Detect beginning */
        if (*fmt != '%') {
 8002cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b25      	cmp	r3, #37	@ 0x25
 8002cf0:	d00b      	beq.n	8002d0a <prv_format+0x46>
            lwi->out_fn(lwi, *fmt); /* Output character */
 8002cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002cfe:	4790      	blx	r2
            ++fmt;
 8002d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d02:	3301      	adds	r3, #1
 8002d04:	63bb      	str	r3, [r7, #56]	@ 0x38
            continue;
 8002d06:	f000 bc7c 	b.w	8003602 <prv_format+0x93e>
        }
        ++fmt;
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
        memset(&lwi->m, 0x00, sizeof(lwi->m)); /* Reset structure */
 8002d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d12:	331c      	adds	r3, #28
 8002d14:	2210      	movs	r2, #16
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fd4a 	bl	80037b2 <memset>
        /* %[flags][width][.precision][length]type */
        /* Go to https://docs.majerle.eu for more info about supported features */

        /* Check [flags] */
        /* It can have multiple flags in any order */
        detected = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        do {
            switch (*fmt) {
 8002d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	3b20      	subs	r3, #32
 8002d2a:	2b10      	cmp	r3, #16
 8002d2c:	d848      	bhi.n	8002dc0 <prv_format+0xfc>
 8002d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d34 <prv_format+0x70>)
 8002d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d34:	08002d91 	.word	0x08002d91
 8002d38:	08002dc1 	.word	0x08002dc1
 8002d3c:	08002dc1 	.word	0x08002dc1
 8002d40:	08002db5 	.word	0x08002db5
 8002d44:	08002dc1 	.word	0x08002dc1
 8002d48:	08002dc1 	.word	0x08002dc1
 8002d4c:	08002dc1 	.word	0x08002dc1
 8002d50:	08002da9 	.word	0x08002da9
 8002d54:	08002dc1 	.word	0x08002dc1
 8002d58:	08002dc1 	.word	0x08002dc1
 8002d5c:	08002dc1 	.word	0x08002dc1
 8002d60:	08002d85 	.word	0x08002d85
 8002d64:	08002dc1 	.word	0x08002dc1
 8002d68:	08002d79 	.word	0x08002d79
 8002d6c:	08002dc1 	.word	0x08002dc1
 8002d70:	08002dc1 	.word	0x08002dc1
 8002d74:	08002d9d 	.word	0x08002d9d
                case '-': lwi->m.flags.left_align = 1; break;
 8002d78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d7a:	7f13      	ldrb	r3, [r2, #28]
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	7713      	strb	r3, [r2, #28]
 8002d82:	e021      	b.n	8002dc8 <prv_format+0x104>
                case '+': lwi->m.flags.plus = 1; break;
 8002d84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d86:	7f13      	ldrb	r3, [r2, #28]
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	7713      	strb	r3, [r2, #28]
 8002d8e:	e01b      	b.n	8002dc8 <prv_format+0x104>
                case ' ': lwi->m.flags.space = 1; break;
 8002d90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d92:	7f13      	ldrb	r3, [r2, #28]
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	7713      	strb	r3, [r2, #28]
 8002d9a:	e015      	b.n	8002dc8 <prv_format+0x104>
                case '0': lwi->m.flags.zero = 1; break;
 8002d9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d9e:	7f13      	ldrb	r3, [r2, #28]
 8002da0:	f043 0308 	orr.w	r3, r3, #8
 8002da4:	7713      	strb	r3, [r2, #28]
 8002da6:	e00f      	b.n	8002dc8 <prv_format+0x104>
                case '\'': lwi->m.flags.thousands = 1; break;
 8002da8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002daa:	7f13      	ldrb	r3, [r2, #28]
 8002dac:	f043 0310 	orr.w	r3, r3, #16
 8002db0:	7713      	strb	r3, [r2, #28]
 8002db2:	e009      	b.n	8002dc8 <prv_format+0x104>
                case '#': lwi->m.flags.alt = 1; break;
 8002db4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002db6:	7f13      	ldrb	r3, [r2, #28]
 8002db8:	f043 0320 	orr.w	r3, r3, #32
 8002dbc:	7713      	strb	r3, [r2, #28]
 8002dbe:	e003      	b.n	8002dc8 <prv_format+0x104>
                default: detected = 0; break;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8002dc6:	bf00      	nop
            }
            if (detected) {
 8002dc8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <prv_format+0x112>
                ++fmt;
 8002dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        } while (detected);
 8002dd6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1a2      	bne.n	8002d24 <prv_format+0x60>

        /* Check [width] */
        lwi->m.width = 0;
 8002dde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002de0:	2300      	movs	r3, #0
 8002de2:	6253      	str	r3, [r2, #36]	@ 0x24
        if (CHARISNUM(*fmt)) { /* Fixed width check */
 8002de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b2f      	cmp	r3, #47	@ 0x2f
 8002dea:	d90c      	bls.n	8002e06 <prv_format+0x142>
 8002dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b39      	cmp	r3, #57	@ 0x39
 8002df2:	d808      	bhi.n	8002e06 <prv_format+0x142>
            /* If number is negative, it has been captured from previous step (left align) */
            lwi->m.width = prv_parse_num(&fmt); /* Number from string directly */
 8002df4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff f830 	bl	8001e5e <prv_parse_num>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e02:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e04:	e01b      	b.n	8002e3e <prv_format+0x17a>
        } else if (*fmt == '*') {               /* Or variable check */
 8002e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e0c:	d117      	bne.n	8002e3e <prv_format+0x17a>
            const int w = (int)va_arg(arg, int);
 8002e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e10:	1d13      	adds	r3, r2, #4
 8002e12:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e14:	6813      	ldr	r3, [r2, #0]
 8002e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
            if (w < 0) {
 8002e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	da09      	bge.n	8002e32 <prv_format+0x16e>
                lwi->m.flags.left_align = 1; /* Negative width means left aligned */
 8002e1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e20:	7f13      	ldrb	r3, [r2, #28]
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	7713      	strb	r3, [r2, #28]
                lwi->m.width = -w;
 8002e28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e2a:	425a      	negs	r2, r3
 8002e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e30:	e002      	b.n	8002e38 <prv_format+0x174>
            } else {
                lwi->m.width = w;
 8002e32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e36:	6253      	str	r3, [r2, #36]	@ 0x24
            }
            ++fmt;
 8002e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        /* Check [.precision] */
        lwi->m.precision = 0;
 8002e3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e40:	2300      	movs	r3, #0
 8002e42:	6213      	str	r3, [r2, #32]
        if (*fmt == '.') { /* Precision flag is detected */
 8002e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e4a:	d129      	bne.n	8002ea0 <prv_format+0x1dc>
            lwi->m.flags.precision = 1;
 8002e4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e4e:	7f13      	ldrb	r3, [r2, #28]
 8002e50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e54:	7713      	strb	r3, [r2, #28]
            if (*++fmt == '*') { /* Variable check */
 8002e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e58:	3301      	adds	r3, #1
 8002e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e62:	d10d      	bne.n	8002e80 <prv_format+0x1bc>
                const int pr = (int)va_arg(arg, int);
 8002e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e66:	1d13      	adds	r3, r2, #4
 8002e68:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e6a:	6813      	ldr	r3, [r2, #0]
 8002e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
                lwi->m.precision = pr > 0 ? pr : 0;
 8002e6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e70:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8002e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e76:	621a      	str	r2, [r3, #32]
                ++fmt;
 8002e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e7e:	e00f      	b.n	8002ea0 <prv_format+0x1dc>
            } else if (CHARISNUM(*fmt)) { /* Directly in the string */
 8002e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b2f      	cmp	r3, #47	@ 0x2f
 8002e86:	d90b      	bls.n	8002ea0 <prv_format+0x1dc>
 8002e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b39      	cmp	r3, #57	@ 0x39
 8002e8e:	d807      	bhi.n	8002ea0 <prv_format+0x1dc>
                lwi->m.precision = prv_parse_num(&fmt);
 8002e90:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe ffe2 	bl	8001e5e <prv_parse_num>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e9e:	621a      	str	r2, [r3, #32]
            }
        }

        /* Check [length] */
        detected = 1;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        switch (*fmt) {
 8002ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	3b4c      	subs	r3, #76	@ 0x4c
 8002eac:	2b2e      	cmp	r3, #46	@ 0x2e
 8002eae:	f200 80a1 	bhi.w	8002ff4 <prv_format+0x330>
 8002eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb8 <prv_format+0x1f4>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002ffd 	.word	0x08002ffd
 8002ebc:	08002ff5 	.word	0x08002ff5
 8002ec0:	08002ff5 	.word	0x08002ff5
 8002ec4:	08002ff5 	.word	0x08002ff5
 8002ec8:	08002ff5 	.word	0x08002ff5
 8002ecc:	08002ff5 	.word	0x08002ff5
 8002ed0:	08002ff5 	.word	0x08002ff5
 8002ed4:	08002ff5 	.word	0x08002ff5
 8002ed8:	08002ff5 	.word	0x08002ff5
 8002edc:	08002ff5 	.word	0x08002ff5
 8002ee0:	08002ff5 	.word	0x08002ff5
 8002ee4:	08002ff5 	.word	0x08002ff5
 8002ee8:	08002ff5 	.word	0x08002ff5
 8002eec:	08002ff5 	.word	0x08002ff5
 8002ef0:	08002ff5 	.word	0x08002ff5
 8002ef4:	08002ff5 	.word	0x08002ff5
 8002ef8:	08002ff5 	.word	0x08002ff5
 8002efc:	08002ff5 	.word	0x08002ff5
 8002f00:	08002ff5 	.word	0x08002ff5
 8002f04:	08002ff5 	.word	0x08002ff5
 8002f08:	08002ff5 	.word	0x08002ff5
 8002f0c:	08002ff5 	.word	0x08002ff5
 8002f10:	08002ff5 	.word	0x08002ff5
 8002f14:	08002ff5 	.word	0x08002ff5
 8002f18:	08002ff5 	.word	0x08002ff5
 8002f1c:	08002ff5 	.word	0x08002ff5
 8002f20:	08002ff5 	.word	0x08002ff5
 8002f24:	08002ff5 	.word	0x08002ff5
 8002f28:	08002f75 	.word	0x08002f75
 8002f2c:	08002ff5 	.word	0x08002ff5
 8002f30:	08002fe3 	.word	0x08002fe3
 8002f34:	08002ff5 	.word	0x08002ff5
 8002f38:	08002fa3 	.word	0x08002fa3
 8002f3c:	08002ff5 	.word	0x08002ff5
 8002f40:	08002ff5 	.word	0x08002ff5
 8002f44:	08002ff5 	.word	0x08002ff5
 8002f48:	08002ff5 	.word	0x08002ff5
 8002f4c:	08002ff5 	.word	0x08002ff5
 8002f50:	08002ff5 	.word	0x08002ff5
 8002f54:	08002ff5 	.word	0x08002ff5
 8002f58:	08002ffd 	.word	0x08002ffd
 8002f5c:	08002ff5 	.word	0x08002ff5
 8002f60:	08002ff5 	.word	0x08002ff5
 8002f64:	08002ff5 	.word	0x08002ff5
 8002f68:	08002ff5 	.word	0x08002ff5
 8002f6c:	08002ff5 	.word	0x08002ff5
 8002f70:	08002fd1 	.word	0x08002fd1
            case 'h':
                lwi->m.flags.char_short = 1;     /* Single h detected */
 8002f74:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002f76:	7f4b      	ldrb	r3, [r1, #29]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f362 0383 	bfi	r3, r2, #2, #2
 8002f7e:	774b      	strb	r3, [r1, #29]
                if (*++fmt == 'h') {             /* Does it follow by another h? */
 8002f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f82:	3301      	adds	r3, #1
 8002f84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b68      	cmp	r3, #104	@ 0x68
 8002f8c:	d138      	bne.n	8003000 <prv_format+0x33c>
                    lwi->m.flags.char_short = 2; /* Second h detected */
 8002f8e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002f90:	7f4b      	ldrb	r3, [r1, #29]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f362 0383 	bfi	r3, r2, #2, #2
 8002f98:	774b      	strb	r3, [r1, #29]
                    ++fmt;
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
                break;
 8002fa0:	e02e      	b.n	8003000 <prv_format+0x33c>
            case 'l':
                lwi->m.flags.longlong = 1;     /* Single l detected */
 8002fa2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002fa4:	7f4b      	ldrb	r3, [r1, #29]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f362 0301 	bfi	r3, r2, #0, #2
 8002fac:	774b      	strb	r3, [r1, #29]
                if (*++fmt == 'l') {           /* Does it follow by another l? */
 8002fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b6c      	cmp	r3, #108	@ 0x6c
 8002fba:	d123      	bne.n	8003004 <prv_format+0x340>
                    lwi->m.flags.longlong = 2; /* Second l detected */
 8002fbc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002fbe:	7f4b      	ldrb	r3, [r1, #29]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	f362 0301 	bfi	r3, r2, #0, #2
 8002fc6:	774b      	strb	r3, [r1, #29]
                    ++fmt;
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fca:	3301      	adds	r3, #1
 8002fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
                break;
 8002fce:	e019      	b.n	8003004 <prv_format+0x340>
            case 'L': break;
            case 'z':
                lwi->m.flags.sz_t = 1; /* Size T flag */
 8002fd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fd2:	7f53      	ldrb	r3, [r2, #29]
 8002fd4:	f043 0310 	orr.w	r3, r3, #16
 8002fd8:	7753      	strb	r3, [r2, #29]
                ++fmt;
 8002fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fdc:	3301      	adds	r3, #1
 8002fde:	63bb      	str	r3, [r7, #56]	@ 0x38
                break;
 8002fe0:	e011      	b.n	8003006 <prv_format+0x342>
            case 'j':
                lwi->m.flags.umax_t = 1; /* uintmax_t flag */
 8002fe2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fe4:	7f53      	ldrb	r3, [r2, #29]
 8002fe6:	f043 0320 	orr.w	r3, r3, #32
 8002fea:	7753      	strb	r3, [r2, #29]
                ++fmt;
 8002fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fee:	3301      	adds	r3, #1
 8002ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
                break;
 8002ff2:	e008      	b.n	8003006 <prv_format+0x342>
            case 't': break;
            default: detected = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8002ffa:	e004      	b.n	8003006 <prv_format+0x342>
            case 'L': break;
 8002ffc:	bf00      	nop
 8002ffe:	e002      	b.n	8003006 <prv_format+0x342>
                break;
 8003000:	bf00      	nop
 8003002:	e000      	b.n	8003006 <prv_format+0x342>
                break;
 8003004:	bf00      	nop
        }

        /* Check type */
        lwi->m.type = *fmt + (char)((*fmt >= 'A' && *fmt <= 'Z') ? 0x20 : 0x00);
 8003006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003008:	781a      	ldrb	r2, [r3, #0]
 800300a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b40      	cmp	r3, #64	@ 0x40
 8003010:	d905      	bls.n	800301e <prv_format+0x35a>
 8003012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b5a      	cmp	r3, #90	@ 0x5a
 8003018:	d801      	bhi.n	800301e <prv_format+0x35a>
 800301a:	2320      	movs	r3, #32
 800301c:	e000      	b.n	8003020 <prv_format+0x35c>
 800301e:	2300      	movs	r3, #0
 8003020:	4413      	add	r3, r2
 8003022:	b2db      	uxtb	r3, r3
 8003024:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003026:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
        if (*fmt >= 'A' && *fmt <= 'Z') {
 800302a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b40      	cmp	r3, #64	@ 0x40
 8003030:	d908      	bls.n	8003044 <prv_format+0x380>
 8003032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b5a      	cmp	r3, #90	@ 0x5a
 8003038:	d804      	bhi.n	8003044 <prv_format+0x380>
            lwi->m.flags.uc = 1;
 800303a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800303c:	7f53      	ldrb	r3, [r2, #29]
 800303e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003042:	7753      	strb	r3, [r2, #29]
        }
        switch (*fmt) {
 8003044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	3b25      	subs	r3, #37	@ 0x25
 800304a:	2b53      	cmp	r3, #83	@ 0x53
 800304c:	f200 82cb 	bhi.w	80035e6 <prv_format+0x922>
 8003050:	a201      	add	r2, pc, #4	@ (adr r2, 8003058 <prv_format+0x394>)
 8003052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003056:	bf00      	nop
 8003058:	08003499 	.word	0x08003499
 800305c:	080035e7 	.word	0x080035e7
 8003060:	080035e7 	.word	0x080035e7
 8003064:	080035e7 	.word	0x080035e7
 8003068:	080035e7 	.word	0x080035e7
 800306c:	080035e7 	.word	0x080035e7
 8003070:	080035e7 	.word	0x080035e7
 8003074:	080035e7 	.word	0x080035e7
 8003078:	080035e7 	.word	0x080035e7
 800307c:	080035e7 	.word	0x080035e7
 8003080:	080035e7 	.word	0x080035e7
 8003084:	080035e7 	.word	0x080035e7
 8003088:	080035e7 	.word	0x080035e7
 800308c:	080035e7 	.word	0x080035e7
 8003090:	080035e7 	.word	0x080035e7
 8003094:	080035e7 	.word	0x080035e7
 8003098:	080035e7 	.word	0x080035e7
 800309c:	080035e7 	.word	0x080035e7
 80030a0:	080035e7 	.word	0x080035e7
 80030a4:	080035e7 	.word	0x080035e7
 80030a8:	080035e7 	.word	0x080035e7
 80030ac:	080035e7 	.word	0x080035e7
 80030b0:	080035e7 	.word	0x080035e7
 80030b4:	080035e7 	.word	0x080035e7
 80030b8:	080035e7 	.word	0x080035e7
 80030bc:	080035e7 	.word	0x080035e7
 80030c0:	080035e7 	.word	0x080035e7
 80030c4:	080035e7 	.word	0x080035e7
 80030c8:	080031a9 	.word	0x080031a9
 80030cc:	08003259 	.word	0x08003259
 80030d0:	080035e7 	.word	0x080035e7
 80030d4:	080035e7 	.word	0x080035e7
 80030d8:	08003461 	.word	0x08003461
 80030dc:	08003461 	.word	0x08003461
 80030e0:	08003461 	.word	0x08003461
 80030e4:	080035e7 	.word	0x080035e7
 80030e8:	080035e7 	.word	0x080035e7
 80030ec:	080035e7 	.word	0x080035e7
 80030f0:	080034a5 	.word	0x080034a5
 80030f4:	080035e7 	.word	0x080035e7
 80030f8:	080035e7 	.word	0x080035e7
 80030fc:	080035e7 	.word	0x080035e7
 8003100:	080035e7 	.word	0x080035e7
 8003104:	080035e7 	.word	0x080035e7
 8003108:	080035e7 	.word	0x080035e7
 800310c:	080035e7 	.word	0x080035e7
 8003110:	080035e7 	.word	0x080035e7
 8003114:	080035e7 	.word	0x080035e7
 8003118:	080035e7 	.word	0x080035e7
 800311c:	080035e7 	.word	0x080035e7
 8003120:	080035e7 	.word	0x080035e7
 8003124:	08003259 	.word	0x08003259
 8003128:	080035e7 	.word	0x080035e7
 800312c:	080035e7 	.word	0x080035e7
 8003130:	080035e7 	.word	0x080035e7
 8003134:	080035e7 	.word	0x080035e7
 8003138:	080035e7 	.word	0x080035e7
 800313c:	080035e7 	.word	0x080035e7
 8003140:	080035e7 	.word	0x080035e7
 8003144:	080035e7 	.word	0x080035e7
 8003148:	080031a9 	.word	0x080031a9
 800314c:	08003259 	.word	0x08003259
 8003150:	080031c1 	.word	0x080031c1
 8003154:	080031d7 	.word	0x080031d7
 8003158:	08003461 	.word	0x08003461
 800315c:	08003461 	.word	0x08003461
 8003160:	08003461 	.word	0x08003461
 8003164:	080035e7 	.word	0x080035e7
 8003168:	080031d7 	.word	0x080031d7
 800316c:	080035e7 	.word	0x080035e7
 8003170:	080034a5 	.word	0x080034a5
 8003174:	080035e7 	.word	0x080035e7
 8003178:	080035e7 	.word	0x080035e7
 800317c:	08003483 	.word	0x08003483
 8003180:	08003259 	.word	0x08003259
 8003184:	08003425 	.word	0x08003425
 8003188:	080035e7 	.word	0x080035e7
 800318c:	080035e7 	.word	0x080035e7
 8003190:	080033db 	.word	0x080033db
 8003194:	080035e7 	.word	0x080035e7
 8003198:	08003259 	.word	0x08003259
 800319c:	080035e7 	.word	0x080035e7
 80031a0:	080035e7 	.word	0x080035e7
 80031a4:	08003259 	.word	0x08003259
            case 'a':
            case 'A':
                /* Double in hexadecimal notation */
                (void)va_arg(arg, double);      /* Read argument to ignore it and move to next one */
 80031a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031aa:	3307      	adds	r3, #7
 80031ac:	f023 0307 	bic.w	r3, r3, #7
 80031b0:	3308      	adds	r3, #8
 80031b2:	633b      	str	r3, [r7, #48]	@ 0x30
                prv_out_str_raw(lwi, "NaN", 3); /* Print string */
 80031b4:	2203      	movs	r2, #3
 80031b6:	4999      	ldr	r1, [pc, #612]	@ (800341c <prv_format+0x758>)
 80031b8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80031ba:	f7fe ffc9 	bl	8002150 <prv_out_str_raw>
                break;
 80031be:	e21d      	b.n	80035fc <prv_format+0x938>
            case 'c': lwi->out_fn(lwi, (char)va_arg(arg, int)); break;
 80031c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c2:	695c      	ldr	r4, [r3, #20]
 80031c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031c6:	1d13      	adds	r3, r2, #4
 80031c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031ca:	6813      	ldr	r3, [r2, #0]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	4619      	mov	r1, r3
 80031d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80031d2:	47a0      	blx	r4
 80031d4:	e212      	b.n	80035fc <prv_format+0x938>
#if LWPRINTF_CFG_SUPPORT_TYPE_INT
            case 'd':
            case 'i': {
                /* Check for different length parameters */
                lwi->m.base = 10;
 80031d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031d8:	230a      	movs	r3, #10
 80031da:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
                if (lwi->m.flags.longlong == 0) {
 80031de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e0:	7f5b      	ldrb	r3, [r3, #29]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10c      	bne.n	8003206 <prv_format+0x542>
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed int));
 80031ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ee:	1d13      	adds	r3, r2, #4
 80031f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80031f2:	6813      	ldr	r3, [r2, #0]
 80031f4:	17da      	asrs	r2, r3, #31
 80031f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031fe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003200:	f7ff f85d 	bl	80022be <prv_longest_signed_int_to_str>
#if LWPRINTF_CFG_SUPPORT_LONG_LONG
                } else if (lwi->m.flags.longlong == 2) {
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed long long int));
#endif /* LWPRINTF_CFG_SUPPORT_LONG_LONG */
                }
                break;
 8003204:	e1f7      	b.n	80035f6 <prv_format+0x932>
                } else if (lwi->m.flags.longlong == 1) {
 8003206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003208:	7f5b      	ldrb	r3, [r3, #29]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b01      	cmp	r3, #1
 8003212:	d10c      	bne.n	800322e <prv_format+0x56a>
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed long int));
 8003214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003216:	1d13      	adds	r3, r2, #4
 8003218:	633b      	str	r3, [r7, #48]	@ 0x30
 800321a:	6813      	ldr	r3, [r2, #0]
 800321c:	17da      	asrs	r2, r3, #31
 800321e:	623b      	str	r3, [r7, #32]
 8003220:	627a      	str	r2, [r7, #36]	@ 0x24
 8003222:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003226:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003228:	f7ff f849 	bl	80022be <prv_longest_signed_int_to_str>
                break;
 800322c:	e1e3      	b.n	80035f6 <prv_format+0x932>
                } else if (lwi->m.flags.longlong == 2) {
 800322e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003230:	7f5b      	ldrb	r3, [r3, #29]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	f040 81dc 	bne.w	80035f6 <prv_format+0x932>
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed long long int));
 800323e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003240:	3307      	adds	r3, #7
 8003242:	f023 0207 	bic.w	r2, r3, #7
 8003246:	f102 0308 	add.w	r3, r2, #8
 800324a:	633b      	str	r3, [r7, #48]	@ 0x30
 800324c:	e9d2 2300 	ldrd	r2, r3, [r2]
 8003250:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003252:	f7ff f834 	bl	80022be <prv_longest_signed_int_to_str>
                break;
 8003256:	e1ce      	b.n	80035f6 <prv_format+0x932>
            case 'B':
            case 'o':
            case 'u':
            case 'x':
            case 'X':
                if (*fmt == 'b' || *fmt == 'B') {
 8003258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b62      	cmp	r3, #98	@ 0x62
 800325e:	d003      	beq.n	8003268 <prv_format+0x5a4>
 8003260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b42      	cmp	r3, #66	@ 0x42
 8003266:	d104      	bne.n	8003272 <prv_format+0x5ae>
                    lwi->m.base = 2;
 8003268:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800326a:	2302      	movs	r3, #2
 800326c:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8003270:	e01d      	b.n	80032ae <prv_format+0x5ea>
                } else if (*fmt == 'o') {
 8003272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b6f      	cmp	r3, #111	@ 0x6f
 8003278:	d104      	bne.n	8003284 <prv_format+0x5c0>
                    lwi->m.base = 8;
 800327a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800327c:	2308      	movs	r3, #8
 800327e:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8003282:	e014      	b.n	80032ae <prv_format+0x5ea>
                } else if (*fmt == 'u') {
 8003284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b75      	cmp	r3, #117	@ 0x75
 800328a:	d104      	bne.n	8003296 <prv_format+0x5d2>
                    lwi->m.base = 10;
 800328c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800328e:	230a      	movs	r3, #10
 8003290:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8003294:	e00b      	b.n	80032ae <prv_format+0x5ea>
                } else if (*fmt == 'x' || *fmt == 'X') {
 8003296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b78      	cmp	r3, #120	@ 0x78
 800329c:	d003      	beq.n	80032a6 <prv_format+0x5e2>
 800329e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b58      	cmp	r3, #88	@ 0x58
 80032a4:	d103      	bne.n	80032ae <prv_format+0x5ea>
                    lwi->m.base = 16;
 80032a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032a8:	2310      	movs	r3, #16
 80032aa:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
                }
                lwi->m.flags.space = 0; /* Space flag has no meaning here */
 80032ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032b0:	7f13      	ldrb	r3, [r2, #28]
 80032b2:	f023 0304 	bic.w	r3, r3, #4
 80032b6:	7713      	strb	r3, [r2, #28]

                /* Check for different length parameters */
                if (0) {

                } else if (lwi->m.flags.sz_t) {
 80032b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ba:	7f5b      	ldrb	r3, [r3, #29]
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00c      	beq.n	80032e0 <prv_format+0x61c>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, size_t));
 80032c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032c8:	1d13      	adds	r3, r2, #4
 80032ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80032cc:	6813      	ldr	r3, [r2, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	61bb      	str	r3, [r7, #24]
 80032d2:	61fa      	str	r2, [r7, #28]
 80032d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80032da:	f7fe ff6f 	bl	80021bc <prv_longest_unsigned_int_to_str>
#if LWPRINTF_CFG_SUPPORT_LONG_LONG
                } else if (lwi->m.flags.longlong == 2) {
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, unsigned long long int));
#endif /* LWPRINTF_CFG_SUPPORT_LONG_LONG */
                }
                break;
 80032de:	e18c      	b.n	80035fa <prv_format+0x936>
                } else if (lwi->m.flags.umax_t) {
 80032e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e2:	7f5b      	ldrb	r3, [r3, #29]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00c      	beq.n	8003308 <prv_format+0x644>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, uintmax_t));
 80032ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f0:	3307      	adds	r3, #7
 80032f2:	f023 0207 	bic.w	r2, r3, #7
 80032f6:	f102 0308 	add.w	r3, r2, #8
 80032fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80032fc:	e9d2 2300 	ldrd	r2, r3, [r2]
 8003300:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003302:	f7fe ff5b 	bl	80021bc <prv_longest_unsigned_int_to_str>
                break;
 8003306:	e178      	b.n	80035fa <prv_format+0x936>
                } else if (lwi->m.flags.longlong == 0 || lwi->m.base == 2) {
 8003308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330a:	7f5b      	ldrb	r3, [r3, #29]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d004      	beq.n	8003320 <prv_format+0x65c>
 8003316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003318:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800331c:	2b02      	cmp	r3, #2
 800331e:	d133      	bne.n	8003388 <prv_format+0x6c4>
                    uint_maxtype_t v = va_arg(arg, unsigned int);
 8003320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003322:	1d13      	adds	r3, r2, #4
 8003324:	633b      	str	r3, [r7, #48]	@ 0x30
 8003326:	6813      	ldr	r3, [r2, #0]
 8003328:	2200      	movs	r2, #0
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003332:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
                    switch (lwi->m.flags.char_short) {
 8003336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003338:	7f5b      	ldrb	r3, [r3, #29]
 800333a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	d00a      	beq.n	800335a <prv_format+0x696>
 8003344:	2b02      	cmp	r3, #2
 8003346:	d111      	bne.n	800336c <prv_format+0x6a8>
                        case 2: v = (uint_maxtype_t)((unsigned char)v); break;
 8003348:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2200      	movs	r2, #0
 8003350:	469a      	mov	sl, r3
 8003352:	4693      	mov	fp, r2
 8003354:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 8003358:	e00f      	b.n	800337a <prv_format+0x6b6>
                        case 1: v = (uint_maxtype_t)((unsigned short int)v); break;
 800335a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800335e:	b29b      	uxth	r3, r3
 8003360:	2200      	movs	r2, #0
 8003362:	461d      	mov	r5, r3
 8003364:	4616      	mov	r6, r2
 8003366:	e9c7 5618 	strd	r5, r6, [r7, #96]	@ 0x60
 800336a:	e006      	b.n	800337a <prv_format+0x6b6>
                        default: v = (uint_maxtype_t)((unsigned int)v); break;
 800336c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800336e:	2200      	movs	r2, #0
 8003370:	4698      	mov	r8, r3
 8003372:	4691      	mov	r9, r2
 8003374:	e9c7 8918 	strd	r8, r9, [r7, #96]	@ 0x60
 8003378:	bf00      	nop
                    prv_longest_unsigned_int_to_str(lwi, v);
 800337a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800337e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003380:	f7fe ff1c 	bl	80021bc <prv_longest_unsigned_int_to_str>
                } else if (lwi->m.flags.longlong == 0 || lwi->m.base == 2) {
 8003384:	bf00      	nop
                break;
 8003386:	e138      	b.n	80035fa <prv_format+0x936>
                } else if (lwi->m.flags.longlong == 1) {
 8003388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800338a:	7f5b      	ldrb	r3, [r3, #29]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d10c      	bne.n	80033b0 <prv_format+0x6ec>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, unsigned long int));
 8003396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003398:	1d13      	adds	r3, r2, #4
 800339a:	633b      	str	r3, [r7, #48]	@ 0x30
 800339c:	6813      	ldr	r3, [r2, #0]
 800339e:	2200      	movs	r2, #0
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	617a      	str	r2, [r7, #20]
 80033a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033a8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80033aa:	f7fe ff07 	bl	80021bc <prv_longest_unsigned_int_to_str>
                break;
 80033ae:	e124      	b.n	80035fa <prv_format+0x936>
                } else if (lwi->m.flags.longlong == 2) {
 80033b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b2:	7f5b      	ldrb	r3, [r3, #29]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	f040 811d 	bne.w	80035fa <prv_format+0x936>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, unsigned long long int));
 80033c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c2:	3307      	adds	r3, #7
 80033c4:	f023 0207 	bic.w	r2, r3, #7
 80033c8:	f102 0308 	add.w	r3, r2, #8
 80033cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80033ce:	e9d2 2300 	ldrd	r2, r3, [r2]
 80033d2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80033d4:	f7fe fef2 	bl	80021bc <prv_longest_unsigned_int_to_str>
                break;
 80033d8:	e10f      	b.n	80035fa <prv_format+0x936>
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_INT */
#if LWPRINTF_CFG_SUPPORT_TYPE_STRING
            case 's': {
                const char* b = va_arg(arg, const char*);
 80033da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033dc:	1d13      	adds	r3, r2, #4
 80033de:	633b      	str	r3, [r7, #48]	@ 0x30
 80033e0:	6813      	ldr	r3, [r2, #0]
 80033e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
                if (b == NULL) {
 80033e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <prv_format+0x72a>
                    b = "(null)";
 80033ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003420 <prv_format+0x75c>)
 80033ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }

                /* Output string up to maximum buffer. If user provides lower buffer size, write will not write to it
                    but it will still calculate "would be" length */
                prv_out_str(lwi, b, prv_strnlen(b, lwi->m.flags.precision ? (size_t)lwi->m.precision : (SIZE_MAX)));
 80033ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f0:	7f1b      	ldrb	r3, [r3, #28]
 80033f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <prv_format+0x73e>
 80033fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	e001      	b.n	8003406 <prv_format+0x742>
 8003402:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003406:	4619      	mov	r1, r3
 8003408:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800340a:	f7fe ff79 	bl	8002300 <prv_strnlen>
 800340e:	4603      	mov	r3, r0
 8003410:	461a      	mov	r2, r3
 8003412:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003414:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003416:	f7fe feb9 	bl	800218c <prv_out_str>
                break;
 800341a:	e0ef      	b.n	80035fc <prv_format+0x938>
 800341c:	080038c0 	.word	0x080038c0
 8003420:	080038c4 	.word	0x080038c4
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_STRING */
#if LWPRINTF_CFG_SUPPORT_TYPE_POINTER
            case 'p': {
                lwi->m.base = 16;      /* Go to hex format */
 8003424:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003426:	2310      	movs	r3, #16
 8003428:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
                lwi->m.flags.uc = 0;   /* Uppercase characters */
 800342c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800342e:	7f53      	ldrb	r3, [r2, #29]
 8003430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003434:	7753      	strb	r3, [r2, #29]
                lwi->m.flags.zero = 1; /* Zero padding */
 8003436:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003438:	7f13      	ldrb	r3, [r2, #28]
 800343a:	f043 0308 	orr.w	r3, r3, #8
 800343e:	7713      	strb	r3, [r2, #28]
                lwi->m.width =
 8003440:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003442:	2308      	movs	r3, #8
 8003444:	6253      	str	r3, [r2, #36]	@ 0x24
                    sizeof(uintptr_t) * 2; /* Number is in hex format and byte is represented with 2 letters */

                prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, uintptr_t));
 8003446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003448:	1d13      	adds	r3, r2, #4
 800344a:	633b      	str	r3, [r7, #48]	@ 0x30
 800344c:	6813      	ldr	r3, [r2, #0]
 800344e:	2200      	movs	r2, #0
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	60fa      	str	r2, [r7, #12]
 8003454:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003458:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800345a:	f7fe feaf 	bl	80021bc <prv_longest_unsigned_int_to_str>
                break;
 800345e:	e0cd      	b.n	80035fc <prv_format+0x938>
            case 'E':
            case 'g':
            case 'G':
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
                /* Double number in different format. Final output depends on type of format */
                prv_double_to_str(lwi, (double)va_arg(arg, double));
 8003460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003462:	3307      	adds	r3, #7
 8003464:	f023 0207 	bic.w	r2, r3, #7
 8003468:	f102 0308 	add.w	r3, r2, #8
 800346c:	633b      	str	r3, [r7, #48]	@ 0x30
 800346e:	ed92 7b00 	vldr	d7, [r2]
 8003472:	eeb0 0a47 	vmov.f32	s0, s14
 8003476:	eef0 0a67 	vmov.f32	s1, s15
 800347a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800347c:	f7ff f8c0 	bl	8002600 <prv_double_to_str>
                break;
 8003480:	e0bc      	b.n	80035fc <prv_format+0x938>
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_FLOAT */
            case 'n': {
                int* ptr = (void*)va_arg(arg, int*);
 8003482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003484:	1d13      	adds	r3, r2, #4
 8003486:	633b      	str	r3, [r7, #48]	@ 0x30
 8003488:	6813      	ldr	r3, [r2, #0]
 800348a:	647b      	str	r3, [r7, #68]	@ 0x44
                *ptr = (int)lwi->n_len; /* Write current length */
 800348c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	461a      	mov	r2, r3
 8003492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003494:	601a      	str	r2, [r3, #0]

                break;
 8003496:	e0b1      	b.n	80035fc <prv_format+0x938>
            }
            case '%': lwi->out_fn(lwi, '%'); break;
 8003498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	2125      	movs	r1, #37	@ 0x25
 800349e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80034a0:	4798      	blx	r3
 80034a2:	e0ab      	b.n	80035fc <prv_format+0x938>
             * char arr[] = {0, 1, 2, 3, 255};
             * "%5K" would produce 00010203FF
             */
            case 'k':
            case 'K': {
                unsigned char* ptr =
 80034a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034a6:	1d13      	adds	r3, r2, #4
 80034a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80034aa:	6813      	ldr	r3, [r2, #0]
 80034ac:	65bb      	str	r3, [r7, #88]	@ 0x58
                    (void*)va_arg(arg, unsigned char*); /* Get input parameter as unsigned char pointer */
                int len = lwi->m.width, full_width;
 80034ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	643b      	str	r3, [r7, #64]	@ 0x40
                uint8_t is_space = lwi->m.flags.space == 1;
 80034b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b6:	7f1b      	ldrb	r3, [r3, #28]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bf14      	ite	ne
 80034c2:	2301      	movne	r3, #1
 80034c4:	2300      	moveq	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

                if (ptr == NULL || len == 0) {
 80034cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8094 	beq.w	80035fc <prv_format+0x938>
 80034d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 8090 	beq.w	80035fc <prv_format+0x938>
                    break;
                }

                lwi->m.flags.zero = 1;  /* Prepend with zeros if necessary */
 80034dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034de:	7f13      	ldrb	r3, [r2, #28]
 80034e0:	f043 0308 	orr.w	r3, r3, #8
 80034e4:	7713      	strb	r3, [r2, #28]
                lwi->m.width = 0;       /* No width parameter */
 80034e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034e8:	2300      	movs	r3, #0
 80034ea:	6253      	str	r3, [r2, #36]	@ 0x24
                lwi->m.base = 16;       /* Hex format */
 80034ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034ee:	2310      	movs	r3, #16
 80034f0:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
                lwi->m.flags.space = 0; /* Delete any flag for space */
 80034f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034f6:	7f13      	ldrb	r3, [r2, #28]
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	7713      	strb	r3, [r2, #28]

                /* Full width of digits to print */
                full_width = len * (2 + (int)is_space);
 80034fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003502:	1c9a      	adds	r2, r3, #2
 8003504:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003506:	fb02 f303 	mul.w	r3, r2, r3
 800350a:	657b      	str	r3, [r7, #84]	@ 0x54
                if (is_space && full_width > 0) {
 800350c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <prv_format+0x85c>
 8003514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003516:	2b00      	cmp	r3, #0
 8003518:	dd02      	ble.n	8003520 <prv_format+0x85c>
                    --full_width; /* Remove space after last number */
 800351a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800351c:	3b01      	subs	r3, #1
 800351e:	657b      	str	r3, [r7, #84]	@ 0x54
                }

                /* Output byte by byte w/o hex prefix */
                prv_out_str_before(lwi, full_width);
 8003520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003522:	4619      	mov	r1, r3
 8003524:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003526:	f7fe fcc3 	bl	8001eb0 <prv_out_str_before>
                for (int i = 0; i < len; ++i, ++ptr) {
 800352a:	2300      	movs	r3, #0
 800352c:	653b      	str	r3, [r7, #80]	@ 0x50
 800352e:	e050      	b.n	80035d2 <prv_format+0x90e>
                    uint8_t d;

                    d = (*ptr >> 0x04) & 0x0F; /* Print MSB */
 8003530:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 800353a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353c:	695c      	ldr	r4, [r3, #20]
 800353e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003542:	2b09      	cmp	r3, #9
 8003544:	d90a      	bls.n	800355c <prv_format+0x898>
 8003546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003548:	7f5b      	ldrb	r3, [r3, #29]
 800354a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <prv_format+0x894>
 8003554:	2237      	movs	r2, #55	@ 0x37
 8003556:	e002      	b.n	800355e <prv_format+0x89a>
 8003558:	2257      	movs	r2, #87	@ 0x57
 800355a:	e000      	b.n	800355e <prv_format+0x89a>
 800355c:	2230      	movs	r2, #48	@ 0x30
 800355e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003562:	4413      	add	r3, r2
 8003564:	b2db      	uxtb	r3, r3
 8003566:	4619      	mov	r1, r3
 8003568:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800356a:	47a0      	blx	r4
                    d = *ptr & 0x0F; /* Print LSB */
 800356c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	f003 030f 	and.w	r3, r3, #15
 8003574:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 8003578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357a:	695c      	ldr	r4, [r3, #20]
 800357c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003580:	2b09      	cmp	r3, #9
 8003582:	d90a      	bls.n	800359a <prv_format+0x8d6>
 8003584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003586:	7f5b      	ldrb	r3, [r3, #29]
 8003588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <prv_format+0x8d2>
 8003592:	2237      	movs	r2, #55	@ 0x37
 8003594:	e002      	b.n	800359c <prv_format+0x8d8>
 8003596:	2257      	movs	r2, #87	@ 0x57
 8003598:	e000      	b.n	800359c <prv_format+0x8d8>
 800359a:	2230      	movs	r2, #48	@ 0x30
 800359c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80035a0:	4413      	add	r3, r2
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	4619      	mov	r1, r3
 80035a6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80035a8:	47a0      	blx	r4

                    if (is_space && i < (len - 1)) {
 80035aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <prv_format+0x902>
 80035b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035b4:	1e5a      	subs	r2, r3, #1
 80035b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035b8:	4293      	cmp	r3, r2
 80035ba:	da04      	bge.n	80035c6 <prv_format+0x902>
                        lwi->out_fn(lwi, ' '); /* Generate space between numbers */
 80035bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	2120      	movs	r1, #32
 80035c2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80035c4:	4798      	blx	r3
                for (int i = 0; i < len; ++i, ++ptr) {
 80035c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035c8:	3301      	adds	r3, #1
 80035ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80035cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035ce:	3301      	adds	r3, #1
 80035d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80035d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d6:	429a      	cmp	r2, r3
 80035d8:	dbaa      	blt.n	8003530 <prv_format+0x86c>
                    }
                }
                prv_out_str_after(lwi, full_width);
 80035da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035dc:	4619      	mov	r1, r3
 80035de:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80035e0:	f7fe fd94 	bl	800210c <prv_out_str_after>
                break;
 80035e4:	e00a      	b.n	80035fc <prv_format+0x938>
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_BYTE_ARRAY */
            default: lwi->out_fn(lwi, *fmt);
 80035e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	4619      	mov	r1, r3
 80035f0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80035f2:	4790      	blx	r2
 80035f4:	e002      	b.n	80035fc <prv_format+0x938>
                break;
 80035f6:	bf00      	nop
 80035f8:	e000      	b.n	80035fc <prv_format+0x938>
                break;
 80035fa:	bf00      	nop
        }
        ++fmt;
 80035fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035fe:	3301      	adds	r3, #1
 8003600:	63bb      	str	r3, [r7, #56]	@ 0x38
    while (fmt != NULL && *fmt != '\0') {
 8003602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003604:	2b00      	cmp	r3, #0
 8003606:	d006      	beq.n	8003616 <prv_format+0x952>
 8003608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	f47f ab67 	bne.w	8002ce0 <prv_format+0x1c>
 8003612:	e000      	b.n	8003616 <prv_format+0x952>
            break;
 8003614:	bf00      	nop
    }
    lwi->out_fn(lwi, '\0'); /* Output last zero number */
 8003616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	2100      	movs	r1, #0
 800361c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800361e:	4798      	blx	r3
#if LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT
    if (IS_PRINT_MODE(lwi)) { /* Mutex only for print operation */
        lwprintf_sys_mutex_release(&lwi->lwobj->mutex);
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */
    return 1;
 8003620:	2301      	movs	r3, #1
}
 8003622:	4618      	mov	r0, r3
 8003624:	3774      	adds	r7, #116	@ 0x74
 8003626:	46bd      	mov	sp, r7
 8003628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800362c <lwprintf_init_ex>:
 *                      as system mutex isn't needed. All formatting functions (with print being an exception)
 *                      are thread safe. Library utilizes stack-based variables
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwprintf_init_ex(lwprintf_t* lwobj, lwprintf_output_fn out_fn) {
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
    LWPRINTF_GET_LWOBJ(lwobj)->out_fn = out_fn;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <lwprintf_init_ex+0x14>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	e000      	b.n	8003642 <lwprintf_init_ex+0x16>
 8003640:	4b04      	ldr	r3, [pc, #16]	@ (8003654 <lwprintf_init_ex+0x28>)
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	601a      	str	r2, [r3, #0]
        && (lwprintf_sys_mutex_isvalid(&LWPRINTF_GET_LWOBJ(lwobj)->mutex)
            || !lwprintf_sys_mutex_create(&LWPRINTF_GET_LWOBJ(lwobj)->mutex))) {
        return 0;
    }
#endif /* LWPRINTF_CFG_OS */
    return 1;
 8003646:	2301      	movs	r3, #1
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	20000040 	.word	0x20000040

08003658 <lwprintf_vprintf_ex>:
 *                      `va_list` is a special type defined in `<cstdarg>`.
 * \return          The number of characters that would have been written if `n` had been sufficiently large,
 *                      not counting the terminating null character.
 */
int
lwprintf_vprintf_ex(lwprintf_t* const lwobj, const char* format, va_list arg) {
 8003658:	b580      	push	{r7, lr}
 800365a:	b090      	sub	sp, #64	@ 0x40
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
    lwprintf_int_t fobj = {
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	222c      	movs	r2, #44	@ 0x2c
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f000 f8a0 	bl	80037b2 <memset>
        .lwobj = LWPRINTF_GET_LWOBJ(lwobj),
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <lwprintf_vprintf_ex+0x24>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	e000      	b.n	800367e <lwprintf_vprintf_ex+0x26>
 800367c:	4b0d      	ldr	r3, [pc, #52]	@ (80036b4 <lwprintf_vprintf_ex+0x5c>)
    lwprintf_int_t fobj = {
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	61bb      	str	r3, [r7, #24]
 8003684:	4b0c      	ldr	r3, [pc, #48]	@ (80036b8 <lwprintf_vprintf_ex+0x60>)
 8003686:	62bb      	str	r3, [r7, #40]	@ 0x28
        .fmt = format,
        .buff = NULL,
        .buff_size = 0,
    };
    /* For direct print, output function must be set by user */
    if (fobj.lwobj->out_fn == NULL) {
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <lwprintf_vprintf_ex+0x3c>
        return 0;
 8003690:	2300      	movs	r3, #0
 8003692:	e00b      	b.n	80036ac <lwprintf_vprintf_ex+0x54>
    }
    if (prv_format(&fobj, arg)) {
 8003694:	f107 0314 	add.w	r3, r7, #20
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fb12 	bl	8002cc4 <prv_format>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <lwprintf_vprintf_ex+0x52>
        return (int)fobj.n_len;
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	e000      	b.n	80036ac <lwprintf_vprintf_ex+0x54>
    }
    return 0;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3740      	adds	r7, #64	@ 0x40
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000040 	.word	0x20000040
 80036b8:	08001e09 	.word	0x08001e09

080036bc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80036c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80036c8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d013      	beq.n	80036fc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80036d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80036d8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80036dc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80036e4:	e000      	b.n	80036e8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80036e6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80036e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f9      	beq.n	80036e6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80036f2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80036fc:	687b      	ldr	r3, [r7, #4]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <stm32_log_init>:
#include "main.h"

static lwprintf_t debug;

uint8_t stm32_log_init(lwprintf_output_fn out_fn)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

	if(out_fn == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d104      	bne.n	8003724 <stm32_log_init+0x18>
	{
		lwprintf_init_ex(&debug, stm32_log_out);
 800371a:	4907      	ldr	r1, [pc, #28]	@ (8003738 <stm32_log_init+0x2c>)
 800371c:	4807      	ldr	r0, [pc, #28]	@ (800373c <stm32_log_init+0x30>)
 800371e:	f7ff ff85 	bl	800362c <lwprintf_init_ex>
 8003722:	e003      	b.n	800372c <stm32_log_init+0x20>
	}
	else
	{
		lwprintf_init_ex(&debug, out_fn);
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4805      	ldr	r0, [pc, #20]	@ (800373c <stm32_log_init+0x30>)
 8003728:	f7ff ff80 	bl	800362c <lwprintf_init_ex>
	}
	return 0;
 800372c:	2300      	movs	r3, #0

}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	08003789 	.word	0x08003789
 800373c:	20000048 	.word	0x20000048

08003740 <stm32_log_timestamp>:
// Función para obtener la marca de tiempo (adapta según sea necesario)
__attribute__((weak)) uint32_t stm32_log_timestamp(void) {
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
    // Implementa la obtención de la marca de tiempo aquí (puede ser un contador o un reloj en tiempo real)
    return HAL_GetTick() ;
 8003744:	f7fd fde0 	bl	8001308 <HAL_GetTick>
 8003748:	4603      	mov	r3, r0
}
 800374a:	4618      	mov	r0, r3
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <stm32_log_write>:

// Función para escribir un mensaje de registro (adapta según sea necesario)
void stm32_log_write(int level, const char* tag, const char* format, ...) {
 8003750:	b40c      	push	{r2, r3}
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	6039      	str	r1, [r7, #0]
    if (level <= STM32_LOG_LEVEL) {
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b04      	cmp	r3, #4
 8003760:	dc08      	bgt.n	8003774 <stm32_log_write+0x24>
        va_list args;
        va_start(args, format);
 8003762:	f107 031c 	add.w	r3, r7, #28
 8003766:	60fb      	str	r3, [r7, #12]
        lwprintf_vprintf_ex(&debug, format, args);
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	69b9      	ldr	r1, [r7, #24]
 800376c:	4805      	ldr	r0, [pc, #20]	@ (8003784 <stm32_log_write+0x34>)
 800376e:	f7ff ff73 	bl	8003658 <lwprintf_vprintf_ex>
        va_end(args);
    }
    return;
 8003772:	bf00      	nop
 8003774:	bf00      	nop
}
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800377e:	b002      	add	sp, #8
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000048 	.word	0x20000048

08003788 <stm32_log_out>:


__weak int stm32_log_out(int ch, lwprintf_t* p) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]

    uint8_t c = (uint8_t)ch;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	73fb      	strb	r3, [r7, #15]

    /* Don't print zero */
    if (c == '\0') {
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <stm32_log_out+0x18>
        return ch;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	e004      	b.n	80037aa <stm32_log_out+0x22>
    }
    ITM_SendChar(ch);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff ff8a 	bl	80036bc <ITM_SendChar>
    return ch;
 80037a8:	687b      	ldr	r3, [r7, #4]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <memset>:
 80037b2:	4402      	add	r2, r0
 80037b4:	4603      	mov	r3, r0
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d100      	bne.n	80037bc <memset+0xa>
 80037ba:	4770      	bx	lr
 80037bc:	f803 1b01 	strb.w	r1, [r3], #1
 80037c0:	e7f9      	b.n	80037b6 <memset+0x4>
	...

080037c4 <__libc_init_array>:
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	4d0d      	ldr	r5, [pc, #52]	@ (80037fc <__libc_init_array+0x38>)
 80037c8:	4c0d      	ldr	r4, [pc, #52]	@ (8003800 <__libc_init_array+0x3c>)
 80037ca:	1b64      	subs	r4, r4, r5
 80037cc:	10a4      	asrs	r4, r4, #2
 80037ce:	2600      	movs	r6, #0
 80037d0:	42a6      	cmp	r6, r4
 80037d2:	d109      	bne.n	80037e8 <__libc_init_array+0x24>
 80037d4:	4d0b      	ldr	r5, [pc, #44]	@ (8003804 <__libc_init_array+0x40>)
 80037d6:	4c0c      	ldr	r4, [pc, #48]	@ (8003808 <__libc_init_array+0x44>)
 80037d8:	f000 f820 	bl	800381c <_init>
 80037dc:	1b64      	subs	r4, r4, r5
 80037de:	10a4      	asrs	r4, r4, #2
 80037e0:	2600      	movs	r6, #0
 80037e2:	42a6      	cmp	r6, r4
 80037e4:	d105      	bne.n	80037f2 <__libc_init_array+0x2e>
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
 80037e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ec:	4798      	blx	r3
 80037ee:	3601      	adds	r6, #1
 80037f0:	e7ee      	b.n	80037d0 <__libc_init_array+0xc>
 80037f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f6:	4798      	blx	r3
 80037f8:	3601      	adds	r6, #1
 80037fa:	e7f2      	b.n	80037e2 <__libc_init_array+0x1e>
 80037fc:	08003980 	.word	0x08003980
 8003800:	08003980 	.word	0x08003980
 8003804:	08003980 	.word	0x08003980
 8003808:	08003984 	.word	0x08003984

0800380c <strcpy>:
 800380c:	4603      	mov	r3, r0
 800380e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003812:	f803 2b01 	strb.w	r2, [r3], #1
 8003816:	2a00      	cmp	r2, #0
 8003818:	d1f9      	bne.n	800380e <strcpy+0x2>
 800381a:	4770      	bx	lr

0800381c <_init>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	bf00      	nop
 8003820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003822:	bc08      	pop	{r3}
 8003824:	469e      	mov	lr, r3
 8003826:	4770      	bx	lr

08003828 <_fini>:
 8003828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382a:	bf00      	nop
 800382c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382e:	bc08      	pop	{r3}
 8003830:	469e      	mov	lr, r3
 8003832:	4770      	bx	lr
