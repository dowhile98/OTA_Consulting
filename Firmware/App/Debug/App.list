
App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020400  08020400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0e8  08020590  08020590  00000590  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ea8  0802c678  0802c678  0000c678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e520  0802e520  0000f08c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802e520  0802e520  0000e520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e528  0802e528  0000f08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e528  0802e528  0000e528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802e52c  0802e52c  0000e52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0802e530  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f08c  2**0
                  CONTENTS
 10 .bss          00001470  2000008c  2000008c  0000f08c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200014fc  200014fc  0000f08c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f08c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002cc9d  00000000  00000000  0000f0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006b3b  00000000  00000000  0003bd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  00042898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027515  00000000  00000000  00043e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026ebd  00000000  00000000  0006b365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4b50  00000000  00000000  00092222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166d72  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00001042  00000000  00000000  00166db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005acc  00000000  00000000  00167df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0016d8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020590 <__do_global_dtors_aux>:
 8020590:	b510      	push	{r4, lr}
 8020592:	4c05      	ldr	r4, [pc, #20]	@ (80205a8 <__do_global_dtors_aux+0x18>)
 8020594:	7823      	ldrb	r3, [r4, #0]
 8020596:	b933      	cbnz	r3, 80205a6 <__do_global_dtors_aux+0x16>
 8020598:	4b04      	ldr	r3, [pc, #16]	@ (80205ac <__do_global_dtors_aux+0x1c>)
 802059a:	b113      	cbz	r3, 80205a2 <__do_global_dtors_aux+0x12>
 802059c:	4804      	ldr	r0, [pc, #16]	@ (80205b0 <__do_global_dtors_aux+0x20>)
 802059e:	f3af 8000 	nop.w
 80205a2:	2301      	movs	r3, #1
 80205a4:	7023      	strb	r3, [r4, #0]
 80205a6:	bd10      	pop	{r4, pc}
 80205a8:	2000008c 	.word	0x2000008c
 80205ac:	00000000 	.word	0x00000000
 80205b0:	0802c660 	.word	0x0802c660

080205b4 <frame_dummy>:
 80205b4:	b508      	push	{r3, lr}
 80205b6:	4b03      	ldr	r3, [pc, #12]	@ (80205c4 <frame_dummy+0x10>)
 80205b8:	b11b      	cbz	r3, 80205c2 <frame_dummy+0xe>
 80205ba:	4903      	ldr	r1, [pc, #12]	@ (80205c8 <frame_dummy+0x14>)
 80205bc:	4803      	ldr	r0, [pc, #12]	@ (80205cc <frame_dummy+0x18>)
 80205be:	f3af 8000 	nop.w
 80205c2:	bd08      	pop	{r3, pc}
 80205c4:	00000000 	.word	0x00000000
 80205c8:	20000090 	.word	0x20000090
 80205cc:	0802c660 	.word	0x0802c660

080205d0 <memchr>:
 80205d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80205d4:	2a10      	cmp	r2, #16
 80205d6:	db2b      	blt.n	8020630 <memchr+0x60>
 80205d8:	f010 0f07 	tst.w	r0, #7
 80205dc:	d008      	beq.n	80205f0 <memchr+0x20>
 80205de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80205e2:	3a01      	subs	r2, #1
 80205e4:	428b      	cmp	r3, r1
 80205e6:	d02d      	beq.n	8020644 <memchr+0x74>
 80205e8:	f010 0f07 	tst.w	r0, #7
 80205ec:	b342      	cbz	r2, 8020640 <memchr+0x70>
 80205ee:	d1f6      	bne.n	80205de <memchr+0xe>
 80205f0:	b4f0      	push	{r4, r5, r6, r7}
 80205f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80205f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80205fa:	f022 0407 	bic.w	r4, r2, #7
 80205fe:	f07f 0700 	mvns.w	r7, #0
 8020602:	2300      	movs	r3, #0
 8020604:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020608:	3c08      	subs	r4, #8
 802060a:	ea85 0501 	eor.w	r5, r5, r1
 802060e:	ea86 0601 	eor.w	r6, r6, r1
 8020612:	fa85 f547 	uadd8	r5, r5, r7
 8020616:	faa3 f587 	sel	r5, r3, r7
 802061a:	fa86 f647 	uadd8	r6, r6, r7
 802061e:	faa5 f687 	sel	r6, r5, r7
 8020622:	b98e      	cbnz	r6, 8020648 <memchr+0x78>
 8020624:	d1ee      	bne.n	8020604 <memchr+0x34>
 8020626:	bcf0      	pop	{r4, r5, r6, r7}
 8020628:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 802062c:	f002 0207 	and.w	r2, r2, #7
 8020630:	b132      	cbz	r2, 8020640 <memchr+0x70>
 8020632:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020636:	3a01      	subs	r2, #1
 8020638:	ea83 0301 	eor.w	r3, r3, r1
 802063c:	b113      	cbz	r3, 8020644 <memchr+0x74>
 802063e:	d1f8      	bne.n	8020632 <memchr+0x62>
 8020640:	2000      	movs	r0, #0
 8020642:	4770      	bx	lr
 8020644:	3801      	subs	r0, #1
 8020646:	4770      	bx	lr
 8020648:	2d00      	cmp	r5, #0
 802064a:	bf06      	itte	eq
 802064c:	4635      	moveq	r5, r6
 802064e:	3803      	subeq	r0, #3
 8020650:	3807      	subne	r0, #7
 8020652:	f015 0f01 	tst.w	r5, #1
 8020656:	d107      	bne.n	8020668 <memchr+0x98>
 8020658:	3001      	adds	r0, #1
 802065a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 802065e:	bf02      	ittt	eq
 8020660:	3001      	addeq	r0, #1
 8020662:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8020666:	3001      	addeq	r0, #1
 8020668:	bcf0      	pop	{r4, r5, r6, r7}
 802066a:	3801      	subs	r0, #1
 802066c:	4770      	bx	lr
 802066e:	bf00      	nop

08020670 <strlen>:
 8020670:	4603      	mov	r3, r0
 8020672:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020676:	2a00      	cmp	r2, #0
 8020678:	d1fb      	bne.n	8020672 <strlen+0x2>
 802067a:	1a18      	subs	r0, r3, r0
 802067c:	3801      	subs	r0, #1
 802067e:	4770      	bx	lr

08020680 <__aeabi_uldivmod>:
 8020680:	b953      	cbnz	r3, 8020698 <__aeabi_uldivmod+0x18>
 8020682:	b94a      	cbnz	r2, 8020698 <__aeabi_uldivmod+0x18>
 8020684:	2900      	cmp	r1, #0
 8020686:	bf08      	it	eq
 8020688:	2800      	cmpeq	r0, #0
 802068a:	bf1c      	itt	ne
 802068c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8020690:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8020694:	f000 b988 	b.w	80209a8 <__aeabi_idiv0>
 8020698:	f1ad 0c08 	sub.w	ip, sp, #8
 802069c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80206a0:	f000 f806 	bl	80206b0 <__udivmoddi4>
 80206a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80206a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80206ac:	b004      	add	sp, #16
 80206ae:	4770      	bx	lr

080206b0 <__udivmoddi4>:
 80206b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80206b4:	9d08      	ldr	r5, [sp, #32]
 80206b6:	468e      	mov	lr, r1
 80206b8:	4604      	mov	r4, r0
 80206ba:	4688      	mov	r8, r1
 80206bc:	2b00      	cmp	r3, #0
 80206be:	d14a      	bne.n	8020756 <__udivmoddi4+0xa6>
 80206c0:	428a      	cmp	r2, r1
 80206c2:	4617      	mov	r7, r2
 80206c4:	d962      	bls.n	802078c <__udivmoddi4+0xdc>
 80206c6:	fab2 f682 	clz	r6, r2
 80206ca:	b14e      	cbz	r6, 80206e0 <__udivmoddi4+0x30>
 80206cc:	f1c6 0320 	rsb	r3, r6, #32
 80206d0:	fa01 f806 	lsl.w	r8, r1, r6
 80206d4:	fa20 f303 	lsr.w	r3, r0, r3
 80206d8:	40b7      	lsls	r7, r6
 80206da:	ea43 0808 	orr.w	r8, r3, r8
 80206de:	40b4      	lsls	r4, r6
 80206e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80206e4:	fa1f fc87 	uxth.w	ip, r7
 80206e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80206ec:	0c23      	lsrs	r3, r4, #16
 80206ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80206f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80206f6:	fb01 f20c 	mul.w	r2, r1, ip
 80206fa:	429a      	cmp	r2, r3
 80206fc:	d909      	bls.n	8020712 <__udivmoddi4+0x62>
 80206fe:	18fb      	adds	r3, r7, r3
 8020700:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8020704:	f080 80ea 	bcs.w	80208dc <__udivmoddi4+0x22c>
 8020708:	429a      	cmp	r2, r3
 802070a:	f240 80e7 	bls.w	80208dc <__udivmoddi4+0x22c>
 802070e:	3902      	subs	r1, #2
 8020710:	443b      	add	r3, r7
 8020712:	1a9a      	subs	r2, r3, r2
 8020714:	b2a3      	uxth	r3, r4
 8020716:	fbb2 f0fe 	udiv	r0, r2, lr
 802071a:	fb0e 2210 	mls	r2, lr, r0, r2
 802071e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020722:	fb00 fc0c 	mul.w	ip, r0, ip
 8020726:	459c      	cmp	ip, r3
 8020728:	d909      	bls.n	802073e <__udivmoddi4+0x8e>
 802072a:	18fb      	adds	r3, r7, r3
 802072c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8020730:	f080 80d6 	bcs.w	80208e0 <__udivmoddi4+0x230>
 8020734:	459c      	cmp	ip, r3
 8020736:	f240 80d3 	bls.w	80208e0 <__udivmoddi4+0x230>
 802073a:	443b      	add	r3, r7
 802073c:	3802      	subs	r0, #2
 802073e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8020742:	eba3 030c 	sub.w	r3, r3, ip
 8020746:	2100      	movs	r1, #0
 8020748:	b11d      	cbz	r5, 8020752 <__udivmoddi4+0xa2>
 802074a:	40f3      	lsrs	r3, r6
 802074c:	2200      	movs	r2, #0
 802074e:	e9c5 3200 	strd	r3, r2, [r5]
 8020752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020756:	428b      	cmp	r3, r1
 8020758:	d905      	bls.n	8020766 <__udivmoddi4+0xb6>
 802075a:	b10d      	cbz	r5, 8020760 <__udivmoddi4+0xb0>
 802075c:	e9c5 0100 	strd	r0, r1, [r5]
 8020760:	2100      	movs	r1, #0
 8020762:	4608      	mov	r0, r1
 8020764:	e7f5      	b.n	8020752 <__udivmoddi4+0xa2>
 8020766:	fab3 f183 	clz	r1, r3
 802076a:	2900      	cmp	r1, #0
 802076c:	d146      	bne.n	80207fc <__udivmoddi4+0x14c>
 802076e:	4573      	cmp	r3, lr
 8020770:	d302      	bcc.n	8020778 <__udivmoddi4+0xc8>
 8020772:	4282      	cmp	r2, r0
 8020774:	f200 8105 	bhi.w	8020982 <__udivmoddi4+0x2d2>
 8020778:	1a84      	subs	r4, r0, r2
 802077a:	eb6e 0203 	sbc.w	r2, lr, r3
 802077e:	2001      	movs	r0, #1
 8020780:	4690      	mov	r8, r2
 8020782:	2d00      	cmp	r5, #0
 8020784:	d0e5      	beq.n	8020752 <__udivmoddi4+0xa2>
 8020786:	e9c5 4800 	strd	r4, r8, [r5]
 802078a:	e7e2      	b.n	8020752 <__udivmoddi4+0xa2>
 802078c:	2a00      	cmp	r2, #0
 802078e:	f000 8090 	beq.w	80208b2 <__udivmoddi4+0x202>
 8020792:	fab2 f682 	clz	r6, r2
 8020796:	2e00      	cmp	r6, #0
 8020798:	f040 80a4 	bne.w	80208e4 <__udivmoddi4+0x234>
 802079c:	1a8a      	subs	r2, r1, r2
 802079e:	0c03      	lsrs	r3, r0, #16
 80207a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80207a4:	b280      	uxth	r0, r0
 80207a6:	b2bc      	uxth	r4, r7
 80207a8:	2101      	movs	r1, #1
 80207aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80207ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80207b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80207b6:	fb04 f20c 	mul.w	r2, r4, ip
 80207ba:	429a      	cmp	r2, r3
 80207bc:	d907      	bls.n	80207ce <__udivmoddi4+0x11e>
 80207be:	18fb      	adds	r3, r7, r3
 80207c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80207c4:	d202      	bcs.n	80207cc <__udivmoddi4+0x11c>
 80207c6:	429a      	cmp	r2, r3
 80207c8:	f200 80e0 	bhi.w	802098c <__udivmoddi4+0x2dc>
 80207cc:	46c4      	mov	ip, r8
 80207ce:	1a9b      	subs	r3, r3, r2
 80207d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80207d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80207d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80207dc:	fb02 f404 	mul.w	r4, r2, r4
 80207e0:	429c      	cmp	r4, r3
 80207e2:	d907      	bls.n	80207f4 <__udivmoddi4+0x144>
 80207e4:	18fb      	adds	r3, r7, r3
 80207e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80207ea:	d202      	bcs.n	80207f2 <__udivmoddi4+0x142>
 80207ec:	429c      	cmp	r4, r3
 80207ee:	f200 80ca 	bhi.w	8020986 <__udivmoddi4+0x2d6>
 80207f2:	4602      	mov	r2, r0
 80207f4:	1b1b      	subs	r3, r3, r4
 80207f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80207fa:	e7a5      	b.n	8020748 <__udivmoddi4+0x98>
 80207fc:	f1c1 0620 	rsb	r6, r1, #32
 8020800:	408b      	lsls	r3, r1
 8020802:	fa22 f706 	lsr.w	r7, r2, r6
 8020806:	431f      	orrs	r7, r3
 8020808:	fa0e f401 	lsl.w	r4, lr, r1
 802080c:	fa20 f306 	lsr.w	r3, r0, r6
 8020810:	fa2e fe06 	lsr.w	lr, lr, r6
 8020814:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8020818:	4323      	orrs	r3, r4
 802081a:	fa00 f801 	lsl.w	r8, r0, r1
 802081e:	fa1f fc87 	uxth.w	ip, r7
 8020822:	fbbe f0f9 	udiv	r0, lr, r9
 8020826:	0c1c      	lsrs	r4, r3, #16
 8020828:	fb09 ee10 	mls	lr, r9, r0, lr
 802082c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8020830:	fb00 fe0c 	mul.w	lr, r0, ip
 8020834:	45a6      	cmp	lr, r4
 8020836:	fa02 f201 	lsl.w	r2, r2, r1
 802083a:	d909      	bls.n	8020850 <__udivmoddi4+0x1a0>
 802083c:	193c      	adds	r4, r7, r4
 802083e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8020842:	f080 809c 	bcs.w	802097e <__udivmoddi4+0x2ce>
 8020846:	45a6      	cmp	lr, r4
 8020848:	f240 8099 	bls.w	802097e <__udivmoddi4+0x2ce>
 802084c:	3802      	subs	r0, #2
 802084e:	443c      	add	r4, r7
 8020850:	eba4 040e 	sub.w	r4, r4, lr
 8020854:	fa1f fe83 	uxth.w	lr, r3
 8020858:	fbb4 f3f9 	udiv	r3, r4, r9
 802085c:	fb09 4413 	mls	r4, r9, r3, r4
 8020860:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8020864:	fb03 fc0c 	mul.w	ip, r3, ip
 8020868:	45a4      	cmp	ip, r4
 802086a:	d908      	bls.n	802087e <__udivmoddi4+0x1ce>
 802086c:	193c      	adds	r4, r7, r4
 802086e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8020872:	f080 8082 	bcs.w	802097a <__udivmoddi4+0x2ca>
 8020876:	45a4      	cmp	ip, r4
 8020878:	d97f      	bls.n	802097a <__udivmoddi4+0x2ca>
 802087a:	3b02      	subs	r3, #2
 802087c:	443c      	add	r4, r7
 802087e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8020882:	eba4 040c 	sub.w	r4, r4, ip
 8020886:	fba0 ec02 	umull	lr, ip, r0, r2
 802088a:	4564      	cmp	r4, ip
 802088c:	4673      	mov	r3, lr
 802088e:	46e1      	mov	r9, ip
 8020890:	d362      	bcc.n	8020958 <__udivmoddi4+0x2a8>
 8020892:	d05f      	beq.n	8020954 <__udivmoddi4+0x2a4>
 8020894:	b15d      	cbz	r5, 80208ae <__udivmoddi4+0x1fe>
 8020896:	ebb8 0203 	subs.w	r2, r8, r3
 802089a:	eb64 0409 	sbc.w	r4, r4, r9
 802089e:	fa04 f606 	lsl.w	r6, r4, r6
 80208a2:	fa22 f301 	lsr.w	r3, r2, r1
 80208a6:	431e      	orrs	r6, r3
 80208a8:	40cc      	lsrs	r4, r1
 80208aa:	e9c5 6400 	strd	r6, r4, [r5]
 80208ae:	2100      	movs	r1, #0
 80208b0:	e74f      	b.n	8020752 <__udivmoddi4+0xa2>
 80208b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80208b6:	0c01      	lsrs	r1, r0, #16
 80208b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80208bc:	b280      	uxth	r0, r0
 80208be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80208c2:	463b      	mov	r3, r7
 80208c4:	4638      	mov	r0, r7
 80208c6:	463c      	mov	r4, r7
 80208c8:	46b8      	mov	r8, r7
 80208ca:	46be      	mov	lr, r7
 80208cc:	2620      	movs	r6, #32
 80208ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80208d2:	eba2 0208 	sub.w	r2, r2, r8
 80208d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80208da:	e766      	b.n	80207aa <__udivmoddi4+0xfa>
 80208dc:	4601      	mov	r1, r0
 80208de:	e718      	b.n	8020712 <__udivmoddi4+0x62>
 80208e0:	4610      	mov	r0, r2
 80208e2:	e72c      	b.n	802073e <__udivmoddi4+0x8e>
 80208e4:	f1c6 0220 	rsb	r2, r6, #32
 80208e8:	fa2e f302 	lsr.w	r3, lr, r2
 80208ec:	40b7      	lsls	r7, r6
 80208ee:	40b1      	lsls	r1, r6
 80208f0:	fa20 f202 	lsr.w	r2, r0, r2
 80208f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80208f8:	430a      	orrs	r2, r1
 80208fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80208fe:	b2bc      	uxth	r4, r7
 8020900:	fb0e 3318 	mls	r3, lr, r8, r3
 8020904:	0c11      	lsrs	r1, r2, #16
 8020906:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 802090a:	fb08 f904 	mul.w	r9, r8, r4
 802090e:	40b0      	lsls	r0, r6
 8020910:	4589      	cmp	r9, r1
 8020912:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8020916:	b280      	uxth	r0, r0
 8020918:	d93e      	bls.n	8020998 <__udivmoddi4+0x2e8>
 802091a:	1879      	adds	r1, r7, r1
 802091c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8020920:	d201      	bcs.n	8020926 <__udivmoddi4+0x276>
 8020922:	4589      	cmp	r9, r1
 8020924:	d81f      	bhi.n	8020966 <__udivmoddi4+0x2b6>
 8020926:	eba1 0109 	sub.w	r1, r1, r9
 802092a:	fbb1 f9fe 	udiv	r9, r1, lr
 802092e:	fb09 f804 	mul.w	r8, r9, r4
 8020932:	fb0e 1119 	mls	r1, lr, r9, r1
 8020936:	b292      	uxth	r2, r2
 8020938:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 802093c:	4542      	cmp	r2, r8
 802093e:	d229      	bcs.n	8020994 <__udivmoddi4+0x2e4>
 8020940:	18ba      	adds	r2, r7, r2
 8020942:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8020946:	d2c4      	bcs.n	80208d2 <__udivmoddi4+0x222>
 8020948:	4542      	cmp	r2, r8
 802094a:	d2c2      	bcs.n	80208d2 <__udivmoddi4+0x222>
 802094c:	f1a9 0102 	sub.w	r1, r9, #2
 8020950:	443a      	add	r2, r7
 8020952:	e7be      	b.n	80208d2 <__udivmoddi4+0x222>
 8020954:	45f0      	cmp	r8, lr
 8020956:	d29d      	bcs.n	8020894 <__udivmoddi4+0x1e4>
 8020958:	ebbe 0302 	subs.w	r3, lr, r2
 802095c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8020960:	3801      	subs	r0, #1
 8020962:	46e1      	mov	r9, ip
 8020964:	e796      	b.n	8020894 <__udivmoddi4+0x1e4>
 8020966:	eba7 0909 	sub.w	r9, r7, r9
 802096a:	4449      	add	r1, r9
 802096c:	f1a8 0c02 	sub.w	ip, r8, #2
 8020970:	fbb1 f9fe 	udiv	r9, r1, lr
 8020974:	fb09 f804 	mul.w	r8, r9, r4
 8020978:	e7db      	b.n	8020932 <__udivmoddi4+0x282>
 802097a:	4673      	mov	r3, lr
 802097c:	e77f      	b.n	802087e <__udivmoddi4+0x1ce>
 802097e:	4650      	mov	r0, sl
 8020980:	e766      	b.n	8020850 <__udivmoddi4+0x1a0>
 8020982:	4608      	mov	r0, r1
 8020984:	e6fd      	b.n	8020782 <__udivmoddi4+0xd2>
 8020986:	443b      	add	r3, r7
 8020988:	3a02      	subs	r2, #2
 802098a:	e733      	b.n	80207f4 <__udivmoddi4+0x144>
 802098c:	f1ac 0c02 	sub.w	ip, ip, #2
 8020990:	443b      	add	r3, r7
 8020992:	e71c      	b.n	80207ce <__udivmoddi4+0x11e>
 8020994:	4649      	mov	r1, r9
 8020996:	e79c      	b.n	80208d2 <__udivmoddi4+0x222>
 8020998:	eba1 0109 	sub.w	r1, r1, r9
 802099c:	46c4      	mov	ip, r8
 802099e:	fbb1 f9fe 	udiv	r9, r1, lr
 80209a2:	fb09 f804 	mul.w	r8, r9, r4
 80209a6:	e7c4      	b.n	8020932 <__udivmoddi4+0x282>

080209a8 <__aeabi_idiv0>:
 80209a8:	4770      	bx	lr
 80209aa:	bf00      	nop

080209ac <osSuspendAllTasks>:
/**
 * @brief Suspend scheduler activity
 **/

void osSuspendAllTasks(void)
{
 80209ac:	b480      	push	{r7}
 80209ae:	af00      	add	r7, sp, #0
   //Not implemented
}
 80209b0:	bf00      	nop
 80209b2:	46bd      	mov	sp, r7
 80209b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209b8:	4770      	bx	lr

080209ba <osResumeAllTasks>:
/**
 * @brief Resume scheduler activity
 **/

void osResumeAllTasks(void)
{
 80209ba:	b480      	push	{r7}
 80209bc:	af00      	add	r7, sp, #0
   //Not implemented
}
 80209be:	bf00      	nop
 80209c0:	46bd      	mov	sp, r7
 80209c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209c6:	4770      	bx	lr

080209c8 <osCreateMutex>:
 * @return The function returns TRUE if the mutex was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateMutex(OsMutex *mutex)
{
 80209c8:	b480      	push	{r7}
 80209ca:	b083      	sub	sp, #12
 80209cc:	af00      	add	r7, sp, #0
 80209ce:	6078      	str	r0, [r7, #4]
   //The mutex was successfully created
   return TRUE;
 80209d0:	2301      	movs	r3, #1
}
 80209d2:	4618      	mov	r0, r3
 80209d4:	370c      	adds	r7, #12
 80209d6:	46bd      	mov	sp, r7
 80209d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209dc:	4770      	bx	lr

080209de <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

__weak_func void *osAllocMem(size_t size)
{
 80209de:	b580      	push	{r7, lr}
 80209e0:	b084      	sub	sp, #16
 80209e2:	af00      	add	r7, sp, #0
 80209e4:	6078      	str	r0, [r7, #4]
   void *p;

   //Allocate a memory block
   p = malloc(size);
 80209e6:	6878      	ldr	r0, [r7, #4]
 80209e8:	f00a fde2 	bl	802b5b0 <malloc>
 80209ec:	4603      	mov	r3, r0
 80209ee:	60fb      	str	r3, [r7, #12]
   //Debug message
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes at 0x%08" PRIXPTR "\r\n",
      size, (uintptr_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
 80209f0:	68fb      	ldr	r3, [r7, #12]
}
 80209f2:	4618      	mov	r0, r3
 80209f4:	3710      	adds	r7, #16
 80209f6:	46bd      	mov	sp, r7
 80209f8:	bd80      	pop	{r7, pc}

080209fa <osFreeMem>:
 * @brief Release a previously allocated memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

__weak_func void osFreeMem(void *p)
{
 80209fa:	b580      	push	{r7, lr}
 80209fc:	b082      	sub	sp, #8
 80209fe:	af00      	add	r7, sp, #0
 8020a00:	6078      	str	r0, [r7, #4]
   //Make sure the pointer is valid
   if(p != NULL)
 8020a02:	687b      	ldr	r3, [r7, #4]
 8020a04:	2b00      	cmp	r3, #0
 8020a06:	d002      	beq.n	8020a0e <osFreeMem+0x14>
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08" PRIXPTR "\r\n", (uintptr_t) p);

      //Free memory block
      free(p);
 8020a08:	6878      	ldr	r0, [r7, #4]
 8020a0a:	f00a fdd9 	bl	802b5c0 <free>
   }
}
 8020a0e:	bf00      	nop
 8020a10:	3708      	adds	r7, #8
 8020a12:	46bd      	mov	sp, r7
 8020a14:	bd80      	pop	{r7, pc}
	...

08020a18 <resGetData>:
//Resource data
extern const uint8_t res[];


error_t resGetData(const char_t *path, const uint8_t **data, size_t *length)
{
 8020a18:	b580      	push	{r7, lr}
 8020a1a:	b08a      	sub	sp, #40	@ 0x28
 8020a1c:	af00      	add	r7, sp, #0
 8020a1e:	60f8      	str	r0, [r7, #12]
 8020a20:	60b9      	str	r1, [r7, #8]
 8020a22:	607a      	str	r2, [r7, #4]
   uint_t n;
   uint_t dirLength;
   ResEntry *resEntry;

   //Point to the resource header
   ResHeader *resHeader = (ResHeader *) res;
 8020a24:	4b6a      	ldr	r3, [pc, #424]	@ (8020bd0 <resGetData+0x1b8>)
 8020a26:	613b      	str	r3, [r7, #16]

   //Make sure the resource data is valid
   if(letoh32(resHeader->totalSize) < sizeof(ResHeader))
 8020a28:	693b      	ldr	r3, [r7, #16]
 8020a2a:	681b      	ldr	r3, [r3, #0]
 8020a2c:	2b0d      	cmp	r3, #13
 8020a2e:	d802      	bhi.n	8020a36 <resGetData+0x1e>
      return ERROR_INVALID_RESOURCE;
 8020a30:	f240 130d 	movw	r3, #269	@ 0x10d
 8020a34:	e0c7      	b.n	8020bc6 <resGetData+0x1ae>

   //Retrieve the length of the root directory
   dirLength = letoh32(resHeader->rootEntry.dataLength);
 8020a36:	693b      	ldr	r3, [r7, #16]
 8020a38:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8020a3c:	61bb      	str	r3, [r7, #24]
   //Point to the contents of the root directory
   resEntry = (ResEntry *) (res + letoh32(resHeader->rootEntry.dataStart));
 8020a3e:	693b      	ldr	r3, [r7, #16]
 8020a40:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8020a44:	4a62      	ldr	r2, [pc, #392]	@ (8020bd0 <resGetData+0x1b8>)
 8020a46:	4413      	add	r3, r2
 8020a48:	617b      	str	r3, [r7, #20]

   //Parse the entire path
   for(found = FALSE; !found && path[0] != '\0'; path += n + 1)
 8020a4a:	2300      	movs	r3, #0
 8020a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8020a4e:	e098      	b.n	8020b82 <resGetData+0x16a>
   {
      //Search for the separator that terminates the current token
      for(n = 0; path[n] != '\\' && path[n] != '/' && path[n] != '\0'; n++)
 8020a50:	2300      	movs	r3, #0
 8020a52:	61fb      	str	r3, [r7, #28]
 8020a54:	e002      	b.n	8020a5c <resGetData+0x44>
 8020a56:	69fb      	ldr	r3, [r7, #28]
 8020a58:	3301      	adds	r3, #1
 8020a5a:	61fb      	str	r3, [r7, #28]
 8020a5c:	68fa      	ldr	r2, [r7, #12]
 8020a5e:	69fb      	ldr	r3, [r7, #28]
 8020a60:	4413      	add	r3, r2
 8020a62:	781b      	ldrb	r3, [r3, #0]
 8020a64:	2b5c      	cmp	r3, #92	@ 0x5c
 8020a66:	d00b      	beq.n	8020a80 <resGetData+0x68>
 8020a68:	68fa      	ldr	r2, [r7, #12]
 8020a6a:	69fb      	ldr	r3, [r7, #28]
 8020a6c:	4413      	add	r3, r2
 8020a6e:	781b      	ldrb	r3, [r3, #0]
 8020a70:	2b2f      	cmp	r3, #47	@ 0x2f
 8020a72:	d005      	beq.n	8020a80 <resGetData+0x68>
 8020a74:	68fa      	ldr	r2, [r7, #12]
 8020a76:	69fb      	ldr	r3, [r7, #28]
 8020a78:	4413      	add	r3, r2
 8020a7a:	781b      	ldrb	r3, [r3, #0]
 8020a7c:	2b00      	cmp	r3, #0
 8020a7e:	d1ea      	bne.n	8020a56 <resGetData+0x3e>
      {
      }

      if(n == 0 && path[n] != '\0')
 8020a80:	69fb      	ldr	r3, [r7, #28]
 8020a82:	2b00      	cmp	r3, #0
 8020a84:	d120      	bne.n	8020ac8 <resGetData+0xb0>
 8020a86:	68fa      	ldr	r2, [r7, #12]
 8020a88:	69fb      	ldr	r3, [r7, #28]
 8020a8a:	4413      	add	r3, r2
 8020a8c:	781b      	ldrb	r3, [r3, #0]
 8020a8e:	2b00      	cmp	r3, #0
 8020a90:	d01a      	beq.n	8020ac8 <resGetData+0xb0>
      {
         path++;
 8020a92:	68fb      	ldr	r3, [r7, #12]
 8020a94:	3301      	adds	r3, #1
 8020a96:	60fb      	str	r3, [r7, #12]

         for(n = 0; path[n] != '\\' && path[n] != '/' && path[n] != '\0'; n++)
 8020a98:	2300      	movs	r3, #0
 8020a9a:	61fb      	str	r3, [r7, #28]
 8020a9c:	e002      	b.n	8020aa4 <resGetData+0x8c>
 8020a9e:	69fb      	ldr	r3, [r7, #28]
 8020aa0:	3301      	adds	r3, #1
 8020aa2:	61fb      	str	r3, [r7, #28]
 8020aa4:	68fa      	ldr	r2, [r7, #12]
 8020aa6:	69fb      	ldr	r3, [r7, #28]
 8020aa8:	4413      	add	r3, r2
 8020aaa:	781b      	ldrb	r3, [r3, #0]
 8020aac:	2b5c      	cmp	r3, #92	@ 0x5c
 8020aae:	d00b      	beq.n	8020ac8 <resGetData+0xb0>
 8020ab0:	68fa      	ldr	r2, [r7, #12]
 8020ab2:	69fb      	ldr	r3, [r7, #28]
 8020ab4:	4413      	add	r3, r2
 8020ab6:	781b      	ldrb	r3, [r3, #0]
 8020ab8:	2b2f      	cmp	r3, #47	@ 0x2f
 8020aba:	d005      	beq.n	8020ac8 <resGetData+0xb0>
 8020abc:	68fa      	ldr	r2, [r7, #12]
 8020abe:	69fb      	ldr	r3, [r7, #28]
 8020ac0:	4413      	add	r3, r2
 8020ac2:	781b      	ldrb	r3, [r3, #0]
 8020ac4:	2b00      	cmp	r3, #0
 8020ac6:	d1ea      	bne.n	8020a9e <resGetData+0x86>
         {
         }
      }

      //Loop through the directory
      for(match = FALSE; !match && dirLength > 0; )
 8020ac8:	2300      	movs	r3, #0
 8020aca:	623b      	str	r3, [r7, #32]
 8020acc:	e048      	b.n	8020b60 <resGetData+0x148>
      {
         //Check the number of remaining bytes
         if(dirLength < sizeof(ResEntry))
 8020ace:	69bb      	ldr	r3, [r7, #24]
 8020ad0:	2b09      	cmp	r3, #9
 8020ad2:	d802      	bhi.n	8020ada <resGetData+0xc2>
            return ERROR_INVALID_RESOURCE;
 8020ad4:	f240 130d 	movw	r3, #269	@ 0x10d
 8020ad8:	e075      	b.n	8020bc6 <resGetData+0x1ae>
         //Make sure the entry is valid
         if(dirLength < (sizeof(ResEntry) + resEntry->nameLength))
 8020ada:	697b      	ldr	r3, [r7, #20]
 8020adc:	7a5b      	ldrb	r3, [r3, #9]
 8020ade:	330a      	adds	r3, #10
 8020ae0:	69ba      	ldr	r2, [r7, #24]
 8020ae2:	429a      	cmp	r2, r3
 8020ae4:	d202      	bcs.n	8020aec <resGetData+0xd4>
            return ERROR_INVALID_RESOURCE;
 8020ae6:	f240 130d 	movw	r3, #269	@ 0x10d
 8020aea:	e06c      	b.n	8020bc6 <resGetData+0x1ae>

         //Compare current entry name against the expected one
         if(resEntry->nameLength == n && !strncasecmp(resEntry->name, path, n))
 8020aec:	697b      	ldr	r3, [r7, #20]
 8020aee:	7a5b      	ldrb	r3, [r3, #9]
 8020af0:	461a      	mov	r2, r3
 8020af2:	69fb      	ldr	r3, [r7, #28]
 8020af4:	4293      	cmp	r3, r2
 8020af6:	d126      	bne.n	8020b46 <resGetData+0x12e>
 8020af8:	697b      	ldr	r3, [r7, #20]
 8020afa:	330a      	adds	r3, #10
 8020afc:	69fa      	ldr	r2, [r7, #28]
 8020afe:	68f9      	ldr	r1, [r7, #12]
 8020b00:	4618      	mov	r0, r3
 8020b02:	f00b f8a1 	bl	802bc48 <strncasecmp>
 8020b06:	4603      	mov	r3, r0
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	d11c      	bne.n	8020b46 <resGetData+0x12e>
         {
            //Check the type of the entry
            if(resEntry->type == RES_TYPE_DIR)
 8020b0c:	697b      	ldr	r3, [r7, #20]
 8020b0e:	781b      	ldrb	r3, [r3, #0]
 8020b10:	2b01      	cmp	r3, #1
 8020b12:	d10a      	bne.n	8020b2a <resGetData+0x112>
            {
               //Save the length of the directory
               dirLength = letoh32(resEntry->dataLength);
 8020b14:	697b      	ldr	r3, [r7, #20]
 8020b16:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8020b1a:	61bb      	str	r3, [r7, #24]
               //Point to the contents of the directory
               resEntry = (ResEntry *) (res + letoh32(resEntry->dataStart));
 8020b1c:	697b      	ldr	r3, [r7, #20]
 8020b1e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8020b22:	4a2b      	ldr	r2, [pc, #172]	@ (8020bd0 <resGetData+0x1b8>)
 8020b24:	4413      	add	r3, r2
 8020b26:	617b      	str	r3, [r7, #20]
 8020b28:	e00a      	b.n	8020b40 <resGetData+0x128>
            }
            else
            {
               //A file may only appear at the end of the path
               if(path[n] != '\0')
 8020b2a:	68fa      	ldr	r2, [r7, #12]
 8020b2c:	69fb      	ldr	r3, [r7, #28]
 8020b2e:	4413      	add	r3, r2
 8020b30:	781b      	ldrb	r3, [r3, #0]
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	d002      	beq.n	8020b3c <resGetData+0x124>
                  return ERROR_NOT_FOUND;
 8020b36:	f240 130f 	movw	r3, #271	@ 0x10f
 8020b3a:	e044      	b.n	8020bc6 <resGetData+0x1ae>

               //The search process is complete
               found = TRUE;
 8020b3c:	2301      	movs	r3, #1
 8020b3e:	627b      	str	r3, [r7, #36]	@ 0x24
            }
            //The current entry matches the specified path
            match = TRUE;
 8020b40:	2301      	movs	r3, #1
 8020b42:	623b      	str	r3, [r7, #32]
 8020b44:	e00c      	b.n	8020b60 <resGetData+0x148>
         }
         else
         {
            //Remaining bytes to process
            dirLength -= sizeof(ResEntry) + resEntry->nameLength;
 8020b46:	697b      	ldr	r3, [r7, #20]
 8020b48:	7a5b      	ldrb	r3, [r3, #9]
 8020b4a:	461a      	mov	r2, r3
 8020b4c:	69bb      	ldr	r3, [r7, #24]
 8020b4e:	1a9b      	subs	r3, r3, r2
 8020b50:	3b0a      	subs	r3, #10
 8020b52:	61bb      	str	r3, [r7, #24]

            //Point to the next entry
            resEntry = (ResEntry *) ((uint8_t *) resEntry + sizeof(ResEntry) +
               resEntry->nameLength);
 8020b54:	697b      	ldr	r3, [r7, #20]
 8020b56:	7a5b      	ldrb	r3, [r3, #9]
            resEntry = (ResEntry *) ((uint8_t *) resEntry + sizeof(ResEntry) +
 8020b58:	330a      	adds	r3, #10
 8020b5a:	697a      	ldr	r2, [r7, #20]
 8020b5c:	4413      	add	r3, r2
 8020b5e:	617b      	str	r3, [r7, #20]
      for(match = FALSE; !match && dirLength > 0; )
 8020b60:	6a3b      	ldr	r3, [r7, #32]
 8020b62:	2b00      	cmp	r3, #0
 8020b64:	d102      	bne.n	8020b6c <resGetData+0x154>
 8020b66:	69bb      	ldr	r3, [r7, #24]
 8020b68:	2b00      	cmp	r3, #0
 8020b6a:	d1b0      	bne.n	8020ace <resGetData+0xb6>
         }
      }

      //Unable to find the specified file?
      if(!match)
 8020b6c:	6a3b      	ldr	r3, [r7, #32]
 8020b6e:	2b00      	cmp	r3, #0
 8020b70:	d102      	bne.n	8020b78 <resGetData+0x160>
         return ERROR_NOT_FOUND;
 8020b72:	f240 130f 	movw	r3, #271	@ 0x10f
 8020b76:	e026      	b.n	8020bc6 <resGetData+0x1ae>
   for(found = FALSE; !found && path[0] != '\0'; path += n + 1)
 8020b78:	69fb      	ldr	r3, [r7, #28]
 8020b7a:	3301      	adds	r3, #1
 8020b7c:	68fa      	ldr	r2, [r7, #12]
 8020b7e:	4413      	add	r3, r2
 8020b80:	60fb      	str	r3, [r7, #12]
 8020b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020b84:	2b00      	cmp	r3, #0
 8020b86:	d104      	bne.n	8020b92 <resGetData+0x17a>
 8020b88:	68fb      	ldr	r3, [r7, #12]
 8020b8a:	781b      	ldrb	r3, [r3, #0]
 8020b8c:	2b00      	cmp	r3, #0
 8020b8e:	f47f af5f 	bne.w	8020a50 <resGetData+0x38>
   }

   //Unable to find the specified file?
   if(!found)
 8020b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020b94:	2b00      	cmp	r3, #0
 8020b96:	d102      	bne.n	8020b9e <resGetData+0x186>
      return ERROR_NOT_FOUND;
 8020b98:	f240 130f 	movw	r3, #271	@ 0x10f
 8020b9c:	e013      	b.n	8020bc6 <resGetData+0x1ae>
   //Enforce the entry type
   if(resEntry->type != RES_TYPE_FILE)
 8020b9e:	697b      	ldr	r3, [r7, #20]
 8020ba0:	781b      	ldrb	r3, [r3, #0]
 8020ba2:	2b02      	cmp	r3, #2
 8020ba4:	d002      	beq.n	8020bac <resGetData+0x194>
      return ERROR_NOT_FOUND;
 8020ba6:	f240 130f 	movw	r3, #271	@ 0x10f
 8020baa:	e00c      	b.n	8020bc6 <resGetData+0x1ae>

   //Return the location of the specified resource
   *data = res + letoh32(resEntry->dataStart);
 8020bac:	697b      	ldr	r3, [r7, #20]
 8020bae:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8020bb2:	4a07      	ldr	r2, [pc, #28]	@ (8020bd0 <resGetData+0x1b8>)
 8020bb4:	441a      	add	r2, r3
 8020bb6:	68bb      	ldr	r3, [r7, #8]
 8020bb8:	601a      	str	r2, [r3, #0]
   //Return the length of the resource
   *length = letoh32(resEntry->dataLength);
 8020bba:	697b      	ldr	r3, [r7, #20]
 8020bbc:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8020bc0:	687b      	ldr	r3, [r7, #4]
 8020bc2:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 8020bc4:	2300      	movs	r3, #0
}
 8020bc6:	4618      	mov	r0, r3
 8020bc8:	3728      	adds	r7, #40	@ 0x28
 8020bca:	46bd      	mov	sp, r7
 8020bcc:	bd80      	pop	{r7, pc}
 8020bce:	bf00      	nop
 8020bd0:	0802cd30 	.word	0x0802cd30

08020bd4 <crc32Compute>:
 * @param[out] digest Pointer to the calculated digest
 * @return Error code
 **/

error_t crc32Compute(const void *data, size_t length, uint8_t *digest)
{
 8020bd4:	b580      	push	{r7, lr}
 8020bd6:	b086      	sub	sp, #24
 8020bd8:	af00      	add	r7, sp, #0
 8020bda:	60f8      	str	r0, [r7, #12]
 8020bdc:	60b9      	str	r1, [r7, #8]
 8020bde:	607a      	str	r2, [r7, #4]
   //Allocate a memory buffer to hold the CRC32 context
   Crc32Context *context = cryptoAllocMem(sizeof(Crc32Context));
 8020be0:	2004      	movs	r0, #4
 8020be2:	f7ff fefc 	bl	80209de <osAllocMem>
 8020be6:	6178      	str	r0, [r7, #20]
   //Failed to allocate memory?
   if(context == NULL)
 8020be8:	697b      	ldr	r3, [r7, #20]
 8020bea:	2b00      	cmp	r3, #0
 8020bec:	d101      	bne.n	8020bf2 <crc32Compute+0x1e>
      return ERROR_OUT_OF_MEMORY;
 8020bee:	2364      	movs	r3, #100	@ 0x64
 8020bf0:	e00f      	b.n	8020c12 <crc32Compute+0x3e>

   //Initialize the CRC32 context
   crc32Init(context);
 8020bf2:	6978      	ldr	r0, [r7, #20]
 8020bf4:	f000 f811 	bl	8020c1a <crc32Init>
   //Digest the message
   crc32Update(context, data, length);
 8020bf8:	68ba      	ldr	r2, [r7, #8]
 8020bfa:	68f9      	ldr	r1, [r7, #12]
 8020bfc:	6978      	ldr	r0, [r7, #20]
 8020bfe:	f000 f81b 	bl	8020c38 <crc32Update>
   //Finalize the CRC32 message digest
   crc32Final(context, digest);
 8020c02:	6879      	ldr	r1, [r7, #4]
 8020c04:	6978      	ldr	r0, [r7, #20]
 8020c06:	f000 f845 	bl	8020c94 <crc32Final>

   //Free previously allocated memory
   cryptoFreeMem(context);
 8020c0a:	6978      	ldr	r0, [r7, #20]
 8020c0c:	f7ff fef5 	bl	80209fa <osFreeMem>

   //Successful processing
   return NO_ERROR;
 8020c10:	2300      	movs	r3, #0
}
 8020c12:	4618      	mov	r0, r3
 8020c14:	3718      	adds	r7, #24
 8020c16:	46bd      	mov	sp, r7
 8020c18:	bd80      	pop	{r7, pc}

08020c1a <crc32Init>:
 * @brief Initialize CRC32 message digest context
 * @param[in] context Pointer to the CRC32 context to initialize
 **/

void crc32Init(Crc32Context *context)
{
 8020c1a:	b480      	push	{r7}
 8020c1c:	b083      	sub	sp, #12
 8020c1e:	af00      	add	r7, sp, #0
 8020c20:	6078      	str	r0, [r7, #4]
   //CRC (digest) preset value
   context->digest = 0xFFFFFFFF;
 8020c22:	687b      	ldr	r3, [r7, #4]
 8020c24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020c28:	601a      	str	r2, [r3, #0]
}
 8020c2a:	bf00      	nop
 8020c2c:	370c      	adds	r7, #12
 8020c2e:	46bd      	mov	sp, r7
 8020c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c34:	4770      	bx	lr
	...

08020c38 <crc32Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

void crc32Update(Crc32Context *context, const void *data, size_t length)
{
 8020c38:	b480      	push	{r7}
 8020c3a:	b089      	sub	sp, #36	@ 0x24
 8020c3c:	af00      	add	r7, sp, #0
 8020c3e:	60f8      	str	r0, [r7, #12]
 8020c40:	60b9      	str	r1, [r7, #8]
 8020c42:	607a      	str	r2, [r7, #4]
   size_t i;
   const uint8_t *p;
   uint32_t crc;

   //Restaure last crc
   crc = (uint32_t)context->digest;
 8020c44:	68fb      	ldr	r3, [r7, #12]
 8020c46:	681b      	ldr	r3, [r3, #0]
 8020c48:	61bb      	str	r3, [r7, #24]

   //Point to the data over which to calculate the CRC
   p = (uint8_t *) data;
 8020c4a:	68bb      	ldr	r3, [r7, #8]
 8020c4c:	617b      	str	r3, [r7, #20]

   //Process the incoming data
   for(i = 0; i < length; i++)
 8020c4e:	2300      	movs	r3, #0
 8020c50:	61fb      	str	r3, [r7, #28]
 8020c52:	e010      	b.n	8020c76 <crc32Update+0x3e>
   {
      //The message is processed byte by byte
      crc = (crc >> 8) ^ crc32Table[(crc & 0xFF) ^ p[i]];
 8020c54:	69bb      	ldr	r3, [r7, #24]
 8020c56:	0a1a      	lsrs	r2, r3, #8
 8020c58:	69bb      	ldr	r3, [r7, #24]
 8020c5a:	b2db      	uxtb	r3, r3
 8020c5c:	6978      	ldr	r0, [r7, #20]
 8020c5e:	69f9      	ldr	r1, [r7, #28]
 8020c60:	4401      	add	r1, r0
 8020c62:	7809      	ldrb	r1, [r1, #0]
 8020c64:	404b      	eors	r3, r1
 8020c66:	490a      	ldr	r1, [pc, #40]	@ (8020c90 <crc32Update+0x58>)
 8020c68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8020c6c:	4053      	eors	r3, r2
 8020c6e:	61bb      	str	r3, [r7, #24]
   for(i = 0; i < length; i++)
 8020c70:	69fb      	ldr	r3, [r7, #28]
 8020c72:	3301      	adds	r3, #1
 8020c74:	61fb      	str	r3, [r7, #28]
 8020c76:	69fa      	ldr	r2, [r7, #28]
 8020c78:	687b      	ldr	r3, [r7, #4]
 8020c7a:	429a      	cmp	r2, r3
 8020c7c:	d3ea      	bcc.n	8020c54 <crc32Update+0x1c>
   }

   //Save updated crc
   context->digest = crc;
 8020c7e:	68fb      	ldr	r3, [r7, #12]
 8020c80:	69ba      	ldr	r2, [r7, #24]
 8020c82:	601a      	str	r2, [r3, #0]
}
 8020c84:	bf00      	nop
 8020c86:	3724      	adds	r7, #36	@ 0x24
 8020c88:	46bd      	mov	sp, r7
 8020c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c8e:	4770      	bx	lr
 8020c90:	0802d2a4 	.word	0x0802d2a4

08020c94 <crc32Final>:
 * @param[in] context Pointer to the CRC32 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

void crc32Final(Crc32Context *context, uint8_t *digest)
{
 8020c94:	b480      	push	{r7}
 8020c96:	b083      	sub	sp, #12
 8020c98:	af00      	add	r7, sp, #0
 8020c9a:	6078      	str	r0, [r7, #4]
 8020c9c:	6039      	str	r1, [r7, #0]
   //Copy the resulting digest
   if(digest != NULL)
 8020c9e:	683b      	ldr	r3, [r7, #0]
 8020ca0:	2b00      	cmp	r3, #0
 8020ca2:	d004      	beq.n	8020cae <crc32Final+0x1a>
      osMemcpy(digest, (uint8_t*)&context->digest, CRC32_DIGEST_SIZE);
 8020ca4:	687b      	ldr	r3, [r7, #4]
 8020ca6:	681b      	ldr	r3, [r3, #0]
 8020ca8:	461a      	mov	r2, r3
 8020caa:	683b      	ldr	r3, [r7, #0]
 8020cac:	601a      	str	r2, [r3, #0]
}
 8020cae:	bf00      	nop
 8020cb0:	370c      	adds	r7, #12
 8020cb2:	46bd      	mov	sp, r7
 8020cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cb8:	4770      	bx	lr
	...

08020cbc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8020cbc:	b480      	push	{r7}
 8020cbe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8020cc0:	f3bf 8f4f 	dsb	sy
}
 8020cc4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8020cc6:	4b06      	ldr	r3, [pc, #24]	@ (8020ce0 <__NVIC_SystemReset+0x24>)
 8020cc8:	68db      	ldr	r3, [r3, #12]
 8020cca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8020cce:	4904      	ldr	r1, [pc, #16]	@ (8020ce0 <__NVIC_SystemReset+0x24>)
 8020cd0:	4b04      	ldr	r3, [pc, #16]	@ (8020ce4 <__NVIC_SystemReset+0x28>)
 8020cd2:	4313      	orrs	r3, r2
 8020cd4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8020cd6:	f3bf 8f4f 	dsb	sy
}
 8020cda:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8020cdc:	bf00      	nop
 8020cde:	e7fd      	b.n	8020cdc <__NVIC_SystemReset+0x20>
 8020ce0:	e000ed00 	.word	0xe000ed00
 8020ce4:	05fa0004 	.word	0x05fa0004

08020ce8 <mcuSystemReset>:
/**
 * @brief Reset MCU system
 **/

void mcuSystemReset(void)
{
 8020ce8:	b580      	push	{r7, lr}
 8020cea:	af00      	add	r7, sp, #0
   NVIC_SystemReset();
 8020cec:	f7ff ffe6 	bl	8020cbc <__NVIC_SystemReset>

08020cf0 <stm32f4xxFlashDriverInit>:
 * @brief Initialize Flash Memory.
 * @return Error code
 **/

error_t stm32f4xxFlashDriverInit(void)
{
 8020cf0:	b580      	push	{r7, lr}
 8020cf2:	af00      	add	r7, sp, #0
   //Debug message
   TRACE_INFO("Initializing %s memory...\r\n", STM32F4xx_NAME);
 8020cf4:	f7ff fe5a 	bl	80209ac <osSuspendAllTasks>
 8020cf8:	4b08      	ldr	r3, [pc, #32]	@ (8020d1c <stm32f4xxFlashDriverInit+0x2c>)
 8020cfa:	681b      	ldr	r3, [r3, #0]
 8020cfc:	68db      	ldr	r3, [r3, #12]
 8020cfe:	4a08      	ldr	r2, [pc, #32]	@ (8020d20 <stm32f4xxFlashDriverInit+0x30>)
 8020d00:	4908      	ldr	r1, [pc, #32]	@ (8020d24 <stm32f4xxFlashDriverInit+0x34>)
 8020d02:	4618      	mov	r0, r3
 8020d04:	f00a fdb6 	bl	802b874 <fiprintf>
 8020d08:	f7ff fe57 	bl	80209ba <osResumeAllTasks>

   //Initialize FLASH flags
   //(Patch to fix stm32 hal library wrong initial flash flags issue)
   FLASH_WaitForLastOperation((uint32_t)50000U);
 8020d0c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8020d10:	f008 fa94 	bl	802923c <FLASH_WaitForLastOperation>

   //Successfull process
   return NO_ERROR;
 8020d14:	2300      	movs	r3, #0
}
 8020d16:	4618      	mov	r0, r3
 8020d18:	bd80      	pop	{r7, pc}
 8020d1a:	bf00      	nop
 8020d1c:	2000003c 	.word	0x2000003c
 8020d20:	0802c680 	.word	0x0802c680
 8020d24:	0802c69c 	.word	0x0802c69c

08020d28 <stm32f4xxFlashDriverDeInit>:
 * @brief De-Initialize Flash Memory.
 * @return Error code
 **/

error_t stm32f4xxFlashDriverDeInit(void)
{
 8020d28:	b480      	push	{r7}
 8020d2a:	af00      	add	r7, sp, #0
   return ERROR_NOT_IMPLEMENTED;
 8020d2c:	2367      	movs	r3, #103	@ 0x67
}
 8020d2e:	4618      	mov	r0, r3
 8020d30:	46bd      	mov	sp, r7
 8020d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d36:	4770      	bx	lr

08020d38 <stm32f4xxFlashDriverGetInfo>:
 * @param[in,out] info Pointeur to the Memory information structure to be returned
 * @return Error code
 **/

error_t stm32f4xxFlashDriverGetInfo(const FlashInfo **info)
{
 8020d38:	b480      	push	{r7}
 8020d3a:	b083      	sub	sp, #12
 8020d3c:	af00      	add	r7, sp, #0
 8020d3e:	6078      	str	r0, [r7, #4]
   //Set Memory information pointeur
   *info = (const FlashInfo*) &stm32f4xxFlashDriverInfo;
 8020d40:	687b      	ldr	r3, [r7, #4]
 8020d42:	4a04      	ldr	r2, [pc, #16]	@ (8020d54 <stm32f4xxFlashDriverGetInfo+0x1c>)
 8020d44:	601a      	str	r2, [r3, #0]

   //Successfull process
   return NO_ERROR;
 8020d46:	2300      	movs	r3, #0
}
 8020d48:	4618      	mov	r0, r3
 8020d4a:	370c      	adds	r7, #12
 8020d4c:	46bd      	mov	sp, r7
 8020d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d52:	4770      	bx	lr
 8020d54:	0802d6fc 	.word	0x0802d6fc

08020d58 <stm32f4xxFlashDriverGetStatus>:
 * @param[in,out] status Pointeur to the Memory status to be returned
 * @return Error code
 **/

error_t stm32f4xxFlashDriverGetStatus(FlashStatus *status)
{
 8020d58:	b480      	push	{r7}
 8020d5a:	b085      	sub	sp, #20
 8020d5c:	af00      	add	r7, sp, #0
 8020d5e:	6078      	str	r0, [r7, #4]
   uint32_t flag;

   //Check parameter vailidity
   if(status == NULL)
 8020d60:	687b      	ldr	r3, [r7, #4]
 8020d62:	2b00      	cmp	r3, #0
 8020d64:	d101      	bne.n	8020d6a <stm32f4xxFlashDriverGetStatus+0x12>
      return ERROR_INVALID_PARAMETER;
 8020d66:	2302      	movs	r3, #2
 8020d68:	e01b      	b.n	8020da2 <stm32f4xxFlashDriverGetStatus+0x4a>

   do
   {
      //Get Flash Memory error flags status
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR |
 8020d6a:	4b11      	ldr	r3, [pc, #68]	@ (8020db0 <stm32f4xxFlashDriverGetStatus+0x58>)
 8020d6c:	68db      	ldr	r3, [r3, #12]
 8020d6e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8020d72:	60fb      	str	r3, [r7, #12]
                        FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
                        FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

      //Is any error flag set?
      if(flag != RESET)
 8020d74:	68fb      	ldr	r3, [r7, #12]
 8020d76:	2b00      	cmp	r3, #0
 8020d78:	d003      	beq.n	8020d82 <stm32f4xxFlashDriverGetStatus+0x2a>
      {
         //Set Flash memory status
         *status = FLASH_STATUS_ERR;
 8020d7a:	687b      	ldr	r3, [r7, #4]
 8020d7c:	2202      	movs	r2, #2
 8020d7e:	701a      	strb	r2, [r3, #0]
         break;
 8020d80:	e00e      	b.n	8020da0 <stm32f4xxFlashDriverGetStatus+0x48>
      }

      //Get Flash Memory busy flags
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY);
 8020d82:	4b0b      	ldr	r3, [pc, #44]	@ (8020db0 <stm32f4xxFlashDriverGetStatus+0x58>)
 8020d84:	68db      	ldr	r3, [r3, #12]
 8020d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8020d8a:	60fb      	str	r3, [r7, #12]
      //Is busy flag set?
      if(flag != RESET)
 8020d8c:	68fb      	ldr	r3, [r7, #12]
 8020d8e:	2b00      	cmp	r3, #0
 8020d90:	d003      	beq.n	8020d9a <stm32f4xxFlashDriverGetStatus+0x42>
      {
         //Set Flash memory status
         *status = FLASH_STATUS_BUSY;
 8020d92:	687b      	ldr	r3, [r7, #4]
 8020d94:	2201      	movs	r2, #1
 8020d96:	701a      	strb	r2, [r3, #0]
         break;
 8020d98:	e002      	b.n	8020da0 <stm32f4xxFlashDriverGetStatus+0x48>
      }

      //Set Flash memory status
      *status = FLASH_STATUS_OK;
 8020d9a:	687b      	ldr	r3, [r7, #4]
 8020d9c:	2200      	movs	r2, #0
 8020d9e:	701a      	strb	r2, [r3, #0]
   }while(0);

   //Successfull process
   return NO_ERROR;
 8020da0:	2300      	movs	r3, #0
}
 8020da2:	4618      	mov	r0, r3
 8020da4:	3714      	adds	r7, #20
 8020da6:	46bd      	mov	sp, r7
 8020da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dac:	4770      	bx	lr
 8020dae:	bf00      	nop
 8020db0:	40023c00 	.word	0x40023c00

08020db4 <stm32f4xxFlashDriverWrite>:
 * @param[in] length Number of data bytes to write in
 * @return Error code
 **/

error_t stm32f4xxFlashDriverWrite(uint32_t address, uint8_t* data, size_t length)
{
 8020db4:	b580      	push	{r7, lr}
 8020db6:	b08a      	sub	sp, #40	@ 0x28
 8020db8:	af00      	add	r7, sp, #0
 8020dba:	60f8      	str	r0, [r7, #12]
 8020dbc:	60b9      	str	r1, [r7, #8]
 8020dbe:	607a      	str	r2, [r7, #4]
   const uint8_t *p;
   uint8_t word[4];
   size_t n;

   //Precompute the top address
   topAddress = STM32F4xx_ADDR + STM32F4xx_SIZE;
 8020dc0:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8020dc4:	623b      	str	r3, [r7, #32]

   //Check address validity
   if((address < STM32F4xx_ADDR || address >= topAddress) ||
 8020dc6:	68fb      	ldr	r3, [r7, #12]
 8020dc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8020dcc:	d308      	bcc.n	8020de0 <stm32f4xxFlashDriverWrite+0x2c>
 8020dce:	68fa      	ldr	r2, [r7, #12]
 8020dd0:	6a3b      	ldr	r3, [r7, #32]
 8020dd2:	429a      	cmp	r2, r3
 8020dd4:	d204      	bcs.n	8020de0 <stm32f4xxFlashDriverWrite+0x2c>
      (address % sizeof(uint32_t) != 0))
 8020dd6:	68fb      	ldr	r3, [r7, #12]
 8020dd8:	f003 0303 	and.w	r3, r3, #3
   if((address < STM32F4xx_ADDR || address >= topAddress) ||
 8020ddc:	2b00      	cmp	r3, #0
 8020dde:	d001      	beq.n	8020de4 <stm32f4xxFlashDriverWrite+0x30>
      return ERROR_INVALID_PARAMETER;
 8020de0:	2302      	movs	r3, #2
 8020de2:	e04d      	b.n	8020e80 <stm32f4xxFlashDriverWrite+0xcc>

#ifndef FLASH_DB_MODE
   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 8020de4:	68bb      	ldr	r3, [r7, #8]
 8020de6:	2b00      	cmp	r3, #0
 8020de8:	d005      	beq.n	8020df6 <stm32f4xxFlashDriverWrite+0x42>
 8020dea:	68fa      	ldr	r2, [r7, #12]
 8020dec:	687b      	ldr	r3, [r7, #4]
 8020dee:	4413      	add	r3, r2
 8020df0:	6a3a      	ldr	r2, [r7, #32]
 8020df2:	429a      	cmp	r2, r3
 8020df4:	d201      	bcs.n	8020dfa <stm32f4xxFlashDriverWrite+0x46>
      return ERROR_INVALID_PARAMETER;
 8020df6:	2302      	movs	r3, #2
 8020df8:	e042      	b.n	8020e80 <stm32f4xxFlashDriverWrite+0xcc>
   TRACE_DEBUG("Writing data (%d bytes) at 0x%08X\r\n", length, address);
   TRACE_DEBUG_ARRAY("WRITE DATA: ", data, length);


   //Cast data pointer
   p = (const uint8_t*) data;
 8020dfa:	68bb      	ldr	r3, [r7, #8]
 8020dfc:	627b      	str	r3, [r7, #36]	@ 0x24

   //Perform write operation
   while(length > 0)
 8020dfe:	e03b      	b.n	8020e78 <stm32f4xxFlashDriverWrite+0xc4>
   {
      //Prevent to write more than 4 bytes at a time
      n = MIN(sizeof(word), length);
 8020e00:	687b      	ldr	r3, [r7, #4]
 8020e02:	2b04      	cmp	r3, #4
 8020e04:	bf28      	it	cs
 8020e06:	2304      	movcs	r3, #4
 8020e08:	61fb      	str	r3, [r7, #28]

      //Check if remaining bytes is less than 4 (32bits word)
      if(n < sizeof(uint32_t))
 8020e0a:	69fb      	ldr	r3, [r7, #28]
 8020e0c:	2b03      	cmp	r3, #3
 8020e0e:	d806      	bhi.n	8020e1e <stm32f4xxFlashDriverWrite+0x6a>
         memset(word, 0, sizeof(word));
 8020e10:	f107 0314 	add.w	r3, r7, #20
 8020e14:	2204      	movs	r2, #4
 8020e16:	2100      	movs	r1, #0
 8020e18:	4618      	mov	r0, r3
 8020e1a:	f00a ff0d 	bl	802bc38 <memset>

      //Copy n bytes
      memcpy(word, p, n);
 8020e1e:	f107 0314 	add.w	r3, r7, #20
 8020e22:	69fa      	ldr	r2, [r7, #28]
 8020e24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8020e26:	4618      	mov	r0, r3
 8020e28:	f00a ffc3 	bl	802bdb2 <memcpy>

      //Program 32-bit word in flash memory
      error = stm32f4xxFlashDriverWriteWord(address, *((uint32_t*)word));
 8020e2c:	f107 0314 	add.w	r3, r7, #20
 8020e30:	681b      	ldr	r3, [r3, #0]
 8020e32:	4619      	mov	r1, r3
 8020e34:	68f8      	ldr	r0, [r7, #12]
 8020e36:	f000 f9d7 	bl	80211e8 <stm32f4xxFlashDriverWriteWord>
 8020e3a:	4603      	mov	r3, r0
 8020e3c:	837b      	strh	r3, [r7, #26]
      if(error)
 8020e3e:	8b7b      	ldrh	r3, [r7, #26]
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	d00d      	beq.n	8020e60 <stm32f4xxFlashDriverWrite+0xac>
      {
         TRACE_ERROR("Failed to write in flash memory!\r\n");
 8020e44:	f7ff fdb2 	bl	80209ac <osSuspendAllTasks>
 8020e48:	4b0f      	ldr	r3, [pc, #60]	@ (8020e88 <stm32f4xxFlashDriverWrite+0xd4>)
 8020e4a:	681b      	ldr	r3, [r3, #0]
 8020e4c:	68db      	ldr	r3, [r3, #12]
 8020e4e:	2222      	movs	r2, #34	@ 0x22
 8020e50:	2101      	movs	r1, #1
 8020e52:	480e      	ldr	r0, [pc, #56]	@ (8020e8c <stm32f4xxFlashDriverWrite+0xd8>)
 8020e54:	f00a fd8a 	bl	802b96c <fwrite>
 8020e58:	f7ff fdaf 	bl	80209ba <osResumeAllTasks>
         return error;
 8020e5c:	8b7b      	ldrh	r3, [r7, #26]
 8020e5e:	e00f      	b.n	8020e80 <stm32f4xxFlashDriverWrite+0xcc>
      }

      //Advance data pointer
      p += n;
 8020e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020e62:	69fb      	ldr	r3, [r7, #28]
 8020e64:	4413      	add	r3, r2
 8020e66:	627b      	str	r3, [r7, #36]	@ 0x24
      //Increment word address
      address += n;
 8020e68:	68fa      	ldr	r2, [r7, #12]
 8020e6a:	69fb      	ldr	r3, [r7, #28]
 8020e6c:	4413      	add	r3, r2
 8020e6e:	60fb      	str	r3, [r7, #12]
      //Remaining bytes to be written
      length -= n;
 8020e70:	687a      	ldr	r2, [r7, #4]
 8020e72:	69fb      	ldr	r3, [r7, #28]
 8020e74:	1ad3      	subs	r3, r2, r3
 8020e76:	607b      	str	r3, [r7, #4]
   while(length > 0)
 8020e78:	687b      	ldr	r3, [r7, #4]
 8020e7a:	2b00      	cmp	r3, #0
 8020e7c:	d1c0      	bne.n	8020e00 <stm32f4xxFlashDriverWrite+0x4c>
   }

   //Successful process
   return NO_ERROR;
 8020e7e:	2300      	movs	r3, #0
}
 8020e80:	4618      	mov	r0, r3
 8020e82:	3728      	adds	r7, #40	@ 0x28
 8020e84:	46bd      	mov	sp, r7
 8020e86:	bd80      	pop	{r7, pc}
 8020e88:	2000003c 	.word	0x2000003c
 8020e8c:	0802c6b8 	.word	0x0802c6b8

08020e90 <stm32f4xxFlashDriverRead>:
 * @param[in] length Number of data bytes to read out
 * @return Error code
 **/

error_t stm32f4xxFlashDriverRead(uint32_t address, uint8_t* data, size_t length)
{
 8020e90:	b480      	push	{r7}
 8020e92:	b087      	sub	sp, #28
 8020e94:	af00      	add	r7, sp, #0
 8020e96:	60f8      	str	r0, [r7, #12]
 8020e98:	60b9      	str	r1, [r7, #8]
 8020e9a:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint32_t topAddress;

   //Precompute the top address
   topAddress = STM32F4xx_ADDR + STM32F4xx_SIZE;
 8020e9c:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8020ea0:	613b      	str	r3, [r7, #16]

   //Check address validity
   if(address < STM32F4xx_ADDR || address >= topAddress)
 8020ea2:	68fb      	ldr	r3, [r7, #12]
 8020ea4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8020ea8:	d303      	bcc.n	8020eb2 <stm32f4xxFlashDriverRead+0x22>
 8020eaa:	68fa      	ldr	r2, [r7, #12]
 8020eac:	693b      	ldr	r3, [r7, #16]
 8020eae:	429a      	cmp	r2, r3
 8020eb0:	d301      	bcc.n	8020eb6 <stm32f4xxFlashDriverRead+0x26>
      return ERROR_INVALID_PARAMETER;
 8020eb2:	2302      	movs	r3, #2
 8020eb4:	e01e      	b.n	8020ef4 <stm32f4xxFlashDriverRead+0x64>

#ifndef FLASH_DB_MODE
   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 8020eb6:	68bb      	ldr	r3, [r7, #8]
 8020eb8:	2b00      	cmp	r3, #0
 8020eba:	d005      	beq.n	8020ec8 <stm32f4xxFlashDriverRead+0x38>
 8020ebc:	68fa      	ldr	r2, [r7, #12]
 8020ebe:	687b      	ldr	r3, [r7, #4]
 8020ec0:	4413      	add	r3, r2
 8020ec2:	693a      	ldr	r2, [r7, #16]
 8020ec4:	429a      	cmp	r2, r3
 8020ec6:	d201      	bcs.n	8020ecc <stm32f4xxFlashDriverRead+0x3c>
      return ERROR_INVALID_PARAMETER;
 8020ec8:	2302      	movs	r3, #2
 8020eca:	e013      	b.n	8020ef4 <stm32f4xxFlashDriverRead+0x64>
      (address >= STM32F4xx_BANK_2_ADDR && address + length <= topAddress)))
      return ERROR_INVALID_PARAMETER;
#endif

   //Perform read operation
   for(i = 0; i < length; i++)
 8020ecc:	2300      	movs	r3, #0
 8020ece:	617b      	str	r3, [r7, #20]
 8020ed0:	e00b      	b.n	8020eea <stm32f4xxFlashDriverRead+0x5a>
   {
      *((uint8_t *)data + i) = *(uint8_t*)address;
 8020ed2:	68fa      	ldr	r2, [r7, #12]
 8020ed4:	68b9      	ldr	r1, [r7, #8]
 8020ed6:	697b      	ldr	r3, [r7, #20]
 8020ed8:	440b      	add	r3, r1
 8020eda:	7812      	ldrb	r2, [r2, #0]
 8020edc:	701a      	strb	r2, [r3, #0]
      address++;
 8020ede:	68fb      	ldr	r3, [r7, #12]
 8020ee0:	3301      	adds	r3, #1
 8020ee2:	60fb      	str	r3, [r7, #12]
   for(i = 0; i < length; i++)
 8020ee4:	697b      	ldr	r3, [r7, #20]
 8020ee6:	3301      	adds	r3, #1
 8020ee8:	617b      	str	r3, [r7, #20]
 8020eea:	697a      	ldr	r2, [r7, #20]
 8020eec:	687b      	ldr	r3, [r7, #4]
 8020eee:	429a      	cmp	r2, r3
 8020ef0:	d3ef      	bcc.n	8020ed2 <stm32f4xxFlashDriverRead+0x42>
   }

   //Successfull process
   return NO_ERROR;
 8020ef2:	2300      	movs	r3, #0
}
 8020ef4:	4618      	mov	r0, r3
 8020ef6:	371c      	adds	r7, #28
 8020ef8:	46bd      	mov	sp, r7
 8020efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020efe:	4770      	bx	lr

08020f00 <stm32f4xxFlashDriverErase>:
 * @param[in] address Address in Memory to start erasing from
 * @param[in] length Number of data bytes to be erased
 * @return Error code
 **/
error_t stm32f4xxFlashDriverErase(uint32_t address, size_t length)
{
 8020f00:	b580      	push	{r7, lr}
 8020f02:	b088      	sub	sp, #32
 8020f04:	af00      	add	r7, sp, #0
 8020f06:	6078      	str	r0, [r7, #4]
 8020f08:	6039      	str	r1, [r7, #0]
   uint32_t topAddress;
   int_t firstSectorNumber;
   uint32_t lastSectorAddr;
   int_t lastSectorNumber;

   error = NO_ERROR;
 8020f0a:	2300      	movs	r3, #0
 8020f0c:	837b      	strh	r3, [r7, #26]

   //Precompute the top address
   topAddress = STM32F4xx_ADDR + STM32F4xx_SIZE;
 8020f0e:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8020f12:	617b      	str	r3, [r7, #20]

   //Check address validity
   if((address < STM32F4xx_ADDR || address >= topAddress) ||
 8020f14:	687b      	ldr	r3, [r7, #4]
 8020f16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8020f1a:	d308      	bcc.n	8020f2e <stm32f4xxFlashDriverErase+0x2e>
 8020f1c:	687a      	ldr	r2, [r7, #4]
 8020f1e:	697b      	ldr	r3, [r7, #20]
 8020f20:	429a      	cmp	r2, r3
 8020f22:	d204      	bcs.n	8020f2e <stm32f4xxFlashDriverErase+0x2e>
      (address % sizeof(uint32_t) != 0))
 8020f24:	687b      	ldr	r3, [r7, #4]
 8020f26:	f003 0303 	and.w	r3, r3, #3
   if((address < STM32F4xx_ADDR || address >= topAddress) ||
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	d001      	beq.n	8020f32 <stm32f4xxFlashDriverErase+0x32>
      return ERROR_INVALID_PARAMETER;
 8020f2e:	2302      	movs	r3, #2
 8020f30:	e045      	b.n	8020fbe <stm32f4xxFlashDriverErase+0xbe>

#ifndef FLASH_DB_MODE
   //Check parameters validity (is data in flash)
   if((length == 0) || (address + length > topAddress))
 8020f32:	683b      	ldr	r3, [r7, #0]
 8020f34:	2b00      	cmp	r3, #0
 8020f36:	d005      	beq.n	8020f44 <stm32f4xxFlashDriverErase+0x44>
 8020f38:	687a      	ldr	r2, [r7, #4]
 8020f3a:	683b      	ldr	r3, [r7, #0]
 8020f3c:	4413      	add	r3, r2
 8020f3e:	697a      	ldr	r2, [r7, #20]
 8020f40:	429a      	cmp	r2, r3
 8020f42:	d201      	bcs.n	8020f48 <stm32f4xxFlashDriverErase+0x48>
      return ERROR_INVALID_PARAMETER;
 8020f44:	2302      	movs	r3, #2
 8020f46:	e03a      	b.n	8020fbe <stm32f4xxFlashDriverErase+0xbe>
      (address >= STM32F4xx_BANK_2_ADDR && address + length <= topAddress)))
      return ERROR_INVALID_PARAMETER;
#endif

   //Get the number of the first sector to erase
   firstSectorNumber = stm32f4xxFlashGetSector(address);
 8020f48:	6878      	ldr	r0, [r7, #4]
 8020f4a:	f000 fa31 	bl	80213b0 <stm32f4xxFlashGetSector>
 8020f4e:	6138      	str	r0, [r7, #16]

   //Check first sector number is valid (means address must match a sector start address)
   if(firstSectorNumber == -1)
 8020f50:	693b      	ldr	r3, [r7, #16]
 8020f52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8020f56:	d101      	bne.n	8020f5c <stm32f4xxFlashDriverErase+0x5c>
      return ERROR_INVALID_PARAMETER;
 8020f58:	2302      	movs	r3, #2
 8020f5a:	e030      	b.n	8020fbe <stm32f4xxFlashDriverErase+0xbe>

   if(address + length == STM32F4xx_ADDR + STM32F4xx_SIZE)
 8020f5c:	687a      	ldr	r2, [r7, #4]
 8020f5e:	683b      	ldr	r3, [r7, #0]
 8020f60:	4413      	add	r3, r2
 8020f62:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8020f66:	d102      	bne.n	8020f6e <stm32f4xxFlashDriverErase+0x6e>
   {
      //Get the number of the boundary sector (not to be erased)
      lastSectorNumber = STM32F4xx_SECTORS_NUMBER;
 8020f68:	230c      	movs	r3, #12
 8020f6a:	61fb      	str	r3, [r7, #28]
 8020f6c:	e014      	b.n	8020f98 <stm32f4xxFlashDriverErase+0x98>
   }
   else
   {
      //Get the address of the boundary sector (not to be erased)
      error = stm32f4xxFlashDriverGetNextSector(address+length, &lastSectorAddr);
 8020f6e:	687a      	ldr	r2, [r7, #4]
 8020f70:	683b      	ldr	r3, [r7, #0]
 8020f72:	4413      	add	r3, r2
 8020f74:	f107 020c 	add.w	r2, r7, #12
 8020f78:	4611      	mov	r1, r2
 8020f7a:	4618      	mov	r0, r3
 8020f7c:	f000 f824 	bl	8020fc8 <stm32f4xxFlashDriverGetNextSector>
 8020f80:	4603      	mov	r3, r0
 8020f82:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 8020f84:	8b7b      	ldrh	r3, [r7, #26]
 8020f86:	2b00      	cmp	r3, #0
 8020f88:	d001      	beq.n	8020f8e <stm32f4xxFlashDriverErase+0x8e>
         return error;
 8020f8a:	8b7b      	ldrh	r3, [r7, #26]
 8020f8c:	e017      	b.n	8020fbe <stm32f4xxFlashDriverErase+0xbe>

      //Get the number of the boundary sector (not to be erased)
      lastSectorNumber = stm32f4xxFlashGetSector(lastSectorAddr);
 8020f8e:	68fb      	ldr	r3, [r7, #12]
 8020f90:	4618      	mov	r0, r3
 8020f92:	f000 fa0d 	bl	80213b0 <stm32f4xxFlashGetSector>
 8020f96:	61f8      	str	r0, [r7, #28]
   }

   //Get the number of the first sector to erase
   firstSectorNumber = stm32f4xxFlashGetSector(address);
 8020f98:	6878      	ldr	r0, [r7, #4]
 8020f9a:	f000 fa09 	bl	80213b0 <stm32f4xxFlashGetSector>
 8020f9e:	6138      	str	r0, [r7, #16]

   //Erase the required number of sectors
   error = stm32f4xxFlashDriverEraseSector(firstSectorNumber, lastSectorNumber-firstSectorNumber);
 8020fa0:	6938      	ldr	r0, [r7, #16]
 8020fa2:	69fa      	ldr	r2, [r7, #28]
 8020fa4:	693b      	ldr	r3, [r7, #16]
 8020fa6:	1ad3      	subs	r3, r2, r3
 8020fa8:	4619      	mov	r1, r3
 8020faa:	f000 f88d 	bl	80210c8 <stm32f4xxFlashDriverEraseSector>
 8020fae:	4603      	mov	r3, r0
 8020fb0:	837b      	strh	r3, [r7, #26]
   //Is any error?
   if(error)
 8020fb2:	8b7b      	ldrh	r3, [r7, #26]
 8020fb4:	2b00      	cmp	r3, #0
 8020fb6:	d001      	beq.n	8020fbc <stm32f4xxFlashDriverErase+0xbc>
      return error;
 8020fb8:	8b7b      	ldrh	r3, [r7, #26]
 8020fba:	e000      	b.n	8020fbe <stm32f4xxFlashDriverErase+0xbe>

   //Successful process
   return NO_ERROR;
 8020fbc:	2300      	movs	r3, #0
}
 8020fbe:	4618      	mov	r0, r3
 8020fc0:	3720      	adds	r7, #32
 8020fc2:	46bd      	mov	sp, r7
 8020fc4:	bd80      	pop	{r7, pc}
	...

08020fc8 <stm32f4xxFlashDriverGetNextSector>:
 * @brief Get address of the neighbouring sector
 * @return Error code
 **/

error_t stm32f4xxFlashDriverGetNextSector(uint32_t address, uint32_t *sectorAddr)
{
 8020fc8:	b480      	push	{r7}
 8020fca:	b089      	sub	sp, #36	@ 0x24
 8020fcc:	af00      	add	r7, sp, #0
 8020fce:	6078      	str	r0, [r7, #4]
 8020fd0:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t j;
   SectorsGroup *sg;
   uint32_t sAddr = 0xFFFFFFFF;
 8020fd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020fd6:	617b      	str	r3, [r7, #20]
   uint32_t lastSectorAddr;

   lastSectorAddr = sectorsList[SECTORS_LIST_LEN-1].addr +
 8020fd8:	4a30      	ldr	r2, [pc, #192]	@ (802109c <stm32f4xxFlashDriverGetNextSector+0xd4>)
      (sectorsList[SECTORS_LIST_LEN-1].size * (sectorsList[SECTORS_LIST_LEN-1].nb - 1));
 8020fda:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8020fde:	2307      	movs	r3, #7
 8020fe0:	3b01      	subs	r3, #1
 8020fe2:	fb01 f303 	mul.w	r3, r1, r3
   lastSectorAddr = sectorsList[SECTORS_LIST_LEN-1].addr +
 8020fe6:	4413      	add	r3, r2
 8020fe8:	613b      	str	r3, [r7, #16]

   //Check parameters validity
   if(address < STM32F4xx_ADDR || address > lastSectorAddr || sectorAddr == NULL)
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8020ff0:	d306      	bcc.n	8021000 <stm32f4xxFlashDriverGetNextSector+0x38>
 8020ff2:	687a      	ldr	r2, [r7, #4]
 8020ff4:	693b      	ldr	r3, [r7, #16]
 8020ff6:	429a      	cmp	r2, r3
 8020ff8:	d802      	bhi.n	8021000 <stm32f4xxFlashDriverGetNextSector+0x38>
 8020ffa:	683b      	ldr	r3, [r7, #0]
 8020ffc:	2b00      	cmp	r3, #0
 8020ffe:	d101      	bne.n	8021004 <stm32f4xxFlashDriverGetNextSector+0x3c>
      return ERROR_INVALID_PARAMETER;
 8021000:	2302      	movs	r3, #2
 8021002:	e044      	b.n	802108e <stm32f4xxFlashDriverGetNextSector+0xc6>

   //Loop through sectors list
   for(i = 0; i < SECTORS_LIST_LEN && sAddr == 0xFFFFFFFF; i++)
 8021004:	2300      	movs	r3, #0
 8021006:	61fb      	str	r3, [r7, #28]
 8021008:	e036      	b.n	8021078 <stm32f4xxFlashDriverGetNextSector+0xb0>
   {
      //Point to the current sectors group
      sg = (SectorsGroup *) &sectorsList[i];
 802100a:	69fa      	ldr	r2, [r7, #28]
 802100c:	4613      	mov	r3, r2
 802100e:	005b      	lsls	r3, r3, #1
 8021010:	4413      	add	r3, r2
 8021012:	009b      	lsls	r3, r3, #2
 8021014:	4a22      	ldr	r2, [pc, #136]	@ (80210a0 <stm32f4xxFlashDriverGetNextSector+0xd8>)
 8021016:	4413      	add	r3, r2
 8021018:	60fb      	str	r3, [r7, #12]

      //Is address in current sector group
      if(address <= sg->addr + sg->size*sg->nb)
 802101a:	68fb      	ldr	r3, [r7, #12]
 802101c:	681a      	ldr	r2, [r3, #0]
 802101e:	68fb      	ldr	r3, [r7, #12]
 8021020:	685b      	ldr	r3, [r3, #4]
 8021022:	68f9      	ldr	r1, [r7, #12]
 8021024:	6889      	ldr	r1, [r1, #8]
 8021026:	fb01 f303 	mul.w	r3, r1, r3
 802102a:	4413      	add	r3, r2
 802102c:	687a      	ldr	r2, [r7, #4]
 802102e:	429a      	cmp	r2, r3
 8021030:	d81f      	bhi.n	8021072 <stm32f4xxFlashDriverGetNextSector+0xaa>
      {
         //Loop through sectors group list
         for(j = 0; j < sg->nb; j++)
 8021032:	2300      	movs	r3, #0
 8021034:	61bb      	str	r3, [r7, #24]
 8021036:	e017      	b.n	8021068 <stm32f4xxFlashDriverGetNextSector+0xa0>
         {
            //Is address located in current sector?
            if(address <= sg->addr + j*sg->size)
 8021038:	68fb      	ldr	r3, [r7, #12]
 802103a:	681a      	ldr	r2, [r3, #0]
 802103c:	68fb      	ldr	r3, [r7, #12]
 802103e:	685b      	ldr	r3, [r3, #4]
 8021040:	69b9      	ldr	r1, [r7, #24]
 8021042:	fb01 f303 	mul.w	r3, r1, r3
 8021046:	4413      	add	r3, r2
 8021048:	687a      	ldr	r2, [r7, #4]
 802104a:	429a      	cmp	r2, r3
 802104c:	d809      	bhi.n	8021062 <stm32f4xxFlashDriverGetNextSector+0x9a>
            {
               //Set next sector address
               sAddr = sg->addr + j*sg->size;
 802104e:	68fb      	ldr	r3, [r7, #12]
 8021050:	681a      	ldr	r2, [r3, #0]
 8021052:	68fb      	ldr	r3, [r7, #12]
 8021054:	685b      	ldr	r3, [r3, #4]
 8021056:	69b9      	ldr	r1, [r7, #24]
 8021058:	fb01 f303 	mul.w	r3, r1, r3
 802105c:	4413      	add	r3, r2
 802105e:	617b      	str	r3, [r7, #20]
               break;
 8021060:	e007      	b.n	8021072 <stm32f4xxFlashDriverGetNextSector+0xaa>
         for(j = 0; j < sg->nb; j++)
 8021062:	69bb      	ldr	r3, [r7, #24]
 8021064:	3301      	adds	r3, #1
 8021066:	61bb      	str	r3, [r7, #24]
 8021068:	68fb      	ldr	r3, [r7, #12]
 802106a:	689b      	ldr	r3, [r3, #8]
 802106c:	69ba      	ldr	r2, [r7, #24]
 802106e:	429a      	cmp	r2, r3
 8021070:	d3e2      	bcc.n	8021038 <stm32f4xxFlashDriverGetNextSector+0x70>
   for(i = 0; i < SECTORS_LIST_LEN && sAddr == 0xFFFFFFFF; i++)
 8021072:	69fb      	ldr	r3, [r7, #28]
 8021074:	3301      	adds	r3, #1
 8021076:	61fb      	str	r3, [r7, #28]
 8021078:	69fb      	ldr	r3, [r7, #28]
 802107a:	2b02      	cmp	r3, #2
 802107c:	d803      	bhi.n	8021086 <stm32f4xxFlashDriverGetNextSector+0xbe>
 802107e:	697b      	ldr	r3, [r7, #20]
 8021080:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8021084:	d0c1      	beq.n	802100a <stm32f4xxFlashDriverGetNextSector+0x42>
         }
      }
   }

   //Save next sector addr
   *sectorAddr = sAddr;
 8021086:	683b      	ldr	r3, [r7, #0]
 8021088:	697a      	ldr	r2, [r7, #20]
 802108a:	601a      	str	r2, [r3, #0]

   //Succesfull process
   return NO_ERROR;
 802108c:	2300      	movs	r3, #0
}
 802108e:	4618      	mov	r0, r3
 8021090:	3724      	adds	r7, #36	@ 0x24
 8021092:	46bd      	mov	sp, r7
 8021094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021098:	4770      	bx	lr
 802109a:	bf00      	nop
 802109c:	08020000 	.word	0x08020000
 80210a0:	0802d6d8 	.word	0x0802d6d8

080210a4 <stm32f4xxFlashDriverIsSectorAddr>:
 * @brief Determine if a given address is contained within a sector
 * @return boolean
 **/

bool_t stm32f4xxFlashDriverIsSectorAddr(uint32_t address)
{
 80210a4:	b580      	push	{r7, lr}
 80210a6:	b084      	sub	sp, #16
 80210a8:	af00      	add	r7, sp, #0
 80210aa:	6078      	str	r0, [r7, #4]
   int_t sector;

   //Get Flash memory sector number
   sector = stm32f4xxFlashGetSector(address);
 80210ac:	6878      	ldr	r0, [r7, #4]
 80210ae:	f000 f97f 	bl	80213b0 <stm32f4xxFlashGetSector>
 80210b2:	60f8      	str	r0, [r7, #12]

   //Is given address match a sector start address?
   if(sector >= 0)
 80210b4:	68fb      	ldr	r3, [r7, #12]
 80210b6:	2b00      	cmp	r3, #0
 80210b8:	db01      	blt.n	80210be <stm32f4xxFlashDriverIsSectorAddr+0x1a>
      return TRUE;
 80210ba:	2301      	movs	r3, #1
 80210bc:	e000      	b.n	80210c0 <stm32f4xxFlashDriverIsSectorAddr+0x1c>
   else
      return FALSE;
 80210be:	2300      	movs	r3, #0
}
 80210c0:	4618      	mov	r0, r3
 80210c2:	3710      	adds	r7, #16
 80210c4:	46bd      	mov	sp, r7
 80210c6:	bd80      	pop	{r7, pc}

080210c8 <stm32f4xxFlashDriverEraseSector>:
 * @param[in] nbSectors Number of Flash memory sector to be erased
 * @return Error code
 **/

error_t stm32f4xxFlashDriverEraseSector(uint32_t firstSector, size_t nbSectors)
{
 80210c8:	b580      	push	{r7, lr}
 80210ca:	b08a      	sub	sp, #40	@ 0x28
 80210cc:	af00      	add	r7, sp, #0
 80210ce:	6078      	str	r0, [r7, #4]
 80210d0:	6039      	str	r1, [r7, #0]
   HAL_StatusTypeDef status;
   FLASH_EraseInitTypeDef EraseInitStruct;
   uint32_t sectorError;

   //Check parameter validity
   if((firstSector >= STM32F4xx_SECTORS_NUMBER) || (nbSectors == 0) ||
 80210d2:	687b      	ldr	r3, [r7, #4]
 80210d4:	2b0b      	cmp	r3, #11
 80210d6:	d808      	bhi.n	80210ea <stm32f4xxFlashDriverEraseSector+0x22>
 80210d8:	683b      	ldr	r3, [r7, #0]
 80210da:	2b00      	cmp	r3, #0
 80210dc:	d005      	beq.n	80210ea <stm32f4xxFlashDriverEraseSector+0x22>
      ((firstSector + nbSectors - 1) >= STM32F4xx_SECTORS_NUMBER))
 80210de:	687a      	ldr	r2, [r7, #4]
 80210e0:	683b      	ldr	r3, [r7, #0]
 80210e2:	4413      	add	r3, r2
 80210e4:	3b01      	subs	r3, #1
   if((firstSector >= STM32F4xx_SECTORS_NUMBER) || (nbSectors == 0) ||
 80210e6:	2b0b      	cmp	r3, #11
 80210e8:	d901      	bls.n	80210ee <stm32f4xxFlashDriverEraseSector+0x26>
      return ERROR_INVALID_PARAMETER;
 80210ea:	2302      	movs	r3, #2
 80210ec:	e06d      	b.n	80211ca <stm32f4xxFlashDriverEraseSector+0x102>

   //Initialize FLASH flags
   //(Patch to fix STM32 HAL library wrong initial flash flags issue)
   FLASH_WaitForLastOperation((uint32_t)50000U);
 80210ee:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80210f2:	f008 f8a3 	bl	802923c <FLASH_WaitForLastOperation>

   //Start of exception handling block
   do
   {
      //Allow access to Flash control registers and user False
      status = HAL_FLASH_Unlock();
 80210f6:	f008 f86f 	bl	80291d8 <HAL_FLASH_Unlock>
 80210fa:	4603      	mov	r3, r0
 80210fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      //Is any error?
      if (status != HAL_OK)
 8021100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8021104:	2b00      	cmp	r3, #0
 8021106:	d00c      	beq.n	8021122 <stm32f4xxFlashDriverEraseSector+0x5a>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 8021108:	f7ff fc50 	bl	80209ac <osSuspendAllTasks>
 802110c:	4b31      	ldr	r3, [pc, #196]	@ (80211d4 <stm32f4xxFlashDriverEraseSector+0x10c>)
 802110e:	681b      	ldr	r3, [r3, #0]
 8021110:	68db      	ldr	r3, [r3, #12]
 8021112:	2227      	movs	r2, #39	@ 0x27
 8021114:	2101      	movs	r1, #1
 8021116:	4830      	ldr	r0, [pc, #192]	@ (80211d8 <stm32f4xxFlashDriverEraseSector+0x110>)
 8021118:	f00a fc28 	bl	802b96c <fwrite>
 802111c:	f7ff fc4d 	bl	80209ba <osResumeAllTasks>
         break;
 8021120:	e04b      	b.n	80211ba <stm32f4xxFlashDriverEraseSector+0xf2>
      }

      //Initialize FLASH flags
      status = FLASH_WaitForLastOperation((uint32_t)50000U);
 8021122:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8021126:	f008 f889 	bl	802923c <FLASH_WaitForLastOperation>
 802112a:	4603      	mov	r3, r0
 802112c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      //Is any error?
      if(status != HAL_OK)
 8021130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8021134:	2b00      	cmp	r3, #0
 8021136:	d00b      	beq.n	8021150 <stm32f4xxFlashDriverEraseSector+0x88>
      {
         //Debug message
         TRACE_ERROR("Initialize FLASH flags...\r\n");
 8021138:	f7ff fc38 	bl	80209ac <osSuspendAllTasks>
 802113c:	4b25      	ldr	r3, [pc, #148]	@ (80211d4 <stm32f4xxFlashDriverEraseSector+0x10c>)
 802113e:	681b      	ldr	r3, [r3, #0]
 8021140:	68db      	ldr	r3, [r3, #12]
 8021142:	221b      	movs	r2, #27
 8021144:	2101      	movs	r1, #1
 8021146:	4825      	ldr	r0, [pc, #148]	@ (80211dc <stm32f4xxFlashDriverEraseSector+0x114>)
 8021148:	f00a fc10 	bl	802b96c <fwrite>
 802114c:	f7ff fc35 	bl	80209ba <osResumeAllTasks>
      }

      //Set flash erase parameters
      EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8021150:	2302      	movs	r3, #2
 8021152:	623b      	str	r3, [r7, #32]
      EraseInitStruct.Sector = firstSector;
 8021154:	687b      	ldr	r3, [r7, #4]
 8021156:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS; // Erase multiple sectors
 8021158:	2300      	movs	r3, #0
 802115a:	613b      	str	r3, [r7, #16]
      EraseInitStruct.NbSectors = nbSectors;
 802115c:	683b      	ldr	r3, [r7, #0]
 802115e:	61fb      	str	r3, [r7, #28]

      //Erase the specified Flash sector(s)
      status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 8021160:	f107 020c 	add.w	r2, r7, #12
 8021164:	f107 0310 	add.w	r3, r7, #16
 8021168:	4611      	mov	r1, r2
 802116a:	4618      	mov	r0, r3
 802116c:	f008 f996 	bl	802949c <HAL_FLASHEx_Erase>
 8021170:	4603      	mov	r3, r0
 8021172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      //Is any error?
      if(status != HAL_OK)
 8021176:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802117a:	2b00      	cmp	r3, #0
 802117c:	d00b      	beq.n	8021196 <stm32f4xxFlashDriverEraseSector+0xce>
      {
         //Debug message
         TRACE_ERROR("Failed to erase flash sector(s) %ld, error = 0x%08lX!\r\n", firstSector, sectorError);
 802117e:	f7ff fc15 	bl	80209ac <osSuspendAllTasks>
 8021182:	4b14      	ldr	r3, [pc, #80]	@ (80211d4 <stm32f4xxFlashDriverEraseSector+0x10c>)
 8021184:	681b      	ldr	r3, [r3, #0]
 8021186:	68d8      	ldr	r0, [r3, #12]
 8021188:	68fb      	ldr	r3, [r7, #12]
 802118a:	687a      	ldr	r2, [r7, #4]
 802118c:	4914      	ldr	r1, [pc, #80]	@ (80211e0 <stm32f4xxFlashDriverEraseSector+0x118>)
 802118e:	f00a fb71 	bl	802b874 <fiprintf>
 8021192:	f7ff fc12 	bl	80209ba <osResumeAllTasks>
      }

      //Disable the Flash option control register access (recommended to protect
      //the option Bytes against possible unwanted operations)
      if(HAL_FLASH_Lock() != HAL_OK)
 8021196:	f008 f841 	bl	802921c <HAL_FLASH_Lock>
 802119a:	4603      	mov	r3, r0
 802119c:	2b00      	cmp	r3, #0
 802119e:	d00c      	beq.n	80211ba <stm32f4xxFlashDriverEraseSector+0xf2>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register lock failed!\r\n");
 80211a0:	f7ff fc04 	bl	80209ac <osSuspendAllTasks>
 80211a4:	4b0b      	ldr	r3, [pc, #44]	@ (80211d4 <stm32f4xxFlashDriverEraseSector+0x10c>)
 80211a6:	681b      	ldr	r3, [r3, #0]
 80211a8:	68db      	ldr	r3, [r3, #12]
 80211aa:	2225      	movs	r2, #37	@ 0x25
 80211ac:	2101      	movs	r1, #1
 80211ae:	480d      	ldr	r0, [pc, #52]	@ (80211e4 <stm32f4xxFlashDriverEraseSector+0x11c>)
 80211b0:	f00a fbdc 	bl	802b96c <fwrite>
 80211b4:	f7ff fc01 	bl	80209ba <osResumeAllTasks>
         break;
 80211b8:	bf00      	nop
      }
   }while(0);

   //Return status code
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 80211ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80211be:	2b00      	cmp	r3, #0
 80211c0:	d101      	bne.n	80211c6 <stm32f4xxFlashDriverEraseSector+0xfe>
 80211c2:	2300      	movs	r3, #0
 80211c4:	e001      	b.n	80211ca <stm32f4xxFlashDriverEraseSector+0x102>
 80211c6:	f240 230a 	movw	r3, #522	@ 0x20a
}
 80211ca:	4618      	mov	r0, r3
 80211cc:	3728      	adds	r7, #40	@ 0x28
 80211ce:	46bd      	mov	sp, r7
 80211d0:	bd80      	pop	{r7, pc}
 80211d2:	bf00      	nop
 80211d4:	2000003c 	.word	0x2000003c
 80211d8:	0802c6dc 	.word	0x0802c6dc
 80211dc:	0802c704 	.word	0x0802c704
 80211e0:	0802c720 	.word	0x0802c720
 80211e4:	0802c758 	.word	0x0802c758

080211e8 <stm32f4xxFlashDriverWriteWord>:
 * @param[in] word 32-bit word to write in Flash memory
 * @return Error code
 **/

error_t stm32f4xxFlashDriverWriteWord(uint32_t address, uint32_t word)
{
 80211e8:	b5b0      	push	{r4, r5, r7, lr}
 80211ea:	b08c      	sub	sp, #48	@ 0x30
 80211ec:	af00      	add	r7, sp, #0
 80211ee:	6078      	str	r0, [r7, #4]
 80211f0:	6039      	str	r1, [r7, #0]
   uint32_t topAddress;
   HAL_StatusTypeDef status;
   FLASH_EraseInitTypeDef EraseInitStruct;

   //Precompute the top address
   topAddress = STM32F4xx_ADDR + STM32F4xx_SIZE;
 80211f2:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 80211f6:	62bb      	str	r3, [r7, #40]	@ 0x28

#ifndef FLASH_DB_MODE
   //Check parameters validity (is data in flash)
   if((address + sizeof(uint32_t) >= topAddress) ||
 80211f8:	687b      	ldr	r3, [r7, #4]
 80211fa:	3304      	adds	r3, #4
 80211fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80211fe:	429a      	cmp	r2, r3
 8021200:	d904      	bls.n	802120c <stm32f4xxFlashDriverWriteWord+0x24>
      (address % sizeof(uint32_t) != 0))
 8021202:	687b      	ldr	r3, [r7, #4]
 8021204:	f003 0303 	and.w	r3, r3, #3
   if((address + sizeof(uint32_t) >= topAddress) ||
 8021208:	2b00      	cmp	r3, #0
 802120a:	d001      	beq.n	8021210 <stm32f4xxFlashDriverWriteWord+0x28>
      return ERROR_INVALID_PARAMETER;
 802120c:	2302      	movs	r3, #2
 802120e:	e0bf      	b.n	8021390 <stm32f4xxFlashDriverWriteWord+0x1a8>
      return ERROR_INVALID_PARAMETER;
#endif

   //Initialize FLASH flags
   //(Patch to fix stm32 hal library wrong initial flash flags issue)
   FLASH_WaitForLastOperation((uint32_t)50000U);
 8021210:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8021214:	f008 f812 	bl	802923c <FLASH_WaitForLastOperation>

   //Get Flash memory sector number
   sector = stm32f4xxFlashGetSector(address);
 8021218:	6878      	ldr	r0, [r7, #4]
 802121a:	f000 f8c9 	bl	80213b0 <stm32f4xxFlashGetSector>
 802121e:	6278      	str	r0, [r7, #36]	@ 0x24

   //Check whether the address match the beginning of a Flash sector.
   //If this is the case then the flash sector must be erased before any write operation
   if(sector >= 0)
 8021220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021222:	2b00      	cmp	r3, #0
 8021224:	db61      	blt.n	80212ea <stm32f4xxFlashDriverWriteWord+0x102>

      //Start of exception handling block
      do
      {
         //Allow access to Flash control registers and user False
         status = HAL_FLASH_Unlock();
 8021226:	f007 ffd7 	bl	80291d8 <HAL_FLASH_Unlock>
 802122a:	4603      	mov	r3, r0
 802122c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
         //Is any error?
         if (status != HAL_OK)
 8021230:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8021234:	2b00      	cmp	r3, #0
 8021236:	d00c      	beq.n	8021252 <stm32f4xxFlashDriverWriteWord+0x6a>
         {
            //Debug message
            TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 8021238:	f7ff fbb8 	bl	80209ac <osSuspendAllTasks>
 802123c:	4b56      	ldr	r3, [pc, #344]	@ (8021398 <stm32f4xxFlashDriverWriteWord+0x1b0>)
 802123e:	681b      	ldr	r3, [r3, #0]
 8021240:	68db      	ldr	r3, [r3, #12]
 8021242:	2227      	movs	r2, #39	@ 0x27
 8021244:	2101      	movs	r1, #1
 8021246:	4855      	ldr	r0, [pc, #340]	@ (802139c <stm32f4xxFlashDriverWriteWord+0x1b4>)
 8021248:	f00a fb90 	bl	802b96c <fwrite>
 802124c:	f7ff fbb5 	bl	80209ba <osResumeAllTasks>
            break;
 8021250:	e04e      	b.n	80212f0 <stm32f4xxFlashDriverWriteWord+0x108>
         }

         //Initialize FLASH flags
         status = FLASH_WaitForLastOperation((uint32_t)50000U);
 8021252:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8021256:	f007 fff1 	bl	802923c <FLASH_WaitForLastOperation>
 802125a:	4603      	mov	r3, r0
 802125c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
         //Is any error?
         if(status != HAL_OK)
 8021260:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8021264:	2b00      	cmp	r3, #0
 8021266:	d00b      	beq.n	8021280 <stm32f4xxFlashDriverWriteWord+0x98>
         {
            //Debug message
            TRACE_ERROR("Initialize FLASH flags...\r\n");
 8021268:	f7ff fba0 	bl	80209ac <osSuspendAllTasks>
 802126c:	4b4a      	ldr	r3, [pc, #296]	@ (8021398 <stm32f4xxFlashDriverWriteWord+0x1b0>)
 802126e:	681b      	ldr	r3, [r3, #0]
 8021270:	68db      	ldr	r3, [r3, #12]
 8021272:	221b      	movs	r2, #27
 8021274:	2101      	movs	r1, #1
 8021276:	484a      	ldr	r0, [pc, #296]	@ (80213a0 <stm32f4xxFlashDriverWriteWord+0x1b8>)
 8021278:	f00a fb78 	bl	802b96c <fwrite>
 802127c:	f7ff fb9d 	bl	80209ba <osResumeAllTasks>
         }

         //Set flash erase parameters
         EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8021280:	2300      	movs	r3, #0
 8021282:	60fb      	str	r3, [r7, #12]
         EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8021284:	2302      	movs	r3, #2
 8021286:	61fb      	str	r3, [r7, #28]
         EraseInitStruct.Sector = sector;
 8021288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802128a:	617b      	str	r3, [r7, #20]
         EraseInitStruct.NbSectors = 1;
 802128c:	2301      	movs	r3, #1
 802128e:	61bb      	str	r3, [r7, #24]

         //Erase the specified Flash sector
         status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 8021290:	f107 0220 	add.w	r2, r7, #32
 8021294:	f107 030c 	add.w	r3, r7, #12
 8021298:	4611      	mov	r1, r2
 802129a:	4618      	mov	r0, r3
 802129c:	f008 f8fe 	bl	802949c <HAL_FLASHEx_Erase>
 80212a0:	4603      	mov	r3, r0
 80212a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
         //Is any error?
         if(status != HAL_OK)
 80212a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80212aa:	2b00      	cmp	r3, #0
 80212ac:	d00b      	beq.n	80212c6 <stm32f4xxFlashDriverWriteWord+0xde>
         {
            //Debug message
            TRACE_ERROR("Failed to erase flash sector %d, error = 0x%08lX!\r\n", sector, sectorError);
 80212ae:	f7ff fb7d 	bl	80209ac <osSuspendAllTasks>
 80212b2:	4b39      	ldr	r3, [pc, #228]	@ (8021398 <stm32f4xxFlashDriverWriteWord+0x1b0>)
 80212b4:	681b      	ldr	r3, [r3, #0]
 80212b6:	68d8      	ldr	r0, [r3, #12]
 80212b8:	6a3b      	ldr	r3, [r7, #32]
 80212ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80212bc:	4939      	ldr	r1, [pc, #228]	@ (80213a4 <stm32f4xxFlashDriverWriteWord+0x1bc>)
 80212be:	f00a fad9 	bl	802b874 <fiprintf>
 80212c2:	f7ff fb7a 	bl	80209ba <osResumeAllTasks>
         }

         //Disable the Flash option control register access (recommended to protect
         //the option Bytes against possible unwanted operations)
         if(HAL_FLASH_Lock() != HAL_OK)
 80212c6:	f007 ffa9 	bl	802921c <HAL_FLASH_Lock>
 80212ca:	4603      	mov	r3, r0
 80212cc:	2b00      	cmp	r3, #0
 80212ce:	d00f      	beq.n	80212f0 <stm32f4xxFlashDriverWriteWord+0x108>
         {
            //Debug message
            TRACE_ERROR("Flash Control Register lock failed!\r\n");
 80212d0:	f7ff fb6c 	bl	80209ac <osSuspendAllTasks>
 80212d4:	4b30      	ldr	r3, [pc, #192]	@ (8021398 <stm32f4xxFlashDriverWriteWord+0x1b0>)
 80212d6:	681b      	ldr	r3, [r3, #0]
 80212d8:	68db      	ldr	r3, [r3, #12]
 80212da:	2225      	movs	r2, #37	@ 0x25
 80212dc:	2101      	movs	r1, #1
 80212de:	4832      	ldr	r0, [pc, #200]	@ (80213a8 <stm32f4xxFlashDriverWriteWord+0x1c0>)
 80212e0:	f00a fb44 	bl	802b96c <fwrite>
 80212e4:	f7ff fb69 	bl	80209ba <osResumeAllTasks>
 80212e8:	e002      	b.n	80212f0 <stm32f4xxFlashDriverWriteWord+0x108>
      }while(0);
   }
   else
   {
      //Erase is not needed
      status = HAL_OK;
 80212ea:	2300      	movs	r3, #0
 80212ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
   }

   //Check status code
   if(status == HAL_OK)
 80212f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	d143      	bne.n	8021380 <stm32f4xxFlashDriverWriteWord+0x198>
   {
      //Start of exception handling block
      do
      {
         //Allow access to Flash control registers and user False
         status = HAL_FLASH_Unlock();
 80212f8:	f007 ff6e 	bl	80291d8 <HAL_FLASH_Unlock>
 80212fc:	4603      	mov	r3, r0
 80212fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
         //Is any error?
         if (status != HAL_OK)
 8021302:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8021306:	2b00      	cmp	r3, #0
 8021308:	d00c      	beq.n	8021324 <stm32f4xxFlashDriverWriteWord+0x13c>
         {
            //Debug message
            TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 802130a:	f7ff fb4f 	bl	80209ac <osSuspendAllTasks>
 802130e:	4b22      	ldr	r3, [pc, #136]	@ (8021398 <stm32f4xxFlashDriverWriteWord+0x1b0>)
 8021310:	681b      	ldr	r3, [r3, #0]
 8021312:	68db      	ldr	r3, [r3, #12]
 8021314:	2227      	movs	r2, #39	@ 0x27
 8021316:	2101      	movs	r1, #1
 8021318:	4820      	ldr	r0, [pc, #128]	@ (802139c <stm32f4xxFlashDriverWriteWord+0x1b4>)
 802131a:	f00a fb27 	bl	802b96c <fwrite>
 802131e:	f7ff fb4c 	bl	80209ba <osResumeAllTasks>
            break;
 8021322:	e02d      	b.n	8021380 <stm32f4xxFlashDriverWriteWord+0x198>
         }

         //Program the 32-bit word to Flash memory
         status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, word);
 8021324:	683b      	ldr	r3, [r7, #0]
 8021326:	2200      	movs	r2, #0
 8021328:	461c      	mov	r4, r3
 802132a:	4615      	mov	r5, r2
 802132c:	4622      	mov	r2, r4
 802132e:	462b      	mov	r3, r5
 8021330:	6879      	ldr	r1, [r7, #4]
 8021332:	2002      	movs	r0, #2
 8021334:	f007 fefe 	bl	8029134 <HAL_FLASH_Program>
 8021338:	4603      	mov	r3, r0
 802133a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
         //Is any error?
         if(status != HAL_OK)
 802133e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8021342:	2b00      	cmp	r3, #0
 8021344:	d00b      	beq.n	802135e <stm32f4xxFlashDriverWriteWord+0x176>
         {
            //Debug message
            TRACE_ERROR("Failed to write word \"0x%08lX\" at 0x%08lX!\r\n", word, address);
 8021346:	f7ff fb31 	bl	80209ac <osSuspendAllTasks>
 802134a:	4b13      	ldr	r3, [pc, #76]	@ (8021398 <stm32f4xxFlashDriverWriteWord+0x1b0>)
 802134c:	681b      	ldr	r3, [r3, #0]
 802134e:	68d8      	ldr	r0, [r3, #12]
 8021350:	687b      	ldr	r3, [r7, #4]
 8021352:	683a      	ldr	r2, [r7, #0]
 8021354:	4915      	ldr	r1, [pc, #84]	@ (80213ac <stm32f4xxFlashDriverWriteWord+0x1c4>)
 8021356:	f00a fa8d 	bl	802b874 <fiprintf>
 802135a:	f7ff fb2e 	bl	80209ba <osResumeAllTasks>
         }

         //Disable the Flash option control register access (recommended to protect
         //the option Bytes against possible unwanted operations)
         if(HAL_FLASH_Lock() != HAL_OK)
 802135e:	f007 ff5d 	bl	802921c <HAL_FLASH_Lock>
 8021362:	4603      	mov	r3, r0
 8021364:	2b00      	cmp	r3, #0
 8021366:	d00b      	beq.n	8021380 <stm32f4xxFlashDriverWriteWord+0x198>
         {
            //Debug message
            TRACE_ERROR("Flash Control Register lock failed!\r\n");
 8021368:	f7ff fb20 	bl	80209ac <osSuspendAllTasks>
 802136c:	4b0a      	ldr	r3, [pc, #40]	@ (8021398 <stm32f4xxFlashDriverWriteWord+0x1b0>)
 802136e:	681b      	ldr	r3, [r3, #0]
 8021370:	68db      	ldr	r3, [r3, #12]
 8021372:	2225      	movs	r2, #37	@ 0x25
 8021374:	2101      	movs	r1, #1
 8021376:	480c      	ldr	r0, [pc, #48]	@ (80213a8 <stm32f4xxFlashDriverWriteWord+0x1c0>)
 8021378:	f00a faf8 	bl	802b96c <fwrite>
 802137c:	f7ff fb1d 	bl	80209ba <osResumeAllTasks>
         }
      }while(0);
   }

   //Return status code
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 8021380:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8021384:	2b00      	cmp	r3, #0
 8021386:	d101      	bne.n	802138c <stm32f4xxFlashDriverWriteWord+0x1a4>
 8021388:	2300      	movs	r3, #0
 802138a:	e001      	b.n	8021390 <stm32f4xxFlashDriverWriteWord+0x1a8>
 802138c:	f240 230a 	movw	r3, #522	@ 0x20a
}
 8021390:	4618      	mov	r0, r3
 8021392:	3730      	adds	r7, #48	@ 0x30
 8021394:	46bd      	mov	sp, r7
 8021396:	bdb0      	pop	{r4, r5, r7, pc}
 8021398:	2000003c 	.word	0x2000003c
 802139c:	0802c6dc 	.word	0x0802c6dc
 80213a0:	0802c704 	.word	0x0802c704
 80213a4:	0802c780 	.word	0x0802c780
 80213a8:	0802c758 	.word	0x0802c758
 80213ac:	0802c7b4 	.word	0x0802c7b4

080213b0 <stm32f4xxFlashGetSector>:
 * @param[in] address Given Flash Memory address
 * @return Sector number or -1
 **/

int_t stm32f4xxFlashGetSector(uint32_t address)
{
 80213b0:	b480      	push	{r7}
 80213b2:	b089      	sub	sp, #36	@ 0x24
 80213b4:	af00      	add	r7, sp, #0
 80213b6:	6078      	str	r0, [r7, #4]
   uint_t j;
   SectorsGroup* sGroup;
   int_t tempSector;

   //Initialize sector number
   sector = -1;
 80213b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80213bc:	61fb      	str	r3, [r7, #28]
   tempSector = 0;
 80213be:	2300      	movs	r3, #0
 80213c0:	613b      	str	r3, [r7, #16]

   //Loop through flash sector group list
   for(i = 0; i < SECTORS_LIST_LEN; i++)
 80213c2:	2300      	movs	r3, #0
 80213c4:	61bb      	str	r3, [r7, #24]
 80213c6:	e026      	b.n	8021416 <stm32f4xxFlashGetSector+0x66>
   {
      //Point to the current sector group
      sGroup = (SectorsGroup*) &sectorsList[i];
 80213c8:	69ba      	ldr	r2, [r7, #24]
 80213ca:	4613      	mov	r3, r2
 80213cc:	005b      	lsls	r3, r3, #1
 80213ce:	4413      	add	r3, r2
 80213d0:	009b      	lsls	r3, r3, #2
 80213d2:	4a16      	ldr	r2, [pc, #88]	@ (802142c <stm32f4xxFlashGetSector+0x7c>)
 80213d4:	4413      	add	r3, r2
 80213d6:	60fb      	str	r3, [r7, #12]

      //Loop through sector group sectors list
      for(j = 0; j < sGroup->nb; j++)
 80213d8:	2300      	movs	r3, #0
 80213da:	617b      	str	r3, [r7, #20]
 80213dc:	e013      	b.n	8021406 <stm32f4xxFlashGetSector+0x56>
      {
         //Is current sector address matches given address?
         if(sGroup->addr + sGroup->size*j == address)
 80213de:	68fb      	ldr	r3, [r7, #12]
 80213e0:	681a      	ldr	r2, [r3, #0]
 80213e2:	68fb      	ldr	r3, [r7, #12]
 80213e4:	685b      	ldr	r3, [r3, #4]
 80213e6:	6979      	ldr	r1, [r7, #20]
 80213e8:	fb01 f303 	mul.w	r3, r1, r3
 80213ec:	4413      	add	r3, r2
 80213ee:	687a      	ldr	r2, [r7, #4]
 80213f0:	429a      	cmp	r2, r3
 80213f2:	d102      	bne.n	80213fa <stm32f4xxFlashGetSector+0x4a>
         {
            sector = tempSector;
 80213f4:	693b      	ldr	r3, [r7, #16]
 80213f6:	61fb      	str	r3, [r7, #28]
 80213f8:	e002      	b.n	8021400 <stm32f4xxFlashGetSector+0x50>
         }
         else
         {
            tempSector++;
 80213fa:	693b      	ldr	r3, [r7, #16]
 80213fc:	3301      	adds	r3, #1
 80213fe:	613b      	str	r3, [r7, #16]
      for(j = 0; j < sGroup->nb; j++)
 8021400:	697b      	ldr	r3, [r7, #20]
 8021402:	3301      	adds	r3, #1
 8021404:	617b      	str	r3, [r7, #20]
 8021406:	68fb      	ldr	r3, [r7, #12]
 8021408:	689b      	ldr	r3, [r3, #8]
 802140a:	697a      	ldr	r2, [r7, #20]
 802140c:	429a      	cmp	r2, r3
 802140e:	d3e6      	bcc.n	80213de <stm32f4xxFlashGetSector+0x2e>
   for(i = 0; i < SECTORS_LIST_LEN; i++)
 8021410:	69bb      	ldr	r3, [r7, #24]
 8021412:	3301      	adds	r3, #1
 8021414:	61bb      	str	r3, [r7, #24]
 8021416:	69bb      	ldr	r3, [r7, #24]
 8021418:	2b02      	cmp	r3, #2
 802141a:	d9d5      	bls.n	80213c8 <stm32f4xxFlashGetSector+0x18>
         }
      }
   }

   return sector;
 802141c:	69fb      	ldr	r3, [r7, #28]
}
 802141e:	4618      	mov	r0, r3
 8021420:	3724      	adds	r7, #36	@ 0x24
 8021422:	46bd      	mov	sp, r7
 8021424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021428:	4770      	bx	lr
 802142a:	bf00      	nop
 802142c:	0802d6d8 	.word	0x0802d6d8

08021430 <imageCheckHeader>:
 * @param[in] header Pointer to the internal image header to be checked
 * @return Status code
 **/

cboot_error_t imageCheckHeader(ImageHeader *header)
{
 8021430:	b580      	push	{r7, lr}
 8021432:	b084      	sub	sp, #16
 8021434:	af00      	add	r7, sp, #0
 8021436:	6078      	str	r0, [r7, #4]
#ifndef SIMULATOR
   error_t error;
   uint32_t computedCrc;

   //Check parameter vailidty
   if(header == NULL)
 8021438:	687b      	ldr	r3, [r7, #4]
 802143a:	2b00      	cmp	r3, #0
 802143c:	d101      	bne.n	8021442 <imageCheckHeader+0x12>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 802143e:	2304      	movs	r3, #4
 8021440:	e028      	b.n	8021494 <imageCheckHeader+0x64>

   //Compute image header crc
   error = CRC32_HASH_ALGO->compute((uint8_t*)header, sizeof(ImageHeader) - CRC32_DIGEST_SIZE, (uint8_t*)&computedCrc);
 8021442:	4b16      	ldr	r3, [pc, #88]	@ (802149c <imageCheckHeader+0x6c>)
 8021444:	6a1b      	ldr	r3, [r3, #32]
 8021446:	f107 0208 	add.w	r2, r7, #8
 802144a:	213c      	movs	r1, #60	@ 0x3c
 802144c:	6878      	ldr	r0, [r7, #4]
 802144e:	4798      	blx	r3
 8021450:	4603      	mov	r3, r0
 8021452:	81fb      	strh	r3, [r7, #14]
   if(error)
 8021454:	89fb      	ldrh	r3, [r7, #14]
 8021456:	2b00      	cmp	r3, #0
 8021458:	d00d      	beq.n	8021476 <imageCheckHeader+0x46>
   {
      //Debug message
      TRACE_ERROR("Failed to compute image header crc!\r\n");
 802145a:	f7ff faa7 	bl	80209ac <osSuspendAllTasks>
 802145e:	4b10      	ldr	r3, [pc, #64]	@ (80214a0 <imageCheckHeader+0x70>)
 8021460:	681b      	ldr	r3, [r3, #0]
 8021462:	68db      	ldr	r3, [r3, #12]
 8021464:	2225      	movs	r2, #37	@ 0x25
 8021466:	2101      	movs	r1, #1
 8021468:	480e      	ldr	r0, [pc, #56]	@ (80214a4 <imageCheckHeader+0x74>)
 802146a:	f00a fa7f 	bl	802b96c <fwrite>
 802146e:	f7ff faa4 	bl	80209ba <osResumeAllTasks>
      return CBOOT_ERROR_FAILURE;
 8021472:	2301      	movs	r3, #1
 8021474:	e00e      	b.n	8021494 <imageCheckHeader+0x64>
   }

   //Check image header integrity
   if(header->headCrc != computedCrc)
 8021476:	687b      	ldr	r3, [r7, #4]
 8021478:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 802147a:	68bb      	ldr	r3, [r7, #8]
 802147c:	429a      	cmp	r2, r3
 802147e:	d001      	beq.n	8021484 <imageCheckHeader+0x54>
      return CBOOT_ERROR_INVALID_IMAGE_HEADER;
 8021480:	2307      	movs	r3, #7
 8021482:	e007      	b.n	8021494 <imageCheckHeader+0x64>

   //Check image header version
   if(header->headVers != IMAGE_HEADER_VERSION)
 8021484:	687b      	ldr	r3, [r7, #4]
 8021486:	681b      	ldr	r3, [r3, #0]
 8021488:	4a07      	ldr	r2, [pc, #28]	@ (80214a8 <imageCheckHeader+0x78>)
 802148a:	4293      	cmp	r3, r2
 802148c:	d001      	beq.n	8021492 <imageCheckHeader+0x62>
      return CBOOT_ERROR_INVALID_IMAGE_HEADER_VERSION;
 802148e:	2308      	movs	r3, #8
 8021490:	e000      	b.n	8021494 <imageCheckHeader+0x64>

   //Successful process
   return CBOOT_NO_ERROR;
 8021492:	2300      	movs	r3, #0
#else
   return CBOOT_NO_ERROR;
#endif
}
 8021494:	4618      	mov	r0, r3
 8021496:	3710      	adds	r7, #16
 8021498:	46bd      	mov	sp, r7
 802149a:	bd80      	pop	{r7, pc}
 802149c:	0802d6a4 	.word	0x0802d6a4
 80214a0:	2000003c 	.word	0x2000003c
 80214a4:	0802c7e4 	.word	0x0802c7e4
 80214a8:	00010100 	.word	0x00010100

080214ac <imageGetHeader>:
 * @param[out] header Pointer to the header structure to be returned
 * @return Status code
 **/

cboot_error_t imageGetHeader(uint8_t *buffer, size_t bufferLen, ImageHeader **header)
{
 80214ac:	b580      	push	{r7, lr}
 80214ae:	b086      	sub	sp, #24
 80214b0:	af00      	add	r7, sp, #0
 80214b2:	60f8      	str	r0, [r7, #12]
 80214b4:	60b9      	str	r1, [r7, #8]
 80214b6:	607a      	str	r2, [r7, #4]
   cboot_error_t cerror;
   ImageHeader *tempHeader;

   //Check parameters validity
   if(buffer == NULL || bufferLen == 0 || header == NULL)
 80214b8:	68fb      	ldr	r3, [r7, #12]
 80214ba:	2b00      	cmp	r3, #0
 80214bc:	d005      	beq.n	80214ca <imageGetHeader+0x1e>
 80214be:	68bb      	ldr	r3, [r7, #8]
 80214c0:	2b00      	cmp	r3, #0
 80214c2:	d002      	beq.n	80214ca <imageGetHeader+0x1e>
 80214c4:	687b      	ldr	r3, [r7, #4]
 80214c6:	2b00      	cmp	r3, #0
 80214c8:	d101      	bne.n	80214ce <imageGetHeader+0x22>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80214ca:	2304      	movs	r3, #4
 80214cc:	e014      	b.n	80214f8 <imageGetHeader+0x4c>

   if(bufferLen < sizeof(ImageHeader))
 80214ce:	68bb      	ldr	r3, [r7, #8]
 80214d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80214d2:	d801      	bhi.n	80214d8 <imageGetHeader+0x2c>
      return CBOOT_ERROR_INVALID_LENGTH;
 80214d4:	2318      	movs	r3, #24
 80214d6:	e00f      	b.n	80214f8 <imageGetHeader+0x4c>

   //Point to the image header
   tempHeader = (ImageHeader *)buffer;
 80214d8:	68fb      	ldr	r3, [r7, #12]
 80214da:	617b      	str	r3, [r7, #20]

   //Check image header
   cerror = imageCheckHeader(tempHeader);
 80214dc:	6978      	ldr	r0, [r7, #20]
 80214de:	f7ff ffa7 	bl	8021430 <imageCheckHeader>
 80214e2:	4603      	mov	r3, r0
 80214e4:	74fb      	strb	r3, [r7, #19]
   //Is any error?
   if(cerror)
 80214e6:	7cfb      	ldrb	r3, [r7, #19]
 80214e8:	2b00      	cmp	r3, #0
 80214ea:	d001      	beq.n	80214f0 <imageGetHeader+0x44>
      return cerror;
 80214ec:	7cfb      	ldrb	r3, [r7, #19]
 80214ee:	e003      	b.n	80214f8 <imageGetHeader+0x4c>

   //Save image header
   *header = tempHeader;
 80214f0:	687b      	ldr	r3, [r7, #4]
 80214f2:	697a      	ldr	r2, [r7, #20]
 80214f4:	601a      	str	r2, [r3, #0]

   //Successful process
   return CBOOT_NO_ERROR;
 80214f6:	2300      	movs	r3, #0
}
 80214f8:	4618      	mov	r0, r3
 80214fa:	3718      	adds	r7, #24
 80214fc:	46bd      	mov	sp, r7
 80214fe:	bd80      	pop	{r7, pc}

08021500 <imageComputeHeaderCrc>:
 * @param[in/out] header Pointer the header on which to calculate the crc.
 * @return Error code
 **/

cboot_error_t imageComputeHeaderCrc(ImageHeader *header)
{
 8021500:	b580      	push	{r7, lr}
 8021502:	b084      	sub	sp, #16
 8021504:	af00      	add	r7, sp, #0
 8021506:	6078      	str	r0, [r7, #4]
    error_t error;

    //Check parameters validity
    if(header == NULL)
 8021508:	687b      	ldr	r3, [r7, #4]
 802150a:	2b00      	cmp	r3, #0
 802150c:	d101      	bne.n	8021512 <imageComputeHeaderCrc+0x12>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 802150e:	2304      	movs	r3, #4
 8021510:	e00e      	b.n	8021530 <imageComputeHeaderCrc+0x30>

    //Compute image header crc
    error = CRC32_HASH_ALGO->compute((uint8_t*)header, sizeof(ImageHeader) - CRC32_DIGEST_SIZE, (uint8_t*)&header->headCrc);
 8021512:	4b09      	ldr	r3, [pc, #36]	@ (8021538 <imageComputeHeaderCrc+0x38>)
 8021514:	6a1b      	ldr	r3, [r3, #32]
 8021516:	687a      	ldr	r2, [r7, #4]
 8021518:	323c      	adds	r2, #60	@ 0x3c
 802151a:	213c      	movs	r1, #60	@ 0x3c
 802151c:	6878      	ldr	r0, [r7, #4]
 802151e:	4798      	blx	r3
 8021520:	4603      	mov	r3, r0
 8021522:	81fb      	strh	r3, [r7, #14]
    //Is any error?
    if(error)
 8021524:	89fb      	ldrh	r3, [r7, #14]
 8021526:	2b00      	cmp	r3, #0
 8021528:	d001      	beq.n	802152e <imageComputeHeaderCrc+0x2e>
        return CBOOT_ERROR_FAILURE;
 802152a:	2301      	movs	r3, #1
 802152c:	e000      	b.n	8021530 <imageComputeHeaderCrc+0x30>

    //Successfull process
    return CBOOT_NO_ERROR;
 802152e:	2300      	movs	r3, #0
}
 8021530:	4618      	mov	r0, r3
 8021532:	3710      	adds	r7, #16
 8021534:	46bd      	mov	sp, r7
 8021536:	bd80      	pop	{r7, pc}
 8021538:	0802d6a4 	.word	0x0802d6a4

0802153c <imageProcessInputImage>:
 * @brief Process parsed image input data.
 * @param[in,out] context Pointer to the ImageProcess context
 * @return Status code
 **/
cboot_error_t imageProcessInputImage(ImageProcessContext *context)
{
 802153c:	b580      	push	{r7, lr}
 802153e:	b084      	sub	sp, #16
 8021540:	af00      	add	r7, sp, #0
 8021542:	6078      	str	r0, [r7, #4]
    cboot_error_t cerror;

    //Check parameters validity
    if(context == NULL)
 8021544:	687b      	ldr	r3, [r7, #4]
 8021546:	2b00      	cmp	r3, #0
 8021548:	d101      	bne.n	802154e <imageProcessInputImage+0x12>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 802154a:	2304      	movs	r3, #4
 802154c:	e031      	b.n	80215b2 <imageProcessInputImage+0x76>

    //Initialize variables
    cerror = CBOOT_NO_ERROR;
 802154e:	2300      	movs	r3, #0
 8021550:	73fb      	strb	r3, [r7, #15]

    // Image Process receiving image header state?
    if (context->inputImage.state == IMAGE_STATE_RECV_APP_HEADER)
 8021552:	687b      	ldr	r3, [r7, #4]
 8021554:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8021558:	2b01      	cmp	r3, #1
 802155a:	d109      	bne.n	8021570 <imageProcessInputImage+0x34>
    {
        // Process image header
        cerror = imageProcessAppHeader(context);
 802155c:	6878      	ldr	r0, [r7, #4]
 802155e:	f000 faca 	bl	8021af6 <imageProcessAppHeader>
 8021562:	4603      	mov	r3, r0
 8021564:	73fb      	strb	r3, [r7, #15]

        // Is any error?
        if (cerror)
 8021566:	7bfb      	ldrb	r3, [r7, #15]
 8021568:	2b00      	cmp	r3, #0
 802156a:	d021      	beq.n	80215b0 <imageProcessInputImage+0x74>
            return cerror;
 802156c:	7bfb      	ldrb	r3, [r7, #15]
 802156e:	e020      	b.n	80215b2 <imageProcessInputImage+0x76>
    }
        // Image Process receiving image data state?
    else if (context->inputImage.state == IMAGE_STATE_RECV_APP_DATA)
 8021570:	687b      	ldr	r3, [r7, #4]
 8021572:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8021576:	2b02      	cmp	r3, #2
 8021578:	d109      	bne.n	802158e <imageProcessInputImage+0x52>
    {
        // Process image data
        cerror = imageProcessAppData(context);
 802157a:	6878      	ldr	r0, [r7, #4]
 802157c:	f000 fb86 	bl	8021c8c <imageProcessAppData>
 8021580:	4603      	mov	r3, r0
 8021582:	73fb      	strb	r3, [r7, #15]
        // Is any error?
        if (cerror)
 8021584:	7bfb      	ldrb	r3, [r7, #15]
 8021586:	2b00      	cmp	r3, #0
 8021588:	d012      	beq.n	80215b0 <imageProcessInputImage+0x74>
            return cerror;
 802158a:	7bfb      	ldrb	r3, [r7, #15]
 802158c:	e011      	b.n	80215b2 <imageProcessInputImage+0x76>
    }
        // Image Process receiving image check data state?
    else if (context->inputImage.state == IMAGE_STATE_RECV_APP_CHECK)
 802158e:	687b      	ldr	r3, [r7, #4]
 8021590:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8021594:	2b03      	cmp	r3, #3
 8021596:	d109      	bne.n	80215ac <imageProcessInputImage+0x70>
    {
        // Process image check data
        cerror = imageProcessAppCheck(context);
 8021598:	6878      	ldr	r0, [r7, #4]
 802159a:	f000 fcb4 	bl	8021f06 <imageProcessAppCheck>
 802159e:	4603      	mov	r3, r0
 80215a0:	73fb      	strb	r3, [r7, #15]
        // Is any error?
        if (cerror)
 80215a2:	7bfb      	ldrb	r3, [r7, #15]
 80215a4:	2b00      	cmp	r3, #0
 80215a6:	d003      	beq.n	80215b0 <imageProcessInputImage+0x74>
            return cerror;
 80215a8:	7bfb      	ldrb	r3, [r7, #15]
 80215aa:	e002      	b.n	80215b2 <imageProcessInputImage+0x76>
    }
    else
    {
        // Wrong state
        cerror = CBOOT_ERROR_INVALID_STATE;
 80215ac:	2316      	movs	r3, #22
 80215ae:	73fb      	strb	r3, [r7, #15]
    }

    // Successful process
    return cerror;
 80215b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80215b2:	4618      	mov	r0, r3
 80215b4:	3710      	adds	r7, #16
 80215b6:	46bd      	mov	sp, r7
 80215b8:	bd80      	pop	{r7, pc}

080215ba <imageProcessOutput>:
 * @param[in] length Length of the output data chunk.
 * @return Status code
 **/

cboot_error_t imageProcessOutput(ImageProcessContext *context, uint8_t *data, size_t length)
{
 80215ba:	b580      	push	{r7, lr}
 80215bc:	b084      	sub	sp, #16
 80215be:	af00      	add	r7, sp, #0
 80215c0:	60f8      	str	r0, [r7, #12]
 80215c2:	60b9      	str	r1, [r7, #8]
 80215c4:	607a      	str	r2, [r7, #4]
    //Check parameters
    if(context == NULL || data == NULL || length == 0)
 80215c6:	68fb      	ldr	r3, [r7, #12]
 80215c8:	2b00      	cmp	r3, #0
 80215ca:	d005      	beq.n	80215d8 <imageProcessOutput+0x1e>
 80215cc:	68bb      	ldr	r3, [r7, #8]
 80215ce:	2b00      	cmp	r3, #0
 80215d0:	d002      	beq.n	80215d8 <imageProcessOutput+0x1e>
 80215d2:	687b      	ldr	r3, [r7, #4]
 80215d4:	2b00      	cmp	r3, #0
 80215d6:	d101      	bne.n	80215dc <imageProcessOutput+0x22>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 80215d8:	2304      	movs	r3, #4
 80215da:	e01a      	b.n	8021612 <imageProcessOutput+0x58>

    //Select process function according outpout slot content type
    if(context->outputImage.activeSlot->cType & SLOT_CONTENT_BINARY)
 80215dc:	68fb      	ldr	r3, [r7, #12]
 80215de:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 80215e2:	785b      	ldrb	r3, [r3, #1]
 80215e4:	f003 0308 	and.w	r3, r3, #8
 80215e8:	2b00      	cmp	r3, #0
 80215ea:	d009      	beq.n	8021600 <imageProcessOutput+0x46>
    {
        return imageProcessOutputBinary(&context->outputImage, data, length);
 80215ec:	68fb      	ldr	r3, [r7, #12]
 80215ee:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80215f2:	687a      	ldr	r2, [r7, #4]
 80215f4:	68b9      	ldr	r1, [r7, #8]
 80215f6:	4618      	mov	r0, r3
 80215f8:	f000 f80f 	bl	802161a <imageProcessOutputBinary>
 80215fc:	4603      	mov	r3, r0
 80215fe:	e008      	b.n	8021612 <imageProcessOutput+0x58>
    }
    else
    {
        return imageProcessOutputImage(&context->outputImage, data, length);
 8021600:	68fb      	ldr	r3, [r7, #12]
 8021602:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8021606:	687a      	ldr	r2, [r7, #4]
 8021608:	68b9      	ldr	r1, [r7, #8]
 802160a:	4618      	mov	r0, r3
 802160c:	f000 f907 	bl	802181e <imageProcessOutputImage>
 8021610:	4603      	mov	r3, r0
    }
}
 8021612:	4618      	mov	r0, r3
 8021614:	3710      	adds	r7, #16
 8021616:	46bd      	mov	sp, r7
 8021618:	bd80      	pop	{r7, pc}

0802161a <imageProcessOutputBinary>:
 * @param[in] length Length of the output data chunk.
 * @return Status code
 **/

cboot_error_t imageProcessOutputBinary(Image *image, uint8_t *data, size_t length)
{
 802161a:	b590      	push	{r4, r7, lr}
 802161c:	b08b      	sub	sp, #44	@ 0x2c
 802161e:	af02      	add	r7, sp, #8
 8021620:	60f8      	str	r0, [r7, #12]
 8021622:	60b9      	str	r1, [r7, #8]
 8021624:	607a      	str	r2, [r7, #4]
    cboot_error_t cerror;
    size_t n;
    size_t written;

    //Check parameters validity
    if(image == NULL || data == NULL || length == 0)
 8021626:	68fb      	ldr	r3, [r7, #12]
 8021628:	2b00      	cmp	r3, #0
 802162a:	d006      	beq.n	802163a <imageProcessOutputBinary+0x20>
 802162c:	68bb      	ldr	r3, [r7, #8]
 802162e:	2b00      	cmp	r3, #0
 8021630:	d003      	beq.n	802163a <imageProcessOutputBinary+0x20>
 8021632:	687b      	ldr	r3, [r7, #4]
 8021634:	2b00      	cmp	r3, #0
 8021636:	f040 80e9 	bne.w	802180c <imageProcessOutputBinary+0x1f2>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 802163a:	2304      	movs	r3, #4
 802163c:	e0eb      	b.n	8021816 <imageProcessOutputBinary+0x1fc>

    //Process incoming data
    while(length > 0)
    {
        //The buffer can hold at most its size
        n = MIN(length, sizeof(image->buffer) - image->bufferLen);
 802163e:	68fb      	ldr	r3, [r7, #12]
 8021640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021644:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8021648:	687a      	ldr	r2, [r7, #4]
 802164a:	4293      	cmp	r3, r2
 802164c:	bf28      	it	cs
 802164e:	4613      	movcs	r3, r2
 8021650:	61fb      	str	r3, [r7, #28]

        //Copy the data to the buffer
        memcpy(image->bufferPos, data, n);
 8021652:	68fb      	ldr	r3, [r7, #12]
 8021654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8021658:	69fa      	ldr	r2, [r7, #28]
 802165a:	68b9      	ldr	r1, [r7, #8]
 802165c:	4618      	mov	r0, r3
 802165e:	f00a fba8 	bl	802bdb2 <memcpy>

        //Advance the data pointer
        data += n;
 8021662:	68ba      	ldr	r2, [r7, #8]
 8021664:	69fb      	ldr	r3, [r7, #28]
 8021666:	4413      	add	r3, r2
 8021668:	60bb      	str	r3, [r7, #8]
        //Remaining bytes to process
        length -= n;
 802166a:	687a      	ldr	r2, [r7, #4]
 802166c:	69fb      	ldr	r3, [r7, #28]
 802166e:	1ad3      	subs	r3, r2, r3
 8021670:	607b      	str	r3, [r7, #4]
        //Update buffer data length
        image->bufferLen += n;
 8021672:	68fb      	ldr	r3, [r7, #12]
 8021674:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8021678:	69fb      	ldr	r3, [r7, #28]
 802167a:	441a      	add	r2, r3
 802167c:	68fb      	ldr	r3, [r7, #12]
 802167e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        //Update buffer data free position
        image->bufferPos += n;
 8021682:	68fb      	ldr	r3, [r7, #12]
 8021684:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8021688:	69fb      	ldr	r3, [r7, #28]
 802168a:	441a      	add	r2, r3
 802168c:	68fb      	ldr	r3, [r7, #12]
 802168e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        //Process output image data block
        if(image->state == IMAGE_STATE_WRITE_APP_INIT)
 8021692:	68fb      	ldr	r3, [r7, #12]
 8021694:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8021698:	2b06      	cmp	r3, #6
 802169a:	d13b      	bne.n	8021714 <imageProcessOutputBinary+0xfa>
        {
            //Set firmware address offset
            image->pos = 0;
 802169c:	68fb      	ldr	r3, [r7, #12]
 802169e:	2200      	movs	r2, #0
 80216a0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

            //Write first output image data block (with the flush flag)
            cerror = memoryWriteSlot(image->activeSlot, image->pos,
 80216a4:	68fb      	ldr	r3, [r7, #12]
 80216a6:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80216aa:	68fb      	ldr	r3, [r7, #12]
 80216ac:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
               image->buffer, image->bufferLen, &written, MEMORY_WRITE_RESET_FLAG);
 80216b0:	68fa      	ldr	r2, [r7, #12]
            cerror = memoryWriteSlot(image->activeSlot, image->pos,
 80216b2:	68fb      	ldr	r3, [r7, #12]
 80216b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80216b8:	2302      	movs	r3, #2
 80216ba:	9301      	str	r3, [sp, #4]
 80216bc:	f107 0314 	add.w	r3, r7, #20
 80216c0:	9300      	str	r3, [sp, #0]
 80216c2:	4623      	mov	r3, r4
 80216c4:	f000 fd88 	bl	80221d8 <memoryWriteSlot>
 80216c8:	4603      	mov	r3, r0
 80216ca:	76fb      	strb	r3, [r7, #27]
            //Is any error?
            if(cerror) {
 80216cc:	7efb      	ldrb	r3, [r7, #27]
 80216ce:	2b00      	cmp	r3, #0
 80216d0:	d001      	beq.n	80216d6 <imageProcessOutputBinary+0xbc>
                //cerror = ERROR_FAILURE;
                return cerror;
 80216d2:	7efb      	ldrb	r3, [r7, #27]
 80216d4:	e09f      	b.n	8021816 <imageProcessOutputBinary+0x1fc>
            }

            //Update firmware write address position
            image->pos += written;
 80216d6:	68fb      	ldr	r3, [r7, #12]
 80216d8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80216dc:	697b      	ldr	r3, [r7, #20]
 80216de:	441a      	add	r2, r3
 80216e0:	68fb      	ldr	r3, [r7, #12]
 80216e2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            //Update output image data written bytes number
            image->written += image->bufferLen;
 80216e6:	68fb      	ldr	r3, [r7, #12]
 80216e8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80216ec:	68fb      	ldr	r3, [r7, #12]
 80216ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80216f2:	441a      	add	r2, r3
 80216f4:	68fb      	ldr	r3, [r7, #12]
 80216f6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

            //Update buffer data length
            image->bufferLen = 0;
 80216fa:	68fb      	ldr	r3, [r7, #12]
 80216fc:	2200      	movs	r2, #0
 80216fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            //Move remaining buffer data at the beginning of data
            image->bufferPos = image->buffer;
 8021702:	68fa      	ldr	r2, [r7, #12]
 8021704:	68fb      	ldr	r3, [r7, #12]
 8021706:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            //Debug message
            TRACE_DEBUG("output written bytes :0x%X/0x%X\r\n", image->written, image->firmwareLength);

            //Change state
            imageChangeState(image, IMAGE_STATE_WRITE_APP_DATA);
 802170a:	2108      	movs	r1, #8
 802170c:	68f8      	ldr	r0, [r7, #12]
 802170e:	f000 fcc2 	bl	8022096 <imageChangeState>
 8021712:	e07b      	b.n	802180c <imageProcessOutputBinary+0x1f2>
        }
        else if(image->state == IMAGE_STATE_WRITE_APP_DATA)
 8021714:	68fb      	ldr	r3, [r7, #12]
 8021716:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 802171a:	2b08      	cmp	r3, #8
 802171c:	d176      	bne.n	802180c <imageProcessOutputBinary+0x1f2>
        {
            if(image->written + image->bufferLen == image->firmwareLength)
 802171e:	68fb      	ldr	r3, [r7, #12]
 8021720:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8021724:	68fb      	ldr	r3, [r7, #12]
 8021726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802172a:	441a      	add	r2, r3
 802172c:	68fb      	ldr	r3, [r7, #12]
 802172e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021732:	429a      	cmp	r2, r3
 8021734:	d137      	bne.n	80217a6 <imageProcessOutputBinary+0x18c>
            {
                //Write output image data block
                cerror = memoryWriteSlot(image->activeSlot, image->pos,
 8021736:	68fb      	ldr	r3, [r7, #12]
 8021738:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 802173c:	68fb      	ldr	r3, [r7, #12]
 802173e:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
                   image->buffer, image->bufferLen, &written, MEMORY_WRITE_FORCE_FLAG);
 8021742:	68fa      	ldr	r2, [r7, #12]
                cerror = memoryWriteSlot(image->activeSlot, image->pos,
 8021744:	68fb      	ldr	r3, [r7, #12]
 8021746:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 802174a:	2301      	movs	r3, #1
 802174c:	9301      	str	r3, [sp, #4]
 802174e:	f107 0314 	add.w	r3, r7, #20
 8021752:	9300      	str	r3, [sp, #0]
 8021754:	4623      	mov	r3, r4
 8021756:	f000 fd3f 	bl	80221d8 <memoryWriteSlot>
 802175a:	4603      	mov	r3, r0
 802175c:	76fb      	strb	r3, [r7, #27]
                //Is any error?
                if(cerror) {
 802175e:	7efb      	ldrb	r3, [r7, #27]
 8021760:	2b00      	cmp	r3, #0
 8021762:	d001      	beq.n	8021768 <imageProcessOutputBinary+0x14e>
                    //cerror = ERROR_FAILURE;
                    return cerror;
 8021764:	7efb      	ldrb	r3, [r7, #27]
 8021766:	e056      	b.n	8021816 <imageProcessOutputBinary+0x1fc>
                }

                //Update firmware write address position
                image->pos += written;
 8021768:	68fb      	ldr	r3, [r7, #12]
 802176a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 802176e:	697b      	ldr	r3, [r7, #20]
 8021770:	441a      	add	r2, r3
 8021772:	68fb      	ldr	r3, [r7, #12]
 8021774:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
                //Update output image data written bytes number
                image->written += image->bufferLen;
 8021778:	68fb      	ldr	r3, [r7, #12]
 802177a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 802177e:	68fb      	ldr	r3, [r7, #12]
 8021780:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021784:	441a      	add	r2, r3
 8021786:	68fb      	ldr	r3, [r7, #12]
 8021788:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                //Update buffer data length
                image->bufferLen = 0;
 802178c:	68fb      	ldr	r3, [r7, #12]
 802178e:	2200      	movs	r2, #0
 8021790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                //Reset buffer data free position
                image->bufferPos = image->buffer;
 8021794:	68fa      	ldr	r2, [r7, #12]
 8021796:	68fb      	ldr	r3, [r7, #12]
 8021798:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

                //Change state
                imageChangeState(image, IMAGE_STATE_WRITE_APP_END);
 802179c:	210a      	movs	r1, #10
 802179e:	68f8      	ldr	r0, [r7, #12]
 80217a0:	f000 fc79 	bl	8022096 <imageChangeState>
 80217a4:	e032      	b.n	802180c <imageProcessOutputBinary+0x1f2>
            }
            else
            {
                //Write output image data block
                cerror = memoryWriteSlot(image->activeSlot, image->pos, image->buffer,
 80217a6:	68fb      	ldr	r3, [r7, #12]
 80217a8:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80217ac:	68fb      	ldr	r3, [r7, #12]
 80217ae:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80217b2:	68fa      	ldr	r2, [r7, #12]
 80217b4:	68fb      	ldr	r3, [r7, #12]
 80217b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80217ba:	2300      	movs	r3, #0
 80217bc:	9301      	str	r3, [sp, #4]
 80217be:	f107 0314 	add.w	r3, r7, #20
 80217c2:	9300      	str	r3, [sp, #0]
 80217c4:	4623      	mov	r3, r4
 80217c6:	f000 fd07 	bl	80221d8 <memoryWriteSlot>
 80217ca:	4603      	mov	r3, r0
 80217cc:	76fb      	strb	r3, [r7, #27]
                   image->bufferLen, &written, MEMORY_WRITE_DEFAULT_FLAG);
                //Is any error?
                if(cerror) {
 80217ce:	7efb      	ldrb	r3, [r7, #27]
 80217d0:	2b00      	cmp	r3, #0
 80217d2:	d001      	beq.n	80217d8 <imageProcessOutputBinary+0x1be>
                    //cerror = ERROR_FAILURE;
                    return cerror;
 80217d4:	7efb      	ldrb	r3, [r7, #27]
 80217d6:	e01e      	b.n	8021816 <imageProcessOutputBinary+0x1fc>
                }

                //Update firmware write address position
                image->pos += written;
 80217d8:	68fb      	ldr	r3, [r7, #12]
 80217da:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80217de:	697b      	ldr	r3, [r7, #20]
 80217e0:	441a      	add	r2, r3
 80217e2:	68fb      	ldr	r3, [r7, #12]
 80217e4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
                //Update output image data written bytes number
                image->written += image->bufferLen;
 80217e8:	68fb      	ldr	r3, [r7, #12]
 80217ea:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80217ee:	68fb      	ldr	r3, [r7, #12]
 80217f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80217f4:	441a      	add	r2, r3
 80217f6:	68fb      	ldr	r3, [r7, #12]
 80217f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                //Update buffer data length
                image->bufferLen = 0;
 80217fc:	68fb      	ldr	r3, [r7, #12]
 80217fe:	2200      	movs	r2, #0
 8021800:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                //Move remaining buffer data at the beginning of data
                image->bufferPos = image->buffer;
 8021804:	68fa      	ldr	r2, [r7, #12]
 8021806:	68fb      	ldr	r3, [r7, #12]
 8021808:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    while(length > 0)
 802180c:	687b      	ldr	r3, [r7, #4]
 802180e:	2b00      	cmp	r3, #0
 8021810:	f47f af15 	bne.w	802163e <imageProcessOutputBinary+0x24>
            //For sanity
        }
    }

    //Successful processing
    return CBOOT_NO_ERROR;
 8021814:	2300      	movs	r3, #0
}
 8021816:	4618      	mov	r0, r3
 8021818:	3724      	adds	r7, #36	@ 0x24
 802181a:	46bd      	mov	sp, r7
 802181c:	bd90      	pop	{r4, r7, pc}

0802181e <imageProcessOutputImage>:
 * @param[in] length Length of the output data chunk.
 * @return Status code
 **/

cboot_error_t imageProcessOutputImage(Image *image, uint8_t *data, size_t length)
{
 802181e:	b590      	push	{r4, r7, lr}
 8021820:	b08b      	sub	sp, #44	@ 0x2c
 8021822:	af02      	add	r7, sp, #8
 8021824:	60f8      	str	r0, [r7, #12]
 8021826:	60b9      	str	r1, [r7, #8]
 8021828:	607a      	str	r2, [r7, #4]
#if ((CIPHER_SUPPORT == ENABLED) && (IMAGE_OUTPUT_ENCRYPTED == ENABLED))
    uint8_t cipherBuff[MAX_CIPHER_BLOCK_SIZE];
#endif

    //Check parameters validity
    if(image == NULL || data == NULL || length == 0)
 802182a:	68fb      	ldr	r3, [r7, #12]
 802182c:	2b00      	cmp	r3, #0
 802182e:	d006      	beq.n	802183e <imageProcessOutputImage+0x20>
 8021830:	68bb      	ldr	r3, [r7, #8]
 8021832:	2b00      	cmp	r3, #0
 8021834:	d003      	beq.n	802183e <imageProcessOutputImage+0x20>
 8021836:	687b      	ldr	r3, [r7, #4]
 8021838:	2b00      	cmp	r3, #0
 802183a:	f040 8153 	bne.w	8021ae4 <imageProcessOutputImage+0x2c6>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 802183e:	2304      	movs	r3, #4
 8021840:	e155      	b.n	8021aee <imageProcessOutputImage+0x2d0>

    //Process the incoming data
    while(length > 0)
    {
        //The buffer can hold at most it size
        n = MIN(length, sizeof(image->buffer) - image->bufferLen);
 8021842:	68fb      	ldr	r3, [r7, #12]
 8021844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021848:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 802184c:	687a      	ldr	r2, [r7, #4]
 802184e:	4293      	cmp	r3, r2
 8021850:	bf28      	it	cs
 8021852:	4613      	movcs	r3, r2
 8021854:	61fb      	str	r3, [r7, #28]

        //Copy the data to the buffer
        memcpy(image->bufferPos, data, n);
 8021856:	68fb      	ldr	r3, [r7, #12]
 8021858:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 802185c:	69fa      	ldr	r2, [r7, #28]
 802185e:	68b9      	ldr	r1, [r7, #8]
 8021860:	4618      	mov	r0, r3
 8021862:	f00a faa6 	bl	802bdb2 <memcpy>

        //Advance the data pointer
        data += n;
 8021866:	68ba      	ldr	r2, [r7, #8]
 8021868:	69fb      	ldr	r3, [r7, #28]
 802186a:	4413      	add	r3, r2
 802186c:	60bb      	str	r3, [r7, #8]
        //Remaining bytes to process
        length -= n;
 802186e:	687a      	ldr	r2, [r7, #4]
 8021870:	69fb      	ldr	r3, [r7, #28]
 8021872:	1ad3      	subs	r3, r2, r3
 8021874:	607b      	str	r3, [r7, #4]
        //Update buffer data length
        image->bufferLen += n;
 8021876:	68fb      	ldr	r3, [r7, #12]
 8021878:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 802187c:	69fb      	ldr	r3, [r7, #28]
 802187e:	441a      	add	r2, r3
 8021880:	68fb      	ldr	r3, [r7, #12]
 8021882:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        //Update buffer data free position
        image->bufferPos += n;
 8021886:	68fb      	ldr	r3, [r7, #12]
 8021888:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 802188c:	69fb      	ldr	r3, [r7, #28]
 802188e:	441a      	add	r2, r3
 8021890:	68fb      	ldr	r3, [r7, #12]
 8021892:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        //Format new Header
        if(image->state == IMAGE_STATE_WRITE_APP_HEADER)
 8021896:	68fb      	ldr	r3, [r7, #12]
 8021898:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 802189c:	2b07      	cmp	r3, #7
 802189e:	d158      	bne.n	8021952 <imageProcessOutputImage+0x134>
        {
            //Point to image header
            imgHeader = (ImageHeader*)image->buffer;
 80218a0:	68fb      	ldr	r3, [r7, #12]
 80218a2:	617b      	str	r3, [r7, #20]

            //Set new header image index
            imgHeader->imgIndex = image->newImageIdx;
 80218a4:	68fb      	ldr	r3, [r7, #12]
 80218a6:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 80218aa:	461a      	mov	r2, r3
 80218ac:	697b      	ldr	r3, [r7, #20]
 80218ae:	605a      	str	r2, [r3, #4]

            //Save original image data size
            image->firmwareLength = imgHeader->dataSize;
 80218b0:	697b      	ldr	r3, [r7, #20]
 80218b2:	f8d3 200d 	ldr.w	r2, [r3, #13]
 80218b6:	68fb      	ldr	r3, [r7, #12]
 80218b8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            //Make sure header image data size is a multiple of encryption algo block size
            if(imgHeader->dataSize % image->cipherEngine.ivLen != 0)
                imgHeader->dataSize += image->cipherEngine.ivLen - (imgHeader->dataSize % image->cipherEngine.ivLen);
#endif
            //Compute new image header crc
            cerror = imageComputeHeaderCrc(imgHeader);
 80218bc:	6978      	ldr	r0, [r7, #20]
 80218be:	f7ff fe1f 	bl	8021500 <imageComputeHeaderCrc>
 80218c2:	4603      	mov	r3, r0
 80218c4:	76fb      	strb	r3, [r7, #27]
            //Is any error?
            if(cerror)
 80218c6:	7efb      	ldrb	r3, [r7, #27]
 80218c8:	2b00      	cmp	r3, #0
 80218ca:	d001      	beq.n	80218d0 <imageProcessOutputImage+0xb2>
                return cerror;
 80218cc:	7efb      	ldrb	r3, [r7, #27]
 80218ce:	e10e      	b.n	8021aee <imageProcessOutputImage+0x2d0>

            //Update application check computation tag (could be integrity tag or
            //authentication tag or hash signature tag)
            cerror = verifyProcess(&image->verifyContext, (uint8_t*)&imgHeader->headCrc, CRC32_DIGEST_SIZE);
 80218d0:	68fb      	ldr	r3, [r7, #12]
 80218d2:	f503 702e 	add.w	r0, r3, #696	@ 0x2b8
 80218d6:	697b      	ldr	r3, [r7, #20]
 80218d8:	333c      	adds	r3, #60	@ 0x3c
 80218da:	2204      	movs	r2, #4
 80218dc:	4619      	mov	r1, r3
 80218de:	f000 fffd 	bl	80228dc <verifyProcess>
 80218e2:	4603      	mov	r3, r0
 80218e4:	76fb      	strb	r3, [r7, #27]
            //Is any error?
            if(cerror)
 80218e6:	7efb      	ldrb	r3, [r7, #27]
 80218e8:	2b00      	cmp	r3, #0
 80218ea:	d001      	beq.n	80218f0 <imageProcessOutputImage+0xd2>
                return cerror;
 80218ec:	7efb      	ldrb	r3, [r7, #27]
 80218ee:	e0fe      	b.n	8021aee <imageProcessOutputImage+0x2d0>

            //Write new image header (with flush)
            cerror = memoryWriteSlot(image->activeSlot, image->pos, (uint8_t*)imgHeader,
 80218f0:	68fb      	ldr	r3, [r7, #12]
 80218f2:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80218f6:	68fb      	ldr	r3, [r7, #12]
 80218f8:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80218fc:	2302      	movs	r3, #2
 80218fe:	9301      	str	r3, [sp, #4]
 8021900:	f107 0310 	add.w	r3, r7, #16
 8021904:	9300      	str	r3, [sp, #0]
 8021906:	2340      	movs	r3, #64	@ 0x40
 8021908:	697a      	ldr	r2, [r7, #20]
 802190a:	f000 fc65 	bl	80221d8 <memoryWriteSlot>
 802190e:	4603      	mov	r3, r0
 8021910:	76fb      	strb	r3, [r7, #27]
               sizeof(ImageHeader), &written, MEMORY_WRITE_RESET_FLAG);
            if(cerror)
 8021912:	7efb      	ldrb	r3, [r7, #27]
 8021914:	2b00      	cmp	r3, #0
 8021916:	d001      	beq.n	802191c <imageProcessOutputImage+0xfe>
                return cerror;
 8021918:	7efb      	ldrb	r3, [r7, #27]
 802191a:	e0e8      	b.n	8021aee <imageProcessOutputImage+0x2d0>

            //Update firmware write position
            image->pos += written;
 802191c:	68fb      	ldr	r3, [r7, #12]
 802191e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8021922:	693b      	ldr	r3, [r7, #16]
 8021924:	441a      	add	r2, r3
 8021926:	68fb      	ldr	r3, [r7, #12]
 8021928:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            //Update firmware write position
            image->pos += written;
#endif

            //Reset buffer position
            image->bufferPos = image->buffer;
 802192c:	68fa      	ldr	r2, [r7, #12]
 802192e:	68fb      	ldr	r3, [r7, #12]
 8021930:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            //Reset buffer data
            memset(image->buffer, 0x00, sizeof(image->buffer));
 8021934:	68fb      	ldr	r3, [r7, #12]
 8021936:	2280      	movs	r2, #128	@ 0x80
 8021938:	2100      	movs	r1, #0
 802193a:	4618      	mov	r0, r3
 802193c:	f00a f97c 	bl	802bc38 <memset>
            //Reset buffer data length
            image->bufferLen = 0;
 8021940:	68fb      	ldr	r3, [r7, #12]
 8021942:	2200      	movs	r2, #0
 8021944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            //Change state
            imageChangeState(image, IMAGE_STATE_WRITE_APP_DATA);
 8021948:	2108      	movs	r1, #8
 802194a:	68f8      	ldr	r0, [r7, #12]
 802194c:	f000 fba3 	bl	8022096 <imageChangeState>
 8021950:	e0c8      	b.n	8021ae4 <imageProcessOutputImage+0x2c6>
        }
        //Format image app
        else if(image->state == IMAGE_STATE_WRITE_APP_DATA)
 8021952:	68fb      	ldr	r3, [r7, #12]
 8021954:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8021958:	2b08      	cmp	r3, #8
 802195a:	f040 80c3 	bne.w	8021ae4 <imageProcessOutputImage+0x2c6>
        {
            //Reached the end of image firmware binary section?
            if(image->written + image->bufferLen == image->firmwareLength)
 802195e:	68fb      	ldr	r3, [r7, #12]
 8021960:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8021964:	68fb      	ldr	r3, [r7, #12]
 8021966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802196a:	441a      	add	r2, r3
 802196c:	68fb      	ldr	r3, [r7, #12]
 802196e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021972:	429a      	cmp	r2, r3
 8021974:	d16c      	bne.n	8021a50 <imageProcessOutputImage+0x232>

                //Update firmware write position
                image->pos += written;
#else
                //Update image check data computation tag (crc tag)
                cerror = verifyProcess(&image->verifyContext, image->buffer, image->bufferLen);
 8021976:	68fb      	ldr	r3, [r7, #12]
 8021978:	f503 702e 	add.w	r0, r3, #696	@ 0x2b8
 802197c:	68f9      	ldr	r1, [r7, #12]
 802197e:	68fb      	ldr	r3, [r7, #12]
 8021980:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021984:	461a      	mov	r2, r3
 8021986:	f000 ffa9 	bl	80228dc <verifyProcess>
 802198a:	4603      	mov	r3, r0
 802198c:	76fb      	strb	r3, [r7, #27]
                if(cerror)
 802198e:	7efb      	ldrb	r3, [r7, #27]
 8021990:	2b00      	cmp	r3, #0
 8021992:	d001      	beq.n	8021998 <imageProcessOutputImage+0x17a>
                    return cerror;
 8021994:	7efb      	ldrb	r3, [r7, #27]
 8021996:	e0aa      	b.n	8021aee <imageProcessOutputImage+0x2d0>

                //Write image data block into memory
                cerror = memoryWriteSlot(image->activeSlot, image->pos, image->buffer,
 8021998:	68fb      	ldr	r3, [r7, #12]
 802199a:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 802199e:	68fb      	ldr	r3, [r7, #12]
 80219a0:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80219a4:	68fa      	ldr	r2, [r7, #12]
 80219a6:	68fb      	ldr	r3, [r7, #12]
 80219a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80219ac:	2300      	movs	r3, #0
 80219ae:	9301      	str	r3, [sp, #4]
 80219b0:	f107 0310 	add.w	r3, r7, #16
 80219b4:	9300      	str	r3, [sp, #0]
 80219b6:	4623      	mov	r3, r4
 80219b8:	f000 fc0e 	bl	80221d8 <memoryWriteSlot>
 80219bc:	4603      	mov	r3, r0
 80219be:	76fb      	strb	r3, [r7, #27]
                   image->bufferLen, &written, MEMORY_WRITE_DEFAULT_FLAG);
                if(cerror)
 80219c0:	7efb      	ldrb	r3, [r7, #27]
 80219c2:	2b00      	cmp	r3, #0
 80219c4:	d001      	beq.n	80219ca <imageProcessOutputImage+0x1ac>
                    return cerror;
 80219c6:	7efb      	ldrb	r3, [r7, #27]
 80219c8:	e091      	b.n	8021aee <imageProcessOutputImage+0x2d0>

                //Update firmware write position
                image->pos += written;
 80219ca:	68fb      	ldr	r3, [r7, #12]
 80219cc:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80219d0:	693b      	ldr	r3, [r7, #16]
 80219d2:	441a      	add	r2, r3
 80219d4:	68fb      	ldr	r3, [r7, #12]
 80219d6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif

                //Update written data
                image->written += n;
 80219da:	68fb      	ldr	r3, [r7, #12]
 80219dc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80219e0:	69fb      	ldr	r3, [r7, #28]
 80219e2:	441a      	add	r2, r3
 80219e4:	68fb      	ldr	r3, [r7, #12]
 80219e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                //Finalize image check data computation tag (crc tag)
                cerror = verifyGenerateCheckData(&image->verifyContext, image->buffer,
 80219ea:	68fb      	ldr	r3, [r7, #12]
 80219ec:	f503 702e 	add.w	r0, r3, #696	@ 0x2b8
 80219f0:	68f9      	ldr	r1, [r7, #12]
 80219f2:	68fb      	ldr	r3, [r7, #12]
 80219f4:	f8d3 23e4 	ldr.w	r2, [r3, #996]	@ 0x3e4
 80219f8:	68fb      	ldr	r3, [r7, #12]
 80219fa:	3384      	adds	r3, #132	@ 0x84
 80219fc:	f001 f854 	bl	8022aa8 <verifyGenerateCheckData>
 8021a00:	4603      	mov	r3, r0
 8021a02:	76fb      	strb	r3, [r7, #27]
                image->verifyContext.imageCheckDigestSize, &image->bufferLen);

                //Write new image check data tag (crc tag)
                cerror = memoryWriteSlot(image->activeSlot, image->pos, image->buffer,
 8021a04:	68fb      	ldr	r3, [r7, #12]
 8021a06:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8021a0a:	68fb      	ldr	r3, [r7, #12]
 8021a0c:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8021a10:	68fa      	ldr	r2, [r7, #12]
 8021a12:	68fb      	ldr	r3, [r7, #12]
 8021a14:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8021a18:	2301      	movs	r3, #1
 8021a1a:	9301      	str	r3, [sp, #4]
 8021a1c:	f107 0310 	add.w	r3, r7, #16
 8021a20:	9300      	str	r3, [sp, #0]
 8021a22:	4623      	mov	r3, r4
 8021a24:	f000 fbd8 	bl	80221d8 <memoryWriteSlot>
 8021a28:	4603      	mov	r3, r0
 8021a2a:	76fb      	strb	r3, [r7, #27]
                   image->bufferLen, &written, MEMORY_WRITE_FORCE_FLAG);
                if(cerror)
 8021a2c:	7efb      	ldrb	r3, [r7, #27]
 8021a2e:	2b00      	cmp	r3, #0
 8021a30:	d001      	beq.n	8021a36 <imageProcessOutputImage+0x218>
                    return cerror;
 8021a32:	7efb      	ldrb	r3, [r7, #27]
 8021a34:	e05b      	b.n	8021aee <imageProcessOutputImage+0x2d0>

                //Update firmware write position
                image->pos += written;
 8021a36:	68fb      	ldr	r3, [r7, #12]
 8021a38:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8021a3c:	693b      	ldr	r3, [r7, #16]
 8021a3e:	441a      	add	r2, r3
 8021a40:	68fb      	ldr	r3, [r7, #12]
 8021a42:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

                //Change state
                imageChangeState(image, IMAGE_STATE_WRITE_APP_END);
 8021a46:	210a      	movs	r1, #10
 8021a48:	68f8      	ldr	r0, [r7, #12]
 8021a4a:	f000 fb24 	bl	8022096 <imageChangeState>
 8021a4e:	e049      	b.n	8021ae4 <imageProcessOutputImage+0x2c6>
                memcpy(image->buffer, image->bufferPos, image->bufferLen);
                //Reset buffer position
                image->bufferPos = image->buffer + image->bufferLen;
#else
                //Update image check data computation tag (crc tag)
                cerror = verifyProcess(&image->verifyContext, image->buffer, image->bufferLen);
 8021a50:	68fb      	ldr	r3, [r7, #12]
 8021a52:	f503 702e 	add.w	r0, r3, #696	@ 0x2b8
 8021a56:	68f9      	ldr	r1, [r7, #12]
 8021a58:	68fb      	ldr	r3, [r7, #12]
 8021a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021a5e:	461a      	mov	r2, r3
 8021a60:	f000 ff3c 	bl	80228dc <verifyProcess>
 8021a64:	4603      	mov	r3, r0
 8021a66:	76fb      	strb	r3, [r7, #27]
                if(cerror)
 8021a68:	7efb      	ldrb	r3, [r7, #27]
 8021a6a:	2b00      	cmp	r3, #0
 8021a6c:	d001      	beq.n	8021a72 <imageProcessOutputImage+0x254>
                    return cerror;
 8021a6e:	7efb      	ldrb	r3, [r7, #27]
 8021a70:	e03d      	b.n	8021aee <imageProcessOutputImage+0x2d0>

                //Write encrypted image data into memory
                cerror = memoryWriteSlot(image->activeSlot, image->pos, image->buffer,
 8021a72:	68fb      	ldr	r3, [r7, #12]
 8021a74:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8021a78:	68fb      	ldr	r3, [r7, #12]
 8021a7a:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8021a7e:	68fa      	ldr	r2, [r7, #12]
 8021a80:	68fb      	ldr	r3, [r7, #12]
 8021a82:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8021a86:	2300      	movs	r3, #0
 8021a88:	9301      	str	r3, [sp, #4]
 8021a8a:	f107 0310 	add.w	r3, r7, #16
 8021a8e:	9300      	str	r3, [sp, #0]
 8021a90:	4623      	mov	r3, r4
 8021a92:	f000 fba1 	bl	80221d8 <memoryWriteSlot>
 8021a96:	4603      	mov	r3, r0
 8021a98:	76fb      	strb	r3, [r7, #27]
                   image->bufferLen, &written, MEMORY_WRITE_DEFAULT_FLAG);
                if(cerror)
 8021a9a:	7efb      	ldrb	r3, [r7, #27]
 8021a9c:	2b00      	cmp	r3, #0
 8021a9e:	d001      	beq.n	8021aa4 <imageProcessOutputImage+0x286>
                    return cerror;
 8021aa0:	7efb      	ldrb	r3, [r7, #27]
 8021aa2:	e024      	b.n	8021aee <imageProcessOutputImage+0x2d0>

                //Update firmware write position
                image->pos += written;
 8021aa4:	68fb      	ldr	r3, [r7, #12]
 8021aa6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8021aaa:	693b      	ldr	r3, [r7, #16]
 8021aac:	441a      	add	r2, r3
 8021aae:	68fb      	ldr	r3, [r7, #12]
 8021ab0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

                //Update context buffer length
                image->written += image->bufferLen;
 8021ab4:	68fb      	ldr	r3, [r7, #12]
 8021ab6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8021aba:	68fb      	ldr	r3, [r7, #12]
 8021abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021ac0:	441a      	add	r2, r3
 8021ac2:	68fb      	ldr	r3, [r7, #12]
 8021ac4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                //Update buffer data length
                image->bufferLen = 0;
 8021ac8:	68fb      	ldr	r3, [r7, #12]
 8021aca:	2200      	movs	r2, #0
 8021acc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                //Reset buffer position
                image->bufferPos = image->buffer;
 8021ad0:	68fa      	ldr	r2, [r7, #12]
 8021ad2:	68fb      	ldr	r3, [r7, #12]
 8021ad4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                //Reset buffer
                memset(image->buffer, 0, sizeof(image->buffer));
 8021ad8:	68fb      	ldr	r3, [r7, #12]
 8021ada:	2280      	movs	r2, #128	@ 0x80
 8021adc:	2100      	movs	r1, #0
 8021ade:	4618      	mov	r0, r3
 8021ae0:	f00a f8aa 	bl	802bc38 <memset>
    while(length > 0)
 8021ae4:	687b      	ldr	r3, [r7, #4]
 8021ae6:	2b00      	cmp	r3, #0
 8021ae8:	f47f aeab 	bne.w	8021842 <imageProcessOutputImage+0x24>
            //For sanity
        }
    }

    //Successful process
    return CBOOT_NO_ERROR;
 8021aec:	2300      	movs	r3, #0
}
 8021aee:	4618      	mov	r0, r3
 8021af0:	3724      	adds	r7, #36	@ 0x24
 8021af2:	46bd      	mov	sp, r7
 8021af4:	bd90      	pop	{r4, r7, pc}

08021af6 <imageProcessAppHeader>:
 * @param[in,out] context Pointer to the ImageProcess context
 * @return Error code.
 **/

cboot_error_t imageProcessAppHeader(ImageProcessContext *context)
{
 8021af6:	b580      	push	{r7, lr}
 8021af8:	b088      	sub	sp, #32
 8021afa:	af00      	add	r7, sp, #0
 8021afc:	6078      	str	r0, [r7, #4]
    Image *imageIn;
    size_t n;
    size_t outputSize;

    //Check parameter validity
    if (context == NULL)
 8021afe:	687b      	ldr	r3, [r7, #4]
 8021b00:	2b00      	cmp	r3, #0
 8021b02:	d101      	bne.n	8021b08 <imageProcessAppHeader+0x12>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 8021b04:	2304      	movs	r3, #4
 8021b06:	e0bd      	b.n	8021c84 <imageProcessAppHeader+0x18e>

    //Point to output image context
    imageIn = &context->inputImage;
 8021b08:	687b      	ldr	r3, [r7, #4]
 8021b0a:	61fb      	str	r3, [r7, #28]
    imageOut = &context->outputImage;
 8021b0c:	687b      	ldr	r3, [r7, #4]
 8021b0e:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8021b12:	61bb      	str	r3, [r7, #24]

    //Check current input image process state
    if(imageIn->state != IMAGE_STATE_RECV_APP_HEADER)
 8021b14:	69fb      	ldr	r3, [r7, #28]
 8021b16:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8021b1a:	2b01      	cmp	r3, #1
 8021b1c:	d001      	beq.n	8021b22 <imageProcessAppHeader+0x2c>
        return CBOOT_ERROR_INVALID_STATE;
 8021b1e:	2316      	movs	r3, #22
 8021b20:	e0b0      	b.n	8021c84 <imageProcessAppHeader+0x18e>

    //Initialize variable
    n = 0;
 8021b22:	2300      	movs	r3, #0
 8021b24:	617b      	str	r3, [r7, #20]
    imgHeader = NULL;
 8021b26:	2300      	movs	r3, #0
 8021b28:	60bb      	str	r3, [r7, #8]
    outputSize = 0;
 8021b2a:	2300      	movs	r3, #0
 8021b2c:	613b      	str	r3, [r7, #16]

    //Is buffer full enough to contain an image header?
    if (imageIn->bufferLen >= sizeof(ImageHeader))
 8021b2e:	69fb      	ldr	r3, [r7, #28]
 8021b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021b34:	2b3f      	cmp	r3, #63	@ 0x3f
 8021b36:	f240 80a4 	bls.w	8021c82 <imageProcessAppHeader+0x18c>
    {
        //Debug message
        TRACE_DEBUG("Processing firmware image header...\r\n");

        //Get input image header
        cerror = imageGetHeader(imageIn->buffer, imageIn->bufferLen, &imgHeader);
 8021b3a:	69f8      	ldr	r0, [r7, #28]
 8021b3c:	69fb      	ldr	r3, [r7, #28]
 8021b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021b42:	f107 0208 	add.w	r2, r7, #8
 8021b46:	4619      	mov	r1, r3
 8021b48:	f7ff fcb0 	bl	80214ac <imageGetHeader>
 8021b4c:	4603      	mov	r3, r0
 8021b4e:	73fb      	strb	r3, [r7, #15]
        //Is any error?
        if(cerror)
 8021b50:	7bfb      	ldrb	r3, [r7, #15]
 8021b52:	2b00      	cmp	r3, #0
 8021b54:	d001      	beq.n	8021b5a <imageProcessAppHeader+0x64>
        {
            //Debug message
            TRACE_INFO("Input image header is invalid!\r\n");
            //Forward error
            return cerror;
 8021b56:	7bfb      	ldrb	r3, [r7, #15]
 8021b58:	e094      	b.n	8021c84 <imageProcessAppHeader+0x18e>
        }

        //Check anti-rollback callback
        if(context->imgAntiRollbackCallback != NULL)
 8021b5a:	687b      	ldr	r3, [r7, #4]
 8021b5c:	f8d3 3bec 	ldr.w	r3, [r3, #3052]	@ 0xbec
 8021b60:	2b00      	cmp	r3, #0
 8021b62:	d00f      	beq.n	8021b84 <imageProcessAppHeader+0x8e>
        {
            //Decide whether to perform the update or not in regards of the
            //  firmware application version inside the update image.
            if(!context->imgAntiRollbackCallback(context->currentAppVersion, imgHeader->dataVers))
 8021b64:	687b      	ldr	r3, [r7, #4]
 8021b66:	f8d3 3bec 	ldr.w	r3, [r3, #3052]	@ 0xbec
 8021b6a:	687a      	ldr	r2, [r7, #4]
 8021b6c:	f8d2 0be8 	ldr.w	r0, [r2, #3048]	@ 0xbe8
 8021b70:	68ba      	ldr	r2, [r7, #8]
 8021b72:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8021b76:	4611      	mov	r1, r2
 8021b78:	4798      	blx	r3
 8021b7a:	4603      	mov	r3, r0
 8021b7c:	2b00      	cmp	r3, #0
 8021b7e:	d101      	bne.n	8021b84 <imageProcessAppHeader+0x8e>
            {
                //Debug message
                TRACE_INFO("Update Aborted! Incorrect update image application version.\r\n");
                //Forward error
                return CBOOT_ERROR_INCORRECT_IMAGE_APP_VERSION;
 8021b80:	230e      	movs	r3, #14
 8021b82:	e07f      	b.n	8021c84 <imageProcessAppHeader+0x18e>
            }
        }

        //Check the header image type
        if(imgHeader->imgType != IMAGE_TYPE_APP)
 8021b84:	68bb      	ldr	r3, [r7, #8]
 8021b86:	7a1b      	ldrb	r3, [r3, #8]
 8021b88:	2b01      	cmp	r3, #1
 8021b8a:	d001      	beq.n	8021b90 <imageProcessAppHeader+0x9a>
        {
            //Debug message
            TRACE_ERROR("Invalid header image type!\r\n");
            return CBOOT_ERROR_INVALID_HEADER_APP_TYPE;
 8021b8c:	2309      	movs	r3, #9
 8021b8e:	e079      	b.n	8021c84 <imageProcessAppHeader+0x18e>
        }

        //Check output type
        if(imageOut->activeSlot->cType & SLOT_CONTENT_BINARY)
 8021b90:	69bb      	ldr	r3, [r7, #24]
 8021b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8021b96:	785b      	ldrb	r3, [r3, #1]
 8021b98:	f003 0308 	and.w	r3, r3, #8
 8021b9c:	2b00      	cmp	r3, #0
 8021b9e:	d00c      	beq.n	8021bba <imageProcessAppHeader+0xc4>
        {
            //Compute output binary size
            outputSize = imgHeader->dataSize;
 8021ba0:	68bb      	ldr	r3, [r7, #8]
 8021ba2:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8021ba6:	613b      	str	r3, [r7, #16]

            //Would output firmware overcome the memory slot holding it?
            if (outputSize > imageOut->activeSlot->size)
 8021ba8:	69bb      	ldr	r3, [r7, #24]
 8021baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8021bae:	68db      	ldr	r3, [r3, #12]
 8021bb0:	693a      	ldr	r2, [r7, #16]
 8021bb2:	429a      	cmp	r2, r3
 8021bb4:	d914      	bls.n	8021be0 <imageProcessAppHeader+0xea>
            {
                //Debug message
                TRACE_ERROR("Output binary would be bigger the memory slot holding it\r\n");
                //Forward error
                return CBOOT_ERROR_BUFFER_OVERFLOW;
 8021bb6:	2317      	movs	r3, #23
 8021bb8:	e064      	b.n	8021c84 <imageProcessAppHeader+0x18e>
#if ((CIPHER_SUPPORT == ENABLED) && (IMAGE_OUTPUT_ENCRYPTED == ENABLED))
            outputSize = imgHeader->dataSize + sizeof(ImageHeader) +
                imageOut->cipherEngine.ivLen +
                imageOut->verifyContext.verifySettings.integrityAlgo->digestSize;
#else
            outputSize = imgHeader->dataSize + sizeof(ImageHeader) +
 8021bba:	68bb      	ldr	r3, [r7, #8]
 8021bbc:	f8d3 200d 	ldr.w	r2, [r3, #13]
                imageOut->verifyContext.verifySettings.integrityAlgo->digestSize;
 8021bc0:	69bb      	ldr	r3, [r7, #24]
 8021bc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8021bc6:	695b      	ldr	r3, [r3, #20]
            outputSize = imgHeader->dataSize + sizeof(ImageHeader) +
 8021bc8:	4413      	add	r3, r2
 8021bca:	3340      	adds	r3, #64	@ 0x40
 8021bcc:	613b      	str	r3, [r7, #16]
#endif
            //Would output image overcome the memory slot holding it?
            if (outputSize > imageOut->activeSlot->size)
 8021bce:	69bb      	ldr	r3, [r7, #24]
 8021bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8021bd4:	68db      	ldr	r3, [r3, #12]
 8021bd6:	693a      	ldr	r2, [r7, #16]
 8021bd8:	429a      	cmp	r2, r3
 8021bda:	d901      	bls.n	8021be0 <imageProcessAppHeader+0xea>
            {
                //Debug message
                TRACE_ERROR("Output image would be bigger than the memory slot holding it!\r\n");
                //Forward error
                return CBOOT_ERROR_BUFFER_OVERFLOW;
 8021bdc:	2317      	movs	r3, #23
 8021bde:	e051      	b.n	8021c84 <imageProcessAppHeader+0x18e>
            }
        }

        //Save application firmware length
        imageOut->firmwareLength = imgHeader->dataSize;
 8021be0:	68bb      	ldr	r3, [r7, #8]
 8021be2:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8021be6:	69bb      	ldr	r3, [r7, #24]
 8021be8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        imageIn->firmwareLength = imgHeader->dataSize;
 8021bec:	68bb      	ldr	r3, [r7, #8]
 8021bee:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8021bf2:	69fb      	ldr	r3, [r7, #28]
 8021bf4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        //Check output type
        if(!(imageOut->activeSlot->cType & SLOT_CONTENT_BINARY))
 8021bf8:	69bb      	ldr	r3, [r7, #24]
 8021bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8021bfe:	785b      	ldrb	r3, [r3, #1]
 8021c00:	f003 0308 	and.w	r3, r3, #8
 8021c04:	2b00      	cmp	r3, #0
 8021c06:	d10c      	bne.n	8021c22 <imageProcessAppHeader+0x12c>
        {
            //Process parsed image input header for later output image generation
            cerror = imageProcessOutput(context, (uint8_t*)imgHeader, sizeof(ImageHeader));
 8021c08:	68bb      	ldr	r3, [r7, #8]
 8021c0a:	2240      	movs	r2, #64	@ 0x40
 8021c0c:	4619      	mov	r1, r3
 8021c0e:	6878      	ldr	r0, [r7, #4]
 8021c10:	f7ff fcd3 	bl	80215ba <imageProcessOutput>
 8021c14:	4603      	mov	r3, r0
 8021c16:	73fb      	strb	r3, [r7, #15]
            if(cerror)
 8021c18:	7bfb      	ldrb	r3, [r7, #15]
 8021c1a:	2b00      	cmp	r3, #0
 8021c1c:	d001      	beq.n	8021c22 <imageProcessAppHeader+0x12c>
                return cerror;
 8021c1e:	7bfb      	ldrb	r3, [r7, #15]
 8021c20:	e030      	b.n	8021c84 <imageProcessAppHeader+0x18e>
        }

        //Check image header integrity
        cerror = verifyProcess(&imageIn->verifyContext, (uint8_t*)&imgHeader->headCrc, CRC32_DIGEST_SIZE);
 8021c22:	69fb      	ldr	r3, [r7, #28]
 8021c24:	f503 702e 	add.w	r0, r3, #696	@ 0x2b8
 8021c28:	68bb      	ldr	r3, [r7, #8]
 8021c2a:	333c      	adds	r3, #60	@ 0x3c
 8021c2c:	2204      	movs	r2, #4
 8021c2e:	4619      	mov	r1, r3
 8021c30:	f000 fe54 	bl	80228dc <verifyProcess>
 8021c34:	4603      	mov	r3, r0
 8021c36:	73fb      	strb	r3, [r7, #15]
        //Is any error?
        if(cerror)
 8021c38:	7bfb      	ldrb	r3, [r7, #15]
 8021c3a:	2b00      	cmp	r3, #0
 8021c3c:	d001      	beq.n	8021c42 <imageProcessAppHeader+0x14c>
            return cerror;
 8021c3e:	7bfb      	ldrb	r3, [r7, #15]
 8021c40:	e020      	b.n	8021c84 <imageProcessAppHeader+0x18e>

        //Remove header from buffer
        n = imageIn->bufferLen - sizeof(ImageHeader);
 8021c42:	69fb      	ldr	r3, [r7, #28]
 8021c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021c48:	3b40      	subs	r3, #64	@ 0x40
 8021c4a:	617b      	str	r3, [r7, #20]
        memcpy(imageIn->buffer, imageIn->buffer + sizeof(ImageHeader), n);
 8021c4c:	69f8      	ldr	r0, [r7, #28]
 8021c4e:	69fb      	ldr	r3, [r7, #28]
 8021c50:	3340      	adds	r3, #64	@ 0x40
 8021c52:	697a      	ldr	r2, [r7, #20]
 8021c54:	4619      	mov	r1, r3
 8021c56:	f00a f8ac 	bl	802bdb2 <memcpy>
        imageIn->bufferPos -= sizeof(ImageHeader);
 8021c5a:	69fb      	ldr	r3, [r7, #28]
 8021c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8021c60:	f1a3 0240 	sub.w	r2, r3, #64	@ 0x40
 8021c64:	69fb      	ldr	r3, [r7, #28]
 8021c66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        imageIn->bufferLen -= sizeof(ImageHeader);
 8021c6a:	69fb      	ldr	r3, [r7, #28]
 8021c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021c70:	f1a3 0240 	sub.w	r2, r3, #64	@ 0x40
 8021c74:	69fb      	ldr	r3, [r7, #28]
 8021c76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        //Change image state
        imageChangeState(imageIn, IMAGE_STATE_RECV_APP_DATA);
 8021c7a:	2102      	movs	r1, #2
 8021c7c:	69f8      	ldr	r0, [r7, #28]
 8021c7e:	f000 fa0a 	bl	8022096 <imageChangeState>
    }

    // Successful process
    return CBOOT_NO_ERROR;
 8021c82:	2300      	movs	r3, #0
}
 8021c84:	4618      	mov	r0, r3
 8021c86:	3720      	adds	r7, #32
 8021c88:	46bd      	mov	sp, r7
 8021c8a:	bd80      	pop	{r7, pc}

08021c8c <imageProcessAppData>:
 * @param[in,out] context Pointer to the ImageProcess context
 * @return Error code.
 **/

cboot_error_t imageProcessAppData(ImageProcessContext *context)
{
 8021c8c:	b580      	push	{r7, lr}
 8021c8e:	b086      	sub	sp, #24
 8021c90:	af00      	add	r7, sp, #0
 8021c92:	6078      	str	r0, [r7, #4]
    cboot_error_t cerror;
    uint_t dataLength;
    Image *imageIn;

    //Check parameter validity
    if (context == NULL)
 8021c94:	687b      	ldr	r3, [r7, #4]
 8021c96:	2b00      	cmp	r3, #0
 8021c98:	d101      	bne.n	8021c9e <imageProcessAppData+0x12>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 8021c9a:	2304      	movs	r3, #4
 8021c9c:	e12f      	b.n	8021efe <imageProcessAppData+0x272>

    //Point to image input context
    imageIn = &context->inputImage;
 8021c9e:	687b      	ldr	r3, [r7, #4]
 8021ca0:	617b      	str	r3, [r7, #20]

    //Check current input image process state
    if(imageIn->state != IMAGE_STATE_RECV_APP_DATA)
 8021ca2:	697b      	ldr	r3, [r7, #20]
 8021ca4:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8021ca8:	2b02      	cmp	r3, #2
 8021caa:	d001      	beq.n	8021cb0 <imageProcessAppData+0x24>
        return CBOOT_ERROR_INVALID_STATE;
 8021cac:	2316      	movs	r3, #22
 8021cae:	e126      	b.n	8021efe <imageProcessAppData+0x272>

#if ((CIPHER_SUPPORT == ENABLED) && (IMAGE_INPUT_ENCRYPTED == ENABLED))
    //Receiving image application cipher iv?
    //if(context->cipherEngine.algo != NULL && !context->ivRetrieved)
    if((imageIn->cipherEngine.algo != NULL) && !imageIn->ivRetrieved)
 8021cb0:	697b      	ldr	r3, [r7, #20]
 8021cb2:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8021cb6:	2b00      	cmp	r3, #0
 8021cb8:	d00f      	beq.n	8021cda <imageProcessAppData+0x4e>
 8021cba:	697b      	ldr	r3, [r7, #20]
 8021cbc:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8021cc0:	2b00      	cmp	r3, #0
 8021cc2:	d10a      	bne.n	8021cda <imageProcessAppData+0x4e>
    {
        //Process application cipher initialisation vector here
        cerror = imageProcessAppCipherIv(context);
 8021cc4:	6878      	ldr	r0, [r7, #4]
 8021cc6:	f000 f97c 	bl	8021fc2 <imageProcessAppCipherIv>
 8021cca:	4603      	mov	r3, r0
 8021ccc:	74fb      	strb	r3, [r7, #19]
        //Is any error?
        if (cerror)
 8021cce:	7cfb      	ldrb	r3, [r7, #19]
 8021cd0:	2b00      	cmp	r3, #0
 8021cd2:	f000 8113 	beq.w	8021efc <imageProcessAppData+0x270>
            return cerror;
 8021cd6:	7cfb      	ldrb	r3, [r7, #19]
 8021cd8:	e111      	b.n	8021efe <imageProcessAppData+0x272>
    }
    //Receiving CRC of the non-encrypted image data (application binary)
    else if (imageIn->bufferLen >= imageIn->cipherEngine.algo->blockSize && !imageIn->magicNumberCrcRetrieved)
 8021cda:	697b      	ldr	r3, [r7, #20]
 8021cdc:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8021ce0:	697b      	ldr	r3, [r7, #20]
 8021ce2:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8021ce6:	68db      	ldr	r3, [r3, #12]
 8021ce8:	429a      	cmp	r2, r3
 8021cea:	d35c      	bcc.n	8021da6 <imageProcessAppData+0x11a>
 8021cec:	697b      	ldr	r3, [r7, #20]
 8021cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8021cf2:	2b00      	cmp	r3, #0
 8021cf4:	d157      	bne.n	8021da6 <imageProcessAppData+0x11a>
    {
        //Update application check computation tag (could be integrity tag or
        //authentification tag or hash signature tag)
        cerror = verifyProcess(&imageIn->verifyContext, imageIn->buffer, imageIn->cipherEngine.algo->blockSize);
 8021cf6:	697b      	ldr	r3, [r7, #20]
 8021cf8:	f503 702e 	add.w	r0, r3, #696	@ 0x2b8
 8021cfc:	6979      	ldr	r1, [r7, #20]
 8021cfe:	697b      	ldr	r3, [r7, #20]
 8021d00:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8021d04:	68db      	ldr	r3, [r3, #12]
 8021d06:	461a      	mov	r2, r3
 8021d08:	f000 fde8 	bl	80228dc <verifyProcess>
 8021d0c:	4603      	mov	r3, r0
 8021d0e:	74fb      	strb	r3, [r7, #19]
        //Is any error?
        if(cerror)
 8021d10:	7cfb      	ldrb	r3, [r7, #19]
 8021d12:	2b00      	cmp	r3, #0
 8021d14:	d001      	beq.n	8021d1a <imageProcessAppData+0x8e>
            return cerror;
 8021d16:	7cfb      	ldrb	r3, [r7, #19]
 8021d18:	e0f1      	b.n	8021efe <imageProcessAppData+0x272>

        //Decrypt application data
        cerror = cipherDecryptData(&imageIn->cipherEngine, imageIn->buffer, imageIn->cipherEngine.algo->blockSize);
 8021d1a:	697b      	ldr	r3, [r7, #20]
 8021d1c:	f103 00a4 	add.w	r0, r3, #164	@ 0xa4
 8021d20:	6979      	ldr	r1, [r7, #20]
 8021d22:	697b      	ldr	r3, [r7, #20]
 8021d24:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8021d28:	68db      	ldr	r3, [r3, #12]
 8021d2a:	461a      	mov	r2, r3
 8021d2c:	f000 fcfc 	bl	8022728 <cipherDecryptData>
 8021d30:	4603      	mov	r3, r0
 8021d32:	74fb      	strb	r3, [r7, #19]

        //Is any error?
        if (cerror)
 8021d34:	7cfb      	ldrb	r3, [r7, #19]
 8021d36:	2b00      	cmp	r3, #0
 8021d38:	d001      	beq.n	8021d3e <imageProcessAppData+0xb2>
            return cerror;
 8021d3a:	7cfb      	ldrb	r3, [r7, #19]
 8021d3c:	e0df      	b.n	8021efe <imageProcessAppData+0x272>

        //Save magic number crc (extract only first 4bytes, remaining 12 bytes should all zeros)
        memcpy((uint8_t*)&imageIn->magicNumberCrc, imageIn->buffer, CRC32_DIGEST_SIZE);
 8021d3e:	697b      	ldr	r3, [r7, #20]
 8021d40:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8021d44:	697a      	ldr	r2, [r7, #20]
 8021d46:	6812      	ldr	r2, [r2, #0]
 8021d48:	601a      	str	r2, [r3, #0]
        imageIn->magicNumberCrcRetrieved = TRUE;
 8021d4a:	697b      	ldr	r3, [r7, #20]
 8021d4c:	2201      	movs	r2, #1
 8021d4e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4

        //Remove processed data (cipher magic number) from buffer
        memcpy(imageIn->buffer, imageIn->buffer + imageIn->cipherEngine.algo->blockSize,
 8021d52:	6978      	ldr	r0, [r7, #20]
 8021d54:	697a      	ldr	r2, [r7, #20]
 8021d56:	697b      	ldr	r3, [r7, #20]
 8021d58:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8021d5c:	68db      	ldr	r3, [r3, #12]
 8021d5e:	18d1      	adds	r1, r2, r3
            imageIn->bufferLen - imageIn->cipherEngine.algo->blockSize);
 8021d60:	697b      	ldr	r3, [r7, #20]
 8021d62:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8021d66:	697b      	ldr	r3, [r7, #20]
 8021d68:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8021d6c:	68db      	ldr	r3, [r3, #12]
        memcpy(imageIn->buffer, imageIn->buffer + imageIn->cipherEngine.algo->blockSize,
 8021d6e:	1ad3      	subs	r3, r2, r3
 8021d70:	461a      	mov	r2, r3
 8021d72:	f00a f81e 	bl	802bdb2 <memcpy>
        imageIn->bufferPos -= imageIn->cipherEngine.algo->blockSize;
 8021d76:	697b      	ldr	r3, [r7, #20]
 8021d78:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8021d7c:	697b      	ldr	r3, [r7, #20]
 8021d7e:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8021d82:	68db      	ldr	r3, [r3, #12]
 8021d84:	425b      	negs	r3, r3
 8021d86:	441a      	add	r2, r3
 8021d88:	697b      	ldr	r3, [r7, #20]
 8021d8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        imageIn->bufferLen -= imageIn->cipherEngine.algo->blockSize;
 8021d8e:	697b      	ldr	r3, [r7, #20]
 8021d90:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8021d94:	697b      	ldr	r3, [r7, #20]
 8021d96:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8021d9a:	68db      	ldr	r3, [r3, #12]
 8021d9c:	1ad2      	subs	r2, r2, r3
 8021d9e:	697b      	ldr	r3, [r7, #20]
 8021da0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8021da4:	e0aa      	b.n	8021efc <imageProcessAppData+0x270>
    //Receiving image firmware data?
    if(1)
    {
#endif
        //Is buffer full or full enough to contain last application data?
        if ((imageIn->bufferLen == sizeof(imageIn->buffer)) ||
 8021da6:	697b      	ldr	r3, [r7, #20]
 8021da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021dac:	2b80      	cmp	r3, #128	@ 0x80
 8021dae:	d00c      	beq.n	8021dca <imageProcessAppData+0x13e>
            (imageIn->written + imageIn->bufferLen >= imageIn->firmwareLength))
 8021db0:	697b      	ldr	r3, [r7, #20]
 8021db2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8021db6:	697b      	ldr	r3, [r7, #20]
 8021db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021dbc:	441a      	add	r2, r3
 8021dbe:	697b      	ldr	r3, [r7, #20]
 8021dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
        if ((imageIn->bufferLen == sizeof(imageIn->buffer)) ||
 8021dc4:	429a      	cmp	r2, r3
 8021dc6:	f0c0 8099 	bcc.w	8021efc <imageProcessAppData+0x270>
        {
            //We must not process more data than the firmware length
            dataLength = MIN(imageIn->bufferLen,
 8021dca:	697b      	ldr	r3, [r7, #20]
 8021dcc:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8021dd0:	697b      	ldr	r3, [r7, #20]
 8021dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8021dd6:	1ad2      	subs	r2, r2, r3
 8021dd8:	697b      	ldr	r3, [r7, #20]
 8021dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021dde:	4293      	cmp	r3, r2
 8021de0:	bf28      	it	cs
 8021de2:	4613      	movcs	r3, r2
 8021de4:	60fb      	str	r3, [r7, #12]
                             imageIn->firmwareLength - imageIn->written);

            //Update application check computation tag (could be integrity tag or
            //authentication tag or hash signature tag)
            cerror = verifyProcess(&imageIn->verifyContext,
 8021de6:	697b      	ldr	r3, [r7, #20]
 8021de8:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
                                  imageIn->buffer, dataLength);
 8021dec:	6979      	ldr	r1, [r7, #20]
            cerror = verifyProcess(&imageIn->verifyContext,
 8021dee:	68fa      	ldr	r2, [r7, #12]
 8021df0:	4618      	mov	r0, r3
 8021df2:	f000 fd73 	bl	80228dc <verifyProcess>
 8021df6:	4603      	mov	r3, r0
 8021df8:	74fb      	strb	r3, [r7, #19]

            //Is any error?
            if (cerror)
 8021dfa:	7cfb      	ldrb	r3, [r7, #19]
 8021dfc:	2b00      	cmp	r3, #0
 8021dfe:	d001      	beq.n	8021e04 <imageProcessAppData+0x178>
                return cerror;
 8021e00:	7cfb      	ldrb	r3, [r7, #19]
 8021e02:	e07c      	b.n	8021efe <imageProcessAppData+0x272>

#if ((CIPHER_SUPPORT == ENABLED) && (IMAGE_INPUT_ENCRYPTED == ENABLED))
            //Is application is encrypted?
            if (imageIn->cipherEngine.algo != NULL)
 8021e04:	697b      	ldr	r3, [r7, #20]
 8021e06:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8021e0a:	2b00      	cmp	r3, #0
 8021e0c:	d00d      	beq.n	8021e2a <imageProcessAppData+0x19e>
            {
                //Decrypt application data
                cerror = cipherDecryptData(&imageIn->cipherEngine, imageIn->buffer, dataLength);
 8021e0e:	697b      	ldr	r3, [r7, #20]
 8021e10:	33a4      	adds	r3, #164	@ 0xa4
 8021e12:	6979      	ldr	r1, [r7, #20]
 8021e14:	68fa      	ldr	r2, [r7, #12]
 8021e16:	4618      	mov	r0, r3
 8021e18:	f000 fc86 	bl	8022728 <cipherDecryptData>
 8021e1c:	4603      	mov	r3, r0
 8021e1e:	74fb      	strb	r3, [r7, #19]

                //Is any error?
                if (cerror)
 8021e20:	7cfb      	ldrb	r3, [r7, #19]
 8021e22:	2b00      	cmp	r3, #0
 8021e24:	d001      	beq.n	8021e2a <imageProcessAppData+0x19e>
                    return cerror;
 8021e26:	7cfb      	ldrb	r3, [r7, #19]
 8021e28:	e069      	b.n	8021efe <imageProcessAppData+0x272>
            }
#endif

            //Process/format output data
            cerror = imageProcessOutput(context,imageIn->buffer, dataLength);
 8021e2a:	697b      	ldr	r3, [r7, #20]
 8021e2c:	68fa      	ldr	r2, [r7, #12]
 8021e2e:	4619      	mov	r1, r3
 8021e30:	6878      	ldr	r0, [r7, #4]
 8021e32:	f7ff fbc2 	bl	80215ba <imageProcessOutput>
 8021e36:	4603      	mov	r3, r0
 8021e38:	74fb      	strb	r3, [r7, #19]
            //Is any error?
            if(cerror)
 8021e3a:	7cfb      	ldrb	r3, [r7, #19]
 8021e3c:	2b00      	cmp	r3, #0
 8021e3e:	d001      	beq.n	8021e44 <imageProcessAppData+0x1b8>
                return cerror;
 8021e40:	7cfb      	ldrb	r3, [r7, #19]
 8021e42:	e05c      	b.n	8021efe <imageProcessAppData+0x272>

            //imgOutput->written += dataLength;
            imageIn->written += dataLength;
 8021e44:	697b      	ldr	r3, [r7, #20]
 8021e46:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8021e4a:	68fb      	ldr	r3, [r7, #12]
 8021e4c:	441a      	add	r2, r3
 8021e4e:	697b      	ldr	r3, [r7, #20]
 8021e50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

            //Does the buffer contain remaining data?
            if (imageIn->bufferLen != dataLength)
 8021e54:	697b      	ldr	r3, [r7, #20]
 8021e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021e5a:	68fa      	ldr	r2, [r7, #12]
 8021e5c:	429a      	cmp	r2, r3
 8021e5e:	d024      	beq.n	8021eaa <imageProcessAppData+0x21e>
            {
               //Discard already processed data
               memset(imageIn->buffer, 0, dataLength);
 8021e60:	697b      	ldr	r3, [r7, #20]
 8021e62:	68fa      	ldr	r2, [r7, #12]
 8021e64:	2100      	movs	r1, #0
 8021e66:	4618      	mov	r0, r3
 8021e68:	f009 fee6 	bl	802bc38 <memset>

               //Put remaining data at buffer start
               memcpy(imageIn->buffer, imageIn->buffer + dataLength,
 8021e6c:	6978      	ldr	r0, [r7, #20]
 8021e6e:	697a      	ldr	r2, [r7, #20]
 8021e70:	68fb      	ldr	r3, [r7, #12]
 8021e72:	18d1      	adds	r1, r2, r3
                      imageIn->bufferLen - dataLength);
 8021e74:	697b      	ldr	r3, [r7, #20]
 8021e76:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
               memcpy(imageIn->buffer, imageIn->buffer + dataLength,
 8021e7a:	68fb      	ldr	r3, [r7, #12]
 8021e7c:	1ad3      	subs	r3, r2, r3
 8021e7e:	461a      	mov	r2, r3
 8021e80:	f009 ff97 	bl	802bdb2 <memcpy>
               //Update buffer position and length
               imageIn->bufferPos = imageIn->buffer +
 8021e84:	697a      	ldr	r2, [r7, #20]
                       (imageIn->bufferLen - dataLength);
 8021e86:	697b      	ldr	r3, [r7, #20]
 8021e88:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8021e8c:	68fb      	ldr	r3, [r7, #12]
 8021e8e:	1acb      	subs	r3, r1, r3
               imageIn->bufferPos = imageIn->buffer +
 8021e90:	441a      	add	r2, r3
 8021e92:	697b      	ldr	r3, [r7, #20]
 8021e94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
               imageIn->bufferLen = imageIn->bufferLen - dataLength;
 8021e98:	697b      	ldr	r3, [r7, #20]
 8021e9a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8021e9e:	68fb      	ldr	r3, [r7, #12]
 8021ea0:	1ad2      	subs	r2, r2, r3
 8021ea2:	697b      	ldr	r3, [r7, #20]
 8021ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8021ea8:	e00d      	b.n	8021ec6 <imageProcessAppData+0x23a>
            }
            else
            {
                //Reset buffer
                memset(imageIn->buffer, 0, sizeof(imageIn->buffer));
 8021eaa:	697b      	ldr	r3, [r7, #20]
 8021eac:	2280      	movs	r2, #128	@ 0x80
 8021eae:	2100      	movs	r1, #0
 8021eb0:	4618      	mov	r0, r3
 8021eb2:	f009 fec1 	bl	802bc38 <memset>
                imageIn->bufferPos = imageIn->buffer;
 8021eb6:	697a      	ldr	r2, [r7, #20]
 8021eb8:	697b      	ldr	r3, [r7, #20]
 8021eba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                imageIn->bufferLen = 0;
 8021ebe:	697b      	ldr	r3, [r7, #20]
 8021ec0:	2200      	movs	r2, #0
 8021ec2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            }

            //Is application data all received?
            if (imageIn->written == imageIn->firmwareLength)
 8021ec6:	697b      	ldr	r3, [r7, #20]
 8021ec8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8021ecc:	697b      	ldr	r3, [r7, #20]
 8021ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021ed2:	429a      	cmp	r2, r3
 8021ed4:	d112      	bne.n	8021efc <imageProcessAppData+0x270>
            {
                //Change Image process state
                imageChangeState(imageIn, IMAGE_STATE_RECV_APP_CHECK);
 8021ed6:	2103      	movs	r1, #3
 8021ed8:	6978      	ldr	r0, [r7, #20]
 8021eda:	f000 f8dc 	bl	8022096 <imageChangeState>

                //Still data to process?
                if (imageIn->bufferLen > 0)
 8021ede:	697b      	ldr	r3, [r7, #20]
 8021ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021ee4:	2b00      	cmp	r3, #0
 8021ee6:	d009      	beq.n	8021efc <imageProcessAppData+0x270>
                {
                    //Process Image check app data
                    cerror = imageProcessAppCheck(context);
 8021ee8:	6878      	ldr	r0, [r7, #4]
 8021eea:	f000 f80c 	bl	8021f06 <imageProcessAppCheck>
 8021eee:	4603      	mov	r3, r0
 8021ef0:	74fb      	strb	r3, [r7, #19]
                    //Is any error?
                    if (cerror)
 8021ef2:	7cfb      	ldrb	r3, [r7, #19]
 8021ef4:	2b00      	cmp	r3, #0
 8021ef6:	d001      	beq.n	8021efc <imageProcessAppData+0x270>
                        return cerror;
 8021ef8:	7cfb      	ldrb	r3, [r7, #19]
 8021efa:	e000      	b.n	8021efe <imageProcessAppData+0x272>
            }
        }
    }

    //Successful process
    return CBOOT_NO_ERROR;
 8021efc:	2300      	movs	r3, #0
}
 8021efe:	4618      	mov	r0, r3
 8021f00:	3718      	adds	r7, #24
 8021f02:	46bd      	mov	sp, r7
 8021f04:	bd80      	pop	{r7, pc}

08021f06 <imageProcessAppCheck>:
* @param[in,out] context Pointer to the ImageProcess context
* @return Error code.
**/

cboot_error_t imageProcessAppCheck(ImageProcessContext *context)
{
 8021f06:	b580      	push	{r7, lr}
 8021f08:	b084      	sub	sp, #16
 8021f0a:	af00      	add	r7, sp, #0
 8021f0c:	6078      	str	r0, [r7, #4]
    Image *imageIn;

    //Check parameter validity
    if (context == NULL)
 8021f0e:	687b      	ldr	r3, [r7, #4]
 8021f10:	2b00      	cmp	r3, #0
 8021f12:	d101      	bne.n	8021f18 <imageProcessAppCheck+0x12>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 8021f14:	2304      	movs	r3, #4
 8021f16:	e050      	b.n	8021fba <imageProcessAppCheck+0xb4>

    //Point to the input image context
    imageIn = (Image*)&context->inputImage;
 8021f18:	687b      	ldr	r3, [r7, #4]
 8021f1a:	60fb      	str	r3, [r7, #12]

    //Check current input image process state
    if(imageIn->state != IMAGE_STATE_RECV_APP_CHECK)
 8021f1c:	68fb      	ldr	r3, [r7, #12]
 8021f1e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8021f22:	2b03      	cmp	r3, #3
 8021f24:	d001      	beq.n	8021f2a <imageProcessAppCheck+0x24>
        return CBOOT_ERROR_INVALID_STATE;
 8021f26:	2316      	movs	r3, #22
 8021f28:	e047      	b.n	8021fba <imageProcessAppCheck+0xb4>

    //Is buffer full enough to contain image check data?
    //(could be integrity/authentication tag or signature)
    if (imageIn->checkDataLen + imageIn->bufferLen <= imageIn->checkDataSize)
 8021f2a:	68fb      	ldr	r3, [r7, #12]
 8021f2c:	f8d3 25ec 	ldr.w	r2, [r3, #1516]	@ 0x5ec
 8021f30:	68fb      	ldr	r3, [r7, #12]
 8021f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021f36:	441a      	add	r2, r3
 8021f38:	68fb      	ldr	r3, [r7, #12]
 8021f3a:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	@ 0x5f0
 8021f3e:	429a      	cmp	r2, r3
 8021f40:	d838      	bhi.n	8021fb4 <imageProcessAppCheck+0xae>
    {
        //Save image check data block
        memcpy(imageIn->checkDataPos, imageIn->buffer,
 8021f42:	68fb      	ldr	r3, [r7, #12]
 8021f44:	f8d3 05e8 	ldr.w	r0, [r3, #1512]	@ 0x5e8
 8021f48:	68f9      	ldr	r1, [r7, #12]
 8021f4a:	68fb      	ldr	r3, [r7, #12]
 8021f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021f50:	461a      	mov	r2, r3
 8021f52:	f009 ff2e 	bl	802bdb2 <memcpy>
               imageIn->bufferLen);
        imageIn->checkDataPos += imageIn->bufferLen;
 8021f56:	68fb      	ldr	r3, [r7, #12]
 8021f58:	f8d3 25e8 	ldr.w	r2, [r3, #1512]	@ 0x5e8
 8021f5c:	68fb      	ldr	r3, [r7, #12]
 8021f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021f62:	441a      	add	r2, r3
 8021f64:	68fb      	ldr	r3, [r7, #12]
 8021f66:	f8c3 25e8 	str.w	r2, [r3, #1512]	@ 0x5e8
        imageIn->checkDataLen += imageIn->bufferLen;
 8021f6a:	68fb      	ldr	r3, [r7, #12]
 8021f6c:	f8d3 25ec 	ldr.w	r2, [r3, #1516]	@ 0x5ec
 8021f70:	68fb      	ldr	r3, [r7, #12]
 8021f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021f76:	441a      	add	r2, r3
 8021f78:	68fb      	ldr	r3, [r7, #12]
 8021f7a:	f8c3 25ec 	str.w	r2, [r3, #1516]	@ 0x5ec

        //Reset buffer
        memset(imageIn->buffer, 0, sizeof(imageIn->buffer));
 8021f7e:	68fb      	ldr	r3, [r7, #12]
 8021f80:	2280      	movs	r2, #128	@ 0x80
 8021f82:	2100      	movs	r1, #0
 8021f84:	4618      	mov	r0, r3
 8021f86:	f009 fe57 	bl	802bc38 <memset>
        imageIn->bufferPos = imageIn->buffer;
 8021f8a:	68fa      	ldr	r2, [r7, #12]
 8021f8c:	68fb      	ldr	r3, [r7, #12]
 8021f8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        imageIn->bufferLen = 0;
 8021f92:	68fb      	ldr	r3, [r7, #12]
 8021f94:	2200      	movs	r2, #0
 8021f96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        //Is image check data fully received?
        if (imageIn->checkDataLen == imageIn->checkDataSize)
 8021f9a:	68fb      	ldr	r3, [r7, #12]
 8021f9c:	f8d3 25ec 	ldr.w	r2, [r3, #1516]	@ 0x5ec
 8021fa0:	68fb      	ldr	r3, [r7, #12]
 8021fa2:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	@ 0x5f0
 8021fa6:	429a      	cmp	r2, r3
 8021fa8:	d106      	bne.n	8021fb8 <imageProcessAppCheck+0xb2>
        {
            //Change image process state
            imageChangeState(imageIn, IMAGE_STATE_VALIDATE_APP);
 8021faa:	2104      	movs	r1, #4
 8021fac:	68f8      	ldr	r0, [r7, #12]
 8021fae:	f000 f872 	bl	8022096 <imageChangeState>
 8021fb2:	e001      	b.n	8021fb8 <imageProcessAppCheck+0xb2>
    }
    else
    {
        //Debug message
        TRACE_ERROR("Image check data is bigger than expected!\r\n");
        return CBOOT_ERROR_BUFFER_OVERFLOW;
 8021fb4:	2317      	movs	r3, #23
 8021fb6:	e000      	b.n	8021fba <imageProcessAppCheck+0xb4>
    }

    //Successful process
    return CBOOT_NO_ERROR;
 8021fb8:	2300      	movs	r3, #0
}
 8021fba:	4618      	mov	r0, r3
 8021fbc:	3710      	adds	r7, #16
 8021fbe:	46bd      	mov	sp, r7
 8021fc0:	bd80      	pop	{r7, pc}

08021fc2 <imageProcessAppCipherIv>:
 * @param[in,out] context Pointer to the Image process context
 * @return Error code.
 **/

cboot_error_t imageProcessAppCipherIv(ImageProcessContext *context)
{
 8021fc2:	b580      	push	{r7, lr}
 8021fc4:	b086      	sub	sp, #24
 8021fc6:	af00      	add	r7, sp, #0
 8021fc8:	6078      	str	r0, [r7, #4]
   cboot_error_t cerror;
   Image *imageIn;
   uint_t n;

   //Check parameter validity
   if (context == NULL)
 8021fca:	687b      	ldr	r3, [r7, #4]
 8021fcc:	2b00      	cmp	r3, #0
 8021fce:	d101      	bne.n	8021fd4 <imageProcessAppCipherIv+0x12>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8021fd0:	2304      	movs	r3, #4
 8021fd2:	e05c      	b.n	802208e <imageProcessAppCipherIv+0xcc>

    //Point to the input image inside image proccess context
   imageIn = (Image*)&context->inputImage;
 8021fd4:	687b      	ldr	r3, [r7, #4]
 8021fd6:	617b      	str	r3, [r7, #20]

   //Initialize variable
   n = 0;
 8021fd8:	2300      	movs	r3, #0
 8021fda:	613b      	str	r3, [r7, #16]

   //Is buffer full enough to contains IAP image header?
   if (imageIn->bufferLen >= imageIn->cipherEngine.algo->blockSize)
 8021fdc:	697b      	ldr	r3, [r7, #20]
 8021fde:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8021fe2:	697b      	ldr	r3, [r7, #20]
 8021fe4:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8021fe8:	68db      	ldr	r3, [r3, #12]
 8021fea:	429a      	cmp	r2, r3
 8021fec:	d34e      	bcc.n	802208c <imageProcessAppCipherIv+0xca>
   {
      //Debug message
      TRACE_DEBUG("Processing firmware image cipher initialization vector...\r\n");

      //Save application cipher intialization vector
      cerror = cipherSetIv(&imageIn->cipherEngine, imageIn->buffer, imageIn->cipherEngine.ivLen);
 8021fee:	697b      	ldr	r3, [r7, #20]
 8021ff0:	f103 00a4 	add.w	r0, r3, #164	@ 0xa4
 8021ff4:	6979      	ldr	r1, [r7, #20]
 8021ff6:	697b      	ldr	r3, [r7, #20]
 8021ff8:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8021ffc:	461a      	mov	r2, r3
 8021ffe:	f000 fb75 	bl	80226ec <cipherSetIv>
 8022002:	4603      	mov	r3, r0
 8022004:	73fb      	strb	r3, [r7, #15]
      //Is any error?
      if(cerror)
 8022006:	7bfb      	ldrb	r3, [r7, #15]
 8022008:	2b00      	cmp	r3, #0
 802200a:	d001      	beq.n	8022010 <imageProcessAppCipherIv+0x4e>
         return cerror;
 802200c:	7bfb      	ldrb	r3, [r7, #15]
 802200e:	e03e      	b.n	802208e <imageProcessAppCipherIv+0xcc>

      //Set cipher iv as retrieved
      imageIn->ivRetrieved = TRUE;
 8022010:	697b      	ldr	r3, [r7, #20]
 8022012:	2201      	movs	r2, #1
 8022014:	f8c3 22ac 	str.w	r2, [r3, #684]	@ 0x2ac

      //Update application check computation tag (could be integrity tag or
      //authentification tag or hash signature tag)
      cerror = verifyProcess(&imageIn->verifyContext, imageIn->cipherEngine.iv, imageIn->cipherEngine.ivLen);
 8022018:	697b      	ldr	r3, [r7, #20]
 802201a:	f503 702e 	add.w	r0, r3, #696	@ 0x2b8
 802201e:	697b      	ldr	r3, [r7, #20]
 8022020:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8022024:	697b      	ldr	r3, [r7, #20]
 8022026:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 802202a:	461a      	mov	r2, r3
 802202c:	f000 fc56 	bl	80228dc <verifyProcess>
 8022030:	4603      	mov	r3, r0
 8022032:	73fb      	strb	r3, [r7, #15]
      //Is any error?
      if(cerror)
 8022034:	7bfb      	ldrb	r3, [r7, #15]
 8022036:	2b00      	cmp	r3, #0
 8022038:	d001      	beq.n	802203e <imageProcessAppCipherIv+0x7c>
         return cerror;
 802203a:	7bfb      	ldrb	r3, [r7, #15]
 802203c:	e027      	b.n	802208e <imageProcessAppCipherIv+0xcc>

      //Remove processed data (cipher iv) from buffer
      n = imageIn->bufferLen - imageIn->cipherEngine.ivLen;
 802203e:	697b      	ldr	r3, [r7, #20]
 8022040:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8022044:	697b      	ldr	r3, [r7, #20]
 8022046:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 802204a:	1ad3      	subs	r3, r2, r3
 802204c:	613b      	str	r3, [r7, #16]
      memcpy(imageIn->buffer, imageIn->buffer + imageIn->cipherEngine.ivLen, n);
 802204e:	6978      	ldr	r0, [r7, #20]
 8022050:	697a      	ldr	r2, [r7, #20]
 8022052:	697b      	ldr	r3, [r7, #20]
 8022054:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8022058:	4413      	add	r3, r2
 802205a:	693a      	ldr	r2, [r7, #16]
 802205c:	4619      	mov	r1, r3
 802205e:	f009 fea8 	bl	802bdb2 <memcpy>
      imageIn->bufferPos -= imageIn->cipherEngine.ivLen;
 8022062:	697b      	ldr	r3, [r7, #20]
 8022064:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8022068:	697b      	ldr	r3, [r7, #20]
 802206a:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 802206e:	425b      	negs	r3, r3
 8022070:	441a      	add	r2, r3
 8022072:	697b      	ldr	r3, [r7, #20]
 8022074:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      imageIn->bufferLen -= imageIn->cipherEngine.ivLen;
 8022078:	697b      	ldr	r3, [r7, #20]
 802207a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 802207e:	697b      	ldr	r3, [r7, #20]
 8022080:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8022084:	1ad2      	subs	r2, r2, r3
 8022086:	697b      	ldr	r3, [r7, #20]
 8022088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   }

   //Successful process
   return CBOOT_NO_ERROR;
 802208c:	2300      	movs	r3, #0
}
 802208e:	4618      	mov	r0, r3
 8022090:	3718      	adds	r7, #24
 8022092:	46bd      	mov	sp, r7
 8022094:	bd80      	pop	{r7, pc}

08022096 <imageChangeState>:
 * @param[in] context Pointer to the Image context
 * @param[in] newState New state to switch to
 **/

void imageChangeState(Image *image, ImageState newState)
{
 8022096:	b480      	push	{r7}
 8022098:	b083      	sub	sp, #12
 802209a:	af00      	add	r7, sp, #0
 802209c:	6078      	str	r0, [r7, #4]
 802209e:	460b      	mov	r3, r1
 80220a0:	70fb      	strb	r3, [r7, #3]
    //Update Image state
    image->state = newState;
 80220a2:	687b      	ldr	r3, [r7, #4]
 80220a4:	78fa      	ldrb	r2, [r7, #3]
 80220a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
}
 80220aa:	bf00      	nop
 80220ac:	370c      	adds	r7, #12
 80220ae:	46bd      	mov	sp, r7
 80220b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220b4:	4770      	bx	lr

080220b6 <memoryInit>:
/**
 * @brief Memory initialization function
 **/

cboot_error_t memoryInit(Memory* memories, size_t nbMemories)
{
 80220b6:	b580      	push	{r7, lr}
 80220b8:	b088      	sub	sp, #32
 80220ba:	af00      	add	r7, sp, #0
 80220bc:	6078      	str	r0, [r7, #4]
 80220be:	6039      	str	r1, [r7, #0]
    MemoryType memoryType;
    MemoryRole memoryRole;
    Memory* memory;

    //Check parameters
    if(memories == NULL || nbMemories == 0 || nbMemories > NB_MEMORIES)
 80220c0:	687b      	ldr	r3, [r7, #4]
 80220c2:	2b00      	cmp	r3, #0
 80220c4:	d005      	beq.n	80220d2 <memoryInit+0x1c>
 80220c6:	683b      	ldr	r3, [r7, #0]
 80220c8:	2b00      	cmp	r3, #0
 80220ca:	d002      	beq.n	80220d2 <memoryInit+0x1c>
 80220cc:	683b      	ldr	r3, [r7, #0]
 80220ce:	2b01      	cmp	r3, #1
 80220d0:	d901      	bls.n	80220d6 <memoryInit+0x20>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 80220d2:	2304      	movs	r3, #4
 80220d4:	e039      	b.n	802214a <memoryInit+0x94>

    // Initialize memories
    for (i = 0; i < nbMemories; i++)
 80220d6:	2300      	movs	r3, #0
 80220d8:	61fb      	str	r3, [r7, #28]
 80220da:	e031      	b.n	8022140 <memoryInit+0x8a>
    {
        memory = &memories[i];
 80220dc:	69fb      	ldr	r3, [r7, #28]
 80220de:	2234      	movs	r2, #52	@ 0x34
 80220e0:	fb02 f303 	mul.w	r3, r2, r3
 80220e4:	687a      	ldr	r2, [r7, #4]
 80220e6:	4413      	add	r3, r2
 80220e8:	61bb      	str	r3, [r7, #24]
        memoryDriver = memory->driver;
 80220ea:	69bb      	ldr	r3, [r7, #24]
 80220ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80220ee:	617b      	str	r3, [r7, #20]
        memoryType = memory->memoryType;
 80220f0:	69bb      	ldr	r3, [r7, #24]
 80220f2:	781b      	ldrb	r3, [r3, #0]
 80220f4:	74fb      	strb	r3, [r7, #19]
        memoryRole = memory->memoryRole;
 80220f6:	69bb      	ldr	r3, [r7, #24]
 80220f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80220fc:	74bb      	strb	r3, [r7, #18]

        //Check memory role
        if(memoryRole < MEMORY_ROLE_PRIMARY || memoryRole > MEMORY_ROLE_SECONDARY)
 80220fe:	7cbb      	ldrb	r3, [r7, #18]
 8022100:	2b01      	cmp	r3, #1
 8022102:	d901      	bls.n	8022108 <memoryInit+0x52>
            return CBOOT_ERROR_UNKNOWN_MEMORY_ROLE;
 8022104:	2327      	movs	r3, #39	@ 0x27
 8022106:	e020      	b.n	802214a <memoryInit+0x94>

        //Check memory type
        if (memoryType == MEMORY_TYPE_FLASH)
 8022108:	7cfb      	ldrb	r3, [r7, #19]
 802210a:	2b00      	cmp	r3, #0
 802210c:	d109      	bne.n	8022122 <memoryInit+0x6c>
        {
            //Initialize flash memory driver
            error = ((const FlashDriver*)memoryDriver)->init();
 802210e:	697b      	ldr	r3, [r7, #20]
 8022110:	681b      	ldr	r3, [r3, #0]
 8022112:	4798      	blx	r3
 8022114:	4603      	mov	r3, r0
 8022116:	823b      	strh	r3, [r7, #16]
            if (error != NO_ERROR)
 8022118:	8a3b      	ldrh	r3, [r7, #16]
 802211a:	2b00      	cmp	r3, #0
 802211c:	d003      	beq.n	8022126 <memoryInit+0x70>
                return CBOOT_ERROR_MEMORY_DRIVER_INIT_FAILED;
 802211e:	231b      	movs	r3, #27
 8022120:	e013      	b.n	802214a <memoryInit+0x94>
        }
#endif
        else
        {
            //Unknown memory type
            return CBOOT_ERROR_UNKNOWN_MEMORY_TYPE;
 8022122:	2326      	movs	r3, #38	@ 0x26
 8022124:	e011      	b.n	802214a <memoryInit+0x94>
        }

        // Initialize slots
        cerror = slotsInit(memory);
 8022126:	69b8      	ldr	r0, [r7, #24]
 8022128:	f000 f9d8 	bl	80224dc <slotsInit>
 802212c:	4603      	mov	r3, r0
 802212e:	73fb      	strb	r3, [r7, #15]
        //Is any error?
        if(cerror)
 8022130:	7bfb      	ldrb	r3, [r7, #15]
 8022132:	2b00      	cmp	r3, #0
 8022134:	d001      	beq.n	802213a <memoryInit+0x84>
            return cerror;
 8022136:	7bfb      	ldrb	r3, [r7, #15]
 8022138:	e007      	b.n	802214a <memoryInit+0x94>
    for (i = 0; i < nbMemories; i++)
 802213a:	69fb      	ldr	r3, [r7, #28]
 802213c:	3301      	adds	r3, #1
 802213e:	61fb      	str	r3, [r7, #28]
 8022140:	69fa      	ldr	r2, [r7, #28]
 8022142:	683b      	ldr	r3, [r7, #0]
 8022144:	429a      	cmp	r2, r3
 8022146:	d3c9      	bcc.n	80220dc <memoryInit+0x26>
    }

    //Succesful process
    return CBOOT_NO_ERROR;
 8022148:	2300      	movs	r3, #0
}
 802214a:	4618      	mov	r0, r3
 802214c:	3720      	adds	r7, #32
 802214e:	46bd      	mov	sp, r7
 8022150:	bd80      	pop	{r7, pc}

08022152 <memoryGetInfo>:

/**
 * @brief Memory get driver information function
 **/
cboot_error_t memoryGetInfo(Memory *memory, MemoryInfo *info)
{
 8022152:	b580      	push	{r7, lr}
 8022154:	b084      	sub	sp, #16
 8022156:	af00      	add	r7, sp, #0
 8022158:	6078      	str	r0, [r7, #4]
 802215a:	6039      	str	r1, [r7, #0]
    error_t error;
    const void* mInfo;

    //Check parameters
    if(memory == NULL || info == NULL)
 802215c:	687b      	ldr	r3, [r7, #4]
 802215e:	2b00      	cmp	r3, #0
 8022160:	d002      	beq.n	8022168 <memoryGetInfo+0x16>
 8022162:	683b      	ldr	r3, [r7, #0]
 8022164:	2b00      	cmp	r3, #0
 8022166:	d101      	bne.n	802216c <memoryGetInfo+0x1a>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 8022168:	2304      	movs	r3, #4
 802216a:	e030      	b.n	80221ce <memoryGetInfo+0x7c>

    //Is memory a flash?
    if(memory->memoryType == MEMORY_TYPE_FLASH)
 802216c:	687b      	ldr	r3, [r7, #4]
 802216e:	781b      	ldrb	r3, [r3, #0]
 8022170:	2b00      	cmp	r3, #0
 8022172:	d12b      	bne.n	80221cc <memoryGetInfo+0x7a>
    {
        //Get flash memory info
        error = ((const FlashDriver*)memory->driver)->getInfo((const FlashInfo**)&mInfo);
 8022174:	687b      	ldr	r3, [r7, #4]
 8022176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022178:	689b      	ldr	r3, [r3, #8]
 802217a:	f107 0208 	add.w	r2, r7, #8
 802217e:	4610      	mov	r0, r2
 8022180:	4798      	blx	r3
 8022182:	4603      	mov	r3, r0
 8022184:	81fb      	strh	r3, [r7, #14]
        //Is any error?
        if(error)
 8022186:	89fb      	ldrh	r3, [r7, #14]
 8022188:	2b00      	cmp	r3, #0
 802218a:	d001      	beq.n	8022190 <memoryGetInfo+0x3e>
            return CBOOT_ERROR_MEMORY_DRIVER_GET_INFO_FAILED;
 802218c:	2321      	movs	r3, #33	@ 0x21
 802218e:	e01e      	b.n	80221ce <memoryGetInfo+0x7c>

        //Format memory info
        info->addr = ((const FlashInfo*)mInfo)->flashAddr;
 8022190:	68bb      	ldr	r3, [r7, #8]
 8022192:	68da      	ldr	r2, [r3, #12]
 8022194:	683b      	ldr	r3, [r7, #0]
 8022196:	601a      	str	r2, [r3, #0]
        info->size = ((const FlashInfo*)mInfo)->flashSize;
 8022198:	68bb      	ldr	r3, [r7, #8]
 802219a:	691a      	ldr	r2, [r3, #16]
 802219c:	683b      	ldr	r3, [r7, #0]
 802219e:	605a      	str	r2, [r3, #4]
        info->bank1Addr = ((const FlashInfo*)mInfo)->bank1Addr;
 80221a0:	68bb      	ldr	r3, [r7, #8]
 80221a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80221a4:	683b      	ldr	r3, [r7, #0]
 80221a6:	609a      	str	r2, [r3, #8]
        info->bank2Addr = ((const FlashInfo*)mInfo)->bank2Addr;
 80221a8:	68bb      	ldr	r3, [r7, #8]
 80221aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80221ac:	683b      	ldr	r3, [r7, #0]
 80221ae:	60da      	str	r2, [r3, #12]
        info->bankSize = ((const FlashInfo*)mInfo)->bankSize;
 80221b0:	68bb      	ldr	r3, [r7, #8]
 80221b2:	6a1a      	ldr	r2, [r3, #32]
 80221b4:	683b      	ldr	r3, [r7, #0]
 80221b6:	611a      	str	r2, [r3, #16]
        info->writeSize = ((const FlashInfo*)mInfo)->writeSize;
 80221b8:	68bb      	ldr	r3, [r7, #8]
 80221ba:	695a      	ldr	r2, [r3, #20]
 80221bc:	683b      	ldr	r3, [r7, #0]
 80221be:	615a      	str	r2, [r3, #20]
        info->flags = ((const FlashInfo*)mInfo)->flags;
 80221c0:	68bb      	ldr	r3, [r7, #8]
 80221c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80221c4:	683b      	ldr	r3, [r7, #0]
 80221c6:	619a      	str	r2, [r3, #24]
        //Unknown memory type
        return CBOOT_ERROR_UNKNOWN_MEMORY_TYPE;
    }

    //Successful process
    return CBOOT_NO_ERROR;
 80221c8:	2300      	movs	r3, #0
 80221ca:	e000      	b.n	80221ce <memoryGetInfo+0x7c>
        return CBOOT_ERROR_UNKNOWN_MEMORY_TYPE;
 80221cc:	2326      	movs	r3, #38	@ 0x26
}
 80221ce:	4618      	mov	r0, r3
 80221d0:	3710      	adds	r7, #16
 80221d2:	46bd      	mov	sp, r7
 80221d4:	bd80      	pop	{r7, pc}
	...

080221d8 <memoryWriteSlot>:
 * @brief Write Data into Memory function
 **/

cboot_error_t memoryWriteSlot(Slot *slot, uint32_t offset, uint8_t* buffer,
    size_t length, size_t *written, uint8_t flag)
{
 80221d8:	b580      	push	{r7, lr}
 80221da:	b090      	sub	sp, #64	@ 0x40
 80221dc:	af00      	add	r7, sp, #0
 80221de:	60f8      	str	r0, [r7, #12]
 80221e0:	60b9      	str	r1, [r7, #8]
 80221e2:	607a      	str	r2, [r7, #4]
 80221e4:	603b      	str	r3, [r7, #0]
    Memory *memory;
    MemoryInfo memoryInfo;
    const void* memoryDriver;

    //Check parameters validity
    if(slot == NULL || buffer == NULL || written == NULL)
 80221e6:	68fb      	ldr	r3, [r7, #12]
 80221e8:	2b00      	cmp	r3, #0
 80221ea:	d005      	beq.n	80221f8 <memoryWriteSlot+0x20>
 80221ec:	687b      	ldr	r3, [r7, #4]
 80221ee:	2b00      	cmp	r3, #0
 80221f0:	d002      	beq.n	80221f8 <memoryWriteSlot+0x20>
 80221f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80221f4:	2b00      	cmp	r3, #0
 80221f6:	d101      	bne.n	80221fc <memoryWriteSlot+0x24>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 80221f8:	2304      	movs	r3, #4
 80221fa:	e0ad      	b.n	8022358 <memoryWriteSlot+0x180>

    //Get memory driver
    memory = (Memory*)slot->memParent;
 80221fc:	68fb      	ldr	r3, [r7, #12]
 80221fe:	685b      	ldr	r3, [r3, #4]
 8022200:	63fb      	str	r3, [r7, #60]	@ 0x3c
    memoryDriver = memory->driver;
 8022202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022206:	63bb      	str	r3, [r7, #56]	@ 0x38

    //Initialize variables
    cboot_error = CBOOT_NO_ERROR;
 8022208:	2300      	movs	r3, #0
 802220a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    error = NO_ERROR;
 802220e:	2300      	movs	r3, #0
 8022210:	86bb      	strh	r3, [r7, #52]	@ 0x34
    *written = 0;
 8022212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8022214:	2200      	movs	r2, #0
 8022216:	601a      	str	r2, [r3, #0]

    if(slot->type == SLOT_TYPE_DIRECT)
 8022218:	68fb      	ldr	r3, [r7, #12]
 802221a:	781b      	ldrb	r3, [r3, #0]
 802221c:	2b01      	cmp	r3, #1
 802221e:	f040 8098 	bne.w	8022352 <memoryWriteSlot+0x17a>
    {
        //Get memory driver information
        cboot_error = memoryGetInfo(memory, &memoryInfo);
 8022222:	f107 0310 	add.w	r3, r7, #16
 8022226:	4619      	mov	r1, r3
 8022228:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 802222a:	f7ff ff92 	bl	8022152 <memoryGetInfo>
 802222e:	4603      	mov	r3, r0
 8022230:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        //Is any error?
        if(cboot_error)
 8022234:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8022238:	2b00      	cmp	r3, #0
 802223a:	d002      	beq.n	8022242 <memoryWriteSlot+0x6a>
            return cboot_error;
 802223c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8022240:	e08a      	b.n	8022358 <memoryWriteSlot+0x180>

        //Get memory driver write block size
        writeBlockSize = memoryInfo.writeSize;
 8022242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022244:	633b      	str	r3, [r7, #48]	@ 0x30

        //Reset of memory write buffer required?
        if(flag == MEMORY_WRITE_RESET_FLAG)
 8022246:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 802224a:	2b02      	cmp	r3, #2
 802224c:	d14b      	bne.n	80222e6 <memoryWriteSlot+0x10e>
        {
            memoryResetWriteBuffer();
 802224e:	f000 f9f7 	bl	8022640 <memoryResetWriteBuffer>
        }

        //Process incoming data
        while(length > 0)
 8022252:	e048      	b.n	80222e6 <memoryWriteSlot+0x10e>
        {
            //Fill temporary buffer to reach allowed flash memory write block size
            n = MIN(length, writeBlockSize - memWriteBufferLen);
 8022254:	4b42      	ldr	r3, [pc, #264]	@ (8022360 <memoryWriteSlot+0x188>)
 8022256:	681b      	ldr	r3, [r3, #0]
 8022258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802225a:	1ad3      	subs	r3, r2, r3
 802225c:	683a      	ldr	r2, [r7, #0]
 802225e:	4293      	cmp	r3, r2
 8022260:	bf28      	it	cs
 8022262:	4613      	movcs	r3, r2
 8022264:	62fb      	str	r3, [r7, #44]	@ 0x2c

            //Fill buffer
            memcpy(memWriteBufferPos, buffer, n);
 8022266:	4b3f      	ldr	r3, [pc, #252]	@ (8022364 <memoryWriteSlot+0x18c>)
 8022268:	681b      	ldr	r3, [r3, #0]
 802226a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802226c:	6879      	ldr	r1, [r7, #4]
 802226e:	4618      	mov	r0, r3
 8022270:	f009 fd9f 	bl	802bdb2 <memcpy>
            //Update temporary buffer position
            memWriteBufferPos += n;
 8022274:	4b3b      	ldr	r3, [pc, #236]	@ (8022364 <memoryWriteSlot+0x18c>)
 8022276:	681a      	ldr	r2, [r3, #0]
 8022278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802227a:	4413      	add	r3, r2
 802227c:	4a39      	ldr	r2, [pc, #228]	@ (8022364 <memoryWriteSlot+0x18c>)
 802227e:	6013      	str	r3, [r2, #0]
            //Update temporary buffer length
            memWriteBufferLen += n;
 8022280:	4b37      	ldr	r3, [pc, #220]	@ (8022360 <memoryWriteSlot+0x188>)
 8022282:	681a      	ldr	r2, [r3, #0]
 8022284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022286:	4413      	add	r3, r2
 8022288:	4a35      	ldr	r2, [pc, #212]	@ (8022360 <memoryWriteSlot+0x188>)
 802228a:	6013      	str	r3, [r2, #0]
            //Advance data pointer
            buffer += n;
 802228c:	687a      	ldr	r2, [r7, #4]
 802228e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022290:	4413      	add	r3, r2
 8022292:	607b      	str	r3, [r7, #4]
            //Remaining bytes to process
            length -= n;
 8022294:	683a      	ldr	r2, [r7, #0]
 8022296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022298:	1ad3      	subs	r3, r2, r3
 802229a:	603b      	str	r3, [r7, #0]

            //Enough data to write?
            if(memWriteBufferLen == writeBlockSize)
 802229c:	4b30      	ldr	r3, [pc, #192]	@ (8022360 <memoryWriteSlot+0x188>)
 802229e:	681b      	ldr	r3, [r3, #0]
 80222a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80222a2:	429a      	cmp	r2, r3
 80222a4:	d11f      	bne.n	80222e6 <memoryWriteSlot+0x10e>
            {
                //Write image data into memory
                error = ((const FlashDriver*)memoryDriver)->write(
 80222a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80222a8:	691b      	ldr	r3, [r3, #16]
                    slot->addr + offset, (uint8_t*)memWriteBuffer, writeBlockSize);
 80222aa:	68fa      	ldr	r2, [r7, #12]
 80222ac:	6891      	ldr	r1, [r2, #8]
                error = ((const FlashDriver*)memoryDriver)->write(
 80222ae:	68ba      	ldr	r2, [r7, #8]
 80222b0:	1888      	adds	r0, r1, r2
 80222b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80222b4:	492c      	ldr	r1, [pc, #176]	@ (8022368 <memoryWriteSlot+0x190>)
 80222b6:	4798      	blx	r3
 80222b8:	4603      	mov	r3, r0
 80222ba:	86bb      	strh	r3, [r7, #52]	@ 0x34
                //Is any error?
                if(error)
 80222bc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80222be:	2b00      	cmp	r3, #0
 80222c0:	d001      	beq.n	80222c6 <memoryWriteSlot+0xee>
                {
                    //Debug message
                    TRACE_ERROR("Failed to write image data into flash memory!\r\n");
                    return CBOOT_ERROR_FAILURE;
 80222c2:	2301      	movs	r3, #1
 80222c4:	e048      	b.n	8022358 <memoryWriteSlot+0x180>
                }

                //Update written bytes
                *written += writeBlockSize;
 80222c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80222c8:	681a      	ldr	r2, [r3, #0]
 80222ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80222cc:	441a      	add	r2, r3
 80222ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80222d0:	601a      	str	r2, [r3, #0]

                //Increase offset
                offset += writeBlockSize;
 80222d2:	68ba      	ldr	r2, [r7, #8]
 80222d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80222d6:	4413      	add	r3, r2
 80222d8:	60bb      	str	r3, [r7, #8]

                //Reset temporary buffer position
                memWriteBufferPos = memWriteBuffer;
 80222da:	4b22      	ldr	r3, [pc, #136]	@ (8022364 <memoryWriteSlot+0x18c>)
 80222dc:	4a22      	ldr	r2, [pc, #136]	@ (8022368 <memoryWriteSlot+0x190>)
 80222de:	601a      	str	r2, [r3, #0]
                //Reset temporary buffer length
                memWriteBufferLen = 0;
 80222e0:	4b1f      	ldr	r3, [pc, #124]	@ (8022360 <memoryWriteSlot+0x188>)
 80222e2:	2200      	movs	r2, #0
 80222e4:	601a      	str	r2, [r3, #0]
        while(length > 0)
 80222e6:	683b      	ldr	r3, [r7, #0]
 80222e8:	2b00      	cmp	r3, #0
 80222ea:	d1b3      	bne.n	8022254 <memoryWriteSlot+0x7c>
            }
        }

        //Force writting of memory write buffer required?
        if(memWriteBufferLen != 0 && flag == MEMORY_WRITE_FORCE_FLAG)
 80222ec:	4b1c      	ldr	r3, [pc, #112]	@ (8022360 <memoryWriteSlot+0x188>)
 80222ee:	681b      	ldr	r3, [r3, #0]
 80222f0:	2b00      	cmp	r3, #0
 80222f2:	d030      	beq.n	8022356 <memoryWriteSlot+0x17e>
 80222f4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80222f8:	2b01      	cmp	r3, #1
 80222fa:	d12c      	bne.n	8022356 <memoryWriteSlot+0x17e>
        {
            //Complete buffer with padding to reach minimum allowed write block size
            memset(memWriteBufferPos, 0x00, writeBlockSize - memWriteBufferLen);
 80222fc:	4b19      	ldr	r3, [pc, #100]	@ (8022364 <memoryWriteSlot+0x18c>)
 80222fe:	6818      	ldr	r0, [r3, #0]
 8022300:	4b17      	ldr	r3, [pc, #92]	@ (8022360 <memoryWriteSlot+0x188>)
 8022302:	681b      	ldr	r3, [r3, #0]
 8022304:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8022306:	1ad3      	subs	r3, r2, r3
 8022308:	461a      	mov	r2, r3
 802230a:	2100      	movs	r1, #0
 802230c:	f009 fc94 	bl	802bc38 <memset>

            //Write image data into external flash memory
            error = ((const FlashDriver*)memoryDriver)->write(
 8022310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022312:	691b      	ldr	r3, [r3, #16]
                slot->addr + offset, (uint8_t*)memWriteBuffer, writeBlockSize);
 8022314:	68fa      	ldr	r2, [r7, #12]
 8022316:	6891      	ldr	r1, [r2, #8]
            error = ((const FlashDriver*)memoryDriver)->write(
 8022318:	68ba      	ldr	r2, [r7, #8]
 802231a:	1888      	adds	r0, r1, r2
 802231c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802231e:	4912      	ldr	r1, [pc, #72]	@ (8022368 <memoryWriteSlot+0x190>)
 8022320:	4798      	blx	r3
 8022322:	4603      	mov	r3, r0
 8022324:	86bb      	strh	r3, [r7, #52]	@ 0x34
            //Is any error?
            if(error)
 8022326:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8022328:	2b00      	cmp	r3, #0
 802232a:	d001      	beq.n	8022330 <memoryWriteSlot+0x158>
            {
                //Debug message
                TRACE_ERROR("Failed to write image data into memory!\r\n");
                return CBOOT_ERROR_FAILURE;
 802232c:	2301      	movs	r3, #1
 802232e:	e013      	b.n	8022358 <memoryWriteSlot+0x180>
            }

            //Update written bytes
            *written += writeBlockSize;
 8022330:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8022332:	681a      	ldr	r2, [r3, #0]
 8022334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022336:	441a      	add	r2, r3
 8022338:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802233a:	601a      	str	r2, [r3, #0]

            //Increase offset
            offset += writeBlockSize;
 802233c:	68ba      	ldr	r2, [r7, #8]
 802233e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022340:	4413      	add	r3, r2
 8022342:	60bb      	str	r3, [r7, #8]

            //Reset temporary buffer position
            memWriteBufferPos = memWriteBuffer;
 8022344:	4b07      	ldr	r3, [pc, #28]	@ (8022364 <memoryWriteSlot+0x18c>)
 8022346:	4a08      	ldr	r2, [pc, #32]	@ (8022368 <memoryWriteSlot+0x190>)
 8022348:	601a      	str	r2, [r3, #0]
            //Reset temporary buffer length
            memWriteBufferLen = 0;
 802234a:	4b05      	ldr	r3, [pc, #20]	@ (8022360 <memoryWriteSlot+0x188>)
 802234c:	2200      	movs	r2, #0
 802234e:	601a      	str	r2, [r3, #0]
 8022350:	e001      	b.n	8022356 <memoryWriteSlot+0x17e>
        }
    }
#endif
    else
    {
        return CBOOT_ERROR_UNKNOWN_SLOT_TYPE;
 8022352:	2315      	movs	r3, #21
 8022354:	e000      	b.n	8022358 <memoryWriteSlot+0x180>
    }

    //Successful process
    return CBOOT_NO_ERROR;
 8022356:	2300      	movs	r3, #0
}
 8022358:	4618      	mov	r0, r3
 802235a:	3740      	adds	r7, #64	@ 0x40
 802235c:	46bd      	mov	sp, r7
 802235e:	bd80      	pop	{r7, pc}
 8022360:	200000e8 	.word	0x200000e8
 8022364:	20000000 	.word	0x20000000
 8022368:	200000a8 	.word	0x200000a8

0802236c <memoryReadSlot>:
/**
 * @brief Read Data from Memory function
 **/

cboot_error_t memoryReadSlot(Slot *slot, uint32_t offset, uint8_t* buffer, size_t length)
{
 802236c:	b580      	push	{r7, lr}
 802236e:	b086      	sub	sp, #24
 8022370:	af00      	add	r7, sp, #0
 8022372:	60f8      	str	r0, [r7, #12]
 8022374:	60b9      	str	r1, [r7, #8]
 8022376:	607a      	str	r2, [r7, #4]
 8022378:	603b      	str	r3, [r7, #0]
   error_t error = NO_ERROR;
 802237a:	2300      	movs	r3, #0
 802237c:	82fb      	strh	r3, [r7, #22]

   const void* memoryDriver = ((const Memory*)slot->memParent)->driver;
 802237e:	68fb      	ldr	r3, [r7, #12]
 8022380:	685b      	ldr	r3, [r3, #4]
 8022382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022384:	613b      	str	r3, [r7, #16]

   if(slot->type == SLOT_TYPE_DIRECT)
 8022386:	68fb      	ldr	r3, [r7, #12]
 8022388:	781b      	ldrb	r3, [r3, #0]
 802238a:	2b01      	cmp	r3, #1
 802238c:	d112      	bne.n	80223b4 <memoryReadSlot+0x48>
   {
      error = ((const FlashDriver*)memoryDriver)->read(slot->addr + offset,buffer,length);
 802238e:	693b      	ldr	r3, [r7, #16]
 8022390:	695b      	ldr	r3, [r3, #20]
 8022392:	68fa      	ldr	r2, [r7, #12]
 8022394:	6891      	ldr	r1, [r2, #8]
 8022396:	68ba      	ldr	r2, [r7, #8]
 8022398:	1888      	adds	r0, r1, r2
 802239a:	683a      	ldr	r2, [r7, #0]
 802239c:	6879      	ldr	r1, [r7, #4]
 802239e:	4798      	blx	r3
 80223a0:	4603      	mov	r3, r0
 80223a2:	82fb      	strh	r3, [r7, #22]
      if(error) {
 80223a4:	8afb      	ldrh	r3, [r7, #22]
 80223a6:	2b00      	cmp	r3, #0
 80223a8:	d006      	beq.n	80223b8 <memoryReadSlot+0x4c>
         cleanupSlotHandler(slot);
 80223aa:	68f8      	ldr	r0, [r7, #12]
 80223ac:	f000 f879 	bl	80224a2 <cleanupSlotHandler>
         return CBOOT_ERROR_MEMORY_DRIVER_READ_FAILED;
 80223b0:	231e      	movs	r3, #30
 80223b2:	e002      	b.n	80223ba <memoryReadSlot+0x4e>
      }
   }
#endif
   else
   {
      return CBOOT_ERROR_UNKNOWN_SLOT_TYPE;
 80223b4:	2315      	movs	r3, #21
 80223b6:	e000      	b.n	80223ba <memoryReadSlot+0x4e>
   }

   //Successful process
   return CBOOT_NO_ERROR;
 80223b8:	2300      	movs	r3, #0
}
 80223ba:	4618      	mov	r0, r3
 80223bc:	3718      	adds	r7, #24
 80223be:	46bd      	mov	sp, r7
 80223c0:	bd80      	pop	{r7, pc}

080223c2 <memoryEraseSlot>:
/**
 * @brief Erase Data from Memory function
 **/

cboot_error_t memoryEraseSlot(Slot *slot, uint32_t offset, size_t length)
{
 80223c2:	b580      	push	{r7, lr}
 80223c4:	b086      	sub	sp, #24
 80223c6:	af00      	add	r7, sp, #0
 80223c8:	60f8      	str	r0, [r7, #12]
 80223ca:	60b9      	str	r1, [r7, #8]
 80223cc:	607a      	str	r2, [r7, #4]
   error_t error = NO_ERROR;
 80223ce:	2300      	movs	r3, #0
 80223d0:	82fb      	strh	r3, [r7, #22]

   const void* memoryDriver = ((const Memory*)slot->memParent)->driver;
 80223d2:	68fb      	ldr	r3, [r7, #12]
 80223d4:	685b      	ldr	r3, [r3, #4]
 80223d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80223d8:	613b      	str	r3, [r7, #16]

   if(slot->type == SLOT_TYPE_DIRECT)
 80223da:	68fb      	ldr	r3, [r7, #12]
 80223dc:	781b      	ldrb	r3, [r3, #0]
 80223de:	2b01      	cmp	r3, #1
 80223e0:	d112      	bne.n	8022408 <memoryEraseSlot+0x46>
   {
      error = ((const FlashDriver*)memoryDriver)->erase(slot->addr + offset,length);
 80223e2:	693b      	ldr	r3, [r7, #16]
 80223e4:	699b      	ldr	r3, [r3, #24]
 80223e6:	68fa      	ldr	r2, [r7, #12]
 80223e8:	6891      	ldr	r1, [r2, #8]
 80223ea:	68ba      	ldr	r2, [r7, #8]
 80223ec:	440a      	add	r2, r1
 80223ee:	6879      	ldr	r1, [r7, #4]
 80223f0:	4610      	mov	r0, r2
 80223f2:	4798      	blx	r3
 80223f4:	4603      	mov	r3, r0
 80223f6:	82fb      	strh	r3, [r7, #22]
      if(error) {
 80223f8:	8afb      	ldrh	r3, [r7, #22]
 80223fa:	2b00      	cmp	r3, #0
 80223fc:	d006      	beq.n	802240c <memoryEraseSlot+0x4a>
         cleanupSlotHandler(slot);
 80223fe:	68f8      	ldr	r0, [r7, #12]
 8022400:	f000 f84f 	bl	80224a2 <cleanupSlotHandler>
         return CBOOT_ERROR_MEMORY_DRIVER_ERASE_FAILED;
 8022404:	231f      	movs	r3, #31
 8022406:	e002      	b.n	802240e <memoryEraseSlot+0x4c>
      }
   }
#endif
   else
   {
      return CBOOT_ERROR_UNKNOWN_SLOT_TYPE;
 8022408:	2315      	movs	r3, #21
 802240a:	e000      	b.n	802240e <memoryEraseSlot+0x4c>
   }

   //Successful process
   return CBOOT_NO_ERROR;
 802240c:	2300      	movs	r3, #0
}
 802240e:	4618      	mov	r0, r3
 8022410:	3718      	adds	r7, #24
 8022412:	46bd      	mov	sp, r7
 8022414:	bd80      	pop	{r7, pc}

08022416 <isSlotsOverlap>:
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

bool_t isSlotsOverlap(Slot *slot1, Slot *slot2)
{
 8022416:	b480      	push	{r7}
 8022418:	b085      	sub	sp, #20
 802241a:	af00      	add	r7, sp, #0
 802241c:	6078      	str	r0, [r7, #4]
 802241e:	6039      	str	r1, [r7, #0]
   bool_t res;

   res = 0;
 8022420:	2300      	movs	r3, #0
 8022422:	60fb      	str	r3, [r7, #12]

	if(slot1 != NULL && slot2 != NULL && slot1->type == slot2->type)
 8022424:	687b      	ldr	r3, [r7, #4]
 8022426:	2b00      	cmp	r3, #0
 8022428:	d030      	beq.n	802248c <isSlotsOverlap+0x76>
 802242a:	683b      	ldr	r3, [r7, #0]
 802242c:	2b00      	cmp	r3, #0
 802242e:	d02d      	beq.n	802248c <isSlotsOverlap+0x76>
 8022430:	687b      	ldr	r3, [r7, #4]
 8022432:	781a      	ldrb	r2, [r3, #0]
 8022434:	683b      	ldr	r3, [r7, #0]
 8022436:	781b      	ldrb	r3, [r3, #0]
 8022438:	429a      	cmp	r2, r3
 802243a:	d127      	bne.n	802248c <isSlotsOverlap+0x76>
	{
      if(slot1->type == SLOT_TYPE_DIRECT)
 802243c:	687b      	ldr	r3, [r7, #4]
 802243e:	781b      	ldrb	r3, [r3, #0]
 8022440:	2b01      	cmp	r3, #1
 8022442:	d120      	bne.n	8022486 <isSlotsOverlap+0x70>
      {
         //Are flash slots 1 & 2 overlapping?
         if(((slot1->addr >= slot2->addr) && (slot1->addr < (slot2->addr + slot2->size))) ||
 8022444:	687b      	ldr	r3, [r7, #4]
 8022446:	689a      	ldr	r2, [r3, #8]
 8022448:	683b      	ldr	r3, [r7, #0]
 802244a:	689b      	ldr	r3, [r3, #8]
 802244c:	429a      	cmp	r2, r3
 802244e:	d308      	bcc.n	8022462 <isSlotsOverlap+0x4c>
 8022450:	687b      	ldr	r3, [r7, #4]
 8022452:	689a      	ldr	r2, [r3, #8]
 8022454:	683b      	ldr	r3, [r7, #0]
 8022456:	6899      	ldr	r1, [r3, #8]
 8022458:	683b      	ldr	r3, [r7, #0]
 802245a:	68db      	ldr	r3, [r3, #12]
 802245c:	440b      	add	r3, r1
 802245e:	429a      	cmp	r2, r3
 8022460:	d30e      	bcc.n	8022480 <isSlotsOverlap+0x6a>
            ((slot2->addr >= slot1->addr) && (slot2->addr < (slot1->addr + slot1->size))))
 8022462:	683b      	ldr	r3, [r7, #0]
 8022464:	689a      	ldr	r2, [r3, #8]
 8022466:	687b      	ldr	r3, [r7, #4]
 8022468:	689b      	ldr	r3, [r3, #8]
         if(((slot1->addr >= slot2->addr) && (slot1->addr < (slot2->addr + slot2->size))) ||
 802246a:	429a      	cmp	r2, r3
 802246c:	d311      	bcc.n	8022492 <isSlotsOverlap+0x7c>
            ((slot2->addr >= slot1->addr) && (slot2->addr < (slot1->addr + slot1->size))))
 802246e:	683b      	ldr	r3, [r7, #0]
 8022470:	689a      	ldr	r2, [r3, #8]
 8022472:	687b      	ldr	r3, [r7, #4]
 8022474:	6899      	ldr	r1, [r3, #8]
 8022476:	687b      	ldr	r3, [r7, #4]
 8022478:	68db      	ldr	r3, [r3, #12]
 802247a:	440b      	add	r3, r1
 802247c:	429a      	cmp	r2, r3
 802247e:	d208      	bcs.n	8022492 <isSlotsOverlap+0x7c>
			{
				//Slots overlapping
				res = 1;
 8022480:	2301      	movs	r3, #1
 8022482:	60fb      	str	r3, [r7, #12]
      if(slot1->type == SLOT_TYPE_DIRECT)
 8022484:	e005      	b.n	8022492 <isSlotsOverlap+0x7c>
		}
#endif
		else
		{
			//Unknown slot type
			res  = 1;
 8022486:	2301      	movs	r3, #1
 8022488:	60fb      	str	r3, [r7, #12]
      if(slot1->type == SLOT_TYPE_DIRECT)
 802248a:	e002      	b.n	8022492 <isSlotsOverlap+0x7c>
		}
   }
   else
   {
      //Bad parameters
      res = 1;
 802248c:	2301      	movs	r3, #1
 802248e:	60fb      	str	r3, [r7, #12]
 8022490:	e000      	b.n	8022494 <isSlotsOverlap+0x7e>
      if(slot1->type == SLOT_TYPE_DIRECT)
 8022492:	bf00      	nop
   }

   //Return result
   return res;
 8022494:	68fb      	ldr	r3, [r7, #12]
}
 8022496:	4618      	mov	r0, r3
 8022498:	3714      	adds	r7, #20
 802249a:	46bd      	mov	sp, r7
 802249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224a0:	4770      	bx	lr

080224a2 <cleanupSlotHandler>:

cboot_error_t cleanupSlotHandler(Slot *slot)
{
 80224a2:	b580      	push	{r7, lr}
 80224a4:	b086      	sub	sp, #24
 80224a6:	af00      	add	r7, sp, #0
 80224a8:	6078      	str	r0, [r7, #4]
   error_t error;
   Memory const *memory = (Memory  *)slot->memParent;
 80224aa:	687b      	ldr	r3, [r7, #4]
 80224ac:	685b      	ldr	r3, [r3, #4]
 80224ae:	617b      	str	r3, [r7, #20]
      if(error)
         return CBOOT_ERROR_MEMORY_DRIVER_CLOSE_FAILED;
   }
#endif

   if(slot->type == SLOT_TYPE_DIRECT) {
 80224b0:	687b      	ldr	r3, [r7, #4]
 80224b2:	781b      	ldrb	r3, [r3, #0]
 80224b4:	2b01      	cmp	r3, #1
 80224b6:	d10c      	bne.n	80224d2 <cleanupSlotHandler+0x30>
      const FlashDriver *driver = memory->driver;
 80224b8:	697b      	ldr	r3, [r7, #20]
 80224ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80224bc:	613b      	str	r3, [r7, #16]
      error = driver->deInit();
 80224be:	693b      	ldr	r3, [r7, #16]
 80224c0:	685b      	ldr	r3, [r3, #4]
 80224c2:	4798      	blx	r3
 80224c4:	4603      	mov	r3, r0
 80224c6:	81fb      	strh	r3, [r7, #14]
      if(error)
 80224c8:	89fb      	ldrh	r3, [r7, #14]
 80224ca:	2b00      	cmp	r3, #0
 80224cc:	d001      	beq.n	80224d2 <cleanupSlotHandler+0x30>
         return CBOOT_ERROR_MEMORY_DRIVER_DEINIT_FAILED;
 80224ce:	231c      	movs	r3, #28
 80224d0:	e000      	b.n	80224d4 <cleanupSlotHandler+0x32>
   }

   //Successful process
   return CBOOT_NO_ERROR;
 80224d2:	2300      	movs	r3, #0
}
 80224d4:	4618      	mov	r0, r3
 80224d6:	3718      	adds	r7, #24
 80224d8:	46bd      	mov	sp, r7
 80224da:	bd80      	pop	{r7, pc}

080224dc <slotsInit>:


cboot_error_t slotsInit(Memory* memory) {
 80224dc:	b580      	push	{r7, lr}
 80224de:	b086      	sub	sp, #24
 80224e0:	af00      	add	r7, sp, #0
 80224e2:	6078      	str	r0, [r7, #4]
   uint_t i;
   const void* memoryDriver;
   Slot *slot;

   //Check parameters
   if(memory == NULL)
 80224e4:	687b      	ldr	r3, [r7, #4]
 80224e6:	2b00      	cmp	r3, #0
 80224e8:	d101      	bne.n	80224ee <slotsInit+0x12>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80224ea:	2304      	movs	r3, #4
 80224ec:	e04d      	b.n	802258a <slotsInit+0xae>

   if(memory->nbSlots == 0 || memory->nbSlots > NB_MAX_MEMORY_SLOTS)
 80224ee:	687b      	ldr	r3, [r7, #4]
 80224f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80224f4:	2b00      	cmp	r3, #0
 80224f6:	d004      	beq.n	8022502 <slotsInit+0x26>
 80224f8:	687b      	ldr	r3, [r7, #4]
 80224fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80224fe:	2b02      	cmp	r3, #2
 8022500:	d901      	bls.n	8022506 <slotsInit+0x2a>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8022502:	2304      	movs	r3, #4
 8022504:	e041      	b.n	802258a <slotsInit+0xae>

   memoryDriver = memory->driver;
 8022506:	687b      	ldr	r3, [r7, #4]
 8022508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802250a:	613b      	str	r3, [r7, #16]

   //Loop through memory slots
   for(i = 0; i < memory->nbSlots; i++)
 802250c:	2300      	movs	r3, #0
 802250e:	617b      	str	r3, [r7, #20]
 8022510:	e033      	b.n	802257a <slotsInit+0x9e>
   {
      slot = &memory->slots[i];
 8022512:	697b      	ldr	r3, [r7, #20]
 8022514:	011b      	lsls	r3, r3, #4
 8022516:	3308      	adds	r3, #8
 8022518:	687a      	ldr	r2, [r7, #4]
 802251a:	4413      	add	r3, r2
 802251c:	60fb      	str	r3, [r7, #12]

      //if(slot->cType == SLOT_CONTENT_NONE || slot->cType > SLOT_CONTENT_BOOT)

      //Set memory parent for each slot
      slot->memParent = (void*)memory;
 802251e:	68fb      	ldr	r3, [r7, #12]
 8022520:	687a      	ldr	r2, [r7, #4]
 8022522:	605a      	str	r2, [r3, #4]

      //Is it a direct slot? (flash slot)

      if(slot->type == SLOT_TYPE_DIRECT)
 8022524:	68fb      	ldr	r3, [r7, #12]
 8022526:	781b      	ldrb	r3, [r3, #0]
 8022528:	2b01      	cmp	r3, #1
 802252a:	d10a      	bne.n	8022542 <slotsInit+0x66>
      {
			//Check slot start address matches a sector address
			if(!(((const FlashDriver*)memoryDriver)->isSectorAddr(slot->addr)))
 802252c:	693b      	ldr	r3, [r7, #16]
 802252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022530:	68fa      	ldr	r2, [r7, #12]
 8022532:	6892      	ldr	r2, [r2, #8]
 8022534:	4610      	mov	r0, r2
 8022536:	4798      	blx	r3
 8022538:	4603      	mov	r3, r0
 802253a:	2b00      	cmp	r3, #0
 802253c:	d101      	bne.n	8022542 <slotsInit+0x66>
				return CBOOT_ERROR_INVALID_ADDRESS;
 802253e:	2305      	movs	r3, #5
 8022540:	e023      	b.n	802258a <slotsInit+0xae>
      }

      if(i < memory->nbSlots-1)
 8022542:	687b      	ldr	r3, [r7, #4]
 8022544:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8022548:	3b01      	subs	r3, #1
 802254a:	461a      	mov	r2, r3
 802254c:	697b      	ldr	r3, [r7, #20]
 802254e:	4293      	cmp	r3, r2
 8022550:	d210      	bcs.n	8022574 <slotsInit+0x98>
      {
         //Check slots overlapping
         if(isSlotsOverlap(&memory->slots[0], &memory->slots[i+1]))
 8022552:	687b      	ldr	r3, [r7, #4]
 8022554:	f103 0008 	add.w	r0, r3, #8
 8022558:	697b      	ldr	r3, [r7, #20]
 802255a:	3301      	adds	r3, #1
 802255c:	011b      	lsls	r3, r3, #4
 802255e:	3308      	adds	r3, #8
 8022560:	687a      	ldr	r2, [r7, #4]
 8022562:	4413      	add	r3, r2
 8022564:	4619      	mov	r1, r3
 8022566:	f7ff ff56 	bl	8022416 <isSlotsOverlap>
 802256a:	4603      	mov	r3, r0
 802256c:	2b00      	cmp	r3, #0
 802256e:	d001      	beq.n	8022574 <slotsInit+0x98>
				return CBOOT_ERROR_SLOTS_OVERLAP;
 8022570:	2314      	movs	r3, #20
 8022572:	e00a      	b.n	802258a <slotsInit+0xae>
   for(i = 0; i < memory->nbSlots; i++)
 8022574:	697b      	ldr	r3, [r7, #20]
 8022576:	3301      	adds	r3, #1
 8022578:	617b      	str	r3, [r7, #20]
 802257a:	687b      	ldr	r3, [r7, #4]
 802257c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8022580:	461a      	mov	r2, r3
 8022582:	697b      	ldr	r3, [r7, #20]
 8022584:	4293      	cmp	r3, r2
 8022586:	d3c4      	bcc.n	8022512 <slotsInit+0x36>
      }
#endif
   }

   //Successful process
   return CBOOT_NO_ERROR;
 8022588:	2300      	movs	r3, #0
}
 802258a:	4618      	mov	r0, r3
 802258c:	3718      	adds	r7, #24
 802258e:	46bd      	mov	sp, r7
 8022590:	bd80      	pop	{r7, pc}

08022592 <memoryGetSlotByCType>:
 * @param slotCType Slot content type we are looking for
 * @param slot Pointer to the slot we are looking for
 * @return cboot_error_t
 **/
cboot_error_t memoryGetSlotByCType(Memory* memory, uint8_t slotCType, Slot **slot)
{
 8022592:	b480      	push	{r7}
 8022594:	b087      	sub	sp, #28
 8022596:	af00      	add	r7, sp, #0
 8022598:	60f8      	str	r0, [r7, #12]
 802259a:	460b      	mov	r3, r1
 802259c:	607a      	str	r2, [r7, #4]
 802259e:	72fb      	strb	r3, [r7, #11]
   uint_t i;

   if(memory == NULL || slotCType == 0 || slot == NULL)
 80225a0:	68fb      	ldr	r3, [r7, #12]
 80225a2:	2b00      	cmp	r3, #0
 80225a4:	d005      	beq.n	80225b2 <memoryGetSlotByCType+0x20>
 80225a6:	7afb      	ldrb	r3, [r7, #11]
 80225a8:	2b00      	cmp	r3, #0
 80225aa:	d002      	beq.n	80225b2 <memoryGetSlotByCType+0x20>
 80225ac:	687b      	ldr	r3, [r7, #4]
 80225ae:	2b00      	cmp	r3, #0
 80225b0:	d101      	bne.n	80225b6 <memoryGetSlotByCType+0x24>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80225b2:	2304      	movs	r3, #4
 80225b4:	e027      	b.n	8022606 <memoryGetSlotByCType+0x74>

   *slot = NULL;
 80225b6:	687b      	ldr	r3, [r7, #4]
 80225b8:	2200      	movs	r2, #0
 80225ba:	601a      	str	r2, [r3, #0]

   for(i = 0; i < memory->nbSlots; i++)
 80225bc:	2300      	movs	r3, #0
 80225be:	617b      	str	r3, [r7, #20]
 80225c0:	e013      	b.n	80225ea <memoryGetSlotByCType+0x58>
   {
      if(memory->slots[i].cType == slotCType)
 80225c2:	68fa      	ldr	r2, [r7, #12]
 80225c4:	697b      	ldr	r3, [r7, #20]
 80225c6:	011b      	lsls	r3, r3, #4
 80225c8:	4413      	add	r3, r2
 80225ca:	3309      	adds	r3, #9
 80225cc:	781b      	ldrb	r3, [r3, #0]
 80225ce:	7afa      	ldrb	r2, [r7, #11]
 80225d0:	429a      	cmp	r2, r3
 80225d2:	d107      	bne.n	80225e4 <memoryGetSlotByCType+0x52>
      {
         *slot = &memory->slots[i];
 80225d4:	697b      	ldr	r3, [r7, #20]
 80225d6:	011b      	lsls	r3, r3, #4
 80225d8:	3308      	adds	r3, #8
 80225da:	68fa      	ldr	r2, [r7, #12]
 80225dc:	441a      	add	r2, r3
 80225de:	687b      	ldr	r3, [r7, #4]
 80225e0:	601a      	str	r2, [r3, #0]
         break;
 80225e2:	e009      	b.n	80225f8 <memoryGetSlotByCType+0x66>
   for(i = 0; i < memory->nbSlots; i++)
 80225e4:	697b      	ldr	r3, [r7, #20]
 80225e6:	3301      	adds	r3, #1
 80225e8:	617b      	str	r3, [r7, #20]
 80225ea:	68fb      	ldr	r3, [r7, #12]
 80225ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80225f0:	461a      	mov	r2, r3
 80225f2:	697b      	ldr	r3, [r7, #20]
 80225f4:	4293      	cmp	r3, r2
 80225f6:	d3e4      	bcc.n	80225c2 <memoryGetSlotByCType+0x30>
      }
   }

   if(*slot == NULL)
 80225f8:	687b      	ldr	r3, [r7, #4]
 80225fa:	681b      	ldr	r3, [r3, #0]
 80225fc:	2b00      	cmp	r3, #0
 80225fe:	d101      	bne.n	8022604 <memoryGetSlotByCType+0x72>
      return CBOOT_ERROR_FAILURE;
 8022600:	2301      	movs	r3, #1
 8022602:	e000      	b.n	8022606 <memoryGetSlotByCType+0x74>
   else
      return CBOOT_NO_ERROR;
 8022604:	2300      	movs	r3, #0
}
 8022606:	4618      	mov	r0, r3
 8022608:	371c      	adds	r7, #28
 802260a:	46bd      	mov	sp, r7
 802260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022610:	4770      	bx	lr
	...

08022614 <memoryInitWriteBuffer>:
/**
 * @brief Initialize memory write buffer
 **/

void memoryInitWriteBuffer(void)
{
 8022614:	b580      	push	{r7, lr}
 8022616:	af00      	add	r7, sp, #0
   memset(memWriteBuffer, 0, sizeof(memWriteBuffer));
 8022618:	2240      	movs	r2, #64	@ 0x40
 802261a:	2100      	movs	r1, #0
 802261c:	4805      	ldr	r0, [pc, #20]	@ (8022634 <memoryInitWriteBuffer+0x20>)
 802261e:	f009 fb0b 	bl	802bc38 <memset>
   memWriteBufferPos = memWriteBuffer;
 8022622:	4b05      	ldr	r3, [pc, #20]	@ (8022638 <memoryInitWriteBuffer+0x24>)
 8022624:	4a03      	ldr	r2, [pc, #12]	@ (8022634 <memoryInitWriteBuffer+0x20>)
 8022626:	601a      	str	r2, [r3, #0]
   memWriteBufferLen = 0;
 8022628:	4b04      	ldr	r3, [pc, #16]	@ (802263c <memoryInitWriteBuffer+0x28>)
 802262a:	2200      	movs	r2, #0
 802262c:	601a      	str	r2, [r3, #0]
}
 802262e:	bf00      	nop
 8022630:	bd80      	pop	{r7, pc}
 8022632:	bf00      	nop
 8022634:	200000a8 	.word	0x200000a8
 8022638:	20000000 	.word	0x20000000
 802263c:	200000e8 	.word	0x200000e8

08022640 <memoryResetWriteBuffer>:
/**
 * @brief Reset memory write buffer
 **/

void memoryResetWriteBuffer(void)
{
 8022640:	b580      	push	{r7, lr}
 8022642:	af00      	add	r7, sp, #0
   memoryInitWriteBuffer();
 8022644:	f7ff ffe6 	bl	8022614 <memoryInitWriteBuffer>
}
 8022648:	bf00      	nop
 802264a:	bd80      	pop	{r7, pc}

0802264c <cipherInit>:

//cboot_error_t cipherInit(CipherEngine *engine, const CipherAlgo *algo,
//   CipherMode mode, const char_t *key, size_t keyLen)
cboot_error_t cipherInit(CipherEngine *engine, const CipherAlgo *algo,
   CipherMode mode, const uint8_t *key, size_t keyLen)
{
 802264c:	b580      	push	{r7, lr}
 802264e:	b086      	sub	sp, #24
 8022650:	af00      	add	r7, sp, #0
 8022652:	60f8      	str	r0, [r7, #12]
 8022654:	60b9      	str	r1, [r7, #8]
 8022656:	603b      	str	r3, [r7, #0]
 8022658:	4613      	mov	r3, r2
 802265a:	71fb      	strb	r3, [r7, #7]
   error_t error;

   //Check parameter validity
   if(engine == NULL)
 802265c:	68fb      	ldr	r3, [r7, #12]
 802265e:	2b00      	cmp	r3, #0
 8022660:	d101      	bne.n	8022666 <cipherInit+0x1a>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8022662:	2304      	movs	r3, #4
 8022664:	e03e      	b.n	80226e4 <cipherInit+0x98>

   //Check cipher engine fields
   if(algo == NULL || mode == CIPHER_MODE_NULL || key == NULL || keyLen == 0)
 8022666:	68bb      	ldr	r3, [r7, #8]
 8022668:	2b00      	cmp	r3, #0
 802266a:	d008      	beq.n	802267e <cipherInit+0x32>
 802266c:	79fb      	ldrb	r3, [r7, #7]
 802266e:	2b00      	cmp	r3, #0
 8022670:	d005      	beq.n	802267e <cipherInit+0x32>
 8022672:	683b      	ldr	r3, [r7, #0]
 8022674:	2b00      	cmp	r3, #0
 8022676:	d002      	beq.n	802267e <cipherInit+0x32>
 8022678:	6a3b      	ldr	r3, [r7, #32]
 802267a:	2b00      	cmp	r3, #0
 802267c:	d101      	bne.n	8022682 <cipherInit+0x36>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 802267e:	2304      	movs	r3, #4
 8022680:	e030      	b.n	80226e4 <cipherInit+0x98>

   //Reset cipher engine contents
   memset(engine, 0, sizeof(CipherEngine));
 8022682:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8022686:	2100      	movs	r1, #0
 8022688:	68f8      	ldr	r0, [r7, #12]
 802268a:	f009 fad5 	bl	802bc38 <memset>

   //Set cipher engine algorithm
   engine->algo = algo;
 802268e:	68fb      	ldr	r3, [r7, #12]
 8022690:	68ba      	ldr	r2, [r7, #8]
 8022692:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
   //Set cipher engine mode
   engine->mode = mode;
 8022696:	68fb      	ldr	r3, [r7, #12]
 8022698:	79fa      	ldrb	r2, [r7, #7]
 802269a:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
   //Set cipher engine key
   engine->key = key;
 802269e:	68fb      	ldr	r3, [r7, #12]
 80226a0:	683a      	ldr	r2, [r7, #0]
 80226a2:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
   //Set cipher engine key length
   engine->keyLen = keyLen;
 80226a6:	68fb      	ldr	r3, [r7, #12]
 80226a8:	6a3a      	ldr	r2, [r7, #32]
 80226aa:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0

   //Initialize cipher engine context
   error = engine->algo->init((void *) &engine->context,
 80226ae:	68fb      	ldr	r3, [r7, #12]
 80226b0:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 80226b4:	691b      	ldr	r3, [r3, #16]
 80226b6:	68f8      	ldr	r0, [r7, #12]
 80226b8:	68fa      	ldr	r2, [r7, #12]
 80226ba:	f8d2 11ec 	ldr.w	r1, [r2, #492]	@ 0x1ec
 80226be:	68fa      	ldr	r2, [r7, #12]
 80226c0:	f8d2 21f0 	ldr.w	r2, [r2, #496]	@ 0x1f0
 80226c4:	4798      	blx	r3
 80226c6:	4603      	mov	r3, r0
 80226c8:	82fb      	strh	r3, [r7, #22]
      (const uint8_t *) engine->key, engine->keyLen);
   //Is any error?
   if(error)
 80226ca:	8afb      	ldrh	r3, [r7, #22]
 80226cc:	2b00      	cmp	r3, #0
 80226ce:	d001      	beq.n	80226d4 <cipherInit+0x88>
      return CBOOT_ERROR_FAILURE;
 80226d0:	2301      	movs	r3, #1
 80226d2:	e007      	b.n	80226e4 <cipherInit+0x98>

   //Set cipher iv length
   engine->ivLen = engine->algo->blockSize;
 80226d4:	68fb      	ldr	r3, [r7, #12]
 80226d6:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 80226da:	68da      	ldr	r2, [r3, #12]
 80226dc:	68fb      	ldr	r3, [r7, #12]
 80226de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

   //Return status code
   return CBOOT_NO_ERROR;
 80226e2:	2300      	movs	r3, #0
}
 80226e4:	4618      	mov	r0, r3
 80226e6:	3718      	adds	r7, #24
 80226e8:	46bd      	mov	sp, r7
 80226ea:	bd80      	pop	{r7, pc}

080226ec <cipherSetIv>:
 * @param[in] ivLen Length of the cipher initialization vector
 * @return Error code
 **/

cboot_error_t cipherSetIv(CipherEngine *engine, uint8_t* iv, size_t ivLen)
{
 80226ec:	b580      	push	{r7, lr}
 80226ee:	b084      	sub	sp, #16
 80226f0:	af00      	add	r7, sp, #0
 80226f2:	60f8      	str	r0, [r7, #12]
 80226f4:	60b9      	str	r1, [r7, #8]
 80226f6:	607a      	str	r2, [r7, #4]
   //Check parameters
   if(engine == NULL || iv == NULL || ivLen == 0)
 80226f8:	68fb      	ldr	r3, [r7, #12]
 80226fa:	2b00      	cmp	r3, #0
 80226fc:	d005      	beq.n	802270a <cipherSetIv+0x1e>
 80226fe:	68bb      	ldr	r3, [r7, #8]
 8022700:	2b00      	cmp	r3, #0
 8022702:	d002      	beq.n	802270a <cipherSetIv+0x1e>
 8022704:	687b      	ldr	r3, [r7, #4]
 8022706:	2b00      	cmp	r3, #0
 8022708:	d101      	bne.n	802270e <cipherSetIv+0x22>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 802270a:	2304      	movs	r3, #4
 802270c:	e008      	b.n	8022720 <cipherSetIv+0x34>

   //Save cipher engine iv
   memcpy(engine->iv, iv, ivLen);
 802270e:	68fb      	ldr	r3, [r7, #12]
 8022710:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8022714:	687a      	ldr	r2, [r7, #4]
 8022716:	68b9      	ldr	r1, [r7, #8]
 8022718:	4618      	mov	r0, r3
 802271a:	f009 fb4a 	bl	802bdb2 <memcpy>

   //Successfull process
   return CBOOT_NO_ERROR;
 802271e:	2300      	movs	r3, #0
}
 8022720:	4618      	mov	r0, r3
 8022722:	3710      	adds	r7, #16
 8022724:	46bd      	mov	sp, r7
 8022726:	bd80      	pop	{r7, pc}

08022728 <cipherDecryptData>:
 * @param[in] length Length of the plaintext data buffer
 * @return Error code
 **/

cboot_error_t cipherDecryptData(CipherEngine *engine, uint8_t *data, size_t length)
{
 8022728:	b580      	push	{r7, lr}
 802272a:	b088      	sub	sp, #32
 802272c:	af02      	add	r7, sp, #8
 802272e:	60f8      	str	r0, [r7, #12]
 8022730:	60b9      	str	r1, [r7, #8]
 8022732:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check parameters validity
   if(engine == NULL || data == NULL || length == 0)
 8022734:	68fb      	ldr	r3, [r7, #12]
 8022736:	2b00      	cmp	r3, #0
 8022738:	d005      	beq.n	8022746 <cipherDecryptData+0x1e>
 802273a:	68bb      	ldr	r3, [r7, #8]
 802273c:	2b00      	cmp	r3, #0
 802273e:	d002      	beq.n	8022746 <cipherDecryptData+0x1e>
 8022740:	687b      	ldr	r3, [r7, #4]
 8022742:	2b00      	cmp	r3, #0
 8022744:	d101      	bne.n	802274a <cipherDecryptData+0x22>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8022746:	2304      	movs	r3, #4
 8022748:	e036      	b.n	80227b8 <cipherDecryptData+0x90>

   //Check cipher engine iv
   if(engine->ivLen == 0)
 802274a:	68fb      	ldr	r3, [r7, #12]
 802274c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8022750:	2b00      	cmp	r3, #0
 8022752:	d101      	bne.n	8022758 <cipherDecryptData+0x30>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8022754:	2304      	movs	r3, #4
 8022756:	e02f      	b.n	80227b8 <cipherDecryptData+0x90>

   //Check cipher engine mode
   if(engine->mode == CIPHER_MODE_NULL)
 8022758:	68fb      	ldr	r3, [r7, #12]
 802275a:	f893 31e8 	ldrb.w	r3, [r3, #488]	@ 0x1e8
 802275e:	2b00      	cmp	r3, #0
 8022760:	d101      	bne.n	8022766 <cipherDecryptData+0x3e>
   {
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8022762:	2304      	movs	r3, #4
 8022764:	e028      	b.n	80227b8 <cipherDecryptData+0x90>
   }
   else if(engine->mode == CIPHER_MODE_CBC)
 8022766:	68fb      	ldr	r3, [r7, #12]
 8022768:	f893 31e8 	ldrb.w	r3, [r3, #488]	@ 0x1e8
 802276c:	2b03      	cmp	r3, #3
 802276e:	d116      	bne.n	802279e <cipherDecryptData+0x76>
   {
      //Decrypt ciphertext data using CBC mode
      error = cbcDecrypt(engine->algo, (void *) &engine->context,
 8022770:	68fb      	ldr	r3, [r7, #12]
 8022772:	f8d3 01e4 	ldr.w	r0, [r3, #484]	@ 0x1e4
 8022776:	68f9      	ldr	r1, [r7, #12]
         engine->iv, data, data, length);
 8022778:	68fb      	ldr	r3, [r7, #12]
 802277a:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
      error = cbcDecrypt(engine->algo, (void *) &engine->context,
 802277e:	687b      	ldr	r3, [r7, #4]
 8022780:	9301      	str	r3, [sp, #4]
 8022782:	68bb      	ldr	r3, [r7, #8]
 8022784:	9300      	str	r3, [sp, #0]
 8022786:	68bb      	ldr	r3, [r7, #8]
 8022788:	f001 fd32 	bl	80241f0 <cbcDecrypt>
 802278c:	4603      	mov	r3, r0
 802278e:	82fb      	strh	r3, [r7, #22]
      //Is any error?
      if(error)
 8022790:	8afb      	ldrh	r3, [r7, #22]
 8022792:	2b00      	cmp	r3, #0
 8022794:	d001      	beq.n	802279a <cipherDecryptData+0x72>
         return CBOOT_ERROR_FAILURE;
 8022796:	2301      	movs	r3, #1
 8022798:	e00e      	b.n	80227b8 <cipherDecryptData+0x90>
      else
         return CBOOT_NO_ERROR;
 802279a:	2300      	movs	r3, #0
 802279c:	e00c      	b.n	80227b8 <cipherDecryptData+0x90>
   }
   else
   {
      //Debug message
      TRACE_ERROR("Cipher mode not supported!\r\n");
 802279e:	f7fe f905 	bl	80209ac <osSuspendAllTasks>
 80227a2:	4b07      	ldr	r3, [pc, #28]	@ (80227c0 <cipherDecryptData+0x98>)
 80227a4:	681b      	ldr	r3, [r3, #0]
 80227a6:	68db      	ldr	r3, [r3, #12]
 80227a8:	221c      	movs	r2, #28
 80227aa:	2101      	movs	r1, #1
 80227ac:	4805      	ldr	r0, [pc, #20]	@ (80227c4 <cipherDecryptData+0x9c>)
 80227ae:	f009 f8dd 	bl	802b96c <fwrite>
 80227b2:	f7fe f902 	bl	80209ba <osResumeAllTasks>
      //Forward error;
      return CBOOT_ERROR_NOT_IMPLEMENTED;
 80227b6:	2302      	movs	r3, #2
   }
}
 80227b8:	4618      	mov	r0, r3
 80227ba:	3718      	adds	r7, #24
 80227bc:	46bd      	mov	sp, r7
 80227be:	bd80      	pop	{r7, pc}
 80227c0:	2000003c 	.word	0x2000003c
 80227c4:	0802c80c 	.word	0x0802c80c

080227c8 <cipherCheckMagicNumberCrc>:
 * @param keyIsValid
 * @return cboot_error_t
 **/

cboot_error_t cipherCheckMagicNumberCrc(uint32_t magicNumberCrc, bool_t *magicNumberIsValid)
{
 80227c8:	b580      	push	{r7, lr}
 80227ca:	b084      	sub	sp, #16
 80227cc:	af00      	add	r7, sp, #0
 80227ce:	6078      	str	r0, [r7, #4]
 80227d0:	6039      	str	r1, [r7, #0]
   uint32_t computedMagicNumberCrc;

   //Check parameters
   if(magicNumberIsValid == NULL)
 80227d2:	683b      	ldr	r3, [r7, #0]
 80227d4:	2b00      	cmp	r3, #0
 80227d6:	d101      	bne.n	80227dc <cipherCheckMagicNumberCrc+0x14>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80227d8:	2304      	movs	r3, #4
 80227da:	e01a      	b.n	8022812 <cipherCheckMagicNumberCrc+0x4a>

   //Set default magic number validity to FALSE
   *magicNumberIsValid = FALSE;
 80227dc:	683b      	ldr	r3, [r7, #0]
 80227de:	2200      	movs	r2, #0
 80227e0:	601a      	str	r2, [r3, #0]

   //Compute CRC on the given magic number
   if(!CRC32_HASH_ALGO->compute(CIPHER_MAGIC_NUMBER, CIPHER_MAGIC_NUMBER_SIZE,
 80227e2:	4b0e      	ldr	r3, [pc, #56]	@ (802281c <cipherCheckMagicNumberCrc+0x54>)
 80227e4:	6a1b      	ldr	r3, [r3, #32]
 80227e6:	f107 020c 	add.w	r2, r7, #12
 80227ea:	2110      	movs	r1, #16
 80227ec:	480c      	ldr	r0, [pc, #48]	@ (8022820 <cipherCheckMagicNumberCrc+0x58>)
 80227ee:	4798      	blx	r3
 80227f0:	4603      	mov	r3, r0
 80227f2:	2b00      	cmp	r3, #0
 80227f4:	d10c      	bne.n	8022810 <cipherCheckMagicNumberCrc+0x48>
      (uint8_t*)&computedMagicNumberCrc))
   {
      //Check computed magic number crc against the given magic number crc
      if(memcmp((uint8_t*)&magicNumberCrc, (uint8_t*)&computedMagicNumberCrc, CRC32_DIGEST_SIZE) == 0)
 80227f6:	f107 010c 	add.w	r1, r7, #12
 80227fa:	1d3b      	adds	r3, r7, #4
 80227fc:	2204      	movs	r2, #4
 80227fe:	4618      	mov	r0, r3
 8022800:	f009 fa0a 	bl	802bc18 <memcmp>
 8022804:	4603      	mov	r3, r0
 8022806:	2b00      	cmp	r3, #0
 8022808:	d102      	bne.n	8022810 <cipherCheckMagicNumberCrc+0x48>
      {
         //Magic number is valid
         *magicNumberIsValid = TRUE;
 802280a:	683b      	ldr	r3, [r7, #0]
 802280c:	2201      	movs	r2, #1
 802280e:	601a      	str	r2, [r3, #0]
      }
   }

   //Successful process
   return CBOOT_NO_ERROR;
 8022810:	2300      	movs	r3, #0
}
 8022812:	4618      	mov	r0, r3
 8022814:	3710      	adds	r7, #16
 8022816:	46bd      	mov	sp, r7
 8022818:	bd80      	pop	{r7, pc}
 802281a:	bf00      	nop
 802281c:	0802d6a4 	.word	0x0802d6a4
 8022820:	0802c82c 	.word	0x0802c82c

08022824 <verifyInit>:
 * @param[in] settings Image Verification specific settings
 * @return
 **/

cboot_error_t verifyInit(VerifyContext *context, VerifySettings *settings)
{
 8022824:	b580      	push	{r7, lr}
 8022826:	b082      	sub	sp, #8
 8022828:	af00      	add	r7, sp, #0
 802282a:	6078      	str	r0, [r7, #4]
 802282c:	6039      	str	r1, [r7, #0]
   //Check parameters
   if (context == NULL || settings == NULL)
 802282e:	687b      	ldr	r3, [r7, #4]
 8022830:	2b00      	cmp	r3, #0
 8022832:	d002      	beq.n	802283a <verifyInit+0x16>
 8022834:	683b      	ldr	r3, [r7, #0]
 8022836:	2b00      	cmp	r3, #0
 8022838:	d101      	bne.n	802283e <verifyInit+0x1a>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 802283a:	2304      	movs	r3, #4
 802283c:	e046      	b.n	80228cc <verifyInit+0xa8>

   //Save verify settings
   memcpy(&context->verifySettings, settings, sizeof(VerifySettings));
 802283e:	687b      	ldr	r3, [r7, #4]
 8022840:	2218      	movs	r2, #24
 8022842:	6839      	ldr	r1, [r7, #0]
 8022844:	4618      	mov	r0, r3
 8022846:	f009 fab4 	bl	802bdb2 <memcpy>

   //Save verification module user settings
   memcpy(&context->verifySettings, settings, sizeof(VerifySettings));
 802284a:	687b      	ldr	r3, [r7, #4]
 802284c:	2218      	movs	r2, #24
 802284e:	6839      	ldr	r1, [r7, #0]
 8022850:	4618      	mov	r0, r3
 8022852:	f009 faae 	bl	802bdb2 <memcpy>

   //Initialize verification context for integrity method
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 8022856:	687b      	ldr	r3, [r7, #4]
 8022858:	781b      	ldrb	r3, [r3, #0]
 802285a:	2b00      	cmp	r3, #0
 802285c:	d11a      	bne.n	8022894 <verifyInit+0x70>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 802285e:	687b      	ldr	r3, [r7, #4]
 8022860:	685b      	ldr	r3, [r3, #4]
 8022862:	2b00      	cmp	r3, #0
 8022864:	d014      	beq.n	8022890 <verifyInit+0x6c>
      {
         //Initialize integrity algo context
         context->verifySettings.integrityAlgo->init(context->checkContext);
 8022866:	687b      	ldr	r3, [r7, #4]
 8022868:	685b      	ldr	r3, [r3, #4]
 802286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802286c:	687a      	ldr	r2, [r7, #4]
 802286e:	3218      	adds	r2, #24
 8022870:	4610      	mov	r0, r2
 8022872:	4798      	blx	r3

         //Set image check digest size
         context->imageCheckDigestSize = context->verifySettings.integrityAlgo->digestSize;
 8022874:	687b      	ldr	r3, [r7, #4]
 8022876:	685b      	ldr	r3, [r3, #4]
 8022878:	695a      	ldr	r2, [r3, #20]
 802287a:	687b      	ldr	r3, [r7, #4]
 802287c:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

         //Set check data (integrity tag) size
         context->checkDataSize = context->imageCheckDigestSize;
 8022880:	687b      	ldr	r3, [r7, #4]
 8022882:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 8022886:	687b      	ldr	r3, [r7, #4]
 8022888:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

         //Successful process
         return CBOOT_NO_ERROR;
 802288c:	2300      	movs	r3, #0
 802288e:	e01d      	b.n	80228cc <verifyInit+0xa8>
      }
      else
      {
         return CBOOT_ERROR_INVALID_PARAMETERS;
 8022890:	2304      	movs	r3, #4
 8022892:	e01b      	b.n	80228cc <verifyInit+0xa8>
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
#endif
   }
   //Initialize verification context for authentication method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 8022894:	687b      	ldr	r3, [r7, #4]
 8022896:	781b      	ldrb	r3, [r3, #0]
 8022898:	2b01      	cmp	r3, #1
 802289a:	d101      	bne.n	80228a0 <verifyInit+0x7c>
   {
#if (VERIFY_AUTHENTICATION_SUPPORT == ENABLED)
      //Initialize authentication algorithm
      return authInit(context);
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
 802289c:	2304      	movs	r3, #4
 802289e:	e015      	b.n	80228cc <verifyInit+0xa8>
#endif
   }
   //Initialize verification context for signature method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 80228a0:	687b      	ldr	r3, [r7, #4]
 80228a2:	781b      	ldrb	r3, [r3, #0]
 80228a4:	2b02      	cmp	r3, #2
 80228a6:	d104      	bne.n	80228b2 <verifyInit+0x8e>
   {
#if (VERIFY_SIGNATURE_SUPPORT == ENABLED)
      //Initialize signature algorithm
      return signInit(context);
 80228a8:	6878      	ldr	r0, [r7, #4]
 80228aa:	f000 f953 	bl	8022b54 <signInit>
 80228ae:	4603      	mov	r3, r0
 80228b0:	e00c      	b.n	80228cc <verifyInit+0xa8>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Verification mode not supported!\r\n");
 80228b2:	f7fe f87b 	bl	80209ac <osSuspendAllTasks>
 80228b6:	4b07      	ldr	r3, [pc, #28]	@ (80228d4 <verifyInit+0xb0>)
 80228b8:	681b      	ldr	r3, [r3, #0]
 80228ba:	68db      	ldr	r3, [r3, #12]
 80228bc:	2222      	movs	r2, #34	@ 0x22
 80228be:	2101      	movs	r1, #1
 80228c0:	4805      	ldr	r0, [pc, #20]	@ (80228d8 <verifyInit+0xb4>)
 80228c2:	f009 f853 	bl	802b96c <fwrite>
 80228c6:	f7fe f878 	bl	80209ba <osResumeAllTasks>
      return CBOOT_ERROR_NOT_IMPLEMENTED;
 80228ca:	2302      	movs	r3, #2
   }
}
 80228cc:	4618      	mov	r0, r3
 80228ce:	3708      	adds	r7, #8
 80228d0:	46bd      	mov	sp, r7
 80228d2:	bd80      	pop	{r7, pc}
 80228d4:	2000003c 	.word	0x2000003c
 80228d8:	0802c850 	.word	0x0802c850

080228dc <verifyProcess>:
 * @param[in] length Length og the image data block
 * @return Error code
 **/

cboot_error_t verifyProcess(VerifyContext *context, uint8_t *data, size_t length)
{
 80228dc:	b580      	push	{r7, lr}
 80228de:	b084      	sub	sp, #16
 80228e0:	af00      	add	r7, sp, #0
 80228e2:	60f8      	str	r0, [r7, #12]
 80228e4:	60b9      	str	r1, [r7, #8]
 80228e6:	607a      	str	r2, [r7, #4]
   //Check parameters
   if (context == NULL || (data == NULL || length == 0))
 80228e8:	68fb      	ldr	r3, [r7, #12]
 80228ea:	2b00      	cmp	r3, #0
 80228ec:	d005      	beq.n	80228fa <verifyProcess+0x1e>
 80228ee:	68bb      	ldr	r3, [r7, #8]
 80228f0:	2b00      	cmp	r3, #0
 80228f2:	d002      	beq.n	80228fa <verifyProcess+0x1e>
 80228f4:	687b      	ldr	r3, [r7, #4]
 80228f6:	2b00      	cmp	r3, #0
 80228f8:	d101      	bne.n	80228fe <verifyProcess+0x22>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80228fa:	2304      	movs	r3, #4
 80228fc:	e03c      	b.n	8022978 <verifyProcess+0x9c>

   //Process image data block integrity hash tag calculation
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 80228fe:	68fb      	ldr	r3, [r7, #12]
 8022900:	781b      	ldrb	r3, [r3, #0]
 8022902:	2b00      	cmp	r3, #0
 8022904:	d10f      	bne.n	8022926 <verifyProcess+0x4a>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 8022906:	68fb      	ldr	r3, [r7, #12]
 8022908:	685b      	ldr	r3, [r3, #4]
 802290a:	2b00      	cmp	r3, #0
 802290c:	d009      	beq.n	8022922 <verifyProcess+0x46>
      {
         //Update integrity hash tag
         context->verifySettings.integrityAlgo->update(context->checkContext, data, length);
 802290e:	68fb      	ldr	r3, [r7, #12]
 8022910:	685b      	ldr	r3, [r3, #4]
 8022912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022914:	68fa      	ldr	r2, [r7, #12]
 8022916:	f102 0018 	add.w	r0, r2, #24
 802291a:	687a      	ldr	r2, [r7, #4]
 802291c:	68b9      	ldr	r1, [r7, #8]
 802291e:	4798      	blx	r3
 8022920:	e029      	b.n	8022976 <verifyProcess+0x9a>
      }
      else
      {
         return CBOOT_ERROR_INVALID_PARAMETERS;
 8022922:	2304      	movs	r3, #4
 8022924:	e028      	b.n	8022978 <verifyProcess+0x9c>
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
#endif
   }
   //Process image data block authentication hash tag calculation
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 8022926:	68fb      	ldr	r3, [r7, #12]
 8022928:	781b      	ldrb	r3, [r3, #0]
 802292a:	2b01      	cmp	r3, #1
 802292c:	d101      	bne.n	8022932 <verifyProcess+0x56>
   {
#if (VERIFY_AUTHENTICATION_SUPPORT == ENABLED)
      //Update authentication tag
      return authUpdateTag(context, data, length);
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
 802292e:	2304      	movs	r3, #4
 8022930:	e022      	b.n	8022978 <verifyProcess+0x9c>
#endif
   }
   //Process image data block signature hash tag calculation
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 8022932:	68fb      	ldr	r3, [r7, #12]
 8022934:	781b      	ldrb	r3, [r3, #0]
 8022936:	2b02      	cmp	r3, #2
 8022938:	d10f      	bne.n	802295a <verifyProcess+0x7e>
   {
#if (VERIFY_SIGNATURE_SUPPORT == ENABLED)
      //Is user require signature check?
      if (context->verifySettings.signAlgo != VERIFY_SIGN_NONE)
 802293a:	68fb      	ldr	r3, [r7, #12]
 802293c:	7a1b      	ldrb	r3, [r3, #8]
 802293e:	2b00      	cmp	r3, #0
 8022940:	d009      	beq.n	8022956 <verifyProcess+0x7a>
      {
         //Update signature hash tag
         context->verifySettings.signHashAlgo->update(context->checkContext, data, length);
 8022942:	68fb      	ldr	r3, [r7, #12]
 8022944:	68db      	ldr	r3, [r3, #12]
 8022946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022948:	68fa      	ldr	r2, [r7, #12]
 802294a:	f102 0018 	add.w	r0, r2, #24
 802294e:	687a      	ldr	r2, [r7, #4]
 8022950:	68b9      	ldr	r1, [r7, #8]
 8022952:	4798      	blx	r3
 8022954:	e00f      	b.n	8022976 <verifyProcess+0x9a>
      }
      else
      {
         return CBOOT_ERROR_INVALID_PARAMETERS;
 8022956:	2304      	movs	r3, #4
 8022958:	e00e      	b.n	8022978 <verifyProcess+0x9c>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Verification mode not supported!\r\n");
 802295a:	f7fe f827 	bl	80209ac <osSuspendAllTasks>
 802295e:	4b08      	ldr	r3, [pc, #32]	@ (8022980 <verifyProcess+0xa4>)
 8022960:	681b      	ldr	r3, [r3, #0]
 8022962:	68db      	ldr	r3, [r3, #12]
 8022964:	2222      	movs	r2, #34	@ 0x22
 8022966:	2101      	movs	r1, #1
 8022968:	4806      	ldr	r0, [pc, #24]	@ (8022984 <verifyProcess+0xa8>)
 802296a:	f008 ffff 	bl	802b96c <fwrite>
 802296e:	f7fe f824 	bl	80209ba <osResumeAllTasks>
      return CBOOT_ERROR_NOT_IMPLEMENTED;
 8022972:	2302      	movs	r3, #2
 8022974:	e000      	b.n	8022978 <verifyProcess+0x9c>
   }

   //Successful process
   return CBOOT_NO_ERROR;
 8022976:	2300      	movs	r3, #0
}
 8022978:	4618      	mov	r0, r3
 802297a:	3710      	adds	r7, #16
 802297c:	46bd      	mov	sp, r7
 802297e:	bd80      	pop	{r7, pc}
 8022980:	2000003c 	.word	0x2000003c
 8022984:	0802c850 	.word	0x0802c850

08022988 <verifyConfirm>:
 * @param[in] verifyDataLength Length of the image check data
 * @return Error code
 **/

cboot_error_t verifyConfirm(VerifyContext *context, uint8_t *verifyData, size_t verifyDataLength)
{
 8022988:	b580      	push	{r7, lr}
 802298a:	b086      	sub	sp, #24
 802298c:	af00      	add	r7, sp, #0
 802298e:	60f8      	str	r0, [r7, #12]
 8022990:	60b9      	str	r1, [r7, #8]
 8022992:	607a      	str	r2, [r7, #4]
   cboot_error_t cerror;

   //Initialize error code
   cerror = CBOOT_NO_ERROR;
 8022994:	2300      	movs	r3, #0
 8022996:	75fb      	strb	r3, [r7, #23]

   //Check parameters
   if (context == NULL || verifyData == NULL || verifyDataLength == 0)
 8022998:	68fb      	ldr	r3, [r7, #12]
 802299a:	2b00      	cmp	r3, #0
 802299c:	d005      	beq.n	80229aa <verifyConfirm+0x22>
 802299e:	68bb      	ldr	r3, [r7, #8]
 80229a0:	2b00      	cmp	r3, #0
 80229a2:	d002      	beq.n	80229aa <verifyConfirm+0x22>
 80229a4:	687b      	ldr	r3, [r7, #4]
 80229a6:	2b00      	cmp	r3, #0
 80229a8:	d101      	bne.n	80229ae <verifyConfirm+0x26>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80229aa:	2304      	movs	r3, #4
 80229ac:	e06f      	b.n	8022a8e <verifyConfirm+0x106>

   //Check image check data using integrity method
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 80229ae:	68fb      	ldr	r3, [r7, #12]
 80229b0:	781b      	ldrb	r3, [r3, #0]
 80229b2:	2b00      	cmp	r3, #0
 80229b4:	d12b      	bne.n	8022a0e <verifyConfirm+0x86>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 80229b6:	68fb      	ldr	r3, [r7, #12]
 80229b8:	685b      	ldr	r3, [r3, #4]
 80229ba:	2b00      	cmp	r3, #0
 80229bc:	d025      	beq.n	8022a0a <verifyConfirm+0x82>
      {
         //Finalize interity tag computation
         context->verifySettings.integrityAlgo->final(context->checkContext, context->imageCheckDigest);
 80229be:	68fb      	ldr	r3, [r7, #12]
 80229c0:	685b      	ldr	r3, [r3, #4]
 80229c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80229c4:	68fa      	ldr	r2, [r7, #12]
 80229c6:	f102 0018 	add.w	r0, r2, #24
 80229ca:	68fa      	ldr	r2, [r7, #12]
 80229cc:	32ec      	adds	r2, #236	@ 0xec
 80229ce:	4611      	mov	r1, r2
 80229d0:	4798      	blx	r3
         TRACE_DEBUG("Computed integrity tag (%d bytes)\r\n", context->imageCheckDigestSize);
         TRACE_DEBUG_ARRAY("  ", context->imageCheckDigest, context->imageCheckDigestSize);
         TRACE_DEBUG("\r\n");

         //Compare computed integrity digest with the one received in the image
         if (osMemcmp(verifyData, context->imageCheckDigest, context->imageCheckDigestSize) != 0)
 80229d2:	68fb      	ldr	r3, [r7, #12]
 80229d4:	f103 01ec 	add.w	r1, r3, #236	@ 0xec
 80229d8:	68fb      	ldr	r3, [r7, #12]
 80229da:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80229de:	461a      	mov	r2, r3
 80229e0:	68b8      	ldr	r0, [r7, #8]
 80229e2:	f009 f919 	bl	802bc18 <memcmp>
 80229e6:	4603      	mov	r3, r0
 80229e8:	2b00      	cmp	r3, #0
 80229ea:	d04f      	beq.n	8022a8c <verifyConfirm+0x104>
         {
            //Debug message
            TRACE_INFO("Firmware integrity tag is not valid!\r\n");
 80229ec:	f7fd ffde 	bl	80209ac <osSuspendAllTasks>
 80229f0:	4b29      	ldr	r3, [pc, #164]	@ (8022a98 <verifyConfirm+0x110>)
 80229f2:	681b      	ldr	r3, [r3, #0]
 80229f4:	68db      	ldr	r3, [r3, #12]
 80229f6:	2226      	movs	r2, #38	@ 0x26
 80229f8:	2101      	movs	r1, #1
 80229fa:	4828      	ldr	r0, [pc, #160]	@ (8022a9c <verifyConfirm+0x114>)
 80229fc:	f008 ffb6 	bl	802b96c <fwrite>
 8022a00:	f7fd ffdb 	bl	80209ba <osResumeAllTasks>
            cerror = CBOOT_ERROR_ABORTED;
 8022a04:	2303      	movs	r3, #3
 8022a06:	75fb      	strb	r3, [r7, #23]
 8022a08:	e040      	b.n	8022a8c <verifyConfirm+0x104>
         }
      }
      else
      {
         return CBOOT_ERROR_INVALID_PARAMETERS;
 8022a0a:	2304      	movs	r3, #4
 8022a0c:	e03f      	b.n	8022a8e <verifyConfirm+0x106>
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
#endif
   }
   //Check image check data using authentification method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 8022a0e:	68fb      	ldr	r3, [r7, #12]
 8022a10:	781b      	ldrb	r3, [r3, #0]
 8022a12:	2b01      	cmp	r3, #1
 8022a14:	d101      	bne.n	8022a1a <verifyConfirm+0x92>
      else
      {
         return CBOOT_ERROR_INVALID_PARAMETERS;
      }
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8022a16:	2304      	movs	r3, #4
 8022a18:	e039      	b.n	8022a8e <verifyConfirm+0x106>
#endif
   }
   //Check image check data using signature method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 8022a1a:	68fb      	ldr	r3, [r7, #12]
 8022a1c:	781b      	ldrb	r3, [r3, #0]
 8022a1e:	2b02      	cmp	r3, #2
 8022a20:	d126      	bne.n	8022a70 <verifyConfirm+0xe8>
   {
#if (VERIFY_SIGNATURE_SUPPORT == ENABLED)
      //Is user require signature check?
      if (context->verifySettings.signAlgo != VERIFY_SIGN_NONE)
 8022a22:	68fb      	ldr	r3, [r7, #12]
 8022a24:	7a1b      	ldrb	r3, [r3, #8]
 8022a26:	2b00      	cmp	r3, #0
 8022a28:	d020      	beq.n	8022a6c <verifyConfirm+0xe4>
      {
         //Compute final integrity hash tag needed to check signature
         context->verifySettings.signHashAlgo->final(context->checkContext, context->imageCheckDigest);
 8022a2a:	68fb      	ldr	r3, [r7, #12]
 8022a2c:	68db      	ldr	r3, [r3, #12]
 8022a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022a30:	68fa      	ldr	r2, [r7, #12]
 8022a32:	f102 0018 	add.w	r0, r2, #24
 8022a36:	68fa      	ldr	r2, [r7, #12]
 8022a38:	32ec      	adds	r2, #236	@ 0xec
 8022a3a:	4611      	mov	r1, r2
 8022a3c:	4798      	blx	r3
         TRACE_DEBUG("Computed signature hash tag (%d bytes)\r\n", context->imageCheckDigestSize);
         TRACE_DEBUG_ARRAY("  ", context->imageCheckDigest, context->imageCheckDigestSize);
         TRACE_DEBUG("\r\n");

         //Verify receive signature
         cerror = signVerify(context, verifyData, verifyDataLength);
 8022a3e:	687a      	ldr	r2, [r7, #4]
 8022a40:	68b9      	ldr	r1, [r7, #8]
 8022a42:	68f8      	ldr	r0, [r7, #12]
 8022a44:	f000 f8f2 	bl	8022c2c <signVerify>
 8022a48:	4603      	mov	r3, r0
 8022a4a:	75fb      	strb	r3, [r7, #23]
         //Is any error?
         if (cerror)
 8022a4c:	7dfb      	ldrb	r3, [r7, #23]
 8022a4e:	2b00      	cmp	r3, #0
 8022a50:	d01c      	beq.n	8022a8c <verifyConfirm+0x104>
         {
            //Debug message
            TRACE_INFO("Firmware signature is not valid!\r\n");
 8022a52:	f7fd ffab 	bl	80209ac <osSuspendAllTasks>
 8022a56:	4b10      	ldr	r3, [pc, #64]	@ (8022a98 <verifyConfirm+0x110>)
 8022a58:	681b      	ldr	r3, [r3, #0]
 8022a5a:	68db      	ldr	r3, [r3, #12]
 8022a5c:	2222      	movs	r2, #34	@ 0x22
 8022a5e:	2101      	movs	r1, #1
 8022a60:	480f      	ldr	r0, [pc, #60]	@ (8022aa0 <verifyConfirm+0x118>)
 8022a62:	f008 ff83 	bl	802b96c <fwrite>
 8022a66:	f7fd ffa8 	bl	80209ba <osResumeAllTasks>
 8022a6a:	e00f      	b.n	8022a8c <verifyConfirm+0x104>
         }
      }
      else
      {
         return CBOOT_ERROR_INVALID_PARAMETERS;
 8022a6c:	2304      	movs	r3, #4
 8022a6e:	e00e      	b.n	8022a8e <verifyConfirm+0x106>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Verification mode not supported!\r\n");
 8022a70:	f7fd ff9c 	bl	80209ac <osSuspendAllTasks>
 8022a74:	4b08      	ldr	r3, [pc, #32]	@ (8022a98 <verifyConfirm+0x110>)
 8022a76:	681b      	ldr	r3, [r3, #0]
 8022a78:	68db      	ldr	r3, [r3, #12]
 8022a7a:	2222      	movs	r2, #34	@ 0x22
 8022a7c:	2101      	movs	r1, #1
 8022a7e:	4809      	ldr	r0, [pc, #36]	@ (8022aa4 <verifyConfirm+0x11c>)
 8022a80:	f008 ff74 	bl	802b96c <fwrite>
 8022a84:	f7fd ff99 	bl	80209ba <osResumeAllTasks>
      return CBOOT_ERROR_NOT_IMPLEMENTED;
 8022a88:	2302      	movs	r3, #2
 8022a8a:	e000      	b.n	8022a8e <verifyConfirm+0x106>
   }

   //Successful process
   return cerror;
 8022a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8022a8e:	4618      	mov	r0, r3
 8022a90:	3718      	adds	r7, #24
 8022a92:	46bd      	mov	sp, r7
 8022a94:	bd80      	pop	{r7, pc}
 8022a96:	bf00      	nop
 8022a98:	2000003c 	.word	0x2000003c
 8022a9c:	0802c874 	.word	0x0802c874
 8022aa0:	0802c89c 	.word	0x0802c89c
 8022aa4:	0802c850 	.word	0x0802c850

08022aa8 <verifyGenerateCheckData>:
 * @param[out] checkDataLength Length of the image check data buffer tag
 * @return Error code
 **/

cboot_error_t verifyGenerateCheckData(VerifyContext *context, uint8_t *checkData, size_t checkDataSize, size_t *checkDataLength)
{
 8022aa8:	b580      	push	{r7, lr}
 8022aaa:	b086      	sub	sp, #24
 8022aac:	af00      	add	r7, sp, #0
 8022aae:	60f8      	str	r0, [r7, #12]
 8022ab0:	60b9      	str	r1, [r7, #8]
 8022ab2:	607a      	str	r2, [r7, #4]
 8022ab4:	603b      	str	r3, [r7, #0]
   VerifySettings *settings;

   //Check parameters
   if (context == NULL || checkData == NULL || checkDataLength == NULL)
 8022ab6:	68fb      	ldr	r3, [r7, #12]
 8022ab8:	2b00      	cmp	r3, #0
 8022aba:	d005      	beq.n	8022ac8 <verifyGenerateCheckData+0x20>
 8022abc:	68bb      	ldr	r3, [r7, #8]
 8022abe:	2b00      	cmp	r3, #0
 8022ac0:	d002      	beq.n	8022ac8 <verifyGenerateCheckData+0x20>
 8022ac2:	683b      	ldr	r3, [r7, #0]
 8022ac4:	2b00      	cmp	r3, #0
 8022ac6:	d101      	bne.n	8022acc <verifyGenerateCheckData+0x24>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8022ac8:	2304      	movs	r3, #4
 8022aca:	e03b      	b.n	8022b44 <verifyGenerateCheckData+0x9c>

   //Point to the verify settings
   settings = (VerifySettings *)&context->verifySettings;
 8022acc:	68fb      	ldr	r3, [r7, #12]
 8022ace:	617b      	str	r3, [r7, #20]

   //Generate image check integrity tag
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 8022ad0:	68fb      	ldr	r3, [r7, #12]
 8022ad2:	781b      	ldrb	r3, [r3, #0]
 8022ad4:	2b00      	cmp	r3, #0
 8022ad6:	d128      	bne.n	8022b2a <verifyGenerateCheckData+0x82>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 8022ad8:	68fb      	ldr	r3, [r7, #12]
 8022ada:	685b      	ldr	r3, [r3, #4]
 8022adc:	2b00      	cmp	r3, #0
 8022ade:	d022      	beq.n	8022b26 <verifyGenerateCheckData+0x7e>
      {
         //Finalize interity tag check computation
         settings->integrityAlgo->final(context->checkContext, context->imageCheckDigest);
 8022ae0:	697b      	ldr	r3, [r7, #20]
 8022ae2:	685b      	ldr	r3, [r3, #4]
 8022ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022ae6:	68fa      	ldr	r2, [r7, #12]
 8022ae8:	f102 0018 	add.w	r0, r2, #24
 8022aec:	68fa      	ldr	r2, [r7, #12]
 8022aee:	32ec      	adds	r2, #236	@ 0xec
 8022af0:	4611      	mov	r1, r2
 8022af2:	4798      	blx	r3

         if(checkDataSize >= context->imageCheckDigestSize)
 8022af4:	68fb      	ldr	r3, [r7, #12]
 8022af6:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8022afa:	687a      	ldr	r2, [r7, #4]
 8022afc:	429a      	cmp	r2, r3
 8022afe:	d310      	bcc.n	8022b22 <verifyGenerateCheckData+0x7a>
         {
            //Save interity tag check data length
            *checkDataLength = context->imageCheckDigestSize;
 8022b00:	68fb      	ldr	r3, [r7, #12]
 8022b02:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 8022b06:	683b      	ldr	r3, [r7, #0]
 8022b08:	601a      	str	r2, [r3, #0]
            //Save interity tag check data
            memcpy(checkData, context->imageCheckDigest, context->imageCheckDigestSize);
 8022b0a:	68fb      	ldr	r3, [r7, #12]
 8022b0c:	f103 01ec 	add.w	r1, r3, #236	@ 0xec
 8022b10:	68fb      	ldr	r3, [r7, #12]
 8022b12:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8022b16:	461a      	mov	r2, r3
 8022b18:	68b8      	ldr	r0, [r7, #8]
 8022b1a:	f009 f94a 	bl	802bdb2 <memcpy>
      TRACE_ERROR("Check data generation method missing or unsupported!!!\r\n");
      return CBOOT_ERROR_ABORTED;
   }

   //Successfull process
   return CBOOT_NO_ERROR;
 8022b1e:	2300      	movs	r3, #0
 8022b20:	e010      	b.n	8022b44 <verifyGenerateCheckData+0x9c>
            return CBOOT_ERROR_BUFFER_OVERFLOW;
 8022b22:	2317      	movs	r3, #23
 8022b24:	e00e      	b.n	8022b44 <verifyGenerateCheckData+0x9c>
         return CBOOT_ERROR_INVALID_PARAMETERS;
 8022b26:	2304      	movs	r3, #4
 8022b28:	e00c      	b.n	8022b44 <verifyGenerateCheckData+0x9c>
      TRACE_ERROR("Check data generation method missing or unsupported!!!\r\n");
 8022b2a:	f7fd ff3f 	bl	80209ac <osSuspendAllTasks>
 8022b2e:	4b07      	ldr	r3, [pc, #28]	@ (8022b4c <verifyGenerateCheckData+0xa4>)
 8022b30:	681b      	ldr	r3, [r3, #0]
 8022b32:	68db      	ldr	r3, [r3, #12]
 8022b34:	2238      	movs	r2, #56	@ 0x38
 8022b36:	2101      	movs	r1, #1
 8022b38:	4805      	ldr	r0, [pc, #20]	@ (8022b50 <verifyGenerateCheckData+0xa8>)
 8022b3a:	f008 ff17 	bl	802b96c <fwrite>
 8022b3e:	f7fd ff3c 	bl	80209ba <osResumeAllTasks>
      return CBOOT_ERROR_ABORTED;
 8022b42:	2303      	movs	r3, #3
}
 8022b44:	4618      	mov	r0, r3
 8022b46:	3718      	adds	r7, #24
 8022b48:	46bd      	mov	sp, r7
 8022b4a:	bd80      	pop	{r7, pc}
 8022b4c:	2000003c 	.word	0x2000003c
 8022b50:	0802c8c0 	.word	0x0802c8c0

08022b54 <signInit>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code
 **/

cboot_error_t signInit(VerifyContext *context)
{
 8022b54:	b580      	push	{r7, lr}
 8022b56:	b08a      	sub	sp, #40	@ 0x28
 8022b58:	af00      	add	r7, sp, #0
 8022b5a:	6078      	str	r0, [r7, #4]
#if (VERIFY_RSA_SUPPORT == ENABLED)
   RsaPublicKey publicKey;
#endif

   // Check parameter validity
   if (context == NULL)
 8022b5c:	687b      	ldr	r3, [r7, #4]
 8022b5e:	2b00      	cmp	r3, #0
 8022b60:	d101      	bne.n	8022b66 <signInit+0x12>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8022b62:	2304      	movs	r3, #4
 8022b64:	e059      	b.n	8022c1a <signInit+0xc6>

   // Point to the verify settings
   settings = (VerifySettings *)&context->verifySettings;
 8022b66:	687b      	ldr	r3, [r7, #4]
 8022b68:	627b      	str	r3, [r7, #36]	@ 0x24

   // Initialize status code
   error = NO_ERROR;
 8022b6a:	2300      	movs	r3, #0
 8022b6c:	847b      	strh	r3, [r7, #34]	@ 0x22

   // Check user settings
   if (settings->signAlgo == VERIFY_SIGN_NONE || settings->signHashAlgo == NULL ||
 8022b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022b70:	7a1b      	ldrb	r3, [r3, #8]
 8022b72:	2b00      	cmp	r3, #0
 8022b74:	d00b      	beq.n	8022b8e <signInit+0x3a>
 8022b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022b78:	68db      	ldr	r3, [r3, #12]
 8022b7a:	2b00      	cmp	r3, #0
 8022b7c:	d007      	beq.n	8022b8e <signInit+0x3a>
      settings->signKey == NULL || settings->signKeyLen == 0)
 8022b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022b80:	691b      	ldr	r3, [r3, #16]
   if (settings->signAlgo == VERIFY_SIGN_NONE || settings->signHashAlgo == NULL ||
 8022b82:	2b00      	cmp	r3, #0
 8022b84:	d003      	beq.n	8022b8e <signInit+0x3a>
      settings->signKey == NULL || settings->signKeyLen == 0)
 8022b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022b88:	695b      	ldr	r3, [r3, #20]
 8022b8a:	2b00      	cmp	r3, #0
 8022b8c:	d101      	bne.n	8022b92 <signInit+0x3e>
      return CBOOT_ERROR_INVALID_VALUE;
 8022b8e:	2306      	movs	r3, #6
 8022b90:	e043      	b.n	8022c1a <signInit+0xc6>

   // Is signature RSA algorithm?
   if (settings->signAlgo == VERIFY_SIGN_RSA)
 8022b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022b94:	7a1b      	ldrb	r3, [r3, #8]
 8022b96:	2b01      	cmp	r3, #1
 8022b98:	d12a      	bne.n	8022bf0 <signInit+0x9c>
   {
#if (VERIFY_RSA_SUPPORT == ENABLED)
      // Initialize signature algo context
      settings->signHashAlgo->init(context->checkContext);
 8022b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022b9c:	68db      	ldr	r3, [r3, #12]
 8022b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022ba0:	687a      	ldr	r2, [r7, #4]
 8022ba2:	3218      	adds	r2, #24
 8022ba4:	4610      	mov	r0, r2
 8022ba6:	4798      	blx	r3

      // Set digest length
      context->imageCheckDigestSize = settings->signHashAlgo->digestSize;
 8022ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022baa:	68db      	ldr	r3, [r3, #12]
 8022bac:	695a      	ldr	r2, [r3, #20]
 8022bae:	687b      	ldr	r3, [r7, #4]
 8022bb0:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

      // Initialize RSA public key
      rsaInitPublicKey(&publicKey);
 8022bb4:	f107 0308 	add.w	r3, r7, #8
 8022bb8:	4618      	mov	r0, r3
 8022bba:	f003 fddd 	bl	8026778 <rsaInitPublicKey>

      // Decode pem key file into RSA public key
      error = pemImportRsaPublicKey(&publicKey, settings->signKey, settings->signKeyLen);
 8022bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022bc0:	6919      	ldr	r1, [r3, #16]
 8022bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022bc4:	695a      	ldr	r2, [r3, #20]
 8022bc6:	f107 0308 	add.w	r3, r7, #8
 8022bca:	4618      	mov	r0, r3
 8022bcc:	f004 faa8 	bl	8027120 <pemImportRsaPublicKey>
 8022bd0:	4603      	mov	r3, r0
 8022bd2:	847b      	strh	r3, [r7, #34]	@ 0x22

      // Check status code
      if (!error)
 8022bd4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022bd6:	2b00      	cmp	r3, #0
 8022bd8:	d11e      	bne.n	8022c18 <signInit+0xc4>
      {
         // Set check data (signature) size
         context->checkDataSize = publicKey.n.size * sizeof(publicKey.n.size);
 8022bda:	68fb      	ldr	r3, [r7, #12]
 8022bdc:	009a      	lsls	r2, r3, #2
 8022bde:	687b      	ldr	r3, [r7, #4]
 8022be0:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

         // Free RSA public key
         rsaFreePublicKey(&publicKey);
 8022be4:	f107 0308 	add.w	r3, r7, #8
 8022be8:	4618      	mov	r0, r3
 8022bea:	f003 fdd6 	bl	802679a <rsaFreePublicKey>
 8022bee:	e013      	b.n	8022c18 <signInit+0xc4>
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
#endif
   }
   // Is signature ECDSA algorithm?
   else if (settings->signAlgo == VERIFY_SIGN_ECDSA)
 8022bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022bf2:	7a1b      	ldrb	r3, [r3, #8]
 8022bf4:	2b02      	cmp	r3, #2
 8022bf6:	d101      	bne.n	8022bfc <signInit+0xa8>
      {
            // Set check data (signature) size
            context->checkDataSize = 64; //TODO: ECDSA_SIGNATURE_SIZE
      }
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8022bf8:	2304      	movs	r3, #4
 8022bfa:	e00e      	b.n	8022c1a <signInit+0xc6>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Signature algorithm not supported!\r\n");
 8022bfc:	f7fd fed6 	bl	80209ac <osSuspendAllTasks>
 8022c00:	4b08      	ldr	r3, [pc, #32]	@ (8022c24 <signInit+0xd0>)
 8022c02:	681b      	ldr	r3, [r3, #0]
 8022c04:	68db      	ldr	r3, [r3, #12]
 8022c06:	2224      	movs	r2, #36	@ 0x24
 8022c08:	2101      	movs	r1, #1
 8022c0a:	4807      	ldr	r0, [pc, #28]	@ (8022c28 <signInit+0xd4>)
 8022c0c:	f008 feae 	bl	802b96c <fwrite>
 8022c10:	f7fd fed3 	bl	80209ba <osResumeAllTasks>
      return CBOOT_ERROR_NOT_IMPLEMENTED;
 8022c14:	2302      	movs	r3, #2
 8022c16:	e000      	b.n	8022c1a <signInit+0xc6>
   }

   // Return status code
   return CBOOT_NO_ERROR;
 8022c18:	2300      	movs	r3, #0
}
 8022c1a:	4618      	mov	r0, r3
 8022c1c:	3728      	adds	r7, #40	@ 0x28
 8022c1e:	46bd      	mov	sp, r7
 8022c20:	bd80      	pop	{r7, pc}
 8022c22:	bf00      	nop
 8022c24:	2000003c 	.word	0x2000003c
 8022c28:	0802c8fc 	.word	0x0802c8fc

08022c2c <signVerify>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code
 **/

cboot_error_t signVerify(VerifyContext *context, uint8_t *verifyData, size_t verifyDataLength)
{
 8022c2c:	b580      	push	{r7, lr}
 8022c2e:	b086      	sub	sp, #24
 8022c30:	af00      	add	r7, sp, #0
 8022c32:	60f8      	str	r0, [r7, #12]
 8022c34:	60b9      	str	r1, [r7, #8]
 8022c36:	607a      	str	r2, [r7, #4]
   cboot_error_t cerror;
   VerifySettings *settings;

   // Check parameters validity
   if (context == NULL || verifyData == NULL || verifyDataLength == 0)
 8022c38:	68fb      	ldr	r3, [r7, #12]
 8022c3a:	2b00      	cmp	r3, #0
 8022c3c:	d005      	beq.n	8022c4a <signVerify+0x1e>
 8022c3e:	68bb      	ldr	r3, [r7, #8]
 8022c40:	2b00      	cmp	r3, #0
 8022c42:	d002      	beq.n	8022c4a <signVerify+0x1e>
 8022c44:	687b      	ldr	r3, [r7, #4]
 8022c46:	2b00      	cmp	r3, #0
 8022c48:	d101      	bne.n	8022c4e <signVerify+0x22>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8022c4a:	2304      	movs	r3, #4
 8022c4c:	e02a      	b.n	8022ca4 <signVerify+0x78>

   // Point to the verify settings
   settings = (VerifySettings *)&context->verifySettings;
 8022c4e:	68fb      	ldr	r3, [r7, #12]
 8022c50:	613b      	str	r3, [r7, #16]

   // Initialize status code
   cerror = CBOOT_NO_ERROR;
 8022c52:	2300      	movs	r3, #0
 8022c54:	75fb      	strb	r3, [r7, #23]

   // Check authentification hash algo
   if (settings->signAlgo == VERIFY_SIGN_NONE)
 8022c56:	693b      	ldr	r3, [r7, #16]
 8022c58:	7a1b      	ldrb	r3, [r3, #8]
 8022c5a:	2b00      	cmp	r3, #0
 8022c5c:	d101      	bne.n	8022c62 <signVerify+0x36>
      return CBOOT_ERROR_INVALID_VALUE;
 8022c5e:	2306      	movs	r3, #6
 8022c60:	e020      	b.n	8022ca4 <signVerify+0x78>
   // Is user require RSA signature?
   if (settings->signAlgo == VERIFY_SIGN_RSA)
 8022c62:	693b      	ldr	r3, [r7, #16]
 8022c64:	7a1b      	ldrb	r3, [r3, #8]
 8022c66:	2b01      	cmp	r3, #1
 8022c68:	d107      	bne.n	8022c7a <signVerify+0x4e>
   {
#if (VERIFY_RSA_SUPPORT == ENABLED)
      // Verify RSA signature
      cerror = signVerifyRsa(context, verifyData, verifyDataLength);
 8022c6a:	687a      	ldr	r2, [r7, #4]
 8022c6c:	68b9      	ldr	r1, [r7, #8]
 8022c6e:	68f8      	ldr	r0, [r7, #12]
 8022c70:	f000 f820 	bl	8022cb4 <signVerifyRsa>
 8022c74:	4603      	mov	r3, r0
 8022c76:	75fb      	strb	r3, [r7, #23]
 8022c78:	e013      	b.n	8022ca2 <signVerify+0x76>
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
#endif
   }
   // Is user require ECDSA signature?
   else if(settings->signAlgo == VERIFY_SIGN_ECDSA)
 8022c7a:	693b      	ldr	r3, [r7, #16]
 8022c7c:	7a1b      	ldrb	r3, [r3, #8]
 8022c7e:	2b02      	cmp	r3, #2
 8022c80:	d101      	bne.n	8022c86 <signVerify+0x5a>
   {
#if (VERIFY_ECDSA_SUPPORT == ENABLED)
      // Verify ECDSA signature
      cerror = signVerifyEcdsa(context, verifyData, verifyDataLength);
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8022c82:	2304      	movs	r3, #4
 8022c84:	e00e      	b.n	8022ca4 <signVerify+0x78>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Signature algorithm not supported!\r\n");
 8022c86:	f7fd fe91 	bl	80209ac <osSuspendAllTasks>
 8022c8a:	4b08      	ldr	r3, [pc, #32]	@ (8022cac <signVerify+0x80>)
 8022c8c:	681b      	ldr	r3, [r3, #0]
 8022c8e:	68db      	ldr	r3, [r3, #12]
 8022c90:	2224      	movs	r2, #36	@ 0x24
 8022c92:	2101      	movs	r1, #1
 8022c94:	4806      	ldr	r0, [pc, #24]	@ (8022cb0 <signVerify+0x84>)
 8022c96:	f008 fe69 	bl	802b96c <fwrite>
 8022c9a:	f7fd fe8e 	bl	80209ba <osResumeAllTasks>
      cerror = CBOOT_ERROR_NOT_IMPLEMENTED;
 8022c9e:	2302      	movs	r3, #2
 8022ca0:	75fb      	strb	r3, [r7, #23]
   }

   // Return status code
   return cerror;
 8022ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8022ca4:	4618      	mov	r0, r3
 8022ca6:	3718      	adds	r7, #24
 8022ca8:	46bd      	mov	sp, r7
 8022caa:	bd80      	pop	{r7, pc}
 8022cac:	2000003c 	.word	0x2000003c
 8022cb0:	0802c8fc 	.word	0x0802c8fc

08022cb4 <signVerifyRsa>:
 * @return Error code
 **/

#if (VERIFY_RSA_SUPPORT == ENABLED)
cboot_error_t signVerifyRsa(VerifyContext *context, uint8_t *verifyData, size_t verifyDataLength)
{
 8022cb4:	b580      	push	{r7, lr}
 8022cb6:	b08e      	sub	sp, #56	@ 0x38
 8022cb8:	af02      	add	r7, sp, #8
 8022cba:	60f8      	str	r0, [r7, #12]
 8022cbc:	60b9      	str	r1, [r7, #8]
 8022cbe:	607a      	str	r2, [r7, #4]
   VerifySettings *settings;

   RsaPublicKey publicKey;

   // Check parameter validity
   if (context == NULL || verifyData == NULL || verifyDataLength == 0)
 8022cc0:	68fb      	ldr	r3, [r7, #12]
 8022cc2:	2b00      	cmp	r3, #0
 8022cc4:	d005      	beq.n	8022cd2 <signVerifyRsa+0x1e>
 8022cc6:	68bb      	ldr	r3, [r7, #8]
 8022cc8:	2b00      	cmp	r3, #0
 8022cca:	d002      	beq.n	8022cd2 <signVerifyRsa+0x1e>
 8022ccc:	687b      	ldr	r3, [r7, #4]
 8022cce:	2b00      	cmp	r3, #0
 8022cd0:	d101      	bne.n	8022cd6 <signVerifyRsa+0x22>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8022cd2:	2304      	movs	r3, #4
 8022cd4:	e050      	b.n	8022d78 <signVerifyRsa+0xc4>

   // Point to the verify settings
   settings = (VerifySettings *)&context->verifySettings;
 8022cd6:	68fb      	ldr	r3, [r7, #12]
 8022cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

   // Check signature user settings
   if (settings->signHashAlgo == NULL || settings->signKey == NULL ||
 8022cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022cdc:	68db      	ldr	r3, [r3, #12]
 8022cde:	2b00      	cmp	r3, #0
 8022ce0:	d007      	beq.n	8022cf2 <signVerifyRsa+0x3e>
 8022ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022ce4:	691b      	ldr	r3, [r3, #16]
 8022ce6:	2b00      	cmp	r3, #0
 8022ce8:	d003      	beq.n	8022cf2 <signVerifyRsa+0x3e>
      settings->signKeyLen == 0)
 8022cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022cec:	695b      	ldr	r3, [r3, #20]
   if (settings->signHashAlgo == NULL || settings->signKey == NULL ||
 8022cee:	2b00      	cmp	r3, #0
 8022cf0:	d101      	bne.n	8022cf6 <signVerifyRsa+0x42>
      return CBOOT_ERROR_INVALID_VALUE;
 8022cf2:	2306      	movs	r3, #6
 8022cf4:	e040      	b.n	8022d78 <signVerifyRsa+0xc4>

   // Initialize RSA public key
   rsaInitPublicKey(&publicKey);
 8022cf6:	f107 0310 	add.w	r3, r7, #16
 8022cfa:	4618      	mov	r0, r3
 8022cfc:	f003 fd3c 	bl	8026778 <rsaInitPublicKey>

   // Import PEM RSA public key
   error = pemImportRsaPublicKey(&publicKey, settings->signKey, settings->signKeyLen);
 8022d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022d02:	6919      	ldr	r1, [r3, #16]
 8022d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022d06:	695a      	ldr	r2, [r3, #20]
 8022d08:	f107 0310 	add.w	r3, r7, #16
 8022d0c:	4618      	mov	r0, r3
 8022d0e:	f004 fa07 	bl	8027120 <pemImportRsaPublicKey>
 8022d12:	4603      	mov	r3, r0
 8022d14:	857b      	strh	r3, [r7, #42]	@ 0x2a
   // Is any error?
   if (error)
 8022d16:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8022d18:	2b00      	cmp	r3, #0
 8022d1a:	d00d      	beq.n	8022d38 <signVerifyRsa+0x84>
   {
      // Debug message
      TRACE_ERROR("RSA public key import failed!\r\n");
 8022d1c:	f7fd fe46 	bl	80209ac <osSuspendAllTasks>
 8022d20:	4b17      	ldr	r3, [pc, #92]	@ (8022d80 <signVerifyRsa+0xcc>)
 8022d22:	681b      	ldr	r3, [r3, #0]
 8022d24:	68db      	ldr	r3, [r3, #12]
 8022d26:	221f      	movs	r2, #31
 8022d28:	2101      	movs	r1, #1
 8022d2a:	4816      	ldr	r0, [pc, #88]	@ (8022d84 <signVerifyRsa+0xd0>)
 8022d2c:	f008 fe1e 	bl	802b96c <fwrite>
 8022d30:	f7fd fe43 	bl	80209ba <osResumeAllTasks>
      return CBOOT_ERROR_FAILURE;
 8022d34:	2301      	movs	r3, #1
 8022d36:	e01f      	b.n	8022d78 <signVerifyRsa+0xc4>
   }

   error = rsassaPkcs1v15Verify(&publicKey, settings->signHashAlgo,
 8022d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022d3a:	68d9      	ldr	r1, [r3, #12]
                              context->imageCheckDigest, verifyData, verifyDataLength);
 8022d3c:	68fb      	ldr	r3, [r7, #12]
 8022d3e:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
   error = rsassaPkcs1v15Verify(&publicKey, settings->signHashAlgo,
 8022d42:	f107 0010 	add.w	r0, r7, #16
 8022d46:	687b      	ldr	r3, [r7, #4]
 8022d48:	9300      	str	r3, [sp, #0]
 8022d4a:	68bb      	ldr	r3, [r7, #8]
 8022d4c:	f003 fd36 	bl	80267bc <rsassaPkcs1v15Verify>
 8022d50:	4603      	mov	r3, r0
 8022d52:	857b      	strh	r3, [r7, #42]	@ 0x2a
   // Is any error?
   if (error)
 8022d54:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8022d56:	2b00      	cmp	r3, #0
 8022d58:	d00d      	beq.n	8022d76 <signVerifyRsa+0xc2>
   {
      // Debug message
      TRACE_ERROR("RSA signature verification failed!\r\n");
 8022d5a:	f7fd fe27 	bl	80209ac <osSuspendAllTasks>
 8022d5e:	4b08      	ldr	r3, [pc, #32]	@ (8022d80 <signVerifyRsa+0xcc>)
 8022d60:	681b      	ldr	r3, [r3, #0]
 8022d62:	68db      	ldr	r3, [r3, #12]
 8022d64:	2224      	movs	r2, #36	@ 0x24
 8022d66:	2101      	movs	r1, #1
 8022d68:	4807      	ldr	r0, [pc, #28]	@ (8022d88 <signVerifyRsa+0xd4>)
 8022d6a:	f008 fdff 	bl	802b96c <fwrite>
 8022d6e:	f7fd fe24 	bl	80209ba <osResumeAllTasks>
      return CBOOT_ERROR_FAILURE;
 8022d72:	2301      	movs	r3, #1
 8022d74:	e000      	b.n	8022d78 <signVerifyRsa+0xc4>
   }

   // Successful process
   return CBOOT_NO_ERROR;
 8022d76:	2300      	movs	r3, #0
}
 8022d78:	4618      	mov	r0, r3
 8022d7a:	3730      	adds	r7, #48	@ 0x30
 8022d7c:	46bd      	mov	sp, r7
 8022d7e:	bd80      	pop	{r7, pc}
 8022d80:	2000003c 	.word	0x2000003c
 8022d84:	0802c924 	.word	0x0802c924
 8022d88:	0802c944 	.word	0x0802c944

08022d8c <updateInit>:
 * @param[in,out] context Pointer to the IAP Application context to be initialized
 * @return Status code
 **/

cboot_error_t updateInit(UpdateContext *context, UpdateSettings *settings)
{
 8022d8c:	b5b0      	push	{r4, r5, r7, lr}
 8022d8e:	b084      	sub	sp, #16
 8022d90:	af00      	add	r7, sp, #0
 8022d92:	6078      	str	r0, [r7, #4]
 8022d94:	6039      	str	r1, [r7, #0]
#if ((UPDATE_SINGLE_BANK_SUPPORT == ENABLED))
   uint16_t newImgIdx;
#endif

   // Check Parameters validity
   if (context == NULL || settings == NULL)
 8022d96:	687b      	ldr	r3, [r7, #4]
 8022d98:	2b00      	cmp	r3, #0
 8022d9a:	d002      	beq.n	8022da2 <updateInit+0x16>
 8022d9c:	683b      	ldr	r3, [r7, #0]
 8022d9e:	2b00      	cmp	r3, #0
 8022da0:	d101      	bne.n	8022da6 <updateInit+0x1a>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8022da2:	2304      	movs	r3, #4
 8022da4:	e08d      	b.n	8022ec2 <updateInit+0x136>

   // Debug message
   TRACE_INFO("Initializing IAP...\r\n");
 8022da6:	f7fd fe01 	bl	80209ac <osSuspendAllTasks>
 8022daa:	4b48      	ldr	r3, [pc, #288]	@ (8022ecc <updateInit+0x140>)
 8022dac:	681b      	ldr	r3, [r3, #0]
 8022dae:	68db      	ldr	r3, [r3, #12]
 8022db0:	2215      	movs	r2, #21
 8022db2:	2101      	movs	r1, #1
 8022db4:	4846      	ldr	r0, [pc, #280]	@ (8022ed0 <updateInit+0x144>)
 8022db6:	f008 fdd9 	bl	802b96c <fwrite>
 8022dba:	f7fd fdfe 	bl	80209ba <osResumeAllTasks>

   // Clear the Update context
   memset(context, 0, sizeof(UpdateContext));
 8022dbe:	f640 42ac 	movw	r2, #3244	@ 0xcac
 8022dc2:	2100      	movs	r1, #0
 8022dc4:	6878      	ldr	r0, [r7, #4]
 8022dc6:	f008 ff37 	bl	802bc38 <memset>

   // Save user settings
   context->settings = *settings;
 8022dca:	687a      	ldr	r2, [r7, #4]
 8022dcc:	683b      	ldr	r3, [r7, #0]
 8022dce:	4610      	mov	r0, r2
 8022dd0:	4619      	mov	r1, r3
 8022dd2:	2384      	movs	r3, #132	@ 0x84
 8022dd4:	461a      	mov	r2, r3
 8022dd6:	f008 ffec 	bl	802bdb2 <memcpy>

   // Initialize memories
   cerror = memoryInit(context->settings.memories, NB_MEMORIES);
 8022dda:	687b      	ldr	r3, [r7, #4]
 8022ddc:	3350      	adds	r3, #80	@ 0x50
 8022dde:	2101      	movs	r1, #1
 8022de0:	4618      	mov	r0, r3
 8022de2:	f7ff f968 	bl	80220b6 <memoryInit>
 8022de6:	4603      	mov	r3, r0
 8022de8:	73fb      	strb	r3, [r7, #15]
   // Is any error?
   if (cerror)
 8022dea:	7bfb      	ldrb	r3, [r7, #15]
 8022dec:	2b00      	cmp	r3, #0
 8022dee:	d00d      	beq.n	8022e0c <updateInit+0x80>
   {
      // Debug message
      TRACE_ERROR("Memory initialization failed!\r\n");
 8022df0:	f7fd fddc 	bl	80209ac <osSuspendAllTasks>
 8022df4:	4b35      	ldr	r3, [pc, #212]	@ (8022ecc <updateInit+0x140>)
 8022df6:	681b      	ldr	r3, [r3, #0]
 8022df8:	68db      	ldr	r3, [r3, #12]
 8022dfa:	221f      	movs	r2, #31
 8022dfc:	2101      	movs	r1, #1
 8022dfe:	4835      	ldr	r0, [pc, #212]	@ (8022ed4 <updateInit+0x148>)
 8022e00:	f008 fdb4 	bl	802b96c <fwrite>
 8022e04:	f7fd fdd9 	bl	80209ba <osResumeAllTasks>
      return cerror;
 8022e08:	7bfb      	ldrb	r3, [r7, #15]
 8022e0a:	e05a      	b.n	8022ec2 <updateInit+0x136>
   }

   context->memories[0] = settings->memories[0];
 8022e0c:	687a      	ldr	r2, [r7, #4]
 8022e0e:	683b      	ldr	r3, [r7, #0]
 8022e10:	f102 0484 	add.w	r4, r2, #132	@ 0x84
 8022e14:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 8022e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022e24:	682b      	ldr	r3, [r5, #0]
 8022e26:	6023      	str	r3, [r4, #0]
   context->memories[1] = settings->memories[1];
#endif

   // Link memories to the image process context
   // context->imageProcessCtx.memories = context->memories;
   context->imageProcessCtx.memories = context->settings.memories;
 8022e28:	687b      	ldr	r3, [r7, #4]
 8022e2a:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8022e2e:	687b      	ldr	r3, [r7, #4]
 8022e30:	f8c3 2ca8 	str.w	r2, [r3, #3240]	@ 0xca8
   context->imageProcessCtx.imgAntiRollbackCallback = updateAcceptUpdateImageCallback;
   // Set current application version
   context->imageProcessCtx.currentAppVersion = settings->appVersion;
#else
   // Clear anti-rollback callback
   context->imageProcessCtx.imgAntiRollbackCallback = NULL;
 8022e34:	687b      	ldr	r3, [r7, #4]
 8022e36:	2200      	movs	r2, #0
 8022e38:	f8c3 2ca4 	str.w	r2, [r3, #3236]	@ 0xca4
#endif

   // Initialize image input context (will process receive update image)
   cerror = updateInitInputImage(&context->settings, context);
 8022e3c:	687b      	ldr	r3, [r7, #4]
 8022e3e:	6879      	ldr	r1, [r7, #4]
 8022e40:	4618      	mov	r0, r3
 8022e42:	f000 fa01 	bl	8023248 <updateInitInputImage>
 8022e46:	4603      	mov	r3, r0
 8022e48:	73fb      	strb	r3, [r7, #15]
   // Is any error?
   if (cerror)
 8022e4a:	7bfb      	ldrb	r3, [r7, #15]
 8022e4c:	2b00      	cmp	r3, #0
 8022e4e:	d001      	beq.n	8022e54 <updateInit+0xc8>
      return cerror;
 8022e50:	7bfb      	ldrb	r3, [r7, #15]
 8022e52:	e036      	b.n	8022ec2 <updateInit+0x136>

   // Initialize image output context (will process the output binary or image)
   cerror = updateInitOutputImage(&context->settings, context);
 8022e54:	687b      	ldr	r3, [r7, #4]
 8022e56:	6879      	ldr	r1, [r7, #4]
 8022e58:	4618      	mov	r0, r3
 8022e5a:	f000 fab3 	bl	80233c4 <updateInitOutputImage>
 8022e5e:	4603      	mov	r3, r0
 8022e60:	73fb      	strb	r3, [r7, #15]
   // Is any error?
   if (cerror)
 8022e62:	7bfb      	ldrb	r3, [r7, #15]
 8022e64:	2b00      	cmp	r3, #0
 8022e66:	d001      	beq.n	8022e6c <updateInit+0xe0>
      return cerror;
 8022e68:	7bfb      	ldrb	r3, [r7, #15]
 8022e6a:	e02a      	b.n	8022ec2 <updateInit+0x136>

#if (UPDATE_SINGLE_BANK_SUPPORT == ENABLED)
   // Set index of output image
   cerror = updateCalculateOutputImageIdx(context, &newImgIdx);
 8022e6c:	f107 030c 	add.w	r3, r7, #12
 8022e70:	4619      	mov	r1, r3
 8022e72:	6878      	ldr	r0, [r7, #4]
 8022e74:	f000 f994 	bl	80231a0 <updateCalculateOutputImageIdx>
 8022e78:	4603      	mov	r3, r0
 8022e7a:	73fb      	strb	r3, [r7, #15]
   // Is any error?
   if (cerror)
 8022e7c:	7bfb      	ldrb	r3, [r7, #15]
 8022e7e:	2b00      	cmp	r3, #0
 8022e80:	d001      	beq.n	8022e86 <updateInit+0xfa>
      return CBOOT_ERROR_FAILURE;
 8022e82:	2301      	movs	r3, #1
 8022e84:	e01d      	b.n	8022ec2 <updateInit+0x136>

   // context->imageOutput.imgIdx = newImgIdx;
   context->imageProcessCtx.outputImage.newImageIdx = newImgIdx;
 8022e86:	89ba      	ldrh	r2, [r7, #12]
 8022e88:	687b      	ldr	r3, [r7, #4]
 8022e8a:	f8a3 2738 	strh.w	r2, [r3, #1848]	@ 0x738
#endif

   // Get slot to store output update image
   cerror = updateGetUpdateSlot(context, &context->imageProcessCtx.outputImage.activeSlot);
 8022e8e:	687b      	ldr	r3, [r7, #4]
 8022e90:	f203 7334 	addw	r3, r3, #1844	@ 0x734
 8022e94:	4619      	mov	r1, r3
 8022e96:	6878      	ldr	r0, [r7, #4]
 8022e98:	f000 f9c0 	bl	802321c <updateGetUpdateSlot>
 8022e9c:	4603      	mov	r3, r0
 8022e9e:	73fb      	strb	r3, [r7, #15]
   // Is any error?
   if (cerror)
 8022ea0:	7bfb      	ldrb	r3, [r7, #15]
 8022ea2:	2b00      	cmp	r3, #0
 8022ea4:	d001      	beq.n	8022eaa <updateInit+0x11e>
      return CBOOT_ERROR_FAILURE;
 8022ea6:	2301      	movs	r3, #1
 8022ea8:	e00b      	b.n	8022ec2 <updateInit+0x136>

#if (UPDATE_SINGLE_BANK_SUPPORT == ENABLED)
   // Make sure the output slot type isn't binary
   context->imageProcessCtx.outputImage.activeSlot->cType &= ~SLOT_CONTENT_BINARY;
 8022eaa:	687b      	ldr	r3, [r7, #4]
 8022eac:	f8d3 3734 	ldr.w	r3, [r3, #1844]	@ 0x734
 8022eb0:	785a      	ldrb	r2, [r3, #1]
 8022eb2:	687b      	ldr	r3, [r7, #4]
 8022eb4:	f8d3 3734 	ldr.w	r3, [r3, #1844]	@ 0x734
 8022eb8:	f022 0208 	bic.w	r2, r2, #8
 8022ebc:	b2d2      	uxtb	r2, r2
 8022ebe:	705a      	strb	r2, [r3, #1]
   // Make sure to specify output slot type as binary
   context->imageProcessCtx.outputImage.activeSlot->cType |= SLOT_CONTENT_BINARY;
#endif

   // Successful process
   return CBOOT_NO_ERROR;
 8022ec0:	2300      	movs	r3, #0
}
 8022ec2:	4618      	mov	r0, r3
 8022ec4:	3710      	adds	r7, #16
 8022ec6:	46bd      	mov	sp, r7
 8022ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8022eca:	bf00      	nop
 8022ecc:	2000003c 	.word	0x2000003c
 8022ed0:	0802c974 	.word	0x0802c974
 8022ed4:	0802c98c 	.word	0x0802c98c

08022ed8 <updateProcess>:
 * @param[in] length Length of the firmware chunck of data to be written
 * @return Status code
 **/

cboot_error_t updateProcess(UpdateContext *context, const void *data, size_t length)
{
 8022ed8:	b580      	push	{r7, lr}
 8022eda:	b088      	sub	sp, #32
 8022edc:	af00      	add	r7, sp, #0
 8022ede:	60f8      	str	r0, [r7, #12]
 8022ee0:	60b9      	str	r1, [r7, #8]
 8022ee2:	607a      	str	r2, [r7, #4]
   uint_t n;
   uint8_t *pData;
   Image *inputImage;

   // Check parameters validity
   if (context == NULL || data == NULL || length == 0)
 8022ee4:	68fb      	ldr	r3, [r7, #12]
 8022ee6:	2b00      	cmp	r3, #0
 8022ee8:	d005      	beq.n	8022ef6 <updateProcess+0x1e>
 8022eea:	68bb      	ldr	r3, [r7, #8]
 8022eec:	2b00      	cmp	r3, #0
 8022eee:	d002      	beq.n	8022ef6 <updateProcess+0x1e>
 8022ef0:	687b      	ldr	r3, [r7, #4]
 8022ef2:	2b00      	cmp	r3, #0
 8022ef4:	d101      	bne.n	8022efa <updateProcess+0x22>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8022ef6:	2304      	movs	r3, #4
 8022ef8:	e061      	b.n	8022fbe <updateProcess+0xe6>

   // Initialize variables
   n = 0;
 8022efa:	2300      	movs	r3, #0
 8022efc:	61bb      	str	r3, [r7, #24]

   // Point to input image handler
   inputImage = &context->imageProcessCtx.inputImage;
 8022efe:	68fb      	ldr	r3, [r7, #12]
 8022f00:	33b8      	adds	r3, #184	@ 0xb8
 8022f02:	617b      	str	r3, [r7, #20]

   // Point to the beginning of the data
   pData = (uint8_t *)data;
 8022f04:	68bb      	ldr	r3, [r7, #8]
 8022f06:	61fb      	str	r3, [r7, #28]

   // Process the incoming data
   while (length > 0)
 8022f08:	e055      	b.n	8022fb6 <updateProcess+0xde>
   {
      // Still room in buffer?
      if (inputImage->bufferLen < sizeof(inputImage->buffer))
 8022f0a:	697b      	ldr	r3, [r7, #20]
 8022f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022f10:	2b7f      	cmp	r3, #127	@ 0x7f
 8022f12:	d842      	bhi.n	8022f9a <updateProcess+0xc2>
      {
         // Fill buffer with input data
         n = MIN(length, sizeof(inputImage->buffer) - inputImage->bufferLen);
 8022f14:	697b      	ldr	r3, [r7, #20]
 8022f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022f1a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8022f1e:	687a      	ldr	r2, [r7, #4]
 8022f20:	4293      	cmp	r3, r2
 8022f22:	bf28      	it	cs
 8022f24:	4613      	movcs	r3, r2
 8022f26:	61bb      	str	r3, [r7, #24]
         memcpy(inputImage->bufferPos, pData, n);
 8022f28:	697b      	ldr	r3, [r7, #20]
 8022f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8022f2e:	69ba      	ldr	r2, [r7, #24]
 8022f30:	69f9      	ldr	r1, [r7, #28]
 8022f32:	4618      	mov	r0, r3
 8022f34:	f008 ff3d 	bl	802bdb2 <memcpy>

         // Update buffer position and length
         inputImage->bufferPos += n;
 8022f38:	697b      	ldr	r3, [r7, #20]
 8022f3a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8022f3e:	69bb      	ldr	r3, [r7, #24]
 8022f40:	441a      	add	r2, r3
 8022f42:	697b      	ldr	r3, [r7, #20]
 8022f44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
         inputImage->bufferLen += n;
 8022f48:	697b      	ldr	r3, [r7, #20]
 8022f4a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8022f4e:	69bb      	ldr	r3, [r7, #24]
 8022f50:	441a      	add	r2, r3
 8022f52:	697b      	ldr	r3, [r7, #20]
 8022f54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

         // Update input data position and length
         pData += n;
 8022f58:	69fa      	ldr	r2, [r7, #28]
 8022f5a:	69bb      	ldr	r3, [r7, #24]
 8022f5c:	4413      	add	r3, r2
 8022f5e:	61fb      	str	r3, [r7, #28]
         length -= n;
 8022f60:	687a      	ldr	r2, [r7, #4]
 8022f62:	69bb      	ldr	r3, [r7, #24]
 8022f64:	1ad3      	subs	r3, r2, r3
 8022f66:	607b      	str	r3, [r7, #4]

         // Process received image input data
         cerror = imageProcessInputImage(&context->imageProcessCtx);
 8022f68:	68fb      	ldr	r3, [r7, #12]
 8022f6a:	33b8      	adds	r3, #184	@ 0xb8
 8022f6c:	4618      	mov	r0, r3
 8022f6e:	f7fe fae5 	bl	802153c <imageProcessInputImage>
 8022f72:	4603      	mov	r3, r0
 8022f74:	74fb      	strb	r3, [r7, #19]
         // Is any error?
         if (cerror)
 8022f76:	7cfb      	ldrb	r3, [r7, #19]
 8022f78:	2b00      	cmp	r3, #0
 8022f7a:	d01c      	beq.n	8022fb6 <updateProcess+0xde>
#if (UPDATE_SINGLE_BANK_SUPPORT == ENABLED)
            // Erase output image slot first bytes to make sure bootloader doesn't
            // consider it as a new valid update image if a reboot occurs
            // context->secondaryMem.driver->erase(
            //    context->imageOutput.slotInfo->addr, sizeof(ImageHeader));
            cerror = memoryEraseSlot(context->imageProcessCtx.outputImage.activeSlot,
 8022f7c:	68fb      	ldr	r3, [r7, #12]
 8022f7e:	f8d3 3734 	ldr.w	r3, [r3, #1844]	@ 0x734
 8022f82:	2240      	movs	r2, #64	@ 0x40
 8022f84:	2100      	movs	r1, #0
 8022f86:	4618      	mov	r0, r3
 8022f88:	f7ff fa1b 	bl	80223c2 <memoryEraseSlot>
 8022f8c:	4603      	mov	r3, r0
 8022f8e:	74fb      	strb	r3, [r7, #19]
                                     0, sizeof(ImageHeader));
#endif
            // Is any error?
            if (cerror)
 8022f90:	7cfb      	ldrb	r3, [r7, #19]
 8022f92:	2b00      	cmp	r3, #0
 8022f94:	d00f      	beq.n	8022fb6 <updateProcess+0xde>
            {
               return cerror;
 8022f96:	7cfb      	ldrb	r3, [r7, #19]
 8022f98:	e011      	b.n	8022fbe <updateProcess+0xe6>
         }
      }
      else
      {
         // Debug message
         TRACE_ERROR("Buffer would overflow!\r\n");
 8022f9a:	f7fd fd07 	bl	80209ac <osSuspendAllTasks>
 8022f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8022fc8 <updateProcess+0xf0>)
 8022fa0:	681b      	ldr	r3, [r3, #0]
 8022fa2:	68db      	ldr	r3, [r3, #12]
 8022fa4:	2218      	movs	r2, #24
 8022fa6:	2101      	movs	r1, #1
 8022fa8:	4808      	ldr	r0, [pc, #32]	@ (8022fcc <updateProcess+0xf4>)
 8022faa:	f008 fcdf 	bl	802b96c <fwrite>
 8022fae:	f7fd fd04 	bl	80209ba <osResumeAllTasks>
         return CBOOT_ERROR_BUFFER_OVERFLOW;
 8022fb2:	2317      	movs	r3, #23
 8022fb4:	e003      	b.n	8022fbe <updateProcess+0xe6>
   while (length > 0)
 8022fb6:	687b      	ldr	r3, [r7, #4]
 8022fb8:	2b00      	cmp	r3, #0
 8022fba:	d1a6      	bne.n	8022f0a <updateProcess+0x32>
      }
   }

   // Successful process
   return CBOOT_NO_ERROR;
 8022fbc:	2300      	movs	r3, #0
}
 8022fbe:	4618      	mov	r0, r3
 8022fc0:	3720      	adds	r7, #32
 8022fc2:	46bd      	mov	sp, r7
 8022fc4:	bd80      	pop	{r7, pc}
 8022fc6:	bf00      	nop
 8022fc8:	2000003c 	.word	0x2000003c
 8022fcc:	0802c9ac 	.word	0x0802c9ac

08022fd0 <updateFinalize>:
 * @param[in,out] context Pointer to the IAP application context
 * @return Error code
 **/

cboot_error_t updateFinalize(UpdateContext *context)
{
 8022fd0:	b580      	push	{r7, lr}
 8022fd2:	b086      	sub	sp, #24
 8022fd4:	af00      	add	r7, sp, #0
 8022fd6:	6078      	str	r0, [r7, #4]
#if ((CIPHER_SUPPORT == ENABLED) && (IMAGE_INPUT_ENCRYPTED == ENABLED))
   bool_t magicNumberIsValid;
#endif

   // Check parameters validity
   if (context == NULL)
 8022fd8:	687b      	ldr	r3, [r7, #4]
 8022fda:	2b00      	cmp	r3, #0
 8022fdc:	d101      	bne.n	8022fe2 <updateFinalize+0x12>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8022fde:	2304      	movs	r3, #4
 8022fe0:	e094      	b.n	802310c <updateFinalize+0x13c>

   // Debug message
   TRACE_INFO("Finalizing firmware update...\r\n");
 8022fe2:	f7fd fce3 	bl	80209ac <osSuspendAllTasks>
 8022fe6:	4b4b      	ldr	r3, [pc, #300]	@ (8023114 <updateFinalize+0x144>)
 8022fe8:	681b      	ldr	r3, [r3, #0]
 8022fea:	68db      	ldr	r3, [r3, #12]
 8022fec:	221f      	movs	r2, #31
 8022fee:	2101      	movs	r1, #1
 8022ff0:	4849      	ldr	r0, [pc, #292]	@ (8023118 <updateFinalize+0x148>)
 8022ff2:	f008 fcbb 	bl	802b96c <fwrite>
 8022ff6:	f7fd fce0 	bl	80209ba <osResumeAllTasks>

   // Point to the image input context
   imageIn = (Image *)&context->imageProcessCtx.inputImage;
 8022ffa:	687b      	ldr	r3, [r7, #4]
 8022ffc:	33b8      	adds	r3, #184	@ 0xb8
 8022ffe:	617b      	str	r3, [r7, #20]
#if (UPDATE_SINGLE_BANK_SUPPORT == ENABLED)
   // Point to the image output context
   imageOut = (Image *)&context->imageProcessCtx.outputImage;
 8023000:	687b      	ldr	r3, [r7, #4]
 8023002:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 8023006:	613b      	str	r3, [r7, #16]
#endif

   // Ready to verify firmware image validity?
   if (imageIn->state == IMAGE_STATE_VALIDATE_APP)
 8023008:	697b      	ldr	r3, [r7, #20]
 802300a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 802300e:	2b04      	cmp	r3, #4
 8023010:	d167      	bne.n	80230e2 <updateFinalize+0x112>
   {
      // Verify firmware image validity (could integrity tag or
      // authentification tag or signature)
      cerror = verifyConfirm(&imageIn->verifyContext, imageIn->checkData, imageIn->checkDataLen);
 8023012:	697b      	ldr	r3, [r7, #20]
 8023014:	f503 702e 	add.w	r0, r3, #696	@ 0x2b8
 8023018:	697b      	ldr	r3, [r7, #20]
 802301a:	f503 717a 	add.w	r1, r3, #1000	@ 0x3e8
 802301e:	697b      	ldr	r3, [r7, #20]
 8023020:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	@ 0x5ec
 8023024:	461a      	mov	r2, r3
 8023026:	f7ff fcaf 	bl	8022988 <verifyConfirm>
 802302a:	4603      	mov	r3, r0
 802302c:	73fb      	strb	r3, [r7, #15]
      // Is any error?
      if (cerror)
 802302e:	7bfb      	ldrb	r3, [r7, #15]
 8023030:	2b00      	cmp	r3, #0
 8023032:	d019      	beq.n	8023068 <updateFinalize+0x98>
      {
         // Debug message
         TRACE_ERROR("Firmware image is invalid!\r\n");
 8023034:	f7fd fcba 	bl	80209ac <osSuspendAllTasks>
 8023038:	4b36      	ldr	r3, [pc, #216]	@ (8023114 <updateFinalize+0x144>)
 802303a:	681b      	ldr	r3, [r3, #0]
 802303c:	68db      	ldr	r3, [r3, #12]
 802303e:	221c      	movs	r2, #28
 8023040:	2101      	movs	r1, #1
 8023042:	4836      	ldr	r0, [pc, #216]	@ (802311c <updateFinalize+0x14c>)
 8023044:	f008 fc92 	bl	802b96c <fwrite>
 8023048:	f7fd fcb7 	bl	80209ba <osResumeAllTasks>

#if (UPDATE_SINGLE_BANK_SUPPORT == ENABLED)
         // Erase output image slot first bytes to make sure bootloader doesn't
         // consider it as a new valid update image if a reboot occurs
         memoryEraseSlot(imageOut->activeSlot, 0, sizeof(ImageHeader));
 802304c:	693b      	ldr	r3, [r7, #16]
 802304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8023052:	2240      	movs	r2, #64	@ 0x40
 8023054:	2100      	movs	r1, #0
 8023056:	4618      	mov	r0, r3
 8023058:	f7ff f9b3 	bl	80223c2 <memoryEraseSlot>
#endif

         // Return to IAP idle state
         imageIn->state = IMAGE_STATE_IDLE;
 802305c:	697b      	ldr	r3, [r7, #20]
 802305e:	2200      	movs	r2, #0
 8023060:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
         // Return error code
         return CBOOT_ERROR_INVALID_IMAGE_APP;
 8023064:	2311      	movs	r3, #17
 8023066:	e051      	b.n	802310c <updateFinalize+0x13c>
#if ((CIPHER_SUPPORT == ENABLED) && (IMAGE_INPUT_ENCRYPTED == ENABLED))
         //Check given magic number crc
         //- If it is valid it means that the cipher key provided by the user for decryption is the same as the one used to encrypt update image
         //- Else it means that the cipher key provided by the user doesn't match the one used to encrypt the update image and
         //  that the decrypted image data will be wrong. In that case the update MUST be invalidate.
         cerror = cipherCheckMagicNumberCrc(imageIn->magicNumberCrc, &magicNumberIsValid);
 8023068:	697b      	ldr	r3, [r7, #20]
 802306a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 802306e:	f107 0208 	add.w	r2, r7, #8
 8023072:	4611      	mov	r1, r2
 8023074:	4618      	mov	r0, r3
 8023076:	f7ff fba7 	bl	80227c8 <cipherCheckMagicNumberCrc>
 802307a:	4603      	mov	r3, r0
 802307c:	73fb      	strb	r3, [r7, #15]
         if(cerror || !magicNumberIsValid)
 802307e:	7bfb      	ldrb	r3, [r7, #15]
 8023080:	2b00      	cmp	r3, #0
 8023082:	d102      	bne.n	802308a <updateFinalize+0xba>
 8023084:	68bb      	ldr	r3, [r7, #8]
 8023086:	2b00      	cmp	r3, #0
 8023088:	d119      	bne.n	80230be <updateFinalize+0xee>
         {
            // Debug message
            TRACE_ERROR("Firmware image is valid but cipher key used is invalid!\r\n");
 802308a:	f7fd fc8f 	bl	80209ac <osSuspendAllTasks>
 802308e:	4b21      	ldr	r3, [pc, #132]	@ (8023114 <updateFinalize+0x144>)
 8023090:	681b      	ldr	r3, [r3, #0]
 8023092:	68db      	ldr	r3, [r3, #12]
 8023094:	2239      	movs	r2, #57	@ 0x39
 8023096:	2101      	movs	r1, #1
 8023098:	4821      	ldr	r0, [pc, #132]	@ (8023120 <updateFinalize+0x150>)
 802309a:	f008 fc67 	bl	802b96c <fwrite>
 802309e:	f7fd fc8c 	bl	80209ba <osResumeAllTasks>

#if (UPDATE_SINGLE_BANK_SUPPORT == ENABLED)
            // Erase output image slot first bytes to make sure bootloader doesn't
            // consider it as a new valid update image if a reboot occurs
            memoryEraseSlot(imageOut->activeSlot, 0, sizeof(ImageHeader));
 80230a2:	693b      	ldr	r3, [r7, #16]
 80230a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80230a8:	2240      	movs	r2, #64	@ 0x40
 80230aa:	2100      	movs	r1, #0
 80230ac:	4618      	mov	r0, r3
 80230ae:	f7ff f988 	bl	80223c2 <memoryEraseSlot>
#endif

            // Return to IAP idle state
            imageIn->state = IMAGE_STATE_IDLE;
 80230b2:	697b      	ldr	r3, [r7, #20]
 80230b4:	2200      	movs	r2, #0
 80230b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
            // Return error code
            return CBOOT_ERROR_INVALID_IMAGE_APP;
 80230ba:	2311      	movs	r3, #17
 80230bc:	e026      	b.n	802310c <updateFinalize+0x13c>
         }
         else
#endif
         {
            // Debug message
            TRACE_INFO("Firmware image is valid\r\n");
 80230be:	f7fd fc75 	bl	80209ac <osSuspendAllTasks>
 80230c2:	4b14      	ldr	r3, [pc, #80]	@ (8023114 <updateFinalize+0x144>)
 80230c4:	681b      	ldr	r3, [r3, #0]
 80230c6:	68db      	ldr	r3, [r3, #12]
 80230c8:	2219      	movs	r2, #25
 80230ca:	2101      	movs	r1, #1
 80230cc:	4815      	ldr	r0, [pc, #84]	@ (8023124 <updateFinalize+0x154>)
 80230ce:	f008 fc4d 	bl	802b96c <fwrite>
 80230d2:	f7fd fc72 	bl	80209ba <osResumeAllTasks>
         if (cerror)
            return cerror;
      }
#endif
      // Change IAP state
      imageIn->state = IMAGE_STATE_APP_REBOOT;
 80230d6:	697b      	ldr	r3, [r7, #20]
 80230d8:	2205      	movs	r2, #5
 80230da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      // Return error code
      return CBOOT_ERROR_IMAGE_NOT_READY;
   }

   // Successful process
   return CBOOT_NO_ERROR;
 80230de:	2300      	movs	r3, #0
 80230e0:	e014      	b.n	802310c <updateFinalize+0x13c>
      TRACE_ERROR("Firmware image is not ready for verification!\r\n");
 80230e2:	f7fd fc63 	bl	80209ac <osSuspendAllTasks>
 80230e6:	4b0b      	ldr	r3, [pc, #44]	@ (8023114 <updateFinalize+0x144>)
 80230e8:	681b      	ldr	r3, [r3, #0]
 80230ea:	68db      	ldr	r3, [r3, #12]
 80230ec:	222f      	movs	r2, #47	@ 0x2f
 80230ee:	2101      	movs	r1, #1
 80230f0:	480d      	ldr	r0, [pc, #52]	@ (8023128 <updateFinalize+0x158>)
 80230f2:	f008 fc3b 	bl	802b96c <fwrite>
 80230f6:	f7fd fc60 	bl	80209ba <osResumeAllTasks>
      memoryEraseSlot(imageOut->activeSlot, 0, sizeof(ImageHeader));
 80230fa:	693b      	ldr	r3, [r7, #16]
 80230fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8023100:	2240      	movs	r2, #64	@ 0x40
 8023102:	2100      	movs	r1, #0
 8023104:	4618      	mov	r0, r3
 8023106:	f7ff f95c 	bl	80223c2 <memoryEraseSlot>
      return CBOOT_ERROR_IMAGE_NOT_READY;
 802310a:	2313      	movs	r3, #19
}
 802310c:	4618      	mov	r0, r3
 802310e:	3718      	adds	r7, #24
 8023110:	46bd      	mov	sp, r7
 8023112:	bd80      	pop	{r7, pc}
 8023114:	2000003c 	.word	0x2000003c
 8023118:	0802c9c8 	.word	0x0802c9c8
 802311c:	0802c9e8 	.word	0x0802c9e8
 8023120:	0802ca08 	.word	0x0802ca08
 8023124:	0802ca44 	.word	0x0802ca44
 8023128:	0802ca60 	.word	0x0802ca60

0802312c <updateReboot>:
 * @param[in] context Pointer to the IAP context
 * @return Error code.
 **/

cboot_error_t updateReboot(UpdateContext *context)
{
 802312c:	b580      	push	{r7, lr}
 802312e:	b08c      	sub	sp, #48	@ 0x30
 8023130:	af00      	add	r7, sp, #0
 8023132:	6078      	str	r0, [r7, #4]
   cboot_error_t cerror;
   MemoryInfo memInfo;
   Memory *primaryMemory;

   // Debug message
   TRACE_INFO("Rebooting device to finalize update...\r\n");
 8023134:	f7fd fc3a 	bl	80209ac <osSuspendAllTasks>
 8023138:	4b17      	ldr	r3, [pc, #92]	@ (8023198 <updateReboot+0x6c>)
 802313a:	681b      	ldr	r3, [r3, #0]
 802313c:	68db      	ldr	r3, [r3, #12]
 802313e:	2228      	movs	r2, #40	@ 0x28
 8023140:	2101      	movs	r1, #1
 8023142:	4816      	ldr	r0, [pc, #88]	@ (802319c <updateReboot+0x70>)
 8023144:	f008 fc12 	bl	802b96c <fwrite>
 8023148:	f7fd fc37 	bl	80209ba <osResumeAllTasks>

   // Check parameter validity
   if (context == NULL)
 802314c:	687b      	ldr	r3, [r7, #4]
 802314e:	2b00      	cmp	r3, #0
 8023150:	d101      	bne.n	8023156 <updateReboot+0x2a>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023152:	2304      	movs	r3, #4
 8023154:	e01c      	b.n	8023190 <updateReboot+0x64>

   // Point to the primary memory
   primaryMemory = (Memory *)&context->memories[0];
 8023156:	687b      	ldr	r3, [r7, #4]
 8023158:	3384      	adds	r3, #132	@ 0x84
 802315a:	62fb      	str	r3, [r7, #44]	@ 0x2c

   if (context->imageProcessCtx.inputImage.state == IMAGE_STATE_APP_REBOOT)
 802315c:	687b      	ldr	r3, [r7, #4]
 802315e:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8023162:	2b05      	cmp	r3, #5
 8023164:	d113      	bne.n	802318e <updateReboot+0x62>
   {
      // Get flash info
      cerror = memoryGetInfo(primaryMemory, &memInfo);
 8023166:	f107 030c 	add.w	r3, r7, #12
 802316a:	4619      	mov	r1, r3
 802316c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 802316e:	f7fe fff0 	bl	8022152 <memoryGetInfo>
 8023172:	4603      	mov	r3, r0
 8023174:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      // Is any error?
      if (cerror)
 8023178:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 802317c:	2b00      	cmp	r3, #0
 802317e:	d002      	beq.n	8023186 <updateReboot+0x5a>
         return cerror;
 8023180:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8023184:	e004      	b.n	8023190 <updateReboot+0x64>

#if (UPDATE_SINGLE_BANK_SUPPORT == ENABLED)
      // Reboot system to complete firmware update procedure
      mcuSystemReset();
 8023186:	f7fd fdaf 	bl	8020ce8 <mcuSystemReset>
      // Wrong state
      return CBOOT_ERROR_INVALID_STATE;
   }

   // Successful process
   return CBOOT_NO_ERROR;
 802318a:	2300      	movs	r3, #0
 802318c:	e000      	b.n	8023190 <updateReboot+0x64>
      return CBOOT_ERROR_INVALID_STATE;
 802318e:	2316      	movs	r3, #22
}
 8023190:	4618      	mov	r0, r3
 8023192:	3730      	adds	r7, #48	@ 0x30
 8023194:	46bd      	mov	sp, r7
 8023196:	bd80      	pop	{r7, pc}
 8023198:	2000003c 	.word	0x2000003c
 802319c:	0802ca90 	.word	0x0802ca90

080231a0 <updateCalculateOutputImageIdx>:
 * @param[out] imgIdx Calculated value of the output image index.
 * @return Error code.
 **/

cboot_error_t updateCalculateOutputImageIdx(UpdateContext *context, uint16_t *imgIdx)
{
 80231a0:	b580      	push	{r7, lr}
 80231a2:	b096      	sub	sp, #88	@ 0x58
 80231a4:	af00      	add	r7, sp, #0
 80231a6:	6078      	str	r0, [r7, #4]
 80231a8:	6039      	str	r1, [r7, #0]
   ImageHeader imgHeader;
   Slot *appSlot;
   uint32_t curIdx;

   // Check paramter validity
   if (context == NULL || imgIdx == NULL)
 80231aa:	687b      	ldr	r3, [r7, #4]
 80231ac:	2b00      	cmp	r3, #0
 80231ae:	d002      	beq.n	80231b6 <updateCalculateOutputImageIdx+0x16>
 80231b0:	683b      	ldr	r3, [r7, #0]
 80231b2:	2b00      	cmp	r3, #0
 80231b4:	d101      	bne.n	80231ba <updateCalculateOutputImageIdx+0x1a>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80231b6:	2304      	movs	r3, #4
 80231b8:	e02c      	b.n	8023214 <updateCalculateOutputImageIdx+0x74>

   // Get primary memory slot that holds app
   cerror = memoryGetSlotByCType(&context->memories[0], SLOT_CONTENT_APP, &appSlot);
 80231ba:	687b      	ldr	r3, [r7, #4]
 80231bc:	3384      	adds	r3, #132	@ 0x84
 80231be:	f107 020c 	add.w	r2, r7, #12
 80231c2:	2101      	movs	r1, #1
 80231c4:	4618      	mov	r0, r3
 80231c6:	f7ff f9e4 	bl	8022592 <memoryGetSlotByCType>
 80231ca:	4603      	mov	r3, r0
 80231cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
   // Is any error?
   if (cerror)
 80231d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80231d4:	2b00      	cmp	r3, #0
 80231d6:	d002      	beq.n	80231de <updateCalculateOutputImageIdx+0x3e>
      return cerror;
 80231d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80231dc:	e01a      	b.n	8023214 <updateCalculateOutputImageIdx+0x74>

   // Get image header from primary flash memory first slot
   cerror = updateGetImageHeaderFromSlot(appSlot, &imgHeader);
 80231de:	68fb      	ldr	r3, [r7, #12]
 80231e0:	f107 0210 	add.w	r2, r7, #16
 80231e4:	4611      	mov	r1, r2
 80231e6:	4618      	mov	r0, r3
 80231e8:	f000 f934 	bl	8023454 <updateGetImageHeaderFromSlot>
 80231ec:	4603      	mov	r3, r0
 80231ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
   // Is any error?
   if (cerror)
 80231f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80231f6:	2b00      	cmp	r3, #0
 80231f8:	d002      	beq.n	8023200 <updateCalculateOutputImageIdx+0x60>
      return cerror;
 80231fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80231fe:	e009      	b.n	8023214 <updateCalculateOutputImageIdx+0x74>

   // Get image index from header
   curIdx = imgHeader.imgIndex;
 8023200:	697b      	ldr	r3, [r7, #20]
 8023202:	653b      	str	r3, [r7, #80]	@ 0x50
   // Save incremented image index
   *imgIdx = ++curIdx;
 8023204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023206:	3301      	adds	r3, #1
 8023208:	653b      	str	r3, [r7, #80]	@ 0x50
 802320a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802320c:	b29a      	uxth	r2, r3
 802320e:	683b      	ldr	r3, [r7, #0]
 8023210:	801a      	strh	r2, [r3, #0]

   // Successful process
   return CBOOT_NO_ERROR;
 8023212:	2300      	movs	r3, #0
}
 8023214:	4618      	mov	r0, r3
 8023216:	3758      	adds	r7, #88	@ 0x58
 8023218:	46bd      	mov	sp, r7
 802321a:	bd80      	pop	{r7, pc}

0802321c <updateGetUpdateSlot>:
 * @param[out] slot Pointer to the slot that will be used to hold output image.
 * @return
 **/

cboot_error_t updateGetUpdateSlot(UpdateContext *context, Slot **slot)
{
 802321c:	b480      	push	{r7}
 802321e:	b083      	sub	sp, #12
 8023220:	af00      	add	r7, sp, #0
 8023222:	6078      	str	r0, [r7, #4]
 8023224:	6039      	str	r1, [r7, #0]
   Slot *tempSlot;
   ImageHeader header;
#endif

   // Check parameters validity
   if (context == NULL)
 8023226:	687b      	ldr	r3, [r7, #4]
 8023228:	2b00      	cmp	r3, #0
 802322a:	d101      	bne.n	8023230 <updateGetUpdateSlot+0x14>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 802322c:	2304      	movs	r3, #4
 802322e:	e005      	b.n	802323c <updateGetUpdateSlot+0x20>
#if (UPDATE_FALLBACK_SUPPORT == DISABLED)
      // In single bank mode without fallback support only one
#if (EXTERNAL_MEMORY_SUPPORT == ENABLED)
   *slot = (Slot *)&context->settings.memories[1].slots[0];
#else
   *slot = (Slot *)&context->settings.memories[0].slots[1];
 8023230:	687b      	ldr	r3, [r7, #4]
 8023232:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8023236:	683b      	ldr	r3, [r7, #0]
 8023238:	601a      	str	r2, [r3, #0]
   }
#endif
#endif

   // Successful process
   return CBOOT_NO_ERROR;
 802323a:	2300      	movs	r3, #0
}
 802323c:	4618      	mov	r0, r3
 802323e:	370c      	adds	r7, #12
 8023240:	46bd      	mov	sp, r7
 8023242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023246:	4770      	bx	lr

08023248 <updateInitInputImage>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

cboot_error_t updateInitInputImage(UpdateSettings *settings, UpdateContext *context)
{
 8023248:	b590      	push	{r4, r7, lr}
 802324a:	b087      	sub	sp, #28
 802324c:	af02      	add	r7, sp, #8
 802324e:	6078      	str	r0, [r7, #4]
 8023250:	6039      	str	r1, [r7, #0]
   cboot_error_t cerror;
   Image *imageIn;

   //Initialize status code
   cerror = CBOOT_NO_ERROR;
 8023252:	2300      	movs	r3, #0
 8023254:	73fb      	strb	r3, [r7, #15]

   //Check parameters validity
   if(context == NULL || settings == NULL)
 8023256:	683b      	ldr	r3, [r7, #0]
 8023258:	2b00      	cmp	r3, #0
 802325a:	d002      	beq.n	8023262 <updateInitInputImage+0x1a>
 802325c:	687b      	ldr	r3, [r7, #4]
 802325e:	2b00      	cmp	r3, #0
 8023260:	d101      	bne.n	8023266 <updateInitInputImage+0x1e>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023262:	2304      	movs	r3, #4
 8023264:	e0a4      	b.n	80233b0 <updateInitInputImage+0x168>

   //Check image verification method settings
   if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 8023266:	687b      	ldr	r3, [r7, #4]
 8023268:	7c1b      	ldrb	r3, [r3, #16]
 802326a:	2b00      	cmp	r3, #0
 802326c:	d105      	bne.n	802327a <updateInitInputImage+0x32>
   {
#if VERIFY_INTEGRITY_SUPPORT == ENABLED
      //Check image integrity verification settings
      if(settings->imageInCrypto.verifySettings.integrityAlgo == NULL)
 802326e:	687b      	ldr	r3, [r7, #4]
 8023270:	695b      	ldr	r3, [r3, #20]
 8023272:	2b00      	cmp	r3, #0
 8023274:	d135      	bne.n	80232e2 <updateInitInputImage+0x9a>
         return CBOOT_ERROR_INVALID_PARAMETERS;
 8023276:	2304      	movs	r3, #4
 8023278:	e09a      	b.n	80233b0 <updateInitInputImage+0x168>
#else
      //Image integrity verification support is not activated
      return CBOOT_ERROR_INVALID_PARAMETERS;
#endif
   }
   else if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 802327a:	687b      	ldr	r3, [r7, #4]
 802327c:	7c1b      	ldrb	r3, [r3, #16]
 802327e:	2b01      	cmp	r3, #1
 8023280:	d101      	bne.n	8023286 <updateInitInputImage+0x3e>
      //Force authentication algorythm to HMAC
      if(settings->imageInCrypto.verifySettings.authAlgo != VERIFY_AUTH_HMAC)
         return CBOOT_ERROR_UNSUPPORTED_AUTH_ALGO;
#else
      //Image authentication verification support is not activated
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023282:	2304      	movs	r3, #4
 8023284:	e094      	b.n	80233b0 <updateInitInputImage+0x168>
#endif
   }
   else if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 8023286:	687b      	ldr	r3, [r7, #4]
 8023288:	7c1b      	ldrb	r3, [r3, #16]
 802328a:	2b02      	cmp	r3, #2
 802328c:	d11b      	bne.n	80232c6 <updateInitInputImage+0x7e>
   {
#if VERIFY_SIGNATURE_SUPPORT == ENABLED
      //Check image signature verification settings
      if(settings->imageInCrypto.verifySettings.signAlgo == VERIFY_SIGN_NONE ||
 802328e:	687b      	ldr	r3, [r7, #4]
 8023290:	7e1b      	ldrb	r3, [r3, #24]
 8023292:	2b00      	cmp	r3, #0
 8023294:	d00b      	beq.n	80232ae <updateInitInputImage+0x66>
         settings->imageInCrypto.verifySettings.signHashAlgo == NULL ||
 8023296:	687b      	ldr	r3, [r7, #4]
 8023298:	69db      	ldr	r3, [r3, #28]
      if(settings->imageInCrypto.verifySettings.signAlgo == VERIFY_SIGN_NONE ||
 802329a:	2b00      	cmp	r3, #0
 802329c:	d007      	beq.n	80232ae <updateInitInputImage+0x66>
         settings->imageInCrypto.verifySettings.signKey == NULL ||
 802329e:	687b      	ldr	r3, [r7, #4]
 80232a0:	6a1b      	ldr	r3, [r3, #32]
         settings->imageInCrypto.verifySettings.signHashAlgo == NULL ||
 80232a2:	2b00      	cmp	r3, #0
 80232a4:	d003      	beq.n	80232ae <updateInitInputImage+0x66>
         settings->imageInCrypto.verifySettings.signKeyLen == 0)
 80232a6:	687b      	ldr	r3, [r7, #4]
 80232a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
         settings->imageInCrypto.verifySettings.signKey == NULL ||
 80232aa:	2b00      	cmp	r3, #0
 80232ac:	d101      	bne.n	80232b2 <updateInitInputImage+0x6a>
         return CBOOT_ERROR_INVALID_PARAMETERS;
 80232ae:	2304      	movs	r3, #4
 80232b0:	e07e      	b.n	80233b0 <updateInitInputImage+0x168>

      //Check signature algorithm is supported
      if(settings->imageInCrypto.verifySettings.signAlgo != VERIFY_SIGN_RSA &&
 80232b2:	687b      	ldr	r3, [r7, #4]
 80232b4:	7e1b      	ldrb	r3, [r3, #24]
 80232b6:	2b01      	cmp	r3, #1
 80232b8:	d013      	beq.n	80232e2 <updateInitInputImage+0x9a>
         settings->imageInCrypto.verifySettings.signAlgo != VERIFY_SIGN_ECDSA)
 80232ba:	687b      	ldr	r3, [r7, #4]
 80232bc:	7e1b      	ldrb	r3, [r3, #24]
      if(settings->imageInCrypto.verifySettings.signAlgo != VERIFY_SIGN_RSA &&
 80232be:	2b02      	cmp	r3, #2
 80232c0:	d00f      	beq.n	80232e2 <updateInitInputImage+0x9a>
         return CBOOT_ERROR_UNSUPPORTED_SIGNATURE_ALGO;
 80232c2:	2323      	movs	r3, #35	@ 0x23
 80232c4:	e074      	b.n	80233b0 <updateInitInputImage+0x168>
#endif
   }
   else
   {
      //Debug message
      TRACE_ERROR("Image verification mode not supported!\r\n");
 80232c6:	f7fd fb71 	bl	80209ac <osSuspendAllTasks>
 80232ca:	4b3b      	ldr	r3, [pc, #236]	@ (80233b8 <updateInitInputImage+0x170>)
 80232cc:	681b      	ldr	r3, [r3, #0]
 80232ce:	68db      	ldr	r3, [r3, #12]
 80232d0:	2228      	movs	r2, #40	@ 0x28
 80232d2:	2101      	movs	r1, #1
 80232d4:	4839      	ldr	r0, [pc, #228]	@ (80233bc <updateInitInputImage+0x174>)
 80232d6:	f008 fb49 	bl	802b96c <fwrite>
 80232da:	f7fd fb6e 	bl	80209ba <osResumeAllTasks>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80232de:	2304      	movs	r3, #4
 80232e0:	e066      	b.n	80233b0 <updateInitInputImage+0x168>
   }

#if ((CIPHER_SUPPORT == ENABLED) && (IMAGE_INPUT_ENCRYPTED == ENABLED))
   //Check encryption settings
   if(settings->imageInCrypto.cipherAlgo == NULL || settings->imageInCrypto.cipherMode == CIPHER_MODE_NULL ||
 80232e2:	687b      	ldr	r3, [r7, #4]
 80232e4:	681b      	ldr	r3, [r3, #0]
 80232e6:	2b00      	cmp	r3, #0
 80232e8:	d00b      	beq.n	8023302 <updateInitInputImage+0xba>
 80232ea:	687b      	ldr	r3, [r7, #4]
 80232ec:	791b      	ldrb	r3, [r3, #4]
 80232ee:	2b00      	cmp	r3, #0
 80232f0:	d007      	beq.n	8023302 <updateInitInputImage+0xba>
       settings->imageInCrypto.cipherKey == NULL || settings->imageInCrypto.cipherKeyLen == 0)
 80232f2:	687b      	ldr	r3, [r7, #4]
 80232f4:	689b      	ldr	r3, [r3, #8]
   if(settings->imageInCrypto.cipherAlgo == NULL || settings->imageInCrypto.cipherMode == CIPHER_MODE_NULL ||
 80232f6:	2b00      	cmp	r3, #0
 80232f8:	d003      	beq.n	8023302 <updateInitInputImage+0xba>
       settings->imageInCrypto.cipherKey == NULL || settings->imageInCrypto.cipherKeyLen == 0)
 80232fa:	687b      	ldr	r3, [r7, #4]
 80232fc:	68db      	ldr	r3, [r3, #12]
 80232fe:	2b00      	cmp	r3, #0
 8023300:	d101      	bne.n	8023306 <updateInitInputImage+0xbe>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023302:	2304      	movs	r3, #4
 8023304:	e054      	b.n	80233b0 <updateInitInputImage+0x168>
   //Force cipher algo to AES
   if(settings->imageInCrypto.cipherAlgo != AES_CIPHER_ALGO)
 8023306:	687b      	ldr	r3, [r7, #4]
 8023308:	681b      	ldr	r3, [r3, #0]
 802330a:	4a2d      	ldr	r2, [pc, #180]	@ (80233c0 <updateInitInputImage+0x178>)
 802330c:	4293      	cmp	r3, r2
 802330e:	d001      	beq.n	8023314 <updateInitInputImage+0xcc>
      return CBOOT_ERROR_UNSUPPORTED_CIPHER_ALGO;
 8023310:	2324      	movs	r3, #36	@ 0x24
 8023312:	e04d      	b.n	80233b0 <updateInitInputImage+0x168>
   //Force cipher mode to CBC
   if(settings->imageInCrypto.cipherMode != CIPHER_MODE_CBC)
 8023314:	687b      	ldr	r3, [r7, #4]
 8023316:	791b      	ldrb	r3, [r3, #4]
 8023318:	2b03      	cmp	r3, #3
 802331a:	d001      	beq.n	8023320 <updateInitInputImage+0xd8>
      return CBOOT_ERROR_UNSUPPORTED_CIPHER_MODE;
 802331c:	2325      	movs	r3, #37	@ 0x25
 802331e:	e047      	b.n	80233b0 <updateInitInputImage+0x168>
#endif

   //Point to the input image context
   imageIn = &context->imageProcessCtx.inputImage;
 8023320:	683b      	ldr	r3, [r7, #0]
 8023322:	33b8      	adds	r3, #184	@ 0xb8
 8023324:	60bb      	str	r3, [r7, #8]

   //Clear input image context
   memset(imageIn, 0x00, sizeof(Image));
 8023326:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 802332a:	2100      	movs	r1, #0
 802332c:	68b8      	ldr	r0, [r7, #8]
 802332e:	f008 fc83 	bl	802bc38 <memset>

   //Initialize buffer position to buffer start address
   imageIn->bufferPos = imageIn->buffer;
 8023332:	68ba      	ldr	r2, [r7, #8]
 8023334:	68bb      	ldr	r3, [r7, #8]
 8023336:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
   //Initialize check data position to check data start address
   imageIn->checkDataPos = imageIn->checkData;
 802333a:	68bb      	ldr	r3, [r7, #8]
 802333c:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8023340:	68bb      	ldr	r3, [r7, #8]
 8023342:	f8c3 25e8 	str.w	r2, [r3, #1512]	@ 0x5e8

   //Initialize image input process state
   imageIn->state = IMAGE_STATE_RECV_APP_HEADER;
 8023346:	68bb      	ldr	r3, [r7, #8]
 8023348:	2201      	movs	r2, #1
 802334a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

#if ((CIPHER_SUPPORT == ENABLED) && (IMAGE_INPUT_ENCRYPTED == ENABLED))
   //Is application encrypted?
   if (settings->imageInCrypto.cipherAlgo != NULL)
 802334e:	687b      	ldr	r3, [r7, #4]
 8023350:	681b      	ldr	r3, [r3, #0]
 8023352:	2b00      	cmp	r3, #0
 8023354:	d015      	beq.n	8023382 <updateInitInputImage+0x13a>
   {
      //Initialize cipher engine
      cerror = cipherInit(&imageIn->cipherEngine, settings->imageInCrypto.cipherAlgo,
 8023356:	68bb      	ldr	r3, [r7, #8]
 8023358:	f103 00a4 	add.w	r0, r3, #164	@ 0xa4
 802335c:	687b      	ldr	r3, [r7, #4]
 802335e:	6819      	ldr	r1, [r3, #0]
 8023360:	687b      	ldr	r3, [r7, #4]
 8023362:	791a      	ldrb	r2, [r3, #4]
 8023364:	687b      	ldr	r3, [r7, #4]
 8023366:	689c      	ldr	r4, [r3, #8]
 8023368:	687b      	ldr	r3, [r7, #4]
 802336a:	68db      	ldr	r3, [r3, #12]
 802336c:	9300      	str	r3, [sp, #0]
 802336e:	4623      	mov	r3, r4
 8023370:	f7ff f96c 	bl	802264c <cipherInit>
 8023374:	4603      	mov	r3, r0
 8023376:	73fb      	strb	r3, [r7, #15]
         settings->imageInCrypto.cipherMode, settings->imageInCrypto.cipherKey,
         settings->imageInCrypto.cipherKeyLen);

      //Is any error?
      if (cerror)
 8023378:	7bfb      	ldrb	r3, [r7, #15]
 802337a:	2b00      	cmp	r3, #0
 802337c:	d001      	beq.n	8023382 <updateInitInputImage+0x13a>
         return cerror;
 802337e:	7bfb      	ldrb	r3, [r7, #15]
 8023380:	e016      	b.n	80233b0 <updateInitInputImage+0x168>
   }
#endif

   //Initialize verification module
   cerror = verifyInit(&imageIn->verifyContext, &settings->imageInCrypto.verifySettings);
 8023382:	68bb      	ldr	r3, [r7, #8]
 8023384:	f503 722e 	add.w	r2, r3, #696	@ 0x2b8
 8023388:	687b      	ldr	r3, [r7, #4]
 802338a:	3310      	adds	r3, #16
 802338c:	4619      	mov	r1, r3
 802338e:	4610      	mov	r0, r2
 8023390:	f7ff fa48 	bl	8022824 <verifyInit>
 8023394:	4603      	mov	r3, r0
 8023396:	73fb      	strb	r3, [r7, #15]
   //Is any error?
   if (cerror)
 8023398:	7bfb      	ldrb	r3, [r7, #15]
 802339a:	2b00      	cmp	r3, #0
 802339c:	d001      	beq.n	80233a2 <updateInitInputImage+0x15a>
      return cerror;
 802339e:	7bfb      	ldrb	r3, [r7, #15]
 80233a0:	e006      	b.n	80233b0 <updateInitInputImage+0x168>

   //Get expecting image check data size
   imageIn->checkDataSize = imageIn->verifyContext.checkDataSize;
 80233a2:	68bb      	ldr	r3, [r7, #8]
 80233a4:	f8d3 23a0 	ldr.w	r2, [r3, #928]	@ 0x3a0
 80233a8:	68bb      	ldr	r3, [r7, #8]
 80233aa:	f8c3 25f0 	str.w	r2, [r3, #1520]	@ 0x5f0

   //Successful process
   return CBOOT_NO_ERROR;
 80233ae:	2300      	movs	r3, #0
}
 80233b0:	4618      	mov	r0, r3
 80233b2:	3714      	adds	r7, #20
 80233b4:	46bd      	mov	sp, r7
 80233b6:	bd90      	pop	{r4, r7, pc}
 80233b8:	2000003c 	.word	0x2000003c
 80233bc:	0802cabc 	.word	0x0802cabc
 80233c0:	0802e184 	.word	0x0802e184

080233c4 <updateInitOutputImage>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

cboot_error_t updateInitOutputImage(UpdateSettings *settings, UpdateContext *context)
{
 80233c4:	b580      	push	{r7, lr}
 80233c6:	b08a      	sub	sp, #40	@ 0x28
 80233c8:	af00      	add	r7, sp, #0
 80233ca:	6078      	str	r0, [r7, #4]
 80233cc:	6039      	str	r1, [r7, #0]
   cboot_error_t cerror;
   Image *imageOut;
   VerifySettings verifySettings;

   //Initialize status code
   cerror = CBOOT_NO_ERROR;
 80233ce:	2300      	movs	r3, #0
 80233d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

   //Initialize verify settings structure
   memset(&verifySettings, 0, sizeof(VerifySettings));
 80233d4:	f107 0308 	add.w	r3, r7, #8
 80233d8:	2218      	movs	r2, #24
 80233da:	2100      	movs	r1, #0
 80233dc:	4618      	mov	r0, r3
 80233de:	f008 fc2b 	bl	802bc38 <memset>

   //Check parameters validly
   if(context == NULL || settings == NULL)
 80233e2:	683b      	ldr	r3, [r7, #0]
 80233e4:	2b00      	cmp	r3, #0
 80233e6:	d002      	beq.n	80233ee <updateInitOutputImage+0x2a>
 80233e8:	687b      	ldr	r3, [r7, #4]
 80233ea:	2b00      	cmp	r3, #0
 80233ec:	d101      	bne.n	80233f2 <updateInitOutputImage+0x2e>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80233ee:	2304      	movs	r3, #4
 80233f0:	e02a      	b.n	8023448 <updateInitOutputImage+0x84>

   //Point to the output image context
   imageOut = &context->imageProcessCtx.outputImage;
 80233f2:	683b      	ldr	r3, [r7, #0]
 80233f4:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 80233f8:	623b      	str	r3, [r7, #32]

   //Initialize buffer position to buffer start address
   imageOut->bufferPos = imageOut->buffer;
 80233fa:	6a3a      	ldr	r2, [r7, #32]
 80233fc:	6a3b      	ldr	r3, [r7, #32]
 80233fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

   //Initialize image output process state
#if (UPDATE_SINGLE_BANK_SUPPORT == ENABLED)
   imageOut->state = IMAGE_STATE_WRITE_APP_HEADER;
 8023402:	6a3b      	ldr	r3, [r7, #32]
 8023404:	2207      	movs	r2, #7
 8023406:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
   if (cerror)
      return cerror;
#endif

   //Initialize check data position to check data start address
   imageOut->checkDataPos = imageOut->checkData;
 802340a:	6a3b      	ldr	r3, [r7, #32]
 802340c:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8023410:	6a3b      	ldr	r3, [r7, #32]
 8023412:	f8c3 25e8 	str.w	r2, [r3, #1512]	@ 0x5e8

   //Set verification module settings
   verifySettings.verifyMethod = VERIFY_METHOD_INTEGRITY;
 8023416:	2300      	movs	r3, #0
 8023418:	723b      	strb	r3, [r7, #8]
   verifySettings.integrityAlgo = CRC32_HASH_ALGO;
 802341a:	4b0d      	ldr	r3, [pc, #52]	@ (8023450 <updateInitOutputImage+0x8c>)
 802341c:	60fb      	str	r3, [r7, #12]

   //Initialize verification module
   cerror = verifyInit(&imageOut->verifyContext, &verifySettings);
 802341e:	6a3b      	ldr	r3, [r7, #32]
 8023420:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8023424:	f107 0208 	add.w	r2, r7, #8
 8023428:	4611      	mov	r1, r2
 802342a:	4618      	mov	r0, r3
 802342c:	f7ff f9fa 	bl	8022824 <verifyInit>
 8023430:	4603      	mov	r3, r0
 8023432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
   //Is any error ?
   if (cerror)
 8023436:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802343a:	2b00      	cmp	r3, #0
 802343c:	d002      	beq.n	8023444 <updateInitOutputImage+0x80>
      return cerror;
 802343e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8023442:	e001      	b.n	8023448 <updateInitOutputImage+0x84>
#endif

   //Return status code
   return cerror;
 8023444:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8023448:	4618      	mov	r0, r3
 802344a:	3728      	adds	r7, #40	@ 0x28
 802344c:	46bd      	mov	sp, r7
 802344e:	bd80      	pop	{r7, pc}
 8023450:	0802d6a4 	.word	0x0802d6a4

08023454 <updateGetImageHeaderFromSlot>:
 * @param[out] header Pointer to store the extracted image header.
 * @return Error code.
 **/

cboot_error_t updateGetImageHeaderFromSlot(Slot *slot, ImageHeader *header)
{
 8023454:	b580      	push	{r7, lr}
 8023456:	b094      	sub	sp, #80	@ 0x50
 8023458:	af00      	add	r7, sp, #0
 802345a:	6078      	str	r0, [r7, #4]
 802345c:	6039      	str	r1, [r7, #0]
   cboot_error_t cerror;
   ImageHeader *imgHeader;
   uint8_t buffer[sizeof(ImageHeader)];

   //Check parameter validity
   if(slot == NULL || header == NULL)
 802345e:	687b      	ldr	r3, [r7, #4]
 8023460:	2b00      	cmp	r3, #0
 8023462:	d002      	beq.n	802346a <updateGetImageHeaderFromSlot+0x16>
 8023464:	683b      	ldr	r3, [r7, #0]
 8023466:	2b00      	cmp	r3, #0
 8023468:	d101      	bne.n	802346e <updateGetImageHeaderFromSlot+0x1a>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 802346a:	2304      	movs	r3, #4
 802346c:	e028      	b.n	80234c0 <updateGetImageHeaderFromSlot+0x6c>

   ////Point to the slot memory driver
   ////Read first slot 64 bytes
   cerror = memoryReadSlot(slot, 0, buffer, sizeof(ImageHeader));
 802346e:	f107 0208 	add.w	r2, r7, #8
 8023472:	2340      	movs	r3, #64	@ 0x40
 8023474:	2100      	movs	r1, #0
 8023476:	6878      	ldr	r0, [r7, #4]
 8023478:	f7fe ff78 	bl	802236c <memoryReadSlot>
 802347c:	4603      	mov	r3, r0
 802347e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
   //Is any error?
   if(cerror)
 8023482:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8023486:	2b00      	cmp	r3, #0
 8023488:	d002      	beq.n	8023490 <updateGetImageHeaderFromSlot+0x3c>
      return cerror;
 802348a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 802348e:	e017      	b.n	80234c0 <updateGetImageHeaderFromSlot+0x6c>

   //Get image header from above buffer
   cerror = imageGetHeader(buffer, sizeof(ImageHeader), &imgHeader);
 8023490:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8023494:	f107 0308 	add.w	r3, r7, #8
 8023498:	2140      	movs	r1, #64	@ 0x40
 802349a:	4618      	mov	r0, r3
 802349c:	f7fe f806 	bl	80214ac <imageGetHeader>
 80234a0:	4603      	mov	r3, r0
 80234a2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
   //Is any error?
   if(cerror)
 80234a6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80234aa:	2b00      	cmp	r3, #0
 80234ac:	d001      	beq.n	80234b2 <updateGetImageHeaderFromSlot+0x5e>
      return CBOOT_ERROR_INVALID_IMAGE_HEADER;
 80234ae:	2307      	movs	r3, #7
 80234b0:	e006      	b.n	80234c0 <updateGetImageHeaderFromSlot+0x6c>

   //Save image header
   memcpy(header, imgHeader, sizeof(ImageHeader));
 80234b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80234b4:	2240      	movs	r2, #64	@ 0x40
 80234b6:	4619      	mov	r1, r3
 80234b8:	6838      	ldr	r0, [r7, #0]
 80234ba:	f008 fc7a 	bl	802bdb2 <memcpy>

   //Successful process
   return CBOOT_NO_ERROR;
 80234be:	2300      	movs	r3, #0
}
 80234c0:	4618      	mov	r0, r3
 80234c2:	3750      	adds	r7, #80	@ 0x50
 80234c4:	46bd      	mov	sp, r7
 80234c6:	bd80      	pop	{r7, pc}

080234c8 <aesInit>:
 * @return Error code
 **/

__weak_func error_t aesInit(AesContext *context, const uint8_t *key,
   size_t keyLen)
{
 80234c8:	b480      	push	{r7}
 80234ca:	b089      	sub	sp, #36	@ 0x24
 80234cc:	af00      	add	r7, sp, #0
 80234ce:	60f8      	str	r0, [r7, #12]
 80234d0:	60b9      	str	r1, [r7, #8]
 80234d2:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint32_t temp;
   size_t keyScheduleSize;

   //Check parameters
   if(context == NULL || key == NULL)
 80234d4:	68fb      	ldr	r3, [r7, #12]
 80234d6:	2b00      	cmp	r3, #0
 80234d8:	d002      	beq.n	80234e0 <aesInit+0x18>
 80234da:	68bb      	ldr	r3, [r7, #8]
 80234dc:	2b00      	cmp	r3, #0
 80234de:	d101      	bne.n	80234e4 <aesInit+0x1c>
      return ERROR_INVALID_PARAMETER;
 80234e0:	2302      	movs	r3, #2
 80234e2:	e1a9      	b.n	8023838 <aesInit+0x370>

   //Check the length of the key
   if(keyLen == 16)
 80234e4:	687b      	ldr	r3, [r7, #4]
 80234e6:	2b10      	cmp	r3, #16
 80234e8:	d103      	bne.n	80234f2 <aesInit+0x2a>
   {
      //10 rounds are required for 128-bit key
      context->nr = 10;
 80234ea:	68fb      	ldr	r3, [r7, #12]
 80234ec:	220a      	movs	r2, #10
 80234ee:	601a      	str	r2, [r3, #0]
 80234f0:	e00f      	b.n	8023512 <aesInit+0x4a>
   }
   else if(keyLen == 24)
 80234f2:	687b      	ldr	r3, [r7, #4]
 80234f4:	2b18      	cmp	r3, #24
 80234f6:	d103      	bne.n	8023500 <aesInit+0x38>
   {
      //12 rounds are required for 192-bit key
      context->nr = 12;
 80234f8:	68fb      	ldr	r3, [r7, #12]
 80234fa:	220c      	movs	r2, #12
 80234fc:	601a      	str	r2, [r3, #0]
 80234fe:	e008      	b.n	8023512 <aesInit+0x4a>
   }
   else if(keyLen == 32)
 8023500:	687b      	ldr	r3, [r7, #4]
 8023502:	2b20      	cmp	r3, #32
 8023504:	d103      	bne.n	802350e <aesInit+0x46>
   {
      //14 rounds are required for 256-bit key
      context->nr = 14;
 8023506:	68fb      	ldr	r3, [r7, #12]
 8023508:	220e      	movs	r2, #14
 802350a:	601a      	str	r2, [r3, #0]
 802350c:	e001      	b.n	8023512 <aesInit+0x4a>
   }
   else
   {
      //Report an error
      return ERROR_INVALID_KEY_LENGTH;
 802350e:	23e8      	movs	r3, #232	@ 0xe8
 8023510:	e192      	b.n	8023838 <aesInit+0x370>
   }

   //Determine the number of 32-bit words in the key
   keyLen /= 4;
 8023512:	687b      	ldr	r3, [r7, #4]
 8023514:	089b      	lsrs	r3, r3, #2
 8023516:	607b      	str	r3, [r7, #4]

   //Copy the original key
   for(i = 0; i < keyLen; i++)
 8023518:	2300      	movs	r3, #0
 802351a:	61fb      	str	r3, [r7, #28]
 802351c:	e026      	b.n	802356c <aesInit+0xa4>
   {
      context->ek[i] = LOAD32LE(key + i * 4);
 802351e:	69fb      	ldr	r3, [r7, #28]
 8023520:	009b      	lsls	r3, r3, #2
 8023522:	68ba      	ldr	r2, [r7, #8]
 8023524:	4413      	add	r3, r2
 8023526:	781b      	ldrb	r3, [r3, #0]
 8023528:	4619      	mov	r1, r3
 802352a:	69fb      	ldr	r3, [r7, #28]
 802352c:	009b      	lsls	r3, r3, #2
 802352e:	3301      	adds	r3, #1
 8023530:	68ba      	ldr	r2, [r7, #8]
 8023532:	4413      	add	r3, r2
 8023534:	781b      	ldrb	r3, [r3, #0]
 8023536:	021b      	lsls	r3, r3, #8
 8023538:	ea41 0203 	orr.w	r2, r1, r3
 802353c:	69fb      	ldr	r3, [r7, #28]
 802353e:	009b      	lsls	r3, r3, #2
 8023540:	3302      	adds	r3, #2
 8023542:	68b9      	ldr	r1, [r7, #8]
 8023544:	440b      	add	r3, r1
 8023546:	781b      	ldrb	r3, [r3, #0]
 8023548:	041b      	lsls	r3, r3, #16
 802354a:	431a      	orrs	r2, r3
 802354c:	69fb      	ldr	r3, [r7, #28]
 802354e:	009b      	lsls	r3, r3, #2
 8023550:	3303      	adds	r3, #3
 8023552:	68b9      	ldr	r1, [r7, #8]
 8023554:	440b      	add	r3, r1
 8023556:	781b      	ldrb	r3, [r3, #0]
 8023558:	061b      	lsls	r3, r3, #24
 802355a:	431a      	orrs	r2, r3
 802355c:	68f9      	ldr	r1, [r7, #12]
 802355e:	69fb      	ldr	r3, [r7, #28]
 8023560:	009b      	lsls	r3, r3, #2
 8023562:	440b      	add	r3, r1
 8023564:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyLen; i++)
 8023566:	69fb      	ldr	r3, [r7, #28]
 8023568:	3301      	adds	r3, #1
 802356a:	61fb      	str	r3, [r7, #28]
 802356c:	69fa      	ldr	r2, [r7, #28]
 802356e:	687b      	ldr	r3, [r7, #4]
 8023570:	429a      	cmp	r2, r3
 8023572:	d3d4      	bcc.n	802351e <aesInit+0x56>
   }

   //The size of the key schedule depends on the number of rounds
   keyScheduleSize = 4 * (context->nr + 1);
 8023574:	68fb      	ldr	r3, [r7, #12]
 8023576:	681b      	ldr	r3, [r3, #0]
 8023578:	3301      	adds	r3, #1
 802357a:	009b      	lsls	r3, r3, #2
 802357c:	61bb      	str	r3, [r7, #24]

   //Generate the key schedule (encryption)
   for(i = keyLen; i < keyScheduleSize; i++)
 802357e:	687b      	ldr	r3, [r7, #4]
 8023580:	61fb      	str	r3, [r7, #28]
 8023582:	e0c4      	b.n	802370e <aesInit+0x246>
   {
      //Save previous word
      temp = context->ek[i - 1];
 8023584:	69fb      	ldr	r3, [r7, #28]
 8023586:	3b01      	subs	r3, #1
 8023588:	68fa      	ldr	r2, [r7, #12]
 802358a:	009b      	lsls	r3, r3, #2
 802358c:	4413      	add	r3, r2
 802358e:	685b      	ldr	r3, [r3, #4]
 8023590:	617b      	str	r3, [r7, #20]

      //Apply transformation
      if((i % keyLen) == 0)
 8023592:	69fb      	ldr	r3, [r7, #28]
 8023594:	687a      	ldr	r2, [r7, #4]
 8023596:	fbb3 f2f2 	udiv	r2, r3, r2
 802359a:	6879      	ldr	r1, [r7, #4]
 802359c:	fb01 f202 	mul.w	r2, r1, r2
 80235a0:	1a9b      	subs	r3, r3, r2
 80235a2:	2b00      	cmp	r3, #0
 80235a4:	d14e      	bne.n	8023644 <aesInit+0x17c>
      {
         context->ek[i] = (uint32_t) sbox[(temp >> 8) & 0xFF];
 80235a6:	697b      	ldr	r3, [r7, #20]
 80235a8:	0a1b      	lsrs	r3, r3, #8
 80235aa:	b2db      	uxtb	r3, r3
 80235ac:	4a66      	ldr	r2, [pc, #408]	@ (8023748 <aesInit+0x280>)
 80235ae:	5cd3      	ldrb	r3, [r2, r3]
 80235b0:	4619      	mov	r1, r3
 80235b2:	68fa      	ldr	r2, [r7, #12]
 80235b4:	69fb      	ldr	r3, [r7, #28]
 80235b6:	009b      	lsls	r3, r3, #2
 80235b8:	4413      	add	r3, r2
 80235ba:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (uint32_t) sbox[(temp >> 16) & 0xFF] << 8;
 80235bc:	68fa      	ldr	r2, [r7, #12]
 80235be:	69fb      	ldr	r3, [r7, #28]
 80235c0:	009b      	lsls	r3, r3, #2
 80235c2:	4413      	add	r3, r2
 80235c4:	685a      	ldr	r2, [r3, #4]
 80235c6:	697b      	ldr	r3, [r7, #20]
 80235c8:	0c1b      	lsrs	r3, r3, #16
 80235ca:	b2db      	uxtb	r3, r3
 80235cc:	495e      	ldr	r1, [pc, #376]	@ (8023748 <aesInit+0x280>)
 80235ce:	5ccb      	ldrb	r3, [r1, r3]
 80235d0:	021b      	lsls	r3, r3, #8
 80235d2:	431a      	orrs	r2, r3
 80235d4:	68f9      	ldr	r1, [r7, #12]
 80235d6:	69fb      	ldr	r3, [r7, #28]
 80235d8:	009b      	lsls	r3, r3, #2
 80235da:	440b      	add	r3, r1
 80235dc:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (uint32_t) sbox[(temp >> 24) & 0xFF] << 16;
 80235de:	68fa      	ldr	r2, [r7, #12]
 80235e0:	69fb      	ldr	r3, [r7, #28]
 80235e2:	009b      	lsls	r3, r3, #2
 80235e4:	4413      	add	r3, r2
 80235e6:	685a      	ldr	r2, [r3, #4]
 80235e8:	697b      	ldr	r3, [r7, #20]
 80235ea:	0e1b      	lsrs	r3, r3, #24
 80235ec:	4956      	ldr	r1, [pc, #344]	@ (8023748 <aesInit+0x280>)
 80235ee:	5ccb      	ldrb	r3, [r1, r3]
 80235f0:	041b      	lsls	r3, r3, #16
 80235f2:	431a      	orrs	r2, r3
 80235f4:	68f9      	ldr	r1, [r7, #12]
 80235f6:	69fb      	ldr	r3, [r7, #28]
 80235f8:	009b      	lsls	r3, r3, #2
 80235fa:	440b      	add	r3, r1
 80235fc:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (uint32_t) sbox[temp & 0xFF] << 24;
 80235fe:	68fa      	ldr	r2, [r7, #12]
 8023600:	69fb      	ldr	r3, [r7, #28]
 8023602:	009b      	lsls	r3, r3, #2
 8023604:	4413      	add	r3, r2
 8023606:	685a      	ldr	r2, [r3, #4]
 8023608:	697b      	ldr	r3, [r7, #20]
 802360a:	b2db      	uxtb	r3, r3
 802360c:	494e      	ldr	r1, [pc, #312]	@ (8023748 <aesInit+0x280>)
 802360e:	5ccb      	ldrb	r3, [r1, r3]
 8023610:	061b      	lsls	r3, r3, #24
 8023612:	431a      	orrs	r2, r3
 8023614:	68f9      	ldr	r1, [r7, #12]
 8023616:	69fb      	ldr	r3, [r7, #28]
 8023618:	009b      	lsls	r3, r3, #2
 802361a:	440b      	add	r3, r1
 802361c:	605a      	str	r2, [r3, #4]
         context->ek[i] ^= rcon[i / keyLen];
 802361e:	68fa      	ldr	r2, [r7, #12]
 8023620:	69fb      	ldr	r3, [r7, #28]
 8023622:	009b      	lsls	r3, r3, #2
 8023624:	4413      	add	r3, r2
 8023626:	685a      	ldr	r2, [r3, #4]
 8023628:	69f9      	ldr	r1, [r7, #28]
 802362a:	687b      	ldr	r3, [r7, #4]
 802362c:	fbb1 f3f3 	udiv	r3, r1, r3
 8023630:	4946      	ldr	r1, [pc, #280]	@ (802374c <aesInit+0x284>)
 8023632:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8023636:	405a      	eors	r2, r3
 8023638:	68f9      	ldr	r1, [r7, #12]
 802363a:	69fb      	ldr	r3, [r7, #28]
 802363c:	009b      	lsls	r3, r3, #2
 802363e:	440b      	add	r3, r1
 8023640:	605a      	str	r2, [r3, #4]
 8023642:	e04f      	b.n	80236e4 <aesInit+0x21c>
      }
      else if(keyLen > 6 && (i % keyLen) == 4)
 8023644:	687b      	ldr	r3, [r7, #4]
 8023646:	2b06      	cmp	r3, #6
 8023648:	d946      	bls.n	80236d8 <aesInit+0x210>
 802364a:	69fb      	ldr	r3, [r7, #28]
 802364c:	687a      	ldr	r2, [r7, #4]
 802364e:	fbb3 f2f2 	udiv	r2, r3, r2
 8023652:	6879      	ldr	r1, [r7, #4]
 8023654:	fb01 f202 	mul.w	r2, r1, r2
 8023658:	1a9b      	subs	r3, r3, r2
 802365a:	2b04      	cmp	r3, #4
 802365c:	d13c      	bne.n	80236d8 <aesInit+0x210>
      {
         context->ek[i] = (uint32_t) sbox[temp & 0xFF];
 802365e:	697b      	ldr	r3, [r7, #20]
 8023660:	b2db      	uxtb	r3, r3
 8023662:	4a39      	ldr	r2, [pc, #228]	@ (8023748 <aesInit+0x280>)
 8023664:	5cd3      	ldrb	r3, [r2, r3]
 8023666:	4619      	mov	r1, r3
 8023668:	68fa      	ldr	r2, [r7, #12]
 802366a:	69fb      	ldr	r3, [r7, #28]
 802366c:	009b      	lsls	r3, r3, #2
 802366e:	4413      	add	r3, r2
 8023670:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (uint32_t) sbox[(temp >> 8) & 0xFF] << 8;
 8023672:	68fa      	ldr	r2, [r7, #12]
 8023674:	69fb      	ldr	r3, [r7, #28]
 8023676:	009b      	lsls	r3, r3, #2
 8023678:	4413      	add	r3, r2
 802367a:	685a      	ldr	r2, [r3, #4]
 802367c:	697b      	ldr	r3, [r7, #20]
 802367e:	0a1b      	lsrs	r3, r3, #8
 8023680:	b2db      	uxtb	r3, r3
 8023682:	4931      	ldr	r1, [pc, #196]	@ (8023748 <aesInit+0x280>)
 8023684:	5ccb      	ldrb	r3, [r1, r3]
 8023686:	021b      	lsls	r3, r3, #8
 8023688:	431a      	orrs	r2, r3
 802368a:	68f9      	ldr	r1, [r7, #12]
 802368c:	69fb      	ldr	r3, [r7, #28]
 802368e:	009b      	lsls	r3, r3, #2
 8023690:	440b      	add	r3, r1
 8023692:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (uint32_t) sbox[(temp >> 16) & 0xFF] << 16;
 8023694:	68fa      	ldr	r2, [r7, #12]
 8023696:	69fb      	ldr	r3, [r7, #28]
 8023698:	009b      	lsls	r3, r3, #2
 802369a:	4413      	add	r3, r2
 802369c:	685a      	ldr	r2, [r3, #4]
 802369e:	697b      	ldr	r3, [r7, #20]
 80236a0:	0c1b      	lsrs	r3, r3, #16
 80236a2:	b2db      	uxtb	r3, r3
 80236a4:	4928      	ldr	r1, [pc, #160]	@ (8023748 <aesInit+0x280>)
 80236a6:	5ccb      	ldrb	r3, [r1, r3]
 80236a8:	041b      	lsls	r3, r3, #16
 80236aa:	431a      	orrs	r2, r3
 80236ac:	68f9      	ldr	r1, [r7, #12]
 80236ae:	69fb      	ldr	r3, [r7, #28]
 80236b0:	009b      	lsls	r3, r3, #2
 80236b2:	440b      	add	r3, r1
 80236b4:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (uint32_t) sbox[(temp >> 24) & 0xFF] << 24;
 80236b6:	68fa      	ldr	r2, [r7, #12]
 80236b8:	69fb      	ldr	r3, [r7, #28]
 80236ba:	009b      	lsls	r3, r3, #2
 80236bc:	4413      	add	r3, r2
 80236be:	685a      	ldr	r2, [r3, #4]
 80236c0:	697b      	ldr	r3, [r7, #20]
 80236c2:	0e1b      	lsrs	r3, r3, #24
 80236c4:	4920      	ldr	r1, [pc, #128]	@ (8023748 <aesInit+0x280>)
 80236c6:	5ccb      	ldrb	r3, [r1, r3]
 80236c8:	061b      	lsls	r3, r3, #24
 80236ca:	431a      	orrs	r2, r3
 80236cc:	68f9      	ldr	r1, [r7, #12]
 80236ce:	69fb      	ldr	r3, [r7, #28]
 80236d0:	009b      	lsls	r3, r3, #2
 80236d2:	440b      	add	r3, r1
 80236d4:	605a      	str	r2, [r3, #4]
 80236d6:	e005      	b.n	80236e4 <aesInit+0x21c>
      }
      else
      {
         context->ek[i] = temp;
 80236d8:	68fa      	ldr	r2, [r7, #12]
 80236da:	69fb      	ldr	r3, [r7, #28]
 80236dc:	009b      	lsls	r3, r3, #2
 80236de:	4413      	add	r3, r2
 80236e0:	697a      	ldr	r2, [r7, #20]
 80236e2:	605a      	str	r2, [r3, #4]
      }

      //Update the key schedule
      context->ek[i] ^= context->ek[i - keyLen];
 80236e4:	68fa      	ldr	r2, [r7, #12]
 80236e6:	69fb      	ldr	r3, [r7, #28]
 80236e8:	009b      	lsls	r3, r3, #2
 80236ea:	4413      	add	r3, r2
 80236ec:	685a      	ldr	r2, [r3, #4]
 80236ee:	69f9      	ldr	r1, [r7, #28]
 80236f0:	687b      	ldr	r3, [r7, #4]
 80236f2:	1acb      	subs	r3, r1, r3
 80236f4:	68f9      	ldr	r1, [r7, #12]
 80236f6:	009b      	lsls	r3, r3, #2
 80236f8:	440b      	add	r3, r1
 80236fa:	685b      	ldr	r3, [r3, #4]
 80236fc:	405a      	eors	r2, r3
 80236fe:	68f9      	ldr	r1, [r7, #12]
 8023700:	69fb      	ldr	r3, [r7, #28]
 8023702:	009b      	lsls	r3, r3, #2
 8023704:	440b      	add	r3, r1
 8023706:	605a      	str	r2, [r3, #4]
   for(i = keyLen; i < keyScheduleSize; i++)
 8023708:	69fb      	ldr	r3, [r7, #28]
 802370a:	3301      	adds	r3, #1
 802370c:	61fb      	str	r3, [r7, #28]
 802370e:	69fa      	ldr	r2, [r7, #28]
 8023710:	69bb      	ldr	r3, [r7, #24]
 8023712:	429a      	cmp	r2, r3
 8023714:	f4ff af36 	bcc.w	8023584 <aesInit+0xbc>
   }

   //Generate the key schedule (decryption)
   for(i = 0; i < keyScheduleSize; i++)
 8023718:	2300      	movs	r3, #0
 802371a:	61fb      	str	r3, [r7, #28]
 802371c:	e086      	b.n	802382c <aesInit+0x364>
   {
      //Apply the InvMixColumns transformation to all round keys but the first
      //and the last
      if(i < 4 || i >= (keyScheduleSize - 4))
 802371e:	69fb      	ldr	r3, [r7, #28]
 8023720:	2b03      	cmp	r3, #3
 8023722:	d904      	bls.n	802372e <aesInit+0x266>
 8023724:	69bb      	ldr	r3, [r7, #24]
 8023726:	3b04      	subs	r3, #4
 8023728:	69fa      	ldr	r2, [r7, #28]
 802372a:	429a      	cmp	r2, r3
 802372c:	d310      	bcc.n	8023750 <aesInit+0x288>
      {
         context->dk[i] = context->ek[i];
 802372e:	68fa      	ldr	r2, [r7, #12]
 8023730:	69fb      	ldr	r3, [r7, #28]
 8023732:	009b      	lsls	r3, r3, #2
 8023734:	4413      	add	r3, r2
 8023736:	685a      	ldr	r2, [r3, #4]
 8023738:	68f9      	ldr	r1, [r7, #12]
 802373a:	69fb      	ldr	r3, [r7, #28]
 802373c:	333c      	adds	r3, #60	@ 0x3c
 802373e:	009b      	lsls	r3, r3, #2
 8023740:	440b      	add	r3, r1
 8023742:	605a      	str	r2, [r3, #4]
 8023744:	e06f      	b.n	8023826 <aesInit+0x35e>
 8023746:	bf00      	nop
 8023748:	0802d758 	.word	0x0802d758
 802374c:	0802e158 	.word	0x0802e158
      }
      else
      {
         context->dk[i] = td[sbox[context->ek[i] & 0xFF]];
 8023750:	68fa      	ldr	r2, [r7, #12]
 8023752:	69fb      	ldr	r3, [r7, #28]
 8023754:	009b      	lsls	r3, r3, #2
 8023756:	4413      	add	r3, r2
 8023758:	685b      	ldr	r3, [r3, #4]
 802375a:	b2db      	uxtb	r3, r3
 802375c:	4a39      	ldr	r2, [pc, #228]	@ (8023844 <aesInit+0x37c>)
 802375e:	5cd3      	ldrb	r3, [r2, r3]
 8023760:	461a      	mov	r2, r3
 8023762:	4b39      	ldr	r3, [pc, #228]	@ (8023848 <aesInit+0x380>)
 8023764:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8023768:	68f9      	ldr	r1, [r7, #12]
 802376a:	69fb      	ldr	r3, [r7, #28]
 802376c:	333c      	adds	r3, #60	@ 0x3c
 802376e:	009b      	lsls	r3, r3, #2
 8023770:	440b      	add	r3, r1
 8023772:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 8) & 0xFF]];
 8023774:	68fa      	ldr	r2, [r7, #12]
 8023776:	69fb      	ldr	r3, [r7, #28]
 8023778:	009b      	lsls	r3, r3, #2
 802377a:	4413      	add	r3, r2
 802377c:	685b      	ldr	r3, [r3, #4]
 802377e:	0a1b      	lsrs	r3, r3, #8
 8023780:	b2db      	uxtb	r3, r3
 8023782:	4a30      	ldr	r2, [pc, #192]	@ (8023844 <aesInit+0x37c>)
 8023784:	5cd3      	ldrb	r3, [r2, r3]
 8023786:	461a      	mov	r2, r3
 8023788:	4b2f      	ldr	r3, [pc, #188]	@ (8023848 <aesInit+0x380>)
 802378a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802378e:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 8);
 8023790:	68fa      	ldr	r2, [r7, #12]
 8023792:	69fb      	ldr	r3, [r7, #28]
 8023794:	333c      	adds	r3, #60	@ 0x3c
 8023796:	009b      	lsls	r3, r3, #2
 8023798:	4413      	add	r3, r2
 802379a:	685a      	ldr	r2, [r3, #4]
 802379c:	697b      	ldr	r3, [r7, #20]
 802379e:	ea4f 6333 	mov.w	r3, r3, ror #24
 80237a2:	405a      	eors	r2, r3
 80237a4:	68f9      	ldr	r1, [r7, #12]
 80237a6:	69fb      	ldr	r3, [r7, #28]
 80237a8:	333c      	adds	r3, #60	@ 0x3c
 80237aa:	009b      	lsls	r3, r3, #2
 80237ac:	440b      	add	r3, r1
 80237ae:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 16) & 0xFF]];
 80237b0:	68fa      	ldr	r2, [r7, #12]
 80237b2:	69fb      	ldr	r3, [r7, #28]
 80237b4:	009b      	lsls	r3, r3, #2
 80237b6:	4413      	add	r3, r2
 80237b8:	685b      	ldr	r3, [r3, #4]
 80237ba:	0c1b      	lsrs	r3, r3, #16
 80237bc:	b2db      	uxtb	r3, r3
 80237be:	4a21      	ldr	r2, [pc, #132]	@ (8023844 <aesInit+0x37c>)
 80237c0:	5cd3      	ldrb	r3, [r2, r3]
 80237c2:	461a      	mov	r2, r3
 80237c4:	4b20      	ldr	r3, [pc, #128]	@ (8023848 <aesInit+0x380>)
 80237c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80237ca:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 16);
 80237cc:	68fa      	ldr	r2, [r7, #12]
 80237ce:	69fb      	ldr	r3, [r7, #28]
 80237d0:	333c      	adds	r3, #60	@ 0x3c
 80237d2:	009b      	lsls	r3, r3, #2
 80237d4:	4413      	add	r3, r2
 80237d6:	685a      	ldr	r2, [r3, #4]
 80237d8:	697b      	ldr	r3, [r7, #20]
 80237da:	ea4f 4333 	mov.w	r3, r3, ror #16
 80237de:	405a      	eors	r2, r3
 80237e0:	68f9      	ldr	r1, [r7, #12]
 80237e2:	69fb      	ldr	r3, [r7, #28]
 80237e4:	333c      	adds	r3, #60	@ 0x3c
 80237e6:	009b      	lsls	r3, r3, #2
 80237e8:	440b      	add	r3, r1
 80237ea:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 24) & 0xFF]];
 80237ec:	68fa      	ldr	r2, [r7, #12]
 80237ee:	69fb      	ldr	r3, [r7, #28]
 80237f0:	009b      	lsls	r3, r3, #2
 80237f2:	4413      	add	r3, r2
 80237f4:	685b      	ldr	r3, [r3, #4]
 80237f6:	0e1b      	lsrs	r3, r3, #24
 80237f8:	4a12      	ldr	r2, [pc, #72]	@ (8023844 <aesInit+0x37c>)
 80237fa:	5cd3      	ldrb	r3, [r2, r3]
 80237fc:	461a      	mov	r2, r3
 80237fe:	4b12      	ldr	r3, [pc, #72]	@ (8023848 <aesInit+0x380>)
 8023800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023804:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 24);
 8023806:	68fa      	ldr	r2, [r7, #12]
 8023808:	69fb      	ldr	r3, [r7, #28]
 802380a:	333c      	adds	r3, #60	@ 0x3c
 802380c:	009b      	lsls	r3, r3, #2
 802380e:	4413      	add	r3, r2
 8023810:	685a      	ldr	r2, [r3, #4]
 8023812:	697b      	ldr	r3, [r7, #20]
 8023814:	ea4f 2333 	mov.w	r3, r3, ror #8
 8023818:	405a      	eors	r2, r3
 802381a:	68f9      	ldr	r1, [r7, #12]
 802381c:	69fb      	ldr	r3, [r7, #28]
 802381e:	333c      	adds	r3, #60	@ 0x3c
 8023820:	009b      	lsls	r3, r3, #2
 8023822:	440b      	add	r3, r1
 8023824:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyScheduleSize; i++)
 8023826:	69fb      	ldr	r3, [r7, #28]
 8023828:	3301      	adds	r3, #1
 802382a:	61fb      	str	r3, [r7, #28]
 802382c:	69fa      	ldr	r2, [r7, #28]
 802382e:	69bb      	ldr	r3, [r7, #24]
 8023830:	429a      	cmp	r2, r3
 8023832:	f4ff af74 	bcc.w	802371e <aesInit+0x256>
      }
   }

   //Successful initialization
   return NO_ERROR;
 8023836:	2300      	movs	r3, #0
}
 8023838:	4618      	mov	r0, r3
 802383a:	3724      	adds	r7, #36	@ 0x24
 802383c:	46bd      	mov	sp, r7
 802383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023842:	4770      	bx	lr
 8023844:	0802d758 	.word	0x0802d758
 8023848:	0802dd58 	.word	0x0802dd58

0802384c <aesEncryptBlock>:
 * @param[out] output Ciphertext block resulting from encryption
 **/

__weak_func void aesEncryptBlock(AesContext *context, const uint8_t *input,
   uint8_t *output)
{
 802384c:	b480      	push	{r7}
 802384e:	b08f      	sub	sp, #60	@ 0x3c
 8023850:	af00      	add	r7, sp, #0
 8023852:	60f8      	str	r0, [r7, #12]
 8023854:	60b9      	str	r1, [r7, #8]
 8023856:	607a      	str	r2, [r7, #4]
   uint32_t t2;
   uint32_t t3;
   uint32_t temp;

   //Copy the plaintext to the state array
   s0 = LOAD32LE(input);
 8023858:	68bb      	ldr	r3, [r7, #8]
 802385a:	781b      	ldrb	r3, [r3, #0]
 802385c:	461a      	mov	r2, r3
 802385e:	68bb      	ldr	r3, [r7, #8]
 8023860:	3301      	adds	r3, #1
 8023862:	781b      	ldrb	r3, [r3, #0]
 8023864:	021b      	lsls	r3, r3, #8
 8023866:	431a      	orrs	r2, r3
 8023868:	68bb      	ldr	r3, [r7, #8]
 802386a:	3302      	adds	r3, #2
 802386c:	781b      	ldrb	r3, [r3, #0]
 802386e:	041b      	lsls	r3, r3, #16
 8023870:	431a      	orrs	r2, r3
 8023872:	68bb      	ldr	r3, [r7, #8]
 8023874:	3303      	adds	r3, #3
 8023876:	781b      	ldrb	r3, [r3, #0]
 8023878:	061b      	lsls	r3, r3, #24
 802387a:	4313      	orrs	r3, r2
 802387c:	633b      	str	r3, [r7, #48]	@ 0x30
   s1 = LOAD32LE(input + 4);
 802387e:	68bb      	ldr	r3, [r7, #8]
 8023880:	3304      	adds	r3, #4
 8023882:	781b      	ldrb	r3, [r3, #0]
 8023884:	461a      	mov	r2, r3
 8023886:	68bb      	ldr	r3, [r7, #8]
 8023888:	3305      	adds	r3, #5
 802388a:	781b      	ldrb	r3, [r3, #0]
 802388c:	021b      	lsls	r3, r3, #8
 802388e:	431a      	orrs	r2, r3
 8023890:	68bb      	ldr	r3, [r7, #8]
 8023892:	3306      	adds	r3, #6
 8023894:	781b      	ldrb	r3, [r3, #0]
 8023896:	041b      	lsls	r3, r3, #16
 8023898:	431a      	orrs	r2, r3
 802389a:	68bb      	ldr	r3, [r7, #8]
 802389c:	3307      	adds	r3, #7
 802389e:	781b      	ldrb	r3, [r3, #0]
 80238a0:	061b      	lsls	r3, r3, #24
 80238a2:	4313      	orrs	r3, r2
 80238a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   s2 = LOAD32LE(input + 8);
 80238a6:	68bb      	ldr	r3, [r7, #8]
 80238a8:	3308      	adds	r3, #8
 80238aa:	781b      	ldrb	r3, [r3, #0]
 80238ac:	461a      	mov	r2, r3
 80238ae:	68bb      	ldr	r3, [r7, #8]
 80238b0:	3309      	adds	r3, #9
 80238b2:	781b      	ldrb	r3, [r3, #0]
 80238b4:	021b      	lsls	r3, r3, #8
 80238b6:	431a      	orrs	r2, r3
 80238b8:	68bb      	ldr	r3, [r7, #8]
 80238ba:	330a      	adds	r3, #10
 80238bc:	781b      	ldrb	r3, [r3, #0]
 80238be:	041b      	lsls	r3, r3, #16
 80238c0:	431a      	orrs	r2, r3
 80238c2:	68bb      	ldr	r3, [r7, #8]
 80238c4:	330b      	adds	r3, #11
 80238c6:	781b      	ldrb	r3, [r3, #0]
 80238c8:	061b      	lsls	r3, r3, #24
 80238ca:	4313      	orrs	r3, r2
 80238cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   s3 = LOAD32LE(input + 12);
 80238ce:	68bb      	ldr	r3, [r7, #8]
 80238d0:	330c      	adds	r3, #12
 80238d2:	781b      	ldrb	r3, [r3, #0]
 80238d4:	461a      	mov	r2, r3
 80238d6:	68bb      	ldr	r3, [r7, #8]
 80238d8:	330d      	adds	r3, #13
 80238da:	781b      	ldrb	r3, [r3, #0]
 80238dc:	021b      	lsls	r3, r3, #8
 80238de:	431a      	orrs	r2, r3
 80238e0:	68bb      	ldr	r3, [r7, #8]
 80238e2:	330e      	adds	r3, #14
 80238e4:	781b      	ldrb	r3, [r3, #0]
 80238e6:	041b      	lsls	r3, r3, #16
 80238e8:	431a      	orrs	r2, r3
 80238ea:	68bb      	ldr	r3, [r7, #8]
 80238ec:	330f      	adds	r3, #15
 80238ee:	781b      	ldrb	r3, [r3, #0]
 80238f0:	061b      	lsls	r3, r3, #24
 80238f2:	4313      	orrs	r3, r2
 80238f4:	627b      	str	r3, [r7, #36]	@ 0x24

   //Initial round key addition
   s0 ^= context->ek[0];
 80238f6:	68fb      	ldr	r3, [r7, #12]
 80238f8:	685b      	ldr	r3, [r3, #4]
 80238fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80238fc:	4053      	eors	r3, r2
 80238fe:	633b      	str	r3, [r7, #48]	@ 0x30
   s1 ^= context->ek[1];
 8023900:	68fb      	ldr	r3, [r7, #12]
 8023902:	689b      	ldr	r3, [r3, #8]
 8023904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023906:	4053      	eors	r3, r2
 8023908:	62fb      	str	r3, [r7, #44]	@ 0x2c
   s2 ^= context->ek[2];
 802390a:	68fb      	ldr	r3, [r7, #12]
 802390c:	68db      	ldr	r3, [r3, #12]
 802390e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8023910:	4053      	eors	r3, r2
 8023912:	62bb      	str	r3, [r7, #40]	@ 0x28
   s3 ^= context->ek[3];
 8023914:	68fb      	ldr	r3, [r7, #12]
 8023916:	691b      	ldr	r3, [r3, #16]
 8023918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802391a:	4053      	eors	r3, r2
 802391c:	627b      	str	r3, [r7, #36]	@ 0x24

   //The number of rounds depends on the key length
   for(i = 1; i < context->nr; i++)
 802391e:	2301      	movs	r3, #1
 8023920:	637b      	str	r3, [r7, #52]	@ 0x34
 8023922:	e0d9      	b.n	8023ad8 <aesEncryptBlock+0x28c>
   {
      //Apply round function
      t0 = te[s0 & 0xFF];
 8023924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023926:	b2db      	uxtb	r3, r3
 8023928:	4a9e      	ldr	r2, [pc, #632]	@ (8023ba4 <aesEncryptBlock+0x358>)
 802392a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802392e:	623b      	str	r3, [r7, #32]
      temp = te[(s1 >> 8) & 0xFF];
 8023930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023932:	0a1b      	lsrs	r3, r3, #8
 8023934:	b2db      	uxtb	r3, r3
 8023936:	4a9b      	ldr	r2, [pc, #620]	@ (8023ba4 <aesEncryptBlock+0x358>)
 8023938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802393c:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 8);
 802393e:	693b      	ldr	r3, [r7, #16]
 8023940:	ea4f 6333 	mov.w	r3, r3, ror #24
 8023944:	6a3a      	ldr	r2, [r7, #32]
 8023946:	4053      	eors	r3, r2
 8023948:	623b      	str	r3, [r7, #32]
      temp = te[(s2 >> 16) & 0xFF];
 802394a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802394c:	0c1b      	lsrs	r3, r3, #16
 802394e:	b2db      	uxtb	r3, r3
 8023950:	4a94      	ldr	r2, [pc, #592]	@ (8023ba4 <aesEncryptBlock+0x358>)
 8023952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023956:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 16);
 8023958:	693b      	ldr	r3, [r7, #16]
 802395a:	ea4f 4333 	mov.w	r3, r3, ror #16
 802395e:	6a3a      	ldr	r2, [r7, #32]
 8023960:	4053      	eors	r3, r2
 8023962:	623b      	str	r3, [r7, #32]
      temp = te[(s3 >> 24) & 0xFF];
 8023964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023966:	0e1b      	lsrs	r3, r3, #24
 8023968:	4a8e      	ldr	r2, [pc, #568]	@ (8023ba4 <aesEncryptBlock+0x358>)
 802396a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802396e:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 24);
 8023970:	693b      	ldr	r3, [r7, #16]
 8023972:	ea4f 2333 	mov.w	r3, r3, ror #8
 8023976:	6a3a      	ldr	r2, [r7, #32]
 8023978:	4053      	eors	r3, r2
 802397a:	623b      	str	r3, [r7, #32]

      t1 = te[s1 & 0xFF];
 802397c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802397e:	b2db      	uxtb	r3, r3
 8023980:	4a88      	ldr	r2, [pc, #544]	@ (8023ba4 <aesEncryptBlock+0x358>)
 8023982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023986:	61fb      	str	r3, [r7, #28]
      temp = te[(s2 >> 8) & 0xFF];
 8023988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802398a:	0a1b      	lsrs	r3, r3, #8
 802398c:	b2db      	uxtb	r3, r3
 802398e:	4a85      	ldr	r2, [pc, #532]	@ (8023ba4 <aesEncryptBlock+0x358>)
 8023990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023994:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 8);
 8023996:	693b      	ldr	r3, [r7, #16]
 8023998:	ea4f 6333 	mov.w	r3, r3, ror #24
 802399c:	69fa      	ldr	r2, [r7, #28]
 802399e:	4053      	eors	r3, r2
 80239a0:	61fb      	str	r3, [r7, #28]
      temp = te[(s3 >> 16) & 0xFF];
 80239a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80239a4:	0c1b      	lsrs	r3, r3, #16
 80239a6:	b2db      	uxtb	r3, r3
 80239a8:	4a7e      	ldr	r2, [pc, #504]	@ (8023ba4 <aesEncryptBlock+0x358>)
 80239aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80239ae:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 16);
 80239b0:	693b      	ldr	r3, [r7, #16]
 80239b2:	ea4f 4333 	mov.w	r3, r3, ror #16
 80239b6:	69fa      	ldr	r2, [r7, #28]
 80239b8:	4053      	eors	r3, r2
 80239ba:	61fb      	str	r3, [r7, #28]
      temp = te[(s0 >> 24) & 0xFF];
 80239bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80239be:	0e1b      	lsrs	r3, r3, #24
 80239c0:	4a78      	ldr	r2, [pc, #480]	@ (8023ba4 <aesEncryptBlock+0x358>)
 80239c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80239c6:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 24);
 80239c8:	693b      	ldr	r3, [r7, #16]
 80239ca:	ea4f 2333 	mov.w	r3, r3, ror #8
 80239ce:	69fa      	ldr	r2, [r7, #28]
 80239d0:	4053      	eors	r3, r2
 80239d2:	61fb      	str	r3, [r7, #28]

      t2 = te[s2 & 0xFF];
 80239d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80239d6:	b2db      	uxtb	r3, r3
 80239d8:	4a72      	ldr	r2, [pc, #456]	@ (8023ba4 <aesEncryptBlock+0x358>)
 80239da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80239de:	61bb      	str	r3, [r7, #24]
      temp = te[(s3 >> 8) & 0xFF];
 80239e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80239e2:	0a1b      	lsrs	r3, r3, #8
 80239e4:	b2db      	uxtb	r3, r3
 80239e6:	4a6f      	ldr	r2, [pc, #444]	@ (8023ba4 <aesEncryptBlock+0x358>)
 80239e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80239ec:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 8);
 80239ee:	693b      	ldr	r3, [r7, #16]
 80239f0:	ea4f 6333 	mov.w	r3, r3, ror #24
 80239f4:	69ba      	ldr	r2, [r7, #24]
 80239f6:	4053      	eors	r3, r2
 80239f8:	61bb      	str	r3, [r7, #24]
      temp = te[(s0 >> 16) & 0xFF];
 80239fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80239fc:	0c1b      	lsrs	r3, r3, #16
 80239fe:	b2db      	uxtb	r3, r3
 8023a00:	4a68      	ldr	r2, [pc, #416]	@ (8023ba4 <aesEncryptBlock+0x358>)
 8023a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023a06:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 16);
 8023a08:	693b      	ldr	r3, [r7, #16]
 8023a0a:	ea4f 4333 	mov.w	r3, r3, ror #16
 8023a0e:	69ba      	ldr	r2, [r7, #24]
 8023a10:	4053      	eors	r3, r2
 8023a12:	61bb      	str	r3, [r7, #24]
      temp = te[(s1 >> 24) & 0xFF];
 8023a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023a16:	0e1b      	lsrs	r3, r3, #24
 8023a18:	4a62      	ldr	r2, [pc, #392]	@ (8023ba4 <aesEncryptBlock+0x358>)
 8023a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023a1e:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 24);
 8023a20:	693b      	ldr	r3, [r7, #16]
 8023a22:	ea4f 2333 	mov.w	r3, r3, ror #8
 8023a26:	69ba      	ldr	r2, [r7, #24]
 8023a28:	4053      	eors	r3, r2
 8023a2a:	61bb      	str	r3, [r7, #24]

      t3 = te[s3 & 0xFF];
 8023a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023a2e:	b2db      	uxtb	r3, r3
 8023a30:	4a5c      	ldr	r2, [pc, #368]	@ (8023ba4 <aesEncryptBlock+0x358>)
 8023a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023a36:	617b      	str	r3, [r7, #20]
      temp = te[(s0 >> 8) & 0xFF];
 8023a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023a3a:	0a1b      	lsrs	r3, r3, #8
 8023a3c:	b2db      	uxtb	r3, r3
 8023a3e:	4a59      	ldr	r2, [pc, #356]	@ (8023ba4 <aesEncryptBlock+0x358>)
 8023a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023a44:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 8);
 8023a46:	693b      	ldr	r3, [r7, #16]
 8023a48:	ea4f 6333 	mov.w	r3, r3, ror #24
 8023a4c:	697a      	ldr	r2, [r7, #20]
 8023a4e:	4053      	eors	r3, r2
 8023a50:	617b      	str	r3, [r7, #20]
      temp = te[(s1 >> 16) & 0xFF];
 8023a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023a54:	0c1b      	lsrs	r3, r3, #16
 8023a56:	b2db      	uxtb	r3, r3
 8023a58:	4a52      	ldr	r2, [pc, #328]	@ (8023ba4 <aesEncryptBlock+0x358>)
 8023a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023a5e:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 16);
 8023a60:	693b      	ldr	r3, [r7, #16]
 8023a62:	ea4f 4333 	mov.w	r3, r3, ror #16
 8023a66:	697a      	ldr	r2, [r7, #20]
 8023a68:	4053      	eors	r3, r2
 8023a6a:	617b      	str	r3, [r7, #20]
      temp = te[(s2 >> 24) & 0xFF];
 8023a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023a6e:	0e1b      	lsrs	r3, r3, #24
 8023a70:	4a4c      	ldr	r2, [pc, #304]	@ (8023ba4 <aesEncryptBlock+0x358>)
 8023a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023a76:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 24);
 8023a78:	693b      	ldr	r3, [r7, #16]
 8023a7a:	ea4f 2333 	mov.w	r3, r3, ror #8
 8023a7e:	697a      	ldr	r2, [r7, #20]
 8023a80:	4053      	eors	r3, r2
 8023a82:	617b      	str	r3, [r7, #20]

      //Round key addition
      s0 = t0 ^ context->ek[i * 4];
 8023a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023a86:	009b      	lsls	r3, r3, #2
 8023a88:	68fa      	ldr	r2, [r7, #12]
 8023a8a:	009b      	lsls	r3, r3, #2
 8023a8c:	4413      	add	r3, r2
 8023a8e:	685b      	ldr	r3, [r3, #4]
 8023a90:	6a3a      	ldr	r2, [r7, #32]
 8023a92:	4053      	eors	r3, r2
 8023a94:	633b      	str	r3, [r7, #48]	@ 0x30
      s1 = t1 ^ context->ek[i * 4 + 1];
 8023a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023a98:	009b      	lsls	r3, r3, #2
 8023a9a:	3301      	adds	r3, #1
 8023a9c:	68fa      	ldr	r2, [r7, #12]
 8023a9e:	009b      	lsls	r3, r3, #2
 8023aa0:	4413      	add	r3, r2
 8023aa2:	685b      	ldr	r3, [r3, #4]
 8023aa4:	69fa      	ldr	r2, [r7, #28]
 8023aa6:	4053      	eors	r3, r2
 8023aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s2 = t2 ^ context->ek[i * 4 + 2];
 8023aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023aac:	009b      	lsls	r3, r3, #2
 8023aae:	3302      	adds	r3, #2
 8023ab0:	68fa      	ldr	r2, [r7, #12]
 8023ab2:	009b      	lsls	r3, r3, #2
 8023ab4:	4413      	add	r3, r2
 8023ab6:	685b      	ldr	r3, [r3, #4]
 8023ab8:	69ba      	ldr	r2, [r7, #24]
 8023aba:	4053      	eors	r3, r2
 8023abc:	62bb      	str	r3, [r7, #40]	@ 0x28
      s3 = t3 ^ context->ek[i * 4 + 3];
 8023abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023ac0:	009b      	lsls	r3, r3, #2
 8023ac2:	3303      	adds	r3, #3
 8023ac4:	68fa      	ldr	r2, [r7, #12]
 8023ac6:	009b      	lsls	r3, r3, #2
 8023ac8:	4413      	add	r3, r2
 8023aca:	685b      	ldr	r3, [r3, #4]
 8023acc:	697a      	ldr	r2, [r7, #20]
 8023ace:	4053      	eors	r3, r2
 8023ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   for(i = 1; i < context->nr; i++)
 8023ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023ad4:	3301      	adds	r3, #1
 8023ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8023ad8:	68fb      	ldr	r3, [r7, #12]
 8023ada:	681b      	ldr	r3, [r3, #0]
 8023adc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023ade:	429a      	cmp	r2, r3
 8023ae0:	f4ff af20 	bcc.w	8023924 <aesEncryptBlock+0xd8>
   }

   //The last round differs slightly from the first rounds
   t0 = (uint32_t) sbox[s0 & 0xFF];
 8023ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023ae6:	b2db      	uxtb	r3, r3
 8023ae8:	4a2f      	ldr	r2, [pc, #188]	@ (8023ba8 <aesEncryptBlock+0x35c>)
 8023aea:	5cd3      	ldrb	r3, [r2, r3]
 8023aec:	623b      	str	r3, [r7, #32]
   t0 |= (uint32_t) sbox[(s1 >> 8) & 0xFF] << 8;
 8023aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023af0:	0a1b      	lsrs	r3, r3, #8
 8023af2:	b2db      	uxtb	r3, r3
 8023af4:	4a2c      	ldr	r2, [pc, #176]	@ (8023ba8 <aesEncryptBlock+0x35c>)
 8023af6:	5cd3      	ldrb	r3, [r2, r3]
 8023af8:	021b      	lsls	r3, r3, #8
 8023afa:	6a3a      	ldr	r2, [r7, #32]
 8023afc:	4313      	orrs	r3, r2
 8023afe:	623b      	str	r3, [r7, #32]
   t0 |= (uint32_t) sbox[(s2 >> 16) & 0xFF] << 16;
 8023b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023b02:	0c1b      	lsrs	r3, r3, #16
 8023b04:	b2db      	uxtb	r3, r3
 8023b06:	4a28      	ldr	r2, [pc, #160]	@ (8023ba8 <aesEncryptBlock+0x35c>)
 8023b08:	5cd3      	ldrb	r3, [r2, r3]
 8023b0a:	041b      	lsls	r3, r3, #16
 8023b0c:	6a3a      	ldr	r2, [r7, #32]
 8023b0e:	4313      	orrs	r3, r2
 8023b10:	623b      	str	r3, [r7, #32]
   t0 |= (uint32_t) sbox[(s3 >> 24) & 0xFF] << 24;
 8023b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023b14:	0e1b      	lsrs	r3, r3, #24
 8023b16:	4a24      	ldr	r2, [pc, #144]	@ (8023ba8 <aesEncryptBlock+0x35c>)
 8023b18:	5cd3      	ldrb	r3, [r2, r3]
 8023b1a:	061b      	lsls	r3, r3, #24
 8023b1c:	6a3a      	ldr	r2, [r7, #32]
 8023b1e:	4313      	orrs	r3, r2
 8023b20:	623b      	str	r3, [r7, #32]

   t1 = (uint32_t) sbox[s1 & 0xFF];
 8023b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023b24:	b2db      	uxtb	r3, r3
 8023b26:	4a20      	ldr	r2, [pc, #128]	@ (8023ba8 <aesEncryptBlock+0x35c>)
 8023b28:	5cd3      	ldrb	r3, [r2, r3]
 8023b2a:	61fb      	str	r3, [r7, #28]
   t1 |= (uint32_t) sbox[(s2 >> 8) & 0xFF] << 8;
 8023b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023b2e:	0a1b      	lsrs	r3, r3, #8
 8023b30:	b2db      	uxtb	r3, r3
 8023b32:	4a1d      	ldr	r2, [pc, #116]	@ (8023ba8 <aesEncryptBlock+0x35c>)
 8023b34:	5cd3      	ldrb	r3, [r2, r3]
 8023b36:	021b      	lsls	r3, r3, #8
 8023b38:	69fa      	ldr	r2, [r7, #28]
 8023b3a:	4313      	orrs	r3, r2
 8023b3c:	61fb      	str	r3, [r7, #28]
   t1 |= (uint32_t) sbox[(s3 >> 16) & 0xFF] << 16;
 8023b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023b40:	0c1b      	lsrs	r3, r3, #16
 8023b42:	b2db      	uxtb	r3, r3
 8023b44:	4a18      	ldr	r2, [pc, #96]	@ (8023ba8 <aesEncryptBlock+0x35c>)
 8023b46:	5cd3      	ldrb	r3, [r2, r3]
 8023b48:	041b      	lsls	r3, r3, #16
 8023b4a:	69fa      	ldr	r2, [r7, #28]
 8023b4c:	4313      	orrs	r3, r2
 8023b4e:	61fb      	str	r3, [r7, #28]
   t1 |= (uint32_t) sbox[(s0 >> 24) & 0xFF] << 24;
 8023b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023b52:	0e1b      	lsrs	r3, r3, #24
 8023b54:	4a14      	ldr	r2, [pc, #80]	@ (8023ba8 <aesEncryptBlock+0x35c>)
 8023b56:	5cd3      	ldrb	r3, [r2, r3]
 8023b58:	061b      	lsls	r3, r3, #24
 8023b5a:	69fa      	ldr	r2, [r7, #28]
 8023b5c:	4313      	orrs	r3, r2
 8023b5e:	61fb      	str	r3, [r7, #28]

   t2 = (uint32_t) sbox[s2 & 0xFF];
 8023b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023b62:	b2db      	uxtb	r3, r3
 8023b64:	4a10      	ldr	r2, [pc, #64]	@ (8023ba8 <aesEncryptBlock+0x35c>)
 8023b66:	5cd3      	ldrb	r3, [r2, r3]
 8023b68:	61bb      	str	r3, [r7, #24]
   t2 |= (uint32_t) sbox[(s3 >> 8) & 0xFF] << 8;
 8023b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023b6c:	0a1b      	lsrs	r3, r3, #8
 8023b6e:	b2db      	uxtb	r3, r3
 8023b70:	4a0d      	ldr	r2, [pc, #52]	@ (8023ba8 <aesEncryptBlock+0x35c>)
 8023b72:	5cd3      	ldrb	r3, [r2, r3]
 8023b74:	021b      	lsls	r3, r3, #8
 8023b76:	69ba      	ldr	r2, [r7, #24]
 8023b78:	4313      	orrs	r3, r2
 8023b7a:	61bb      	str	r3, [r7, #24]
   t2 |= (uint32_t) sbox[(s0 >> 16) & 0xFF] << 16;
 8023b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023b7e:	0c1b      	lsrs	r3, r3, #16
 8023b80:	b2db      	uxtb	r3, r3
 8023b82:	4a09      	ldr	r2, [pc, #36]	@ (8023ba8 <aesEncryptBlock+0x35c>)
 8023b84:	5cd3      	ldrb	r3, [r2, r3]
 8023b86:	041b      	lsls	r3, r3, #16
 8023b88:	69ba      	ldr	r2, [r7, #24]
 8023b8a:	4313      	orrs	r3, r2
 8023b8c:	61bb      	str	r3, [r7, #24]
   t2 |= (uint32_t) sbox[(s1 >> 24) & 0xFF] << 24;
 8023b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023b90:	0e1b      	lsrs	r3, r3, #24
 8023b92:	4a05      	ldr	r2, [pc, #20]	@ (8023ba8 <aesEncryptBlock+0x35c>)
 8023b94:	5cd3      	ldrb	r3, [r2, r3]
 8023b96:	061b      	lsls	r3, r3, #24
 8023b98:	69ba      	ldr	r2, [r7, #24]
 8023b9a:	4313      	orrs	r3, r2
 8023b9c:	61bb      	str	r3, [r7, #24]

   t3 = (uint32_t) sbox[s3 & 0xFF];
 8023b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023ba0:	b2db      	uxtb	r3, r3
 8023ba2:	e003      	b.n	8023bac <aesEncryptBlock+0x360>
 8023ba4:	0802d958 	.word	0x0802d958
 8023ba8:	0802d758 	.word	0x0802d758
 8023bac:	4a54      	ldr	r2, [pc, #336]	@ (8023d00 <aesEncryptBlock+0x4b4>)
 8023bae:	5cd3      	ldrb	r3, [r2, r3]
 8023bb0:	617b      	str	r3, [r7, #20]
   t3 |= (uint32_t) sbox[(s0 >> 8) & 0xFF] << 8;
 8023bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023bb4:	0a1b      	lsrs	r3, r3, #8
 8023bb6:	b2db      	uxtb	r3, r3
 8023bb8:	4a51      	ldr	r2, [pc, #324]	@ (8023d00 <aesEncryptBlock+0x4b4>)
 8023bba:	5cd3      	ldrb	r3, [r2, r3]
 8023bbc:	021b      	lsls	r3, r3, #8
 8023bbe:	697a      	ldr	r2, [r7, #20]
 8023bc0:	4313      	orrs	r3, r2
 8023bc2:	617b      	str	r3, [r7, #20]
   t3 |= (uint32_t) sbox[(s1 >> 16) & 0xFF] << 16;
 8023bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023bc6:	0c1b      	lsrs	r3, r3, #16
 8023bc8:	b2db      	uxtb	r3, r3
 8023bca:	4a4d      	ldr	r2, [pc, #308]	@ (8023d00 <aesEncryptBlock+0x4b4>)
 8023bcc:	5cd3      	ldrb	r3, [r2, r3]
 8023bce:	041b      	lsls	r3, r3, #16
 8023bd0:	697a      	ldr	r2, [r7, #20]
 8023bd2:	4313      	orrs	r3, r2
 8023bd4:	617b      	str	r3, [r7, #20]
   t3 |= (uint32_t) sbox[(s2 >> 24) & 0xFF] << 24;
 8023bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023bd8:	0e1b      	lsrs	r3, r3, #24
 8023bda:	4a49      	ldr	r2, [pc, #292]	@ (8023d00 <aesEncryptBlock+0x4b4>)
 8023bdc:	5cd3      	ldrb	r3, [r2, r3]
 8023bde:	061b      	lsls	r3, r3, #24
 8023be0:	697a      	ldr	r2, [r7, #20]
 8023be2:	4313      	orrs	r3, r2
 8023be4:	617b      	str	r3, [r7, #20]

   //Last round key addition
   s0 = t0 ^ context->ek[context->nr * 4];
 8023be6:	68fb      	ldr	r3, [r7, #12]
 8023be8:	681b      	ldr	r3, [r3, #0]
 8023bea:	009b      	lsls	r3, r3, #2
 8023bec:	68fa      	ldr	r2, [r7, #12]
 8023bee:	009b      	lsls	r3, r3, #2
 8023bf0:	4413      	add	r3, r2
 8023bf2:	685b      	ldr	r3, [r3, #4]
 8023bf4:	6a3a      	ldr	r2, [r7, #32]
 8023bf6:	4053      	eors	r3, r2
 8023bf8:	633b      	str	r3, [r7, #48]	@ 0x30
   s1 = t1 ^ context->ek[context->nr * 4 + 1];
 8023bfa:	68fb      	ldr	r3, [r7, #12]
 8023bfc:	681b      	ldr	r3, [r3, #0]
 8023bfe:	009b      	lsls	r3, r3, #2
 8023c00:	3301      	adds	r3, #1
 8023c02:	68fa      	ldr	r2, [r7, #12]
 8023c04:	009b      	lsls	r3, r3, #2
 8023c06:	4413      	add	r3, r2
 8023c08:	685b      	ldr	r3, [r3, #4]
 8023c0a:	69fa      	ldr	r2, [r7, #28]
 8023c0c:	4053      	eors	r3, r2
 8023c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   s2 = t2 ^ context->ek[context->nr * 4 + 2];
 8023c10:	68fb      	ldr	r3, [r7, #12]
 8023c12:	681b      	ldr	r3, [r3, #0]
 8023c14:	009b      	lsls	r3, r3, #2
 8023c16:	3302      	adds	r3, #2
 8023c18:	68fa      	ldr	r2, [r7, #12]
 8023c1a:	009b      	lsls	r3, r3, #2
 8023c1c:	4413      	add	r3, r2
 8023c1e:	685b      	ldr	r3, [r3, #4]
 8023c20:	69ba      	ldr	r2, [r7, #24]
 8023c22:	4053      	eors	r3, r2
 8023c24:	62bb      	str	r3, [r7, #40]	@ 0x28
   s3 = t3 ^ context->ek[context->nr * 4 + 3];
 8023c26:	68fb      	ldr	r3, [r7, #12]
 8023c28:	681b      	ldr	r3, [r3, #0]
 8023c2a:	009b      	lsls	r3, r3, #2
 8023c2c:	3303      	adds	r3, #3
 8023c2e:	68fa      	ldr	r2, [r7, #12]
 8023c30:	009b      	lsls	r3, r3, #2
 8023c32:	4413      	add	r3, r2
 8023c34:	685b      	ldr	r3, [r3, #4]
 8023c36:	697a      	ldr	r2, [r7, #20]
 8023c38:	4053      	eors	r3, r2
 8023c3a:	627b      	str	r3, [r7, #36]	@ 0x24

   //The final state is then copied to the output
   STORE32LE(s0, output);
 8023c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023c3e:	b2da      	uxtb	r2, r3
 8023c40:	687b      	ldr	r3, [r7, #4]
 8023c42:	701a      	strb	r2, [r3, #0]
 8023c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023c46:	0a1a      	lsrs	r2, r3, #8
 8023c48:	687b      	ldr	r3, [r7, #4]
 8023c4a:	3301      	adds	r3, #1
 8023c4c:	b2d2      	uxtb	r2, r2
 8023c4e:	701a      	strb	r2, [r3, #0]
 8023c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023c52:	0c1a      	lsrs	r2, r3, #16
 8023c54:	687b      	ldr	r3, [r7, #4]
 8023c56:	3302      	adds	r3, #2
 8023c58:	b2d2      	uxtb	r2, r2
 8023c5a:	701a      	strb	r2, [r3, #0]
 8023c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023c5e:	0e1a      	lsrs	r2, r3, #24
 8023c60:	687b      	ldr	r3, [r7, #4]
 8023c62:	3303      	adds	r3, #3
 8023c64:	b2d2      	uxtb	r2, r2
 8023c66:	701a      	strb	r2, [r3, #0]
   STORE32LE(s1, output + 4);
 8023c68:	687b      	ldr	r3, [r7, #4]
 8023c6a:	3304      	adds	r3, #4
 8023c6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023c6e:	b2d2      	uxtb	r2, r2
 8023c70:	701a      	strb	r2, [r3, #0]
 8023c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023c74:	0a1a      	lsrs	r2, r3, #8
 8023c76:	687b      	ldr	r3, [r7, #4]
 8023c78:	3305      	adds	r3, #5
 8023c7a:	b2d2      	uxtb	r2, r2
 8023c7c:	701a      	strb	r2, [r3, #0]
 8023c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023c80:	0c1a      	lsrs	r2, r3, #16
 8023c82:	687b      	ldr	r3, [r7, #4]
 8023c84:	3306      	adds	r3, #6
 8023c86:	b2d2      	uxtb	r2, r2
 8023c88:	701a      	strb	r2, [r3, #0]
 8023c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023c8c:	0e1a      	lsrs	r2, r3, #24
 8023c8e:	687b      	ldr	r3, [r7, #4]
 8023c90:	3307      	adds	r3, #7
 8023c92:	b2d2      	uxtb	r2, r2
 8023c94:	701a      	strb	r2, [r3, #0]
   STORE32LE(s2, output + 8);
 8023c96:	687b      	ldr	r3, [r7, #4]
 8023c98:	3308      	adds	r3, #8
 8023c9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8023c9c:	b2d2      	uxtb	r2, r2
 8023c9e:	701a      	strb	r2, [r3, #0]
 8023ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023ca2:	0a1a      	lsrs	r2, r3, #8
 8023ca4:	687b      	ldr	r3, [r7, #4]
 8023ca6:	3309      	adds	r3, #9
 8023ca8:	b2d2      	uxtb	r2, r2
 8023caa:	701a      	strb	r2, [r3, #0]
 8023cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023cae:	0c1a      	lsrs	r2, r3, #16
 8023cb0:	687b      	ldr	r3, [r7, #4]
 8023cb2:	330a      	adds	r3, #10
 8023cb4:	b2d2      	uxtb	r2, r2
 8023cb6:	701a      	strb	r2, [r3, #0]
 8023cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023cba:	0e1a      	lsrs	r2, r3, #24
 8023cbc:	687b      	ldr	r3, [r7, #4]
 8023cbe:	330b      	adds	r3, #11
 8023cc0:	b2d2      	uxtb	r2, r2
 8023cc2:	701a      	strb	r2, [r3, #0]
   STORE32LE(s3, output + 12);
 8023cc4:	687b      	ldr	r3, [r7, #4]
 8023cc6:	330c      	adds	r3, #12
 8023cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023cca:	b2d2      	uxtb	r2, r2
 8023ccc:	701a      	strb	r2, [r3, #0]
 8023cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023cd0:	0a1a      	lsrs	r2, r3, #8
 8023cd2:	687b      	ldr	r3, [r7, #4]
 8023cd4:	330d      	adds	r3, #13
 8023cd6:	b2d2      	uxtb	r2, r2
 8023cd8:	701a      	strb	r2, [r3, #0]
 8023cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023cdc:	0c1a      	lsrs	r2, r3, #16
 8023cde:	687b      	ldr	r3, [r7, #4]
 8023ce0:	330e      	adds	r3, #14
 8023ce2:	b2d2      	uxtb	r2, r2
 8023ce4:	701a      	strb	r2, [r3, #0]
 8023ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023ce8:	0e1a      	lsrs	r2, r3, #24
 8023cea:	687b      	ldr	r3, [r7, #4]
 8023cec:	330f      	adds	r3, #15
 8023cee:	b2d2      	uxtb	r2, r2
 8023cf0:	701a      	strb	r2, [r3, #0]
}
 8023cf2:	bf00      	nop
 8023cf4:	373c      	adds	r7, #60	@ 0x3c
 8023cf6:	46bd      	mov	sp, r7
 8023cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cfc:	4770      	bx	lr
 8023cfe:	bf00      	nop
 8023d00:	0802d758 	.word	0x0802d758

08023d04 <aesDecryptBlock>:
 * @param[out] output Plaintext block resulting from decryption
 **/

__weak_func void aesDecryptBlock(AesContext *context, const uint8_t *input,
   uint8_t *output)
{
 8023d04:	b480      	push	{r7}
 8023d06:	b08f      	sub	sp, #60	@ 0x3c
 8023d08:	af00      	add	r7, sp, #0
 8023d0a:	60f8      	str	r0, [r7, #12]
 8023d0c:	60b9      	str	r1, [r7, #8]
 8023d0e:	607a      	str	r2, [r7, #4]
   uint32_t t2;
   uint32_t t3;
   uint32_t temp;

   //Copy the ciphertext to the state array
   s0 = LOAD32LE(input);
 8023d10:	68bb      	ldr	r3, [r7, #8]
 8023d12:	781b      	ldrb	r3, [r3, #0]
 8023d14:	461a      	mov	r2, r3
 8023d16:	68bb      	ldr	r3, [r7, #8]
 8023d18:	3301      	adds	r3, #1
 8023d1a:	781b      	ldrb	r3, [r3, #0]
 8023d1c:	021b      	lsls	r3, r3, #8
 8023d1e:	431a      	orrs	r2, r3
 8023d20:	68bb      	ldr	r3, [r7, #8]
 8023d22:	3302      	adds	r3, #2
 8023d24:	781b      	ldrb	r3, [r3, #0]
 8023d26:	041b      	lsls	r3, r3, #16
 8023d28:	431a      	orrs	r2, r3
 8023d2a:	68bb      	ldr	r3, [r7, #8]
 8023d2c:	3303      	adds	r3, #3
 8023d2e:	781b      	ldrb	r3, [r3, #0]
 8023d30:	061b      	lsls	r3, r3, #24
 8023d32:	4313      	orrs	r3, r2
 8023d34:	633b      	str	r3, [r7, #48]	@ 0x30
   s1 = LOAD32LE(input + 4);
 8023d36:	68bb      	ldr	r3, [r7, #8]
 8023d38:	3304      	adds	r3, #4
 8023d3a:	781b      	ldrb	r3, [r3, #0]
 8023d3c:	461a      	mov	r2, r3
 8023d3e:	68bb      	ldr	r3, [r7, #8]
 8023d40:	3305      	adds	r3, #5
 8023d42:	781b      	ldrb	r3, [r3, #0]
 8023d44:	021b      	lsls	r3, r3, #8
 8023d46:	431a      	orrs	r2, r3
 8023d48:	68bb      	ldr	r3, [r7, #8]
 8023d4a:	3306      	adds	r3, #6
 8023d4c:	781b      	ldrb	r3, [r3, #0]
 8023d4e:	041b      	lsls	r3, r3, #16
 8023d50:	431a      	orrs	r2, r3
 8023d52:	68bb      	ldr	r3, [r7, #8]
 8023d54:	3307      	adds	r3, #7
 8023d56:	781b      	ldrb	r3, [r3, #0]
 8023d58:	061b      	lsls	r3, r3, #24
 8023d5a:	4313      	orrs	r3, r2
 8023d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   s2 = LOAD32LE(input + 8);
 8023d5e:	68bb      	ldr	r3, [r7, #8]
 8023d60:	3308      	adds	r3, #8
 8023d62:	781b      	ldrb	r3, [r3, #0]
 8023d64:	461a      	mov	r2, r3
 8023d66:	68bb      	ldr	r3, [r7, #8]
 8023d68:	3309      	adds	r3, #9
 8023d6a:	781b      	ldrb	r3, [r3, #0]
 8023d6c:	021b      	lsls	r3, r3, #8
 8023d6e:	431a      	orrs	r2, r3
 8023d70:	68bb      	ldr	r3, [r7, #8]
 8023d72:	330a      	adds	r3, #10
 8023d74:	781b      	ldrb	r3, [r3, #0]
 8023d76:	041b      	lsls	r3, r3, #16
 8023d78:	431a      	orrs	r2, r3
 8023d7a:	68bb      	ldr	r3, [r7, #8]
 8023d7c:	330b      	adds	r3, #11
 8023d7e:	781b      	ldrb	r3, [r3, #0]
 8023d80:	061b      	lsls	r3, r3, #24
 8023d82:	4313      	orrs	r3, r2
 8023d84:	62bb      	str	r3, [r7, #40]	@ 0x28
   s3 = LOAD32LE(input + 12);
 8023d86:	68bb      	ldr	r3, [r7, #8]
 8023d88:	330c      	adds	r3, #12
 8023d8a:	781b      	ldrb	r3, [r3, #0]
 8023d8c:	461a      	mov	r2, r3
 8023d8e:	68bb      	ldr	r3, [r7, #8]
 8023d90:	330d      	adds	r3, #13
 8023d92:	781b      	ldrb	r3, [r3, #0]
 8023d94:	021b      	lsls	r3, r3, #8
 8023d96:	431a      	orrs	r2, r3
 8023d98:	68bb      	ldr	r3, [r7, #8]
 8023d9a:	330e      	adds	r3, #14
 8023d9c:	781b      	ldrb	r3, [r3, #0]
 8023d9e:	041b      	lsls	r3, r3, #16
 8023da0:	431a      	orrs	r2, r3
 8023da2:	68bb      	ldr	r3, [r7, #8]
 8023da4:	330f      	adds	r3, #15
 8023da6:	781b      	ldrb	r3, [r3, #0]
 8023da8:	061b      	lsls	r3, r3, #24
 8023daa:	4313      	orrs	r3, r2
 8023dac:	627b      	str	r3, [r7, #36]	@ 0x24

   //Initial round key addition
   s0 ^= context->dk[context->nr * 4];
 8023dae:	68fb      	ldr	r3, [r7, #12]
 8023db0:	681b      	ldr	r3, [r3, #0]
 8023db2:	009b      	lsls	r3, r3, #2
 8023db4:	68fa      	ldr	r2, [r7, #12]
 8023db6:	333c      	adds	r3, #60	@ 0x3c
 8023db8:	009b      	lsls	r3, r3, #2
 8023dba:	4413      	add	r3, r2
 8023dbc:	685b      	ldr	r3, [r3, #4]
 8023dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023dc0:	4053      	eors	r3, r2
 8023dc2:	633b      	str	r3, [r7, #48]	@ 0x30
   s1 ^= context->dk[context->nr * 4 + 1];
 8023dc4:	68fb      	ldr	r3, [r7, #12]
 8023dc6:	681b      	ldr	r3, [r3, #0]
 8023dc8:	009b      	lsls	r3, r3, #2
 8023dca:	3301      	adds	r3, #1
 8023dcc:	68fa      	ldr	r2, [r7, #12]
 8023dce:	333c      	adds	r3, #60	@ 0x3c
 8023dd0:	009b      	lsls	r3, r3, #2
 8023dd2:	4413      	add	r3, r2
 8023dd4:	685b      	ldr	r3, [r3, #4]
 8023dd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023dd8:	4053      	eors	r3, r2
 8023dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   s2 ^= context->dk[context->nr * 4 + 2];
 8023ddc:	68fb      	ldr	r3, [r7, #12]
 8023dde:	681b      	ldr	r3, [r3, #0]
 8023de0:	009b      	lsls	r3, r3, #2
 8023de2:	3302      	adds	r3, #2
 8023de4:	68fa      	ldr	r2, [r7, #12]
 8023de6:	333c      	adds	r3, #60	@ 0x3c
 8023de8:	009b      	lsls	r3, r3, #2
 8023dea:	4413      	add	r3, r2
 8023dec:	685b      	ldr	r3, [r3, #4]
 8023dee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8023df0:	4053      	eors	r3, r2
 8023df2:	62bb      	str	r3, [r7, #40]	@ 0x28
   s3 ^= context->dk[context->nr * 4 + 3];
 8023df4:	68fb      	ldr	r3, [r7, #12]
 8023df6:	681b      	ldr	r3, [r3, #0]
 8023df8:	009b      	lsls	r3, r3, #2
 8023dfa:	3303      	adds	r3, #3
 8023dfc:	68fa      	ldr	r2, [r7, #12]
 8023dfe:	333c      	adds	r3, #60	@ 0x3c
 8023e00:	009b      	lsls	r3, r3, #2
 8023e02:	4413      	add	r3, r2
 8023e04:	685b      	ldr	r3, [r3, #4]
 8023e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023e08:	4053      	eors	r3, r2
 8023e0a:	627b      	str	r3, [r7, #36]	@ 0x24

   //The number of rounds depends on the key length
   for(i = context->nr - 1; i >= 1; i--)
 8023e0c:	68fb      	ldr	r3, [r7, #12]
 8023e0e:	681b      	ldr	r3, [r3, #0]
 8023e10:	3b01      	subs	r3, #1
 8023e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8023e14:	e0dd      	b.n	8023fd2 <aesDecryptBlock+0x2ce>
   {
      //Apply round function
      t0 = td[s0 & 0xFF];
 8023e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023e18:	b2db      	uxtb	r3, r3
 8023e1a:	4aa0      	ldr	r2, [pc, #640]	@ (802409c <aesDecryptBlock+0x398>)
 8023e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023e20:	623b      	str	r3, [r7, #32]
      temp = td[(s3 >> 8) & 0xFF];
 8023e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023e24:	0a1b      	lsrs	r3, r3, #8
 8023e26:	b2db      	uxtb	r3, r3
 8023e28:	4a9c      	ldr	r2, [pc, #624]	@ (802409c <aesDecryptBlock+0x398>)
 8023e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023e2e:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 8);
 8023e30:	693b      	ldr	r3, [r7, #16]
 8023e32:	ea4f 6333 	mov.w	r3, r3, ror #24
 8023e36:	6a3a      	ldr	r2, [r7, #32]
 8023e38:	4053      	eors	r3, r2
 8023e3a:	623b      	str	r3, [r7, #32]
      temp = td[(s2 >> 16) & 0xFF];
 8023e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023e3e:	0c1b      	lsrs	r3, r3, #16
 8023e40:	b2db      	uxtb	r3, r3
 8023e42:	4a96      	ldr	r2, [pc, #600]	@ (802409c <aesDecryptBlock+0x398>)
 8023e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023e48:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 16);
 8023e4a:	693b      	ldr	r3, [r7, #16]
 8023e4c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8023e50:	6a3a      	ldr	r2, [r7, #32]
 8023e52:	4053      	eors	r3, r2
 8023e54:	623b      	str	r3, [r7, #32]
      temp = td[(s1 >> 24) & 0xFF];
 8023e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023e58:	0e1b      	lsrs	r3, r3, #24
 8023e5a:	4a90      	ldr	r2, [pc, #576]	@ (802409c <aesDecryptBlock+0x398>)
 8023e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023e60:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 24);
 8023e62:	693b      	ldr	r3, [r7, #16]
 8023e64:	ea4f 2333 	mov.w	r3, r3, ror #8
 8023e68:	6a3a      	ldr	r2, [r7, #32]
 8023e6a:	4053      	eors	r3, r2
 8023e6c:	623b      	str	r3, [r7, #32]

      t1 = td[s1 & 0xFF];
 8023e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023e70:	b2db      	uxtb	r3, r3
 8023e72:	4a8a      	ldr	r2, [pc, #552]	@ (802409c <aesDecryptBlock+0x398>)
 8023e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023e78:	61fb      	str	r3, [r7, #28]
      temp = td[(s0 >> 8) & 0xFF];
 8023e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023e7c:	0a1b      	lsrs	r3, r3, #8
 8023e7e:	b2db      	uxtb	r3, r3
 8023e80:	4a86      	ldr	r2, [pc, #536]	@ (802409c <aesDecryptBlock+0x398>)
 8023e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023e86:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 8);
 8023e88:	693b      	ldr	r3, [r7, #16]
 8023e8a:	ea4f 6333 	mov.w	r3, r3, ror #24
 8023e8e:	69fa      	ldr	r2, [r7, #28]
 8023e90:	4053      	eors	r3, r2
 8023e92:	61fb      	str	r3, [r7, #28]
      temp = td[(s3 >> 16) & 0xFF];
 8023e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023e96:	0c1b      	lsrs	r3, r3, #16
 8023e98:	b2db      	uxtb	r3, r3
 8023e9a:	4a80      	ldr	r2, [pc, #512]	@ (802409c <aesDecryptBlock+0x398>)
 8023e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023ea0:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 16);
 8023ea2:	693b      	ldr	r3, [r7, #16]
 8023ea4:	ea4f 4333 	mov.w	r3, r3, ror #16
 8023ea8:	69fa      	ldr	r2, [r7, #28]
 8023eaa:	4053      	eors	r3, r2
 8023eac:	61fb      	str	r3, [r7, #28]
      temp = td[(s2 >> 24) & 0xFF];
 8023eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023eb0:	0e1b      	lsrs	r3, r3, #24
 8023eb2:	4a7a      	ldr	r2, [pc, #488]	@ (802409c <aesDecryptBlock+0x398>)
 8023eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023eb8:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 24);
 8023eba:	693b      	ldr	r3, [r7, #16]
 8023ebc:	ea4f 2333 	mov.w	r3, r3, ror #8
 8023ec0:	69fa      	ldr	r2, [r7, #28]
 8023ec2:	4053      	eors	r3, r2
 8023ec4:	61fb      	str	r3, [r7, #28]

      t2 = td[s2 & 0xFF];
 8023ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023ec8:	b2db      	uxtb	r3, r3
 8023eca:	4a74      	ldr	r2, [pc, #464]	@ (802409c <aesDecryptBlock+0x398>)
 8023ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023ed0:	61bb      	str	r3, [r7, #24]
      temp = td[(s1 >> 8) & 0xFF];
 8023ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023ed4:	0a1b      	lsrs	r3, r3, #8
 8023ed6:	b2db      	uxtb	r3, r3
 8023ed8:	4a70      	ldr	r2, [pc, #448]	@ (802409c <aesDecryptBlock+0x398>)
 8023eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023ede:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 8);
 8023ee0:	693b      	ldr	r3, [r7, #16]
 8023ee2:	ea4f 6333 	mov.w	r3, r3, ror #24
 8023ee6:	69ba      	ldr	r2, [r7, #24]
 8023ee8:	4053      	eors	r3, r2
 8023eea:	61bb      	str	r3, [r7, #24]
      temp = td[(s0 >> 16) & 0xFF];
 8023eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023eee:	0c1b      	lsrs	r3, r3, #16
 8023ef0:	b2db      	uxtb	r3, r3
 8023ef2:	4a6a      	ldr	r2, [pc, #424]	@ (802409c <aesDecryptBlock+0x398>)
 8023ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023ef8:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 16);
 8023efa:	693b      	ldr	r3, [r7, #16]
 8023efc:	ea4f 4333 	mov.w	r3, r3, ror #16
 8023f00:	69ba      	ldr	r2, [r7, #24]
 8023f02:	4053      	eors	r3, r2
 8023f04:	61bb      	str	r3, [r7, #24]
      temp = td[(s3 >> 24) & 0xFF];
 8023f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023f08:	0e1b      	lsrs	r3, r3, #24
 8023f0a:	4a64      	ldr	r2, [pc, #400]	@ (802409c <aesDecryptBlock+0x398>)
 8023f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023f10:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 24);
 8023f12:	693b      	ldr	r3, [r7, #16]
 8023f14:	ea4f 2333 	mov.w	r3, r3, ror #8
 8023f18:	69ba      	ldr	r2, [r7, #24]
 8023f1a:	4053      	eors	r3, r2
 8023f1c:	61bb      	str	r3, [r7, #24]

      t3 = td[s3 & 0xFF];
 8023f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023f20:	b2db      	uxtb	r3, r3
 8023f22:	4a5e      	ldr	r2, [pc, #376]	@ (802409c <aesDecryptBlock+0x398>)
 8023f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023f28:	617b      	str	r3, [r7, #20]
      temp = td[(s2 >> 8) & 0xFF];
 8023f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023f2c:	0a1b      	lsrs	r3, r3, #8
 8023f2e:	b2db      	uxtb	r3, r3
 8023f30:	4a5a      	ldr	r2, [pc, #360]	@ (802409c <aesDecryptBlock+0x398>)
 8023f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023f36:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 8);
 8023f38:	693b      	ldr	r3, [r7, #16]
 8023f3a:	ea4f 6333 	mov.w	r3, r3, ror #24
 8023f3e:	697a      	ldr	r2, [r7, #20]
 8023f40:	4053      	eors	r3, r2
 8023f42:	617b      	str	r3, [r7, #20]
      temp = td[(s1 >> 16) & 0xFF];
 8023f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023f46:	0c1b      	lsrs	r3, r3, #16
 8023f48:	b2db      	uxtb	r3, r3
 8023f4a:	4a54      	ldr	r2, [pc, #336]	@ (802409c <aesDecryptBlock+0x398>)
 8023f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023f50:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 16);
 8023f52:	693b      	ldr	r3, [r7, #16]
 8023f54:	ea4f 4333 	mov.w	r3, r3, ror #16
 8023f58:	697a      	ldr	r2, [r7, #20]
 8023f5a:	4053      	eors	r3, r2
 8023f5c:	617b      	str	r3, [r7, #20]
      temp = td[(s0 >> 24) & 0xFF];
 8023f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023f60:	0e1b      	lsrs	r3, r3, #24
 8023f62:	4a4e      	ldr	r2, [pc, #312]	@ (802409c <aesDecryptBlock+0x398>)
 8023f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023f68:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 24);
 8023f6a:	693b      	ldr	r3, [r7, #16]
 8023f6c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8023f70:	697a      	ldr	r2, [r7, #20]
 8023f72:	4053      	eors	r3, r2
 8023f74:	617b      	str	r3, [r7, #20]

      //Round key addition
      s0 = t0 ^ context->dk[i * 4];
 8023f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023f78:	009b      	lsls	r3, r3, #2
 8023f7a:	68fa      	ldr	r2, [r7, #12]
 8023f7c:	333c      	adds	r3, #60	@ 0x3c
 8023f7e:	009b      	lsls	r3, r3, #2
 8023f80:	4413      	add	r3, r2
 8023f82:	685b      	ldr	r3, [r3, #4]
 8023f84:	6a3a      	ldr	r2, [r7, #32]
 8023f86:	4053      	eors	r3, r2
 8023f88:	633b      	str	r3, [r7, #48]	@ 0x30
      s1 = t1 ^ context->dk[i * 4 + 1];
 8023f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023f8c:	009b      	lsls	r3, r3, #2
 8023f8e:	3301      	adds	r3, #1
 8023f90:	68fa      	ldr	r2, [r7, #12]
 8023f92:	333c      	adds	r3, #60	@ 0x3c
 8023f94:	009b      	lsls	r3, r3, #2
 8023f96:	4413      	add	r3, r2
 8023f98:	685b      	ldr	r3, [r3, #4]
 8023f9a:	69fa      	ldr	r2, [r7, #28]
 8023f9c:	4053      	eors	r3, r2
 8023f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s2 = t2 ^ context->dk[i * 4 + 2];
 8023fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023fa2:	009b      	lsls	r3, r3, #2
 8023fa4:	3302      	adds	r3, #2
 8023fa6:	68fa      	ldr	r2, [r7, #12]
 8023fa8:	333c      	adds	r3, #60	@ 0x3c
 8023faa:	009b      	lsls	r3, r3, #2
 8023fac:	4413      	add	r3, r2
 8023fae:	685b      	ldr	r3, [r3, #4]
 8023fb0:	69ba      	ldr	r2, [r7, #24]
 8023fb2:	4053      	eors	r3, r2
 8023fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
      s3 = t3 ^ context->dk[i * 4 + 3];
 8023fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023fb8:	009b      	lsls	r3, r3, #2
 8023fba:	3303      	adds	r3, #3
 8023fbc:	68fa      	ldr	r2, [r7, #12]
 8023fbe:	333c      	adds	r3, #60	@ 0x3c
 8023fc0:	009b      	lsls	r3, r3, #2
 8023fc2:	4413      	add	r3, r2
 8023fc4:	685b      	ldr	r3, [r3, #4]
 8023fc6:	697a      	ldr	r2, [r7, #20]
 8023fc8:	4053      	eors	r3, r2
 8023fca:	627b      	str	r3, [r7, #36]	@ 0x24
   for(i = context->nr - 1; i >= 1; i--)
 8023fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023fce:	3b01      	subs	r3, #1
 8023fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8023fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023fd4:	2b00      	cmp	r3, #0
 8023fd6:	f47f af1e 	bne.w	8023e16 <aesDecryptBlock+0x112>
   }

   //The last round differs slightly from the first rounds
   t0 = (uint32_t) isbox[s0 & 0xFF];
 8023fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023fdc:	b2db      	uxtb	r3, r3
 8023fde:	4a30      	ldr	r2, [pc, #192]	@ (80240a0 <aesDecryptBlock+0x39c>)
 8023fe0:	5cd3      	ldrb	r3, [r2, r3]
 8023fe2:	623b      	str	r3, [r7, #32]
   t0 |= (uint32_t) isbox[(s3 >> 8) & 0xFF] << 8;
 8023fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023fe6:	0a1b      	lsrs	r3, r3, #8
 8023fe8:	b2db      	uxtb	r3, r3
 8023fea:	4a2d      	ldr	r2, [pc, #180]	@ (80240a0 <aesDecryptBlock+0x39c>)
 8023fec:	5cd3      	ldrb	r3, [r2, r3]
 8023fee:	021b      	lsls	r3, r3, #8
 8023ff0:	6a3a      	ldr	r2, [r7, #32]
 8023ff2:	4313      	orrs	r3, r2
 8023ff4:	623b      	str	r3, [r7, #32]
   t0 |= (uint32_t) isbox[(s2 >> 16) & 0xFF] << 16;
 8023ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023ff8:	0c1b      	lsrs	r3, r3, #16
 8023ffa:	b2db      	uxtb	r3, r3
 8023ffc:	4a28      	ldr	r2, [pc, #160]	@ (80240a0 <aesDecryptBlock+0x39c>)
 8023ffe:	5cd3      	ldrb	r3, [r2, r3]
 8024000:	041b      	lsls	r3, r3, #16
 8024002:	6a3a      	ldr	r2, [r7, #32]
 8024004:	4313      	orrs	r3, r2
 8024006:	623b      	str	r3, [r7, #32]
   t0 |= (uint32_t) isbox[(s1 >> 24) & 0xFF] << 24;
 8024008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802400a:	0e1b      	lsrs	r3, r3, #24
 802400c:	4a24      	ldr	r2, [pc, #144]	@ (80240a0 <aesDecryptBlock+0x39c>)
 802400e:	5cd3      	ldrb	r3, [r2, r3]
 8024010:	061b      	lsls	r3, r3, #24
 8024012:	6a3a      	ldr	r2, [r7, #32]
 8024014:	4313      	orrs	r3, r2
 8024016:	623b      	str	r3, [r7, #32]

   t1 = (uint32_t) isbox[s1 & 0xFF];
 8024018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802401a:	b2db      	uxtb	r3, r3
 802401c:	4a20      	ldr	r2, [pc, #128]	@ (80240a0 <aesDecryptBlock+0x39c>)
 802401e:	5cd3      	ldrb	r3, [r2, r3]
 8024020:	61fb      	str	r3, [r7, #28]
   t1 |= (uint32_t) isbox[(s0 >> 8) & 0xFF] << 8;
 8024022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024024:	0a1b      	lsrs	r3, r3, #8
 8024026:	b2db      	uxtb	r3, r3
 8024028:	4a1d      	ldr	r2, [pc, #116]	@ (80240a0 <aesDecryptBlock+0x39c>)
 802402a:	5cd3      	ldrb	r3, [r2, r3]
 802402c:	021b      	lsls	r3, r3, #8
 802402e:	69fa      	ldr	r2, [r7, #28]
 8024030:	4313      	orrs	r3, r2
 8024032:	61fb      	str	r3, [r7, #28]
   t1 |= (uint32_t) isbox[(s3 >> 16) & 0xFF] << 16;
 8024034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024036:	0c1b      	lsrs	r3, r3, #16
 8024038:	b2db      	uxtb	r3, r3
 802403a:	4a19      	ldr	r2, [pc, #100]	@ (80240a0 <aesDecryptBlock+0x39c>)
 802403c:	5cd3      	ldrb	r3, [r2, r3]
 802403e:	041b      	lsls	r3, r3, #16
 8024040:	69fa      	ldr	r2, [r7, #28]
 8024042:	4313      	orrs	r3, r2
 8024044:	61fb      	str	r3, [r7, #28]
   t1 |= (uint32_t) isbox[(s2 >> 24) & 0xFF] << 24;
 8024046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024048:	0e1b      	lsrs	r3, r3, #24
 802404a:	4a15      	ldr	r2, [pc, #84]	@ (80240a0 <aesDecryptBlock+0x39c>)
 802404c:	5cd3      	ldrb	r3, [r2, r3]
 802404e:	061b      	lsls	r3, r3, #24
 8024050:	69fa      	ldr	r2, [r7, #28]
 8024052:	4313      	orrs	r3, r2
 8024054:	61fb      	str	r3, [r7, #28]

   t2 = (uint32_t) isbox[s2 & 0xFF];
 8024056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024058:	b2db      	uxtb	r3, r3
 802405a:	4a11      	ldr	r2, [pc, #68]	@ (80240a0 <aesDecryptBlock+0x39c>)
 802405c:	5cd3      	ldrb	r3, [r2, r3]
 802405e:	61bb      	str	r3, [r7, #24]
   t2 |= (uint32_t) isbox[(s1 >> 8) & 0xFF] << 8;
 8024060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024062:	0a1b      	lsrs	r3, r3, #8
 8024064:	b2db      	uxtb	r3, r3
 8024066:	4a0e      	ldr	r2, [pc, #56]	@ (80240a0 <aesDecryptBlock+0x39c>)
 8024068:	5cd3      	ldrb	r3, [r2, r3]
 802406a:	021b      	lsls	r3, r3, #8
 802406c:	69ba      	ldr	r2, [r7, #24]
 802406e:	4313      	orrs	r3, r2
 8024070:	61bb      	str	r3, [r7, #24]
   t2 |= (uint32_t) isbox[(s0 >> 16) & 0xFF] << 16;
 8024072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024074:	0c1b      	lsrs	r3, r3, #16
 8024076:	b2db      	uxtb	r3, r3
 8024078:	4a09      	ldr	r2, [pc, #36]	@ (80240a0 <aesDecryptBlock+0x39c>)
 802407a:	5cd3      	ldrb	r3, [r2, r3]
 802407c:	041b      	lsls	r3, r3, #16
 802407e:	69ba      	ldr	r2, [r7, #24]
 8024080:	4313      	orrs	r3, r2
 8024082:	61bb      	str	r3, [r7, #24]
   t2 |= (uint32_t) isbox[(s3 >> 24) & 0xFF] << 24;
 8024084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024086:	0e1b      	lsrs	r3, r3, #24
 8024088:	4a05      	ldr	r2, [pc, #20]	@ (80240a0 <aesDecryptBlock+0x39c>)
 802408a:	5cd3      	ldrb	r3, [r2, r3]
 802408c:	061b      	lsls	r3, r3, #24
 802408e:	69ba      	ldr	r2, [r7, #24]
 8024090:	4313      	orrs	r3, r2
 8024092:	61bb      	str	r3, [r7, #24]

   t3 = (uint32_t) isbox[s3 & 0xFF];
 8024094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024096:	b2db      	uxtb	r3, r3
 8024098:	e004      	b.n	80240a4 <aesDecryptBlock+0x3a0>
 802409a:	bf00      	nop
 802409c:	0802dd58 	.word	0x0802dd58
 80240a0:	0802d858 	.word	0x0802d858
 80240a4:	4a4a      	ldr	r2, [pc, #296]	@ (80241d0 <aesDecryptBlock+0x4cc>)
 80240a6:	5cd3      	ldrb	r3, [r2, r3]
 80240a8:	617b      	str	r3, [r7, #20]
   t3 |= (uint32_t) isbox[(s2 >> 8) & 0xFF] << 8;
 80240aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80240ac:	0a1b      	lsrs	r3, r3, #8
 80240ae:	b2db      	uxtb	r3, r3
 80240b0:	4a47      	ldr	r2, [pc, #284]	@ (80241d0 <aesDecryptBlock+0x4cc>)
 80240b2:	5cd3      	ldrb	r3, [r2, r3]
 80240b4:	021b      	lsls	r3, r3, #8
 80240b6:	697a      	ldr	r2, [r7, #20]
 80240b8:	4313      	orrs	r3, r2
 80240ba:	617b      	str	r3, [r7, #20]
   t3 |= (uint32_t) isbox[(s1 >> 16) & 0xFF] << 16;
 80240bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80240be:	0c1b      	lsrs	r3, r3, #16
 80240c0:	b2db      	uxtb	r3, r3
 80240c2:	4a43      	ldr	r2, [pc, #268]	@ (80241d0 <aesDecryptBlock+0x4cc>)
 80240c4:	5cd3      	ldrb	r3, [r2, r3]
 80240c6:	041b      	lsls	r3, r3, #16
 80240c8:	697a      	ldr	r2, [r7, #20]
 80240ca:	4313      	orrs	r3, r2
 80240cc:	617b      	str	r3, [r7, #20]
   t3 |= (uint32_t) isbox[(s0 >> 24) & 0xFF] << 24;
 80240ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80240d0:	0e1b      	lsrs	r3, r3, #24
 80240d2:	4a3f      	ldr	r2, [pc, #252]	@ (80241d0 <aesDecryptBlock+0x4cc>)
 80240d4:	5cd3      	ldrb	r3, [r2, r3]
 80240d6:	061b      	lsls	r3, r3, #24
 80240d8:	697a      	ldr	r2, [r7, #20]
 80240da:	4313      	orrs	r3, r2
 80240dc:	617b      	str	r3, [r7, #20]

   //Last round key addition
   s0 = t0 ^ context->dk[0];
 80240de:	68fb      	ldr	r3, [r7, #12]
 80240e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80240e4:	6a3a      	ldr	r2, [r7, #32]
 80240e6:	4053      	eors	r3, r2
 80240e8:	633b      	str	r3, [r7, #48]	@ 0x30
   s1 = t1 ^ context->dk[1];
 80240ea:	68fb      	ldr	r3, [r7, #12]
 80240ec:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80240f0:	69fa      	ldr	r2, [r7, #28]
 80240f2:	4053      	eors	r3, r2
 80240f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   s2 = t2 ^ context->dk[2];
 80240f6:	68fb      	ldr	r3, [r7, #12]
 80240f8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80240fc:	69ba      	ldr	r2, [r7, #24]
 80240fe:	4053      	eors	r3, r2
 8024100:	62bb      	str	r3, [r7, #40]	@ 0x28
   s3 = t3 ^ context->dk[3];
 8024102:	68fb      	ldr	r3, [r7, #12]
 8024104:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8024108:	697a      	ldr	r2, [r7, #20]
 802410a:	4053      	eors	r3, r2
 802410c:	627b      	str	r3, [r7, #36]	@ 0x24

   //The final state is then copied to the output
   STORE32LE(s0, output);
 802410e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024110:	b2da      	uxtb	r2, r3
 8024112:	687b      	ldr	r3, [r7, #4]
 8024114:	701a      	strb	r2, [r3, #0]
 8024116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024118:	0a1a      	lsrs	r2, r3, #8
 802411a:	687b      	ldr	r3, [r7, #4]
 802411c:	3301      	adds	r3, #1
 802411e:	b2d2      	uxtb	r2, r2
 8024120:	701a      	strb	r2, [r3, #0]
 8024122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024124:	0c1a      	lsrs	r2, r3, #16
 8024126:	687b      	ldr	r3, [r7, #4]
 8024128:	3302      	adds	r3, #2
 802412a:	b2d2      	uxtb	r2, r2
 802412c:	701a      	strb	r2, [r3, #0]
 802412e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024130:	0e1a      	lsrs	r2, r3, #24
 8024132:	687b      	ldr	r3, [r7, #4]
 8024134:	3303      	adds	r3, #3
 8024136:	b2d2      	uxtb	r2, r2
 8024138:	701a      	strb	r2, [r3, #0]
   STORE32LE(s1, output + 4);
 802413a:	687b      	ldr	r3, [r7, #4]
 802413c:	3304      	adds	r3, #4
 802413e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8024140:	b2d2      	uxtb	r2, r2
 8024142:	701a      	strb	r2, [r3, #0]
 8024144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024146:	0a1a      	lsrs	r2, r3, #8
 8024148:	687b      	ldr	r3, [r7, #4]
 802414a:	3305      	adds	r3, #5
 802414c:	b2d2      	uxtb	r2, r2
 802414e:	701a      	strb	r2, [r3, #0]
 8024150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024152:	0c1a      	lsrs	r2, r3, #16
 8024154:	687b      	ldr	r3, [r7, #4]
 8024156:	3306      	adds	r3, #6
 8024158:	b2d2      	uxtb	r2, r2
 802415a:	701a      	strb	r2, [r3, #0]
 802415c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802415e:	0e1a      	lsrs	r2, r3, #24
 8024160:	687b      	ldr	r3, [r7, #4]
 8024162:	3307      	adds	r3, #7
 8024164:	b2d2      	uxtb	r2, r2
 8024166:	701a      	strb	r2, [r3, #0]
   STORE32LE(s2, output + 8);
 8024168:	687b      	ldr	r3, [r7, #4]
 802416a:	3308      	adds	r3, #8
 802416c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802416e:	b2d2      	uxtb	r2, r2
 8024170:	701a      	strb	r2, [r3, #0]
 8024172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024174:	0a1a      	lsrs	r2, r3, #8
 8024176:	687b      	ldr	r3, [r7, #4]
 8024178:	3309      	adds	r3, #9
 802417a:	b2d2      	uxtb	r2, r2
 802417c:	701a      	strb	r2, [r3, #0]
 802417e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024180:	0c1a      	lsrs	r2, r3, #16
 8024182:	687b      	ldr	r3, [r7, #4]
 8024184:	330a      	adds	r3, #10
 8024186:	b2d2      	uxtb	r2, r2
 8024188:	701a      	strb	r2, [r3, #0]
 802418a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802418c:	0e1a      	lsrs	r2, r3, #24
 802418e:	687b      	ldr	r3, [r7, #4]
 8024190:	330b      	adds	r3, #11
 8024192:	b2d2      	uxtb	r2, r2
 8024194:	701a      	strb	r2, [r3, #0]
   STORE32LE(s3, output + 12);
 8024196:	687b      	ldr	r3, [r7, #4]
 8024198:	330c      	adds	r3, #12
 802419a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802419c:	b2d2      	uxtb	r2, r2
 802419e:	701a      	strb	r2, [r3, #0]
 80241a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80241a2:	0a1a      	lsrs	r2, r3, #8
 80241a4:	687b      	ldr	r3, [r7, #4]
 80241a6:	330d      	adds	r3, #13
 80241a8:	b2d2      	uxtb	r2, r2
 80241aa:	701a      	strb	r2, [r3, #0]
 80241ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80241ae:	0c1a      	lsrs	r2, r3, #16
 80241b0:	687b      	ldr	r3, [r7, #4]
 80241b2:	330e      	adds	r3, #14
 80241b4:	b2d2      	uxtb	r2, r2
 80241b6:	701a      	strb	r2, [r3, #0]
 80241b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80241ba:	0e1a      	lsrs	r2, r3, #24
 80241bc:	687b      	ldr	r3, [r7, #4]
 80241be:	330f      	adds	r3, #15
 80241c0:	b2d2      	uxtb	r2, r2
 80241c2:	701a      	strb	r2, [r3, #0]
}
 80241c4:	bf00      	nop
 80241c6:	373c      	adds	r7, #60	@ 0x3c
 80241c8:	46bd      	mov	sp, r7
 80241ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241ce:	4770      	bx	lr
 80241d0:	0802d858 	.word	0x0802d858

080241d4 <aesDeinit>:
 * @brief Release AES context
 * @param[in] context Pointer to the AES context
 **/

__weak_func void aesDeinit(AesContext *context)
{
 80241d4:	b580      	push	{r7, lr}
 80241d6:	b082      	sub	sp, #8
 80241d8:	af00      	add	r7, sp, #0
 80241da:	6078      	str	r0, [r7, #4]
   //Clear AES context
   osMemset(context, 0, sizeof(AesContext));
 80241dc:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80241e0:	2100      	movs	r1, #0
 80241e2:	6878      	ldr	r0, [r7, #4]
 80241e4:	f007 fd28 	bl	802bc38 <memset>
}
 80241e8:	bf00      	nop
 80241ea:	3708      	adds	r7, #8
 80241ec:	46bd      	mov	sp, r7
 80241ee:	bd80      	pop	{r7, pc}

080241f0 <cbcDecrypt>:
 * @return Error code
 **/

__weak_func error_t cbcDecrypt(const CipherAlgo *cipher, void *context,
   uint8_t *iv, const uint8_t *c, uint8_t *p, size_t length)
{
 80241f0:	b580      	push	{r7, lr}
 80241f2:	b08a      	sub	sp, #40	@ 0x28
 80241f4:	af00      	add	r7, sp, #0
 80241f6:	60f8      	str	r0, [r7, #12]
 80241f8:	60b9      	str	r1, [r7, #8]
 80241fa:	607a      	str	r2, [r7, #4]
 80241fc:	603b      	str	r3, [r7, #0]
   size_t i;
   uint8_t t[16];

   //CBC mode operates in a block-by-block fashion
   while(length >= cipher->blockSize)
 80241fe:	e03d      	b.n	802427c <cbcDecrypt+0x8c>
   {
      //Save input block
      osMemcpy(t, c, cipher->blockSize);
 8024200:	68fb      	ldr	r3, [r7, #12]
 8024202:	68da      	ldr	r2, [r3, #12]
 8024204:	f107 0314 	add.w	r3, r7, #20
 8024208:	6839      	ldr	r1, [r7, #0]
 802420a:	4618      	mov	r0, r3
 802420c:	f007 fdd1 	bl	802bdb2 <memcpy>

      //Decrypt the current block
      cipher->decryptBlock(context, c, p);
 8024210:	68fb      	ldr	r3, [r7, #12]
 8024212:	6a1b      	ldr	r3, [r3, #32]
 8024214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024216:	6839      	ldr	r1, [r7, #0]
 8024218:	68b8      	ldr	r0, [r7, #8]
 802421a:	4798      	blx	r3

      //XOR output block with IV contents
      for(i = 0; i < cipher->blockSize; i++)
 802421c:	2300      	movs	r3, #0
 802421e:	627b      	str	r3, [r7, #36]	@ 0x24
 8024220:	e010      	b.n	8024244 <cbcDecrypt+0x54>
      {
         p[i] ^= iv[i];
 8024222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024226:	4413      	add	r3, r2
 8024228:	7819      	ldrb	r1, [r3, #0]
 802422a:	687a      	ldr	r2, [r7, #4]
 802422c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802422e:	4413      	add	r3, r2
 8024230:	781a      	ldrb	r2, [r3, #0]
 8024232:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8024234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024236:	4403      	add	r3, r0
 8024238:	404a      	eors	r2, r1
 802423a:	b2d2      	uxtb	r2, r2
 802423c:	701a      	strb	r2, [r3, #0]
      for(i = 0; i < cipher->blockSize; i++)
 802423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024240:	3301      	adds	r3, #1
 8024242:	627b      	str	r3, [r7, #36]	@ 0x24
 8024244:	68fb      	ldr	r3, [r7, #12]
 8024246:	68db      	ldr	r3, [r3, #12]
 8024248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802424a:	429a      	cmp	r2, r3
 802424c:	d3e9      	bcc.n	8024222 <cbcDecrypt+0x32>
      }

      //Update IV with input block contents
      osMemcpy(iv, t, cipher->blockSize);
 802424e:	68fb      	ldr	r3, [r7, #12]
 8024250:	68da      	ldr	r2, [r3, #12]
 8024252:	f107 0314 	add.w	r3, r7, #20
 8024256:	4619      	mov	r1, r3
 8024258:	6878      	ldr	r0, [r7, #4]
 802425a:	f007 fdaa 	bl	802bdb2 <memcpy>

      //Next block
      c += cipher->blockSize;
 802425e:	68fb      	ldr	r3, [r7, #12]
 8024260:	68db      	ldr	r3, [r3, #12]
 8024262:	683a      	ldr	r2, [r7, #0]
 8024264:	4413      	add	r3, r2
 8024266:	603b      	str	r3, [r7, #0]
      p += cipher->blockSize;
 8024268:	68fb      	ldr	r3, [r7, #12]
 802426a:	68db      	ldr	r3, [r3, #12]
 802426c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802426e:	4413      	add	r3, r2
 8024270:	633b      	str	r3, [r7, #48]	@ 0x30
      length -= cipher->blockSize;
 8024272:	68fb      	ldr	r3, [r7, #12]
 8024274:	68db      	ldr	r3, [r3, #12]
 8024276:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8024278:	1ad3      	subs	r3, r2, r3
 802427a:	637b      	str	r3, [r7, #52]	@ 0x34
   while(length >= cipher->blockSize)
 802427c:	68fb      	ldr	r3, [r7, #12]
 802427e:	68db      	ldr	r3, [r3, #12]
 8024280:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8024282:	429a      	cmp	r2, r3
 8024284:	d2bc      	bcs.n	8024200 <cbcDecrypt+0x10>
   }

   //The ciphertext must be a multiple of the block size
   if(length != 0)
 8024286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024288:	2b00      	cmp	r3, #0
 802428a:	d001      	beq.n	8024290 <cbcDecrypt+0xa0>
      return ERROR_INVALID_LENGTH;
 802428c:	23ec      	movs	r3, #236	@ 0xec
 802428e:	e000      	b.n	8024292 <cbcDecrypt+0xa2>

   //Successful encryption
   return NO_ERROR;
 8024290:	2300      	movs	r3, #0
}
 8024292:	4618      	mov	r0, r3
 8024294:	3728      	adds	r7, #40	@ 0x28
 8024296:	46bd      	mov	sp, r7
 8024298:	bd80      	pop	{r7, pc}

0802429a <asn1ReadTag>:
 * @param[out] tag Structure describing the ASN.1 tag
 * @return Error code
 **/

error_t asn1ReadTag(const uint8_t *data, size_t length, Asn1Tag *tag)
{
 802429a:	b480      	push	{r7}
 802429c:	b087      	sub	sp, #28
 802429e:	af00      	add	r7, sp, #0
 80242a0:	60f8      	str	r0, [r7, #12]
 80242a2:	60b9      	str	r1, [r7, #8]
 80242a4:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint_t n;

   //Make sure the identifier octet is present
   if(length == 0)
 80242a6:	68bb      	ldr	r3, [r7, #8]
 80242a8:	2b00      	cmp	r3, #0
 80242aa:	d101      	bne.n	80242b0 <asn1ReadTag+0x16>
      return ERROR_INVALID_TAG;
 80242ac:	23ef      	movs	r3, #239	@ 0xef
 80242ae:	e0af      	b.n	8024410 <asn1ReadTag+0x176>

   //Save the class of the ASN.1 tag
   tag->objClass = data[0] & ASN1_CLASS_MASK;
 80242b0:	68fb      	ldr	r3, [r7, #12]
 80242b2:	781b      	ldrb	r3, [r3, #0]
 80242b4:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 80242b8:	687b      	ldr	r3, [r7, #4]
 80242ba:	605a      	str	r2, [r3, #4]
   //Primitive or constructed encoding?
   tag->constructed = (data[0] & ASN1_ENCODING_CONSTRUCTED) ? TRUE : FALSE;
 80242bc:	68fb      	ldr	r3, [r7, #12]
 80242be:	781b      	ldrb	r3, [r3, #0]
 80242c0:	115b      	asrs	r3, r3, #5
 80242c2:	f003 0201 	and.w	r2, r3, #1
 80242c6:	687b      	ldr	r3, [r7, #4]
 80242c8:	601a      	str	r2, [r3, #0]

   //Check the tag number
   if((data[0] & ASN1_TAG_NUMBER_MASK) < 31)
 80242ca:	68fb      	ldr	r3, [r7, #12]
 80242cc:	781b      	ldrb	r3, [r3, #0]
 80242ce:	f003 031f 	and.w	r3, r3, #31
 80242d2:	2b1e      	cmp	r3, #30
 80242d4:	dc08      	bgt.n	80242e8 <asn1ReadTag+0x4e>
   {
      //Tag number is in the range 0 to 30
      tag->objType = data[0] & ASN1_TAG_NUMBER_MASK;
 80242d6:	68fb      	ldr	r3, [r7, #12]
 80242d8:	781b      	ldrb	r3, [r3, #0]
 80242da:	f003 021f 	and.w	r2, r3, #31
 80242de:	687b      	ldr	r3, [r7, #4]
 80242e0:	609a      	str	r2, [r3, #8]
      //Point to the tag length field
      i = 1;
 80242e2:	2301      	movs	r3, #1
 80242e4:	617b      	str	r3, [r7, #20]
 80242e6:	e02a      	b.n	802433e <asn1ReadTag+0xa4>
   }
   else
   {
      //If the tag number is greater than or equal to 31,
      //the subsequent octets will encode the tag number
      tag->objType = 0;
 80242e8:	687b      	ldr	r3, [r7, #4]
 80242ea:	2200      	movs	r2, #0
 80242ec:	609a      	str	r2, [r3, #8]

      //Decode the tag number
      for(i = 1; ; i++)
 80242ee:	2301      	movs	r3, #1
 80242f0:	617b      	str	r3, [r7, #20]
      {
         //The field cannot exceed 5 bytes
         if(i > (sizeof(tag->objType) + 1))
 80242f2:	697b      	ldr	r3, [r7, #20]
 80242f4:	2b05      	cmp	r3, #5
 80242f6:	d901      	bls.n	80242fc <asn1ReadTag+0x62>
            return ERROR_INVALID_TAG;
 80242f8:	23ef      	movs	r3, #239	@ 0xef
 80242fa:	e089      	b.n	8024410 <asn1ReadTag+0x176>
         //Insufficient number of bytes to decode the tag number?
         if(!(length - i))
 80242fc:	68ba      	ldr	r2, [r7, #8]
 80242fe:	697b      	ldr	r3, [r7, #20]
 8024300:	429a      	cmp	r2, r3
 8024302:	d101      	bne.n	8024308 <asn1ReadTag+0x6e>
            return ERROR_INVALID_TAG;
 8024304:	23ef      	movs	r3, #239	@ 0xef
 8024306:	e083      	b.n	8024410 <asn1ReadTag+0x176>

         //Update the tag number with bits 7 to 1
         tag->objType = (tag->objType << 7) | (data[i] & 0x7F);
 8024308:	687b      	ldr	r3, [r7, #4]
 802430a:	689b      	ldr	r3, [r3, #8]
 802430c:	01da      	lsls	r2, r3, #7
 802430e:	68f9      	ldr	r1, [r7, #12]
 8024310:	697b      	ldr	r3, [r7, #20]
 8024312:	440b      	add	r3, r1
 8024314:	781b      	ldrb	r3, [r3, #0]
 8024316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802431a:	431a      	orrs	r2, r3
 802431c:	687b      	ldr	r3, [r7, #4]
 802431e:	609a      	str	r2, [r3, #8]

         //Bit 8 shall be set unless it is the last octet
         if(!(data[i] & 0x80))
 8024320:	68fa      	ldr	r2, [r7, #12]
 8024322:	697b      	ldr	r3, [r7, #20]
 8024324:	4413      	add	r3, r2
 8024326:	781b      	ldrb	r3, [r3, #0]
 8024328:	b25b      	sxtb	r3, r3
 802432a:	2b00      	cmp	r3, #0
 802432c:	da03      	bge.n	8024336 <asn1ReadTag+0x9c>
      for(i = 1; ; i++)
 802432e:	697b      	ldr	r3, [r7, #20]
 8024330:	3301      	adds	r3, #1
 8024332:	617b      	str	r3, [r7, #20]
         if(i > (sizeof(tag->objType) + 1))
 8024334:	e7dd      	b.n	80242f2 <asn1ReadTag+0x58>
            break;
 8024336:	bf00      	nop
      }
      //Point to the tag length field
      i++;
 8024338:	697b      	ldr	r3, [r7, #20]
 802433a:	3301      	adds	r3, #1
 802433c:	617b      	str	r3, [r7, #20]
   }

   //Insufficient number of bytes to decode the tag length?
   if(!(length - i))
 802433e:	68ba      	ldr	r2, [r7, #8]
 8024340:	697b      	ldr	r3, [r7, #20]
 8024342:	429a      	cmp	r2, r3
 8024344:	d101      	bne.n	802434a <asn1ReadTag+0xb0>
      return ERROR_INVALID_TAG;
 8024346:	23ef      	movs	r3, #239	@ 0xef
 8024348:	e062      	b.n	8024410 <asn1ReadTag+0x176>

   //Short form is used?
   if(data[i] < 128)
 802434a:	68fa      	ldr	r2, [r7, #12]
 802434c:	697b      	ldr	r3, [r7, #20]
 802434e:	4413      	add	r3, r2
 8024350:	781b      	ldrb	r3, [r3, #0]
 8024352:	b25b      	sxtb	r3, r3
 8024354:	2b00      	cmp	r3, #0
 8024356:	db0a      	blt.n	802436e <asn1ReadTag+0xd4>
   {
      //Bits 7 to 1 encode the number of bytes in the contents
      tag->length = data[i];
 8024358:	68fa      	ldr	r2, [r7, #12]
 802435a:	697b      	ldr	r3, [r7, #20]
 802435c:	4413      	add	r3, r2
 802435e:	781b      	ldrb	r3, [r3, #0]
 8024360:	461a      	mov	r2, r3
 8024362:	687b      	ldr	r3, [r7, #4]
 8024364:	60da      	str	r2, [r3, #12]
      //Point to the contents of the tag
      i++;
 8024366:	697b      	ldr	r3, [r7, #20]
 8024368:	3301      	adds	r3, #1
 802436a:	617b      	str	r3, [r7, #20]
 802436c:	e03b      	b.n	80243e6 <asn1ReadTag+0x14c>
   }
   //Long form is used?
   else if(data[i] > 128 && data[i] < 255)
 802436e:	68fa      	ldr	r2, [r7, #12]
 8024370:	697b      	ldr	r3, [r7, #20]
 8024372:	4413      	add	r3, r2
 8024374:	781b      	ldrb	r3, [r3, #0]
 8024376:	2b80      	cmp	r3, #128	@ 0x80
 8024378:	d933      	bls.n	80243e2 <asn1ReadTag+0x148>
 802437a:	68fa      	ldr	r2, [r7, #12]
 802437c:	697b      	ldr	r3, [r7, #20]
 802437e:	4413      	add	r3, r2
 8024380:	781b      	ldrb	r3, [r3, #0]
 8024382:	2bff      	cmp	r3, #255	@ 0xff
 8024384:	d02d      	beq.n	80243e2 <asn1ReadTag+0x148>
   {
      //Bits 7 to 1 encode the number of octets in the length field
      n = data[i] & 0x7F;
 8024386:	68fa      	ldr	r2, [r7, #12]
 8024388:	697b      	ldr	r3, [r7, #20]
 802438a:	4413      	add	r3, r2
 802438c:	781b      	ldrb	r3, [r3, #0]
 802438e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8024392:	613b      	str	r3, [r7, #16]

      //The field cannot exceed 4 bytes
      if(n > sizeof(tag->length))
 8024394:	693b      	ldr	r3, [r7, #16]
 8024396:	2b04      	cmp	r3, #4
 8024398:	d901      	bls.n	802439e <asn1ReadTag+0x104>
         return ERROR_INVALID_TAG;
 802439a:	23ef      	movs	r3, #239	@ 0xef
 802439c:	e038      	b.n	8024410 <asn1ReadTag+0x176>
      //Insufficient number of bytes to decode the tag length?
      if((length - i) < n)
 802439e:	68ba      	ldr	r2, [r7, #8]
 80243a0:	697b      	ldr	r3, [r7, #20]
 80243a2:	1ad3      	subs	r3, r2, r3
 80243a4:	693a      	ldr	r2, [r7, #16]
 80243a6:	429a      	cmp	r2, r3
 80243a8:	d901      	bls.n	80243ae <asn1ReadTag+0x114>
         return ERROR_INVALID_TAG;
 80243aa:	23ef      	movs	r3, #239	@ 0xef
 80243ac:	e030      	b.n	8024410 <asn1ReadTag+0x176>

      //Clear the tag length
      tag->length = 0;
 80243ae:	687b      	ldr	r3, [r7, #4]
 80243b0:	2200      	movs	r2, #0
 80243b2:	60da      	str	r2, [r3, #12]

      //Read the subsequent octets
      for(i++; n > 0; n--)
 80243b4:	697b      	ldr	r3, [r7, #20]
 80243b6:	3301      	adds	r3, #1
 80243b8:	617b      	str	r3, [r7, #20]
 80243ba:	e00e      	b.n	80243da <asn1ReadTag+0x140>
      {
         tag->length = (tag->length << 8) | data[i++];
 80243bc:	687b      	ldr	r3, [r7, #4]
 80243be:	68db      	ldr	r3, [r3, #12]
 80243c0:	021a      	lsls	r2, r3, #8
 80243c2:	697b      	ldr	r3, [r7, #20]
 80243c4:	1c59      	adds	r1, r3, #1
 80243c6:	6179      	str	r1, [r7, #20]
 80243c8:	68f9      	ldr	r1, [r7, #12]
 80243ca:	440b      	add	r3, r1
 80243cc:	781b      	ldrb	r3, [r3, #0]
 80243ce:	431a      	orrs	r2, r3
 80243d0:	687b      	ldr	r3, [r7, #4]
 80243d2:	60da      	str	r2, [r3, #12]
      for(i++; n > 0; n--)
 80243d4:	693b      	ldr	r3, [r7, #16]
 80243d6:	3b01      	subs	r3, #1
 80243d8:	613b      	str	r3, [r7, #16]
 80243da:	693b      	ldr	r3, [r7, #16]
 80243dc:	2b00      	cmp	r3, #0
 80243de:	d1ed      	bne.n	80243bc <asn1ReadTag+0x122>
   else if(data[i] > 128 && data[i] < 255)
 80243e0:	e001      	b.n	80243e6 <asn1ReadTag+0x14c>
   }
   //Indefinite form is used?
   else
   {
      //Indefinite form is not supported
      return ERROR_INVALID_TAG;
 80243e2:	23ef      	movs	r3, #239	@ 0xef
 80243e4:	e014      	b.n	8024410 <asn1ReadTag+0x176>
   }

   //Save the pointer to the tag contents
   tag->value = data + i;
 80243e6:	68fa      	ldr	r2, [r7, #12]
 80243e8:	697b      	ldr	r3, [r7, #20]
 80243ea:	441a      	add	r2, r3
 80243ec:	687b      	ldr	r3, [r7, #4]
 80243ee:	611a      	str	r2, [r3, #16]
   //Check the length of tag
   if((length - i) < tag->length)
 80243f0:	68ba      	ldr	r2, [r7, #8]
 80243f2:	697b      	ldr	r3, [r7, #20]
 80243f4:	1ad2      	subs	r2, r2, r3
 80243f6:	687b      	ldr	r3, [r7, #4]
 80243f8:	68db      	ldr	r3, [r3, #12]
 80243fa:	429a      	cmp	r2, r3
 80243fc:	d201      	bcs.n	8024402 <asn1ReadTag+0x168>
      return ERROR_INVALID_TAG;
 80243fe:	23ef      	movs	r3, #239	@ 0xef
 8024400:	e006      	b.n	8024410 <asn1ReadTag+0x176>

   //Total length occupied by the ASN.1 tag in the input stream
   tag->totalLength = i + tag->length;
 8024402:	687b      	ldr	r3, [r7, #4]
 8024404:	68da      	ldr	r2, [r3, #12]
 8024406:	697b      	ldr	r3, [r7, #20]
 8024408:	441a      	add	r2, r3
 802440a:	687b      	ldr	r3, [r7, #4]
 802440c:	615a      	str	r2, [r3, #20]
   //ASN.1 tag successfully decoded
   return NO_ERROR;
 802440e:	2300      	movs	r3, #0
}
 8024410:	4618      	mov	r0, r3
 8024412:	371c      	adds	r7, #28
 8024414:	46bd      	mov	sp, r7
 8024416:	f85d 7b04 	ldr.w	r7, [sp], #4
 802441a:	4770      	bx	lr

0802441c <asn1ReadSequence>:
 * @param[out] tag Structure describing the ASN.1 tag
 * @return Error code
 **/

error_t asn1ReadSequence(const uint8_t *data, size_t length, Asn1Tag *tag)
{
 802441c:	b580      	push	{r7, lr}
 802441e:	b086      	sub	sp, #24
 8024420:	af00      	add	r7, sp, #0
 8024422:	60f8      	str	r0, [r7, #12]
 8024424:	60b9      	str	r1, [r7, #8]
 8024426:	607a      	str	r2, [r7, #4]
   error_t error;

   //Read ASN.1 tag
   error = asn1ReadTag(data, length, tag);
 8024428:	687a      	ldr	r2, [r7, #4]
 802442a:	68b9      	ldr	r1, [r7, #8]
 802442c:	68f8      	ldr	r0, [r7, #12]
 802442e:	f7ff ff34 	bl	802429a <asn1ReadTag>
 8024432:	4603      	mov	r3, r0
 8024434:	82fb      	strh	r3, [r7, #22]

   //Check status code
   if(!error)
 8024436:	8afb      	ldrh	r3, [r7, #22]
 8024438:	2b00      	cmp	r3, #0
 802443a:	d107      	bne.n	802444c <asn1ReadSequence+0x30>
   {
      //Enforce encoding, class and type
      error = asn1CheckTag(tag, TRUE, ASN1_CLASS_UNIVERSAL, ASN1_TYPE_SEQUENCE);
 802443c:	2310      	movs	r3, #16
 802443e:	2200      	movs	r2, #0
 8024440:	2101      	movs	r1, #1
 8024442:	6878      	ldr	r0, [r7, #4]
 8024444:	f000 f824 	bl	8024490 <asn1CheckTag>
 8024448:	4603      	mov	r3, r0
 802444a:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 802444c:	8afb      	ldrh	r3, [r7, #22]
}
 802444e:	4618      	mov	r0, r3
 8024450:	3718      	adds	r7, #24
 8024452:	46bd      	mov	sp, r7
 8024454:	bd80      	pop	{r7, pc}

08024456 <asn1ReadOid>:
 * @param[out] tag Structure describing the ASN.1 tag
 * @return Error code
 **/

error_t asn1ReadOid(const uint8_t *data, size_t length, Asn1Tag *tag)
{
 8024456:	b580      	push	{r7, lr}
 8024458:	b086      	sub	sp, #24
 802445a:	af00      	add	r7, sp, #0
 802445c:	60f8      	str	r0, [r7, #12]
 802445e:	60b9      	str	r1, [r7, #8]
 8024460:	607a      	str	r2, [r7, #4]
   error_t error;

   //Read ASN.1 tag
   error = asn1ReadTag(data, length, tag);
 8024462:	687a      	ldr	r2, [r7, #4]
 8024464:	68b9      	ldr	r1, [r7, #8]
 8024466:	68f8      	ldr	r0, [r7, #12]
 8024468:	f7ff ff17 	bl	802429a <asn1ReadTag>
 802446c:	4603      	mov	r3, r0
 802446e:	82fb      	strh	r3, [r7, #22]

   //Check status code
   if(!error)
 8024470:	8afb      	ldrh	r3, [r7, #22]
 8024472:	2b00      	cmp	r3, #0
 8024474:	d107      	bne.n	8024486 <asn1ReadOid+0x30>
   {
      //Enforce encoding, class and type
      error = asn1CheckTag(tag, FALSE, ASN1_CLASS_UNIVERSAL,
 8024476:	2306      	movs	r3, #6
 8024478:	2200      	movs	r2, #0
 802447a:	2100      	movs	r1, #0
 802447c:	6878      	ldr	r0, [r7, #4]
 802447e:	f000 f807 	bl	8024490 <asn1CheckTag>
 8024482:	4603      	mov	r3, r0
 8024484:	82fb      	strh	r3, [r7, #22]
         ASN1_TYPE_OBJECT_IDENTIFIER);
   }

   //Return status code
   return error;
 8024486:	8afb      	ldrh	r3, [r7, #22]
}
 8024488:	4618      	mov	r0, r3
 802448a:	3718      	adds	r7, #24
 802448c:	46bd      	mov	sp, r7
 802448e:	bd80      	pop	{r7, pc}

08024490 <asn1CheckTag>:
 * @return Error code
 **/

error_t asn1CheckTag(const Asn1Tag *tag, bool_t constructed, uint_t objClass,
   uint_t objType)
{
 8024490:	b480      	push	{r7}
 8024492:	b085      	sub	sp, #20
 8024494:	af00      	add	r7, sp, #0
 8024496:	60f8      	str	r0, [r7, #12]
 8024498:	60b9      	str	r1, [r7, #8]
 802449a:	607a      	str	r2, [r7, #4]
 802449c:	603b      	str	r3, [r7, #0]
   //Check encoding
   if(tag->constructed != constructed)
 802449e:	68fb      	ldr	r3, [r7, #12]
 80244a0:	681b      	ldr	r3, [r3, #0]
 80244a2:	68ba      	ldr	r2, [r7, #8]
 80244a4:	429a      	cmp	r2, r3
 80244a6:	d001      	beq.n	80244ac <asn1CheckTag+0x1c>
      return ERROR_WRONG_ENCODING;
 80244a8:	23f7      	movs	r3, #247	@ 0xf7
 80244aa:	e00e      	b.n	80244ca <asn1CheckTag+0x3a>
   //Enforce class
   if(tag->objClass != objClass)
 80244ac:	68fb      	ldr	r3, [r7, #12]
 80244ae:	685b      	ldr	r3, [r3, #4]
 80244b0:	687a      	ldr	r2, [r7, #4]
 80244b2:	429a      	cmp	r2, r3
 80244b4:	d001      	beq.n	80244ba <asn1CheckTag+0x2a>
      return ERROR_INVALID_CLASS;
 80244b6:	23f2      	movs	r3, #242	@ 0xf2
 80244b8:	e007      	b.n	80244ca <asn1CheckTag+0x3a>
   //Enforce type
   if(tag->objType != objType)
 80244ba:	68fb      	ldr	r3, [r7, #12]
 80244bc:	689b      	ldr	r3, [r3, #8]
 80244be:	683a      	ldr	r2, [r7, #0]
 80244c0:	429a      	cmp	r2, r3
 80244c2:	d001      	beq.n	80244c8 <asn1CheckTag+0x38>
      return ERROR_INVALID_TYPE;
 80244c4:	23f0      	movs	r3, #240	@ 0xf0
 80244c6:	e000      	b.n	80244ca <asn1CheckTag+0x3a>

   //The tag matches all the criteria
   return NO_ERROR;
 80244c8:	2300      	movs	r3, #0
}
 80244ca:	4618      	mov	r0, r3
 80244cc:	3714      	adds	r7, #20
 80244ce:	46bd      	mov	sp, r7
 80244d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244d4:	4770      	bx	lr

080244d6 <asn1CheckOid>:
 * @param[in] length Length of the OID
 * @return Error code
 **/

error_t asn1CheckOid(const Asn1Tag *tag, const uint8_t *oid, size_t length)
{
 80244d6:	b580      	push	{r7, lr}
 80244d8:	b086      	sub	sp, #24
 80244da:	af00      	add	r7, sp, #0
 80244dc:	60f8      	str	r0, [r7, #12]
 80244de:	60b9      	str	r1, [r7, #8]
 80244e0:	607a      	str	r2, [r7, #4]
   error_t error;

   //Enforce encoding, class and type
   error = asn1CheckTag(tag, FALSE, ASN1_CLASS_UNIVERSAL, ASN1_TYPE_OBJECT_IDENTIFIER);
 80244e2:	2306      	movs	r3, #6
 80244e4:	2200      	movs	r2, #0
 80244e6:	2100      	movs	r1, #0
 80244e8:	68f8      	ldr	r0, [r7, #12]
 80244ea:	f7ff ffd1 	bl	8024490 <asn1CheckTag>
 80244ee:	4603      	mov	r3, r0
 80244f0:	82fb      	strh	r3, [r7, #22]
   //Any error to report?
   if(error)
 80244f2:	8afb      	ldrh	r3, [r7, #22]
 80244f4:	2b00      	cmp	r3, #0
 80244f6:	d001      	beq.n	80244fc <asn1CheckOid+0x26>
      return error;
 80244f8:	8afb      	ldrh	r3, [r7, #22]
 80244fa:	e00d      	b.n	8024518 <asn1CheckOid+0x42>

   //Compare OID against the specified value
   if(oidComp(tag->value, tag->length, oid, length))
 80244fc:	68fb      	ldr	r3, [r7, #12]
 80244fe:	6918      	ldr	r0, [r3, #16]
 8024500:	68fb      	ldr	r3, [r7, #12]
 8024502:	68d9      	ldr	r1, [r3, #12]
 8024504:	687b      	ldr	r3, [r7, #4]
 8024506:	68ba      	ldr	r2, [r7, #8]
 8024508:	f000 f8d0 	bl	80246ac <oidComp>
 802450c:	4603      	mov	r3, r0
 802450e:	2b00      	cmp	r3, #0
 8024510:	d001      	beq.n	8024516 <asn1CheckOid+0x40>
      return ERROR_WRONG_IDENTIFIER;
 8024512:	23d6      	movs	r3, #214	@ 0xd6
 8024514:	e000      	b.n	8024518 <asn1CheckOid+0x42>

   //The tag matches all the criteria
   return NO_ERROR;
 8024516:	2300      	movs	r3, #0
}
 8024518:	4618      	mov	r0, r3
 802451a:	3718      	adds	r7, #24
 802451c:	46bd      	mov	sp, r7
 802451e:	bd80      	pop	{r7, pc}

08024520 <base64Decode>:
 * @return Error code
 **/

error_t base64Decode(const char_t *input, size_t inputLen, void *output,
   size_t *outputLen)
{
 8024520:	b480      	push	{r7}
 8024522:	b08d      	sub	sp, #52	@ 0x34
 8024524:	af00      	add	r7, sp, #0
 8024526:	60f8      	str	r0, [r7, #12]
 8024528:	60b9      	str	r1, [r7, #8]
 802452a:	607a      	str	r2, [r7, #4]
 802452c:	603b      	str	r3, [r7, #0]
   size_t n;
   size_t padLen;
   uint8_t *p;

   //Check parameters
   if(input == NULL && inputLen != 0)
 802452e:	68fb      	ldr	r3, [r7, #12]
 8024530:	2b00      	cmp	r3, #0
 8024532:	d104      	bne.n	802453e <base64Decode+0x1e>
 8024534:	68bb      	ldr	r3, [r7, #8]
 8024536:	2b00      	cmp	r3, #0
 8024538:	d001      	beq.n	802453e <base64Decode+0x1e>
      return ERROR_INVALID_PARAMETER;
 802453a:	2302      	movs	r3, #2
 802453c:	e0ae      	b.n	802469c <base64Decode+0x17c>
   if(outputLen == NULL)
 802453e:	683b      	ldr	r3, [r7, #0]
 8024540:	2b00      	cmp	r3, #0
 8024542:	d101      	bne.n	8024548 <base64Decode+0x28>
      return ERROR_INVALID_PARAMETER;
 8024544:	2302      	movs	r3, #2
 8024546:	e0a9      	b.n	802469c <base64Decode+0x17c>

   //Initialize status code
   error = NO_ERROR;
 8024548:	2300      	movs	r3, #0
 802454a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

   //Point to the buffer where to write the decoded data
   p = (uint8_t *) output;
 802454c:	687b      	ldr	r3, [r7, #4]
 802454e:	617b      	str	r3, [r7, #20]

   //Initialize variables
   j = 0;
 8024550:	2300      	movs	r3, #0
 8024552:	623b      	str	r3, [r7, #32]
   n = 0;
 8024554:	2300      	movs	r3, #0
 8024556:	61fb      	str	r3, [r7, #28]
   value = 0;
 8024558:	2300      	movs	r3, #0
 802455a:	62bb      	str	r3, [r7, #40]	@ 0x28
   padLen = 0;
 802455c:	2300      	movs	r3, #0
 802455e:	61bb      	str	r3, [r7, #24]

   //Process the Base64-encoded string
   for(i = 0; i < inputLen && !error; i++)
 8024560:	2300      	movs	r3, #0
 8024562:	627b      	str	r3, [r7, #36]	@ 0x24
 8024564:	e051      	b.n	802460a <base64Decode+0xea>
   {
      //Get current character
      c = (uint_t) input[i];
 8024566:	68fa      	ldr	r2, [r7, #12]
 8024568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802456a:	4413      	add	r3, r2
 802456c:	781b      	ldrb	r3, [r3, #0]
 802456e:	613b      	str	r3, [r7, #16]

      //Check the value of the current character
      if(c == '\r' || c == '\n')
 8024570:	693b      	ldr	r3, [r7, #16]
 8024572:	2b0d      	cmp	r3, #13
 8024574:	d046      	beq.n	8024604 <base64Decode+0xe4>
 8024576:	693b      	ldr	r3, [r7, #16]
 8024578:	2b0a      	cmp	r3, #10
 802457a:	d043      	beq.n	8024604 <base64Decode+0xe4>
      {
         //CR and LF characters should be ignored
      }
      else if(c == '=')
 802457c:	693b      	ldr	r3, [r7, #16]
 802457e:	2b3d      	cmp	r3, #61	@ 0x3d
 8024580:	d103      	bne.n	802458a <base64Decode+0x6a>
      {
         //Increment the number of pad characters
         padLen++;
 8024582:	69bb      	ldr	r3, [r7, #24]
 8024584:	3301      	adds	r3, #1
 8024586:	61bb      	str	r3, [r7, #24]
 8024588:	e03c      	b.n	8024604 <base64Decode+0xe4>
      }
      else if(c < 128 && base64DecTable[c] < 64 && padLen == 0)
 802458a:	693b      	ldr	r3, [r7, #16]
 802458c:	2b7f      	cmp	r3, #127	@ 0x7f
 802458e:	d837      	bhi.n	8024600 <base64Decode+0xe0>
 8024590:	4a45      	ldr	r2, [pc, #276]	@ (80246a8 <base64Decode+0x188>)
 8024592:	693b      	ldr	r3, [r7, #16]
 8024594:	4413      	add	r3, r2
 8024596:	781b      	ldrb	r3, [r3, #0]
 8024598:	2b3f      	cmp	r3, #63	@ 0x3f
 802459a:	d831      	bhi.n	8024600 <base64Decode+0xe0>
 802459c:	69bb      	ldr	r3, [r7, #24]
 802459e:	2b00      	cmp	r3, #0
 80245a0:	d12e      	bne.n	8024600 <base64Decode+0xe0>
      {
         //Decode the current character
         value = (value << 6) | base64DecTable[c];
 80245a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80245a4:	019b      	lsls	r3, r3, #6
 80245a6:	4940      	ldr	r1, [pc, #256]	@ (80246a8 <base64Decode+0x188>)
 80245a8:	693a      	ldr	r2, [r7, #16]
 80245aa:	440a      	add	r2, r1
 80245ac:	7812      	ldrb	r2, [r2, #0]
 80245ae:	4313      	orrs	r3, r2
 80245b0:	62bb      	str	r3, [r7, #40]	@ 0x28

         //Divide the input stream into blocks of 4 characters
         if(++j == 4)
 80245b2:	6a3b      	ldr	r3, [r7, #32]
 80245b4:	3301      	adds	r3, #1
 80245b6:	623b      	str	r3, [r7, #32]
 80245b8:	6a3b      	ldr	r3, [r7, #32]
 80245ba:	2b04      	cmp	r3, #4
 80245bc:	d122      	bne.n	8024604 <base64Decode+0xe4>
         {
            //Map each 4-character block to 3 bytes
            if(p != NULL)
 80245be:	697b      	ldr	r3, [r7, #20]
 80245c0:	2b00      	cmp	r3, #0
 80245c2:	d015      	beq.n	80245f0 <base64Decode+0xd0>
            {
               p[n] = (value >> 16) & 0xFF;
 80245c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80245c6:	0c19      	lsrs	r1, r3, #16
 80245c8:	697a      	ldr	r2, [r7, #20]
 80245ca:	69fb      	ldr	r3, [r7, #28]
 80245cc:	4413      	add	r3, r2
 80245ce:	b2ca      	uxtb	r2, r1
 80245d0:	701a      	strb	r2, [r3, #0]
               p[n + 1] = (value >> 8) & 0xFF;
 80245d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80245d4:	0a19      	lsrs	r1, r3, #8
 80245d6:	69fb      	ldr	r3, [r7, #28]
 80245d8:	3301      	adds	r3, #1
 80245da:	697a      	ldr	r2, [r7, #20]
 80245dc:	4413      	add	r3, r2
 80245de:	b2ca      	uxtb	r2, r1
 80245e0:	701a      	strb	r2, [r3, #0]
               p[n + 2] = value & 0xFF;
 80245e2:	69fb      	ldr	r3, [r7, #28]
 80245e4:	3302      	adds	r3, #2
 80245e6:	697a      	ldr	r2, [r7, #20]
 80245e8:	4413      	add	r3, r2
 80245ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80245ec:	b2d2      	uxtb	r2, r2
 80245ee:	701a      	strb	r2, [r3, #0]
            }

            //Adjust the length of the decoded data
            n += 3;
 80245f0:	69fb      	ldr	r3, [r7, #28]
 80245f2:	3303      	adds	r3, #3
 80245f4:	61fb      	str	r3, [r7, #28]

            //Decode next block
            j = 0;
 80245f6:	2300      	movs	r3, #0
 80245f8:	623b      	str	r3, [r7, #32]
            value = 0;
 80245fa:	2300      	movs	r3, #0
 80245fc:	62bb      	str	r3, [r7, #40]	@ 0x28
         if(++j == 4)
 80245fe:	e001      	b.n	8024604 <base64Decode+0xe4>
      else
      {
         //Implementations must reject the encoded data if it contains
         //characters outside the base alphabet (refer to RFC 4648,
         //section 3.3)
         error = ERROR_INVALID_CHARACTER;
 8024600:	23eb      	movs	r3, #235	@ 0xeb
 8024602:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   for(i = 0; i < inputLen && !error; i++)
 8024604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024606:	3301      	adds	r3, #1
 8024608:	627b      	str	r3, [r7, #36]	@ 0x24
 802460a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802460c:	68bb      	ldr	r3, [r7, #8]
 802460e:	429a      	cmp	r2, r3
 8024610:	d202      	bcs.n	8024618 <base64Decode+0xf8>
 8024612:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8024614:	2b00      	cmp	r3, #0
 8024616:	d0a6      	beq.n	8024566 <base64Decode+0x46>
      }
   }

   //Check status code
   if(!error)
 8024618:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 802461a:	2b00      	cmp	r3, #0
 802461c:	d13a      	bne.n	8024694 <base64Decode+0x174>
   {
      //Check the number of pad characters
      if(padLen == 0 && j == 0)
 802461e:	69bb      	ldr	r3, [r7, #24]
 8024620:	2b00      	cmp	r3, #0
 8024622:	d102      	bne.n	802462a <base64Decode+0x10a>
 8024624:	6a3b      	ldr	r3, [r7, #32]
 8024626:	2b00      	cmp	r3, #0
 8024628:	d034      	beq.n	8024694 <base64Decode+0x174>
      {
         //No pad characters in this case
      }
      else if(padLen == 1 && j == 3)
 802462a:	69bb      	ldr	r3, [r7, #24]
 802462c:	2b01      	cmp	r3, #1
 802462e:	d118      	bne.n	8024662 <base64Decode+0x142>
 8024630:	6a3b      	ldr	r3, [r7, #32]
 8024632:	2b03      	cmp	r3, #3
 8024634:	d115      	bne.n	8024662 <base64Decode+0x142>
      {
         //The "=" sequence indicates that the last block contains only 2 bytes
         if(p != NULL)
 8024636:	697b      	ldr	r3, [r7, #20]
 8024638:	2b00      	cmp	r3, #0
 802463a:	d00e      	beq.n	802465a <base64Decode+0x13a>
         {
            //Decode the last two bytes
            p[n] = (value >> 10) & 0xFF;
 802463c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802463e:	0a99      	lsrs	r1, r3, #10
 8024640:	697a      	ldr	r2, [r7, #20]
 8024642:	69fb      	ldr	r3, [r7, #28]
 8024644:	4413      	add	r3, r2
 8024646:	b2ca      	uxtb	r2, r1
 8024648:	701a      	strb	r2, [r3, #0]
            p[n + 1] = (value >> 2) & 0xFF;
 802464a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802464c:	0899      	lsrs	r1, r3, #2
 802464e:	69fb      	ldr	r3, [r7, #28]
 8024650:	3301      	adds	r3, #1
 8024652:	697a      	ldr	r2, [r7, #20]
 8024654:	4413      	add	r3, r2
 8024656:	b2ca      	uxtb	r2, r1
 8024658:	701a      	strb	r2, [r3, #0]
         }

         //Adjust the length of the decoded data
         n += 2;
 802465a:	69fb      	ldr	r3, [r7, #28]
 802465c:	3302      	adds	r3, #2
 802465e:	61fb      	str	r3, [r7, #28]
 8024660:	e018      	b.n	8024694 <base64Decode+0x174>
      }
      else if(padLen == 2 && j == 2)
 8024662:	69bb      	ldr	r3, [r7, #24]
 8024664:	2b02      	cmp	r3, #2
 8024666:	d113      	bne.n	8024690 <base64Decode+0x170>
 8024668:	6a3b      	ldr	r3, [r7, #32]
 802466a:	2b02      	cmp	r3, #2
 802466c:	d110      	bne.n	8024690 <base64Decode+0x170>
      {
         //The "==" sequence indicates that the last block contains only 1 byte
         if(p != NULL)
 802466e:	697b      	ldr	r3, [r7, #20]
 8024670:	2b00      	cmp	r3, #0
 8024672:	d006      	beq.n	8024682 <base64Decode+0x162>
         {
            //Decode the last byte
            p[n] = (value >> 4) & 0xFF;
 8024674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024676:	0919      	lsrs	r1, r3, #4
 8024678:	697a      	ldr	r2, [r7, #20]
 802467a:	69fb      	ldr	r3, [r7, #28]
 802467c:	4413      	add	r3, r2
 802467e:	b2ca      	uxtb	r2, r1
 8024680:	701a      	strb	r2, [r3, #0]
         }

         //Adjust the length of the decoded data
         n++;
 8024682:	69fb      	ldr	r3, [r7, #28]
 8024684:	3301      	adds	r3, #1
 8024686:	61fb      	str	r3, [r7, #28]
         //Skip trailing pad characters
         i++;
 8024688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802468a:	3301      	adds	r3, #1
 802468c:	627b      	str	r3, [r7, #36]	@ 0x24
 802468e:	e001      	b.n	8024694 <base64Decode+0x174>
      }
      else
      {
         //The length of the input string must be a multiple of 4
         error = ERROR_INVALID_LENGTH;
 8024690:	23ec      	movs	r3, #236	@ 0xec
 8024692:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      }
   }

   //Total number of bytes that have been written
   *outputLen = n;
 8024694:	683b      	ldr	r3, [r7, #0]
 8024696:	69fa      	ldr	r2, [r7, #28]
 8024698:	601a      	str	r2, [r3, #0]

   //Return status code
   return error;
 802469a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 802469c:	4618      	mov	r0, r3
 802469e:	3734      	adds	r7, #52	@ 0x34
 80246a0:	46bd      	mov	sp, r7
 80246a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246a6:	4770      	bx	lr
 80246a8:	0802e1b4 	.word	0x0802e1b4

080246ac <oidComp>:
 * @retval 1 The second OID lexicographically precedes the first OID
 **/

int_t oidComp(const uint8_t *oid1, size_t oidLen1, const uint8_t *oid2,
   size_t oidLen2)
{
 80246ac:	b580      	push	{r7, lr}
 80246ae:	b08c      	sub	sp, #48	@ 0x30
 80246b0:	af00      	add	r7, sp, #0
 80246b2:	60f8      	str	r0, [r7, #12]
 80246b4:	60b9      	str	r1, [r7, #8]
 80246b6:	607a      	str	r2, [r7, #4]
 80246b8:	603b      	str	r3, [r7, #0]
   size_t pos2;
   bool_t more1;
   bool_t more2;

   //Initialize variables
   res = 0;
 80246ba:	2300      	movs	r3, #0
 80246bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   n1 = 0;
 80246be:	2300      	movs	r3, #0
 80246c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   n2 = 0;
 80246c2:	2300      	movs	r3, #0
 80246c4:	627b      	str	r3, [r7, #36]	@ 0x24
   pos1 = 0;
 80246c6:	2300      	movs	r3, #0
 80246c8:	623b      	str	r3, [r7, #32]
   pos2 = 0;
 80246ca:	2300      	movs	r3, #0
 80246cc:	61fb      	str	r3, [r7, #28]
   more1 = TRUE;
 80246ce:	2301      	movs	r3, #1
 80246d0:	61bb      	str	r3, [r7, #24]
   more2 = TRUE;
 80246d2:	2301      	movs	r3, #1
 80246d4:	617b      	str	r3, [r7, #20]

   //Perform lexicographical comparison
   while(res == 0)
 80246d6:	e0b3      	b.n	8024840 <oidComp+0x194>
   {
      //Extract sub-identifier from first OID
      if(more1)
 80246d8:	69bb      	ldr	r3, [r7, #24]
 80246da:	2b00      	cmp	r3, #0
 80246dc:	d035      	beq.n	802474a <oidComp+0x9e>
      {
         if(pos1 >= oidLen1)
 80246de:	6a3a      	ldr	r2, [r7, #32]
 80246e0:	68bb      	ldr	r3, [r7, #8]
 80246e2:	429a      	cmp	r2, r3
 80246e4:	d302      	bcc.n	80246ec <oidComp+0x40>
         {
            more1 = FALSE;
 80246e6:	2300      	movs	r3, #0
 80246e8:	61bb      	str	r3, [r7, #24]
 80246ea:	e02e      	b.n	802474a <oidComp+0x9e>
         }
         else if(pos1 == 0)
 80246ec:	6a3b      	ldr	r3, [r7, #32]
 80246ee:	2b00      	cmp	r3, #0
 80246f0:	d108      	bne.n	8024704 <oidComp+0x58>
         {
            pos1++;
 80246f2:	6a3b      	ldr	r3, [r7, #32]
 80246f4:	3301      	adds	r3, #1
 80246f6:	623b      	str	r3, [r7, #32]
            n1++;
 80246f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80246fa:	3301      	adds	r3, #1
 80246fc:	62bb      	str	r3, [r7, #40]	@ 0x28
            more1 = FALSE;
 80246fe:	2300      	movs	r3, #0
 8024700:	61bb      	str	r3, [r7, #24]
 8024702:	e022      	b.n	802474a <oidComp+0x9e>
         }
         else if(n1 == 0 && oid1[pos1] == OID_MORE_FLAG)
 8024704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024706:	2b00      	cmp	r3, #0
 8024708:	d109      	bne.n	802471e <oidComp+0x72>
 802470a:	68fa      	ldr	r2, [r7, #12]
 802470c:	6a3b      	ldr	r3, [r7, #32]
 802470e:	4413      	add	r3, r2
 8024710:	781b      	ldrb	r3, [r3, #0]
 8024712:	2b80      	cmp	r3, #128	@ 0x80
 8024714:	d103      	bne.n	802471e <oidComp+0x72>
         {
            pos1++;
 8024716:	6a3b      	ldr	r3, [r7, #32]
 8024718:	3301      	adds	r3, #1
 802471a:	623b      	str	r3, [r7, #32]
 802471c:	e015      	b.n	802474a <oidComp+0x9e>
         }
         else if((oid1[pos1] & OID_MORE_FLAG) != 0)
 802471e:	68fa      	ldr	r2, [r7, #12]
 8024720:	6a3b      	ldr	r3, [r7, #32]
 8024722:	4413      	add	r3, r2
 8024724:	781b      	ldrb	r3, [r3, #0]
 8024726:	b25b      	sxtb	r3, r3
 8024728:	2b00      	cmp	r3, #0
 802472a:	da06      	bge.n	802473a <oidComp+0x8e>
         {
            pos1++;
 802472c:	6a3b      	ldr	r3, [r7, #32]
 802472e:	3301      	adds	r3, #1
 8024730:	623b      	str	r3, [r7, #32]
            n1++;
 8024732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024734:	3301      	adds	r3, #1
 8024736:	62bb      	str	r3, [r7, #40]	@ 0x28
 8024738:	e007      	b.n	802474a <oidComp+0x9e>
         }
         else
         {
            pos1++;
 802473a:	6a3b      	ldr	r3, [r7, #32]
 802473c:	3301      	adds	r3, #1
 802473e:	623b      	str	r3, [r7, #32]
            n1++;
 8024740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024742:	3301      	adds	r3, #1
 8024744:	62bb      	str	r3, [r7, #40]	@ 0x28
            more1 = FALSE;
 8024746:	2300      	movs	r3, #0
 8024748:	61bb      	str	r3, [r7, #24]
         }
      }

      //Extract sub-identifier from second OID
      if(more2)
 802474a:	697b      	ldr	r3, [r7, #20]
 802474c:	2b00      	cmp	r3, #0
 802474e:	d035      	beq.n	80247bc <oidComp+0x110>
      {
         if(pos2 >= oidLen2)
 8024750:	69fa      	ldr	r2, [r7, #28]
 8024752:	683b      	ldr	r3, [r7, #0]
 8024754:	429a      	cmp	r2, r3
 8024756:	d302      	bcc.n	802475e <oidComp+0xb2>
         {
            more2 = FALSE;
 8024758:	2300      	movs	r3, #0
 802475a:	617b      	str	r3, [r7, #20]
 802475c:	e02e      	b.n	80247bc <oidComp+0x110>
         }
         else if(pos2 == 0)
 802475e:	69fb      	ldr	r3, [r7, #28]
 8024760:	2b00      	cmp	r3, #0
 8024762:	d108      	bne.n	8024776 <oidComp+0xca>
         {
            pos2++;
 8024764:	69fb      	ldr	r3, [r7, #28]
 8024766:	3301      	adds	r3, #1
 8024768:	61fb      	str	r3, [r7, #28]
            n2++;
 802476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802476c:	3301      	adds	r3, #1
 802476e:	627b      	str	r3, [r7, #36]	@ 0x24
            more2 = FALSE;
 8024770:	2300      	movs	r3, #0
 8024772:	617b      	str	r3, [r7, #20]
 8024774:	e022      	b.n	80247bc <oidComp+0x110>
         }
         else if(n2 == 0 && oid2[pos2] == OID_MORE_FLAG)
 8024776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024778:	2b00      	cmp	r3, #0
 802477a:	d109      	bne.n	8024790 <oidComp+0xe4>
 802477c:	687a      	ldr	r2, [r7, #4]
 802477e:	69fb      	ldr	r3, [r7, #28]
 8024780:	4413      	add	r3, r2
 8024782:	781b      	ldrb	r3, [r3, #0]
 8024784:	2b80      	cmp	r3, #128	@ 0x80
 8024786:	d103      	bne.n	8024790 <oidComp+0xe4>
         {
            pos2++;
 8024788:	69fb      	ldr	r3, [r7, #28]
 802478a:	3301      	adds	r3, #1
 802478c:	61fb      	str	r3, [r7, #28]
 802478e:	e015      	b.n	80247bc <oidComp+0x110>
         }
         else if((oid2[pos2] & OID_MORE_FLAG) != 0)
 8024790:	687a      	ldr	r2, [r7, #4]
 8024792:	69fb      	ldr	r3, [r7, #28]
 8024794:	4413      	add	r3, r2
 8024796:	781b      	ldrb	r3, [r3, #0]
 8024798:	b25b      	sxtb	r3, r3
 802479a:	2b00      	cmp	r3, #0
 802479c:	da06      	bge.n	80247ac <oidComp+0x100>
         {
            pos2++;
 802479e:	69fb      	ldr	r3, [r7, #28]
 80247a0:	3301      	adds	r3, #1
 80247a2:	61fb      	str	r3, [r7, #28]
            n2++;
 80247a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80247a6:	3301      	adds	r3, #1
 80247a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80247aa:	e007      	b.n	80247bc <oidComp+0x110>
         }
         else
         {
            pos2++;
 80247ac:	69fb      	ldr	r3, [r7, #28]
 80247ae:	3301      	adds	r3, #1
 80247b0:	61fb      	str	r3, [r7, #28]
            n2++;
 80247b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80247b4:	3301      	adds	r3, #1
 80247b6:	627b      	str	r3, [r7, #36]	@ 0x24
            more2 = FALSE;
 80247b8:	2300      	movs	r3, #0
 80247ba:	617b      	str	r3, [r7, #20]
         }
      }

      //Compare sub-identifiers
      if(!more1 && !more2)
 80247bc:	69bb      	ldr	r3, [r7, #24]
 80247be:	2b00      	cmp	r3, #0
 80247c0:	d13e      	bne.n	8024840 <oidComp+0x194>
 80247c2:	697b      	ldr	r3, [r7, #20]
 80247c4:	2b00      	cmp	r3, #0
 80247c6:	d13b      	bne.n	8024840 <oidComp+0x194>
      {
         //Check the length of the sub-identifiers
         if(n1 == 0 && n2 == 0)
 80247c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80247ca:	2b00      	cmp	r3, #0
 80247cc:	d105      	bne.n	80247da <oidComp+0x12e>
 80247ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80247d0:	2b00      	cmp	r3, #0
 80247d2:	d102      	bne.n	80247da <oidComp+0x12e>
         {
            res = 0;
 80247d4:	2300      	movs	r3, #0
 80247d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80247d8:	e036      	b.n	8024848 <oidComp+0x19c>
         }
         else if(n1 < n2)
 80247da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80247dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80247de:	429a      	cmp	r2, r3
 80247e0:	d203      	bcs.n	80247ea <oidComp+0x13e>
         {
            res = -1;
 80247e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80247e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80247e8:	e02a      	b.n	8024840 <oidComp+0x194>
         }
         else if(n1 > n2)
 80247ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80247ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80247ee:	429a      	cmp	r2, r3
 80247f0:	d902      	bls.n	80247f8 <oidComp+0x14c>
         {
            res = 1;
 80247f2:	2301      	movs	r3, #1
 80247f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80247f6:	e023      	b.n	8024840 <oidComp+0x194>
         }
         else
         {
            //Compare sub-identifier values
            res = osMemcmp(oid1 + pos1 - n1, oid2 + pos2 - n2, n1);
 80247f8:	6a3a      	ldr	r2, [r7, #32]
 80247fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80247fc:	1ad3      	subs	r3, r2, r3
 80247fe:	68fa      	ldr	r2, [r7, #12]
 8024800:	18d0      	adds	r0, r2, r3
 8024802:	69fa      	ldr	r2, [r7, #28]
 8024804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024806:	1ad3      	subs	r3, r2, r3
 8024808:	687a      	ldr	r2, [r7, #4]
 802480a:	4413      	add	r3, r2
 802480c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802480e:	4619      	mov	r1, r3
 8024810:	f007 fa02 	bl	802bc18 <memcmp>
 8024814:	62f8      	str	r0, [r7, #44]	@ 0x2c

            //Check comparison result
            if(res < 0)
 8024816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024818:	2b00      	cmp	r3, #0
 802481a:	da03      	bge.n	8024824 <oidComp+0x178>
            {
               res = -1;
 802481c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8024820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8024822:	e00d      	b.n	8024840 <oidComp+0x194>
            }
            else if(res > 0)
 8024824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024826:	2b00      	cmp	r3, #0
 8024828:	dd02      	ble.n	8024830 <oidComp+0x184>
            {
               res = 1;
 802482a:	2301      	movs	r3, #1
 802482c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802482e:	e007      	b.n	8024840 <oidComp+0x194>
            }
            else
            {
               //Decode next sub-identifiers
               n1 = 0;
 8024830:	2300      	movs	r3, #0
 8024832:	62bb      	str	r3, [r7, #40]	@ 0x28
               n2 = 0;
 8024834:	2300      	movs	r3, #0
 8024836:	627b      	str	r3, [r7, #36]	@ 0x24
               more1 = TRUE;
 8024838:	2301      	movs	r3, #1
 802483a:	61bb      	str	r3, [r7, #24]
               more2 = TRUE;
 802483c:	2301      	movs	r3, #1
 802483e:	617b      	str	r3, [r7, #20]
   while(res == 0)
 8024840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024842:	2b00      	cmp	r3, #0
 8024844:	f43f af48 	beq.w	80246d8 <oidComp+0x2c>
         }
      }
   }

   //Return comparison result
   return res;
 8024848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 802484a:	4618      	mov	r0, r3
 802484c:	3730      	adds	r7, #48	@ 0x30
 802484e:	46bd      	mov	sp, r7
 8024850:	bd80      	pop	{r7, pc}
	...

08024854 <stm32f4xxCryptoInit>:
 * @brief Initialize hardware cryptographic accelerator
 * @return Error code
 **/

error_t stm32f4xxCryptoInit(void)
{
 8024854:	b580      	push	{r7, lr}
 8024856:	b082      	sub	sp, #8
 8024858:	af00      	add	r7, sp, #0
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 802485a:	2300      	movs	r3, #0
 802485c:	80fb      	strh	r3, [r7, #6]

   //Create a mutex to prevent simultaneous access to the hardware
   //cryptographic accelerator
   if(!osCreateMutex(&stm32f4xxCryptoMutex))
 802485e:	480a      	ldr	r0, [pc, #40]	@ (8024888 <stm32f4xxCryptoInit+0x34>)
 8024860:	f7fc f8b2 	bl	80209c8 <osCreateMutex>
 8024864:	4603      	mov	r3, r0
 8024866:	2b00      	cmp	r3, #0
 8024868:	d101      	bne.n	802486e <stm32f4xxCryptoInit+0x1a>
   {
      //Failed to create mutex
      error = ERROR_OUT_OF_RESOURCES;
 802486a:	2365      	movs	r3, #101	@ 0x65
 802486c:	80fb      	strh	r3, [r7, #6]
   }

#if (STM32F4XX_CRYPTO_TRNG_SUPPORT == ENABLED)
   //Check status code
   if(!error)
 802486e:	88fb      	ldrh	r3, [r7, #6]
 8024870:	2b00      	cmp	r3, #0
 8024872:	d103      	bne.n	802487c <stm32f4xxCryptoInit+0x28>
   {
      //Initialize TRNG module
      error = trngInit();
 8024874:	f000 f80a 	bl	802488c <trngInit>
 8024878:	4603      	mov	r3, r0
 802487a:	80fb      	strh	r3, [r7, #6]
      error = crypInit();
   }
#endif

   //Return status code
   return error;
 802487c:	88fb      	ldrh	r3, [r7, #6]
}
 802487e:	4618      	mov	r0, r3
 8024880:	3708      	adds	r7, #8
 8024882:	46bd      	mov	sp, r7
 8024884:	bd80      	pop	{r7, pc}
 8024886:	bf00      	nop
 8024888:	200000ec 	.word	0x200000ec

0802488c <trngInit>:
 * @brief TRNG module initialization
 * @return Error code
 **/

error_t trngInit(void)
{
 802488c:	b580      	push	{r7, lr}
 802488e:	b082      	sub	sp, #8
 8024890:	af00      	add	r7, sp, #0
   HAL_StatusTypeDef status;

   //Enable RNG peripheral clock
   __HAL_RCC_RNG_CLK_ENABLE();
 8024892:	2300      	movs	r3, #0
 8024894:	603b      	str	r3, [r7, #0]
 8024896:	4b13      	ldr	r3, [pc, #76]	@ (80248e4 <trngInit+0x58>)
 8024898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802489a:	4a12      	ldr	r2, [pc, #72]	@ (80248e4 <trngInit+0x58>)
 802489c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80248a0:	6353      	str	r3, [r2, #52]	@ 0x34
 80248a2:	4b10      	ldr	r3, [pc, #64]	@ (80248e4 <trngInit+0x58>)
 80248a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80248a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80248aa:	603b      	str	r3, [r7, #0]
 80248ac:	683b      	ldr	r3, [r7, #0]

   //Set instance
   RNG_Handle.Instance = RNG;
 80248ae:	4b0e      	ldr	r3, [pc, #56]	@ (80248e8 <trngInit+0x5c>)
 80248b0:	4a0e      	ldr	r2, [pc, #56]	@ (80248ec <trngInit+0x60>)
 80248b2:	601a      	str	r2, [r3, #0]

   //Reset RNG module
   status = HAL_RNG_DeInit(&RNG_Handle);
 80248b4:	480c      	ldr	r0, [pc, #48]	@ (80248e8 <trngInit+0x5c>)
 80248b6:	f005 fda3 	bl	802a400 <HAL_RNG_DeInit>
 80248ba:	4603      	mov	r3, r0
 80248bc:	71fb      	strb	r3, [r7, #7]

   //Check status code
   if(status == HAL_OK)
 80248be:	79fb      	ldrb	r3, [r7, #7]
 80248c0:	2b00      	cmp	r3, #0
 80248c2:	d104      	bne.n	80248ce <trngInit+0x42>
   {
      //Initialize RNG module
      status = HAL_RNG_Init(&RNG_Handle);
 80248c4:	4808      	ldr	r0, [pc, #32]	@ (80248e8 <trngInit+0x5c>)
 80248c6:	f005 fd71 	bl	802a3ac <HAL_RNG_Init>
 80248ca:	4603      	mov	r3, r0
 80248cc:	71fb      	strb	r3, [r7, #7]
   }

   //Return status code
   return (status == HAL_OK) ? NO_ERROR : ERROR_FAILURE;
 80248ce:	79fb      	ldrb	r3, [r7, #7]
 80248d0:	2b00      	cmp	r3, #0
 80248d2:	bf14      	ite	ne
 80248d4:	2301      	movne	r3, #1
 80248d6:	2300      	moveq	r3, #0
 80248d8:	b2db      	uxtb	r3, r3
}
 80248da:	4618      	mov	r0, r3
 80248dc:	3708      	adds	r7, #8
 80248de:	46bd      	mov	sp, r7
 80248e0:	bd80      	pop	{r7, pc}
 80248e2:	bf00      	nop
 80248e4:	40023800 	.word	0x40023800
 80248e8:	200000f0 	.word	0x200000f0
 80248ec:	50060800 	.word	0x50060800

080248f0 <sha256Compute>:
 * @param[out] digest Pointer to the calculated digest
 * @return Error code
 **/

__weak_func error_t sha256Compute(const void *data, size_t length, uint8_t *digest)
{
 80248f0:	b580      	push	{r7, lr}
 80248f2:	b086      	sub	sp, #24
 80248f4:	af00      	add	r7, sp, #0
 80248f6:	60f8      	str	r0, [r7, #12]
 80248f8:	60b9      	str	r1, [r7, #8]
 80248fa:	607a      	str	r2, [r7, #4]
#else
   Sha256Context context[1];
#endif

   //Check parameters
   if(data == NULL && length != 0)
 80248fc:	68fb      	ldr	r3, [r7, #12]
 80248fe:	2b00      	cmp	r3, #0
 8024900:	d104      	bne.n	802490c <sha256Compute+0x1c>
 8024902:	68bb      	ldr	r3, [r7, #8]
 8024904:	2b00      	cmp	r3, #0
 8024906:	d001      	beq.n	802490c <sha256Compute+0x1c>
      return ERROR_INVALID_PARAMETER;
 8024908:	2302      	movs	r3, #2
 802490a:	e01d      	b.n	8024948 <sha256Compute+0x58>

   if(digest == NULL)
 802490c:	687b      	ldr	r3, [r7, #4]
 802490e:	2b00      	cmp	r3, #0
 8024910:	d101      	bne.n	8024916 <sha256Compute+0x26>
      return ERROR_INVALID_PARAMETER;
 8024912:	2302      	movs	r3, #2
 8024914:	e018      	b.n	8024948 <sha256Compute+0x58>

#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   //Allocate a memory buffer to hold the SHA-256 context
   context = cryptoAllocMem(sizeof(Sha256Context));
 8024916:	2070      	movs	r0, #112	@ 0x70
 8024918:	f7fc f861 	bl	80209de <osAllocMem>
 802491c:	6178      	str	r0, [r7, #20]
   //Failed to allocate memory?
   if(context == NULL)
 802491e:	697b      	ldr	r3, [r7, #20]
 8024920:	2b00      	cmp	r3, #0
 8024922:	d101      	bne.n	8024928 <sha256Compute+0x38>
      return ERROR_OUT_OF_MEMORY;
 8024924:	2364      	movs	r3, #100	@ 0x64
 8024926:	e00f      	b.n	8024948 <sha256Compute+0x58>
#endif

   //Initialize the SHA-256 context
   sha256Init(context);
 8024928:	6978      	ldr	r0, [r7, #20]
 802492a:	f000 f811 	bl	8024950 <sha256Init>
   //Digest the message
   sha256Update(context, data, length);
 802492e:	68ba      	ldr	r2, [r7, #8]
 8024930:	68f9      	ldr	r1, [r7, #12]
 8024932:	6978      	ldr	r0, [r7, #20]
 8024934:	f000 f848 	bl	80249c8 <sha256Update>
   //Finalize the SHA-256 message digest
   sha256Final(context, digest);
 8024938:	6879      	ldr	r1, [r7, #4]
 802493a:	6978      	ldr	r0, [r7, #20]
 802493c:	f000 f890 	bl	8024a60 <sha256Final>

#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   //Free previously allocated memory
   cryptoFreeMem(context);
 8024940:	6978      	ldr	r0, [r7, #20]
 8024942:	f7fc f85a 	bl	80209fa <osFreeMem>
#endif

   //Successful processing
   return NO_ERROR;
 8024946:	2300      	movs	r3, #0
}
 8024948:	4618      	mov	r0, r3
 802494a:	3718      	adds	r7, #24
 802494c:	46bd      	mov	sp, r7
 802494e:	bd80      	pop	{r7, pc}

08024950 <sha256Init>:
 * @brief Initialize SHA-256 message digest context
 * @param[in] context Pointer to the SHA-256 context to initialize
 **/

__weak_func void sha256Init(Sha256Context *context)
{
 8024950:	b480      	push	{r7}
 8024952:	b083      	sub	sp, #12
 8024954:	af00      	add	r7, sp, #0
 8024956:	6078      	str	r0, [r7, #4]
   //Set initial hash value
   context->h[0] = 0x6A09E667;
 8024958:	687b      	ldr	r3, [r7, #4]
 802495a:	4a13      	ldr	r2, [pc, #76]	@ (80249a8 <sha256Init+0x58>)
 802495c:	601a      	str	r2, [r3, #0]
   context->h[1] = 0xBB67AE85;
 802495e:	687b      	ldr	r3, [r7, #4]
 8024960:	4a12      	ldr	r2, [pc, #72]	@ (80249ac <sha256Init+0x5c>)
 8024962:	605a      	str	r2, [r3, #4]
   context->h[2] = 0x3C6EF372;
 8024964:	687b      	ldr	r3, [r7, #4]
 8024966:	4a12      	ldr	r2, [pc, #72]	@ (80249b0 <sha256Init+0x60>)
 8024968:	609a      	str	r2, [r3, #8]
   context->h[3] = 0xA54FF53A;
 802496a:	687b      	ldr	r3, [r7, #4]
 802496c:	4a11      	ldr	r2, [pc, #68]	@ (80249b4 <sha256Init+0x64>)
 802496e:	60da      	str	r2, [r3, #12]
   context->h[4] = 0x510E527F;
 8024970:	687b      	ldr	r3, [r7, #4]
 8024972:	4a11      	ldr	r2, [pc, #68]	@ (80249b8 <sha256Init+0x68>)
 8024974:	611a      	str	r2, [r3, #16]
   context->h[5] = 0x9B05688C;
 8024976:	687b      	ldr	r3, [r7, #4]
 8024978:	4a10      	ldr	r2, [pc, #64]	@ (80249bc <sha256Init+0x6c>)
 802497a:	615a      	str	r2, [r3, #20]
   context->h[6] = 0x1F83D9AB;
 802497c:	687b      	ldr	r3, [r7, #4]
 802497e:	4a10      	ldr	r2, [pc, #64]	@ (80249c0 <sha256Init+0x70>)
 8024980:	619a      	str	r2, [r3, #24]
   context->h[7] = 0x5BE0CD19;
 8024982:	687b      	ldr	r3, [r7, #4]
 8024984:	4a0f      	ldr	r2, [pc, #60]	@ (80249c4 <sha256Init+0x74>)
 8024986:	61da      	str	r2, [r3, #28]

   //Number of bytes in the buffer
   context->size = 0;
 8024988:	687b      	ldr	r3, [r7, #4]
 802498a:	2200      	movs	r2, #0
 802498c:	661a      	str	r2, [r3, #96]	@ 0x60
   //Total length of the message
   context->totalSize = 0;
 802498e:	6879      	ldr	r1, [r7, #4]
 8024990:	f04f 0200 	mov.w	r2, #0
 8024994:	f04f 0300 	mov.w	r3, #0
 8024998:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
}
 802499c:	bf00      	nop
 802499e:	370c      	adds	r7, #12
 80249a0:	46bd      	mov	sp, r7
 80249a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249a6:	4770      	bx	lr
 80249a8:	6a09e667 	.word	0x6a09e667
 80249ac:	bb67ae85 	.word	0xbb67ae85
 80249b0:	3c6ef372 	.word	0x3c6ef372
 80249b4:	a54ff53a 	.word	0xa54ff53a
 80249b8:	510e527f 	.word	0x510e527f
 80249bc:	9b05688c 	.word	0x9b05688c
 80249c0:	1f83d9ab 	.word	0x1f83d9ab
 80249c4:	5be0cd19 	.word	0x5be0cd19

080249c8 <sha256Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

__weak_func void sha256Update(Sha256Context *context, const void *data, size_t length)
{
 80249c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80249cc:	b086      	sub	sp, #24
 80249ce:	af00      	add	r7, sp, #0
 80249d0:	60f8      	str	r0, [r7, #12]
 80249d2:	60b9      	str	r1, [r7, #8]
 80249d4:	607a      	str	r2, [r7, #4]
   size_t n;

   //Process the incoming data
   while(length > 0)
 80249d6:	e039      	b.n	8024a4c <sha256Update+0x84>
   {
      //The buffer can hold at most 64 bytes
      n = MIN(length, 64 - context->size);
 80249d8:	68fb      	ldr	r3, [r7, #12]
 80249da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80249dc:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80249e0:	687a      	ldr	r2, [r7, #4]
 80249e2:	4293      	cmp	r3, r2
 80249e4:	bf28      	it	cs
 80249e6:	4613      	movcs	r3, r2
 80249e8:	617b      	str	r3, [r7, #20]

      //Copy the data to the buffer
      osMemcpy(context->buffer + context->size, data, n);
 80249ea:	68fb      	ldr	r3, [r7, #12]
 80249ec:	f103 0220 	add.w	r2, r3, #32
 80249f0:	68fb      	ldr	r3, [r7, #12]
 80249f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80249f4:	4413      	add	r3, r2
 80249f6:	697a      	ldr	r2, [r7, #20]
 80249f8:	68b9      	ldr	r1, [r7, #8]
 80249fa:	4618      	mov	r0, r3
 80249fc:	f007 f9d9 	bl	802bdb2 <memcpy>

      //Update the SHA-256 context
      context->size += n;
 8024a00:	68fb      	ldr	r3, [r7, #12]
 8024a02:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8024a04:	697b      	ldr	r3, [r7, #20]
 8024a06:	441a      	add	r2, r3
 8024a08:	68fb      	ldr	r3, [r7, #12]
 8024a0a:	661a      	str	r2, [r3, #96]	@ 0x60
      context->totalSize += n;
 8024a0c:	68fb      	ldr	r3, [r7, #12]
 8024a0e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8024a12:	6979      	ldr	r1, [r7, #20]
 8024a14:	2000      	movs	r0, #0
 8024a16:	460c      	mov	r4, r1
 8024a18:	4605      	mov	r5, r0
 8024a1a:	eb12 0804 	adds.w	r8, r2, r4
 8024a1e:	eb43 0905 	adc.w	r9, r3, r5
 8024a22:	68fb      	ldr	r3, [r7, #12]
 8024a24:	e9c3 891a 	strd	r8, r9, [r3, #104]	@ 0x68
      //Advance the data pointer
      data = (uint8_t *) data + n;
 8024a28:	68ba      	ldr	r2, [r7, #8]
 8024a2a:	697b      	ldr	r3, [r7, #20]
 8024a2c:	4413      	add	r3, r2
 8024a2e:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 8024a30:	687a      	ldr	r2, [r7, #4]
 8024a32:	697b      	ldr	r3, [r7, #20]
 8024a34:	1ad3      	subs	r3, r2, r3
 8024a36:	607b      	str	r3, [r7, #4]

      //Process message in 16-word blocks
      if(context->size == 64)
 8024a38:	68fb      	ldr	r3, [r7, #12]
 8024a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8024a3c:	2b40      	cmp	r3, #64	@ 0x40
 8024a3e:	d105      	bne.n	8024a4c <sha256Update+0x84>
      {
         //Transform the 16-word block
         sha256ProcessBlock(context);
 8024a40:	68f8      	ldr	r0, [r7, #12]
 8024a42:	f000 f8d7 	bl	8024bf4 <sha256ProcessBlock>
         //Empty the buffer
         context->size = 0;
 8024a46:	68fb      	ldr	r3, [r7, #12]
 8024a48:	2200      	movs	r2, #0
 8024a4a:	661a      	str	r2, [r3, #96]	@ 0x60
   while(length > 0)
 8024a4c:	687b      	ldr	r3, [r7, #4]
 8024a4e:	2b00      	cmp	r3, #0
 8024a50:	d1c2      	bne.n	80249d8 <sha256Update+0x10>
      }
   }
}
 8024a52:	bf00      	nop
 8024a54:	bf00      	nop
 8024a56:	3718      	adds	r7, #24
 8024a58:	46bd      	mov	sp, r7
 8024a5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08024a60 <sha256Final>:
 * @param[in] context Pointer to the SHA-256 context
 * @param[out] digest Calculated digest
 **/

__weak_func void sha256Final(Sha256Context *context, uint8_t *digest)
{
 8024a60:	b580      	push	{r7, lr}
 8024a62:	b086      	sub	sp, #24
 8024a64:	af00      	add	r7, sp, #0
 8024a66:	6078      	str	r0, [r7, #4]
 8024a68:	6039      	str	r1, [r7, #0]
   uint_t i;
   size_t paddingSize;
   uint64_t totalSize;

   //Length of the original message (before padding)
   totalSize = context->totalSize * 8;
 8024a6a:	687b      	ldr	r3, [r7, #4]
 8024a6c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8024a70:	f04f 0200 	mov.w	r2, #0
 8024a74:	f04f 0300 	mov.w	r3, #0
 8024a78:	00cb      	lsls	r3, r1, #3
 8024a7a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8024a7e:	00c2      	lsls	r2, r0, #3
 8024a80:	e9c7 2302 	strd	r2, r3, [r7, #8]

   //Pad the message so that its length is congruent to 56 modulo 64
   if(context->size < 56)
 8024a84:	687b      	ldr	r3, [r7, #4]
 8024a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8024a88:	2b37      	cmp	r3, #55	@ 0x37
 8024a8a:	d805      	bhi.n	8024a98 <sha256Final+0x38>
   {
      paddingSize = 56 - context->size;
 8024a8c:	687b      	ldr	r3, [r7, #4]
 8024a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8024a90:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8024a94:	613b      	str	r3, [r7, #16]
 8024a96:	e004      	b.n	8024aa2 <sha256Final+0x42>
   }
   else
   {
      paddingSize = 64 + 56 - context->size;
 8024a98:	687b      	ldr	r3, [r7, #4]
 8024a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8024a9c:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8024aa0:	613b      	str	r3, [r7, #16]
   }

   //Append padding
   sha256Update(context, padding, paddingSize);
 8024aa2:	693a      	ldr	r2, [r7, #16]
 8024aa4:	4930      	ldr	r1, [pc, #192]	@ (8024b68 <sha256Final+0x108>)
 8024aa6:	6878      	ldr	r0, [r7, #4]
 8024aa8:	f7ff ff8e 	bl	80249c8 <sha256Update>

   //Append the length of the original message
   for(i = 0; i < 8; i++)
 8024aac:	2300      	movs	r3, #0
 8024aae:	617b      	str	r3, [r7, #20]
 8024ab0:	e017      	b.n	8024ae2 <sha256Final+0x82>
   {
      context->buffer[63 - i] = totalSize & 0xFF;
 8024ab2:	697b      	ldr	r3, [r7, #20]
 8024ab4:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8024ab8:	7a39      	ldrb	r1, [r7, #8]
 8024aba:	687a      	ldr	r2, [r7, #4]
 8024abc:	4413      	add	r3, r2
 8024abe:	460a      	mov	r2, r1
 8024ac0:	f883 2020 	strb.w	r2, [r3, #32]
      totalSize >>= 8;
 8024ac4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8024ac8:	f04f 0200 	mov.w	r2, #0
 8024acc:	f04f 0300 	mov.w	r3, #0
 8024ad0:	0a02      	lsrs	r2, r0, #8
 8024ad2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8024ad6:	0a0b      	lsrs	r3, r1, #8
 8024ad8:	e9c7 2302 	strd	r2, r3, [r7, #8]
   for(i = 0; i < 8; i++)
 8024adc:	697b      	ldr	r3, [r7, #20]
 8024ade:	3301      	adds	r3, #1
 8024ae0:	617b      	str	r3, [r7, #20]
 8024ae2:	697b      	ldr	r3, [r7, #20]
 8024ae4:	2b07      	cmp	r3, #7
 8024ae6:	d9e4      	bls.n	8024ab2 <sha256Final+0x52>
   }

   //Calculate the message digest
   sha256ProcessBlock(context);
 8024ae8:	6878      	ldr	r0, [r7, #4]
 8024aea:	f000 f883 	bl	8024bf4 <sha256ProcessBlock>

   //Copy the resulting digest
   for(i = 0; i < (SHA256_DIGEST_SIZE / 4); i++)
 8024aee:	2300      	movs	r3, #0
 8024af0:	617b      	str	r3, [r7, #20]
 8024af2:	e030      	b.n	8024b56 <sha256Final+0xf6>
   {
      STORE32BE(context->h[i], digest + i * 4);
 8024af4:	687b      	ldr	r3, [r7, #4]
 8024af6:	697a      	ldr	r2, [r7, #20]
 8024af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024afc:	0e19      	lsrs	r1, r3, #24
 8024afe:	697b      	ldr	r3, [r7, #20]
 8024b00:	009b      	lsls	r3, r3, #2
 8024b02:	683a      	ldr	r2, [r7, #0]
 8024b04:	4413      	add	r3, r2
 8024b06:	b2ca      	uxtb	r2, r1
 8024b08:	701a      	strb	r2, [r3, #0]
 8024b0a:	687b      	ldr	r3, [r7, #4]
 8024b0c:	697a      	ldr	r2, [r7, #20]
 8024b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024b12:	0c19      	lsrs	r1, r3, #16
 8024b14:	697b      	ldr	r3, [r7, #20]
 8024b16:	009b      	lsls	r3, r3, #2
 8024b18:	3301      	adds	r3, #1
 8024b1a:	683a      	ldr	r2, [r7, #0]
 8024b1c:	4413      	add	r3, r2
 8024b1e:	b2ca      	uxtb	r2, r1
 8024b20:	701a      	strb	r2, [r3, #0]
 8024b22:	687b      	ldr	r3, [r7, #4]
 8024b24:	697a      	ldr	r2, [r7, #20]
 8024b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024b2a:	0a19      	lsrs	r1, r3, #8
 8024b2c:	697b      	ldr	r3, [r7, #20]
 8024b2e:	009b      	lsls	r3, r3, #2
 8024b30:	3302      	adds	r3, #2
 8024b32:	683a      	ldr	r2, [r7, #0]
 8024b34:	4413      	add	r3, r2
 8024b36:	b2ca      	uxtb	r2, r1
 8024b38:	701a      	strb	r2, [r3, #0]
 8024b3a:	687b      	ldr	r3, [r7, #4]
 8024b3c:	697a      	ldr	r2, [r7, #20]
 8024b3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024b42:	697b      	ldr	r3, [r7, #20]
 8024b44:	009b      	lsls	r3, r3, #2
 8024b46:	3303      	adds	r3, #3
 8024b48:	683a      	ldr	r2, [r7, #0]
 8024b4a:	4413      	add	r3, r2
 8024b4c:	b2ca      	uxtb	r2, r1
 8024b4e:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < (SHA256_DIGEST_SIZE / 4); i++)
 8024b50:	697b      	ldr	r3, [r7, #20]
 8024b52:	3301      	adds	r3, #1
 8024b54:	617b      	str	r3, [r7, #20]
 8024b56:	697b      	ldr	r3, [r7, #20]
 8024b58:	2b07      	cmp	r3, #7
 8024b5a:	d9cb      	bls.n	8024af4 <sha256Final+0x94>
   }
}
 8024b5c:	bf00      	nop
 8024b5e:	bf00      	nop
 8024b60:	3718      	adds	r7, #24
 8024b62:	46bd      	mov	sp, r7
 8024b64:	bd80      	pop	{r7, pc}
 8024b66:	bf00      	nop
 8024b68:	0802e234 	.word	0x0802e234

08024b6c <sha256FinalRaw>:
 * @param[in] context Pointer to the SHA-256 context
 * @param[out] digest Calculated digest
 **/

__weak_func void sha256FinalRaw(Sha256Context *context, uint8_t *digest)
{
 8024b6c:	b480      	push	{r7}
 8024b6e:	b085      	sub	sp, #20
 8024b70:	af00      	add	r7, sp, #0
 8024b72:	6078      	str	r0, [r7, #4]
 8024b74:	6039      	str	r1, [r7, #0]
   uint_t i;

   //Copy the resulting digest
   for(i = 0; i < (SHA256_DIGEST_SIZE / 4); i++)
 8024b76:	2300      	movs	r3, #0
 8024b78:	60fb      	str	r3, [r7, #12]
 8024b7a:	e030      	b.n	8024bde <sha256FinalRaw+0x72>
   {
      STORE32BE(context->h[i], digest + i * 4);
 8024b7c:	687b      	ldr	r3, [r7, #4]
 8024b7e:	68fa      	ldr	r2, [r7, #12]
 8024b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024b84:	0e19      	lsrs	r1, r3, #24
 8024b86:	68fb      	ldr	r3, [r7, #12]
 8024b88:	009b      	lsls	r3, r3, #2
 8024b8a:	683a      	ldr	r2, [r7, #0]
 8024b8c:	4413      	add	r3, r2
 8024b8e:	b2ca      	uxtb	r2, r1
 8024b90:	701a      	strb	r2, [r3, #0]
 8024b92:	687b      	ldr	r3, [r7, #4]
 8024b94:	68fa      	ldr	r2, [r7, #12]
 8024b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024b9a:	0c19      	lsrs	r1, r3, #16
 8024b9c:	68fb      	ldr	r3, [r7, #12]
 8024b9e:	009b      	lsls	r3, r3, #2
 8024ba0:	3301      	adds	r3, #1
 8024ba2:	683a      	ldr	r2, [r7, #0]
 8024ba4:	4413      	add	r3, r2
 8024ba6:	b2ca      	uxtb	r2, r1
 8024ba8:	701a      	strb	r2, [r3, #0]
 8024baa:	687b      	ldr	r3, [r7, #4]
 8024bac:	68fa      	ldr	r2, [r7, #12]
 8024bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024bb2:	0a19      	lsrs	r1, r3, #8
 8024bb4:	68fb      	ldr	r3, [r7, #12]
 8024bb6:	009b      	lsls	r3, r3, #2
 8024bb8:	3302      	adds	r3, #2
 8024bba:	683a      	ldr	r2, [r7, #0]
 8024bbc:	4413      	add	r3, r2
 8024bbe:	b2ca      	uxtb	r2, r1
 8024bc0:	701a      	strb	r2, [r3, #0]
 8024bc2:	687b      	ldr	r3, [r7, #4]
 8024bc4:	68fa      	ldr	r2, [r7, #12]
 8024bc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024bca:	68fb      	ldr	r3, [r7, #12]
 8024bcc:	009b      	lsls	r3, r3, #2
 8024bce:	3303      	adds	r3, #3
 8024bd0:	683a      	ldr	r2, [r7, #0]
 8024bd2:	4413      	add	r3, r2
 8024bd4:	b2ca      	uxtb	r2, r1
 8024bd6:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < (SHA256_DIGEST_SIZE / 4); i++)
 8024bd8:	68fb      	ldr	r3, [r7, #12]
 8024bda:	3301      	adds	r3, #1
 8024bdc:	60fb      	str	r3, [r7, #12]
 8024bde:	68fb      	ldr	r3, [r7, #12]
 8024be0:	2b07      	cmp	r3, #7
 8024be2:	d9cb      	bls.n	8024b7c <sha256FinalRaw+0x10>
   }
}
 8024be4:	bf00      	nop
 8024be6:	bf00      	nop
 8024be8:	3714      	adds	r7, #20
 8024bea:	46bd      	mov	sp, r7
 8024bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bf0:	4770      	bx	lr
	...

08024bf4 <sha256ProcessBlock>:
 * @brief Process message in 16-word blocks
 * @param[in] context Pointer to the SHA-256 context
 **/

__weak_func void sha256ProcessBlock(Sha256Context *context)
{
 8024bf4:	b490      	push	{r4, r7}
 8024bf6:	b08e      	sub	sp, #56	@ 0x38
 8024bf8:	af00      	add	r7, sp, #0
 8024bfa:	6078      	str	r0, [r7, #4]
   uint_t i;
   uint32_t temp1;
   uint32_t temp2;

   //Initialize the 8 working registers
   uint32_t a = context->h[0];
 8024bfc:	687b      	ldr	r3, [r7, #4]
 8024bfe:	681b      	ldr	r3, [r3, #0]
 8024c00:	633b      	str	r3, [r7, #48]	@ 0x30
   uint32_t b = context->h[1];
 8024c02:	687b      	ldr	r3, [r7, #4]
 8024c04:	685b      	ldr	r3, [r3, #4]
 8024c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
   uint32_t c = context->h[2];
 8024c08:	687b      	ldr	r3, [r7, #4]
 8024c0a:	689b      	ldr	r3, [r3, #8]
 8024c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   uint32_t d = context->h[3];
 8024c0e:	687b      	ldr	r3, [r7, #4]
 8024c10:	68db      	ldr	r3, [r3, #12]
 8024c12:	627b      	str	r3, [r7, #36]	@ 0x24
   uint32_t e = context->h[4];
 8024c14:	687b      	ldr	r3, [r7, #4]
 8024c16:	691b      	ldr	r3, [r3, #16]
 8024c18:	623b      	str	r3, [r7, #32]
   uint32_t f = context->h[5];
 8024c1a:	687b      	ldr	r3, [r7, #4]
 8024c1c:	695b      	ldr	r3, [r3, #20]
 8024c1e:	61fb      	str	r3, [r7, #28]
   uint32_t g = context->h[6];
 8024c20:	687b      	ldr	r3, [r7, #4]
 8024c22:	699b      	ldr	r3, [r3, #24]
 8024c24:	61bb      	str	r3, [r7, #24]
   uint32_t h = context->h[7];
 8024c26:	687b      	ldr	r3, [r7, #4]
 8024c28:	69db      	ldr	r3, [r3, #28]
 8024c2a:	617b      	str	r3, [r7, #20]

   //Process message in 16-word blocks
   uint32_t *w = context->w;
 8024c2c:	687b      	ldr	r3, [r7, #4]
 8024c2e:	3320      	adds	r3, #32
 8024c30:	613b      	str	r3, [r7, #16]

   //Convert from big-endian byte order to host byte order
   for(i = 0; i < 16; i++)
 8024c32:	2300      	movs	r3, #0
 8024c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8024c36:	e02d      	b.n	8024c94 <sha256ProcessBlock+0xa0>
   {
      w[i] = LOAD32BE(context->buffer + i * 4);
 8024c38:	687b      	ldr	r3, [r7, #4]
 8024c3a:	f103 0220 	add.w	r2, r3, #32
 8024c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024c40:	009b      	lsls	r3, r3, #2
 8024c42:	4413      	add	r3, r2
 8024c44:	781b      	ldrb	r3, [r3, #0]
 8024c46:	061a      	lsls	r2, r3, #24
 8024c48:	687b      	ldr	r3, [r7, #4]
 8024c4a:	f103 0120 	add.w	r1, r3, #32
 8024c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024c50:	009b      	lsls	r3, r3, #2
 8024c52:	3301      	adds	r3, #1
 8024c54:	440b      	add	r3, r1
 8024c56:	781b      	ldrb	r3, [r3, #0]
 8024c58:	041b      	lsls	r3, r3, #16
 8024c5a:	431a      	orrs	r2, r3
 8024c5c:	687b      	ldr	r3, [r7, #4]
 8024c5e:	f103 0120 	add.w	r1, r3, #32
 8024c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024c64:	009b      	lsls	r3, r3, #2
 8024c66:	3302      	adds	r3, #2
 8024c68:	440b      	add	r3, r1
 8024c6a:	781b      	ldrb	r3, [r3, #0]
 8024c6c:	021b      	lsls	r3, r3, #8
 8024c6e:	431a      	orrs	r2, r3
 8024c70:	687b      	ldr	r3, [r7, #4]
 8024c72:	f103 0120 	add.w	r1, r3, #32
 8024c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024c78:	009b      	lsls	r3, r3, #2
 8024c7a:	3303      	adds	r3, #3
 8024c7c:	440b      	add	r3, r1
 8024c7e:	781b      	ldrb	r3, [r3, #0]
 8024c80:	4618      	mov	r0, r3
 8024c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024c84:	009b      	lsls	r3, r3, #2
 8024c86:	6939      	ldr	r1, [r7, #16]
 8024c88:	440b      	add	r3, r1
 8024c8a:	4302      	orrs	r2, r0
 8024c8c:	601a      	str	r2, [r3, #0]
   for(i = 0; i < 16; i++)
 8024c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024c90:	3301      	adds	r3, #1
 8024c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8024c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024c96:	2b0f      	cmp	r3, #15
 8024c98:	d9ce      	bls.n	8024c38 <sha256ProcessBlock+0x44>
   }

   //SHA-256 hash computation (alternate method)
   for(i = 0; i < 64; i++)
 8024c9a:	2300      	movs	r3, #0
 8024c9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8024c9e:	e0aa      	b.n	8024df6 <sha256ProcessBlock+0x202>
   {
      //Prepare the message schedule
      if(i >= 16)
 8024ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024ca2:	2b0f      	cmp	r3, #15
 8024ca4:	d956      	bls.n	8024d54 <sha256ProcessBlock+0x160>
      {
         W(i) += SIGMA4(W(i + 14)) + W(i + 9) + SIGMA3(W(i + 1));
 8024ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024ca8:	f003 030f 	and.w	r3, r3, #15
 8024cac:	009b      	lsls	r3, r3, #2
 8024cae:	693a      	ldr	r2, [r7, #16]
 8024cb0:	4413      	add	r3, r2
 8024cb2:	6819      	ldr	r1, [r3, #0]
 8024cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024cb6:	330e      	adds	r3, #14
 8024cb8:	f003 030f 	and.w	r3, r3, #15
 8024cbc:	009b      	lsls	r3, r3, #2
 8024cbe:	693a      	ldr	r2, [r7, #16]
 8024cc0:	4413      	add	r3, r2
 8024cc2:	681b      	ldr	r3, [r3, #0]
 8024cc4:	ea4f 4273 	mov.w	r2, r3, ror #17
 8024cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024cca:	330e      	adds	r3, #14
 8024ccc:	f003 030f 	and.w	r3, r3, #15
 8024cd0:	009b      	lsls	r3, r3, #2
 8024cd2:	6938      	ldr	r0, [r7, #16]
 8024cd4:	4403      	add	r3, r0
 8024cd6:	681b      	ldr	r3, [r3, #0]
 8024cd8:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8024cdc:	405a      	eors	r2, r3
 8024cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024ce0:	330e      	adds	r3, #14
 8024ce2:	f003 030f 	and.w	r3, r3, #15
 8024ce6:	009b      	lsls	r3, r3, #2
 8024ce8:	6938      	ldr	r0, [r7, #16]
 8024cea:	4403      	add	r3, r0
 8024cec:	681b      	ldr	r3, [r3, #0]
 8024cee:	0a9b      	lsrs	r3, r3, #10
 8024cf0:	405a      	eors	r2, r3
 8024cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024cf4:	3309      	adds	r3, #9
 8024cf6:	f003 030f 	and.w	r3, r3, #15
 8024cfa:	009b      	lsls	r3, r3, #2
 8024cfc:	6938      	ldr	r0, [r7, #16]
 8024cfe:	4403      	add	r3, r0
 8024d00:	681b      	ldr	r3, [r3, #0]
 8024d02:	441a      	add	r2, r3
 8024d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024d06:	3301      	adds	r3, #1
 8024d08:	f003 030f 	and.w	r3, r3, #15
 8024d0c:	009b      	lsls	r3, r3, #2
 8024d0e:	6938      	ldr	r0, [r7, #16]
 8024d10:	4403      	add	r3, r0
 8024d12:	681b      	ldr	r3, [r3, #0]
 8024d14:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8024d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024d1a:	3301      	adds	r3, #1
 8024d1c:	f003 030f 	and.w	r3, r3, #15
 8024d20:	009b      	lsls	r3, r3, #2
 8024d22:	693c      	ldr	r4, [r7, #16]
 8024d24:	4423      	add	r3, r4
 8024d26:	681b      	ldr	r3, [r3, #0]
 8024d28:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8024d2c:	4058      	eors	r0, r3
 8024d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024d30:	3301      	adds	r3, #1
 8024d32:	f003 030f 	and.w	r3, r3, #15
 8024d36:	009b      	lsls	r3, r3, #2
 8024d38:	693c      	ldr	r4, [r7, #16]
 8024d3a:	4423      	add	r3, r4
 8024d3c:	681b      	ldr	r3, [r3, #0]
 8024d3e:	08db      	lsrs	r3, r3, #3
 8024d40:	4043      	eors	r3, r0
 8024d42:	441a      	add	r2, r3
 8024d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024d46:	f003 030f 	and.w	r3, r3, #15
 8024d4a:	009b      	lsls	r3, r3, #2
 8024d4c:	6938      	ldr	r0, [r7, #16]
 8024d4e:	4403      	add	r3, r0
 8024d50:	440a      	add	r2, r1
 8024d52:	601a      	str	r2, [r3, #0]
      }

      //Calculate T1 and T2
      temp1 = h + SIGMA2(e) + CH(e, f, g) + k[i] + W(i);
 8024d54:	6a3b      	ldr	r3, [r7, #32]
 8024d56:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8024d5a:	6a3b      	ldr	r3, [r7, #32]
 8024d5c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8024d60:	405a      	eors	r2, r3
 8024d62:	6a3b      	ldr	r3, [r7, #32]
 8024d64:	ea4f 6373 	mov.w	r3, r3, ror #25
 8024d68:	405a      	eors	r2, r3
 8024d6a:	697b      	ldr	r3, [r7, #20]
 8024d6c:	441a      	add	r2, r3
 8024d6e:	6a39      	ldr	r1, [r7, #32]
 8024d70:	69fb      	ldr	r3, [r7, #28]
 8024d72:	4019      	ands	r1, r3
 8024d74:	6a3b      	ldr	r3, [r7, #32]
 8024d76:	43d8      	mvns	r0, r3
 8024d78:	69bb      	ldr	r3, [r7, #24]
 8024d7a:	4003      	ands	r3, r0
 8024d7c:	430b      	orrs	r3, r1
 8024d7e:	441a      	add	r2, r3
 8024d80:	4939      	ldr	r1, [pc, #228]	@ (8024e68 <sha256ProcessBlock+0x274>)
 8024d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024d84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8024d88:	441a      	add	r2, r3
 8024d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024d8c:	f003 030f 	and.w	r3, r3, #15
 8024d90:	009b      	lsls	r3, r3, #2
 8024d92:	6939      	ldr	r1, [r7, #16]
 8024d94:	440b      	add	r3, r1
 8024d96:	681b      	ldr	r3, [r3, #0]
 8024d98:	4413      	add	r3, r2
 8024d9a:	60fb      	str	r3, [r7, #12]
      temp2 = SIGMA1(a) + MAJ(a, b, c);
 8024d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024d9e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8024da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024da4:	ea4f 3373 	mov.w	r3, r3, ror #13
 8024da8:	405a      	eors	r2, r3
 8024daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024dac:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8024db0:	405a      	eors	r2, r3
 8024db2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8024db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024db6:	4319      	orrs	r1, r3
 8024db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024dba:	4019      	ands	r1, r3
 8024dbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8024dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024dc0:	4003      	ands	r3, r0
 8024dc2:	430b      	orrs	r3, r1
 8024dc4:	4413      	add	r3, r2
 8024dc6:	60bb      	str	r3, [r7, #8]

      //Update working registers
      h = g;
 8024dc8:	69bb      	ldr	r3, [r7, #24]
 8024dca:	617b      	str	r3, [r7, #20]
      g = f;
 8024dcc:	69fb      	ldr	r3, [r7, #28]
 8024dce:	61bb      	str	r3, [r7, #24]
      f = e;
 8024dd0:	6a3b      	ldr	r3, [r7, #32]
 8024dd2:	61fb      	str	r3, [r7, #28]
      e = d + temp1;
 8024dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024dd6:	68fb      	ldr	r3, [r7, #12]
 8024dd8:	4413      	add	r3, r2
 8024dda:	623b      	str	r3, [r7, #32]
      d = c;
 8024ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024dde:	627b      	str	r3, [r7, #36]	@ 0x24
      c = b;
 8024de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024de2:	62bb      	str	r3, [r7, #40]	@ 0x28
      b = a;
 8024de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      a = temp1 + temp2;
 8024de8:	68fa      	ldr	r2, [r7, #12]
 8024dea:	68bb      	ldr	r3, [r7, #8]
 8024dec:	4413      	add	r3, r2
 8024dee:	633b      	str	r3, [r7, #48]	@ 0x30
   for(i = 0; i < 64; i++)
 8024df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024df2:	3301      	adds	r3, #1
 8024df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8024df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024df8:	2b3f      	cmp	r3, #63	@ 0x3f
 8024dfa:	f67f af51 	bls.w	8024ca0 <sha256ProcessBlock+0xac>
   }

   //Update the hash value
   context->h[0] += a;
 8024dfe:	687b      	ldr	r3, [r7, #4]
 8024e00:	681a      	ldr	r2, [r3, #0]
 8024e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024e04:	441a      	add	r2, r3
 8024e06:	687b      	ldr	r3, [r7, #4]
 8024e08:	601a      	str	r2, [r3, #0]
   context->h[1] += b;
 8024e0a:	687b      	ldr	r3, [r7, #4]
 8024e0c:	685a      	ldr	r2, [r3, #4]
 8024e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024e10:	441a      	add	r2, r3
 8024e12:	687b      	ldr	r3, [r7, #4]
 8024e14:	605a      	str	r2, [r3, #4]
   context->h[2] += c;
 8024e16:	687b      	ldr	r3, [r7, #4]
 8024e18:	689a      	ldr	r2, [r3, #8]
 8024e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024e1c:	441a      	add	r2, r3
 8024e1e:	687b      	ldr	r3, [r7, #4]
 8024e20:	609a      	str	r2, [r3, #8]
   context->h[3] += d;
 8024e22:	687b      	ldr	r3, [r7, #4]
 8024e24:	68da      	ldr	r2, [r3, #12]
 8024e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024e28:	441a      	add	r2, r3
 8024e2a:	687b      	ldr	r3, [r7, #4]
 8024e2c:	60da      	str	r2, [r3, #12]
   context->h[4] += e;
 8024e2e:	687b      	ldr	r3, [r7, #4]
 8024e30:	691a      	ldr	r2, [r3, #16]
 8024e32:	6a3b      	ldr	r3, [r7, #32]
 8024e34:	441a      	add	r2, r3
 8024e36:	687b      	ldr	r3, [r7, #4]
 8024e38:	611a      	str	r2, [r3, #16]
   context->h[5] += f;
 8024e3a:	687b      	ldr	r3, [r7, #4]
 8024e3c:	695a      	ldr	r2, [r3, #20]
 8024e3e:	69fb      	ldr	r3, [r7, #28]
 8024e40:	441a      	add	r2, r3
 8024e42:	687b      	ldr	r3, [r7, #4]
 8024e44:	615a      	str	r2, [r3, #20]
   context->h[6] += g;
 8024e46:	687b      	ldr	r3, [r7, #4]
 8024e48:	699a      	ldr	r2, [r3, #24]
 8024e4a:	69bb      	ldr	r3, [r7, #24]
 8024e4c:	441a      	add	r2, r3
 8024e4e:	687b      	ldr	r3, [r7, #4]
 8024e50:	619a      	str	r2, [r3, #24]
   context->h[7] += h;
 8024e52:	687b      	ldr	r3, [r7, #4]
 8024e54:	69da      	ldr	r2, [r3, #28]
 8024e56:	697b      	ldr	r3, [r7, #20]
 8024e58:	441a      	add	r2, r3
 8024e5a:	687b      	ldr	r3, [r7, #4]
 8024e5c:	61da      	str	r2, [r3, #28]
}
 8024e5e:	bf00      	nop
 8024e60:	3738      	adds	r7, #56	@ 0x38
 8024e62:	46bd      	mov	sp, r7
 8024e64:	bc90      	pop	{r4, r7}
 8024e66:	4770      	bx	lr
 8024e68:	0802e274 	.word	0x0802e274

08024e6c <mpiInit>:
 * @brief Initialize a multiple precision integer
 * @param[in,out] r Pointer to the multiple precision integer to be initialized
 **/

void mpiInit(Mpi *r)
{
 8024e6c:	b480      	push	{r7}
 8024e6e:	b083      	sub	sp, #12
 8024e70:	af00      	add	r7, sp, #0
 8024e72:	6078      	str	r0, [r7, #4]
   //Initialize structure
   r->sign = 1;
 8024e74:	687b      	ldr	r3, [r7, #4]
 8024e76:	2201      	movs	r2, #1
 8024e78:	601a      	str	r2, [r3, #0]
   r->size = 0;
 8024e7a:	687b      	ldr	r3, [r7, #4]
 8024e7c:	2200      	movs	r2, #0
 8024e7e:	605a      	str	r2, [r3, #4]
#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   r->data = NULL;
 8024e80:	687b      	ldr	r3, [r7, #4]
 8024e82:	2200      	movs	r2, #0
 8024e84:	609a      	str	r2, [r3, #8]
#endif
}
 8024e86:	bf00      	nop
 8024e88:	370c      	adds	r7, #12
 8024e8a:	46bd      	mov	sp, r7
 8024e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e90:	4770      	bx	lr

08024e92 <mpiFree>:
 * @brief Release a multiple precision integer
 * @param[in,out] r Pointer to the multiple precision integer to be freed
 **/

void mpiFree(Mpi *r)
{
 8024e92:	b580      	push	{r7, lr}
 8024e94:	b084      	sub	sp, #16
 8024e96:	af00      	add	r7, sp, #0
 8024e98:	6078      	str	r0, [r7, #4]
   uint_t i;

#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   //Any memory previously allocated?
   if(r->data != NULL)
 8024e9a:	687b      	ldr	r3, [r7, #4]
 8024e9c:	689b      	ldr	r3, [r3, #8]
 8024e9e:	2b00      	cmp	r3, #0
 8024ea0:	d019      	beq.n	8024ed6 <mpiFree+0x44>
   {
      //Erase contents
      for(i = 0; i < r->size; i++)
 8024ea2:	2300      	movs	r3, #0
 8024ea4:	60fb      	str	r3, [r7, #12]
 8024ea6:	e009      	b.n	8024ebc <mpiFree+0x2a>
      {
         r->data[i] = 0;
 8024ea8:	687b      	ldr	r3, [r7, #4]
 8024eaa:	689a      	ldr	r2, [r3, #8]
 8024eac:	68fb      	ldr	r3, [r7, #12]
 8024eae:	009b      	lsls	r3, r3, #2
 8024eb0:	4413      	add	r3, r2
 8024eb2:	2200      	movs	r2, #0
 8024eb4:	601a      	str	r2, [r3, #0]
      for(i = 0; i < r->size; i++)
 8024eb6:	68fb      	ldr	r3, [r7, #12]
 8024eb8:	3301      	adds	r3, #1
 8024eba:	60fb      	str	r3, [r7, #12]
 8024ebc:	687b      	ldr	r3, [r7, #4]
 8024ebe:	685b      	ldr	r3, [r3, #4]
 8024ec0:	68fa      	ldr	r2, [r7, #12]
 8024ec2:	429a      	cmp	r2, r3
 8024ec4:	d3f0      	bcc.n	8024ea8 <mpiFree+0x16>
      }

      //Release memory buffer
      cryptoFreeMem(r->data);
 8024ec6:	687b      	ldr	r3, [r7, #4]
 8024ec8:	689b      	ldr	r3, [r3, #8]
 8024eca:	4618      	mov	r0, r3
 8024ecc:	f7fb fd95 	bl	80209fa <osFreeMem>
      r->data = NULL;
 8024ed0:	687b      	ldr	r3, [r7, #4]
 8024ed2:	2200      	movs	r2, #0
 8024ed4:	609a      	str	r2, [r3, #8]
      r->data[i] = 0;
   }
#endif

   //Reset size to zero
   r->size = 0;
 8024ed6:	687b      	ldr	r3, [r7, #4]
 8024ed8:	2200      	movs	r2, #0
 8024eda:	605a      	str	r2, [r3, #4]
}
 8024edc:	bf00      	nop
 8024ede:	3710      	adds	r7, #16
 8024ee0:	46bd      	mov	sp, r7
 8024ee2:	bd80      	pop	{r7, pc}

08024ee4 <mpiGrow>:
 * @param[in] size Desired size in words
 * @return Error code
 **/

error_t mpiGrow(Mpi *r, uint_t size)
{
 8024ee4:	b580      	push	{r7, lr}
 8024ee6:	b086      	sub	sp, #24
 8024ee8:	af00      	add	r7, sp, #0
 8024eea:	6078      	str	r0, [r7, #4]
 8024eec:	6039      	str	r1, [r7, #0]
#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   uint_t *data;
#endif

   //Initialize status code
   error = NO_ERROR;
 8024eee:	2300      	movs	r3, #0
 8024ef0:	82fb      	strh	r3, [r7, #22]

   //Ensure the parameter is valid
   size = MAX(size, 1);
 8024ef2:	683b      	ldr	r3, [r7, #0]
 8024ef4:	2b01      	cmp	r3, #1
 8024ef6:	bf38      	it	cc
 8024ef8:	2301      	movcc	r3, #1
 8024efa:	603b      	str	r3, [r7, #0]

   //Check whether the size of the multiple precision integer must be increased
   if(size > r->size)
 8024efc:	687b      	ldr	r3, [r7, #4]
 8024efe:	685b      	ldr	r3, [r3, #4]
 8024f00:	683a      	ldr	r2, [r7, #0]
 8024f02:	429a      	cmp	r2, r3
 8024f04:	d948      	bls.n	8024f98 <mpiGrow+0xb4>
   {
#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
      //Allocate a new memory buffer
      data = cryptoAllocMem(size * sizeof(uint_t));
 8024f06:	683b      	ldr	r3, [r7, #0]
 8024f08:	009b      	lsls	r3, r3, #2
 8024f0a:	4618      	mov	r0, r3
 8024f0c:	f7fb fd67 	bl	80209de <osAllocMem>
 8024f10:	60f8      	str	r0, [r7, #12]

      //Successful memory allocation?
      if(data != NULL)
 8024f12:	68fb      	ldr	r3, [r7, #12]
 8024f14:	2b00      	cmp	r3, #0
 8024f16:	d03d      	beq.n	8024f94 <mpiGrow+0xb0>
      {
         //Any data to copy?
         if(r->size > 0)
 8024f18:	687b      	ldr	r3, [r7, #4]
 8024f1a:	685b      	ldr	r3, [r3, #4]
 8024f1c:	2b00      	cmp	r3, #0
 8024f1e:	d021      	beq.n	8024f64 <mpiGrow+0x80>
         {
            //Copy original data
            for(i = 0; i < r->size; i++)
 8024f20:	2300      	movs	r3, #0
 8024f22:	613b      	str	r3, [r7, #16]
 8024f24:	e014      	b.n	8024f50 <mpiGrow+0x6c>
            {
               data[i] = r->data[i];
 8024f26:	687b      	ldr	r3, [r7, #4]
 8024f28:	689a      	ldr	r2, [r3, #8]
 8024f2a:	693b      	ldr	r3, [r7, #16]
 8024f2c:	009b      	lsls	r3, r3, #2
 8024f2e:	441a      	add	r2, r3
 8024f30:	693b      	ldr	r3, [r7, #16]
 8024f32:	009b      	lsls	r3, r3, #2
 8024f34:	68f9      	ldr	r1, [r7, #12]
 8024f36:	440b      	add	r3, r1
 8024f38:	6812      	ldr	r2, [r2, #0]
 8024f3a:	601a      	str	r2, [r3, #0]
               r->data[i] = 0;
 8024f3c:	687b      	ldr	r3, [r7, #4]
 8024f3e:	689a      	ldr	r2, [r3, #8]
 8024f40:	693b      	ldr	r3, [r7, #16]
 8024f42:	009b      	lsls	r3, r3, #2
 8024f44:	4413      	add	r3, r2
 8024f46:	2200      	movs	r2, #0
 8024f48:	601a      	str	r2, [r3, #0]
            for(i = 0; i < r->size; i++)
 8024f4a:	693b      	ldr	r3, [r7, #16]
 8024f4c:	3301      	adds	r3, #1
 8024f4e:	613b      	str	r3, [r7, #16]
 8024f50:	687b      	ldr	r3, [r7, #4]
 8024f52:	685b      	ldr	r3, [r3, #4]
 8024f54:	693a      	ldr	r2, [r7, #16]
 8024f56:	429a      	cmp	r2, r3
 8024f58:	d3e5      	bcc.n	8024f26 <mpiGrow+0x42>
            }

            //Release old memory buffer
            cryptoFreeMem(r->data);
 8024f5a:	687b      	ldr	r3, [r7, #4]
 8024f5c:	689b      	ldr	r3, [r3, #8]
 8024f5e:	4618      	mov	r0, r3
 8024f60:	f7fb fd4b 	bl	80209fa <osFreeMem>
         }

         //Clear upper words
         for(i = r->size; i < size; i++)
 8024f64:	687b      	ldr	r3, [r7, #4]
 8024f66:	685b      	ldr	r3, [r3, #4]
 8024f68:	613b      	str	r3, [r7, #16]
 8024f6a:	e008      	b.n	8024f7e <mpiGrow+0x9a>
         {
            data[i] = 0;
 8024f6c:	693b      	ldr	r3, [r7, #16]
 8024f6e:	009b      	lsls	r3, r3, #2
 8024f70:	68fa      	ldr	r2, [r7, #12]
 8024f72:	4413      	add	r3, r2
 8024f74:	2200      	movs	r2, #0
 8024f76:	601a      	str	r2, [r3, #0]
         for(i = r->size; i < size; i++)
 8024f78:	693b      	ldr	r3, [r7, #16]
 8024f7a:	3301      	adds	r3, #1
 8024f7c:	613b      	str	r3, [r7, #16]
 8024f7e:	693a      	ldr	r2, [r7, #16]
 8024f80:	683b      	ldr	r3, [r7, #0]
 8024f82:	429a      	cmp	r2, r3
 8024f84:	d3f2      	bcc.n	8024f6c <mpiGrow+0x88>
         }

         //Attach new memory buffer
         r->data = data;
 8024f86:	687b      	ldr	r3, [r7, #4]
 8024f88:	68fa      	ldr	r2, [r7, #12]
 8024f8a:	609a      	str	r2, [r3, #8]
         //Update the size of the multiple precision integer
         r->size = size;
 8024f8c:	687b      	ldr	r3, [r7, #4]
 8024f8e:	683a      	ldr	r2, [r7, #0]
 8024f90:	605a      	str	r2, [r3, #4]
 8024f92:	e001      	b.n	8024f98 <mpiGrow+0xb4>
      }
      else
      {
         //Failed to allocate memory
         error = ERROR_OUT_OF_MEMORY;
 8024f94:	2364      	movs	r3, #100	@ 0x64
 8024f96:	82fb      	strh	r3, [r7, #22]
      }
#endif
   }

   //Return status code
   return error;
 8024f98:	8afb      	ldrh	r3, [r7, #22]
}
 8024f9a:	4618      	mov	r0, r3
 8024f9c:	3718      	adds	r7, #24
 8024f9e:	46bd      	mov	sp, r7
 8024fa0:	bd80      	pop	{r7, pc}

08024fa2 <mpiGetLength>:
 * @param[in] a Pointer to a multiple precision integer
 * @return The actual length in words
 **/

uint_t mpiGetLength(const Mpi *a)
{
 8024fa2:	b480      	push	{r7}
 8024fa4:	b085      	sub	sp, #20
 8024fa6:	af00      	add	r7, sp, #0
 8024fa8:	6078      	str	r0, [r7, #4]
   int_t i;

   //Check whether the specified multiple precision integer is empty
   if(a->size == 0)
 8024faa:	687b      	ldr	r3, [r7, #4]
 8024fac:	685b      	ldr	r3, [r3, #4]
 8024fae:	2b00      	cmp	r3, #0
 8024fb0:	d101      	bne.n	8024fb6 <mpiGetLength+0x14>
      return 0;
 8024fb2:	2300      	movs	r3, #0
 8024fb4:	e016      	b.n	8024fe4 <mpiGetLength+0x42>

   //Start from the most significant word
   for(i = a->size - 1; i >= 0; i--)
 8024fb6:	687b      	ldr	r3, [r7, #4]
 8024fb8:	685b      	ldr	r3, [r3, #4]
 8024fba:	3b01      	subs	r3, #1
 8024fbc:	60fb      	str	r3, [r7, #12]
 8024fbe:	e00a      	b.n	8024fd6 <mpiGetLength+0x34>
   {
      //Loop as long as the current word is zero
      if(a->data[i] != 0)
 8024fc0:	687b      	ldr	r3, [r7, #4]
 8024fc2:	689a      	ldr	r2, [r3, #8]
 8024fc4:	68fb      	ldr	r3, [r7, #12]
 8024fc6:	009b      	lsls	r3, r3, #2
 8024fc8:	4413      	add	r3, r2
 8024fca:	681b      	ldr	r3, [r3, #0]
 8024fcc:	2b00      	cmp	r3, #0
 8024fce:	d106      	bne.n	8024fde <mpiGetLength+0x3c>
   for(i = a->size - 1; i >= 0; i--)
 8024fd0:	68fb      	ldr	r3, [r7, #12]
 8024fd2:	3b01      	subs	r3, #1
 8024fd4:	60fb      	str	r3, [r7, #12]
 8024fd6:	68fb      	ldr	r3, [r7, #12]
 8024fd8:	2b00      	cmp	r3, #0
 8024fda:	daf1      	bge.n	8024fc0 <mpiGetLength+0x1e>
 8024fdc:	e000      	b.n	8024fe0 <mpiGetLength+0x3e>
         break;
 8024fde:	bf00      	nop
   }

   //Return the actual length
   return i + 1;
 8024fe0:	68fb      	ldr	r3, [r7, #12]
 8024fe2:	3301      	adds	r3, #1
}
 8024fe4:	4618      	mov	r0, r3
 8024fe6:	3714      	adds	r7, #20
 8024fe8:	46bd      	mov	sp, r7
 8024fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024fee:	4770      	bx	lr

08024ff0 <mpiGetByteLength>:
 * @param[in] a Pointer to a multiple precision integer
 * @return The actual byte count
 **/

uint_t mpiGetByteLength(const Mpi *a)
{
 8024ff0:	b480      	push	{r7}
 8024ff2:	b085      	sub	sp, #20
 8024ff4:	af00      	add	r7, sp, #0
 8024ff6:	6078      	str	r0, [r7, #4]
   uint_t n;
   uint32_t m;

   //Check whether the specified multiple precision integer is empty
   if(a->size == 0)
 8024ff8:	687b      	ldr	r3, [r7, #4]
 8024ffa:	685b      	ldr	r3, [r3, #4]
 8024ffc:	2b00      	cmp	r3, #0
 8024ffe:	d101      	bne.n	8025004 <mpiGetByteLength+0x14>
      return 0;
 8025000:	2300      	movs	r3, #0
 8025002:	e029      	b.n	8025058 <mpiGetByteLength+0x68>

   //Start from the most significant word
   for(n = a->size - 1; n > 0; n--)
 8025004:	687b      	ldr	r3, [r7, #4]
 8025006:	685b      	ldr	r3, [r3, #4]
 8025008:	3b01      	subs	r3, #1
 802500a:	60fb      	str	r3, [r7, #12]
 802500c:	e00a      	b.n	8025024 <mpiGetByteLength+0x34>
   {
      //Loop as long as the current word is zero
      if(a->data[n] != 0)
 802500e:	687b      	ldr	r3, [r7, #4]
 8025010:	689a      	ldr	r2, [r3, #8]
 8025012:	68fb      	ldr	r3, [r7, #12]
 8025014:	009b      	lsls	r3, r3, #2
 8025016:	4413      	add	r3, r2
 8025018:	681b      	ldr	r3, [r3, #0]
 802501a:	2b00      	cmp	r3, #0
 802501c:	d106      	bne.n	802502c <mpiGetByteLength+0x3c>
   for(n = a->size - 1; n > 0; n--)
 802501e:	68fb      	ldr	r3, [r7, #12]
 8025020:	3b01      	subs	r3, #1
 8025022:	60fb      	str	r3, [r7, #12]
 8025024:	68fb      	ldr	r3, [r7, #12]
 8025026:	2b00      	cmp	r3, #0
 8025028:	d1f1      	bne.n	802500e <mpiGetByteLength+0x1e>
 802502a:	e000      	b.n	802502e <mpiGetByteLength+0x3e>
         break;
 802502c:	bf00      	nop
   }

   //Get the current word
   m = a->data[n];
 802502e:	687b      	ldr	r3, [r7, #4]
 8025030:	689a      	ldr	r2, [r3, #8]
 8025032:	68fb      	ldr	r3, [r7, #12]
 8025034:	009b      	lsls	r3, r3, #2
 8025036:	4413      	add	r3, r2
 8025038:	681b      	ldr	r3, [r3, #0]
 802503a:	60bb      	str	r3, [r7, #8]
   //Convert the length to a byte count
   n *= MPI_INT_SIZE;
 802503c:	68fb      	ldr	r3, [r7, #12]
 802503e:	009b      	lsls	r3, r3, #2
 8025040:	60fb      	str	r3, [r7, #12]

   //Adjust the byte count
   for(; m != 0; m >>= 8)
 8025042:	e005      	b.n	8025050 <mpiGetByteLength+0x60>
   {
      n++;
 8025044:	68fb      	ldr	r3, [r7, #12]
 8025046:	3301      	adds	r3, #1
 8025048:	60fb      	str	r3, [r7, #12]
   for(; m != 0; m >>= 8)
 802504a:	68bb      	ldr	r3, [r7, #8]
 802504c:	0a1b      	lsrs	r3, r3, #8
 802504e:	60bb      	str	r3, [r7, #8]
 8025050:	68bb      	ldr	r3, [r7, #8]
 8025052:	2b00      	cmp	r3, #0
 8025054:	d1f6      	bne.n	8025044 <mpiGetByteLength+0x54>
   }

   //Return the actual length in bytes
   return n;
 8025056:	68fb      	ldr	r3, [r7, #12]
}
 8025058:	4618      	mov	r0, r3
 802505a:	3714      	adds	r7, #20
 802505c:	46bd      	mov	sp, r7
 802505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025062:	4770      	bx	lr

08025064 <mpiGetBitLength>:
 * @param[in] a Pointer to a multiple precision integer
 * @return The actual bit count
 **/

uint_t mpiGetBitLength(const Mpi *a)
{
 8025064:	b480      	push	{r7}
 8025066:	b085      	sub	sp, #20
 8025068:	af00      	add	r7, sp, #0
 802506a:	6078      	str	r0, [r7, #4]
   uint_t n;
   uint32_t m;

   //Check whether the specified multiple precision integer is empty
   if(a->size == 0)
 802506c:	687b      	ldr	r3, [r7, #4]
 802506e:	685b      	ldr	r3, [r3, #4]
 8025070:	2b00      	cmp	r3, #0
 8025072:	d101      	bne.n	8025078 <mpiGetBitLength+0x14>
      return 0;
 8025074:	2300      	movs	r3, #0
 8025076:	e029      	b.n	80250cc <mpiGetBitLength+0x68>

   //Start from the most significant word
   for(n = a->size - 1; n > 0; n--)
 8025078:	687b      	ldr	r3, [r7, #4]
 802507a:	685b      	ldr	r3, [r3, #4]
 802507c:	3b01      	subs	r3, #1
 802507e:	60fb      	str	r3, [r7, #12]
 8025080:	e00a      	b.n	8025098 <mpiGetBitLength+0x34>
   {
      //Loop as long as the current word is zero
      if(a->data[n] != 0)
 8025082:	687b      	ldr	r3, [r7, #4]
 8025084:	689a      	ldr	r2, [r3, #8]
 8025086:	68fb      	ldr	r3, [r7, #12]
 8025088:	009b      	lsls	r3, r3, #2
 802508a:	4413      	add	r3, r2
 802508c:	681b      	ldr	r3, [r3, #0]
 802508e:	2b00      	cmp	r3, #0
 8025090:	d106      	bne.n	80250a0 <mpiGetBitLength+0x3c>
   for(n = a->size - 1; n > 0; n--)
 8025092:	68fb      	ldr	r3, [r7, #12]
 8025094:	3b01      	subs	r3, #1
 8025096:	60fb      	str	r3, [r7, #12]
 8025098:	68fb      	ldr	r3, [r7, #12]
 802509a:	2b00      	cmp	r3, #0
 802509c:	d1f1      	bne.n	8025082 <mpiGetBitLength+0x1e>
 802509e:	e000      	b.n	80250a2 <mpiGetBitLength+0x3e>
         break;
 80250a0:	bf00      	nop
   }

   //Get the current word
   m = a->data[n];
 80250a2:	687b      	ldr	r3, [r7, #4]
 80250a4:	689a      	ldr	r2, [r3, #8]
 80250a6:	68fb      	ldr	r3, [r7, #12]
 80250a8:	009b      	lsls	r3, r3, #2
 80250aa:	4413      	add	r3, r2
 80250ac:	681b      	ldr	r3, [r3, #0]
 80250ae:	60bb      	str	r3, [r7, #8]
   //Convert the length to a bit count
   n *= MPI_INT_SIZE * 8;
 80250b0:	68fb      	ldr	r3, [r7, #12]
 80250b2:	015b      	lsls	r3, r3, #5
 80250b4:	60fb      	str	r3, [r7, #12]

   //Adjust the bit count
   for(; m != 0; m >>= 1)
 80250b6:	e005      	b.n	80250c4 <mpiGetBitLength+0x60>
   {
      n++;
 80250b8:	68fb      	ldr	r3, [r7, #12]
 80250ba:	3301      	adds	r3, #1
 80250bc:	60fb      	str	r3, [r7, #12]
   for(; m != 0; m >>= 1)
 80250be:	68bb      	ldr	r3, [r7, #8]
 80250c0:	085b      	lsrs	r3, r3, #1
 80250c2:	60bb      	str	r3, [r7, #8]
 80250c4:	68bb      	ldr	r3, [r7, #8]
 80250c6:	2b00      	cmp	r3, #0
 80250c8:	d1f6      	bne.n	80250b8 <mpiGetBitLength+0x54>
   }

   //Return the actual length in bits
   return n;
 80250ca:	68fb      	ldr	r3, [r7, #12]
}
 80250cc:	4618      	mov	r0, r3
 80250ce:	3714      	adds	r7, #20
 80250d0:	46bd      	mov	sp, r7
 80250d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250d6:	4770      	bx	lr

080250d8 <mpiGetBitValue>:
 * @param[in] index Position where to read the bit
 * @return The actual bit value
 **/

uint_t mpiGetBitValue(const Mpi *a, uint_t index)
{
 80250d8:	b480      	push	{r7}
 80250da:	b085      	sub	sp, #20
 80250dc:	af00      	add	r7, sp, #0
 80250de:	6078      	str	r0, [r7, #4]
 80250e0:	6039      	str	r1, [r7, #0]
   uint_t n1;
   uint_t n2;

   //Retrieve the position of the bit to be read
   n1 = index / (MPI_INT_SIZE * 8);
 80250e2:	683b      	ldr	r3, [r7, #0]
 80250e4:	095b      	lsrs	r3, r3, #5
 80250e6:	60fb      	str	r3, [r7, #12]
   n2 = index % (MPI_INT_SIZE * 8);
 80250e8:	683b      	ldr	r3, [r7, #0]
 80250ea:	f003 031f 	and.w	r3, r3, #31
 80250ee:	60bb      	str	r3, [r7, #8]

   //Index out of range?
   if(n1 >= a->size)
 80250f0:	687b      	ldr	r3, [r7, #4]
 80250f2:	685b      	ldr	r3, [r3, #4]
 80250f4:	68fa      	ldr	r2, [r7, #12]
 80250f6:	429a      	cmp	r2, r3
 80250f8:	d301      	bcc.n	80250fe <mpiGetBitValue+0x26>
      return 0;
 80250fa:	2300      	movs	r3, #0
 80250fc:	e00a      	b.n	8025114 <mpiGetBitValue+0x3c>

   //Return the actual bit value
   return (a->data[n1] >> n2) & 0x01;
 80250fe:	687b      	ldr	r3, [r7, #4]
 8025100:	689a      	ldr	r2, [r3, #8]
 8025102:	68fb      	ldr	r3, [r7, #12]
 8025104:	009b      	lsls	r3, r3, #2
 8025106:	4413      	add	r3, r2
 8025108:	681a      	ldr	r2, [r3, #0]
 802510a:	68bb      	ldr	r3, [r7, #8]
 802510c:	fa22 f303 	lsr.w	r3, r2, r3
 8025110:	f003 0301 	and.w	r3, r3, #1
}
 8025114:	4618      	mov	r0, r3
 8025116:	3714      	adds	r7, #20
 8025118:	46bd      	mov	sp, r7
 802511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802511e:	4770      	bx	lr

08025120 <mpiComp>:
 * @param[in] b The second multiple precision integer to be compared
 * @return Comparison result
 **/

int_t mpiComp(const Mpi *a, const Mpi *b)
{
 8025120:	b580      	push	{r7, lr}
 8025122:	b084      	sub	sp, #16
 8025124:	af00      	add	r7, sp, #0
 8025126:	6078      	str	r0, [r7, #4]
 8025128:	6039      	str	r1, [r7, #0]
   uint_t m;
   uint_t n;

   //Determine the actual length of A and B
   m = mpiGetLength(a);
 802512a:	6878      	ldr	r0, [r7, #4]
 802512c:	f7ff ff39 	bl	8024fa2 <mpiGetLength>
 8025130:	60b8      	str	r0, [r7, #8]
   n = mpiGetLength(b);
 8025132:	6838      	ldr	r0, [r7, #0]
 8025134:	f7ff ff35 	bl	8024fa2 <mpiGetLength>
 8025138:	60f8      	str	r0, [r7, #12]

   //Compare lengths
   if(!m && !n)
 802513a:	68bb      	ldr	r3, [r7, #8]
 802513c:	2b00      	cmp	r3, #0
 802513e:	d104      	bne.n	802514a <mpiComp+0x2a>
 8025140:	68fb      	ldr	r3, [r7, #12]
 8025142:	2b00      	cmp	r3, #0
 8025144:	d101      	bne.n	802514a <mpiComp+0x2a>
      return 0;
 8025146:	2300      	movs	r3, #0
 8025148:	e04c      	b.n	80251e4 <mpiComp+0xc4>
   else if(m > n)
 802514a:	68ba      	ldr	r2, [r7, #8]
 802514c:	68fb      	ldr	r3, [r7, #12]
 802514e:	429a      	cmp	r2, r3
 8025150:	d902      	bls.n	8025158 <mpiComp+0x38>
      return a->sign;
 8025152:	687b      	ldr	r3, [r7, #4]
 8025154:	681b      	ldr	r3, [r3, #0]
 8025156:	e045      	b.n	80251e4 <mpiComp+0xc4>
   else if(m < n)
 8025158:	68ba      	ldr	r2, [r7, #8]
 802515a:	68fb      	ldr	r3, [r7, #12]
 802515c:	429a      	cmp	r2, r3
 802515e:	d203      	bcs.n	8025168 <mpiComp+0x48>
      return -b->sign;
 8025160:	683b      	ldr	r3, [r7, #0]
 8025162:	681b      	ldr	r3, [r3, #0]
 8025164:	425b      	negs	r3, r3
 8025166:	e03d      	b.n	80251e4 <mpiComp+0xc4>

   //Compare signs
   if(a->sign > 0 && b->sign < 0)
 8025168:	687b      	ldr	r3, [r7, #4]
 802516a:	681b      	ldr	r3, [r3, #0]
 802516c:	2b00      	cmp	r3, #0
 802516e:	dd05      	ble.n	802517c <mpiComp+0x5c>
 8025170:	683b      	ldr	r3, [r7, #0]
 8025172:	681b      	ldr	r3, [r3, #0]
 8025174:	2b00      	cmp	r3, #0
 8025176:	da01      	bge.n	802517c <mpiComp+0x5c>
      return 1;
 8025178:	2301      	movs	r3, #1
 802517a:	e033      	b.n	80251e4 <mpiComp+0xc4>
   else if(a->sign < 0 && b->sign > 0)
 802517c:	687b      	ldr	r3, [r7, #4]
 802517e:	681b      	ldr	r3, [r3, #0]
 8025180:	2b00      	cmp	r3, #0
 8025182:	da29      	bge.n	80251d8 <mpiComp+0xb8>
 8025184:	683b      	ldr	r3, [r7, #0]
 8025186:	681b      	ldr	r3, [r3, #0]
 8025188:	2b00      	cmp	r3, #0
 802518a:	dd25      	ble.n	80251d8 <mpiComp+0xb8>
      return -1;
 802518c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025190:	e028      	b.n	80251e4 <mpiComp+0xc4>

   //Then compare values
   while(n--)
   {
      if(a->data[n] > b->data[n])
 8025192:	687b      	ldr	r3, [r7, #4]
 8025194:	689a      	ldr	r2, [r3, #8]
 8025196:	68fb      	ldr	r3, [r7, #12]
 8025198:	009b      	lsls	r3, r3, #2
 802519a:	4413      	add	r3, r2
 802519c:	681a      	ldr	r2, [r3, #0]
 802519e:	683b      	ldr	r3, [r7, #0]
 80251a0:	6899      	ldr	r1, [r3, #8]
 80251a2:	68fb      	ldr	r3, [r7, #12]
 80251a4:	009b      	lsls	r3, r3, #2
 80251a6:	440b      	add	r3, r1
 80251a8:	681b      	ldr	r3, [r3, #0]
 80251aa:	429a      	cmp	r2, r3
 80251ac:	d902      	bls.n	80251b4 <mpiComp+0x94>
         return a->sign;
 80251ae:	687b      	ldr	r3, [r7, #4]
 80251b0:	681b      	ldr	r3, [r3, #0]
 80251b2:	e017      	b.n	80251e4 <mpiComp+0xc4>
      else if(a->data[n] < b->data[n])
 80251b4:	687b      	ldr	r3, [r7, #4]
 80251b6:	689a      	ldr	r2, [r3, #8]
 80251b8:	68fb      	ldr	r3, [r7, #12]
 80251ba:	009b      	lsls	r3, r3, #2
 80251bc:	4413      	add	r3, r2
 80251be:	681a      	ldr	r2, [r3, #0]
 80251c0:	683b      	ldr	r3, [r7, #0]
 80251c2:	6899      	ldr	r1, [r3, #8]
 80251c4:	68fb      	ldr	r3, [r7, #12]
 80251c6:	009b      	lsls	r3, r3, #2
 80251c8:	440b      	add	r3, r1
 80251ca:	681b      	ldr	r3, [r3, #0]
 80251cc:	429a      	cmp	r2, r3
 80251ce:	d203      	bcs.n	80251d8 <mpiComp+0xb8>
         return -a->sign;
 80251d0:	687b      	ldr	r3, [r7, #4]
 80251d2:	681b      	ldr	r3, [r3, #0]
 80251d4:	425b      	negs	r3, r3
 80251d6:	e005      	b.n	80251e4 <mpiComp+0xc4>
   while(n--)
 80251d8:	68fb      	ldr	r3, [r7, #12]
 80251da:	1e5a      	subs	r2, r3, #1
 80251dc:	60fa      	str	r2, [r7, #12]
 80251de:	2b00      	cmp	r3, #0
 80251e0:	d1d7      	bne.n	8025192 <mpiComp+0x72>
   }

   //Multiple precision integers are equals
   return 0;
 80251e2:	2300      	movs	r3, #0
}
 80251e4:	4618      	mov	r0, r3
 80251e6:	3710      	adds	r7, #16
 80251e8:	46bd      	mov	sp, r7
 80251ea:	bd80      	pop	{r7, pc}

080251ec <mpiCompInt>:
 * @param[in] b Integer to be compared
 * @return Comparison result
 **/

int_t mpiCompInt(const Mpi *a, int_t b)
{
 80251ec:	b580      	push	{r7, lr}
 80251ee:	b086      	sub	sp, #24
 80251f0:	af00      	add	r7, sp, #0
 80251f2:	6078      	str	r0, [r7, #4]
 80251f4:	6039      	str	r1, [r7, #0]
   uint_t value;
   Mpi t;

   //Initialize a temporary multiple precision integer
   value = (b >= 0) ? b : -b;
 80251f6:	683b      	ldr	r3, [r7, #0]
 80251f8:	2b00      	cmp	r3, #0
 80251fa:	bfb8      	it	lt
 80251fc:	425b      	neglt	r3, r3
 80251fe:	617b      	str	r3, [r7, #20]
   t.sign = (b >= 0) ? 1 : -1;
 8025200:	683b      	ldr	r3, [r7, #0]
 8025202:	2b00      	cmp	r3, #0
 8025204:	db01      	blt.n	802520a <mpiCompInt+0x1e>
 8025206:	2301      	movs	r3, #1
 8025208:	e001      	b.n	802520e <mpiCompInt+0x22>
 802520a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802520e:	60bb      	str	r3, [r7, #8]
   t.size = 1;
 8025210:	2301      	movs	r3, #1
 8025212:	60fb      	str	r3, [r7, #12]
#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   t.data = &value;
 8025214:	f107 0314 	add.w	r3, r7, #20
 8025218:	613b      	str	r3, [r7, #16]
#else
   t.data[0] = value;
#endif

   //Return comparison result
   return mpiComp(a, &t);
 802521a:	f107 0308 	add.w	r3, r7, #8
 802521e:	4619      	mov	r1, r3
 8025220:	6878      	ldr	r0, [r7, #4]
 8025222:	f7ff ff7d 	bl	8025120 <mpiComp>
 8025226:	4603      	mov	r3, r0
}
 8025228:	4618      	mov	r0, r3
 802522a:	3718      	adds	r7, #24
 802522c:	46bd      	mov	sp, r7
 802522e:	bd80      	pop	{r7, pc}

08025230 <mpiCompAbs>:
 * @param[in] b The second multiple precision integer to be compared
 * @return Comparison result
 **/

int_t mpiCompAbs(const Mpi *a, const Mpi *b)
{
 8025230:	b580      	push	{r7, lr}
 8025232:	b084      	sub	sp, #16
 8025234:	af00      	add	r7, sp, #0
 8025236:	6078      	str	r0, [r7, #4]
 8025238:	6039      	str	r1, [r7, #0]
   uint_t m;
   uint_t n;

   //Determine the actual length of A and B
   m = mpiGetLength(a);
 802523a:	6878      	ldr	r0, [r7, #4]
 802523c:	f7ff feb1 	bl	8024fa2 <mpiGetLength>
 8025240:	60b8      	str	r0, [r7, #8]
   n = mpiGetLength(b);
 8025242:	6838      	ldr	r0, [r7, #0]
 8025244:	f7ff fead 	bl	8024fa2 <mpiGetLength>
 8025248:	60f8      	str	r0, [r7, #12]

   //Compare lengths
   if(!m && !n)
 802524a:	68bb      	ldr	r3, [r7, #8]
 802524c:	2b00      	cmp	r3, #0
 802524e:	d104      	bne.n	802525a <mpiCompAbs+0x2a>
 8025250:	68fb      	ldr	r3, [r7, #12]
 8025252:	2b00      	cmp	r3, #0
 8025254:	d101      	bne.n	802525a <mpiCompAbs+0x2a>
      return 0;
 8025256:	2300      	movs	r3, #0
 8025258:	e033      	b.n	80252c2 <mpiCompAbs+0x92>
   else if(m > n)
 802525a:	68ba      	ldr	r2, [r7, #8]
 802525c:	68fb      	ldr	r3, [r7, #12]
 802525e:	429a      	cmp	r2, r3
 8025260:	d901      	bls.n	8025266 <mpiCompAbs+0x36>
      return 1;
 8025262:	2301      	movs	r3, #1
 8025264:	e02d      	b.n	80252c2 <mpiCompAbs+0x92>
   else if(m < n)
 8025266:	68ba      	ldr	r2, [r7, #8]
 8025268:	68fb      	ldr	r3, [r7, #12]
 802526a:	429a      	cmp	r2, r3
 802526c:	d223      	bcs.n	80252b6 <mpiCompAbs+0x86>
      return -1;
 802526e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025272:	e026      	b.n	80252c2 <mpiCompAbs+0x92>

   //Then compare values
   while(n--)
   {
      if(a->data[n] > b->data[n])
 8025274:	687b      	ldr	r3, [r7, #4]
 8025276:	689a      	ldr	r2, [r3, #8]
 8025278:	68fb      	ldr	r3, [r7, #12]
 802527a:	009b      	lsls	r3, r3, #2
 802527c:	4413      	add	r3, r2
 802527e:	681a      	ldr	r2, [r3, #0]
 8025280:	683b      	ldr	r3, [r7, #0]
 8025282:	6899      	ldr	r1, [r3, #8]
 8025284:	68fb      	ldr	r3, [r7, #12]
 8025286:	009b      	lsls	r3, r3, #2
 8025288:	440b      	add	r3, r1
 802528a:	681b      	ldr	r3, [r3, #0]
 802528c:	429a      	cmp	r2, r3
 802528e:	d901      	bls.n	8025294 <mpiCompAbs+0x64>
         return 1;
 8025290:	2301      	movs	r3, #1
 8025292:	e016      	b.n	80252c2 <mpiCompAbs+0x92>
      else if(a->data[n] < b->data[n])
 8025294:	687b      	ldr	r3, [r7, #4]
 8025296:	689a      	ldr	r2, [r3, #8]
 8025298:	68fb      	ldr	r3, [r7, #12]
 802529a:	009b      	lsls	r3, r3, #2
 802529c:	4413      	add	r3, r2
 802529e:	681a      	ldr	r2, [r3, #0]
 80252a0:	683b      	ldr	r3, [r7, #0]
 80252a2:	6899      	ldr	r1, [r3, #8]
 80252a4:	68fb      	ldr	r3, [r7, #12]
 80252a6:	009b      	lsls	r3, r3, #2
 80252a8:	440b      	add	r3, r1
 80252aa:	681b      	ldr	r3, [r3, #0]
 80252ac:	429a      	cmp	r2, r3
 80252ae:	d202      	bcs.n	80252b6 <mpiCompAbs+0x86>
         return -1;
 80252b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80252b4:	e005      	b.n	80252c2 <mpiCompAbs+0x92>
   while(n--)
 80252b6:	68fb      	ldr	r3, [r7, #12]
 80252b8:	1e5a      	subs	r2, r3, #1
 80252ba:	60fa      	str	r2, [r7, #12]
 80252bc:	2b00      	cmp	r3, #0
 80252be:	d1d9      	bne.n	8025274 <mpiCompAbs+0x44>
   }

   //Operands are equals
   return 0;
 80252c0:	2300      	movs	r3, #0
}
 80252c2:	4618      	mov	r0, r3
 80252c4:	3710      	adds	r7, #16
 80252c6:	46bd      	mov	sp, r7
 80252c8:	bd80      	pop	{r7, pc}

080252ca <mpiCopy>:
 * @param[in] a Pointer to a multiple precision integer (source)
 * @return Error code
 **/

error_t mpiCopy(Mpi *r, const Mpi *a)
{
 80252ca:	b580      	push	{r7, lr}
 80252cc:	b086      	sub	sp, #24
 80252ce:	af00      	add	r7, sp, #0
 80252d0:	6078      	str	r0, [r7, #4]
 80252d2:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t i;
   uint_t n;

   //R and A are the same instance?
   if(r == a)
 80252d4:	687a      	ldr	r2, [r7, #4]
 80252d6:	683b      	ldr	r3, [r7, #0]
 80252d8:	429a      	cmp	r2, r3
 80252da:	d101      	bne.n	80252e0 <mpiCopy+0x16>
      return NO_ERROR;
 80252dc:	2300      	movs	r3, #0
 80252de:	e039      	b.n	8025354 <mpiCopy+0x8a>

   //Determine the actual length of A
   n = mpiGetLength(a);
 80252e0:	6838      	ldr	r0, [r7, #0]
 80252e2:	f7ff fe5e 	bl	8024fa2 <mpiGetLength>
 80252e6:	6138      	str	r0, [r7, #16]

   //Ajust the size of the destination operand
   error = mpiGrow(r, n);
 80252e8:	6939      	ldr	r1, [r7, #16]
 80252ea:	6878      	ldr	r0, [r7, #4]
 80252ec:	f7ff fdfa 	bl	8024ee4 <mpiGrow>
 80252f0:	4603      	mov	r3, r0
 80252f2:	81fb      	strh	r3, [r7, #14]
   //Any error to report?
   if(error)
 80252f4:	89fb      	ldrh	r3, [r7, #14]
 80252f6:	2b00      	cmp	r3, #0
 80252f8:	d001      	beq.n	80252fe <mpiCopy+0x34>
      return error;
 80252fa:	89fb      	ldrh	r3, [r7, #14]
 80252fc:	e02a      	b.n	8025354 <mpiCopy+0x8a>

   //Set the sign of R
   r->sign = a->sign;
 80252fe:	683b      	ldr	r3, [r7, #0]
 8025300:	681a      	ldr	r2, [r3, #0]
 8025302:	687b      	ldr	r3, [r7, #4]
 8025304:	601a      	str	r2, [r3, #0]

   //Let R = A
   for(i = 0; i < n; i++)
 8025306:	2300      	movs	r3, #0
 8025308:	617b      	str	r3, [r7, #20]
 802530a:	e00e      	b.n	802532a <mpiCopy+0x60>
   {
      r->data[i] = a->data[i];
 802530c:	683b      	ldr	r3, [r7, #0]
 802530e:	689a      	ldr	r2, [r3, #8]
 8025310:	697b      	ldr	r3, [r7, #20]
 8025312:	009b      	lsls	r3, r3, #2
 8025314:	441a      	add	r2, r3
 8025316:	687b      	ldr	r3, [r7, #4]
 8025318:	6899      	ldr	r1, [r3, #8]
 802531a:	697b      	ldr	r3, [r7, #20]
 802531c:	009b      	lsls	r3, r3, #2
 802531e:	440b      	add	r3, r1
 8025320:	6812      	ldr	r2, [r2, #0]
 8025322:	601a      	str	r2, [r3, #0]
   for(i = 0; i < n; i++)
 8025324:	697b      	ldr	r3, [r7, #20]
 8025326:	3301      	adds	r3, #1
 8025328:	617b      	str	r3, [r7, #20]
 802532a:	697a      	ldr	r2, [r7, #20]
 802532c:	693b      	ldr	r3, [r7, #16]
 802532e:	429a      	cmp	r2, r3
 8025330:	d3ec      	bcc.n	802530c <mpiCopy+0x42>
   }

   //Clear upper words
   for(; i < r->size; i++)
 8025332:	e009      	b.n	8025348 <mpiCopy+0x7e>
   {
      r->data[i] = 0;
 8025334:	687b      	ldr	r3, [r7, #4]
 8025336:	689a      	ldr	r2, [r3, #8]
 8025338:	697b      	ldr	r3, [r7, #20]
 802533a:	009b      	lsls	r3, r3, #2
 802533c:	4413      	add	r3, r2
 802533e:	2200      	movs	r2, #0
 8025340:	601a      	str	r2, [r3, #0]
   for(; i < r->size; i++)
 8025342:	697b      	ldr	r3, [r7, #20]
 8025344:	3301      	adds	r3, #1
 8025346:	617b      	str	r3, [r7, #20]
 8025348:	687b      	ldr	r3, [r7, #4]
 802534a:	685b      	ldr	r3, [r3, #4]
 802534c:	697a      	ldr	r2, [r7, #20]
 802534e:	429a      	cmp	r2, r3
 8025350:	d3f0      	bcc.n	8025334 <mpiCopy+0x6a>
   }

   //Successful operation
   return NO_ERROR;
 8025352:	2300      	movs	r3, #0
}
 8025354:	4618      	mov	r0, r3
 8025356:	3718      	adds	r7, #24
 8025358:	46bd      	mov	sp, r7
 802535a:	bd80      	pop	{r7, pc}

0802535c <mpiSetValue>:
 * @param[in] a Value to be assigned to the multiple precision integer
 * @return Error code
 **/

error_t mpiSetValue(Mpi *r, int_t a)
{
 802535c:	b580      	push	{r7, lr}
 802535e:	b084      	sub	sp, #16
 8025360:	af00      	add	r7, sp, #0
 8025362:	6078      	str	r0, [r7, #4]
 8025364:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t i;

   //Ajust the size of the destination operand
   error = mpiGrow(r, 1);
 8025366:	2101      	movs	r1, #1
 8025368:	6878      	ldr	r0, [r7, #4]
 802536a:	f7ff fdbb 	bl	8024ee4 <mpiGrow>
 802536e:	4603      	mov	r3, r0
 8025370:	817b      	strh	r3, [r7, #10]
   //Failed to adjust the size?
   if(error)
 8025372:	897b      	ldrh	r3, [r7, #10]
 8025374:	2b00      	cmp	r3, #0
 8025376:	d001      	beq.n	802537c <mpiSetValue+0x20>
      return error;
 8025378:	897b      	ldrh	r3, [r7, #10]
 802537a:	e023      	b.n	80253c4 <mpiSetValue+0x68>

   //Clear the contents of the multiple precision integer
   for(i = 0; i < r->size; i++)
 802537c:	2300      	movs	r3, #0
 802537e:	60fb      	str	r3, [r7, #12]
 8025380:	e009      	b.n	8025396 <mpiSetValue+0x3a>
   {
      r->data[i] = 0;
 8025382:	687b      	ldr	r3, [r7, #4]
 8025384:	689a      	ldr	r2, [r3, #8]
 8025386:	68fb      	ldr	r3, [r7, #12]
 8025388:	009b      	lsls	r3, r3, #2
 802538a:	4413      	add	r3, r2
 802538c:	2200      	movs	r2, #0
 802538e:	601a      	str	r2, [r3, #0]
   for(i = 0; i < r->size; i++)
 8025390:	68fb      	ldr	r3, [r7, #12]
 8025392:	3301      	adds	r3, #1
 8025394:	60fb      	str	r3, [r7, #12]
 8025396:	687b      	ldr	r3, [r7, #4]
 8025398:	685b      	ldr	r3, [r3, #4]
 802539a:	68fa      	ldr	r2, [r7, #12]
 802539c:	429a      	cmp	r2, r3
 802539e:	d3f0      	bcc.n	8025382 <mpiSetValue+0x26>
   }

   //Set the value or R
   r->data[0] = (a >= 0) ? a : -a;
 80253a0:	683b      	ldr	r3, [r7, #0]
 80253a2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80253a6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80253aa:	687b      	ldr	r3, [r7, #4]
 80253ac:	689b      	ldr	r3, [r3, #8]
 80253ae:	601a      	str	r2, [r3, #0]
   //Set the sign of R
   r->sign = (a >= 0) ? 1 : -1;
 80253b0:	683b      	ldr	r3, [r7, #0]
 80253b2:	2b00      	cmp	r3, #0
 80253b4:	db01      	blt.n	80253ba <mpiSetValue+0x5e>
 80253b6:	2201      	movs	r2, #1
 80253b8:	e001      	b.n	80253be <mpiSetValue+0x62>
 80253ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80253be:	687b      	ldr	r3, [r7, #4]
 80253c0:	601a      	str	r2, [r3, #0]

   //Successful operation
   return NO_ERROR;
 80253c2:	2300      	movs	r3, #0
}
 80253c4:	4618      	mov	r0, r3
 80253c6:	3710      	adds	r7, #16
 80253c8:	46bd      	mov	sp, r7
 80253ca:	bd80      	pop	{r7, pc}

080253cc <mpiImport>:
 * @param[in] format Input format
 * @return Error code
 **/

error_t mpiImport(Mpi *r, const uint8_t *data, uint_t length, MpiFormat format)
{
 80253cc:	b580      	push	{r7, lr}
 80253ce:	b086      	sub	sp, #24
 80253d0:	af00      	add	r7, sp, #0
 80253d2:	60f8      	str	r0, [r7, #12]
 80253d4:	60b9      	str	r1, [r7, #8]
 80253d6:	607a      	str	r2, [r7, #4]
 80253d8:	70fb      	strb	r3, [r7, #3]
   error_t error;
   uint_t i;

   //Check input format
   if(format == MPI_FORMAT_LITTLE_ENDIAN)
 80253da:	78fb      	ldrb	r3, [r7, #3]
 80253dc:	2b00      	cmp	r3, #0
 80253de:	d156      	bne.n	802548e <mpiImport+0xc2>
   {
      //Skip trailing zeroes
      while(length > 0 && data[length - 1] == 0)
 80253e0:	e002      	b.n	80253e8 <mpiImport+0x1c>
      {
         length--;
 80253e2:	687b      	ldr	r3, [r7, #4]
 80253e4:	3b01      	subs	r3, #1
 80253e6:	607b      	str	r3, [r7, #4]
      while(length > 0 && data[length - 1] == 0)
 80253e8:	687b      	ldr	r3, [r7, #4]
 80253ea:	2b00      	cmp	r3, #0
 80253ec:	d006      	beq.n	80253fc <mpiImport+0x30>
 80253ee:	687b      	ldr	r3, [r7, #4]
 80253f0:	3b01      	subs	r3, #1
 80253f2:	68ba      	ldr	r2, [r7, #8]
 80253f4:	4413      	add	r3, r2
 80253f6:	781b      	ldrb	r3, [r3, #0]
 80253f8:	2b00      	cmp	r3, #0
 80253fa:	d0f2      	beq.n	80253e2 <mpiImport+0x16>
      }

      //Ajust the size of the multiple precision integer
      error = mpiGrow(r, (length + MPI_INT_SIZE - 1) / MPI_INT_SIZE);
 80253fc:	687b      	ldr	r3, [r7, #4]
 80253fe:	3303      	adds	r3, #3
 8025400:	089b      	lsrs	r3, r3, #2
 8025402:	4619      	mov	r1, r3
 8025404:	68f8      	ldr	r0, [r7, #12]
 8025406:	f7ff fd6d 	bl	8024ee4 <mpiGrow>
 802540a:	4603      	mov	r3, r0
 802540c:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 802540e:	8afb      	ldrh	r3, [r7, #22]
 8025410:	2b00      	cmp	r3, #0
 8025412:	f040 809c 	bne.w	802554e <mpiImport+0x182>
      {
         //Clear the contents of the multiple precision integer
         for(i = 0; i < r->size; i++)
 8025416:	2300      	movs	r3, #0
 8025418:	613b      	str	r3, [r7, #16]
 802541a:	e009      	b.n	8025430 <mpiImport+0x64>
         {
            r->data[i] = 0;
 802541c:	68fb      	ldr	r3, [r7, #12]
 802541e:	689a      	ldr	r2, [r3, #8]
 8025420:	693b      	ldr	r3, [r7, #16]
 8025422:	009b      	lsls	r3, r3, #2
 8025424:	4413      	add	r3, r2
 8025426:	2200      	movs	r2, #0
 8025428:	601a      	str	r2, [r3, #0]
         for(i = 0; i < r->size; i++)
 802542a:	693b      	ldr	r3, [r7, #16]
 802542c:	3301      	adds	r3, #1
 802542e:	613b      	str	r3, [r7, #16]
 8025430:	68fb      	ldr	r3, [r7, #12]
 8025432:	685b      	ldr	r3, [r3, #4]
 8025434:	693a      	ldr	r2, [r7, #16]
 8025436:	429a      	cmp	r2, r3
 8025438:	d3f0      	bcc.n	802541c <mpiImport+0x50>
         }

         //Set sign
         r->sign = 1;
 802543a:	68fb      	ldr	r3, [r7, #12]
 802543c:	2201      	movs	r2, #1
 802543e:	601a      	str	r2, [r3, #0]

         //Import data
         for(i = 0; i < length; i++, data++)
 8025440:	2300      	movs	r3, #0
 8025442:	613b      	str	r3, [r7, #16]
 8025444:	e01e      	b.n	8025484 <mpiImport+0xb8>
         {
            r->data[i / MPI_INT_SIZE] |= *data << ((i % MPI_INT_SIZE) * 8);
 8025446:	68fb      	ldr	r3, [r7, #12]
 8025448:	689a      	ldr	r2, [r3, #8]
 802544a:	693b      	ldr	r3, [r7, #16]
 802544c:	f023 0303 	bic.w	r3, r3, #3
 8025450:	4413      	add	r3, r2
 8025452:	681a      	ldr	r2, [r3, #0]
 8025454:	68bb      	ldr	r3, [r7, #8]
 8025456:	781b      	ldrb	r3, [r3, #0]
 8025458:	4619      	mov	r1, r3
 802545a:	693b      	ldr	r3, [r7, #16]
 802545c:	f003 0303 	and.w	r3, r3, #3
 8025460:	00db      	lsls	r3, r3, #3
 8025462:	fa01 f303 	lsl.w	r3, r1, r3
 8025466:	4618      	mov	r0, r3
 8025468:	68fb      	ldr	r3, [r7, #12]
 802546a:	6899      	ldr	r1, [r3, #8]
 802546c:	693b      	ldr	r3, [r7, #16]
 802546e:	f023 0303 	bic.w	r3, r3, #3
 8025472:	440b      	add	r3, r1
 8025474:	4302      	orrs	r2, r0
 8025476:	601a      	str	r2, [r3, #0]
         for(i = 0; i < length; i++, data++)
 8025478:	693b      	ldr	r3, [r7, #16]
 802547a:	3301      	adds	r3, #1
 802547c:	613b      	str	r3, [r7, #16]
 802547e:	68bb      	ldr	r3, [r7, #8]
 8025480:	3301      	adds	r3, #1
 8025482:	60bb      	str	r3, [r7, #8]
 8025484:	693a      	ldr	r2, [r7, #16]
 8025486:	687b      	ldr	r3, [r7, #4]
 8025488:	429a      	cmp	r2, r3
 802548a:	d3dc      	bcc.n	8025446 <mpiImport+0x7a>
 802548c:	e05f      	b.n	802554e <mpiImport+0x182>
         }
      }
   }
   else if(format == MPI_FORMAT_BIG_ENDIAN)
 802548e:	78fb      	ldrb	r3, [r7, #3]
 8025490:	2b01      	cmp	r3, #1
 8025492:	d15a      	bne.n	802554a <mpiImport+0x17e>
   {
      //Skip leading zeroes
      while(length > 1 && *data == 0)
 8025494:	e005      	b.n	80254a2 <mpiImport+0xd6>
      {
         data++;
 8025496:	68bb      	ldr	r3, [r7, #8]
 8025498:	3301      	adds	r3, #1
 802549a:	60bb      	str	r3, [r7, #8]
         length--;
 802549c:	687b      	ldr	r3, [r7, #4]
 802549e:	3b01      	subs	r3, #1
 80254a0:	607b      	str	r3, [r7, #4]
      while(length > 1 && *data == 0)
 80254a2:	687b      	ldr	r3, [r7, #4]
 80254a4:	2b01      	cmp	r3, #1
 80254a6:	d903      	bls.n	80254b0 <mpiImport+0xe4>
 80254a8:	68bb      	ldr	r3, [r7, #8]
 80254aa:	781b      	ldrb	r3, [r3, #0]
 80254ac:	2b00      	cmp	r3, #0
 80254ae:	d0f2      	beq.n	8025496 <mpiImport+0xca>
      }

      //Ajust the size of the multiple precision integer
      error = mpiGrow(r, (length + MPI_INT_SIZE - 1) / MPI_INT_SIZE);
 80254b0:	687b      	ldr	r3, [r7, #4]
 80254b2:	3303      	adds	r3, #3
 80254b4:	089b      	lsrs	r3, r3, #2
 80254b6:	4619      	mov	r1, r3
 80254b8:	68f8      	ldr	r0, [r7, #12]
 80254ba:	f7ff fd13 	bl	8024ee4 <mpiGrow>
 80254be:	4603      	mov	r3, r0
 80254c0:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 80254c2:	8afb      	ldrh	r3, [r7, #22]
 80254c4:	2b00      	cmp	r3, #0
 80254c6:	d142      	bne.n	802554e <mpiImport+0x182>
      {
         //Clear the contents of the multiple precision integer
         for(i = 0; i < r->size; i++)
 80254c8:	2300      	movs	r3, #0
 80254ca:	613b      	str	r3, [r7, #16]
 80254cc:	e009      	b.n	80254e2 <mpiImport+0x116>
         {
            r->data[i] = 0;
 80254ce:	68fb      	ldr	r3, [r7, #12]
 80254d0:	689a      	ldr	r2, [r3, #8]
 80254d2:	693b      	ldr	r3, [r7, #16]
 80254d4:	009b      	lsls	r3, r3, #2
 80254d6:	4413      	add	r3, r2
 80254d8:	2200      	movs	r2, #0
 80254da:	601a      	str	r2, [r3, #0]
         for(i = 0; i < r->size; i++)
 80254dc:	693b      	ldr	r3, [r7, #16]
 80254de:	3301      	adds	r3, #1
 80254e0:	613b      	str	r3, [r7, #16]
 80254e2:	68fb      	ldr	r3, [r7, #12]
 80254e4:	685b      	ldr	r3, [r3, #4]
 80254e6:	693a      	ldr	r2, [r7, #16]
 80254e8:	429a      	cmp	r2, r3
 80254ea:	d3f0      	bcc.n	80254ce <mpiImport+0x102>
         }

         //Set sign
         r->sign = 1;
 80254ec:	68fb      	ldr	r3, [r7, #12]
 80254ee:	2201      	movs	r2, #1
 80254f0:	601a      	str	r2, [r3, #0]

         //Start from the least significant byte
         data += length - 1;
 80254f2:	687b      	ldr	r3, [r7, #4]
 80254f4:	3b01      	subs	r3, #1
 80254f6:	68ba      	ldr	r2, [r7, #8]
 80254f8:	4413      	add	r3, r2
 80254fa:	60bb      	str	r3, [r7, #8]

         //Import data
         for(i = 0; i < length; i++, data--)
 80254fc:	2300      	movs	r3, #0
 80254fe:	613b      	str	r3, [r7, #16]
 8025500:	e01e      	b.n	8025540 <mpiImport+0x174>
         {
            r->data[i / MPI_INT_SIZE] |= *data << ((i % MPI_INT_SIZE) * 8);
 8025502:	68fb      	ldr	r3, [r7, #12]
 8025504:	689a      	ldr	r2, [r3, #8]
 8025506:	693b      	ldr	r3, [r7, #16]
 8025508:	f023 0303 	bic.w	r3, r3, #3
 802550c:	4413      	add	r3, r2
 802550e:	681a      	ldr	r2, [r3, #0]
 8025510:	68bb      	ldr	r3, [r7, #8]
 8025512:	781b      	ldrb	r3, [r3, #0]
 8025514:	4619      	mov	r1, r3
 8025516:	693b      	ldr	r3, [r7, #16]
 8025518:	f003 0303 	and.w	r3, r3, #3
 802551c:	00db      	lsls	r3, r3, #3
 802551e:	fa01 f303 	lsl.w	r3, r1, r3
 8025522:	4618      	mov	r0, r3
 8025524:	68fb      	ldr	r3, [r7, #12]
 8025526:	6899      	ldr	r1, [r3, #8]
 8025528:	693b      	ldr	r3, [r7, #16]
 802552a:	f023 0303 	bic.w	r3, r3, #3
 802552e:	440b      	add	r3, r1
 8025530:	4302      	orrs	r2, r0
 8025532:	601a      	str	r2, [r3, #0]
         for(i = 0; i < length; i++, data--)
 8025534:	693b      	ldr	r3, [r7, #16]
 8025536:	3301      	adds	r3, #1
 8025538:	613b      	str	r3, [r7, #16]
 802553a:	68bb      	ldr	r3, [r7, #8]
 802553c:	3b01      	subs	r3, #1
 802553e:	60bb      	str	r3, [r7, #8]
 8025540:	693a      	ldr	r2, [r7, #16]
 8025542:	687b      	ldr	r3, [r7, #4]
 8025544:	429a      	cmp	r2, r3
 8025546:	d3dc      	bcc.n	8025502 <mpiImport+0x136>
 8025548:	e001      	b.n	802554e <mpiImport+0x182>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 802554a:	2302      	movs	r3, #2
 802554c:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 802554e:	8afb      	ldrh	r3, [r7, #22]
}
 8025550:	4618      	mov	r0, r3
 8025552:	3718      	adds	r7, #24
 8025554:	46bd      	mov	sp, r7
 8025556:	bd80      	pop	{r7, pc}

08025558 <mpiExport>:
 * @param[in] format Output format
 * @return Error code
 **/

error_t mpiExport(const Mpi *a, uint8_t *data, uint_t length, MpiFormat format)
{
 8025558:	b580      	push	{r7, lr}
 802555a:	b088      	sub	sp, #32
 802555c:	af00      	add	r7, sp, #0
 802555e:	60f8      	str	r0, [r7, #12]
 8025560:	60b9      	str	r1, [r7, #8]
 8025562:	607a      	str	r2, [r7, #4]
 8025564:	70fb      	strb	r3, [r7, #3]
   uint_t i;
   uint_t n;
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 8025566:	2300      	movs	r3, #0
 8025568:	837b      	strh	r3, [r7, #26]

   //Check input format
   if(format == MPI_FORMAT_LITTLE_ENDIAN)
 802556a:	78fb      	ldrb	r3, [r7, #3]
 802556c:	2b00      	cmp	r3, #0
 802556e:	d12d      	bne.n	80255cc <mpiExport+0x74>
   {
      //Get the actual length in bytes
      n = mpiGetByteLength(a);
 8025570:	68f8      	ldr	r0, [r7, #12]
 8025572:	f7ff fd3d 	bl	8024ff0 <mpiGetByteLength>
 8025576:	6178      	str	r0, [r7, #20]

      //Make sure the output buffer is large enough
      if(n <= length)
 8025578:	697a      	ldr	r2, [r7, #20]
 802557a:	687b      	ldr	r3, [r7, #4]
 802557c:	429a      	cmp	r2, r3
 802557e:	d822      	bhi.n	80255c6 <mpiExport+0x6e>
      {
         //Clear output buffer
         osMemset(data, 0, length);
 8025580:	687a      	ldr	r2, [r7, #4]
 8025582:	2100      	movs	r1, #0
 8025584:	68b8      	ldr	r0, [r7, #8]
 8025586:	f006 fb57 	bl	802bc38 <memset>

         //Export data
         for(i = 0; i < n; i++, data++)
 802558a:	2300      	movs	r3, #0
 802558c:	61fb      	str	r3, [r7, #28]
 802558e:	e015      	b.n	80255bc <mpiExport+0x64>
         {
            *data = a->data[i / MPI_INT_SIZE] >> ((i % MPI_INT_SIZE) * 8);
 8025590:	68fb      	ldr	r3, [r7, #12]
 8025592:	689a      	ldr	r2, [r3, #8]
 8025594:	69fb      	ldr	r3, [r7, #28]
 8025596:	f023 0303 	bic.w	r3, r3, #3
 802559a:	4413      	add	r3, r2
 802559c:	681a      	ldr	r2, [r3, #0]
 802559e:	69fb      	ldr	r3, [r7, #28]
 80255a0:	f003 0303 	and.w	r3, r3, #3
 80255a4:	00db      	lsls	r3, r3, #3
 80255a6:	fa22 f303 	lsr.w	r3, r2, r3
 80255aa:	b2da      	uxtb	r2, r3
 80255ac:	68bb      	ldr	r3, [r7, #8]
 80255ae:	701a      	strb	r2, [r3, #0]
         for(i = 0; i < n; i++, data++)
 80255b0:	69fb      	ldr	r3, [r7, #28]
 80255b2:	3301      	adds	r3, #1
 80255b4:	61fb      	str	r3, [r7, #28]
 80255b6:	68bb      	ldr	r3, [r7, #8]
 80255b8:	3301      	adds	r3, #1
 80255ba:	60bb      	str	r3, [r7, #8]
 80255bc:	69fa      	ldr	r2, [r7, #28]
 80255be:	697b      	ldr	r3, [r7, #20]
 80255c0:	429a      	cmp	r2, r3
 80255c2:	d3e5      	bcc.n	8025590 <mpiExport+0x38>
 80255c4:	e03a      	b.n	802563c <mpiExport+0xe4>
         }
      }
      else
      {
         //Report an error
         error = ERROR_INVALID_LENGTH;
 80255c6:	23ec      	movs	r3, #236	@ 0xec
 80255c8:	837b      	strh	r3, [r7, #26]
 80255ca:	e037      	b.n	802563c <mpiExport+0xe4>
      }
   }
   else if(format == MPI_FORMAT_BIG_ENDIAN)
 80255cc:	78fb      	ldrb	r3, [r7, #3]
 80255ce:	2b01      	cmp	r3, #1
 80255d0:	d132      	bne.n	8025638 <mpiExport+0xe0>
   {
      //Get the actual length in bytes
      n = mpiGetByteLength(a);
 80255d2:	68f8      	ldr	r0, [r7, #12]
 80255d4:	f7ff fd0c 	bl	8024ff0 <mpiGetByteLength>
 80255d8:	6178      	str	r0, [r7, #20]

      //Make sure the output buffer is large enough
      if(n <= length)
 80255da:	697a      	ldr	r2, [r7, #20]
 80255dc:	687b      	ldr	r3, [r7, #4]
 80255de:	429a      	cmp	r2, r3
 80255e0:	d827      	bhi.n	8025632 <mpiExport+0xda>
      {
         //Clear output buffer
         osMemset(data, 0, length);
 80255e2:	687a      	ldr	r2, [r7, #4]
 80255e4:	2100      	movs	r1, #0
 80255e6:	68b8      	ldr	r0, [r7, #8]
 80255e8:	f006 fb26 	bl	802bc38 <memset>

         //Point to the least significant word
         data += length - 1;
 80255ec:	687b      	ldr	r3, [r7, #4]
 80255ee:	3b01      	subs	r3, #1
 80255f0:	68ba      	ldr	r2, [r7, #8]
 80255f2:	4413      	add	r3, r2
 80255f4:	60bb      	str	r3, [r7, #8]

         //Export data
         for(i = 0; i < n; i++, data--)
 80255f6:	2300      	movs	r3, #0
 80255f8:	61fb      	str	r3, [r7, #28]
 80255fa:	e015      	b.n	8025628 <mpiExport+0xd0>
         {
            *data = a->data[i / MPI_INT_SIZE] >> ((i % MPI_INT_SIZE) * 8);
 80255fc:	68fb      	ldr	r3, [r7, #12]
 80255fe:	689a      	ldr	r2, [r3, #8]
 8025600:	69fb      	ldr	r3, [r7, #28]
 8025602:	f023 0303 	bic.w	r3, r3, #3
 8025606:	4413      	add	r3, r2
 8025608:	681a      	ldr	r2, [r3, #0]
 802560a:	69fb      	ldr	r3, [r7, #28]
 802560c:	f003 0303 	and.w	r3, r3, #3
 8025610:	00db      	lsls	r3, r3, #3
 8025612:	fa22 f303 	lsr.w	r3, r2, r3
 8025616:	b2da      	uxtb	r2, r3
 8025618:	68bb      	ldr	r3, [r7, #8]
 802561a:	701a      	strb	r2, [r3, #0]
         for(i = 0; i < n; i++, data--)
 802561c:	69fb      	ldr	r3, [r7, #28]
 802561e:	3301      	adds	r3, #1
 8025620:	61fb      	str	r3, [r7, #28]
 8025622:	68bb      	ldr	r3, [r7, #8]
 8025624:	3b01      	subs	r3, #1
 8025626:	60bb      	str	r3, [r7, #8]
 8025628:	69fa      	ldr	r2, [r7, #28]
 802562a:	697b      	ldr	r3, [r7, #20]
 802562c:	429a      	cmp	r2, r3
 802562e:	d3e5      	bcc.n	80255fc <mpiExport+0xa4>
 8025630:	e004      	b.n	802563c <mpiExport+0xe4>
         }
      }
      else
      {
         //Report an error
         error = ERROR_INVALID_LENGTH;
 8025632:	23ec      	movs	r3, #236	@ 0xec
 8025634:	837b      	strh	r3, [r7, #26]
 8025636:	e001      	b.n	802563c <mpiExport+0xe4>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 8025638:	2302      	movs	r3, #2
 802563a:	837b      	strh	r3, [r7, #26]
   }

   //Return status code
   return error;
 802563c:	8b7b      	ldrh	r3, [r7, #26]
}
 802563e:	4618      	mov	r0, r3
 8025640:	3720      	adds	r7, #32
 8025642:	46bd      	mov	sp, r7
 8025644:	bd80      	pop	{r7, pc}

08025646 <mpiSub>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiSub(Mpi *r, const Mpi *a, const Mpi *b)
{
 8025646:	b580      	push	{r7, lr}
 8025648:	b086      	sub	sp, #24
 802564a:	af00      	add	r7, sp, #0
 802564c:	60f8      	str	r0, [r7, #12]
 802564e:	60b9      	str	r1, [r7, #8]
 8025650:	607a      	str	r2, [r7, #4]
   error_t error;
   int_t sign;

   //Retrieve the sign of A
   sign = a->sign;
 8025652:	68bb      	ldr	r3, [r7, #8]
 8025654:	681b      	ldr	r3, [r3, #0]
 8025656:	613b      	str	r3, [r7, #16]

   //Both operands have the same sign?
   if(a->sign == b->sign)
 8025658:	68bb      	ldr	r3, [r7, #8]
 802565a:	681a      	ldr	r2, [r3, #0]
 802565c:	687b      	ldr	r3, [r7, #4]
 802565e:	681b      	ldr	r3, [r3, #0]
 8025660:	429a      	cmp	r2, r3
 8025662:	d11d      	bne.n	80256a0 <mpiSub+0x5a>
   {
      //Compare the absolute value of A and B
      if(mpiCompAbs(a, b) >= 0)
 8025664:	6879      	ldr	r1, [r7, #4]
 8025666:	68b8      	ldr	r0, [r7, #8]
 8025668:	f7ff fde2 	bl	8025230 <mpiCompAbs>
 802566c:	4603      	mov	r3, r0
 802566e:	2b00      	cmp	r3, #0
 8025670:	db0a      	blt.n	8025688 <mpiSub+0x42>
      {
         //Perform subtraction
         error = mpiSubAbs(r, a, b);
 8025672:	687a      	ldr	r2, [r7, #4]
 8025674:	68b9      	ldr	r1, [r7, #8]
 8025676:	68f8      	ldr	r0, [r7, #12]
 8025678:	f000 f8cc 	bl	8025814 <mpiSubAbs>
 802567c:	4603      	mov	r3, r0
 802567e:	82fb      	strh	r3, [r7, #22]
         //Set the sign of the resulting number
         r->sign = sign;
 8025680:	68fb      	ldr	r3, [r7, #12]
 8025682:	693a      	ldr	r2, [r7, #16]
 8025684:	601a      	str	r2, [r3, #0]
 8025686:	e015      	b.n	80256b4 <mpiSub+0x6e>
      }
      else
      {
         //Perform subtraction
         error = mpiSubAbs(r, b, a);
 8025688:	68ba      	ldr	r2, [r7, #8]
 802568a:	6879      	ldr	r1, [r7, #4]
 802568c:	68f8      	ldr	r0, [r7, #12]
 802568e:	f000 f8c1 	bl	8025814 <mpiSubAbs>
 8025692:	4603      	mov	r3, r0
 8025694:	82fb      	strh	r3, [r7, #22]
         //Set the sign of the resulting number
         r->sign = -sign;
 8025696:	693b      	ldr	r3, [r7, #16]
 8025698:	425a      	negs	r2, r3
 802569a:	68fb      	ldr	r3, [r7, #12]
 802569c:	601a      	str	r2, [r3, #0]
 802569e:	e009      	b.n	80256b4 <mpiSub+0x6e>
   }
   //Operands have different signs?
   else
   {
      //Perform addition
      error = mpiAddAbs(r, a, b);
 80256a0:	687a      	ldr	r2, [r7, #4]
 80256a2:	68b9      	ldr	r1, [r7, #8]
 80256a4:	68f8      	ldr	r0, [r7, #12]
 80256a6:	f000 f80a 	bl	80256be <mpiAddAbs>
 80256aa:	4603      	mov	r3, r0
 80256ac:	82fb      	strh	r3, [r7, #22]
      //Set the sign of the resulting number
      r->sign = sign;
 80256ae:	68fb      	ldr	r3, [r7, #12]
 80256b0:	693a      	ldr	r2, [r7, #16]
 80256b2:	601a      	str	r2, [r3, #0]
   }

   //Return status code
   return error;
 80256b4:	8afb      	ldrh	r3, [r7, #22]
}
 80256b6:	4618      	mov	r0, r3
 80256b8:	3718      	adds	r7, #24
 80256ba:	46bd      	mov	sp, r7
 80256bc:	bd80      	pop	{r7, pc}

080256be <mpiAddAbs>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiAddAbs(Mpi *r, const Mpi *a, const Mpi *b)
{
 80256be:	b580      	push	{r7, lr}
 80256c0:	b08a      	sub	sp, #40	@ 0x28
 80256c2:	af00      	add	r7, sp, #0
 80256c4:	60f8      	str	r0, [r7, #12]
 80256c6:	60b9      	str	r1, [r7, #8]
 80256c8:	607a      	str	r2, [r7, #4]
   uint_t n;
   uint_t c;
   uint_t d;

   //R and B are the same instance?
   if(r == b)
 80256ca:	68fa      	ldr	r2, [r7, #12]
 80256cc:	687b      	ldr	r3, [r7, #4]
 80256ce:	429a      	cmp	r2, r3
 80256d0:	d106      	bne.n	80256e0 <mpiAddAbs+0x22>
   {
      //Swap A and B
      const Mpi *t = a;
 80256d2:	68bb      	ldr	r3, [r7, #8]
 80256d4:	61bb      	str	r3, [r7, #24]
      a = b;
 80256d6:	687b      	ldr	r3, [r7, #4]
 80256d8:	60bb      	str	r3, [r7, #8]
      b = t;
 80256da:	69bb      	ldr	r3, [r7, #24]
 80256dc:	607b      	str	r3, [r7, #4]
 80256de:	e00d      	b.n	80256fc <mpiAddAbs+0x3e>
   }
   //R is neither A nor B?
   else if(r != a)
 80256e0:	68fa      	ldr	r2, [r7, #12]
 80256e2:	68bb      	ldr	r3, [r7, #8]
 80256e4:	429a      	cmp	r2, r3
 80256e6:	d009      	beq.n	80256fc <mpiAddAbs+0x3e>
   {
      //Copy the first operand to R
      MPI_CHECK(mpiCopy(r, a));
 80256e8:	68b9      	ldr	r1, [r7, #8]
 80256ea:	68f8      	ldr	r0, [r7, #12]
 80256ec:	f7ff fded 	bl	80252ca <mpiCopy>
 80256f0:	4603      	mov	r3, r0
 80256f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80256f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80256f6:	2b00      	cmp	r3, #0
 80256f8:	f040 8087 	bne.w	802580a <mpiAddAbs+0x14c>
   }

   //Determine the actual length of B
   n = mpiGetLength(b);
 80256fc:	6878      	ldr	r0, [r7, #4]
 80256fe:	f7ff fc50 	bl	8024fa2 <mpiGetLength>
 8025702:	6178      	str	r0, [r7, #20]
   //Extend the size of the destination register as needed
   MPI_CHECK(mpiGrow(r, n));
 8025704:	6979      	ldr	r1, [r7, #20]
 8025706:	68f8      	ldr	r0, [r7, #12]
 8025708:	f7ff fbec 	bl	8024ee4 <mpiGrow>
 802570c:	4603      	mov	r3, r0
 802570e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8025710:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8025712:	2b00      	cmp	r3, #0
 8025714:	d179      	bne.n	802580a <mpiAddAbs+0x14c>

   //The result is always positive
   r->sign = 1;
 8025716:	68fb      	ldr	r3, [r7, #12]
 8025718:	2201      	movs	r2, #1
 802571a:	601a      	str	r2, [r3, #0]
   //Clear carry bit
   c = 0;
 802571c:	2300      	movs	r3, #0
 802571e:	61fb      	str	r3, [r7, #28]

   //Add operands
   for(i = 0; i < n; i++)
 8025720:	2300      	movs	r3, #0
 8025722:	623b      	str	r3, [r7, #32]
 8025724:	e02b      	b.n	802577e <mpiAddAbs+0xc0>
   {
      //Add carry bit
      d = r->data[i] + c;
 8025726:	68fb      	ldr	r3, [r7, #12]
 8025728:	689a      	ldr	r2, [r3, #8]
 802572a:	6a3b      	ldr	r3, [r7, #32]
 802572c:	009b      	lsls	r3, r3, #2
 802572e:	4413      	add	r3, r2
 8025730:	681b      	ldr	r3, [r3, #0]
 8025732:	69fa      	ldr	r2, [r7, #28]
 8025734:	4413      	add	r3, r2
 8025736:	613b      	str	r3, [r7, #16]
      //Update carry bit
      if(d != 0) c = 0;
 8025738:	693b      	ldr	r3, [r7, #16]
 802573a:	2b00      	cmp	r3, #0
 802573c:	d001      	beq.n	8025742 <mpiAddAbs+0x84>
 802573e:	2300      	movs	r3, #0
 8025740:	61fb      	str	r3, [r7, #28]
      //Perform addition
      d += b->data[i];
 8025742:	687b      	ldr	r3, [r7, #4]
 8025744:	689a      	ldr	r2, [r3, #8]
 8025746:	6a3b      	ldr	r3, [r7, #32]
 8025748:	009b      	lsls	r3, r3, #2
 802574a:	4413      	add	r3, r2
 802574c:	681b      	ldr	r3, [r3, #0]
 802574e:	693a      	ldr	r2, [r7, #16]
 8025750:	4413      	add	r3, r2
 8025752:	613b      	str	r3, [r7, #16]
      //Update carry bit
      if(d < b->data[i]) c = 1;
 8025754:	687b      	ldr	r3, [r7, #4]
 8025756:	689a      	ldr	r2, [r3, #8]
 8025758:	6a3b      	ldr	r3, [r7, #32]
 802575a:	009b      	lsls	r3, r3, #2
 802575c:	4413      	add	r3, r2
 802575e:	681b      	ldr	r3, [r3, #0]
 8025760:	693a      	ldr	r2, [r7, #16]
 8025762:	429a      	cmp	r2, r3
 8025764:	d201      	bcs.n	802576a <mpiAddAbs+0xac>
 8025766:	2301      	movs	r3, #1
 8025768:	61fb      	str	r3, [r7, #28]
      //Save result
      r->data[i] = d;
 802576a:	68fb      	ldr	r3, [r7, #12]
 802576c:	689a      	ldr	r2, [r3, #8]
 802576e:	6a3b      	ldr	r3, [r7, #32]
 8025770:	009b      	lsls	r3, r3, #2
 8025772:	4413      	add	r3, r2
 8025774:	693a      	ldr	r2, [r7, #16]
 8025776:	601a      	str	r2, [r3, #0]
   for(i = 0; i < n; i++)
 8025778:	6a3b      	ldr	r3, [r7, #32]
 802577a:	3301      	adds	r3, #1
 802577c:	623b      	str	r3, [r7, #32]
 802577e:	6a3a      	ldr	r2, [r7, #32]
 8025780:	697b      	ldr	r3, [r7, #20]
 8025782:	429a      	cmp	r2, r3
 8025784:	d3cf      	bcc.n	8025726 <mpiAddAbs+0x68>
   }

   //Loop as long as the carry bit is set
   for(i = n; c && i < r->size; i++)
 8025786:	697b      	ldr	r3, [r7, #20]
 8025788:	623b      	str	r3, [r7, #32]
 802578a:	e01a      	b.n	80257c2 <mpiAddAbs+0x104>
   {
      //Add carry bit
      r->data[i] += c;
 802578c:	68fb      	ldr	r3, [r7, #12]
 802578e:	689a      	ldr	r2, [r3, #8]
 8025790:	6a3b      	ldr	r3, [r7, #32]
 8025792:	009b      	lsls	r3, r3, #2
 8025794:	4413      	add	r3, r2
 8025796:	6819      	ldr	r1, [r3, #0]
 8025798:	68fb      	ldr	r3, [r7, #12]
 802579a:	689a      	ldr	r2, [r3, #8]
 802579c:	6a3b      	ldr	r3, [r7, #32]
 802579e:	009b      	lsls	r3, r3, #2
 80257a0:	4413      	add	r3, r2
 80257a2:	69fa      	ldr	r2, [r7, #28]
 80257a4:	440a      	add	r2, r1
 80257a6:	601a      	str	r2, [r3, #0]
      //Update carry bit
      if(r->data[i] != 0) c = 0;
 80257a8:	68fb      	ldr	r3, [r7, #12]
 80257aa:	689a      	ldr	r2, [r3, #8]
 80257ac:	6a3b      	ldr	r3, [r7, #32]
 80257ae:	009b      	lsls	r3, r3, #2
 80257b0:	4413      	add	r3, r2
 80257b2:	681b      	ldr	r3, [r3, #0]
 80257b4:	2b00      	cmp	r3, #0
 80257b6:	d001      	beq.n	80257bc <mpiAddAbs+0xfe>
 80257b8:	2300      	movs	r3, #0
 80257ba:	61fb      	str	r3, [r7, #28]
   for(i = n; c && i < r->size; i++)
 80257bc:	6a3b      	ldr	r3, [r7, #32]
 80257be:	3301      	adds	r3, #1
 80257c0:	623b      	str	r3, [r7, #32]
 80257c2:	69fb      	ldr	r3, [r7, #28]
 80257c4:	2b00      	cmp	r3, #0
 80257c6:	d004      	beq.n	80257d2 <mpiAddAbs+0x114>
 80257c8:	68fb      	ldr	r3, [r7, #12]
 80257ca:	685b      	ldr	r3, [r3, #4]
 80257cc:	6a3a      	ldr	r2, [r7, #32]
 80257ce:	429a      	cmp	r2, r3
 80257d0:	d3dc      	bcc.n	802578c <mpiAddAbs+0xce>
   }

   //Check the final carry bit
   if(c && n >= r->size)
 80257d2:	69fb      	ldr	r3, [r7, #28]
 80257d4:	2b00      	cmp	r3, #0
 80257d6:	d017      	beq.n	8025808 <mpiAddAbs+0x14a>
 80257d8:	68fb      	ldr	r3, [r7, #12]
 80257da:	685b      	ldr	r3, [r3, #4]
 80257dc:	697a      	ldr	r2, [r7, #20]
 80257de:	429a      	cmp	r2, r3
 80257e0:	d312      	bcc.n	8025808 <mpiAddAbs+0x14a>
   {
      //Extend the size of the destination register
      MPI_CHECK(mpiGrow(r, n + 1));
 80257e2:	697b      	ldr	r3, [r7, #20]
 80257e4:	3301      	adds	r3, #1
 80257e6:	4619      	mov	r1, r3
 80257e8:	68f8      	ldr	r0, [r7, #12]
 80257ea:	f7ff fb7b 	bl	8024ee4 <mpiGrow>
 80257ee:	4603      	mov	r3, r0
 80257f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80257f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80257f4:	2b00      	cmp	r3, #0
 80257f6:	d108      	bne.n	802580a <mpiAddAbs+0x14c>
      //Add carry bit
      r->data[n] = 1;
 80257f8:	68fb      	ldr	r3, [r7, #12]
 80257fa:	689a      	ldr	r2, [r3, #8]
 80257fc:	697b      	ldr	r3, [r7, #20]
 80257fe:	009b      	lsls	r3, r3, #2
 8025800:	4413      	add	r3, r2
 8025802:	2201      	movs	r2, #1
 8025804:	601a      	str	r2, [r3, #0]
 8025806:	e000      	b.n	802580a <mpiAddAbs+0x14c>
   }

end:
 8025808:	bf00      	nop
   //Return status code
   return error;
 802580a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 802580c:	4618      	mov	r0, r3
 802580e:	3728      	adds	r7, #40	@ 0x28
 8025810:	46bd      	mov	sp, r7
 8025812:	bd80      	pop	{r7, pc}

08025814 <mpiSubAbs>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiSubAbs(Mpi *r, const Mpi *a, const Mpi *b)
{
 8025814:	b580      	push	{r7, lr}
 8025816:	b08c      	sub	sp, #48	@ 0x30
 8025818:	af00      	add	r7, sp, #0
 802581a:	60f8      	str	r0, [r7, #12]
 802581c:	60b9      	str	r1, [r7, #8]
 802581e:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint_t m;
   uint_t n;

   //Check input parameters
   if(mpiCompAbs(a, b) < 0)
 8025820:	6879      	ldr	r1, [r7, #4]
 8025822:	68b8      	ldr	r0, [r7, #8]
 8025824:	f7ff fd04 	bl	8025230 <mpiCompAbs>
 8025828:	4603      	mov	r3, r0
 802582a:	2b00      	cmp	r3, #0
 802582c:	da05      	bge.n	802583a <mpiSubAbs+0x26>
   {
      //Swap A and B if necessary
      const Mpi *t = a;
 802582e:	68bb      	ldr	r3, [r7, #8]
 8025830:	623b      	str	r3, [r7, #32]
      a = b;
 8025832:	687b      	ldr	r3, [r7, #4]
 8025834:	60bb      	str	r3, [r7, #8]
      b = t;
 8025836:	6a3b      	ldr	r3, [r7, #32]
 8025838:	607b      	str	r3, [r7, #4]
   }

   //Determine the actual length of A
   m = mpiGetLength(a);
 802583a:	68b8      	ldr	r0, [r7, #8]
 802583c:	f7ff fbb1 	bl	8024fa2 <mpiGetLength>
 8025840:	61f8      	str	r0, [r7, #28]
   //Determine the actual length of B
   n = mpiGetLength(b);
 8025842:	6878      	ldr	r0, [r7, #4]
 8025844:	f7ff fbad 	bl	8024fa2 <mpiGetLength>
 8025848:	61b8      	str	r0, [r7, #24]

   //Extend the size of the destination register as needed
   MPI_CHECK(mpiGrow(r, m));
 802584a:	69f9      	ldr	r1, [r7, #28]
 802584c:	68f8      	ldr	r0, [r7, #12]
 802584e:	f7ff fb49 	bl	8024ee4 <mpiGrow>
 8025852:	4603      	mov	r3, r0
 8025854:	82fb      	strh	r3, [r7, #22]
 8025856:	8afb      	ldrh	r3, [r7, #22]
 8025858:	2b00      	cmp	r3, #0
 802585a:	f040 8087 	bne.w	802596c <mpiSubAbs+0x158>

   //The result is always positive
   r->sign = 1;
 802585e:	68fb      	ldr	r3, [r7, #12]
 8025860:	2201      	movs	r2, #1
 8025862:	601a      	str	r2, [r3, #0]
   //Clear carry bit
   c = 0;
 8025864:	2300      	movs	r3, #0
 8025866:	62fb      	str	r3, [r7, #44]	@ 0x2c

   //Subtract operands
   for(i = 0; i < n; i++)
 8025868:	2300      	movs	r3, #0
 802586a:	627b      	str	r3, [r7, #36]	@ 0x24
 802586c:	e02d      	b.n	80258ca <mpiSubAbs+0xb6>
   {
      //Read first operand
      d = a->data[i];
 802586e:	68bb      	ldr	r3, [r7, #8]
 8025870:	689a      	ldr	r2, [r3, #8]
 8025872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025874:	009b      	lsls	r3, r3, #2
 8025876:	4413      	add	r3, r2
 8025878:	681b      	ldr	r3, [r3, #0]
 802587a:	62bb      	str	r3, [r7, #40]	@ 0x28

      //Check the carry bit
      if(c)
 802587c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802587e:	2b00      	cmp	r3, #0
 8025880:	d007      	beq.n	8025892 <mpiSubAbs+0x7e>
      {
         //Update carry bit
         if(d != 0) c = 0;
 8025882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025884:	2b00      	cmp	r3, #0
 8025886:	d001      	beq.n	802588c <mpiSubAbs+0x78>
 8025888:	2300      	movs	r3, #0
 802588a:	62fb      	str	r3, [r7, #44]	@ 0x2c
         //Propagate carry bit
         d -= 1;
 802588c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802588e:	3b01      	subs	r3, #1
 8025890:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      //Update carry bit
      if(d < b->data[i]) c = 1;
 8025892:	687b      	ldr	r3, [r7, #4]
 8025894:	689a      	ldr	r2, [r3, #8]
 8025896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025898:	009b      	lsls	r3, r3, #2
 802589a:	4413      	add	r3, r2
 802589c:	681b      	ldr	r3, [r3, #0]
 802589e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80258a0:	429a      	cmp	r2, r3
 80258a2:	d201      	bcs.n	80258a8 <mpiSubAbs+0x94>
 80258a4:	2301      	movs	r3, #1
 80258a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      //Perform subtraction
      r->data[i] = d - b->data[i];
 80258a8:	687b      	ldr	r3, [r7, #4]
 80258aa:	689a      	ldr	r2, [r3, #8]
 80258ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80258ae:	009b      	lsls	r3, r3, #2
 80258b0:	4413      	add	r3, r2
 80258b2:	681a      	ldr	r2, [r3, #0]
 80258b4:	68fb      	ldr	r3, [r7, #12]
 80258b6:	6899      	ldr	r1, [r3, #8]
 80258b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80258ba:	009b      	lsls	r3, r3, #2
 80258bc:	440b      	add	r3, r1
 80258be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80258c0:	1a8a      	subs	r2, r1, r2
 80258c2:	601a      	str	r2, [r3, #0]
   for(i = 0; i < n; i++)
 80258c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80258c6:	3301      	adds	r3, #1
 80258c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80258ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80258cc:	69bb      	ldr	r3, [r7, #24]
 80258ce:	429a      	cmp	r2, r3
 80258d0:	d3cd      	bcc.n	802586e <mpiSubAbs+0x5a>
   }

   //Loop as long as the carry bit is set
   for(i = n; c && i < m; i++)
 80258d2:	69bb      	ldr	r3, [r7, #24]
 80258d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80258d6:	e019      	b.n	802590c <mpiSubAbs+0xf8>
   {
      //Update carry bit
      if(a->data[i] != 0) c = 0;
 80258d8:	68bb      	ldr	r3, [r7, #8]
 80258da:	689a      	ldr	r2, [r3, #8]
 80258dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80258de:	009b      	lsls	r3, r3, #2
 80258e0:	4413      	add	r3, r2
 80258e2:	681b      	ldr	r3, [r3, #0]
 80258e4:	2b00      	cmp	r3, #0
 80258e6:	d001      	beq.n	80258ec <mpiSubAbs+0xd8>
 80258e8:	2300      	movs	r3, #0
 80258ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      //Propagate carry bit
      r->data[i] = a->data[i] - 1;
 80258ec:	68bb      	ldr	r3, [r7, #8]
 80258ee:	689a      	ldr	r2, [r3, #8]
 80258f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80258f2:	009b      	lsls	r3, r3, #2
 80258f4:	4413      	add	r3, r2
 80258f6:	681a      	ldr	r2, [r3, #0]
 80258f8:	68fb      	ldr	r3, [r7, #12]
 80258fa:	6899      	ldr	r1, [r3, #8]
 80258fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80258fe:	009b      	lsls	r3, r3, #2
 8025900:	440b      	add	r3, r1
 8025902:	3a01      	subs	r2, #1
 8025904:	601a      	str	r2, [r3, #0]
   for(i = n; c && i < m; i++)
 8025906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025908:	3301      	adds	r3, #1
 802590a:	627b      	str	r3, [r7, #36]	@ 0x24
 802590c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802590e:	2b00      	cmp	r3, #0
 8025910:	d003      	beq.n	802591a <mpiSubAbs+0x106>
 8025912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025914:	69fb      	ldr	r3, [r7, #28]
 8025916:	429a      	cmp	r2, r3
 8025918:	d3de      	bcc.n	80258d8 <mpiSubAbs+0xc4>
   }

   //R and A are not the same instance?
   if(r != a)
 802591a:	68fa      	ldr	r2, [r7, #12]
 802591c:	68bb      	ldr	r3, [r7, #8]
 802591e:	429a      	cmp	r2, r3
 8025920:	d023      	beq.n	802596a <mpiSubAbs+0x156>
   {
      //Copy the remaining words
      for(; i < m; i++)
 8025922:	e00e      	b.n	8025942 <mpiSubAbs+0x12e>
      {
         r->data[i] = a->data[i];
 8025924:	68bb      	ldr	r3, [r7, #8]
 8025926:	689a      	ldr	r2, [r3, #8]
 8025928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802592a:	009b      	lsls	r3, r3, #2
 802592c:	441a      	add	r2, r3
 802592e:	68fb      	ldr	r3, [r7, #12]
 8025930:	6899      	ldr	r1, [r3, #8]
 8025932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025934:	009b      	lsls	r3, r3, #2
 8025936:	440b      	add	r3, r1
 8025938:	6812      	ldr	r2, [r2, #0]
 802593a:	601a      	str	r2, [r3, #0]
      for(; i < m; i++)
 802593c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802593e:	3301      	adds	r3, #1
 8025940:	627b      	str	r3, [r7, #36]	@ 0x24
 8025942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025944:	69fb      	ldr	r3, [r7, #28]
 8025946:	429a      	cmp	r2, r3
 8025948:	d3ec      	bcc.n	8025924 <mpiSubAbs+0x110>
      }

      //Zero the upper part
      for(; i < r->size; i++)
 802594a:	e009      	b.n	8025960 <mpiSubAbs+0x14c>
      {
         r->data[i] = 0;
 802594c:	68fb      	ldr	r3, [r7, #12]
 802594e:	689a      	ldr	r2, [r3, #8]
 8025950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025952:	009b      	lsls	r3, r3, #2
 8025954:	4413      	add	r3, r2
 8025956:	2200      	movs	r2, #0
 8025958:	601a      	str	r2, [r3, #0]
      for(; i < r->size; i++)
 802595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802595c:	3301      	adds	r3, #1
 802595e:	627b      	str	r3, [r7, #36]	@ 0x24
 8025960:	68fb      	ldr	r3, [r7, #12]
 8025962:	685b      	ldr	r3, [r3, #4]
 8025964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025966:	429a      	cmp	r2, r3
 8025968:	d3f0      	bcc.n	802594c <mpiSubAbs+0x138>
      }
   }

end:
 802596a:	bf00      	nop
   //Return status code
   return error;
 802596c:	8afb      	ldrh	r3, [r7, #22]
}
 802596e:	4618      	mov	r0, r3
 8025970:	3730      	adds	r7, #48	@ 0x30
 8025972:	46bd      	mov	sp, r7
 8025974:	bd80      	pop	{r7, pc}

08025976 <mpiShiftLeft>:
 * @param[in] n The number of bits to shift
 * @return Error code
 **/

error_t mpiShiftLeft(Mpi *r, uint_t n)
{
 8025976:	b580      	push	{r7, lr}
 8025978:	b088      	sub	sp, #32
 802597a:	af00      	add	r7, sp, #0
 802597c:	6078      	str	r0, [r7, #4]
 802597e:	6039      	str	r1, [r7, #0]
   uint_t k;
   uint_t n1;
   uint_t n2;

   //Check parameters
   if(r->size == 0 || n == 0)
 8025980:	687b      	ldr	r3, [r7, #4]
 8025982:	685b      	ldr	r3, [r3, #4]
 8025984:	2b00      	cmp	r3, #0
 8025986:	d002      	beq.n	802598e <mpiShiftLeft+0x18>
 8025988:	683b      	ldr	r3, [r7, #0]
 802598a:	2b00      	cmp	r3, #0
 802598c:	d101      	bne.n	8025992 <mpiShiftLeft+0x1c>
      return NO_ERROR;
 802598e:	2300      	movs	r3, #0
 8025990:	e07d      	b.n	8025a8e <mpiShiftLeft+0x118>

   //Determine the actual length of r
   k = mpiGetBitLength(r);
 8025992:	6878      	ldr	r0, [r7, #4]
 8025994:	f7ff fb66 	bl	8025064 <mpiGetBitLength>
 8025998:	61b8      	str	r0, [r7, #24]

   //Number of 32-bit words to shift
   n1 = n / (MPI_INT_SIZE * 8);
 802599a:	683b      	ldr	r3, [r7, #0]
 802599c:	095b      	lsrs	r3, r3, #5
 802599e:	617b      	str	r3, [r7, #20]
   //Number of bits to shift
   n2 = n % (MPI_INT_SIZE * 8);
 80259a0:	683b      	ldr	r3, [r7, #0]
 80259a2:	f003 031f 	and.w	r3, r3, #31
 80259a6:	613b      	str	r3, [r7, #16]

   //Increase the size of the multiple-precision number
   error = mpiGrow(r, (k + n + 31) / 32);
 80259a8:	69ba      	ldr	r2, [r7, #24]
 80259aa:	683b      	ldr	r3, [r7, #0]
 80259ac:	4413      	add	r3, r2
 80259ae:	331f      	adds	r3, #31
 80259b0:	095b      	lsrs	r3, r3, #5
 80259b2:	4619      	mov	r1, r3
 80259b4:	6878      	ldr	r0, [r7, #4]
 80259b6:	f7ff fa95 	bl	8024ee4 <mpiGrow>
 80259ba:	4603      	mov	r3, r0
 80259bc:	81fb      	strh	r3, [r7, #14]
   //Check return code
   if(error)
 80259be:	89fb      	ldrh	r3, [r7, #14]
 80259c0:	2b00      	cmp	r3, #0
 80259c2:	d001      	beq.n	80259c8 <mpiShiftLeft+0x52>
      return error;
 80259c4:	89fb      	ldrh	r3, [r7, #14]
 80259c6:	e062      	b.n	8025a8e <mpiShiftLeft+0x118>

   //First, shift words
   if(n1 > 0)
 80259c8:	697b      	ldr	r3, [r7, #20]
 80259ca:	2b00      	cmp	r3, #0
 80259cc:	d02a      	beq.n	8025a24 <mpiShiftLeft+0xae>
   {
      //Process the most significant words
      for(i = r->size - 1; i >= n1; i--)
 80259ce:	687b      	ldr	r3, [r7, #4]
 80259d0:	685b      	ldr	r3, [r3, #4]
 80259d2:	3b01      	subs	r3, #1
 80259d4:	61fb      	str	r3, [r7, #28]
 80259d6:	e010      	b.n	80259fa <mpiShiftLeft+0x84>
      {
         r->data[i] = r->data[i - n1];
 80259d8:	687b      	ldr	r3, [r7, #4]
 80259da:	689a      	ldr	r2, [r3, #8]
 80259dc:	69f9      	ldr	r1, [r7, #28]
 80259de:	697b      	ldr	r3, [r7, #20]
 80259e0:	1acb      	subs	r3, r1, r3
 80259e2:	009b      	lsls	r3, r3, #2
 80259e4:	441a      	add	r2, r3
 80259e6:	687b      	ldr	r3, [r7, #4]
 80259e8:	6899      	ldr	r1, [r3, #8]
 80259ea:	69fb      	ldr	r3, [r7, #28]
 80259ec:	009b      	lsls	r3, r3, #2
 80259ee:	440b      	add	r3, r1
 80259f0:	6812      	ldr	r2, [r2, #0]
 80259f2:	601a      	str	r2, [r3, #0]
      for(i = r->size - 1; i >= n1; i--)
 80259f4:	69fb      	ldr	r3, [r7, #28]
 80259f6:	3b01      	subs	r3, #1
 80259f8:	61fb      	str	r3, [r7, #28]
 80259fa:	69fa      	ldr	r2, [r7, #28]
 80259fc:	697b      	ldr	r3, [r7, #20]
 80259fe:	429a      	cmp	r2, r3
 8025a00:	d2ea      	bcs.n	80259d8 <mpiShiftLeft+0x62>
      }

      //Fill the rest with zeroes
      for(i = 0; i < n1; i++)
 8025a02:	2300      	movs	r3, #0
 8025a04:	61fb      	str	r3, [r7, #28]
 8025a06:	e009      	b.n	8025a1c <mpiShiftLeft+0xa6>
      {
         r->data[i] = 0;
 8025a08:	687b      	ldr	r3, [r7, #4]
 8025a0a:	689a      	ldr	r2, [r3, #8]
 8025a0c:	69fb      	ldr	r3, [r7, #28]
 8025a0e:	009b      	lsls	r3, r3, #2
 8025a10:	4413      	add	r3, r2
 8025a12:	2200      	movs	r2, #0
 8025a14:	601a      	str	r2, [r3, #0]
      for(i = 0; i < n1; i++)
 8025a16:	69fb      	ldr	r3, [r7, #28]
 8025a18:	3301      	adds	r3, #1
 8025a1a:	61fb      	str	r3, [r7, #28]
 8025a1c:	69fa      	ldr	r2, [r7, #28]
 8025a1e:	697b      	ldr	r3, [r7, #20]
 8025a20:	429a      	cmp	r2, r3
 8025a22:	d3f1      	bcc.n	8025a08 <mpiShiftLeft+0x92>
      }
   }

   //Then shift bits
   if(n2 > 0)
 8025a24:	693b      	ldr	r3, [r7, #16]
 8025a26:	2b00      	cmp	r3, #0
 8025a28:	d030      	beq.n	8025a8c <mpiShiftLeft+0x116>
   {
      //Process the most significant words
      for(i = r->size - 1; i >= 1; i--)
 8025a2a:	687b      	ldr	r3, [r7, #4]
 8025a2c:	685b      	ldr	r3, [r3, #4]
 8025a2e:	3b01      	subs	r3, #1
 8025a30:	61fb      	str	r3, [r7, #28]
 8025a32:	e01f      	b.n	8025a74 <mpiShiftLeft+0xfe>
      {
         r->data[i] = (r->data[i] << n2) | (r->data[i - 1] >> (32 - n2));
 8025a34:	687b      	ldr	r3, [r7, #4]
 8025a36:	689a      	ldr	r2, [r3, #8]
 8025a38:	69fb      	ldr	r3, [r7, #28]
 8025a3a:	009b      	lsls	r3, r3, #2
 8025a3c:	4413      	add	r3, r2
 8025a3e:	681a      	ldr	r2, [r3, #0]
 8025a40:	693b      	ldr	r3, [r7, #16]
 8025a42:	fa02 f103 	lsl.w	r1, r2, r3
 8025a46:	687b      	ldr	r3, [r7, #4]
 8025a48:	689a      	ldr	r2, [r3, #8]
 8025a4a:	69fb      	ldr	r3, [r7, #28]
 8025a4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8025a50:	3b01      	subs	r3, #1
 8025a52:	009b      	lsls	r3, r3, #2
 8025a54:	4413      	add	r3, r2
 8025a56:	681a      	ldr	r2, [r3, #0]
 8025a58:	693b      	ldr	r3, [r7, #16]
 8025a5a:	f1c3 0320 	rsb	r3, r3, #32
 8025a5e:	40da      	lsrs	r2, r3
 8025a60:	687b      	ldr	r3, [r7, #4]
 8025a62:	6898      	ldr	r0, [r3, #8]
 8025a64:	69fb      	ldr	r3, [r7, #28]
 8025a66:	009b      	lsls	r3, r3, #2
 8025a68:	4403      	add	r3, r0
 8025a6a:	430a      	orrs	r2, r1
 8025a6c:	601a      	str	r2, [r3, #0]
      for(i = r->size - 1; i >= 1; i--)
 8025a6e:	69fb      	ldr	r3, [r7, #28]
 8025a70:	3b01      	subs	r3, #1
 8025a72:	61fb      	str	r3, [r7, #28]
 8025a74:	69fb      	ldr	r3, [r7, #28]
 8025a76:	2b00      	cmp	r3, #0
 8025a78:	d1dc      	bne.n	8025a34 <mpiShiftLeft+0xbe>
      }

      //The least significant word requires a special handling
      r->data[0] <<= n2;
 8025a7a:	687b      	ldr	r3, [r7, #4]
 8025a7c:	689b      	ldr	r3, [r3, #8]
 8025a7e:	6819      	ldr	r1, [r3, #0]
 8025a80:	687b      	ldr	r3, [r7, #4]
 8025a82:	689b      	ldr	r3, [r3, #8]
 8025a84:	693a      	ldr	r2, [r7, #16]
 8025a86:	fa01 f202 	lsl.w	r2, r1, r2
 8025a8a:	601a      	str	r2, [r3, #0]
   }

   //Shift operation is complete
   return NO_ERROR;
 8025a8c:	2300      	movs	r3, #0
}
 8025a8e:	4618      	mov	r0, r3
 8025a90:	3720      	adds	r7, #32
 8025a92:	46bd      	mov	sp, r7
 8025a94:	bd80      	pop	{r7, pc}

08025a96 <mpiShiftRight>:
 * @param[in] n The number of bits to shift
 * @return Error code
 **/

error_t mpiShiftRight(Mpi *r, uint_t n)
{
 8025a96:	b480      	push	{r7}
 8025a98:	b087      	sub	sp, #28
 8025a9a:	af00      	add	r7, sp, #0
 8025a9c:	6078      	str	r0, [r7, #4]
 8025a9e:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t m;

   //Number of 32-bit words to shift
   uint_t n1 = n / (MPI_INT_SIZE * 8);
 8025aa0:	683b      	ldr	r3, [r7, #0]
 8025aa2:	095b      	lsrs	r3, r3, #5
 8025aa4:	613b      	str	r3, [r7, #16]
   //Number of bits to shift
   uint_t n2 = n % (MPI_INT_SIZE * 8);
 8025aa6:	683b      	ldr	r3, [r7, #0]
 8025aa8:	f003 031f 	and.w	r3, r3, #31
 8025aac:	60fb      	str	r3, [r7, #12]

   //Check parameters
   if(n1 >= r->size)
 8025aae:	687b      	ldr	r3, [r7, #4]
 8025ab0:	685b      	ldr	r3, [r3, #4]
 8025ab2:	693a      	ldr	r2, [r7, #16]
 8025ab4:	429a      	cmp	r2, r3
 8025ab6:	d313      	bcc.n	8025ae0 <mpiShiftRight+0x4a>
   {
      //Clear the contents of the multiple precision integer
      for(i = 0; i < r->size; i++)
 8025ab8:	2300      	movs	r3, #0
 8025aba:	617b      	str	r3, [r7, #20]
 8025abc:	e009      	b.n	8025ad2 <mpiShiftRight+0x3c>
      {
         r->data[i] = 0;
 8025abe:	687b      	ldr	r3, [r7, #4]
 8025ac0:	689a      	ldr	r2, [r3, #8]
 8025ac2:	697b      	ldr	r3, [r7, #20]
 8025ac4:	009b      	lsls	r3, r3, #2
 8025ac6:	4413      	add	r3, r2
 8025ac8:	2200      	movs	r2, #0
 8025aca:	601a      	str	r2, [r3, #0]
      for(i = 0; i < r->size; i++)
 8025acc:	697b      	ldr	r3, [r7, #20]
 8025ace:	3301      	adds	r3, #1
 8025ad0:	617b      	str	r3, [r7, #20]
 8025ad2:	687b      	ldr	r3, [r7, #4]
 8025ad4:	685b      	ldr	r3, [r3, #4]
 8025ad6:	697a      	ldr	r2, [r7, #20]
 8025ad8:	429a      	cmp	r2, r3
 8025ada:	d3f0      	bcc.n	8025abe <mpiShiftRight+0x28>
      }

      //We are done
      return NO_ERROR;
 8025adc:	2300      	movs	r3, #0
 8025ade:	e06f      	b.n	8025bc0 <mpiShiftRight+0x12a>
   }

   //First, shift words
   if(n1 > 0)
 8025ae0:	693b      	ldr	r3, [r7, #16]
 8025ae2:	2b00      	cmp	r3, #0
 8025ae4:	d02e      	beq.n	8025b44 <mpiShiftRight+0xae>
   {
      //Process the least significant words
      for(m = r->size - n1, i = 0; i < m; i++)
 8025ae6:	687b      	ldr	r3, [r7, #4]
 8025ae8:	685a      	ldr	r2, [r3, #4]
 8025aea:	693b      	ldr	r3, [r7, #16]
 8025aec:	1ad3      	subs	r3, r2, r3
 8025aee:	60bb      	str	r3, [r7, #8]
 8025af0:	2300      	movs	r3, #0
 8025af2:	617b      	str	r3, [r7, #20]
 8025af4:	e010      	b.n	8025b18 <mpiShiftRight+0x82>
      {
         r->data[i] = r->data[i + n1];
 8025af6:	687b      	ldr	r3, [r7, #4]
 8025af8:	689a      	ldr	r2, [r3, #8]
 8025afa:	6979      	ldr	r1, [r7, #20]
 8025afc:	693b      	ldr	r3, [r7, #16]
 8025afe:	440b      	add	r3, r1
 8025b00:	009b      	lsls	r3, r3, #2
 8025b02:	441a      	add	r2, r3
 8025b04:	687b      	ldr	r3, [r7, #4]
 8025b06:	6899      	ldr	r1, [r3, #8]
 8025b08:	697b      	ldr	r3, [r7, #20]
 8025b0a:	009b      	lsls	r3, r3, #2
 8025b0c:	440b      	add	r3, r1
 8025b0e:	6812      	ldr	r2, [r2, #0]
 8025b10:	601a      	str	r2, [r3, #0]
      for(m = r->size - n1, i = 0; i < m; i++)
 8025b12:	697b      	ldr	r3, [r7, #20]
 8025b14:	3301      	adds	r3, #1
 8025b16:	617b      	str	r3, [r7, #20]
 8025b18:	697a      	ldr	r2, [r7, #20]
 8025b1a:	68bb      	ldr	r3, [r7, #8]
 8025b1c:	429a      	cmp	r2, r3
 8025b1e:	d3ea      	bcc.n	8025af6 <mpiShiftRight+0x60>
      }

      //Fill the rest with zeroes
      for(i = m; i < r->size; i++)
 8025b20:	68bb      	ldr	r3, [r7, #8]
 8025b22:	617b      	str	r3, [r7, #20]
 8025b24:	e009      	b.n	8025b3a <mpiShiftRight+0xa4>
      {
         r->data[i] = 0;
 8025b26:	687b      	ldr	r3, [r7, #4]
 8025b28:	689a      	ldr	r2, [r3, #8]
 8025b2a:	697b      	ldr	r3, [r7, #20]
 8025b2c:	009b      	lsls	r3, r3, #2
 8025b2e:	4413      	add	r3, r2
 8025b30:	2200      	movs	r2, #0
 8025b32:	601a      	str	r2, [r3, #0]
      for(i = m; i < r->size; i++)
 8025b34:	697b      	ldr	r3, [r7, #20]
 8025b36:	3301      	adds	r3, #1
 8025b38:	617b      	str	r3, [r7, #20]
 8025b3a:	687b      	ldr	r3, [r7, #4]
 8025b3c:	685b      	ldr	r3, [r3, #4]
 8025b3e:	697a      	ldr	r2, [r7, #20]
 8025b40:	429a      	cmp	r2, r3
 8025b42:	d3f0      	bcc.n	8025b26 <mpiShiftRight+0x90>
      }
   }

   //Then shift bits
   if(n2 > 0)
 8025b44:	68fb      	ldr	r3, [r7, #12]
 8025b46:	2b00      	cmp	r3, #0
 8025b48:	d039      	beq.n	8025bbe <mpiShiftRight+0x128>
   {
      //Process the least significant words
      for(m = r->size - n1 - 1, i = 0; i < m; i++)
 8025b4a:	687b      	ldr	r3, [r7, #4]
 8025b4c:	685a      	ldr	r2, [r3, #4]
 8025b4e:	693b      	ldr	r3, [r7, #16]
 8025b50:	1ad3      	subs	r3, r2, r3
 8025b52:	3b01      	subs	r3, #1
 8025b54:	60bb      	str	r3, [r7, #8]
 8025b56:	2300      	movs	r3, #0
 8025b58:	617b      	str	r3, [r7, #20]
 8025b5a:	e01d      	b.n	8025b98 <mpiShiftRight+0x102>
      {
         r->data[i] = (r->data[i] >> n2) | (r->data[i + 1] << (32 - n2));
 8025b5c:	687b      	ldr	r3, [r7, #4]
 8025b5e:	689a      	ldr	r2, [r3, #8]
 8025b60:	697b      	ldr	r3, [r7, #20]
 8025b62:	009b      	lsls	r3, r3, #2
 8025b64:	4413      	add	r3, r2
 8025b66:	681a      	ldr	r2, [r3, #0]
 8025b68:	68fb      	ldr	r3, [r7, #12]
 8025b6a:	fa22 f103 	lsr.w	r1, r2, r3
 8025b6e:	687b      	ldr	r3, [r7, #4]
 8025b70:	689a      	ldr	r2, [r3, #8]
 8025b72:	697b      	ldr	r3, [r7, #20]
 8025b74:	3301      	adds	r3, #1
 8025b76:	009b      	lsls	r3, r3, #2
 8025b78:	4413      	add	r3, r2
 8025b7a:	681a      	ldr	r2, [r3, #0]
 8025b7c:	68fb      	ldr	r3, [r7, #12]
 8025b7e:	f1c3 0320 	rsb	r3, r3, #32
 8025b82:	409a      	lsls	r2, r3
 8025b84:	687b      	ldr	r3, [r7, #4]
 8025b86:	6898      	ldr	r0, [r3, #8]
 8025b88:	697b      	ldr	r3, [r7, #20]
 8025b8a:	009b      	lsls	r3, r3, #2
 8025b8c:	4403      	add	r3, r0
 8025b8e:	430a      	orrs	r2, r1
 8025b90:	601a      	str	r2, [r3, #0]
      for(m = r->size - n1 - 1, i = 0; i < m; i++)
 8025b92:	697b      	ldr	r3, [r7, #20]
 8025b94:	3301      	adds	r3, #1
 8025b96:	617b      	str	r3, [r7, #20]
 8025b98:	697a      	ldr	r2, [r7, #20]
 8025b9a:	68bb      	ldr	r3, [r7, #8]
 8025b9c:	429a      	cmp	r2, r3
 8025b9e:	d3dd      	bcc.n	8025b5c <mpiShiftRight+0xc6>
      }

      //The most significant word requires a special handling
      r->data[m] >>= n2;
 8025ba0:	687b      	ldr	r3, [r7, #4]
 8025ba2:	689a      	ldr	r2, [r3, #8]
 8025ba4:	68bb      	ldr	r3, [r7, #8]
 8025ba6:	009b      	lsls	r3, r3, #2
 8025ba8:	4413      	add	r3, r2
 8025baa:	6819      	ldr	r1, [r3, #0]
 8025bac:	687b      	ldr	r3, [r7, #4]
 8025bae:	689a      	ldr	r2, [r3, #8]
 8025bb0:	68bb      	ldr	r3, [r7, #8]
 8025bb2:	009b      	lsls	r3, r3, #2
 8025bb4:	4413      	add	r3, r2
 8025bb6:	68fa      	ldr	r2, [r7, #12]
 8025bb8:	fa21 f202 	lsr.w	r2, r1, r2
 8025bbc:	601a      	str	r2, [r3, #0]
   }

   //Shift operation is complete
   return NO_ERROR;
 8025bbe:	2300      	movs	r3, #0
}
 8025bc0:	4618      	mov	r0, r3
 8025bc2:	371c      	adds	r7, #28
 8025bc4:	46bd      	mov	sp, r7
 8025bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bca:	4770      	bx	lr

08025bcc <mpiMul>:
 * @param[in] b Second operand B
 * @return Error code
 **/

__weak_func error_t mpiMul(Mpi *r, const Mpi *a, const Mpi *b)
{
 8025bcc:	b590      	push	{r4, r7, lr}
 8025bce:	b08f      	sub	sp, #60	@ 0x3c
 8025bd0:	af00      	add	r7, sp, #0
 8025bd2:	60f8      	str	r0, [r7, #12]
 8025bd4:	60b9      	str	r1, [r7, #8]
 8025bd6:	607a      	str	r2, [r7, #4]
   uint_t n;
   Mpi ta;
   Mpi tb;

   //Initialize multiple precision integers
   mpiInit(&ta);
 8025bd8:	f107 031c 	add.w	r3, r7, #28
 8025bdc:	4618      	mov	r0, r3
 8025bde:	f7ff f945 	bl	8024e6c <mpiInit>
   mpiInit(&tb);
 8025be2:	f107 0310 	add.w	r3, r7, #16
 8025be6:	4618      	mov	r0, r3
 8025be8:	f7ff f940 	bl	8024e6c <mpiInit>

   //R and A are the same instance?
   if(r == a)
 8025bec:	68fa      	ldr	r2, [r7, #12]
 8025bee:	68bb      	ldr	r3, [r7, #8]
 8025bf0:	429a      	cmp	r2, r3
 8025bf2:	d10e      	bne.n	8025c12 <mpiMul+0x46>
   {
      //Copy A to TA
      MPI_CHECK(mpiCopy(&ta, a));
 8025bf4:	f107 031c 	add.w	r3, r7, #28
 8025bf8:	68b9      	ldr	r1, [r7, #8]
 8025bfa:	4618      	mov	r0, r3
 8025bfc:	f7ff fb65 	bl	80252ca <mpiCopy>
 8025c00:	4603      	mov	r3, r0
 8025c02:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8025c04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8025c06:	2b00      	cmp	r3, #0
 8025c08:	f040 8083 	bne.w	8025d12 <mpiMul+0x146>
      //Use TA instead of A
      a = &ta;
 8025c0c:	f107 031c 	add.w	r3, r7, #28
 8025c10:	60bb      	str	r3, [r7, #8]
   }

   //R and B are the same instance?
   if(r == b)
 8025c12:	68fa      	ldr	r2, [r7, #12]
 8025c14:	687b      	ldr	r3, [r7, #4]
 8025c16:	429a      	cmp	r2, r3
 8025c18:	d10d      	bne.n	8025c36 <mpiMul+0x6a>
   {
      //Copy B to TB
      MPI_CHECK(mpiCopy(&tb, b));
 8025c1a:	f107 0310 	add.w	r3, r7, #16
 8025c1e:	6879      	ldr	r1, [r7, #4]
 8025c20:	4618      	mov	r0, r3
 8025c22:	f7ff fb52 	bl	80252ca <mpiCopy>
 8025c26:	4603      	mov	r3, r0
 8025c28:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8025c2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8025c2c:	2b00      	cmp	r3, #0
 8025c2e:	d170      	bne.n	8025d12 <mpiMul+0x146>
      //Use TB instead of B
      b = &tb;
 8025c30:	f107 0310 	add.w	r3, r7, #16
 8025c34:	607b      	str	r3, [r7, #4]
   }

   //Determine the actual length of A and B
   m = mpiGetLength(a);
 8025c36:	68b8      	ldr	r0, [r7, #8]
 8025c38:	f7ff f9b3 	bl	8024fa2 <mpiGetLength>
 8025c3c:	62f8      	str	r0, [r7, #44]	@ 0x2c
   n = mpiGetLength(b);
 8025c3e:	6878      	ldr	r0, [r7, #4]
 8025c40:	f7ff f9af 	bl	8024fa2 <mpiGetLength>
 8025c44:	62b8      	str	r0, [r7, #40]	@ 0x28

   //Adjust the size of R
   MPI_CHECK(mpiGrow(r, m + n));
 8025c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025c4a:	4413      	add	r3, r2
 8025c4c:	4619      	mov	r1, r3
 8025c4e:	68f8      	ldr	r0, [r7, #12]
 8025c50:	f7ff f948 	bl	8024ee4 <mpiGrow>
 8025c54:	4603      	mov	r3, r0
 8025c56:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8025c58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8025c5a:	2b00      	cmp	r3, #0
 8025c5c:	d159      	bne.n	8025d12 <mpiMul+0x146>
   //Set the sign of R
   r->sign = (a->sign == b->sign) ? 1 : -1;
 8025c5e:	68bb      	ldr	r3, [r7, #8]
 8025c60:	681a      	ldr	r2, [r3, #0]
 8025c62:	687b      	ldr	r3, [r7, #4]
 8025c64:	681b      	ldr	r3, [r3, #0]
 8025c66:	429a      	cmp	r2, r3
 8025c68:	d101      	bne.n	8025c6e <mpiMul+0xa2>
 8025c6a:	2201      	movs	r2, #1
 8025c6c:	e001      	b.n	8025c72 <mpiMul+0xa6>
 8025c6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8025c72:	68fb      	ldr	r3, [r7, #12]
 8025c74:	601a      	str	r2, [r3, #0]

   //Clear the contents of the destination integer
   for(i = 0; i < r->size; i++)
 8025c76:	2300      	movs	r3, #0
 8025c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8025c7a:	e009      	b.n	8025c90 <mpiMul+0xc4>
   {
      r->data[i] = 0;
 8025c7c:	68fb      	ldr	r3, [r7, #12]
 8025c7e:	689a      	ldr	r2, [r3, #8]
 8025c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025c82:	009b      	lsls	r3, r3, #2
 8025c84:	4413      	add	r3, r2
 8025c86:	2200      	movs	r2, #0
 8025c88:	601a      	str	r2, [r3, #0]
   for(i = 0; i < r->size; i++)
 8025c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025c8c:	3301      	adds	r3, #1
 8025c8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8025c90:	68fb      	ldr	r3, [r7, #12]
 8025c92:	685b      	ldr	r3, [r3, #4]
 8025c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8025c96:	429a      	cmp	r2, r3
 8025c98:	d3f0      	bcc.n	8025c7c <mpiMul+0xb0>
   }

   //Perform multiplication
   if(m < n)
 8025c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025c9e:	429a      	cmp	r2, r3
 8025ca0:	d21b      	bcs.n	8025cda <mpiMul+0x10e>
   {
      for(i = 0; i < m; i++)
 8025ca2:	2300      	movs	r3, #0
 8025ca4:	633b      	str	r3, [r7, #48]	@ 0x30
 8025ca6:	e013      	b.n	8025cd0 <mpiMul+0x104>
      {
         mpiMulAccCore(&r->data[i], b->data, n, a->data[i]);
 8025ca8:	68fb      	ldr	r3, [r7, #12]
 8025caa:	689a      	ldr	r2, [r3, #8]
 8025cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025cae:	009b      	lsls	r3, r3, #2
 8025cb0:	18d0      	adds	r0, r2, r3
 8025cb2:	687b      	ldr	r3, [r7, #4]
 8025cb4:	6899      	ldr	r1, [r3, #8]
 8025cb6:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8025cb8:	68bb      	ldr	r3, [r7, #8]
 8025cba:	689a      	ldr	r2, [r3, #8]
 8025cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025cbe:	009b      	lsls	r3, r3, #2
 8025cc0:	4413      	add	r3, r2
 8025cc2:	681b      	ldr	r3, [r3, #0]
 8025cc4:	4622      	mov	r2, r4
 8025cc6:	f000 fcce 	bl	8026666 <mpiMulAccCore>
      for(i = 0; i < m; i++)
 8025cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025ccc:	3301      	adds	r3, #1
 8025cce:	633b      	str	r3, [r7, #48]	@ 0x30
 8025cd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8025cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025cd4:	429a      	cmp	r2, r3
 8025cd6:	d3e7      	bcc.n	8025ca8 <mpiMul+0xdc>
 8025cd8:	e01b      	b.n	8025d12 <mpiMul+0x146>
      }
   }
   else
   {
      for(i = 0; i < n; i++)
 8025cda:	2300      	movs	r3, #0
 8025cdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8025cde:	e013      	b.n	8025d08 <mpiMul+0x13c>
      {
         mpiMulAccCore(&r->data[i], a->data, m, b->data[i]);
 8025ce0:	68fb      	ldr	r3, [r7, #12]
 8025ce2:	689a      	ldr	r2, [r3, #8]
 8025ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025ce6:	009b      	lsls	r3, r3, #2
 8025ce8:	18d0      	adds	r0, r2, r3
 8025cea:	68bb      	ldr	r3, [r7, #8]
 8025cec:	6899      	ldr	r1, [r3, #8]
 8025cee:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8025cf0:	687b      	ldr	r3, [r7, #4]
 8025cf2:	689a      	ldr	r2, [r3, #8]
 8025cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025cf6:	009b      	lsls	r3, r3, #2
 8025cf8:	4413      	add	r3, r2
 8025cfa:	681b      	ldr	r3, [r3, #0]
 8025cfc:	4622      	mov	r2, r4
 8025cfe:	f000 fcb2 	bl	8026666 <mpiMulAccCore>
      for(i = 0; i < n; i++)
 8025d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025d04:	3301      	adds	r3, #1
 8025d06:	633b      	str	r3, [r7, #48]	@ 0x30
 8025d08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8025d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025d0c:	429a      	cmp	r2, r3
 8025d0e:	d3e7      	bcc.n	8025ce0 <mpiMul+0x114>
      }
   }

end:
 8025d10:	bf00      	nop
   //Release multiple precision integers
   mpiFree(&ta);
 8025d12:	f107 031c 	add.w	r3, r7, #28
 8025d16:	4618      	mov	r0, r3
 8025d18:	f7ff f8bb 	bl	8024e92 <mpiFree>
   mpiFree(&tb);
 8025d1c:	f107 0310 	add.w	r3, r7, #16
 8025d20:	4618      	mov	r0, r3
 8025d22:	f7ff f8b6 	bl	8024e92 <mpiFree>

   //Return status code
   return error;
 8025d26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8025d28:	4618      	mov	r0, r3
 8025d2a:	373c      	adds	r7, #60	@ 0x3c
 8025d2c:	46bd      	mov	sp, r7
 8025d2e:	bd90      	pop	{r4, r7, pc}

08025d30 <mpiMod>:
 * @param[in] p The modulus P
 * @return Error code
 **/

error_t mpiMod(Mpi *r, const Mpi *a, const Mpi *p)
{
 8025d30:	b580      	push	{r7, lr}
 8025d32:	b08c      	sub	sp, #48	@ 0x30
 8025d34:	af00      	add	r7, sp, #0
 8025d36:	60f8      	str	r0, [r7, #12]
 8025d38:	60b9      	str	r1, [r7, #8]
 8025d3a:	607a      	str	r2, [r7, #4]
   uint_t m;
   uint_t n;
   Mpi c;

   //Make sure the modulus is positive
   if(mpiCompInt(p, 0) <= 0)
 8025d3c:	2100      	movs	r1, #0
 8025d3e:	6878      	ldr	r0, [r7, #4]
 8025d40:	f7ff fa54 	bl	80251ec <mpiCompInt>
 8025d44:	4603      	mov	r3, r0
 8025d46:	2b00      	cmp	r3, #0
 8025d48:	dc01      	bgt.n	8025d4e <mpiMod+0x1e>
      return ERROR_INVALID_PARAMETER;
 8025d4a:	2302      	movs	r3, #2
 8025d4c:	e070      	b.n	8025e30 <mpiMod+0x100>

   //Initialize multiple precision integer
   mpiInit(&c);
 8025d4e:	f107 0314 	add.w	r3, r7, #20
 8025d52:	4618      	mov	r0, r3
 8025d54:	f7ff f88a 	bl	8024e6c <mpiInit>

   //Save the sign of A
   sign = a->sign;
 8025d58:	68bb      	ldr	r3, [r7, #8]
 8025d5a:	681b      	ldr	r3, [r3, #0]
 8025d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   //Determine the actual length of A
   m = mpiGetBitLength(a);
 8025d5e:	68b8      	ldr	r0, [r7, #8]
 8025d60:	f7ff f980 	bl	8025064 <mpiGetBitLength>
 8025d64:	6278      	str	r0, [r7, #36]	@ 0x24
   //Determine the actual length of P
   n = mpiGetBitLength(p);
 8025d66:	6878      	ldr	r0, [r7, #4]
 8025d68:	f7ff f97c 	bl	8025064 <mpiGetBitLength>
 8025d6c:	6238      	str	r0, [r7, #32]

   //Let R = A
   MPI_CHECK(mpiCopy(r, a));
 8025d6e:	68b9      	ldr	r1, [r7, #8]
 8025d70:	68f8      	ldr	r0, [r7, #12]
 8025d72:	f7ff faaa 	bl	80252ca <mpiCopy>
 8025d76:	4603      	mov	r3, r0
 8025d78:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8025d7a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8025d7c:	2b00      	cmp	r3, #0
 8025d7e:	d151      	bne.n	8025e24 <mpiMod+0xf4>

   if(m >= n)
 8025d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025d82:	6a3b      	ldr	r3, [r7, #32]
 8025d84:	429a      	cmp	r2, r3
 8025d86:	d340      	bcc.n	8025e0a <mpiMod+0xda>
   {
      MPI_CHECK(mpiCopy(&c, p));
 8025d88:	f107 0314 	add.w	r3, r7, #20
 8025d8c:	6879      	ldr	r1, [r7, #4]
 8025d8e:	4618      	mov	r0, r3
 8025d90:	f7ff fa9b 	bl	80252ca <mpiCopy>
 8025d94:	4603      	mov	r3, r0
 8025d96:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8025d98:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8025d9a:	2b00      	cmp	r3, #0
 8025d9c:	d142      	bne.n	8025e24 <mpiMod+0xf4>
      MPI_CHECK(mpiShiftLeft(&c, m - n));
 8025d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025da0:	6a3b      	ldr	r3, [r7, #32]
 8025da2:	1ad2      	subs	r2, r2, r3
 8025da4:	f107 0314 	add.w	r3, r7, #20
 8025da8:	4611      	mov	r1, r2
 8025daa:	4618      	mov	r0, r3
 8025dac:	f7ff fde3 	bl	8025976 <mpiShiftLeft>
 8025db0:	4603      	mov	r3, r0
 8025db2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8025db4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8025db6:	2b00      	cmp	r3, #0
 8025db8:	d134      	bne.n	8025e24 <mpiMod+0xf4>

      while(mpiCompAbs(r, p) >= 0)
 8025dba:	e01f      	b.n	8025dfc <mpiMod+0xcc>
      {
         if(mpiCompAbs(r, &c) >= 0)
 8025dbc:	f107 0314 	add.w	r3, r7, #20
 8025dc0:	4619      	mov	r1, r3
 8025dc2:	68f8      	ldr	r0, [r7, #12]
 8025dc4:	f7ff fa34 	bl	8025230 <mpiCompAbs>
 8025dc8:	4603      	mov	r3, r0
 8025dca:	2b00      	cmp	r3, #0
 8025dcc:	db0b      	blt.n	8025de6 <mpiMod+0xb6>
         {
            MPI_CHECK(mpiSubAbs(r, r, &c));
 8025dce:	f107 0314 	add.w	r3, r7, #20
 8025dd2:	461a      	mov	r2, r3
 8025dd4:	68f9      	ldr	r1, [r7, #12]
 8025dd6:	68f8      	ldr	r0, [r7, #12]
 8025dd8:	f7ff fd1c 	bl	8025814 <mpiSubAbs>
 8025ddc:	4603      	mov	r3, r0
 8025dde:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8025de0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8025de2:	2b00      	cmp	r3, #0
 8025de4:	d11e      	bne.n	8025e24 <mpiMod+0xf4>
         }

         MPI_CHECK(mpiShiftRight(&c, 1));
 8025de6:	f107 0314 	add.w	r3, r7, #20
 8025dea:	2101      	movs	r1, #1
 8025dec:	4618      	mov	r0, r3
 8025dee:	f7ff fe52 	bl	8025a96 <mpiShiftRight>
 8025df2:	4603      	mov	r3, r0
 8025df4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8025df6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8025df8:	2b00      	cmp	r3, #0
 8025dfa:	d113      	bne.n	8025e24 <mpiMod+0xf4>
      while(mpiCompAbs(r, p) >= 0)
 8025dfc:	6879      	ldr	r1, [r7, #4]
 8025dfe:	68f8      	ldr	r0, [r7, #12]
 8025e00:	f7ff fa16 	bl	8025230 <mpiCompAbs>
 8025e04:	4603      	mov	r3, r0
 8025e06:	2b00      	cmp	r3, #0
 8025e08:	dad8      	bge.n	8025dbc <mpiMod+0x8c>
      }
   }

   if(sign < 0)
 8025e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025e0c:	2b00      	cmp	r3, #0
 8025e0e:	da08      	bge.n	8025e22 <mpiMod+0xf2>
   {
      MPI_CHECK(mpiSubAbs(r, p, r));
 8025e10:	68fa      	ldr	r2, [r7, #12]
 8025e12:	6879      	ldr	r1, [r7, #4]
 8025e14:	68f8      	ldr	r0, [r7, #12]
 8025e16:	f7ff fcfd 	bl	8025814 <mpiSubAbs>
 8025e1a:	4603      	mov	r3, r0
 8025e1c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8025e1e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8025e20:	2b00      	cmp	r3, #0
   }

end:
 8025e22:	bf00      	nop
   //Release previously allocated memory
   mpiFree(&c);
 8025e24:	f107 0314 	add.w	r3, r7, #20
 8025e28:	4618      	mov	r0, r3
 8025e2a:	f7ff f832 	bl	8024e92 <mpiFree>

   //Return status code
   return error;
 8025e2e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 8025e30:	4618      	mov	r0, r3
 8025e32:	3730      	adds	r7, #48	@ 0x30
 8025e34:	46bd      	mov	sp, r7
 8025e36:	bd80      	pop	{r7, pc}

08025e38 <mpiMulMod>:
 * @param[in] p The modulus P
 * @return Error code
 **/

__weak_func error_t mpiMulMod(Mpi *r, const Mpi *a, const Mpi *b, const Mpi *p)
{
 8025e38:	b580      	push	{r7, lr}
 8025e3a:	b086      	sub	sp, #24
 8025e3c:	af00      	add	r7, sp, #0
 8025e3e:	60f8      	str	r0, [r7, #12]
 8025e40:	60b9      	str	r1, [r7, #8]
 8025e42:	607a      	str	r2, [r7, #4]
 8025e44:	603b      	str	r3, [r7, #0]
   error_t error;

   //Perform modular multiplication
   MPI_CHECK(mpiMul(r, a, b));
 8025e46:	687a      	ldr	r2, [r7, #4]
 8025e48:	68b9      	ldr	r1, [r7, #8]
 8025e4a:	68f8      	ldr	r0, [r7, #12]
 8025e4c:	f7ff febe 	bl	8025bcc <mpiMul>
 8025e50:	4603      	mov	r3, r0
 8025e52:	82fb      	strh	r3, [r7, #22]
 8025e54:	8afb      	ldrh	r3, [r7, #22]
 8025e56:	2b00      	cmp	r3, #0
 8025e58:	d109      	bne.n	8025e6e <mpiMulMod+0x36>
   MPI_CHECK(mpiMod(r, r, p));
 8025e5a:	683a      	ldr	r2, [r7, #0]
 8025e5c:	68f9      	ldr	r1, [r7, #12]
 8025e5e:	68f8      	ldr	r0, [r7, #12]
 8025e60:	f7ff ff66 	bl	8025d30 <mpiMod>
 8025e64:	4603      	mov	r3, r0
 8025e66:	82fb      	strh	r3, [r7, #22]
 8025e68:	8afb      	ldrh	r3, [r7, #22]
 8025e6a:	2b00      	cmp	r3, #0

end:
 8025e6c:	bf00      	nop
   //Return status code
   return error;
 8025e6e:	8afb      	ldrh	r3, [r7, #22]
}
 8025e70:	4618      	mov	r0, r3
 8025e72:	3718      	adds	r7, #24
 8025e74:	46bd      	mov	sp, r7
 8025e76:	bd80      	pop	{r7, pc}

08025e78 <mpiExpMod>:
 * @param[in] p Modulus
 * @return Error code
 **/

__weak_func error_t mpiExpMod(Mpi *r, const Mpi *a, const Mpi *e, const Mpi *p)
{
 8025e78:	b590      	push	{r4, r7, lr}
 8025e7a:	b0af      	sub	sp, #188	@ 0xbc
 8025e7c:	af02      	add	r7, sp, #8
 8025e7e:	60f8      	str	r0, [r7, #12]
 8025e80:	60b9      	str	r1, [r7, #8]
 8025e82:	607a      	str	r2, [r7, #4]
 8025e84:	603b      	str	r3, [r7, #0]
   Mpi c2;
   Mpi t;
   Mpi s[8];

   //Initialize multiple precision integers
   mpiInit(&b);
 8025e86:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8025e8a:	4618      	mov	r0, r3
 8025e8c:	f7fe ffee 	bl	8024e6c <mpiInit>
   mpiInit(&c2);
 8025e90:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8025e94:	4618      	mov	r0, r3
 8025e96:	f7fe ffe9 	bl	8024e6c <mpiInit>
   mpiInit(&t);
 8025e9a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8025e9e:	4618      	mov	r0, r3
 8025ea0:	f7fe ffe4 	bl	8024e6c <mpiInit>

   //Initialize precomputed values
   for(i = 0; (uint_t) i < arraysize(s); i++)
 8025ea4:	2300      	movs	r3, #0
 8025ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8025eaa:	e010      	b.n	8025ece <mpiExpMod+0x56>
   {
      mpiInit(&s[i]);
 8025eac:	f107 0110 	add.w	r1, r7, #16
 8025eb0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8025eb4:	4613      	mov	r3, r2
 8025eb6:	005b      	lsls	r3, r3, #1
 8025eb8:	4413      	add	r3, r2
 8025eba:	009b      	lsls	r3, r3, #2
 8025ebc:	440b      	add	r3, r1
 8025ebe:	4618      	mov	r0, r3
 8025ec0:	f7fe ffd4 	bl	8024e6c <mpiInit>
   for(i = 0; (uint_t) i < arraysize(s); i++)
 8025ec4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8025ec8:	3301      	adds	r3, #1
 8025eca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8025ece:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8025ed2:	2b07      	cmp	r3, #7
 8025ed4:	d9ea      	bls.n	8025eac <mpiExpMod+0x34>
   }

   //Very small exponents are often selected with low Hamming weight.
   //The sliding window mechanism should be disabled in that case
   d = (mpiGetBitLength(e) <= 32) ? 1 : 4;
 8025ed6:	6878      	ldr	r0, [r7, #4]
 8025ed8:	f7ff f8c4 	bl	8025064 <mpiGetBitLength>
 8025edc:	4603      	mov	r3, r0
 8025ede:	2b20      	cmp	r3, #32
 8025ee0:	d801      	bhi.n	8025ee6 <mpiExpMod+0x6e>
 8025ee2:	2301      	movs	r3, #1
 8025ee4:	e000      	b.n	8025ee8 <mpiExpMod+0x70>
 8025ee6:	2304      	movs	r3, #4
 8025ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

   //Even modulus?
   if(mpiIsEven(p))
 8025eec:	2100      	movs	r1, #0
 8025eee:	6838      	ldr	r0, [r7, #0]
 8025ef0:	f7ff f8f2 	bl	80250d8 <mpiGetBitValue>
 8025ef4:	4603      	mov	r3, r0
 8025ef6:	2b00      	cmp	r3, #0
 8025ef8:	f040 80f5 	bne.w	80260e6 <mpiExpMod+0x26e>
   {
      //Let S[0] = A
      MPI_CHECK(mpiMod(&s[0], a, p));
 8025efc:	f107 0310 	add.w	r3, r7, #16
 8025f00:	683a      	ldr	r2, [r7, #0]
 8025f02:	68b9      	ldr	r1, [r7, #8]
 8025f04:	4618      	mov	r0, r3
 8025f06:	f7ff ff13 	bl	8025d30 <mpiMod>
 8025f0a:	4603      	mov	r3, r0
 8025f0c:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8025f10:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8025f14:	2b00      	cmp	r3, #0
 8025f16:	f040 8291 	bne.w	802643c <mpiExpMod+0x5c4>
      //Let B = A^2
      MPI_CHECK(mpiMulMod(&b, &s[0], &s[0], p));
 8025f1a:	f107 0210 	add.w	r2, r7, #16
 8025f1e:	f107 0110 	add.w	r1, r7, #16
 8025f22:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8025f26:	683b      	ldr	r3, [r7, #0]
 8025f28:	f7ff ff86 	bl	8025e38 <mpiMulMod>
 8025f2c:	4603      	mov	r3, r0
 8025f2e:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8025f32:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8025f36:	2b00      	cmp	r3, #0
 8025f38:	f040 8280 	bne.w	802643c <mpiExpMod+0x5c4>

      //Precompute S[i] = A^(2 * i + 1)
      for(i = 1; i < (1 << (d - 1)); i++)
 8025f3c:	2301      	movs	r3, #1
 8025f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8025f42:	e024      	b.n	8025f8e <mpiExpMod+0x116>
      {
         MPI_CHECK(mpiMulMod(&s[i], &s[i - 1], &b, p));
 8025f44:	f107 0110 	add.w	r1, r7, #16
 8025f48:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8025f4c:	4613      	mov	r3, r2
 8025f4e:	005b      	lsls	r3, r3, #1
 8025f50:	4413      	add	r3, r2
 8025f52:	009b      	lsls	r3, r3, #2
 8025f54:	18c8      	adds	r0, r1, r3
 8025f56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8025f5a:	1e5a      	subs	r2, r3, #1
 8025f5c:	f107 0110 	add.w	r1, r7, #16
 8025f60:	4613      	mov	r3, r2
 8025f62:	005b      	lsls	r3, r3, #1
 8025f64:	4413      	add	r3, r2
 8025f66:	009b      	lsls	r3, r3, #2
 8025f68:	4419      	add	r1, r3
 8025f6a:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8025f6e:	683b      	ldr	r3, [r7, #0]
 8025f70:	f7ff ff62 	bl	8025e38 <mpiMulMod>
 8025f74:	4603      	mov	r3, r0
 8025f76:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8025f7a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8025f7e:	2b00      	cmp	r3, #0
 8025f80:	f040 825c 	bne.w	802643c <mpiExpMod+0x5c4>
      for(i = 1; i < (1 << (d - 1)); i++)
 8025f84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8025f88:	3301      	adds	r3, #1
 8025f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8025f8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8025f92:	3b01      	subs	r3, #1
 8025f94:	2201      	movs	r2, #1
 8025f96:	fa02 f303 	lsl.w	r3, r2, r3
 8025f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8025f9e:	429a      	cmp	r2, r3
 8025fa0:	dbd0      	blt.n	8025f44 <mpiExpMod+0xcc>
      }

      //Let R = 1
      MPI_CHECK(mpiSetValue(r, 1));
 8025fa2:	2101      	movs	r1, #1
 8025fa4:	68f8      	ldr	r0, [r7, #12]
 8025fa6:	f7ff f9d9 	bl	802535c <mpiSetValue>
 8025faa:	4603      	mov	r3, r0
 8025fac:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8025fb0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8025fb4:	2b00      	cmp	r3, #0
 8025fb6:	f040 8241 	bne.w	802643c <mpiExpMod+0x5c4>

      //The exponent is processed in a left-to-right fashion
      i = mpiGetBitLength(e) - 1;
 8025fba:	6878      	ldr	r0, [r7, #4]
 8025fbc:	f7ff f852 	bl	8025064 <mpiGetBitLength>
 8025fc0:	4603      	mov	r3, r0
 8025fc2:	3b01      	subs	r3, #1
 8025fc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      //Perform sliding window exponentiation
      while(i >= 0)
 8025fc8:	e087      	b.n	80260da <mpiExpMod+0x262>
      {
         //The sliding window exponentiation algorithm decomposes E
         //into zero and nonzero windows
         if(!mpiGetBitValue(e, i))
 8025fca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8025fce:	4619      	mov	r1, r3
 8025fd0:	6878      	ldr	r0, [r7, #4]
 8025fd2:	f7ff f881 	bl	80250d8 <mpiGetBitValue>
 8025fd6:	4603      	mov	r3, r0
 8025fd8:	2b00      	cmp	r3, #0
 8025fda:	d113      	bne.n	8026004 <mpiExpMod+0x18c>
         {
            //Compute R = R^2
            MPI_CHECK(mpiMulMod(r, r, r, p));
 8025fdc:	683b      	ldr	r3, [r7, #0]
 8025fde:	68fa      	ldr	r2, [r7, #12]
 8025fe0:	68f9      	ldr	r1, [r7, #12]
 8025fe2:	68f8      	ldr	r0, [r7, #12]
 8025fe4:	f7ff ff28 	bl	8025e38 <mpiMulMod>
 8025fe8:	4603      	mov	r3, r0
 8025fea:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8025fee:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8025ff2:	2b00      	cmp	r3, #0
 8025ff4:	f040 8222 	bne.w	802643c <mpiExpMod+0x5c4>
            //Next bit to be processed
            i--;
 8025ff8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8025ffc:	3b01      	subs	r3, #1
 8025ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8026002:	e06a      	b.n	80260da <mpiExpMod+0x262>
         }
         else
         {
            //Find the longest window
            n = MAX(i - d + 1, 0);
 8026004:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8026008:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 802600c:	1ad3      	subs	r3, r2, r3
 802600e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8026012:	d006      	beq.n	8026022 <mpiExpMod+0x1aa>
 8026014:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8026018:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 802601c:	1ad3      	subs	r3, r2, r3
 802601e:	3301      	adds	r3, #1
 8026020:	e000      	b.n	8026024 <mpiExpMod+0x1ac>
 8026022:	2300      	movs	r3, #0
 8026024:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            //The least significant bit of the window must be equal to 1
            while(!mpiGetBitValue(e, n)) n++;
 8026028:	e004      	b.n	8026034 <mpiExpMod+0x1bc>
 802602a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802602e:	3301      	adds	r3, #1
 8026030:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8026034:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8026038:	4619      	mov	r1, r3
 802603a:	6878      	ldr	r0, [r7, #4]
 802603c:	f7ff f84c 	bl	80250d8 <mpiGetBitValue>
 8026040:	4603      	mov	r3, r0
 8026042:	2b00      	cmp	r3, #0
 8026044:	d0f1      	beq.n	802602a <mpiExpMod+0x1b2>

            //The algorithm processes more than one bit per iteration
            for(u = 0, j = i; j >= n; j--)
 8026046:	2300      	movs	r3, #0
 8026048:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 802604c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8026050:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8026054:	e01f      	b.n	8026096 <mpiExpMod+0x21e>
            {
               //Compute R = R^2
               MPI_CHECK(mpiMulMod(r, r, r, p));
 8026056:	683b      	ldr	r3, [r7, #0]
 8026058:	68fa      	ldr	r2, [r7, #12]
 802605a:	68f9      	ldr	r1, [r7, #12]
 802605c:	68f8      	ldr	r0, [r7, #12]
 802605e:	f7ff feeb 	bl	8025e38 <mpiMulMod>
 8026062:	4603      	mov	r3, r0
 8026064:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8026068:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 802606c:	2b00      	cmp	r3, #0
 802606e:	f040 81e5 	bne.w	802643c <mpiExpMod+0x5c4>
               //Compute the relevant index to be used in the precomputed table
               u = (u << 1) | mpiGetBitValue(e, j);
 8026072:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8026076:	005c      	lsls	r4, r3, #1
 8026078:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 802607c:	4619      	mov	r1, r3
 802607e:	6878      	ldr	r0, [r7, #4]
 8026080:	f7ff f82a 	bl	80250d8 <mpiGetBitValue>
 8026084:	4603      	mov	r3, r0
 8026086:	4323      	orrs	r3, r4
 8026088:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            for(u = 0, j = i; j >= n; j--)
 802608c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8026090:	3b01      	subs	r3, #1
 8026092:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8026096:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 802609a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802609e:	429a      	cmp	r2, r3
 80260a0:	dad9      	bge.n	8026056 <mpiExpMod+0x1de>
            }

            //Perform a single multiplication per iteration
            MPI_CHECK(mpiMulMod(r, r, &s[u >> 1], p));
 80260a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80260a6:	085a      	lsrs	r2, r3, #1
 80260a8:	f107 0110 	add.w	r1, r7, #16
 80260ac:	4613      	mov	r3, r2
 80260ae:	005b      	lsls	r3, r3, #1
 80260b0:	4413      	add	r3, r2
 80260b2:	009b      	lsls	r3, r3, #2
 80260b4:	18ca      	adds	r2, r1, r3
 80260b6:	683b      	ldr	r3, [r7, #0]
 80260b8:	68f9      	ldr	r1, [r7, #12]
 80260ba:	68f8      	ldr	r0, [r7, #12]
 80260bc:	f7ff febc 	bl	8025e38 <mpiMulMod>
 80260c0:	4603      	mov	r3, r0
 80260c2:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80260c6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80260ca:	2b00      	cmp	r3, #0
 80260cc:	f040 81b6 	bne.w	802643c <mpiExpMod+0x5c4>
            //Next bit to be processed
            i = n - 1;
 80260d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80260d4:	3b01      	subs	r3, #1
 80260d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      while(i >= 0)
 80260da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80260de:	2b00      	cmp	r3, #0
 80260e0:	f6bf af73 	bge.w	8025fca <mpiExpMod+0x152>
 80260e4:	e1aa      	b.n	802643c <mpiExpMod+0x5c4>
      }
   }
   else
   {
      //Compute the smaller C = (2^32)^k such as C > P
      k = mpiGetLength(p);
 80260e6:	6838      	ldr	r0, [r7, #0]
 80260e8:	f7fe ff5b 	bl	8024fa2 <mpiGetLength>
 80260ec:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

      //Compute C^2 mod P
      MPI_CHECK(mpiSetValue(&c2, 1));
 80260f0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80260f4:	2101      	movs	r1, #1
 80260f6:	4618      	mov	r0, r3
 80260f8:	f7ff f930 	bl	802535c <mpiSetValue>
 80260fc:	4603      	mov	r3, r0
 80260fe:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8026102:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8026106:	2b00      	cmp	r3, #0
 8026108:	f040 8198 	bne.w	802643c <mpiExpMod+0x5c4>
      MPI_CHECK(mpiShiftLeft(&c2, 2 * k * (MPI_INT_SIZE * 8)));
 802610c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8026110:	019a      	lsls	r2, r3, #6
 8026112:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8026116:	4611      	mov	r1, r2
 8026118:	4618      	mov	r0, r3
 802611a:	f7ff fc2c 	bl	8025976 <mpiShiftLeft>
 802611e:	4603      	mov	r3, r0
 8026120:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8026124:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8026128:	2b00      	cmp	r3, #0
 802612a:	f040 8187 	bne.w	802643c <mpiExpMod+0x5c4>
      MPI_CHECK(mpiMod(&c2, &c2, p));
 802612e:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8026132:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8026136:	683a      	ldr	r2, [r7, #0]
 8026138:	4618      	mov	r0, r3
 802613a:	f7ff fdf9 	bl	8025d30 <mpiMod>
 802613e:	4603      	mov	r3, r0
 8026140:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8026144:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8026148:	2b00      	cmp	r3, #0
 802614a:	f040 8177 	bne.w	802643c <mpiExpMod+0x5c4>

      //Let B = A * C mod P
      if(mpiComp(a, p) >= 0)
 802614e:	6839      	ldr	r1, [r7, #0]
 8026150:	68b8      	ldr	r0, [r7, #8]
 8026152:	f7fe ffe5 	bl	8025120 <mpiComp>
 8026156:	4603      	mov	r3, r0
 8026158:	2b00      	cmp	r3, #0
 802615a:	db25      	blt.n	80261a8 <mpiExpMod+0x330>
      {
         MPI_CHECK(mpiMod(&b, a, p));
 802615c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8026160:	683a      	ldr	r2, [r7, #0]
 8026162:	68b9      	ldr	r1, [r7, #8]
 8026164:	4618      	mov	r0, r3
 8026166:	f7ff fde3 	bl	8025d30 <mpiMod>
 802616a:	4603      	mov	r3, r0
 802616c:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8026170:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8026174:	2b00      	cmp	r3, #0
 8026176:	f040 8161 	bne.w	802643c <mpiExpMod+0x5c4>
         MPI_CHECK(mpiMontgomeryMul(&b, &b, &c2, k, p, &t));
 802617a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 802617e:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8026182:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8026186:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 802618a:	9301      	str	r3, [sp, #4]
 802618c:	683b      	ldr	r3, [r7, #0]
 802618e:	9300      	str	r3, [sp, #0]
 8026190:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8026194:	f000 f992 	bl	80264bc <mpiMontgomeryMul>
 8026198:	4603      	mov	r3, r0
 802619a:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 802619e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80261a2:	2b00      	cmp	r3, #0
 80261a4:	d016      	beq.n	80261d4 <mpiExpMod+0x35c>
 80261a6:	e149      	b.n	802643c <mpiExpMod+0x5c4>
      }
      else
      {
         MPI_CHECK(mpiMontgomeryMul(&b, a, &c2, k, p, &t));
 80261a8:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80261ac:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 80261b0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80261b4:	9301      	str	r3, [sp, #4]
 80261b6:	683b      	ldr	r3, [r7, #0]
 80261b8:	9300      	str	r3, [sp, #0]
 80261ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80261be:	68b9      	ldr	r1, [r7, #8]
 80261c0:	f000 f97c 	bl	80264bc <mpiMontgomeryMul>
 80261c4:	4603      	mov	r3, r0
 80261c6:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80261ca:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80261ce:	2b00      	cmp	r3, #0
 80261d0:	f040 8134 	bne.w	802643c <mpiExpMod+0x5c4>
      }

      //Let R = B^2 * C^-1 mod P
      MPI_CHECK(mpiMontgomeryMul(r, &b, &b, k, p, &t));
 80261d4:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80261d8:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80261dc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80261e0:	9301      	str	r3, [sp, #4]
 80261e2:	683b      	ldr	r3, [r7, #0]
 80261e4:	9300      	str	r3, [sp, #0]
 80261e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80261ea:	68f8      	ldr	r0, [r7, #12]
 80261ec:	f000 f966 	bl	80264bc <mpiMontgomeryMul>
 80261f0:	4603      	mov	r3, r0
 80261f2:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80261f6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80261fa:	2b00      	cmp	r3, #0
 80261fc:	f040 811e 	bne.w	802643c <mpiExpMod+0x5c4>
      //Let S[0] = B
      MPI_CHECK(mpiCopy(&s[0], &b));
 8026200:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8026204:	f107 0310 	add.w	r3, r7, #16
 8026208:	4611      	mov	r1, r2
 802620a:	4618      	mov	r0, r3
 802620c:	f7ff f85d 	bl	80252ca <mpiCopy>
 8026210:	4603      	mov	r3, r0
 8026212:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8026216:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 802621a:	2b00      	cmp	r3, #0
 802621c:	f040 810e 	bne.w	802643c <mpiExpMod+0x5c4>

      //Precompute S[i] = B^(2 * i + 1) * C^-1 mod P
      for(i = 1; i < (1 << (d - 1)); i++)
 8026220:	2301      	movs	r3, #1
 8026222:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8026226:	e029      	b.n	802627c <mpiExpMod+0x404>
      {
         MPI_CHECK(mpiMontgomeryMul(&s[i], &s[i - 1], r, k, p, &t));
 8026228:	f107 0110 	add.w	r1, r7, #16
 802622c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8026230:	4613      	mov	r3, r2
 8026232:	005b      	lsls	r3, r3, #1
 8026234:	4413      	add	r3, r2
 8026236:	009b      	lsls	r3, r3, #2
 8026238:	18c8      	adds	r0, r1, r3
 802623a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 802623e:	1e5a      	subs	r2, r3, #1
 8026240:	f107 0110 	add.w	r1, r7, #16
 8026244:	4613      	mov	r3, r2
 8026246:	005b      	lsls	r3, r3, #1
 8026248:	4413      	add	r3, r2
 802624a:	009b      	lsls	r3, r3, #2
 802624c:	4419      	add	r1, r3
 802624e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8026252:	9301      	str	r3, [sp, #4]
 8026254:	683b      	ldr	r3, [r7, #0]
 8026256:	9300      	str	r3, [sp, #0]
 8026258:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 802625c:	68fa      	ldr	r2, [r7, #12]
 802625e:	f000 f92d 	bl	80264bc <mpiMontgomeryMul>
 8026262:	4603      	mov	r3, r0
 8026264:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8026268:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 802626c:	2b00      	cmp	r3, #0
 802626e:	f040 80e5 	bne.w	802643c <mpiExpMod+0x5c4>
      for(i = 1; i < (1 << (d - 1)); i++)
 8026272:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8026276:	3301      	adds	r3, #1
 8026278:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 802627c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8026280:	3b01      	subs	r3, #1
 8026282:	2201      	movs	r2, #1
 8026284:	fa02 f303 	lsl.w	r3, r2, r3
 8026288:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 802628c:	429a      	cmp	r2, r3
 802628e:	dbcb      	blt.n	8026228 <mpiExpMod+0x3b0>
      }

      //Let R = C mod P
      MPI_CHECK(mpiCopy(r, &c2));
 8026290:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8026294:	4619      	mov	r1, r3
 8026296:	68f8      	ldr	r0, [r7, #12]
 8026298:	f7ff f817 	bl	80252ca <mpiCopy>
 802629c:	4603      	mov	r3, r0
 802629e:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80262a2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80262a6:	2b00      	cmp	r3, #0
 80262a8:	f040 80c8 	bne.w	802643c <mpiExpMod+0x5c4>
      MPI_CHECK(mpiMontgomeryRed(r, r, k, p, &t));
 80262ac:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80262b0:	9300      	str	r3, [sp, #0]
 80262b2:	683b      	ldr	r3, [r7, #0]
 80262b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80262b8:	68f9      	ldr	r1, [r7, #12]
 80262ba:	68f8      	ldr	r0, [r7, #12]
 80262bc:	f000 f9b3 	bl	8026626 <mpiMontgomeryRed>
 80262c0:	4603      	mov	r3, r0
 80262c2:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80262c6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80262ca:	2b00      	cmp	r3, #0
 80262cc:	f040 80b6 	bne.w	802643c <mpiExpMod+0x5c4>

      //The exponent is processed in a left-to-right fashion
      i = mpiGetBitLength(e) - 1;
 80262d0:	6878      	ldr	r0, [r7, #4]
 80262d2:	f7fe fec7 	bl	8025064 <mpiGetBitLength>
 80262d6:	4603      	mov	r3, r0
 80262d8:	3b01      	subs	r3, #1
 80262da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      //Perform sliding window exponentiation
      while(i >= 0)
 80262de:	e097      	b.n	8026410 <mpiExpMod+0x598>
      {
         //The sliding window exponentiation algorithm decomposes E
         //into zero and nonzero windows
         if(!mpiGetBitValue(e, i))
 80262e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80262e4:	4619      	mov	r1, r3
 80262e6:	6878      	ldr	r0, [r7, #4]
 80262e8:	f7fe fef6 	bl	80250d8 <mpiGetBitValue>
 80262ec:	4603      	mov	r3, r0
 80262ee:	2b00      	cmp	r3, #0
 80262f0:	d119      	bne.n	8026326 <mpiExpMod+0x4ae>
         {
            //Compute R = R^2 * C^-1 mod P
            MPI_CHECK(mpiMontgomeryMul(r, r, r, k, p, &t));
 80262f2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80262f6:	9301      	str	r3, [sp, #4]
 80262f8:	683b      	ldr	r3, [r7, #0]
 80262fa:	9300      	str	r3, [sp, #0]
 80262fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8026300:	68fa      	ldr	r2, [r7, #12]
 8026302:	68f9      	ldr	r1, [r7, #12]
 8026304:	68f8      	ldr	r0, [r7, #12]
 8026306:	f000 f8d9 	bl	80264bc <mpiMontgomeryMul>
 802630a:	4603      	mov	r3, r0
 802630c:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8026310:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8026314:	2b00      	cmp	r3, #0
 8026316:	f040 8091 	bne.w	802643c <mpiExpMod+0x5c4>
            //Next bit to be processed
            i--;
 802631a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 802631e:	3b01      	subs	r3, #1
 8026320:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8026324:	e074      	b.n	8026410 <mpiExpMod+0x598>
         }
         else
         {
            //Find the longest window
            n = MAX(i - d + 1, 0);
 8026326:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 802632a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 802632e:	1ad3      	subs	r3, r2, r3
 8026330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8026334:	d006      	beq.n	8026344 <mpiExpMod+0x4cc>
 8026336:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 802633a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 802633e:	1ad3      	subs	r3, r2, r3
 8026340:	3301      	adds	r3, #1
 8026342:	e000      	b.n	8026346 <mpiExpMod+0x4ce>
 8026344:	2300      	movs	r3, #0
 8026346:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            //The least significant bit of the window must be equal to 1
            while(!mpiGetBitValue(e, n)) n++;
 802634a:	e004      	b.n	8026356 <mpiExpMod+0x4de>
 802634c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8026350:	3301      	adds	r3, #1
 8026352:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8026356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802635a:	4619      	mov	r1, r3
 802635c:	6878      	ldr	r0, [r7, #4]
 802635e:	f7fe febb 	bl	80250d8 <mpiGetBitValue>
 8026362:	4603      	mov	r3, r0
 8026364:	2b00      	cmp	r3, #0
 8026366:	d0f1      	beq.n	802634c <mpiExpMod+0x4d4>

            //The algorithm processes more than one bit per iteration
            for(u = 0, j = i; j >= n; j--)
 8026368:	2300      	movs	r3, #0
 802636a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 802636e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8026372:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8026376:	e024      	b.n	80263c2 <mpiExpMod+0x54a>
            {
               //Compute R = R^2 * C^-1 mod P
               MPI_CHECK(mpiMontgomeryMul(r, r, r, k, p, &t));
 8026378:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 802637c:	9301      	str	r3, [sp, #4]
 802637e:	683b      	ldr	r3, [r7, #0]
 8026380:	9300      	str	r3, [sp, #0]
 8026382:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8026386:	68fa      	ldr	r2, [r7, #12]
 8026388:	68f9      	ldr	r1, [r7, #12]
 802638a:	68f8      	ldr	r0, [r7, #12]
 802638c:	f000 f896 	bl	80264bc <mpiMontgomeryMul>
 8026390:	4603      	mov	r3, r0
 8026392:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8026396:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 802639a:	2b00      	cmp	r3, #0
 802639c:	d14e      	bne.n	802643c <mpiExpMod+0x5c4>
               //Compute the relevant index to be used in the precomputed table
               u = (u << 1) | mpiGetBitValue(e, j);
 802639e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80263a2:	005c      	lsls	r4, r3, #1
 80263a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80263a8:	4619      	mov	r1, r3
 80263aa:	6878      	ldr	r0, [r7, #4]
 80263ac:	f7fe fe94 	bl	80250d8 <mpiGetBitValue>
 80263b0:	4603      	mov	r3, r0
 80263b2:	4323      	orrs	r3, r4
 80263b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            for(u = 0, j = i; j >= n; j--)
 80263b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80263bc:	3b01      	subs	r3, #1
 80263be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80263c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80263c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80263ca:	429a      	cmp	r2, r3
 80263cc:	dad4      	bge.n	8026378 <mpiExpMod+0x500>
            }

            //Compute R = R * T[u/2] * C^-1 mod P
            MPI_CHECK(mpiMontgomeryMul(r, r, &s[u >> 1], k, p, &t));
 80263ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80263d2:	085a      	lsrs	r2, r3, #1
 80263d4:	f107 0110 	add.w	r1, r7, #16
 80263d8:	4613      	mov	r3, r2
 80263da:	005b      	lsls	r3, r3, #1
 80263dc:	4413      	add	r3, r2
 80263de:	009b      	lsls	r3, r3, #2
 80263e0:	18ca      	adds	r2, r1, r3
 80263e2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80263e6:	9301      	str	r3, [sp, #4]
 80263e8:	683b      	ldr	r3, [r7, #0]
 80263ea:	9300      	str	r3, [sp, #0]
 80263ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80263f0:	68f9      	ldr	r1, [r7, #12]
 80263f2:	68f8      	ldr	r0, [r7, #12]
 80263f4:	f000 f862 	bl	80264bc <mpiMontgomeryMul>
 80263f8:	4603      	mov	r3, r0
 80263fa:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80263fe:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8026402:	2b00      	cmp	r3, #0
 8026404:	d11a      	bne.n	802643c <mpiExpMod+0x5c4>
            //Next bit to be processed
            i = n - 1;
 8026406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802640a:	3b01      	subs	r3, #1
 802640c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      while(i >= 0)
 8026410:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8026414:	2b00      	cmp	r3, #0
 8026416:	f6bf af63 	bge.w	80262e0 <mpiExpMod+0x468>
         }
      }

      //Compute R = R * C^-1 mod P
      MPI_CHECK(mpiMontgomeryRed(r, r, k, p, &t));
 802641a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 802641e:	9300      	str	r3, [sp, #0]
 8026420:	683b      	ldr	r3, [r7, #0]
 8026422:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8026426:	68f9      	ldr	r1, [r7, #12]
 8026428:	68f8      	ldr	r0, [r7, #12]
 802642a:	f000 f8fc 	bl	8026626 <mpiMontgomeryRed>
 802642e:	4603      	mov	r3, r0
 8026430:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8026434:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8026438:	2b00      	cmp	r3, #0
   }

end:
 802643a:	bf00      	nop
   //Release multiple precision integers
   mpiFree(&b);
 802643c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8026440:	4618      	mov	r0, r3
 8026442:	f7fe fd26 	bl	8024e92 <mpiFree>
   mpiFree(&c2);
 8026446:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 802644a:	4618      	mov	r0, r3
 802644c:	f7fe fd21 	bl	8024e92 <mpiFree>
   mpiFree(&t);
 8026450:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8026454:	4618      	mov	r0, r3
 8026456:	f7fe fd1c 	bl	8024e92 <mpiFree>

   //Release precomputed values
   for(i = 0; (uint_t) i < arraysize(s); i++)
 802645a:	2300      	movs	r3, #0
 802645c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8026460:	e010      	b.n	8026484 <mpiExpMod+0x60c>
   {
      mpiFree(&s[i]);
 8026462:	f107 0110 	add.w	r1, r7, #16
 8026466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 802646a:	4613      	mov	r3, r2
 802646c:	005b      	lsls	r3, r3, #1
 802646e:	4413      	add	r3, r2
 8026470:	009b      	lsls	r3, r3, #2
 8026472:	440b      	add	r3, r1
 8026474:	4618      	mov	r0, r3
 8026476:	f7fe fd0c 	bl	8024e92 <mpiFree>
   for(i = 0; (uint_t) i < arraysize(s); i++)
 802647a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 802647e:	3301      	adds	r3, #1
 8026480:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8026484:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8026488:	2b07      	cmp	r3, #7
 802648a:	d9ea      	bls.n	8026462 <mpiExpMod+0x5ea>
   }

   //Return status code
   return error;
 802648c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
}
 8026490:	4618      	mov	r0, r3
 8026492:	37b4      	adds	r7, #180	@ 0xb4
 8026494:	46bd      	mov	sp, r7
 8026496:	bd90      	pop	{r4, r7, pc}

08026498 <mpiExpModFast>:
 * @param[in] p Modulus
 * @return Error code
 **/

__weak_func error_t mpiExpModFast(Mpi *r, const Mpi *a, const Mpi *e, const Mpi *p)
{
 8026498:	b580      	push	{r7, lr}
 802649a:	b084      	sub	sp, #16
 802649c:	af00      	add	r7, sp, #0
 802649e:	60f8      	str	r0, [r7, #12]
 80264a0:	60b9      	str	r1, [r7, #8]
 80264a2:	607a      	str	r2, [r7, #4]
 80264a4:	603b      	str	r3, [r7, #0]
   //Perform modular exponentiation
   return mpiExpMod(r, a, e, p);
 80264a6:	683b      	ldr	r3, [r7, #0]
 80264a8:	687a      	ldr	r2, [r7, #4]
 80264aa:	68b9      	ldr	r1, [r7, #8]
 80264ac:	68f8      	ldr	r0, [r7, #12]
 80264ae:	f7ff fce3 	bl	8025e78 <mpiExpMod>
 80264b2:	4603      	mov	r3, r0
}
 80264b4:	4618      	mov	r0, r3
 80264b6:	3710      	adds	r7, #16
 80264b8:	46bd      	mov	sp, r7
 80264ba:	bd80      	pop	{r7, pc}

080264bc <mpiMontgomeryMul>:
 * @return Error code
 **/

error_t mpiMontgomeryMul(Mpi *r, const Mpi *a, const Mpi *b, uint_t k,
   const Mpi *p, Mpi *t)
{
 80264bc:	b590      	push	{r4, r7, lr}
 80264be:	b08b      	sub	sp, #44	@ 0x2c
 80264c0:	af00      	add	r7, sp, #0
 80264c2:	60f8      	str	r0, [r7, #12]
 80264c4:	60b9      	str	r1, [r7, #8]
 80264c6:	607a      	str	r2, [r7, #4]
 80264c8:	603b      	str	r3, [r7, #0]
   uint_t m;
   uint_t n;
   uint_t q;

   //Use Newton's method to compute the inverse of P[0] mod 2^32
   for(m = p->data[0], i = 0; i < 4; i++)
 80264ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80264cc:	689b      	ldr	r3, [r3, #8]
 80264ce:	681b      	ldr	r3, [r3, #0]
 80264d0:	61fb      	str	r3, [r7, #28]
 80264d2:	2300      	movs	r3, #0
 80264d4:	623b      	str	r3, [r7, #32]
 80264d6:	e00e      	b.n	80264f6 <mpiMontgomeryMul+0x3a>
   {
      m = m * (2U - m * p->data[0]);
 80264d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80264da:	689b      	ldr	r3, [r3, #8]
 80264dc:	681b      	ldr	r3, [r3, #0]
 80264de:	69fa      	ldr	r2, [r7, #28]
 80264e0:	fb02 f303 	mul.w	r3, r2, r3
 80264e4:	f1c3 0202 	rsb	r2, r3, #2
 80264e8:	69fb      	ldr	r3, [r7, #28]
 80264ea:	fb02 f303 	mul.w	r3, r2, r3
 80264ee:	61fb      	str	r3, [r7, #28]
   for(m = p->data[0], i = 0; i < 4; i++)
 80264f0:	6a3b      	ldr	r3, [r7, #32]
 80264f2:	3301      	adds	r3, #1
 80264f4:	623b      	str	r3, [r7, #32]
 80264f6:	6a3b      	ldr	r3, [r7, #32]
 80264f8:	2b03      	cmp	r3, #3
 80264fa:	d9ed      	bls.n	80264d8 <mpiMontgomeryMul+0x1c>
   }

   //Precompute -1/P[0] mod 2^32;
   m = ~m + 1U;
 80264fc:	69fb      	ldr	r3, [r7, #28]
 80264fe:	425b      	negs	r3, r3
 8026500:	61fb      	str	r3, [r7, #28]

   //We assume that B is always less than 2^k
   n = MIN(b->size, k);
 8026502:	687b      	ldr	r3, [r7, #4]
 8026504:	685b      	ldr	r3, [r3, #4]
 8026506:	683a      	ldr	r2, [r7, #0]
 8026508:	4293      	cmp	r3, r2
 802650a:	bf28      	it	cs
 802650c:	4613      	movcs	r3, r2
 802650e:	617b      	str	r3, [r7, #20]

   //Make sure T is large enough
   MPI_CHECK(mpiGrow(t, 2 * k + 1));
 8026510:	683b      	ldr	r3, [r7, #0]
 8026512:	005b      	lsls	r3, r3, #1
 8026514:	3301      	adds	r3, #1
 8026516:	4619      	mov	r1, r3
 8026518:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 802651a:	f7fe fce3 	bl	8024ee4 <mpiGrow>
 802651e:	4603      	mov	r3, r0
 8026520:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8026522:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8026524:	2b00      	cmp	r3, #0
 8026526:	d179      	bne.n	802661c <mpiMontgomeryMul+0x160>
   //Let T = 0
   MPI_CHECK(mpiSetValue(t, 0));
 8026528:	2100      	movs	r1, #0
 802652a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 802652c:	f7fe ff16 	bl	802535c <mpiSetValue>
 8026530:	4603      	mov	r3, r0
 8026532:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8026534:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8026536:	2b00      	cmp	r3, #0
 8026538:	d170      	bne.n	802661c <mpiMontgomeryMul+0x160>

   //Perform Montgomery multiplication
   for(i = 0; i < k; i++)
 802653a:	2300      	movs	r3, #0
 802653c:	623b      	str	r3, [r7, #32]
 802653e:	e044      	b.n	80265ca <mpiMontgomeryMul+0x10e>
   {
      //Check current index
      if(i < a->size)
 8026540:	68bb      	ldr	r3, [r7, #8]
 8026542:	685b      	ldr	r3, [r3, #4]
 8026544:	6a3a      	ldr	r2, [r7, #32]
 8026546:	429a      	cmp	r2, r3
 8026548:	d227      	bcs.n	802659a <mpiMontgomeryMul+0xde>
      {
         //Compute q = ((T[i] + A[i] * B[0]) * m) mod 2^32
         q = (t->data[i] + a->data[i] * b->data[0]) * m;
 802654a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802654c:	689a      	ldr	r2, [r3, #8]
 802654e:	6a3b      	ldr	r3, [r7, #32]
 8026550:	009b      	lsls	r3, r3, #2
 8026552:	4413      	add	r3, r2
 8026554:	681a      	ldr	r2, [r3, #0]
 8026556:	68bb      	ldr	r3, [r7, #8]
 8026558:	6899      	ldr	r1, [r3, #8]
 802655a:	6a3b      	ldr	r3, [r7, #32]
 802655c:	009b      	lsls	r3, r3, #2
 802655e:	440b      	add	r3, r1
 8026560:	681b      	ldr	r3, [r3, #0]
 8026562:	6879      	ldr	r1, [r7, #4]
 8026564:	6889      	ldr	r1, [r1, #8]
 8026566:	6809      	ldr	r1, [r1, #0]
 8026568:	fb01 f303 	mul.w	r3, r1, r3
 802656c:	441a      	add	r2, r3
 802656e:	69fb      	ldr	r3, [r7, #28]
 8026570:	fb02 f303 	mul.w	r3, r2, r3
 8026574:	61bb      	str	r3, [r7, #24]
         //Compute T = T + A[i] * B
         mpiMulAccCore(t->data + i, b->data, n, a->data[i]);
 8026576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8026578:	689a      	ldr	r2, [r3, #8]
 802657a:	6a3b      	ldr	r3, [r7, #32]
 802657c:	009b      	lsls	r3, r3, #2
 802657e:	18d0      	adds	r0, r2, r3
 8026580:	687b      	ldr	r3, [r7, #4]
 8026582:	6899      	ldr	r1, [r3, #8]
 8026584:	697c      	ldr	r4, [r7, #20]
 8026586:	68bb      	ldr	r3, [r7, #8]
 8026588:	689a      	ldr	r2, [r3, #8]
 802658a:	6a3b      	ldr	r3, [r7, #32]
 802658c:	009b      	lsls	r3, r3, #2
 802658e:	4413      	add	r3, r2
 8026590:	681b      	ldr	r3, [r3, #0]
 8026592:	4622      	mov	r2, r4
 8026594:	f000 f867 	bl	8026666 <mpiMulAccCore>
 8026598:	e009      	b.n	80265ae <mpiMontgomeryMul+0xf2>
      }
      else
      {
         //Compute q = (T[i] * m) mod 2^32
         q = t->data[i] * m;
 802659a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802659c:	689a      	ldr	r2, [r3, #8]
 802659e:	6a3b      	ldr	r3, [r7, #32]
 80265a0:	009b      	lsls	r3, r3, #2
 80265a2:	4413      	add	r3, r2
 80265a4:	681a      	ldr	r2, [r3, #0]
 80265a6:	69fb      	ldr	r3, [r7, #28]
 80265a8:	fb02 f303 	mul.w	r3, r2, r3
 80265ac:	61bb      	str	r3, [r7, #24]
      }

      //Compute T = T + q * P
      mpiMulAccCore(t->data + i, p->data, k, q);
 80265ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80265b0:	689a      	ldr	r2, [r3, #8]
 80265b2:	6a3b      	ldr	r3, [r7, #32]
 80265b4:	009b      	lsls	r3, r3, #2
 80265b6:	18d0      	adds	r0, r2, r3
 80265b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80265ba:	6899      	ldr	r1, [r3, #8]
 80265bc:	683a      	ldr	r2, [r7, #0]
 80265be:	69bb      	ldr	r3, [r7, #24]
 80265c0:	f000 f851 	bl	8026666 <mpiMulAccCore>
   for(i = 0; i < k; i++)
 80265c4:	6a3b      	ldr	r3, [r7, #32]
 80265c6:	3301      	adds	r3, #1
 80265c8:	623b      	str	r3, [r7, #32]
 80265ca:	6a3a      	ldr	r2, [r7, #32]
 80265cc:	683b      	ldr	r3, [r7, #0]
 80265ce:	429a      	cmp	r2, r3
 80265d0:	d3b6      	bcc.n	8026540 <mpiMontgomeryMul+0x84>
   }

   //Compute R = T / 2^(32 * k)
   MPI_CHECK(mpiShiftRight(t, k * (MPI_INT_SIZE * 8)));
 80265d2:	683b      	ldr	r3, [r7, #0]
 80265d4:	015b      	lsls	r3, r3, #5
 80265d6:	4619      	mov	r1, r3
 80265d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80265da:	f7ff fa5c 	bl	8025a96 <mpiShiftRight>
 80265de:	4603      	mov	r3, r0
 80265e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80265e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80265e4:	2b00      	cmp	r3, #0
 80265e6:	d119      	bne.n	802661c <mpiMontgomeryMul+0x160>
   MPI_CHECK(mpiCopy(r, t));
 80265e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80265ea:	68f8      	ldr	r0, [r7, #12]
 80265ec:	f7fe fe6d 	bl	80252ca <mpiCopy>
 80265f0:	4603      	mov	r3, r0
 80265f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80265f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80265f6:	2b00      	cmp	r3, #0
 80265f8:	d110      	bne.n	802661c <mpiMontgomeryMul+0x160>

   //A final subtraction is required
   if(mpiComp(r, p) >= 0)
 80265fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80265fc:	68f8      	ldr	r0, [r7, #12]
 80265fe:	f7fe fd8f 	bl	8025120 <mpiComp>
 8026602:	4603      	mov	r3, r0
 8026604:	2b00      	cmp	r3, #0
 8026606:	db08      	blt.n	802661a <mpiMontgomeryMul+0x15e>
   {
      MPI_CHECK(mpiSub(r, r, p));
 8026608:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802660a:	68f9      	ldr	r1, [r7, #12]
 802660c:	68f8      	ldr	r0, [r7, #12]
 802660e:	f7ff f81a 	bl	8025646 <mpiSub>
 8026612:	4603      	mov	r3, r0
 8026614:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8026616:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8026618:	2b00      	cmp	r3, #0
   }

end:
 802661a:	bf00      	nop
   //Return status code
   return error;
 802661c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 802661e:	4618      	mov	r0, r3
 8026620:	372c      	adds	r7, #44	@ 0x2c
 8026622:	46bd      	mov	sp, r7
 8026624:	bd90      	pop	{r4, r7, pc}

08026626 <mpiMontgomeryRed>:
 * @param[in] t An preallocated integer T (for internal operation)
 * @return Error code
 **/

error_t mpiMontgomeryRed(Mpi *r, const Mpi *a, uint_t k, const Mpi *p, Mpi *t)
{
 8026626:	b580      	push	{r7, lr}
 8026628:	b08a      	sub	sp, #40	@ 0x28
 802662a:	af02      	add	r7, sp, #8
 802662c:	60f8      	str	r0, [r7, #12]
 802662e:	60b9      	str	r1, [r7, #8]
 8026630:	607a      	str	r2, [r7, #4]
 8026632:	603b      	str	r3, [r7, #0]
   uint_t value;
   Mpi b;

   //Let B = 1
   value = 1;
 8026634:	2301      	movs	r3, #1
 8026636:	61fb      	str	r3, [r7, #28]
   b.sign = 1;
 8026638:	2301      	movs	r3, #1
 802663a:	613b      	str	r3, [r7, #16]
   b.size = 1;
 802663c:	2301      	movs	r3, #1
 802663e:	617b      	str	r3, [r7, #20]
#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   b.data = &value;
 8026640:	f107 031c 	add.w	r3, r7, #28
 8026644:	61bb      	str	r3, [r7, #24]
#else
   b.data[0] = value;
#endif

   //Compute R = A / 2^k mod P
   return mpiMontgomeryMul(r, a, &b, k, p, t);
 8026646:	f107 0210 	add.w	r2, r7, #16
 802664a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802664c:	9301      	str	r3, [sp, #4]
 802664e:	683b      	ldr	r3, [r7, #0]
 8026650:	9300      	str	r3, [sp, #0]
 8026652:	687b      	ldr	r3, [r7, #4]
 8026654:	68b9      	ldr	r1, [r7, #8]
 8026656:	68f8      	ldr	r0, [r7, #12]
 8026658:	f7ff ff30 	bl	80264bc <mpiMontgomeryMul>
 802665c:	4603      	mov	r3, r0
}
 802665e:	4618      	mov	r0, r3
 8026660:	3720      	adds	r7, #32
 8026662:	46bd      	mov	sp, r7
 8026664:	bd80      	pop	{r7, pc}

08026666 <mpiMulAccCore>:
 * @param[in] m Size of A in words
 * @param[in] b Second operand B
 **/

void mpiMulAccCore(uint_t *r, const uint_t *a, int_t m, const uint_t b)
{
 8026666:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 802666a:	b08b      	sub	sp, #44	@ 0x2c
 802666c:	af00      	add	r7, sp, #0
 802666e:	60f8      	str	r0, [r7, #12]
 8026670:	60b9      	str	r1, [r7, #8]
 8026672:	607a      	str	r2, [r7, #4]
 8026674:	603b      	str	r3, [r7, #0]
   uint32_t u;
   uint32_t v;
   uint64_t p;

   //Clear variables
   c = 0;
 8026676:	2300      	movs	r3, #0
 8026678:	623b      	str	r3, [r7, #32]
   u = 0;
 802667a:	2300      	movs	r3, #0
 802667c:	61bb      	str	r3, [r7, #24]
   v = 0;
 802667e:	2300      	movs	r3, #0
 8026680:	61fb      	str	r3, [r7, #28]

   //Perform multiplication
   for(i = 0; i < m; i++)
 8026682:	2300      	movs	r3, #0
 8026684:	627b      	str	r3, [r7, #36]	@ 0x24
 8026686:	e04d      	b.n	8026724 <mpiMulAccCore+0xbe>
   {
      p = (uint64_t) a[i] * b;
 8026688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802668a:	009b      	lsls	r3, r3, #2
 802668c:	68ba      	ldr	r2, [r7, #8]
 802668e:	4413      	add	r3, r2
 8026690:	681b      	ldr	r3, [r3, #0]
 8026692:	2200      	movs	r2, #0
 8026694:	4698      	mov	r8, r3
 8026696:	4691      	mov	r9, r2
 8026698:	683b      	ldr	r3, [r7, #0]
 802669a:	2200      	movs	r2, #0
 802669c:	469a      	mov	sl, r3
 802669e:	4693      	mov	fp, r2
 80266a0:	fb0a f209 	mul.w	r2, sl, r9
 80266a4:	fb08 f30b 	mul.w	r3, r8, fp
 80266a8:	4413      	add	r3, r2
 80266aa:	fba8 450a 	umull	r4, r5, r8, sl
 80266ae:	442b      	add	r3, r5
 80266b0:	461d      	mov	r5, r3
 80266b2:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80266b6:	e9c7 4504 	strd	r4, r5, [r7, #16]
      u = (uint32_t) p;
 80266ba:	693b      	ldr	r3, [r7, #16]
 80266bc:	61bb      	str	r3, [r7, #24]
      v = (uint32_t) (p >> 32);
 80266be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80266c2:	f04f 0200 	mov.w	r2, #0
 80266c6:	f04f 0300 	mov.w	r3, #0
 80266ca:	000a      	movs	r2, r1
 80266cc:	2300      	movs	r3, #0
 80266ce:	4613      	mov	r3, r2
 80266d0:	61fb      	str	r3, [r7, #28]

      u += c;
 80266d2:	69ba      	ldr	r2, [r7, #24]
 80266d4:	6a3b      	ldr	r3, [r7, #32]
 80266d6:	4413      	add	r3, r2
 80266d8:	61bb      	str	r3, [r7, #24]
      if(u < c) v++;
 80266da:	69ba      	ldr	r2, [r7, #24]
 80266dc:	6a3b      	ldr	r3, [r7, #32]
 80266de:	429a      	cmp	r2, r3
 80266e0:	d202      	bcs.n	80266e8 <mpiMulAccCore+0x82>
 80266e2:	69fb      	ldr	r3, [r7, #28]
 80266e4:	3301      	adds	r3, #1
 80266e6:	61fb      	str	r3, [r7, #28]

      u += r[i];
 80266e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80266ea:	009b      	lsls	r3, r3, #2
 80266ec:	68fa      	ldr	r2, [r7, #12]
 80266ee:	4413      	add	r3, r2
 80266f0:	681b      	ldr	r3, [r3, #0]
 80266f2:	69ba      	ldr	r2, [r7, #24]
 80266f4:	4413      	add	r3, r2
 80266f6:	61bb      	str	r3, [r7, #24]
      if(u < r[i]) v++;
 80266f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80266fa:	009b      	lsls	r3, r3, #2
 80266fc:	68fa      	ldr	r2, [r7, #12]
 80266fe:	4413      	add	r3, r2
 8026700:	681b      	ldr	r3, [r3, #0]
 8026702:	69ba      	ldr	r2, [r7, #24]
 8026704:	429a      	cmp	r2, r3
 8026706:	d202      	bcs.n	802670e <mpiMulAccCore+0xa8>
 8026708:	69fb      	ldr	r3, [r7, #28]
 802670a:	3301      	adds	r3, #1
 802670c:	61fb      	str	r3, [r7, #28]

      r[i] = u;
 802670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026710:	009b      	lsls	r3, r3, #2
 8026712:	68fa      	ldr	r2, [r7, #12]
 8026714:	4413      	add	r3, r2
 8026716:	69ba      	ldr	r2, [r7, #24]
 8026718:	601a      	str	r2, [r3, #0]
      c = v;
 802671a:	69fb      	ldr	r3, [r7, #28]
 802671c:	623b      	str	r3, [r7, #32]
   for(i = 0; i < m; i++)
 802671e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026720:	3301      	adds	r3, #1
 8026722:	627b      	str	r3, [r7, #36]	@ 0x24
 8026724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026726:	687b      	ldr	r3, [r7, #4]
 8026728:	429a      	cmp	r2, r3
 802672a:	dbad      	blt.n	8026688 <mpiMulAccCore+0x22>
   }

   //Propagate carry
   for(; c != 0; i++)
 802672c:	e01a      	b.n	8026764 <mpiMulAccCore+0xfe>
   {
      r[i] += c;
 802672e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026730:	009b      	lsls	r3, r3, #2
 8026732:	68fa      	ldr	r2, [r7, #12]
 8026734:	4413      	add	r3, r2
 8026736:	6819      	ldr	r1, [r3, #0]
 8026738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802673a:	009b      	lsls	r3, r3, #2
 802673c:	68fa      	ldr	r2, [r7, #12]
 802673e:	4413      	add	r3, r2
 8026740:	6a3a      	ldr	r2, [r7, #32]
 8026742:	440a      	add	r2, r1
 8026744:	601a      	str	r2, [r3, #0]
      c = (r[i] < c);
 8026746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026748:	009b      	lsls	r3, r3, #2
 802674a:	68fa      	ldr	r2, [r7, #12]
 802674c:	4413      	add	r3, r2
 802674e:	681b      	ldr	r3, [r3, #0]
 8026750:	6a3a      	ldr	r2, [r7, #32]
 8026752:	429a      	cmp	r2, r3
 8026754:	bf8c      	ite	hi
 8026756:	2301      	movhi	r3, #1
 8026758:	2300      	movls	r3, #0
 802675a:	b2db      	uxtb	r3, r3
 802675c:	623b      	str	r3, [r7, #32]
   for(; c != 0; i++)
 802675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026760:	3301      	adds	r3, #1
 8026762:	627b      	str	r3, [r7, #36]	@ 0x24
 8026764:	6a3b      	ldr	r3, [r7, #32]
 8026766:	2b00      	cmp	r3, #0
 8026768:	d1e1      	bne.n	802672e <mpiMulAccCore+0xc8>
   }
}
 802676a:	bf00      	nop
 802676c:	bf00      	nop
 802676e:	372c      	adds	r7, #44	@ 0x2c
 8026770:	46bd      	mov	sp, r7
 8026772:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8026776:	4770      	bx	lr

08026778 <rsaInitPublicKey>:
 * @brief Initialize an RSA public key
 * @param[in] key Pointer to the RSA public key to initialize
 **/

void rsaInitPublicKey(RsaPublicKey *key)
{
 8026778:	b580      	push	{r7, lr}
 802677a:	b082      	sub	sp, #8
 802677c:	af00      	add	r7, sp, #0
 802677e:	6078      	str	r0, [r7, #4]
   //Initialize multiple precision integers
   mpiInit(&key->n);
 8026780:	687b      	ldr	r3, [r7, #4]
 8026782:	4618      	mov	r0, r3
 8026784:	f7fe fb72 	bl	8024e6c <mpiInit>
   mpiInit(&key->e);
 8026788:	687b      	ldr	r3, [r7, #4]
 802678a:	330c      	adds	r3, #12
 802678c:	4618      	mov	r0, r3
 802678e:	f7fe fb6d 	bl	8024e6c <mpiInit>
}
 8026792:	bf00      	nop
 8026794:	3708      	adds	r7, #8
 8026796:	46bd      	mov	sp, r7
 8026798:	bd80      	pop	{r7, pc}

0802679a <rsaFreePublicKey>:
 * @brief Release an RSA public key
 * @param[in] key Pointer to the RSA public key to free
 **/

void rsaFreePublicKey(RsaPublicKey *key)
{
 802679a:	b580      	push	{r7, lr}
 802679c:	b082      	sub	sp, #8
 802679e:	af00      	add	r7, sp, #0
 80267a0:	6078      	str	r0, [r7, #4]
   //Free multiple precision integers
   mpiFree(&key->n);
 80267a2:	687b      	ldr	r3, [r7, #4]
 80267a4:	4618      	mov	r0, r3
 80267a6:	f7fe fb74 	bl	8024e92 <mpiFree>
   mpiFree(&key->e);
 80267aa:	687b      	ldr	r3, [r7, #4]
 80267ac:	330c      	adds	r3, #12
 80267ae:	4618      	mov	r0, r3
 80267b0:	f7fe fb6f 	bl	8024e92 <mpiFree>
}
 80267b4:	bf00      	nop
 80267b6:	3708      	adds	r7, #8
 80267b8:	46bd      	mov	sp, r7
 80267ba:	bd80      	pop	{r7, pc}

080267bc <rsassaPkcs1v15Verify>:
 * @return Error code
 **/

error_t rsassaPkcs1v15Verify(const RsaPublicKey *key, const HashAlgo *hash,
   const uint8_t *digest, const uint8_t *signature, size_t signatureLen)
{
 80267bc:	b580      	push	{r7, lr}
 80267be:	b08e      	sub	sp, #56	@ 0x38
 80267c0:	af00      	add	r7, sp, #0
 80267c2:	60f8      	str	r0, [r7, #12]
 80267c4:	60b9      	str	r1, [r7, #8]
 80267c6:	607a      	str	r2, [r7, #4]
 80267c8:	603b      	str	r3, [r7, #0]
#else
   uint8_t em[RSA_MAX_MODULUS_SIZE / 8];
#endif

   //Check parameters
   if(key == NULL || hash == NULL || digest == NULL || signature == NULL)
 80267ca:	68fb      	ldr	r3, [r7, #12]
 80267cc:	2b00      	cmp	r3, #0
 80267ce:	d008      	beq.n	80267e2 <rsassaPkcs1v15Verify+0x26>
 80267d0:	68bb      	ldr	r3, [r7, #8]
 80267d2:	2b00      	cmp	r3, #0
 80267d4:	d005      	beq.n	80267e2 <rsassaPkcs1v15Verify+0x26>
 80267d6:	687b      	ldr	r3, [r7, #4]
 80267d8:	2b00      	cmp	r3, #0
 80267da:	d002      	beq.n	80267e2 <rsassaPkcs1v15Verify+0x26>
 80267dc:	683b      	ldr	r3, [r7, #0]
 80267de:	2b00      	cmp	r3, #0
 80267e0:	d101      	bne.n	80267e6 <rsassaPkcs1v15Verify+0x2a>
      return ERROR_INVALID_PARAMETER;
 80267e2:	2302      	movs	r3, #2
 80267e4:	e06a      	b.n	80268bc <rsassaPkcs1v15Verify+0x100>
   TRACE_DEBUG_ARRAY("    ", digest, hash->digestSize);
   TRACE_DEBUG("  Signature:\r\n");
   TRACE_DEBUG_ARRAY("    ", signature, signatureLen);

   //Initialize multiple-precision integers
   mpiInit(&s);
 80267e6:	f107 0320 	add.w	r3, r7, #32
 80267ea:	4618      	mov	r0, r3
 80267ec:	f7fe fb3e 	bl	8024e6c <mpiInit>
   mpiInit(&m);
 80267f0:	f107 0314 	add.w	r3, r7, #20
 80267f4:	4618      	mov	r0, r3
 80267f6:	f7fe fb39 	bl	8024e6c <mpiInit>

   //Get the length in octets of the modulus n
   k = mpiGetByteLength(&key->n);
 80267fa:	68fb      	ldr	r3, [r7, #12]
 80267fc:	4618      	mov	r0, r3
 80267fe:	f7fe fbf7 	bl	8024ff0 <mpiGetByteLength>
 8026802:	6338      	str	r0, [r7, #48]	@ 0x30

   //Make sure the modulus is valid
   if(k == 0)
 8026804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026806:	2b00      	cmp	r3, #0
 8026808:	d101      	bne.n	802680e <rsassaPkcs1v15Verify+0x52>
      return ERROR_INVALID_PARAMETER;
 802680a:	2302      	movs	r3, #2
 802680c:	e056      	b.n	80268bc <rsassaPkcs1v15Verify+0x100>

   //Check the length of the signature
   if(signatureLen != k)
 802680e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8026810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026812:	429a      	cmp	r2, r3
 8026814:	d002      	beq.n	802681c <rsassaPkcs1v15Verify+0x60>
      return ERROR_INVALID_SIGNATURE;
 8026816:	f240 230e 	movw	r3, #526	@ 0x20e
 802681a:	e04f      	b.n	80268bc <rsassaPkcs1v15Verify+0x100>

#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   //Allocate a buffer to store the encoded message EM
   em = cryptoAllocMem(k);
 802681c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802681e:	f7fa f8de 	bl	80209de <osAllocMem>
 8026822:	62f8      	str	r0, [r7, #44]	@ 0x2c
   //Failed to allocate memory?
   if(em == NULL)
 8026824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026826:	2b00      	cmp	r3, #0
 8026828:	d101      	bne.n	802682e <rsassaPkcs1v15Verify+0x72>
      return ERROR_OUT_OF_MEMORY;
 802682a:	2364      	movs	r3, #100	@ 0x64
 802682c:	e046      	b.n	80268bc <rsassaPkcs1v15Verify+0x100>

   //Start of exception handling block
   do
   {
      //Convert the signature to an integer signature representative s
      error = mpiImport(&s, signature, signatureLen, MPI_FORMAT_BIG_ENDIAN);
 802682e:	f107 0020 	add.w	r0, r7, #32
 8026832:	2301      	movs	r3, #1
 8026834:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8026836:	6839      	ldr	r1, [r7, #0]
 8026838:	f7fe fdc8 	bl	80253cc <mpiImport>
 802683c:	4603      	mov	r3, r0
 802683e:	86fb      	strh	r3, [r7, #54]	@ 0x36
      //Conversion failed?
      if(error)
 8026840:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8026842:	2b00      	cmp	r3, #0
 8026844:	d127      	bne.n	8026896 <rsassaPkcs1v15Verify+0xda>
         break;

      //Apply the RSAVP1 verification primitive
      error = rsavp1(key, &s, &m);
 8026846:	f107 0214 	add.w	r2, r7, #20
 802684a:	f107 0320 	add.w	r3, r7, #32
 802684e:	4619      	mov	r1, r3
 8026850:	68f8      	ldr	r0, [r7, #12]
 8026852:	f000 f866 	bl	8026922 <rsavp1>
 8026856:	4603      	mov	r3, r0
 8026858:	86fb      	strh	r3, [r7, #54]	@ 0x36
      //Any error to report?
      if(error)
 802685a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 802685c:	2b00      	cmp	r3, #0
 802685e:	d11c      	bne.n	802689a <rsassaPkcs1v15Verify+0xde>
         break;

      //Convert the message representative m to an encoded message EM of
      //length k octets
      error = mpiExport(&m, em, k, MPI_FORMAT_BIG_ENDIAN);
 8026860:	f107 0014 	add.w	r0, r7, #20
 8026864:	2301      	movs	r3, #1
 8026866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8026868:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802686a:	f7fe fe75 	bl	8025558 <mpiExport>
 802686e:	4603      	mov	r3, r0
 8026870:	86fb      	strh	r3, [r7, #54]	@ 0x36
      //Conversion failed?
      if(error)
 8026872:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8026874:	2b00      	cmp	r3, #0
 8026876:	d112      	bne.n	802689e <rsassaPkcs1v15Verify+0xe2>
      //Debug message
      TRACE_DEBUG("  Encoded message:\r\n");
      TRACE_DEBUG_ARRAY("    ", em, k);

      //Verify the encoded message EM
      error = emsaPkcs1v15Verify(hash, digest, em, k);
 8026878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802687a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802687c:	6879      	ldr	r1, [r7, #4]
 802687e:	68b8      	ldr	r0, [r7, #8]
 8026880:	f000 f85f 	bl	8026942 <emsaPkcs1v15Verify>
 8026884:	4603      	mov	r3, r0
 8026886:	86fb      	strh	r3, [r7, #54]	@ 0x36
      //Any error to report?
      if(error)
 8026888:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 802688a:	2b00      	cmp	r3, #0
 802688c:	d008      	beq.n	80268a0 <rsassaPkcs1v15Verify+0xe4>
      {
         //The signature is not valid
         error = ERROR_INVALID_SIGNATURE;
 802688e:	f240 230e 	movw	r3, #526	@ 0x20e
 8026892:	86fb      	strh	r3, [r7, #54]	@ 0x36
         break;
 8026894:	e004      	b.n	80268a0 <rsassaPkcs1v15Verify+0xe4>
         break;
 8026896:	bf00      	nop
 8026898:	e002      	b.n	80268a0 <rsassaPkcs1v15Verify+0xe4>
         break;
 802689a:	bf00      	nop
 802689c:	e000      	b.n	80268a0 <rsassaPkcs1v15Verify+0xe4>
         break;
 802689e:	bf00      	nop
      //End of exception handling block
   } while(0);

#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   //Release the encoded message
   cryptoFreeMem(em);
 80268a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80268a2:	f7fa f8aa 	bl	80209fa <osFreeMem>
#endif

   //Release multiple precision integers
   mpiFree(&s);
 80268a6:	f107 0320 	add.w	r3, r7, #32
 80268aa:	4618      	mov	r0, r3
 80268ac:	f7fe faf1 	bl	8024e92 <mpiFree>
   mpiFree(&m);
 80268b0:	f107 0314 	add.w	r3, r7, #20
 80268b4:	4618      	mov	r0, r3
 80268b6:	f7fe faec 	bl	8024e92 <mpiFree>

   //Return status code
   return error;
 80268ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 80268bc:	4618      	mov	r0, r3
 80268be:	3738      	adds	r7, #56	@ 0x38
 80268c0:	46bd      	mov	sp, r7
 80268c2:	bd80      	pop	{r7, pc}

080268c4 <rsaep>:
 * @param[out] c Ciphertext representative
 * @return Error code
 **/

__weak_func error_t rsaep(const RsaPublicKey *key, const Mpi *m, Mpi *c)
{
 80268c4:	b580      	push	{r7, lr}
 80268c6:	b084      	sub	sp, #16
 80268c8:	af00      	add	r7, sp, #0
 80268ca:	60f8      	str	r0, [r7, #12]
 80268cc:	60b9      	str	r1, [r7, #8]
 80268ce:	607a      	str	r2, [r7, #4]
   //Ensure the RSA public key is valid
   if(!key->n.size || !key->e.size)
 80268d0:	68fb      	ldr	r3, [r7, #12]
 80268d2:	685b      	ldr	r3, [r3, #4]
 80268d4:	2b00      	cmp	r3, #0
 80268d6:	d003      	beq.n	80268e0 <rsaep+0x1c>
 80268d8:	68fb      	ldr	r3, [r7, #12]
 80268da:	691b      	ldr	r3, [r3, #16]
 80268dc:	2b00      	cmp	r3, #0
 80268de:	d101      	bne.n	80268e4 <rsaep+0x20>
      return ERROR_INVALID_PARAMETER;
 80268e0:	2302      	movs	r3, #2
 80268e2:	e01a      	b.n	802691a <rsaep+0x56>

   //The message representative m shall be between 0 and n - 1
   if(mpiCompInt(m, 0) < 0 || mpiComp(m, &key->n) >= 0)
 80268e4:	2100      	movs	r1, #0
 80268e6:	68b8      	ldr	r0, [r7, #8]
 80268e8:	f7fe fc80 	bl	80251ec <mpiCompInt>
 80268ec:	4603      	mov	r3, r0
 80268ee:	2b00      	cmp	r3, #0
 80268f0:	db07      	blt.n	8026902 <rsaep+0x3e>
 80268f2:	68fb      	ldr	r3, [r7, #12]
 80268f4:	4619      	mov	r1, r3
 80268f6:	68b8      	ldr	r0, [r7, #8]
 80268f8:	f7fe fc12 	bl	8025120 <mpiComp>
 80268fc:	4603      	mov	r3, r0
 80268fe:	2b00      	cmp	r3, #0
 8026900:	db02      	blt.n	8026908 <rsaep+0x44>
      return ERROR_OUT_OF_RANGE;
 8026902:	f240 1307 	movw	r3, #263	@ 0x107
 8026906:	e008      	b.n	802691a <rsaep+0x56>

   //Perform modular exponentiation (c = m ^ e mod n)
   return mpiExpModFast(c, m, &key->e, &key->n);
 8026908:	68fb      	ldr	r3, [r7, #12]
 802690a:	f103 020c 	add.w	r2, r3, #12
 802690e:	68fb      	ldr	r3, [r7, #12]
 8026910:	68b9      	ldr	r1, [r7, #8]
 8026912:	6878      	ldr	r0, [r7, #4]
 8026914:	f7ff fdc0 	bl	8026498 <mpiExpModFast>
 8026918:	4603      	mov	r3, r0
}
 802691a:	4618      	mov	r0, r3
 802691c:	3710      	adds	r7, #16
 802691e:	46bd      	mov	sp, r7
 8026920:	bd80      	pop	{r7, pc}

08026922 <rsavp1>:
 * @param[out] m Message representative
 * @return Error code
 **/

error_t rsavp1(const RsaPublicKey *key, const Mpi *s, Mpi *m)
{
 8026922:	b580      	push	{r7, lr}
 8026924:	b084      	sub	sp, #16
 8026926:	af00      	add	r7, sp, #0
 8026928:	60f8      	str	r0, [r7, #12]
 802692a:	60b9      	str	r1, [r7, #8]
 802692c:	607a      	str	r2, [r7, #4]
   //RSAVP1 primitive is the same as RSAEP except for the names of its input
   //and output arguments. They are distinguished as they are intended for
   //different purposes
   return rsaep(key, s, m);
 802692e:	687a      	ldr	r2, [r7, #4]
 8026930:	68b9      	ldr	r1, [r7, #8]
 8026932:	68f8      	ldr	r0, [r7, #12]
 8026934:	f7ff ffc6 	bl	80268c4 <rsaep>
 8026938:	4603      	mov	r3, r0
}
 802693a:	4618      	mov	r0, r3
 802693c:	3710      	adds	r7, #16
 802693e:	46bd      	mov	sp, r7
 8026940:	bd80      	pop	{r7, pc}

08026942 <emsaPkcs1v15Verify>:
 * @return Error code
 **/

error_t emsaPkcs1v15Verify(const HashAlgo *hash, const uint8_t *digest,
   const uint8_t *em, size_t emLen)
{
 8026942:	b480      	push	{r7}
 8026944:	b089      	sub	sp, #36	@ 0x24
 8026946:	af00      	add	r7, sp, #0
 8026948:	60f8      	str	r0, [r7, #12]
 802694a:	60b9      	str	r1, [r7, #8]
 802694c:	607a      	str	r2, [r7, #4]
 802694e:	603b      	str	r3, [r7, #0]
   size_t j;
   size_t n;
   uint8_t bad;

   //Check the length of the encoded message
   if(emLen < (hash->oidSize + hash->digestSize + 21))
 8026950:	68fb      	ldr	r3, [r7, #12]
 8026952:	689a      	ldr	r2, [r3, #8]
 8026954:	68fb      	ldr	r3, [r7, #12]
 8026956:	695b      	ldr	r3, [r3, #20]
 8026958:	4413      	add	r3, r2
 802695a:	3315      	adds	r3, #21
 802695c:	683a      	ldr	r2, [r7, #0]
 802695e:	429a      	cmp	r2, r3
 8026960:	d201      	bcs.n	8026966 <emsaPkcs1v15Verify+0x24>
      return ERROR_INVALID_LENGTH;
 8026962:	23ec      	movs	r3, #236	@ 0xec
 8026964:	e123      	b.n	8026bae <emsaPkcs1v15Verify+0x26c>

   //Point to the first byte of the encoded message
   i = 0;
 8026966:	2300      	movs	r3, #0
 8026968:	61fb      	str	r3, [r7, #28]

   //The first octet of EM must have hexadecimal value 0x00
   bad = em[i++];
 802696a:	69fb      	ldr	r3, [r7, #28]
 802696c:	1c5a      	adds	r2, r3, #1
 802696e:	61fa      	str	r2, [r7, #28]
 8026970:	687a      	ldr	r2, [r7, #4]
 8026972:	4413      	add	r3, r2
 8026974:	781b      	ldrb	r3, [r3, #0]
 8026976:	75fb      	strb	r3, [r7, #23]
   //The second octet of EM must have hexadecimal value 0x01
   bad |= em[i++] ^ 0x01;
 8026978:	69fb      	ldr	r3, [r7, #28]
 802697a:	1c5a      	adds	r2, r3, #1
 802697c:	61fa      	str	r2, [r7, #28]
 802697e:	687a      	ldr	r2, [r7, #4]
 8026980:	4413      	add	r3, r2
 8026982:	781b      	ldrb	r3, [r3, #0]
 8026984:	f083 0301 	eor.w	r3, r3, #1
 8026988:	b2db      	uxtb	r3, r3
 802698a:	b25a      	sxtb	r2, r3
 802698c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8026990:	4313      	orrs	r3, r2
 8026992:	b25b      	sxtb	r3, r3
 8026994:	75fb      	strb	r3, [r7, #23]

   //Determine the length of the padding string PS
   n = emLen - hash->oidSize - hash->digestSize - 13;
 8026996:	68fb      	ldr	r3, [r7, #12]
 8026998:	689b      	ldr	r3, [r3, #8]
 802699a:	683a      	ldr	r2, [r7, #0]
 802699c:	1ad2      	subs	r2, r2, r3
 802699e:	68fb      	ldr	r3, [r7, #12]
 80269a0:	695b      	ldr	r3, [r3, #20]
 80269a2:	1ad3      	subs	r3, r2, r3
 80269a4:	3b0d      	subs	r3, #13
 80269a6:	613b      	str	r3, [r7, #16]

   //Each byte of PS must be set to 0xFF when the block type is 0x01
   for(j = 0; j < n; j++)
 80269a8:	2300      	movs	r3, #0
 80269aa:	61bb      	str	r3, [r7, #24]
 80269ac:	e010      	b.n	80269d0 <emsaPkcs1v15Verify+0x8e>
   {
      bad |= em[i++] ^ 0xFF;
 80269ae:	69fb      	ldr	r3, [r7, #28]
 80269b0:	1c5a      	adds	r2, r3, #1
 80269b2:	61fa      	str	r2, [r7, #28]
 80269b4:	687a      	ldr	r2, [r7, #4]
 80269b6:	4413      	add	r3, r2
 80269b8:	781b      	ldrb	r3, [r3, #0]
 80269ba:	43db      	mvns	r3, r3
 80269bc:	b2db      	uxtb	r3, r3
 80269be:	b25a      	sxtb	r2, r3
 80269c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80269c4:	4313      	orrs	r3, r2
 80269c6:	b25b      	sxtb	r3, r3
 80269c8:	75fb      	strb	r3, [r7, #23]
   for(j = 0; j < n; j++)
 80269ca:	69bb      	ldr	r3, [r7, #24]
 80269cc:	3301      	adds	r3, #1
 80269ce:	61bb      	str	r3, [r7, #24]
 80269d0:	69ba      	ldr	r2, [r7, #24]
 80269d2:	693b      	ldr	r3, [r7, #16]
 80269d4:	429a      	cmp	r2, r3
 80269d6:	d3ea      	bcc.n	80269ae <emsaPkcs1v15Verify+0x6c>
   }

   //The padding string must be followed by a 0x00 octet
   bad |= em[i++];
 80269d8:	69fb      	ldr	r3, [r7, #28]
 80269da:	1c5a      	adds	r2, r3, #1
 80269dc:	61fa      	str	r2, [r7, #28]
 80269de:	687a      	ldr	r2, [r7, #4]
 80269e0:	4413      	add	r3, r2
 80269e2:	781a      	ldrb	r2, [r3, #0]
 80269e4:	7dfb      	ldrb	r3, [r7, #23]
 80269e6:	4313      	orrs	r3, r2
 80269e8:	75fb      	strb	r3, [r7, #23]

   //Check the ASN.1 syntax of the DigestInfo structure
   bad |= em[i++] ^ (uint8_t) (ASN1_ENCODING_CONSTRUCTED | ASN1_TYPE_SEQUENCE);
 80269ea:	69fb      	ldr	r3, [r7, #28]
 80269ec:	1c5a      	adds	r2, r3, #1
 80269ee:	61fa      	str	r2, [r7, #28]
 80269f0:	687a      	ldr	r2, [r7, #4]
 80269f2:	4413      	add	r3, r2
 80269f4:	781b      	ldrb	r3, [r3, #0]
 80269f6:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 80269fa:	b2db      	uxtb	r3, r3
 80269fc:	b25a      	sxtb	r2, r3
 80269fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8026a02:	4313      	orrs	r3, r2
 8026a04:	b25b      	sxtb	r3, r3
 8026a06:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) (hash->oidSize + hash->digestSize + 8);
 8026a08:	69fb      	ldr	r3, [r7, #28]
 8026a0a:	1c5a      	adds	r2, r3, #1
 8026a0c:	61fa      	str	r2, [r7, #28]
 8026a0e:	687a      	ldr	r2, [r7, #4]
 8026a10:	4413      	add	r3, r2
 8026a12:	781a      	ldrb	r2, [r3, #0]
 8026a14:	68fb      	ldr	r3, [r7, #12]
 8026a16:	689b      	ldr	r3, [r3, #8]
 8026a18:	b2d9      	uxtb	r1, r3
 8026a1a:	68fb      	ldr	r3, [r7, #12]
 8026a1c:	695b      	ldr	r3, [r3, #20]
 8026a1e:	b2db      	uxtb	r3, r3
 8026a20:	440b      	add	r3, r1
 8026a22:	b2db      	uxtb	r3, r3
 8026a24:	3308      	adds	r3, #8
 8026a26:	b2db      	uxtb	r3, r3
 8026a28:	4053      	eors	r3, r2
 8026a2a:	b2db      	uxtb	r3, r3
 8026a2c:	b25a      	sxtb	r2, r3
 8026a2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8026a32:	4313      	orrs	r3, r2
 8026a34:	b25b      	sxtb	r3, r3
 8026a36:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) (ASN1_ENCODING_CONSTRUCTED | ASN1_TYPE_SEQUENCE);
 8026a38:	69fb      	ldr	r3, [r7, #28]
 8026a3a:	1c5a      	adds	r2, r3, #1
 8026a3c:	61fa      	str	r2, [r7, #28]
 8026a3e:	687a      	ldr	r2, [r7, #4]
 8026a40:	4413      	add	r3, r2
 8026a42:	781b      	ldrb	r3, [r3, #0]
 8026a44:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8026a48:	b2db      	uxtb	r3, r3
 8026a4a:	b25a      	sxtb	r2, r3
 8026a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8026a50:	4313      	orrs	r3, r2
 8026a52:	b25b      	sxtb	r3, r3
 8026a54:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) (hash->oidSize + 4);
 8026a56:	69fb      	ldr	r3, [r7, #28]
 8026a58:	1c5a      	adds	r2, r3, #1
 8026a5a:	61fa      	str	r2, [r7, #28]
 8026a5c:	687a      	ldr	r2, [r7, #4]
 8026a5e:	4413      	add	r3, r2
 8026a60:	781a      	ldrb	r2, [r3, #0]
 8026a62:	68fb      	ldr	r3, [r7, #12]
 8026a64:	689b      	ldr	r3, [r3, #8]
 8026a66:	b2db      	uxtb	r3, r3
 8026a68:	3304      	adds	r3, #4
 8026a6a:	b2db      	uxtb	r3, r3
 8026a6c:	4053      	eors	r3, r2
 8026a6e:	b2db      	uxtb	r3, r3
 8026a70:	b25a      	sxtb	r2, r3
 8026a72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8026a76:	4313      	orrs	r3, r2
 8026a78:	b25b      	sxtb	r3, r3
 8026a7a:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) ASN1_TYPE_OBJECT_IDENTIFIER;
 8026a7c:	69fb      	ldr	r3, [r7, #28]
 8026a7e:	1c5a      	adds	r2, r3, #1
 8026a80:	61fa      	str	r2, [r7, #28]
 8026a82:	687a      	ldr	r2, [r7, #4]
 8026a84:	4413      	add	r3, r2
 8026a86:	781b      	ldrb	r3, [r3, #0]
 8026a88:	f083 0306 	eor.w	r3, r3, #6
 8026a8c:	b2db      	uxtb	r3, r3
 8026a8e:	b25a      	sxtb	r2, r3
 8026a90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8026a94:	4313      	orrs	r3, r2
 8026a96:	b25b      	sxtb	r3, r3
 8026a98:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) hash->oidSize;
 8026a9a:	69fb      	ldr	r3, [r7, #28]
 8026a9c:	1c5a      	adds	r2, r3, #1
 8026a9e:	61fa      	str	r2, [r7, #28]
 8026aa0:	687a      	ldr	r2, [r7, #4]
 8026aa2:	4413      	add	r3, r2
 8026aa4:	781a      	ldrb	r2, [r3, #0]
 8026aa6:	68fb      	ldr	r3, [r7, #12]
 8026aa8:	689b      	ldr	r3, [r3, #8]
 8026aaa:	b2db      	uxtb	r3, r3
 8026aac:	4053      	eors	r3, r2
 8026aae:	b2db      	uxtb	r3, r3
 8026ab0:	b25a      	sxtb	r2, r3
 8026ab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8026ab6:	4313      	orrs	r3, r2
 8026ab8:	b25b      	sxtb	r3, r3
 8026aba:	75fb      	strb	r3, [r7, #23]

   //Verify the hash algorithm OID
   for(j = 0; j < hash->oidSize; j++)
 8026abc:	2300      	movs	r3, #0
 8026abe:	61bb      	str	r3, [r7, #24]
 8026ac0:	e015      	b.n	8026aee <emsaPkcs1v15Verify+0x1ac>
   {
      bad |= em[i++] ^ hash->oid[j];
 8026ac2:	69fb      	ldr	r3, [r7, #28]
 8026ac4:	1c5a      	adds	r2, r3, #1
 8026ac6:	61fa      	str	r2, [r7, #28]
 8026ac8:	687a      	ldr	r2, [r7, #4]
 8026aca:	4413      	add	r3, r2
 8026acc:	781a      	ldrb	r2, [r3, #0]
 8026ace:	68fb      	ldr	r3, [r7, #12]
 8026ad0:	6859      	ldr	r1, [r3, #4]
 8026ad2:	69bb      	ldr	r3, [r7, #24]
 8026ad4:	440b      	add	r3, r1
 8026ad6:	781b      	ldrb	r3, [r3, #0]
 8026ad8:	4053      	eors	r3, r2
 8026ada:	b2db      	uxtb	r3, r3
 8026adc:	b25a      	sxtb	r2, r3
 8026ade:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8026ae2:	4313      	orrs	r3, r2
 8026ae4:	b25b      	sxtb	r3, r3
 8026ae6:	75fb      	strb	r3, [r7, #23]
   for(j = 0; j < hash->oidSize; j++)
 8026ae8:	69bb      	ldr	r3, [r7, #24]
 8026aea:	3301      	adds	r3, #1
 8026aec:	61bb      	str	r3, [r7, #24]
 8026aee:	68fb      	ldr	r3, [r7, #12]
 8026af0:	689b      	ldr	r3, [r3, #8]
 8026af2:	69ba      	ldr	r2, [r7, #24]
 8026af4:	429a      	cmp	r2, r3
 8026af6:	d3e4      	bcc.n	8026ac2 <emsaPkcs1v15Verify+0x180>
   }

   //Check the rest of the ASN.1 structure
   bad |= em[i++] ^ (uint8_t) ASN1_TYPE_NULL;
 8026af8:	69fb      	ldr	r3, [r7, #28]
 8026afa:	1c5a      	adds	r2, r3, #1
 8026afc:	61fa      	str	r2, [r7, #28]
 8026afe:	687a      	ldr	r2, [r7, #4]
 8026b00:	4413      	add	r3, r2
 8026b02:	781b      	ldrb	r3, [r3, #0]
 8026b04:	f083 0305 	eor.w	r3, r3, #5
 8026b08:	b2db      	uxtb	r3, r3
 8026b0a:	b25a      	sxtb	r2, r3
 8026b0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8026b10:	4313      	orrs	r3, r2
 8026b12:	b25b      	sxtb	r3, r3
 8026b14:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++];
 8026b16:	69fb      	ldr	r3, [r7, #28]
 8026b18:	1c5a      	adds	r2, r3, #1
 8026b1a:	61fa      	str	r2, [r7, #28]
 8026b1c:	687a      	ldr	r2, [r7, #4]
 8026b1e:	4413      	add	r3, r2
 8026b20:	781a      	ldrb	r2, [r3, #0]
 8026b22:	7dfb      	ldrb	r3, [r7, #23]
 8026b24:	4313      	orrs	r3, r2
 8026b26:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) ASN1_TYPE_OCTET_STRING;
 8026b28:	69fb      	ldr	r3, [r7, #28]
 8026b2a:	1c5a      	adds	r2, r3, #1
 8026b2c:	61fa      	str	r2, [r7, #28]
 8026b2e:	687a      	ldr	r2, [r7, #4]
 8026b30:	4413      	add	r3, r2
 8026b32:	781b      	ldrb	r3, [r3, #0]
 8026b34:	f083 0304 	eor.w	r3, r3, #4
 8026b38:	b2db      	uxtb	r3, r3
 8026b3a:	b25a      	sxtb	r2, r3
 8026b3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8026b40:	4313      	orrs	r3, r2
 8026b42:	b25b      	sxtb	r3, r3
 8026b44:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) hash->digestSize;
 8026b46:	69fb      	ldr	r3, [r7, #28]
 8026b48:	1c5a      	adds	r2, r3, #1
 8026b4a:	61fa      	str	r2, [r7, #28]
 8026b4c:	687a      	ldr	r2, [r7, #4]
 8026b4e:	4413      	add	r3, r2
 8026b50:	781a      	ldrb	r2, [r3, #0]
 8026b52:	68fb      	ldr	r3, [r7, #12]
 8026b54:	695b      	ldr	r3, [r3, #20]
 8026b56:	b2db      	uxtb	r3, r3
 8026b58:	4053      	eors	r3, r2
 8026b5a:	b2db      	uxtb	r3, r3
 8026b5c:	b25a      	sxtb	r2, r3
 8026b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8026b62:	4313      	orrs	r3, r2
 8026b64:	b25b      	sxtb	r3, r3
 8026b66:	75fb      	strb	r3, [r7, #23]

   //Recover the underlying hash value, and then compare it to the newly
   //computed hash value
   for(j = 0; j < hash->digestSize; j++)
 8026b68:	2300      	movs	r3, #0
 8026b6a:	61bb      	str	r3, [r7, #24]
 8026b6c:	e014      	b.n	8026b98 <emsaPkcs1v15Verify+0x256>
   {
      bad |= em[i++] ^ digest[j];
 8026b6e:	69fb      	ldr	r3, [r7, #28]
 8026b70:	1c5a      	adds	r2, r3, #1
 8026b72:	61fa      	str	r2, [r7, #28]
 8026b74:	687a      	ldr	r2, [r7, #4]
 8026b76:	4413      	add	r3, r2
 8026b78:	781a      	ldrb	r2, [r3, #0]
 8026b7a:	68b9      	ldr	r1, [r7, #8]
 8026b7c:	69bb      	ldr	r3, [r7, #24]
 8026b7e:	440b      	add	r3, r1
 8026b80:	781b      	ldrb	r3, [r3, #0]
 8026b82:	4053      	eors	r3, r2
 8026b84:	b2db      	uxtb	r3, r3
 8026b86:	b25a      	sxtb	r2, r3
 8026b88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8026b8c:	4313      	orrs	r3, r2
 8026b8e:	b25b      	sxtb	r3, r3
 8026b90:	75fb      	strb	r3, [r7, #23]
   for(j = 0; j < hash->digestSize; j++)
 8026b92:	69bb      	ldr	r3, [r7, #24]
 8026b94:	3301      	adds	r3, #1
 8026b96:	61bb      	str	r3, [r7, #24]
 8026b98:	68fb      	ldr	r3, [r7, #12]
 8026b9a:	695b      	ldr	r3, [r3, #20]
 8026b9c:	69ba      	ldr	r2, [r7, #24]
 8026b9e:	429a      	cmp	r2, r3
 8026ba0:	d3e5      	bcc.n	8026b6e <emsaPkcs1v15Verify+0x22c>
   }

   //Verification result
   return (bad != 0) ? ERROR_INCONSISTENT_VALUE : NO_ERROR;
 8026ba2:	7dfb      	ldrb	r3, [r7, #23]
 8026ba4:	2b00      	cmp	r3, #0
 8026ba6:	d001      	beq.n	8026bac <emsaPkcs1v15Verify+0x26a>
 8026ba8:	23f9      	movs	r3, #249	@ 0xf9
 8026baa:	e000      	b.n	8026bae <emsaPkcs1v15Verify+0x26c>
 8026bac:	2300      	movs	r3, #0
}
 8026bae:	4618      	mov	r0, r3
 8026bb0:	3724      	adds	r7, #36	@ 0x24
 8026bb2:	46bd      	mov	sp, r7
 8026bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bb8:	4770      	bx	lr
	...

08026bbc <pemDecodeFile>:
 *   (optional parameter)
 **/

error_t pemDecodeFile(const char_t *input, size_t inputLen, const char_t *label,
   uint8_t *output, size_t *outputLen, PemHeader *header, size_t *consumed)
{
 8026bbc:	b590      	push	{r4, r7, lr}
 8026bbe:	b08b      	sub	sp, #44	@ 0x2c
 8026bc0:	af02      	add	r7, sp, #8
 8026bc2:	60f8      	str	r0, [r7, #12]
 8026bc4:	60b9      	str	r1, [r7, #8]
 8026bc6:	607a      	str	r2, [r7, #4]
 8026bc8:	603b      	str	r3, [r7, #0]
   int_t i;
   int_t j;
   size_t n;

   //Check parameters
   if(input == NULL || label == NULL || outputLen == NULL)
 8026bca:	68fb      	ldr	r3, [r7, #12]
 8026bcc:	2b00      	cmp	r3, #0
 8026bce:	d005      	beq.n	8026bdc <pemDecodeFile+0x20>
 8026bd0:	687b      	ldr	r3, [r7, #4]
 8026bd2:	2b00      	cmp	r3, #0
 8026bd4:	d002      	beq.n	8026bdc <pemDecodeFile+0x20>
 8026bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026bd8:	2b00      	cmp	r3, #0
 8026bda:	d101      	bne.n	8026be0 <pemDecodeFile+0x24>
      return ERROR_INVALID_PARAMETER;
 8026bdc:	2302      	movs	r3, #2
 8026bde:	e062      	b.n	8026ca6 <pemDecodeFile+0xea>

   //The PEM container begins with a "-----BEGIN " line
   i = pemFindTag(input, inputLen, "-----BEGIN ", label, "-----");
 8026be0:	4b33      	ldr	r3, [pc, #204]	@ (8026cb0 <pemDecodeFile+0xf4>)
 8026be2:	9300      	str	r3, [sp, #0]
 8026be4:	687b      	ldr	r3, [r7, #4]
 8026be6:	4a33      	ldr	r2, [pc, #204]	@ (8026cb4 <pemDecodeFile+0xf8>)
 8026be8:	68b9      	ldr	r1, [r7, #8]
 8026bea:	68f8      	ldr	r0, [r7, #12]
 8026bec:	f000 f94e 	bl	8026e8c <pemFindTag>
 8026bf0:	61f8      	str	r0, [r7, #28]
   //Pre-encapsulation boundary not found?
   if(i < 0)
 8026bf2:	69fb      	ldr	r3, [r7, #28]
 8026bf4:	2b00      	cmp	r3, #0
 8026bf6:	da02      	bge.n	8026bfe <pemDecodeFile+0x42>
      return ERROR_END_OF_FILE;
 8026bf8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8026bfc:	e053      	b.n	8026ca6 <pemDecodeFile+0xea>

   //Skip the pre-encapsulation boundary
   i += osStrlen("-----BEGIN -----") + osStrlen(label);
 8026bfe:	6878      	ldr	r0, [r7, #4]
 8026c00:	f7f9 fd36 	bl	8020670 <strlen>
 8026c04:	4602      	mov	r2, r0
 8026c06:	69fb      	ldr	r3, [r7, #28]
 8026c08:	4413      	add	r3, r2
 8026c0a:	3310      	adds	r3, #16
 8026c0c:	61fb      	str	r3, [r7, #28]

   //The PEM container ends with a "-----END " line
   j = pemFindTag(input + i, inputLen - i, "-----END ", label, "-----");
 8026c0e:	69fb      	ldr	r3, [r7, #28]
 8026c10:	68fa      	ldr	r2, [r7, #12]
 8026c12:	18d0      	adds	r0, r2, r3
 8026c14:	69fb      	ldr	r3, [r7, #28]
 8026c16:	68ba      	ldr	r2, [r7, #8]
 8026c18:	1ad1      	subs	r1, r2, r3
 8026c1a:	4b25      	ldr	r3, [pc, #148]	@ (8026cb0 <pemDecodeFile+0xf4>)
 8026c1c:	9300      	str	r3, [sp, #0]
 8026c1e:	687b      	ldr	r3, [r7, #4]
 8026c20:	4a25      	ldr	r2, [pc, #148]	@ (8026cb8 <pemDecodeFile+0xfc>)
 8026c22:	f000 f933 	bl	8026e8c <pemFindTag>
 8026c26:	61b8      	str	r0, [r7, #24]
   //Post-encapsulation boundary not found?
   if(j < 0)
 8026c28:	69bb      	ldr	r3, [r7, #24]
 8026c2a:	2b00      	cmp	r3, #0
 8026c2c:	da01      	bge.n	8026c32 <pemDecodeFile+0x76>
      return ERROR_INVALID_SYNTAX;
 8026c2e:	2369      	movs	r3, #105	@ 0x69
 8026c30:	e039      	b.n	8026ca6 <pemDecodeFile+0xea>

   //Parse PEM encapsulated header
   error = pemParseHeader(input + i, j, header, &n);
 8026c32:	69fb      	ldr	r3, [r7, #28]
 8026c34:	68fa      	ldr	r2, [r7, #12]
 8026c36:	18d0      	adds	r0, r2, r3
 8026c38:	69b9      	ldr	r1, [r7, #24]
 8026c3a:	f107 0310 	add.w	r3, r7, #16
 8026c3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8026c40:	f000 f83c 	bl	8026cbc <pemParseHeader>
 8026c44:	4603      	mov	r3, r0
 8026c46:	82fb      	strh	r3, [r7, #22]
   //Any error to report?
   if(error)
 8026c48:	8afb      	ldrh	r3, [r7, #22]
 8026c4a:	2b00      	cmp	r3, #0
 8026c4c:	d001      	beq.n	8026c52 <pemDecodeFile+0x96>
      return error;
 8026c4e:	8afb      	ldrh	r3, [r7, #22]
 8026c50:	e029      	b.n	8026ca6 <pemDecodeFile+0xea>

   //The contents of the PEM file is Base64-encoded
   error = base64Decode(input + i + n, j - n, output, outputLen);
 8026c52:	69fa      	ldr	r2, [r7, #28]
 8026c54:	693b      	ldr	r3, [r7, #16]
 8026c56:	4413      	add	r3, r2
 8026c58:	68fa      	ldr	r2, [r7, #12]
 8026c5a:	18d0      	adds	r0, r2, r3
 8026c5c:	69ba      	ldr	r2, [r7, #24]
 8026c5e:	693b      	ldr	r3, [r7, #16]
 8026c60:	1ad1      	subs	r1, r2, r3
 8026c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026c64:	683a      	ldr	r2, [r7, #0]
 8026c66:	f7fd fc5b 	bl	8024520 <base64Decode>
 8026c6a:	4603      	mov	r3, r0
 8026c6c:	82fb      	strh	r3, [r7, #22]
   //Failed to decode the file?
   if(error)
 8026c6e:	8afb      	ldrh	r3, [r7, #22]
 8026c70:	2b00      	cmp	r3, #0
 8026c72:	d001      	beq.n	8026c78 <pemDecodeFile+0xbc>
      return error;
 8026c74:	8afb      	ldrh	r3, [r7, #22]
 8026c76:	e016      	b.n	8026ca6 <pemDecodeFile+0xea>

   //Sanity check
   if(*outputLen == 0)
 8026c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026c7a:	681b      	ldr	r3, [r3, #0]
 8026c7c:	2b00      	cmp	r3, #0
 8026c7e:	d101      	bne.n	8026c84 <pemDecodeFile+0xc8>
      return ERROR_INVALID_SYNTAX;
 8026c80:	2369      	movs	r3, #105	@ 0x69
 8026c82:	e010      	b.n	8026ca6 <pemDecodeFile+0xea>

   //The last parameter is optional
   if(consumed != NULL)
 8026c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8026c86:	2b00      	cmp	r3, #0
 8026c88:	d00c      	beq.n	8026ca4 <pemDecodeFile+0xe8>
   {
      //Total number of characters that have been consumed
      *consumed = i + j + osStrlen("-----END -----") + osStrlen(label);
 8026c8a:	69fa      	ldr	r2, [r7, #28]
 8026c8c:	69bb      	ldr	r3, [r7, #24]
 8026c8e:	4413      	add	r3, r2
 8026c90:	461c      	mov	r4, r3
 8026c92:	6878      	ldr	r0, [r7, #4]
 8026c94:	f7f9 fcec 	bl	8020670 <strlen>
 8026c98:	4603      	mov	r3, r0
 8026c9a:	4423      	add	r3, r4
 8026c9c:	f103 020e 	add.w	r2, r3, #14
 8026ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8026ca2:	601a      	str	r2, [r3, #0]
   }

   //Successful processing
   return NO_ERROR;
 8026ca4:	2300      	movs	r3, #0
}
 8026ca6:	4618      	mov	r0, r3
 8026ca8:	3724      	adds	r7, #36	@ 0x24
 8026caa:	46bd      	mov	sp, r7
 8026cac:	bd90      	pop	{r4, r7, pc}
 8026cae:	bf00      	nop
 8026cb0:	0802cb00 	.word	0x0802cb00
 8026cb4:	0802caf4 	.word	0x0802caf4
 8026cb8:	0802cb08 	.word	0x0802cb08

08026cbc <pemParseHeader>:
 * @return Error code
 **/

error_t pemParseHeader(const char_t *input, size_t inputLen,
   PemHeader *header, size_t *consumed)
{
 8026cbc:	b580      	push	{r7, lr}
 8026cbe:	b088      	sub	sp, #32
 8026cc0:	af00      	add	r7, sp, #0
 8026cc2:	60f8      	str	r0, [r7, #12]
 8026cc4:	60b9      	str	r1, [r7, #8]
 8026cc6:	607a      	str	r2, [r7, #4]
 8026cc8:	603b      	str	r3, [r7, #0]
   size_t n;
   const char_t *end;
   PemString line;

   //The header parameter is optional
   if(header != NULL)
 8026cca:	687b      	ldr	r3, [r7, #4]
 8026ccc:	2b00      	cmp	r3, #0
 8026cce:	d004      	beq.n	8026cda <pemParseHeader+0x1e>
   {
      //Clear header fields
      osMemset(header, 0, sizeof(PemHeader));
 8026cd0:	2220      	movs	r2, #32
 8026cd2:	2100      	movs	r1, #0
 8026cd4:	6878      	ldr	r0, [r7, #4]
 8026cd6:	f004 ffaf 	bl	802bc38 <memset>
   }

   //Total number of bytes that have been consumed
   *consumed = 0;
 8026cda:	683b      	ldr	r3, [r7, #0]
 8026cdc:	2200      	movs	r2, #0
 8026cde:	601a      	str	r2, [r3, #0]

   //Parse PEM encapsulated header
   while(1)
   {
      //Extract a line from the PEM message body
      end = osMemchr(input, '\n', inputLen);
 8026ce0:	68ba      	ldr	r2, [r7, #8]
 8026ce2:	210a      	movs	r1, #10
 8026ce4:	68f8      	ldr	r0, [r7, #12]
 8026ce6:	f7f9 fc73 	bl	80205d0 <memchr>
 8026cea:	61f8      	str	r0, [r7, #28]
      //No end of line character detected?
      if(end == NULL)
 8026cec:	69fb      	ldr	r3, [r7, #28]
 8026cee:	2b00      	cmp	r3, #0
 8026cf0:	d034      	beq.n	8026d5c <pemParseHeader+0xa0>
         break;

      //Calculate the length of the line
      n = end - input + 1;
 8026cf2:	69fa      	ldr	r2, [r7, #28]
 8026cf4:	68fb      	ldr	r3, [r7, #12]
 8026cf6:	1ad3      	subs	r3, r2, r3
 8026cf8:	3301      	adds	r3, #1
 8026cfa:	61bb      	str	r3, [r7, #24]

      //Point to the current line
      line.value = input;
 8026cfc:	68fb      	ldr	r3, [r7, #12]
 8026cfe:	613b      	str	r3, [r7, #16]
      line.length = n;
 8026d00:	69bb      	ldr	r3, [r7, #24]
 8026d02:	617b      	str	r3, [r7, #20]

      //Removes all leading and trailing whitespace from a string
      pemTrimWhitespace(&line);
 8026d04:	f107 0310 	add.w	r3, r7, #16
 8026d08:	4618      	mov	r0, r3
 8026d0a:	f000 f9c9 	bl	80270a0 <pemTrimWhitespace>

      //Discard empty lines
      if(!pemCompareString(&line, ""))
 8026d0e:	f107 0310 	add.w	r3, r7, #16
 8026d12:	4916      	ldr	r1, [pc, #88]	@ (8026d6c <pemParseHeader+0xb0>)
 8026d14:	4618      	mov	r0, r3
 8026d16:	f000 f955 	bl	8026fc4 <pemCompareString>
 8026d1a:	4603      	mov	r3, r0
 8026d1c:	2b00      	cmp	r3, #0
 8026d1e:	d10e      	bne.n	8026d3e <pemParseHeader+0x82>
      {
         //Each header field consists of a field name followed by a colon,
         //optional leading whitespace, and the field value
         if(pemFindChar(&line, ':') >= 0)
 8026d20:	f107 0310 	add.w	r3, r7, #16
 8026d24:	213a      	movs	r1, #58	@ 0x3a
 8026d26:	4618      	mov	r0, r3
 8026d28:	f000 f92c 	bl	8026f84 <pemFindChar>
 8026d2c:	4603      	mov	r3, r0
 8026d2e:	2b00      	cmp	r3, #0
 8026d30:	db16      	blt.n	8026d60 <pemParseHeader+0xa4>
         {
            //Parse header field
            pemParseHeaderField(&line, header);
 8026d32:	f107 0310 	add.w	r3, r7, #16
 8026d36:	6879      	ldr	r1, [r7, #4]
 8026d38:	4618      	mov	r0, r3
 8026d3a:	f000 f819 	bl	8026d70 <pemParseHeaderField>
            break;
         }
      }

      //Point to the next line
      input += n;
 8026d3e:	68fa      	ldr	r2, [r7, #12]
 8026d40:	69bb      	ldr	r3, [r7, #24]
 8026d42:	4413      	add	r3, r2
 8026d44:	60fb      	str	r3, [r7, #12]
      inputLen -= n;
 8026d46:	68ba      	ldr	r2, [r7, #8]
 8026d48:	69bb      	ldr	r3, [r7, #24]
 8026d4a:	1ad3      	subs	r3, r2, r3
 8026d4c:	60bb      	str	r3, [r7, #8]
      *consumed += n;
 8026d4e:	683b      	ldr	r3, [r7, #0]
 8026d50:	681a      	ldr	r2, [r3, #0]
 8026d52:	69bb      	ldr	r3, [r7, #24]
 8026d54:	441a      	add	r2, r3
 8026d56:	683b      	ldr	r3, [r7, #0]
 8026d58:	601a      	str	r2, [r3, #0]
      end = osMemchr(input, '\n', inputLen);
 8026d5a:	e7c1      	b.n	8026ce0 <pemParseHeader+0x24>
         break;
 8026d5c:	bf00      	nop
 8026d5e:	e000      	b.n	8026d62 <pemParseHeader+0xa6>
            break;
 8026d60:	bf00      	nop
   }

   //Sucessful processing
   return NO_ERROR;
 8026d62:	2300      	movs	r3, #0
}
 8026d64:	4618      	mov	r0, r3
 8026d66:	3720      	adds	r7, #32
 8026d68:	46bd      	mov	sp, r7
 8026d6a:	bd80      	pop	{r7, pc}
 8026d6c:	0802cb28 	.word	0x0802cb28

08026d70 <pemParseHeaderField>:
 * @param[in] line Header field
 * @param[in] header PEM encapsulated header (optional parameter)
 **/

void pemParseHeaderField(PemString *line, PemHeader *header)
{
 8026d70:	b580      	push	{r7, lr}
 8026d72:	b088      	sub	sp, #32
 8026d74:	af00      	add	r7, sp, #0
 8026d76:	6078      	str	r0, [r7, #4]
 8026d78:	6039      	str	r1, [r7, #0]
   PemString arg1;
   PemString arg2;

   //Each header field consists of a field name followed by a colon,
   //optional leading whitespace, and the field value
   pemTokenizeString(line, ':', &name);
 8026d7a:	f107 0318 	add.w	r3, r7, #24
 8026d7e:	461a      	mov	r2, r3
 8026d80:	213a      	movs	r1, #58	@ 0x3a
 8026d82:	6878      	ldr	r0, [r7, #4]
 8026d84:	f000 f946 	bl	8027014 <pemTokenizeString>

   //Removes all leading and trailing whitespace from the name
   pemTrimWhitespace(&name);
 8026d88:	f107 0318 	add.w	r3, r7, #24
 8026d8c:	4618      	mov	r0, r3
 8026d8e:	f000 f987 	bl	80270a0 <pemTrimWhitespace>

   //Check header field name
   if(pemCompareString(&name, "Proc-Type"))
 8026d92:	f107 0318 	add.w	r3, r7, #24
 8026d96:	493b      	ldr	r1, [pc, #236]	@ (8026e84 <pemParseHeaderField+0x114>)
 8026d98:	4618      	mov	r0, r3
 8026d9a:	f000 f913 	bl	8026fc4 <pemCompareString>
 8026d9e:	4603      	mov	r3, r0
 8026da0:	2b00      	cmp	r3, #0
 8026da2:	d031      	beq.n	8026e08 <pemParseHeaderField+0x98>
   {
      //The "Proc-Type" encapsulated header field, required for all PEM
      //messages, identifies the type of processing performed on the
      //transmitted message (refer to RFC 1421, section 4.6.1.1)
      if(pemTokenizeString(line, ',', &arg1) &&
 8026da4:	f107 0310 	add.w	r3, r7, #16
 8026da8:	461a      	mov	r2, r3
 8026daa:	212c      	movs	r1, #44	@ 0x2c
 8026dac:	6878      	ldr	r0, [r7, #4]
 8026dae:	f000 f931 	bl	8027014 <pemTokenizeString>
 8026db2:	4603      	mov	r3, r0
 8026db4:	2b00      	cmp	r3, #0
 8026db6:	d061      	beq.n	8026e7c <pemParseHeaderField+0x10c>
         pemTokenizeString(line, ',', &arg2))
 8026db8:	f107 0308 	add.w	r3, r7, #8
 8026dbc:	461a      	mov	r2, r3
 8026dbe:	212c      	movs	r1, #44	@ 0x2c
 8026dc0:	6878      	ldr	r0, [r7, #4]
 8026dc2:	f000 f927 	bl	8027014 <pemTokenizeString>
 8026dc6:	4603      	mov	r3, r0
      if(pemTokenizeString(line, ',', &arg1) &&
 8026dc8:	2b00      	cmp	r3, #0
 8026dca:	d057      	beq.n	8026e7c <pemParseHeaderField+0x10c>
      {
         //Removes all leading and trailing whitespace characters
         pemTrimWhitespace(&arg1);
 8026dcc:	f107 0310 	add.w	r3, r7, #16
 8026dd0:	4618      	mov	r0, r3
 8026dd2:	f000 f965 	bl	80270a0 <pemTrimWhitespace>
         pemTrimWhitespace(&arg2);
 8026dd6:	f107 0308 	add.w	r3, r7, #8
 8026dda:	4618      	mov	r0, r3
 8026ddc:	f000 f960 	bl	80270a0 <pemTrimWhitespace>

         //Save arguments
         if(header != NULL)
 8026de0:	683b      	ldr	r3, [r7, #0]
 8026de2:	2b00      	cmp	r3, #0
 8026de4:	d04a      	beq.n	8026e7c <pemParseHeaderField+0x10c>
         {
            header->procType.version = arg1;
 8026de6:	683b      	ldr	r3, [r7, #0]
 8026de8:	461a      	mov	r2, r3
 8026dea:	f107 0310 	add.w	r3, r7, #16
 8026dee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8026df2:	e882 0003 	stmia.w	r2, {r0, r1}
            header->procType.type = arg2;
 8026df6:	683b      	ldr	r3, [r7, #0]
 8026df8:	3308      	adds	r3, #8
 8026dfa:	f107 0208 	add.w	r2, r7, #8
 8026dfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026e02:	e883 0003 	stmia.w	r3, {r0, r1}
   }
   else
   {
      //Unknown header field name
   }
}
 8026e06:	e039      	b.n	8026e7c <pemParseHeaderField+0x10c>
   else if(pemCompareString(&name, "DEK-Info"))
 8026e08:	f107 0318 	add.w	r3, r7, #24
 8026e0c:	491e      	ldr	r1, [pc, #120]	@ (8026e88 <pemParseHeaderField+0x118>)
 8026e0e:	4618      	mov	r0, r3
 8026e10:	f000 f8d8 	bl	8026fc4 <pemCompareString>
 8026e14:	4603      	mov	r3, r0
 8026e16:	2b00      	cmp	r3, #0
 8026e18:	d030      	beq.n	8026e7c <pemParseHeaderField+0x10c>
      if(pemTokenizeString(line, ',', &arg1) &&
 8026e1a:	f107 0310 	add.w	r3, r7, #16
 8026e1e:	461a      	mov	r2, r3
 8026e20:	212c      	movs	r1, #44	@ 0x2c
 8026e22:	6878      	ldr	r0, [r7, #4]
 8026e24:	f000 f8f6 	bl	8027014 <pemTokenizeString>
 8026e28:	4603      	mov	r3, r0
 8026e2a:	2b00      	cmp	r3, #0
 8026e2c:	d026      	beq.n	8026e7c <pemParseHeaderField+0x10c>
         pemTokenizeString(line, ',', &arg2))
 8026e2e:	f107 0308 	add.w	r3, r7, #8
 8026e32:	461a      	mov	r2, r3
 8026e34:	212c      	movs	r1, #44	@ 0x2c
 8026e36:	6878      	ldr	r0, [r7, #4]
 8026e38:	f000 f8ec 	bl	8027014 <pemTokenizeString>
 8026e3c:	4603      	mov	r3, r0
      if(pemTokenizeString(line, ',', &arg1) &&
 8026e3e:	2b00      	cmp	r3, #0
 8026e40:	d01c      	beq.n	8026e7c <pemParseHeaderField+0x10c>
         pemTrimWhitespace(&arg1);
 8026e42:	f107 0310 	add.w	r3, r7, #16
 8026e46:	4618      	mov	r0, r3
 8026e48:	f000 f92a 	bl	80270a0 <pemTrimWhitespace>
         pemTrimWhitespace(&arg2);
 8026e4c:	f107 0308 	add.w	r3, r7, #8
 8026e50:	4618      	mov	r0, r3
 8026e52:	f000 f925 	bl	80270a0 <pemTrimWhitespace>
         if(header != NULL)
 8026e56:	683b      	ldr	r3, [r7, #0]
 8026e58:	2b00      	cmp	r3, #0
 8026e5a:	d00f      	beq.n	8026e7c <pemParseHeaderField+0x10c>
            header->dekInfo.algo = arg1;
 8026e5c:	683b      	ldr	r3, [r7, #0]
 8026e5e:	3310      	adds	r3, #16
 8026e60:	f107 0210 	add.w	r2, r7, #16
 8026e64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026e68:	e883 0003 	stmia.w	r3, {r0, r1}
            header->dekInfo.iv = arg2;
 8026e6c:	683b      	ldr	r3, [r7, #0]
 8026e6e:	3318      	adds	r3, #24
 8026e70:	f107 0208 	add.w	r2, r7, #8
 8026e74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026e78:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8026e7c:	bf00      	nop
 8026e7e:	3720      	adds	r7, #32
 8026e80:	46bd      	mov	sp, r7
 8026e82:	bd80      	pop	{r7, pc}
 8026e84:	0802cb2c 	.word	0x0802cb2c
 8026e88:	0802cb38 	.word	0x0802cb38

08026e8c <pemFindTag>:
 *   or -1 if the tag does not appear in the string
 **/

int_t pemFindTag(const char_t *input, size_t inputLen, const char_t *tag1,
   const char_t *tag2, const char_t *tag3)
{
 8026e8c:	b580      	push	{r7, lr}
 8026e8e:	b08a      	sub	sp, #40	@ 0x28
 8026e90:	af00      	add	r7, sp, #0
 8026e92:	60f8      	str	r0, [r7, #12]
 8026e94:	60b9      	str	r1, [r7, #8]
 8026e96:	607a      	str	r2, [r7, #4]
 8026e98:	603b      	str	r3, [r7, #0]
   size_t n2;
   size_t n3;
   int_t index;

   //Initialize index
   index = -1;
 8026e9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8026e9e:	61fb      	str	r3, [r7, #28]

   //Calculate the length of the tag
   n1 = osStrlen(tag1);
 8026ea0:	6878      	ldr	r0, [r7, #4]
 8026ea2:	f7f9 fbe5 	bl	8020670 <strlen>
 8026ea6:	61b8      	str	r0, [r7, #24]
   n2 = osStrlen(tag2);
 8026ea8:	6838      	ldr	r0, [r7, #0]
 8026eaa:	f7f9 fbe1 	bl	8020670 <strlen>
 8026eae:	6178      	str	r0, [r7, #20]
   n3 = osStrlen(tag3);
 8026eb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8026eb2:	f7f9 fbdd 	bl	8020670 <strlen>
 8026eb6:	6138      	str	r0, [r7, #16]

   //Parse input string
   for(i = 0; (i + n1 + n2 + n3) <= inputLen; i++)
 8026eb8:	2300      	movs	r3, #0
 8026eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8026ebc:	e053      	b.n	8026f66 <pemFindTag+0xda>
   {
      //Compare current substring with the given tag
      for(j = 0; j < (n1 + n2 + n3); j++)
 8026ebe:	2300      	movs	r3, #0
 8026ec0:	623b      	str	r3, [r7, #32]
 8026ec2:	e038      	b.n	8026f36 <pemFindTag+0xaa>
      {
         if(j < n1)
 8026ec4:	6a3a      	ldr	r2, [r7, #32]
 8026ec6:	69bb      	ldr	r3, [r7, #24]
 8026ec8:	429a      	cmp	r2, r3
 8026eca:	d20c      	bcs.n	8026ee6 <pemFindTag+0x5a>
         {
            if(input[i + j] != tag1[j])
 8026ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026ece:	6a3b      	ldr	r3, [r7, #32]
 8026ed0:	4413      	add	r3, r2
 8026ed2:	68fa      	ldr	r2, [r7, #12]
 8026ed4:	4413      	add	r3, r2
 8026ed6:	781a      	ldrb	r2, [r3, #0]
 8026ed8:	6879      	ldr	r1, [r7, #4]
 8026eda:	6a3b      	ldr	r3, [r7, #32]
 8026edc:	440b      	add	r3, r1
 8026ede:	781b      	ldrb	r3, [r3, #0]
 8026ee0:	429a      	cmp	r2, r3
 8026ee2:	d025      	beq.n	8026f30 <pemFindTag+0xa4>
               break;
 8026ee4:	e031      	b.n	8026f4a <pemFindTag+0xbe>
         }
         else if(j < (n1 + n2))
 8026ee6:	69ba      	ldr	r2, [r7, #24]
 8026ee8:	697b      	ldr	r3, [r7, #20]
 8026eea:	4413      	add	r3, r2
 8026eec:	6a3a      	ldr	r2, [r7, #32]
 8026eee:	429a      	cmp	r2, r3
 8026ef0:	d20e      	bcs.n	8026f10 <pemFindTag+0x84>
         {
            if(input[i + j] != tag2[j - n1])
 8026ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026ef4:	6a3b      	ldr	r3, [r7, #32]
 8026ef6:	4413      	add	r3, r2
 8026ef8:	68fa      	ldr	r2, [r7, #12]
 8026efa:	4413      	add	r3, r2
 8026efc:	781a      	ldrb	r2, [r3, #0]
 8026efe:	6a39      	ldr	r1, [r7, #32]
 8026f00:	69bb      	ldr	r3, [r7, #24]
 8026f02:	1acb      	subs	r3, r1, r3
 8026f04:	6839      	ldr	r1, [r7, #0]
 8026f06:	440b      	add	r3, r1
 8026f08:	781b      	ldrb	r3, [r3, #0]
 8026f0a:	429a      	cmp	r2, r3
 8026f0c:	d010      	beq.n	8026f30 <pemFindTag+0xa4>
               break;
 8026f0e:	e01c      	b.n	8026f4a <pemFindTag+0xbe>
         }
         else
         {
            if(input[i + j] != tag3[j - n1 - n2])
 8026f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026f12:	6a3b      	ldr	r3, [r7, #32]
 8026f14:	4413      	add	r3, r2
 8026f16:	68fa      	ldr	r2, [r7, #12]
 8026f18:	4413      	add	r3, r2
 8026f1a:	781a      	ldrb	r2, [r3, #0]
 8026f1c:	6a39      	ldr	r1, [r7, #32]
 8026f1e:	69bb      	ldr	r3, [r7, #24]
 8026f20:	1ac9      	subs	r1, r1, r3
 8026f22:	697b      	ldr	r3, [r7, #20]
 8026f24:	1acb      	subs	r3, r1, r3
 8026f26:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8026f28:	440b      	add	r3, r1
 8026f2a:	781b      	ldrb	r3, [r3, #0]
 8026f2c:	429a      	cmp	r2, r3
 8026f2e:	d10b      	bne.n	8026f48 <pemFindTag+0xbc>
      for(j = 0; j < (n1 + n2 + n3); j++)
 8026f30:	6a3b      	ldr	r3, [r7, #32]
 8026f32:	3301      	adds	r3, #1
 8026f34:	623b      	str	r3, [r7, #32]
 8026f36:	69ba      	ldr	r2, [r7, #24]
 8026f38:	697b      	ldr	r3, [r7, #20]
 8026f3a:	441a      	add	r2, r3
 8026f3c:	693b      	ldr	r3, [r7, #16]
 8026f3e:	4413      	add	r3, r2
 8026f40:	6a3a      	ldr	r2, [r7, #32]
 8026f42:	429a      	cmp	r2, r3
 8026f44:	d3be      	bcc.n	8026ec4 <pemFindTag+0x38>
 8026f46:	e000      	b.n	8026f4a <pemFindTag+0xbe>
               break;
 8026f48:	bf00      	nop
         }
      }

      //Check whether the tag has been found
      if(j == (n1 + n2 + n3))
 8026f4a:	69ba      	ldr	r2, [r7, #24]
 8026f4c:	697b      	ldr	r3, [r7, #20]
 8026f4e:	441a      	add	r2, r3
 8026f50:	693b      	ldr	r3, [r7, #16]
 8026f52:	4413      	add	r3, r2
 8026f54:	6a3a      	ldr	r2, [r7, #32]
 8026f56:	429a      	cmp	r2, r3
 8026f58:	d102      	bne.n	8026f60 <pemFindTag+0xd4>
      {
         index = i;
 8026f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026f5c:	61fb      	str	r3, [r7, #28]
         break;
 8026f5e:	e00c      	b.n	8026f7a <pemFindTag+0xee>
   for(i = 0; (i + n1 + n2 + n3) <= inputLen; i++)
 8026f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026f62:	3301      	adds	r3, #1
 8026f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8026f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026f68:	69bb      	ldr	r3, [r7, #24]
 8026f6a:	441a      	add	r2, r3
 8026f6c:	697b      	ldr	r3, [r7, #20]
 8026f6e:	441a      	add	r2, r3
 8026f70:	693b      	ldr	r3, [r7, #16]
 8026f72:	4413      	add	r3, r2
 8026f74:	68ba      	ldr	r2, [r7, #8]
 8026f76:	429a      	cmp	r2, r3
 8026f78:	d2a1      	bcs.n	8026ebe <pemFindTag+0x32>
      }
   }

   //Return the index of the first occurrence of the tag in the string
   return index;
 8026f7a:	69fb      	ldr	r3, [r7, #28]
}
 8026f7c:	4618      	mov	r0, r3
 8026f7e:	3728      	adds	r7, #40	@ 0x28
 8026f80:	46bd      	mov	sp, r7
 8026f82:	bd80      	pop	{r7, pc}

08026f84 <pemFindChar>:
 * @param[in] c Character to be searched
 * @return Index of the first occurrence of the character
 **/

int_t pemFindChar(const PemString *s, char_t c)
{
 8026f84:	b580      	push	{r7, lr}
 8026f86:	b084      	sub	sp, #16
 8026f88:	af00      	add	r7, sp, #0
 8026f8a:	6078      	str	r0, [r7, #4]
 8026f8c:	460b      	mov	r3, r1
 8026f8e:	70fb      	strb	r3, [r7, #3]
   int_t index;
   char_t *p;

   //Search the string for the specified character
   p = osMemchr(s->value, c, s->length);
 8026f90:	687b      	ldr	r3, [r7, #4]
 8026f92:	6818      	ldr	r0, [r3, #0]
 8026f94:	78f9      	ldrb	r1, [r7, #3]
 8026f96:	687b      	ldr	r3, [r7, #4]
 8026f98:	685b      	ldr	r3, [r3, #4]
 8026f9a:	461a      	mov	r2, r3
 8026f9c:	f7f9 fb18 	bl	80205d0 <memchr>
 8026fa0:	60b8      	str	r0, [r7, #8]

   //Character found?
   if(p != NULL)
 8026fa2:	68bb      	ldr	r3, [r7, #8]
 8026fa4:	2b00      	cmp	r3, #0
 8026fa6:	d005      	beq.n	8026fb4 <pemFindChar+0x30>
   {
      index = p - s->value;
 8026fa8:	687b      	ldr	r3, [r7, #4]
 8026faa:	681b      	ldr	r3, [r3, #0]
 8026fac:	68ba      	ldr	r2, [r7, #8]
 8026fae:	1ad3      	subs	r3, r2, r3
 8026fb0:	60fb      	str	r3, [r7, #12]
 8026fb2:	e002      	b.n	8026fba <pemFindChar+0x36>
   }
   else
   {
      index = -1;
 8026fb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8026fb8:	60fb      	str	r3, [r7, #12]
   }

   //Return the index of the first occurrence of the character
   return index;
 8026fba:	68fb      	ldr	r3, [r7, #12]
}
 8026fbc:	4618      	mov	r0, r3
 8026fbe:	3710      	adds	r7, #16
 8026fc0:	46bd      	mov	sp, r7
 8026fc2:	bd80      	pop	{r7, pc}

08026fc4 <pemCompareString>:
 * @param[in] value NULL-terminated string
 * @return Comparison result
 **/

bool_t pemCompareString(const PemString *string, const char_t *value)
{
 8026fc4:	b580      	push	{r7, lr}
 8026fc6:	b084      	sub	sp, #16
 8026fc8:	af00      	add	r7, sp, #0
 8026fca:	6078      	str	r0, [r7, #4]
 8026fcc:	6039      	str	r1, [r7, #0]
   bool_t res;
   size_t n;

   //Initialize flag
   res = FALSE;
 8026fce:	2300      	movs	r3, #0
 8026fd0:	60fb      	str	r3, [r7, #12]

   //Valid NULL-terminated string?
   if(value != NULL)
 8026fd2:	683b      	ldr	r3, [r7, #0]
 8026fd4:	2b00      	cmp	r3, #0
 8026fd6:	d018      	beq.n	802700a <pemCompareString+0x46>
   {
      //Determine the length of the string
      n = osStrlen(value);
 8026fd8:	6838      	ldr	r0, [r7, #0]
 8026fda:	f7f9 fb49 	bl	8020670 <strlen>
 8026fde:	60b8      	str	r0, [r7, #8]

      //Check the length of the string
      if(string->value != NULL && string->length == n)
 8026fe0:	687b      	ldr	r3, [r7, #4]
 8026fe2:	681b      	ldr	r3, [r3, #0]
 8026fe4:	2b00      	cmp	r3, #0
 8026fe6:	d010      	beq.n	802700a <pemCompareString+0x46>
 8026fe8:	687b      	ldr	r3, [r7, #4]
 8026fea:	685b      	ldr	r3, [r3, #4]
 8026fec:	68ba      	ldr	r2, [r7, #8]
 8026fee:	429a      	cmp	r2, r3
 8026ff0:	d10b      	bne.n	802700a <pemCompareString+0x46>
      {
         //Perform string comparison
         if(osStrncmp(string->value, value, n) == 0)
 8026ff2:	687b      	ldr	r3, [r7, #4]
 8026ff4:	681b      	ldr	r3, [r3, #0]
 8026ff6:	68ba      	ldr	r2, [r7, #8]
 8026ff8:	6839      	ldr	r1, [r7, #0]
 8026ffa:	4618      	mov	r0, r3
 8026ffc:	f004 fe44 	bl	802bc88 <strncmp>
 8027000:	4603      	mov	r3, r0
 8027002:	2b00      	cmp	r3, #0
 8027004:	d101      	bne.n	802700a <pemCompareString+0x46>
         {
            res = TRUE;
 8027006:	2301      	movs	r3, #1
 8027008:	60fb      	str	r3, [r7, #12]
         }
      }
   }

   //Return comparison result
   return res;
 802700a:	68fb      	ldr	r3, [r7, #12]
}
 802700c:	4618      	mov	r0, r3
 802700e:	3710      	adds	r7, #16
 8027010:	46bd      	mov	sp, r7
 8027012:	bd80      	pop	{r7, pc}

08027014 <pemTokenizeString>:
 * @param[out] token Resulting token
 * @return TRUE if a token has been found, else FALSE
 **/

bool_t pemTokenizeString(PemString *s, char_t c, PemString *token)
{
 8027014:	b580      	push	{r7, lr}
 8027016:	b088      	sub	sp, #32
 8027018:	af00      	add	r7, sp, #0
 802701a:	60f8      	str	r0, [r7, #12]
 802701c:	460b      	mov	r3, r1
 802701e:	607a      	str	r2, [r7, #4]
 8027020:	72fb      	strb	r3, [r7, #11]
   char_t *p;
   size_t n;
   bool_t found;

   //Search the string for the specified delimiter character
   p = osMemchr(s->value, c, s->length);
 8027022:	68fb      	ldr	r3, [r7, #12]
 8027024:	6818      	ldr	r0, [r3, #0]
 8027026:	7af9      	ldrb	r1, [r7, #11]
 8027028:	68fb      	ldr	r3, [r7, #12]
 802702a:	685b      	ldr	r3, [r3, #4]
 802702c:	461a      	mov	r2, r3
 802702e:	f7f9 facf 	bl	80205d0 <memchr>
 8027032:	61b8      	str	r0, [r7, #24]

   //Delimiter character found?
   if(p != NULL)
 8027034:	69bb      	ldr	r3, [r7, #24]
 8027036:	2b00      	cmp	r3, #0
 8027038:	d01c      	beq.n	8027074 <pemTokenizeString+0x60>
   {
      //Retrieve the length of the token
      n = p - s->value;
 802703a:	68fb      	ldr	r3, [r7, #12]
 802703c:	681b      	ldr	r3, [r3, #0]
 802703e:	69ba      	ldr	r2, [r7, #24]
 8027040:	1ad3      	subs	r3, r2, r3
 8027042:	617b      	str	r3, [r7, #20]

      //Extract the token from the string
      token->value = s->value;
 8027044:	68fb      	ldr	r3, [r7, #12]
 8027046:	681a      	ldr	r2, [r3, #0]
 8027048:	687b      	ldr	r3, [r7, #4]
 802704a:	601a      	str	r2, [r3, #0]
      token->length = n;
 802704c:	687b      	ldr	r3, [r7, #4]
 802704e:	697a      	ldr	r2, [r7, #20]
 8027050:	605a      	str	r2, [r3, #4]

      //Point to the next token
      s->value += n + 1;
 8027052:	68fb      	ldr	r3, [r7, #12]
 8027054:	681a      	ldr	r2, [r3, #0]
 8027056:	697b      	ldr	r3, [r7, #20]
 8027058:	3301      	adds	r3, #1
 802705a:	441a      	add	r2, r3
 802705c:	68fb      	ldr	r3, [r7, #12]
 802705e:	601a      	str	r2, [r3, #0]
      s->length -= n + 1;
 8027060:	68fb      	ldr	r3, [r7, #12]
 8027062:	685a      	ldr	r2, [r3, #4]
 8027064:	697b      	ldr	r3, [r7, #20]
 8027066:	1ad3      	subs	r3, r2, r3
 8027068:	1e5a      	subs	r2, r3, #1
 802706a:	68fb      	ldr	r3, [r7, #12]
 802706c:	605a      	str	r2, [r3, #4]

      //A token has been found
      found = TRUE;
 802706e:	2301      	movs	r3, #1
 8027070:	61fb      	str	r3, [r7, #28]
 8027072:	e010      	b.n	8027096 <pemTokenizeString+0x82>
   }
   else if(s->length > 0)
 8027074:	68fb      	ldr	r3, [r7, #12]
 8027076:	685b      	ldr	r3, [r3, #4]
 8027078:	2b00      	cmp	r3, #0
 802707a:	d00a      	beq.n	8027092 <pemTokenizeString+0x7e>
   {
      //This is the last token
      token->value = s->value;
 802707c:	68fb      	ldr	r3, [r7, #12]
 802707e:	681a      	ldr	r2, [r3, #0]
 8027080:	687b      	ldr	r3, [r7, #4]
 8027082:	601a      	str	r2, [r3, #0]
      token->length = s->length;
 8027084:	68fb      	ldr	r3, [r7, #12]
 8027086:	685a      	ldr	r2, [r3, #4]
 8027088:	687b      	ldr	r3, [r7, #4]
 802708a:	605a      	str	r2, [r3, #4]

      //A token has been found
      found = TRUE;
 802708c:	2301      	movs	r3, #1
 802708e:	61fb      	str	r3, [r7, #28]
 8027090:	e001      	b.n	8027096 <pemTokenizeString+0x82>
   }
   else
   {
      //The end of the string has been reached
      found = FALSE;
 8027092:	2300      	movs	r3, #0
 8027094:	61fb      	str	r3, [r7, #28]
   }

   //Return TRUE if a token has been found, else FALSE
   return found;
 8027096:	69fb      	ldr	r3, [r7, #28]
}
 8027098:	4618      	mov	r0, r3
 802709a:	3720      	adds	r7, #32
 802709c:	46bd      	mov	sp, r7
 802709e:	bd80      	pop	{r7, pc}

080270a0 <pemTrimWhitespace>:
 * @brief Removes all leading and trailing whitespace from a string
 * @param[in] s String to be trimmed
 **/

void pemTrimWhitespace(PemString *s)
{
 80270a0:	b480      	push	{r7}
 80270a2:	b083      	sub	sp, #12
 80270a4:	af00      	add	r7, sp, #0
 80270a6:	6078      	str	r0, [r7, #4]
   //Trim whitespace from the beginning
   while(s->length > 0 && osIsspace(s->value[0]))
 80270a8:	e009      	b.n	80270be <pemTrimWhitespace+0x1e>
   {
      s->value++;
 80270aa:	687b      	ldr	r3, [r7, #4]
 80270ac:	681b      	ldr	r3, [r3, #0]
 80270ae:	1c5a      	adds	r2, r3, #1
 80270b0:	687b      	ldr	r3, [r7, #4]
 80270b2:	601a      	str	r2, [r3, #0]
      s->length--;
 80270b4:	687b      	ldr	r3, [r7, #4]
 80270b6:	685b      	ldr	r3, [r3, #4]
 80270b8:	1e5a      	subs	r2, r3, #1
 80270ba:	687b      	ldr	r3, [r7, #4]
 80270bc:	605a      	str	r2, [r3, #4]
   while(s->length > 0 && osIsspace(s->value[0]))
 80270be:	687b      	ldr	r3, [r7, #4]
 80270c0:	685b      	ldr	r3, [r3, #4]
 80270c2:	2b00      	cmp	r3, #0
 80270c4:	d010      	beq.n	80270e8 <pemTrimWhitespace+0x48>
 80270c6:	687b      	ldr	r3, [r7, #4]
 80270c8:	681b      	ldr	r3, [r3, #0]
 80270ca:	781b      	ldrb	r3, [r3, #0]
 80270cc:	3301      	adds	r3, #1
 80270ce:	4a13      	ldr	r2, [pc, #76]	@ (802711c <pemTrimWhitespace+0x7c>)
 80270d0:	4413      	add	r3, r2
 80270d2:	781b      	ldrb	r3, [r3, #0]
 80270d4:	f003 0308 	and.w	r3, r3, #8
 80270d8:	2b00      	cmp	r3, #0
 80270da:	d1e6      	bne.n	80270aa <pemTrimWhitespace+0xa>
   }

   //Trim whitespace from the end
   while(s->length > 0 && osIsspace(s->value[s->length - 1]))
 80270dc:	e004      	b.n	80270e8 <pemTrimWhitespace+0x48>
   {
      s->length--;
 80270de:	687b      	ldr	r3, [r7, #4]
 80270e0:	685b      	ldr	r3, [r3, #4]
 80270e2:	1e5a      	subs	r2, r3, #1
 80270e4:	687b      	ldr	r3, [r7, #4]
 80270e6:	605a      	str	r2, [r3, #4]
   while(s->length > 0 && osIsspace(s->value[s->length - 1]))
 80270e8:	687b      	ldr	r3, [r7, #4]
 80270ea:	685b      	ldr	r3, [r3, #4]
 80270ec:	2b00      	cmp	r3, #0
 80270ee:	d00e      	beq.n	802710e <pemTrimWhitespace+0x6e>
 80270f0:	687b      	ldr	r3, [r7, #4]
 80270f2:	681a      	ldr	r2, [r3, #0]
 80270f4:	687b      	ldr	r3, [r7, #4]
 80270f6:	685b      	ldr	r3, [r3, #4]
 80270f8:	3b01      	subs	r3, #1
 80270fa:	4413      	add	r3, r2
 80270fc:	781b      	ldrb	r3, [r3, #0]
 80270fe:	3301      	adds	r3, #1
 8027100:	4a06      	ldr	r2, [pc, #24]	@ (802711c <pemTrimWhitespace+0x7c>)
 8027102:	4413      	add	r3, r2
 8027104:	781b      	ldrb	r3, [r3, #0]
 8027106:	f003 0308 	and.w	r3, r3, #8
 802710a:	2b00      	cmp	r3, #0
 802710c:	d1e7      	bne.n	80270de <pemTrimWhitespace+0x3e>
   }
}
 802710e:	bf00      	nop
 8027110:	370c      	adds	r7, #12
 8027112:	46bd      	mov	sp, r7
 8027114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027118:	4770      	bx	lr
 802711a:	bf00      	nop
 802711c:	0802e3ec 	.word	0x0802e3ec

08027120 <pemImportRsaPublicKey>:
 * @return Error code
 **/

error_t pemImportRsaPublicKey(RsaPublicKey *publicKey, const char_t *input,
   size_t length)
{
 8027120:	b580      	push	{r7, lr}
 8027122:	b09a      	sub	sp, #104	@ 0x68
 8027124:	af04      	add	r7, sp, #16
 8027126:	60f8      	str	r0, [r7, #12]
 8027128:	60b9      	str	r1, [r7, #8]
 802712a:	607a      	str	r2, [r7, #4]
   size_t n;
   uint8_t *buffer;
   X509SubjectPublicKeyInfo publicKeyInfo;

   //Check parameters
   if(publicKey == NULL || input == NULL)
 802712c:	68fb      	ldr	r3, [r7, #12]
 802712e:	2b00      	cmp	r3, #0
 8027130:	d002      	beq.n	8027138 <pemImportRsaPublicKey+0x18>
 8027132:	68bb      	ldr	r3, [r7, #8]
 8027134:	2b00      	cmp	r3, #0
 8027136:	d101      	bne.n	802713c <pemImportRsaPublicKey+0x1c>
      return ERROR_INVALID_PARAMETER;
 8027138:	2302      	movs	r3, #2
 802713a:	e0af      	b.n	802729c <pemImportRsaPublicKey+0x17c>

   //Clear the SubjectPublicKeyInfo structure
   osMemset(&publicKeyInfo, 0, sizeof(X509SubjectPublicKeyInfo));
 802713c:	f107 0314 	add.w	r3, r7, #20
 8027140:	2238      	movs	r2, #56	@ 0x38
 8027142:	2100      	movs	r1, #0
 8027144:	4618      	mov	r0, r3
 8027146:	f004 fd77 	bl	802bc38 <memset>

   //The type of data encoded is labeled depending on the type label in
   //the "-----BEGIN " line (refer to RFC 7468, section 2)
   if(pemDecodeFile(input, length, "RSA PUBLIC KEY", NULL, &n, NULL,
 802714a:	2300      	movs	r3, #0
 802714c:	9302      	str	r3, [sp, #8]
 802714e:	2300      	movs	r3, #0
 8027150:	9301      	str	r3, [sp, #4]
 8027152:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8027156:	9300      	str	r3, [sp, #0]
 8027158:	2300      	movs	r3, #0
 802715a:	4a52      	ldr	r2, [pc, #328]	@ (80272a4 <pemImportRsaPublicKey+0x184>)
 802715c:	6879      	ldr	r1, [r7, #4]
 802715e:	68b8      	ldr	r0, [r7, #8]
 8027160:	f7ff fd2c 	bl	8026bbc <pemDecodeFile>
 8027164:	4603      	mov	r3, r0
 8027166:	2b00      	cmp	r3, #0
 8027168:	d13f      	bne.n	80271ea <pemImportRsaPublicKey+0xca>
      NULL) == NO_ERROR)
   {
      //Allocate a memory buffer to hold the ASN.1 data
      buffer = cryptoAllocMem(n);
 802716a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802716c:	4618      	mov	r0, r3
 802716e:	f7f9 fc36 	bl	80209de <osAllocMem>
 8027172:	6538      	str	r0, [r7, #80]	@ 0x50

      //Successful memory allocation?
      if(buffer != NULL)
 8027174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8027176:	2b00      	cmp	r3, #0
 8027178:	d033      	beq.n	80271e2 <pemImportRsaPublicKey+0xc2>
      {
         //Decode the content of the PEM container
         error = pemDecodeFile(input, length, "RSA PUBLIC KEY", buffer, &n,
 802717a:	2300      	movs	r3, #0
 802717c:	9302      	str	r3, [sp, #8]
 802717e:	2300      	movs	r3, #0
 8027180:	9301      	str	r3, [sp, #4]
 8027182:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8027186:	9300      	str	r3, [sp, #0]
 8027188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802718a:	4a46      	ldr	r2, [pc, #280]	@ (80272a4 <pemImportRsaPublicKey+0x184>)
 802718c:	6879      	ldr	r1, [r7, #4]
 802718e:	68b8      	ldr	r0, [r7, #8]
 8027190:	f7ff fd14 	bl	8026bbc <pemDecodeFile>
 8027194:	4603      	mov	r3, r0
 8027196:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
            NULL, NULL);

         //Check status code
         if(!error)
 802719a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 802719e:	2b00      	cmp	r3, #0
 80271a0:	d10a      	bne.n	80271b8 <pemImportRsaPublicKey+0x98>
         {
            //Read RSAPublicKey structure
            error = x509ParseRsaPublicKey(buffer, n, &publicKeyInfo.rsaPublicKey);
 80271a2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80271a4:	f107 0314 	add.w	r3, r7, #20
 80271a8:	3318      	adds	r3, #24
 80271aa:	461a      	mov	r2, r3
 80271ac:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80271ae:	f000 f9a3 	bl	80274f8 <x509ParseRsaPublicKey>
 80271b2:	4603      	mov	r3, r0
 80271b4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
         }

         //Check status code
         if(!error)
 80271b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80271bc:	2b00      	cmp	r3, #0
 80271be:	d10c      	bne.n	80271da <pemImportRsaPublicKey+0xba>
         {
            //Set public key algorithm identifier
            publicKeyInfo.oid.value = RSA_ENCRYPTION_OID;
 80271c0:	4b39      	ldr	r3, [pc, #228]	@ (80272a8 <pemImportRsaPublicKey+0x188>)
 80271c2:	61fb      	str	r3, [r7, #28]
            publicKeyInfo.oid.length = sizeof(RSA_ENCRYPTION_OID);
 80271c4:	2309      	movs	r3, #9
 80271c6:	623b      	str	r3, [r7, #32]

            //Import the RSA public key
            error = x509ImportRsaPublicKey(publicKey, &publicKeyInfo);
 80271c8:	f107 0314 	add.w	r3, r7, #20
 80271cc:	4619      	mov	r1, r3
 80271ce:	68f8      	ldr	r0, [r7, #12]
 80271d0:	f000 fa34 	bl	802763c <x509ImportRsaPublicKey>
 80271d4:	4603      	mov	r3, r0
 80271d6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
         }

         //Release previously allocated memory
         cryptoFreeMem(buffer);
 80271da:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80271dc:	f7f9 fc0d 	bl	80209fa <osFreeMem>
 80271e0:	e053      	b.n	802728a <pemImportRsaPublicKey+0x16a>
      }
      else
      {
         //Failed to allocate memory
         error = ERROR_OUT_OF_MEMORY;
 80271e2:	2364      	movs	r3, #100	@ 0x64
 80271e4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80271e8:	e04f      	b.n	802728a <pemImportRsaPublicKey+0x16a>
      }
   }
   else if(pemDecodeFile(input, length, "PUBLIC KEY", NULL, &n, NULL,
 80271ea:	2300      	movs	r3, #0
 80271ec:	9302      	str	r3, [sp, #8]
 80271ee:	2300      	movs	r3, #0
 80271f0:	9301      	str	r3, [sp, #4]
 80271f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80271f6:	9300      	str	r3, [sp, #0]
 80271f8:	2300      	movs	r3, #0
 80271fa:	4a2c      	ldr	r2, [pc, #176]	@ (80272ac <pemImportRsaPublicKey+0x18c>)
 80271fc:	6879      	ldr	r1, [r7, #4]
 80271fe:	68b8      	ldr	r0, [r7, #8]
 8027200:	f7ff fcdc 	bl	8026bbc <pemDecodeFile>
 8027204:	4603      	mov	r3, r0
 8027206:	2b00      	cmp	r3, #0
 8027208:	d13b      	bne.n	8027282 <pemImportRsaPublicKey+0x162>
      NULL) == NO_ERROR)
   {
      //Allocate a memory buffer to hold the ASN.1 data
      buffer = cryptoAllocMem(n);
 802720a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802720c:	4618      	mov	r0, r3
 802720e:	f7f9 fbe6 	bl	80209de <osAllocMem>
 8027212:	6538      	str	r0, [r7, #80]	@ 0x50

      //Successful memory allocation?
      if(buffer != NULL)
 8027214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8027216:	2b00      	cmp	r3, #0
 8027218:	d02f      	beq.n	802727a <pemImportRsaPublicKey+0x15a>
      {
         //Decode the content of the PEM container
         error = pemDecodeFile(input, length, "PUBLIC KEY", buffer, &n,
 802721a:	2300      	movs	r3, #0
 802721c:	9302      	str	r3, [sp, #8]
 802721e:	2300      	movs	r3, #0
 8027220:	9301      	str	r3, [sp, #4]
 8027222:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8027226:	9300      	str	r3, [sp, #0]
 8027228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802722a:	4a20      	ldr	r2, [pc, #128]	@ (80272ac <pemImportRsaPublicKey+0x18c>)
 802722c:	6879      	ldr	r1, [r7, #4]
 802722e:	68b8      	ldr	r0, [r7, #8]
 8027230:	f7ff fcc4 	bl	8026bbc <pemDecodeFile>
 8027234:	4603      	mov	r3, r0
 8027236:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
            NULL, NULL);

         //Check status code
         if(!error)
 802723a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 802723e:	2b00      	cmp	r3, #0
 8027240:	d10a      	bne.n	8027258 <pemImportRsaPublicKey+0x138>
         {
            //The ASN.1 encoded data of the public key is the SubjectPublicKeyInfo
            //structure (refer to RFC 7468, section 13)
            error = x509ParseSubjectPublicKeyInfo(buffer, n, &n, &publicKeyInfo);
 8027242:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8027244:	f107 0314 	add.w	r3, r7, #20
 8027248:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 802724c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 802724e:	f000 f82f 	bl	80272b0 <x509ParseSubjectPublicKeyInfo>
 8027252:	4603      	mov	r3, r0
 8027254:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
         }

         //Check status code
         if(!error)
 8027258:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 802725c:	2b00      	cmp	r3, #0
 802725e:	d108      	bne.n	8027272 <pemImportRsaPublicKey+0x152>
         {
            //Import the RSA public key
            error = x509ImportRsaPublicKey(publicKey, &publicKeyInfo);
 8027260:	f107 0314 	add.w	r3, r7, #20
 8027264:	4619      	mov	r1, r3
 8027266:	68f8      	ldr	r0, [r7, #12]
 8027268:	f000 f9e8 	bl	802763c <x509ImportRsaPublicKey>
 802726c:	4603      	mov	r3, r0
 802726e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
         }

         //Release previously allocated memory
         cryptoFreeMem(buffer);
 8027272:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8027274:	f7f9 fbc1 	bl	80209fa <osFreeMem>
 8027278:	e007      	b.n	802728a <pemImportRsaPublicKey+0x16a>
      }
      else
      {
         //Failed to allocate memory
         error = ERROR_OUT_OF_MEMORY;
 802727a:	2364      	movs	r3, #100	@ 0x64
 802727c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8027280:	e003      	b.n	802728a <pemImportRsaPublicKey+0x16a>
      }
   }
   else
   {
      //The PEM file does not contain a valid public key
      error = ERROR_END_OF_FILE;
 8027282:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8027286:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
   }

   //Any error to report?
   if(error)
 802728a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 802728e:	2b00      	cmp	r3, #0
 8027290:	d002      	beq.n	8027298 <pemImportRsaPublicKey+0x178>
   {
      //Clean up side effects
      rsaFreePublicKey(publicKey);
 8027292:	68f8      	ldr	r0, [r7, #12]
 8027294:	f7ff fa81 	bl	802679a <rsaFreePublicKey>
   }

   //Return status code
   return error;
 8027298:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
#else
   //Not implemented
   return ERROR_NOT_IMPLEMENTED;
#endif
}
 802729c:	4618      	mov	r0, r3
 802729e:	3758      	adds	r7, #88	@ 0x58
 80272a0:	46bd      	mov	sp, r7
 80272a2:	bd80      	pop	{r7, pc}
 80272a4:	0802cb94 	.word	0x0802cb94
 80272a8:	0802e3b4 	.word	0x0802e3b4
 80272ac:	0802cba4 	.word	0x0802cba4

080272b0 <x509ParseSubjectPublicKeyInfo>:
 * @return Error code
 **/

error_t x509ParseSubjectPublicKeyInfo(const uint8_t *data, size_t length,
   size_t *totalLength, X509SubjectPublicKeyInfo *publicKeyInfo)
{
 80272b0:	b580      	push	{r7, lr}
 80272b2:	b08e      	sub	sp, #56	@ 0x38
 80272b4:	af00      	add	r7, sp, #0
 80272b6:	60f8      	str	r0, [r7, #12]
 80272b8:	60b9      	str	r1, [r7, #8]
 80272ba:	607a      	str	r2, [r7, #4]
 80272bc:	603b      	str	r3, [r7, #0]

   //Debug message
   TRACE_DEBUG("    Parsing SubjectPublicKeyInfo...\r\n");

   //Clear the SubjectPublicKeyInfo structure
   osMemset(publicKeyInfo, 0, sizeof(X509SubjectPublicKeyInfo));
 80272be:	2238      	movs	r2, #56	@ 0x38
 80272c0:	2100      	movs	r1, #0
 80272c2:	6838      	ldr	r0, [r7, #0]
 80272c4:	f004 fcb8 	bl	802bc38 <memset>

   //The public key information is encapsulated within a sequence
   error = asn1ReadSequence(data, length, &tag);
 80272c8:	f107 0310 	add.w	r3, r7, #16
 80272cc:	461a      	mov	r2, r3
 80272ce:	68b9      	ldr	r1, [r7, #8]
 80272d0:	68f8      	ldr	r0, [r7, #12]
 80272d2:	f7fd f8a3 	bl	802441c <asn1ReadSequence>
 80272d6:	4603      	mov	r3, r0
 80272d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
   //Failed to decode ASN.1 tag?
   if(error)
 80272da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80272dc:	2b00      	cmp	r3, #0
 80272de:	d001      	beq.n	80272e4 <x509ParseSubjectPublicKeyInfo+0x34>
      return error;
 80272e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80272e2:	e08b      	b.n	80273fc <x509ParseSubjectPublicKeyInfo+0x14c>

   //Save the total length of the field
   *totalLength = tag.totalLength;
 80272e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80272e6:	687b      	ldr	r3, [r7, #4]
 80272e8:	601a      	str	r2, [r3, #0]

   //Raw contents of the ASN.1 sequence
   publicKeyInfo->raw.value = data;
 80272ea:	683b      	ldr	r3, [r7, #0]
 80272ec:	68fa      	ldr	r2, [r7, #12]
 80272ee:	601a      	str	r2, [r3, #0]
   publicKeyInfo->raw.length = tag.totalLength;
 80272f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80272f2:	683b      	ldr	r3, [r7, #0]
 80272f4:	605a      	str	r2, [r3, #4]

   //Point to the first field of the sequence
   data = tag.value;
 80272f6:	6a3b      	ldr	r3, [r7, #32]
 80272f8:	60fb      	str	r3, [r7, #12]
   length = tag.length;
 80272fa:	69fb      	ldr	r3, [r7, #28]
 80272fc:	60bb      	str	r3, [r7, #8]

   //Read AlgorithmIdentifier field
   error = x509ParseAlgoId(data, length, &n, publicKeyInfo);
 80272fe:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8027302:	683b      	ldr	r3, [r7, #0]
 8027304:	68b9      	ldr	r1, [r7, #8]
 8027306:	68f8      	ldr	r0, [r7, #12]
 8027308:	f000 f882 	bl	8027410 <x509ParseAlgoId>
 802730c:	4603      	mov	r3, r0
 802730e:	86fb      	strh	r3, [r7, #54]	@ 0x36
   //Any error to report?
   if(error)
 8027310:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8027312:	2b00      	cmp	r3, #0
 8027314:	d001      	beq.n	802731a <x509ParseSubjectPublicKeyInfo+0x6a>
      return error;
 8027316:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8027318:	e070      	b.n	80273fc <x509ParseSubjectPublicKeyInfo+0x14c>

   //Point to the next field
   data += n;
 802731a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802731c:	68fa      	ldr	r2, [r7, #12]
 802731e:	4413      	add	r3, r2
 8027320:	60fb      	str	r3, [r7, #12]
   length -= n;
 8027322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027324:	68ba      	ldr	r2, [r7, #8]
 8027326:	1ad3      	subs	r3, r2, r3
 8027328:	60bb      	str	r3, [r7, #8]

   //The SubjectPublicKey is encapsulated within a bit string
   error = asn1ReadTag(data, length, &tag);
 802732a:	f107 0310 	add.w	r3, r7, #16
 802732e:	461a      	mov	r2, r3
 8027330:	68b9      	ldr	r1, [r7, #8]
 8027332:	68f8      	ldr	r0, [r7, #12]
 8027334:	f7fc ffb1 	bl	802429a <asn1ReadTag>
 8027338:	4603      	mov	r3, r0
 802733a:	86fb      	strh	r3, [r7, #54]	@ 0x36
   //Failed to decode ASN.1 tag?
   if(error)
 802733c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 802733e:	2b00      	cmp	r3, #0
 8027340:	d001      	beq.n	8027346 <x509ParseSubjectPublicKeyInfo+0x96>
      return error;
 8027342:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8027344:	e05a      	b.n	80273fc <x509ParseSubjectPublicKeyInfo+0x14c>

   //Enforce encoding, class and type
   error = asn1CheckTag(&tag, FALSE, ASN1_CLASS_UNIVERSAL,
 8027346:	f107 0010 	add.w	r0, r7, #16
 802734a:	2303      	movs	r3, #3
 802734c:	2200      	movs	r2, #0
 802734e:	2100      	movs	r1, #0
 8027350:	f7fd f89e 	bl	8024490 <asn1CheckTag>
 8027354:	4603      	mov	r3, r0
 8027356:	86fb      	strh	r3, [r7, #54]	@ 0x36
      ASN1_TYPE_BIT_STRING);
   //Invalid tag?
   if(error)
 8027358:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 802735a:	2b00      	cmp	r3, #0
 802735c:	d001      	beq.n	8027362 <x509ParseSubjectPublicKeyInfo+0xb2>
      return error;
 802735e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8027360:	e04c      	b.n	80273fc <x509ParseSubjectPublicKeyInfo+0x14c>

   //The bit string shall contain an initial octet which encodes the number
   //of unused bits in the final subsequent octet
   if(tag.length < 1 || tag.value[0] != 0x00)
 8027362:	69fb      	ldr	r3, [r7, #28]
 8027364:	2b00      	cmp	r3, #0
 8027366:	d003      	beq.n	8027370 <x509ParseSubjectPublicKeyInfo+0xc0>
 8027368:	6a3b      	ldr	r3, [r7, #32]
 802736a:	781b      	ldrb	r3, [r3, #0]
 802736c:	2b00      	cmp	r3, #0
 802736e:	d001      	beq.n	8027374 <x509ParseSubjectPublicKeyInfo+0xc4>
      return ERROR_FAILURE;
 8027370:	2301      	movs	r3, #1
 8027372:	e043      	b.n	80273fc <x509ParseSubjectPublicKeyInfo+0x14c>

   //Point to the public key
   data = tag.value + 1;
 8027374:	6a3b      	ldr	r3, [r7, #32]
 8027376:	3301      	adds	r3, #1
 8027378:	60fb      	str	r3, [r7, #12]
   length = tag.length - 1;
 802737a:	69fb      	ldr	r3, [r7, #28]
 802737c:	3b01      	subs	r3, #1
 802737e:	60bb      	str	r3, [r7, #8]

   //Raw contents of the SubjectPublicKey (excluding the tag, length, and
   //number of unused bits)
   publicKeyInfo->rawSubjectPublicKey.value = data;
 8027380:	683b      	ldr	r3, [r7, #0]
 8027382:	68fa      	ldr	r2, [r7, #12]
 8027384:	611a      	str	r2, [r3, #16]
   publicKeyInfo->rawSubjectPublicKey.length = length;
 8027386:	683b      	ldr	r3, [r7, #0]
 8027388:	68ba      	ldr	r2, [r7, #8]
 802738a:	615a      	str	r2, [r3, #20]

   //Get the public key algorithm identifier
   oid = publicKeyInfo->oid.value;
 802738c:	683b      	ldr	r3, [r7, #0]
 802738e:	689b      	ldr	r3, [r3, #8]
 8027390:	633b      	str	r3, [r7, #48]	@ 0x30
   oidLen = publicKeyInfo->oid.length;
 8027392:	683b      	ldr	r3, [r7, #0]
 8027394:	68db      	ldr	r3, [r3, #12]
 8027396:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (RSA_SUPPORT == ENABLED)
   //RSA or RSA-PSS algorithm identifier?
   if(OID_COMP(oid, oidLen, RSA_ENCRYPTION_OID) == 0 ||
 8027398:	2309      	movs	r3, #9
 802739a:	4a1a      	ldr	r2, [pc, #104]	@ (8027404 <x509ParseSubjectPublicKeyInfo+0x154>)
 802739c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802739e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80273a0:	f7fd f984 	bl	80246ac <oidComp>
 80273a4:	4603      	mov	r3, r0
 80273a6:	2b00      	cmp	r3, #0
 80273a8:	d008      	beq.n	80273bc <x509ParseSubjectPublicKeyInfo+0x10c>
      OID_COMP(oid, oidLen, RSASSA_PSS_OID) == 0)
 80273aa:	2309      	movs	r3, #9
 80273ac:	4a16      	ldr	r2, [pc, #88]	@ (8027408 <x509ParseSubjectPublicKeyInfo+0x158>)
 80273ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80273b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80273b2:	f7fd f97b 	bl	80246ac <oidComp>
 80273b6:	4603      	mov	r3, r0
   if(OID_COMP(oid, oidLen, RSA_ENCRYPTION_OID) == 0 ||
 80273b8:	2b00      	cmp	r3, #0
 80273ba:	d109      	bne.n	80273d0 <x509ParseSubjectPublicKeyInfo+0x120>
   {
      //Read RSAPublicKey structure
      error = x509ParseRsaPublicKey(data, length, &publicKeyInfo->rsaPublicKey);
 80273bc:	683b      	ldr	r3, [r7, #0]
 80273be:	3318      	adds	r3, #24
 80273c0:	461a      	mov	r2, r3
 80273c2:	68b9      	ldr	r1, [r7, #8]
 80273c4:	68f8      	ldr	r0, [r7, #12]
 80273c6:	f000 f897 	bl	80274f8 <x509ParseRsaPublicKey>
 80273ca:	4603      	mov	r3, r0
 80273cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80273ce:	e014      	b.n	80273fa <x509ParseSubjectPublicKeyInfo+0x14a>
   }
   else
#endif
#if (EC_SUPPORT == ENABLED)
   //EC public key identifier?
   if(OID_COMP(oid, oidLen, EC_PUBLIC_KEY_OID) == 0)
 80273d0:	2307      	movs	r3, #7
 80273d2:	4a0e      	ldr	r2, [pc, #56]	@ (802740c <x509ParseSubjectPublicKeyInfo+0x15c>)
 80273d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80273d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80273d8:	f7fd f968 	bl	80246ac <oidComp>
 80273dc:	4603      	mov	r3, r0
 80273de:	2b00      	cmp	r3, #0
 80273e0:	d109      	bne.n	80273f6 <x509ParseSubjectPublicKeyInfo+0x146>
   {
      //Read ECPublicKey structure
      error = x509ParseEcPublicKey(data, length, &publicKeyInfo->ecPublicKey);
 80273e2:	683b      	ldr	r3, [r7, #0]
 80273e4:	3330      	adds	r3, #48	@ 0x30
 80273e6:	461a      	mov	r2, r3
 80273e8:	68b9      	ldr	r1, [r7, #8]
 80273ea:	68f8      	ldr	r0, [r7, #12]
 80273ec:	f000 f8ed 	bl	80275ca <x509ParseEcPublicKey>
 80273f0:	4603      	mov	r3, r0
 80273f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80273f4:	e001      	b.n	80273fa <x509ParseSubjectPublicKeyInfo+0x14a>
   else
#endif
   //Unknown algorithm identifier?
   {
      //Report an error
      error = ERROR_WRONG_IDENTIFIER;
 80273f6:	23d6      	movs	r3, #214	@ 0xd6
 80273f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
   }

   //Return status code
   return error;
 80273fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 80273fc:	4618      	mov	r0, r3
 80273fe:	3738      	adds	r7, #56	@ 0x38
 8027400:	46bd      	mov	sp, r7
 8027402:	bd80      	pop	{r7, pc}
 8027404:	0802e3b4 	.word	0x0802e3b4
 8027408:	0802e3c0 	.word	0x0802e3c0
 802740c:	0802e1ac 	.word	0x0802e1ac

08027410 <x509ParseAlgoId>:
 * @return Error code
 **/

error_t x509ParseAlgoId(const uint8_t *data, size_t length,
   size_t *totalLength, X509SubjectPublicKeyInfo *publicKeyInfo)
{
 8027410:	b580      	push	{r7, lr}
 8027412:	b08c      	sub	sp, #48	@ 0x30
 8027414:	af00      	add	r7, sp, #0
 8027416:	60f8      	str	r0, [r7, #12]
 8027418:	60b9      	str	r1, [r7, #8]
 802741a:	607a      	str	r2, [r7, #4]
 802741c:	603b      	str	r3, [r7, #0]

   //Debug message
   TRACE_DEBUG("      Parsing AlgorithmIdentifier...\r\n");

   //Read AlgorithmIdentifier field
   error = asn1ReadSequence(data, length, &tag);
 802741e:	f107 0314 	add.w	r3, r7, #20
 8027422:	461a      	mov	r2, r3
 8027424:	68b9      	ldr	r1, [r7, #8]
 8027426:	68f8      	ldr	r0, [r7, #12]
 8027428:	f7fc fff8 	bl	802441c <asn1ReadSequence>
 802742c:	4603      	mov	r3, r0
 802742e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   //Failed to decode ASN.1 tag?
   if(error)
 8027430:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8027432:	2b00      	cmp	r3, #0
 8027434:	d001      	beq.n	802743a <x509ParseAlgoId+0x2a>
      return error;
 8027436:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8027438:	e053      	b.n	80274e2 <x509ParseAlgoId+0xd2>

   //Save the total length of the field
   *totalLength = tag.totalLength;
 802743a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802743c:	687b      	ldr	r3, [r7, #4]
 802743e:	601a      	str	r2, [r3, #0]

   //Point to the first field
   data = tag.value;
 8027440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027442:	60fb      	str	r3, [r7, #12]
   length = tag.length;
 8027444:	6a3b      	ldr	r3, [r7, #32]
 8027446:	60bb      	str	r3, [r7, #8]

   //Read algorithm identifier (OID)
   error = asn1ReadOid(data, length, &tag);
 8027448:	f107 0314 	add.w	r3, r7, #20
 802744c:	461a      	mov	r2, r3
 802744e:	68b9      	ldr	r1, [r7, #8]
 8027450:	68f8      	ldr	r0, [r7, #12]
 8027452:	f7fd f800 	bl	8024456 <asn1ReadOid>
 8027456:	4603      	mov	r3, r0
 8027458:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   //Failed to decode ASN.1 tag?
   if(error)
 802745a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 802745c:	2b00      	cmp	r3, #0
 802745e:	d001      	beq.n	8027464 <x509ParseAlgoId+0x54>
      return error;
 8027460:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8027462:	e03e      	b.n	80274e2 <x509ParseAlgoId+0xd2>

   //Save the algorithm identifier
   publicKeyInfo->oid.value = tag.value;
 8027464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8027466:	683b      	ldr	r3, [r7, #0]
 8027468:	609a      	str	r2, [r3, #8]
   publicKeyInfo->oid.length = tag.length;
 802746a:	6a3a      	ldr	r2, [r7, #32]
 802746c:	683b      	ldr	r3, [r7, #0]
 802746e:	60da      	str	r2, [r3, #12]

   //Point to the next field (if any)
   data += tag.totalLength;
 8027470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027472:	68fa      	ldr	r2, [r7, #12]
 8027474:	4413      	add	r3, r2
 8027476:	60fb      	str	r3, [r7, #12]
   length -= tag.totalLength;
 8027478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802747a:	68ba      	ldr	r2, [r7, #8]
 802747c:	1ad3      	subs	r3, r2, r3
 802747e:	60bb      	str	r3, [r7, #8]

#if (RSA_SUPPORT == ENABLED)
   //RSA algorithm identifier?
   if(!asn1CheckOid(&tag, RSA_ENCRYPTION_OID, sizeof(RSA_ENCRYPTION_OID)))
 8027480:	f107 0314 	add.w	r3, r7, #20
 8027484:	2209      	movs	r2, #9
 8027486:	4919      	ldr	r1, [pc, #100]	@ (80274ec <x509ParseAlgoId+0xdc>)
 8027488:	4618      	mov	r0, r3
 802748a:	f7fd f824 	bl	80244d6 <asn1CheckOid>
 802748e:	4603      	mov	r3, r0
 8027490:	2b00      	cmp	r3, #0
 8027492:	d102      	bne.n	802749a <x509ParseAlgoId+0x8a>
   {
      //The parameters field must have ASN.1 type NULL for this algorithm
      //identifier (refer to RFC 3279, section 2.3.1)
      error = NO_ERROR;
 8027494:	2300      	movs	r3, #0
 8027496:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8027498:	e022      	b.n	80274e0 <x509ParseAlgoId+0xd0>
   }
   //RSA-PSS algorithm identifier?
   else if(!asn1CheckOid(&tag, RSASSA_PSS_OID, sizeof(RSASSA_PSS_OID)))
 802749a:	f107 0314 	add.w	r3, r7, #20
 802749e:	2209      	movs	r2, #9
 80274a0:	4913      	ldr	r1, [pc, #76]	@ (80274f0 <x509ParseAlgoId+0xe0>)
 80274a2:	4618      	mov	r0, r3
 80274a4:	f7fd f817 	bl	80244d6 <asn1CheckOid>
 80274a8:	4603      	mov	r3, r0
 80274aa:	2b00      	cmp	r3, #0
 80274ac:	d102      	bne.n	80274b4 <x509ParseAlgoId+0xa4>
   {
      //The parameters may be either absent or present when used as subject
      //public key information (refer to RFC 4055, section 3.1)
      error = NO_ERROR;
 80274ae:	2300      	movs	r3, #0
 80274b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80274b2:	e015      	b.n	80274e0 <x509ParseAlgoId+0xd0>
   }
   else
#endif
#if (EC_SUPPORT == ENABLED)
   //EC public key identifier?
   if(!asn1CheckOid(&tag, EC_PUBLIC_KEY_OID, sizeof(EC_PUBLIC_KEY_OID)))
 80274b4:	f107 0314 	add.w	r3, r7, #20
 80274b8:	2207      	movs	r2, #7
 80274ba:	490e      	ldr	r1, [pc, #56]	@ (80274f4 <x509ParseAlgoId+0xe4>)
 80274bc:	4618      	mov	r0, r3
 80274be:	f7fd f80a 	bl	80244d6 <asn1CheckOid>
 80274c2:	4603      	mov	r3, r0
 80274c4:	2b00      	cmp	r3, #0
 80274c6:	d109      	bne.n	80274dc <x509ParseAlgoId+0xcc>
   {
      //Read ECParameters structure
      error = x509ParseEcParameters(data, length, &publicKeyInfo->ecParams);
 80274c8:	683b      	ldr	r3, [r7, #0]
 80274ca:	3328      	adds	r3, #40	@ 0x28
 80274cc:	461a      	mov	r2, r3
 80274ce:	68b9      	ldr	r1, [r7, #8]
 80274d0:	68f8      	ldr	r0, [r7, #12]
 80274d2:	f000 f893 	bl	80275fc <x509ParseEcParameters>
 80274d6:	4603      	mov	r3, r0
 80274d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80274da:	e001      	b.n	80274e0 <x509ParseAlgoId+0xd0>
   else
#endif
   //Unknown algorithm identifier?
   {
      //Report an error
      error = ERROR_WRONG_IDENTIFIER;
 80274dc:	23d6      	movs	r3, #214	@ 0xd6
 80274de:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   }

   //Return status code
   return error;
 80274e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 80274e2:	4618      	mov	r0, r3
 80274e4:	3730      	adds	r7, #48	@ 0x30
 80274e6:	46bd      	mov	sp, r7
 80274e8:	bd80      	pop	{r7, pc}
 80274ea:	bf00      	nop
 80274ec:	0802e3b4 	.word	0x0802e3b4
 80274f0:	0802e3c0 	.word	0x0802e3c0
 80274f4:	0802e1ac 	.word	0x0802e1ac

080274f8 <x509ParseRsaPublicKey>:
 * @return Error code
 **/

error_t x509ParseRsaPublicKey(const uint8_t *data, size_t length,
   X509RsaPublicKey *rsaPublicKey)
{
 80274f8:	b580      	push	{r7, lr}
 80274fa:	b08c      	sub	sp, #48	@ 0x30
 80274fc:	af00      	add	r7, sp, #0
 80274fe:	60f8      	str	r0, [r7, #12]
 8027500:	60b9      	str	r1, [r7, #8]
 8027502:	607a      	str	r2, [r7, #4]

   //Debug message
   TRACE_DEBUG("      Parsing RSAPublicKey...\r\n");

   //Read RSAPublicKey structure
   error = asn1ReadSequence(data, length, &tag);
 8027504:	f107 0314 	add.w	r3, r7, #20
 8027508:	461a      	mov	r2, r3
 802750a:	68b9      	ldr	r1, [r7, #8]
 802750c:	68f8      	ldr	r0, [r7, #12]
 802750e:	f7fc ff85 	bl	802441c <asn1ReadSequence>
 8027512:	4603      	mov	r3, r0
 8027514:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   //Failed to decode ASN.1 tag?
   if(error)
 8027516:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8027518:	2b00      	cmp	r3, #0
 802751a:	d001      	beq.n	8027520 <x509ParseRsaPublicKey+0x28>
      return error;
 802751c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 802751e:	e050      	b.n	80275c2 <x509ParseRsaPublicKey+0xca>

   //Point to the first field
   data = tag.value;
 8027520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027522:	60fb      	str	r3, [r7, #12]
   length = tag.length;
 8027524:	6a3b      	ldr	r3, [r7, #32]
 8027526:	60bb      	str	r3, [r7, #8]

   //Read Modulus field
   error = asn1ReadTag(data, length, &tag);
 8027528:	f107 0314 	add.w	r3, r7, #20
 802752c:	461a      	mov	r2, r3
 802752e:	68b9      	ldr	r1, [r7, #8]
 8027530:	68f8      	ldr	r0, [r7, #12]
 8027532:	f7fc feb2 	bl	802429a <asn1ReadTag>
 8027536:	4603      	mov	r3, r0
 8027538:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   //Failed to decode ASN.1 tag?
   if(error)
 802753a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 802753c:	2b00      	cmp	r3, #0
 802753e:	d001      	beq.n	8027544 <x509ParseRsaPublicKey+0x4c>
      return error;
 8027540:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8027542:	e03e      	b.n	80275c2 <x509ParseRsaPublicKey+0xca>

   //Enforce encoding, class and type
   error = asn1CheckTag(&tag, FALSE, ASN1_CLASS_UNIVERSAL, ASN1_TYPE_INTEGER);
 8027544:	f107 0014 	add.w	r0, r7, #20
 8027548:	2302      	movs	r3, #2
 802754a:	2200      	movs	r2, #0
 802754c:	2100      	movs	r1, #0
 802754e:	f7fc ff9f 	bl	8024490 <asn1CheckTag>
 8027552:	4603      	mov	r3, r0
 8027554:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   //Invalid tag?
   if(error)
 8027556:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8027558:	2b00      	cmp	r3, #0
 802755a:	d001      	beq.n	8027560 <x509ParseRsaPublicKey+0x68>
      return error;
 802755c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 802755e:	e030      	b.n	80275c2 <x509ParseRsaPublicKey+0xca>

   //Save the modulus
   rsaPublicKey->n.value = tag.value;
 8027560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8027562:	687b      	ldr	r3, [r7, #4]
 8027564:	601a      	str	r2, [r3, #0]
   rsaPublicKey->n.length = tag.length;
 8027566:	6a3a      	ldr	r2, [r7, #32]
 8027568:	687b      	ldr	r3, [r7, #4]
 802756a:	605a      	str	r2, [r3, #4]

   //Point to the next field
   data += tag.totalLength;
 802756c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802756e:	68fa      	ldr	r2, [r7, #12]
 8027570:	4413      	add	r3, r2
 8027572:	60fb      	str	r3, [r7, #12]
   length -= tag.totalLength;
 8027574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027576:	68ba      	ldr	r2, [r7, #8]
 8027578:	1ad3      	subs	r3, r2, r3
 802757a:	60bb      	str	r3, [r7, #8]

   //Read PublicExponent field
   error = asn1ReadTag(data, length, &tag);
 802757c:	f107 0314 	add.w	r3, r7, #20
 8027580:	461a      	mov	r2, r3
 8027582:	68b9      	ldr	r1, [r7, #8]
 8027584:	68f8      	ldr	r0, [r7, #12]
 8027586:	f7fc fe88 	bl	802429a <asn1ReadTag>
 802758a:	4603      	mov	r3, r0
 802758c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   //Failed to decode ASN.1 tag?
   if(error)
 802758e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8027590:	2b00      	cmp	r3, #0
 8027592:	d001      	beq.n	8027598 <x509ParseRsaPublicKey+0xa0>
      return error;
 8027594:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8027596:	e014      	b.n	80275c2 <x509ParseRsaPublicKey+0xca>

   //Enforce encoding, class and type
   error = asn1CheckTag(&tag, FALSE, ASN1_CLASS_UNIVERSAL, ASN1_TYPE_INTEGER);
 8027598:	f107 0014 	add.w	r0, r7, #20
 802759c:	2302      	movs	r3, #2
 802759e:	2200      	movs	r2, #0
 80275a0:	2100      	movs	r1, #0
 80275a2:	f7fc ff75 	bl	8024490 <asn1CheckTag>
 80275a6:	4603      	mov	r3, r0
 80275a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   //Invalid tag?
   if(error)
 80275aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80275ac:	2b00      	cmp	r3, #0
 80275ae:	d001      	beq.n	80275b4 <x509ParseRsaPublicKey+0xbc>
      return error;
 80275b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80275b2:	e006      	b.n	80275c2 <x509ParseRsaPublicKey+0xca>

   //Save the public exponent
   rsaPublicKey->e.value = tag.value;
 80275b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80275b6:	687b      	ldr	r3, [r7, #4]
 80275b8:	609a      	str	r2, [r3, #8]
   rsaPublicKey->e.length = tag.length;
 80275ba:	6a3a      	ldr	r2, [r7, #32]
 80275bc:	687b      	ldr	r3, [r7, #4]
 80275be:	60da      	str	r2, [r3, #12]

   //Successful processing
   return NO_ERROR;
 80275c0:	2300      	movs	r3, #0
}
 80275c2:	4618      	mov	r0, r3
 80275c4:	3730      	adds	r7, #48	@ 0x30
 80275c6:	46bd      	mov	sp, r7
 80275c8:	bd80      	pop	{r7, pc}

080275ca <x509ParseEcPublicKey>:
 * @return Error code
 **/

error_t x509ParseEcPublicKey(const uint8_t *data, size_t length,
   X509EcPublicKey *ecPublicKey)
{
 80275ca:	b480      	push	{r7}
 80275cc:	b085      	sub	sp, #20
 80275ce:	af00      	add	r7, sp, #0
 80275d0:	60f8      	str	r0, [r7, #12]
 80275d2:	60b9      	str	r1, [r7, #8]
 80275d4:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("      Parsing ECPublicKey...\r\n");

   //Make sure the EC public key is valid
   if(length == 0)
 80275d6:	68bb      	ldr	r3, [r7, #8]
 80275d8:	2b00      	cmp	r3, #0
 80275da:	d102      	bne.n	80275e2 <x509ParseEcPublicKey+0x18>
      return ERROR_BAD_CERTIFICATE;
 80275dc:	f240 2315 	movw	r3, #533	@ 0x215
 80275e0:	e006      	b.n	80275f0 <x509ParseEcPublicKey+0x26>

   //Save the EC public key
   ecPublicKey->q.value = data;
 80275e2:	687b      	ldr	r3, [r7, #4]
 80275e4:	68fa      	ldr	r2, [r7, #12]
 80275e6:	601a      	str	r2, [r3, #0]
   ecPublicKey->q.length = length;
 80275e8:	687b      	ldr	r3, [r7, #4]
 80275ea:	68ba      	ldr	r2, [r7, #8]
 80275ec:	605a      	str	r2, [r3, #4]

   //Successful processing
   return NO_ERROR;
 80275ee:	2300      	movs	r3, #0
}
 80275f0:	4618      	mov	r0, r3
 80275f2:	3714      	adds	r7, #20
 80275f4:	46bd      	mov	sp, r7
 80275f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275fa:	4770      	bx	lr

080275fc <x509ParseEcParameters>:
 * @return Error code
 **/

error_t x509ParseEcParameters(const uint8_t *data, size_t length,
   X509EcParameters *ecParams)
{
 80275fc:	b580      	push	{r7, lr}
 80275fe:	b08c      	sub	sp, #48	@ 0x30
 8027600:	af00      	add	r7, sp, #0
 8027602:	60f8      	str	r0, [r7, #12]
 8027604:	60b9      	str	r1, [r7, #8]
 8027606:	607a      	str	r2, [r7, #4]

   //Debug message
   TRACE_DEBUG("        Parsing ECParameters...\r\n");

   //Read namedCurve field
   error = asn1ReadOid(data, length, &tag);
 8027608:	f107 0314 	add.w	r3, r7, #20
 802760c:	461a      	mov	r2, r3
 802760e:	68b9      	ldr	r1, [r7, #8]
 8027610:	68f8      	ldr	r0, [r7, #12]
 8027612:	f7fc ff20 	bl	8024456 <asn1ReadOid>
 8027616:	4603      	mov	r3, r0
 8027618:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   //Failed to decode ASN.1 tag?
   if(error)
 802761a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 802761c:	2b00      	cmp	r3, #0
 802761e:	d001      	beq.n	8027624 <x509ParseEcParameters+0x28>
      return error;
 8027620:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8027622:	e006      	b.n	8027632 <x509ParseEcParameters+0x36>

   //The namedCurve field identifies all the required values for a particular
   //set of elliptic curve domain parameters to be represented by an object
   //identifier
   ecParams->namedCurve.value = tag.value;
 8027624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8027626:	687b      	ldr	r3, [r7, #4]
 8027628:	601a      	str	r2, [r3, #0]
   ecParams->namedCurve.length = tag.length;
 802762a:	6a3a      	ldr	r2, [r7, #32]
 802762c:	687b      	ldr	r3, [r7, #4]
 802762e:	605a      	str	r2, [r3, #4]

   //Successful processing
   return NO_ERROR;
 8027630:	2300      	movs	r3, #0
}
 8027632:	4618      	mov	r0, r3
 8027634:	3730      	adds	r7, #48	@ 0x30
 8027636:	46bd      	mov	sp, r7
 8027638:	bd80      	pop	{r7, pc}
	...

0802763c <x509ImportRsaPublicKey>:
 * @return Error code
 **/

error_t x509ImportRsaPublicKey(RsaPublicKey *publicKey,
   const X509SubjectPublicKeyInfo *publicKeyInfo)
{
 802763c:	b580      	push	{r7, lr}
 802763e:	b086      	sub	sp, #24
 8027640:	af00      	add	r7, sp, #0
 8027642:	6078      	str	r0, [r7, #4]
 8027644:	6039      	str	r1, [r7, #0]
#if (RSA_SUPPORT == ENABLED)
   const uint8_t *oid;
   size_t oidLen;

   //Get the public key algorithm identifier
   oid = publicKeyInfo->oid.value;
 8027646:	683b      	ldr	r3, [r7, #0]
 8027648:	689b      	ldr	r3, [r3, #8]
 802764a:	613b      	str	r3, [r7, #16]
   oidLen = publicKeyInfo->oid.length;
 802764c:	683b      	ldr	r3, [r7, #0]
 802764e:	68db      	ldr	r3, [r3, #12]
 8027650:	60fb      	str	r3, [r7, #12]

   //RSA algorithm identifier?
   if(OID_COMP(oid, oidLen, RSA_ENCRYPTION_OID) == 0 ||
 8027652:	2309      	movs	r3, #9
 8027654:	4a1f      	ldr	r2, [pc, #124]	@ (80276d4 <x509ImportRsaPublicKey+0x98>)
 8027656:	68f9      	ldr	r1, [r7, #12]
 8027658:	6938      	ldr	r0, [r7, #16]
 802765a:	f7fd f827 	bl	80246ac <oidComp>
 802765e:	4603      	mov	r3, r0
 8027660:	2b00      	cmp	r3, #0
 8027662:	d008      	beq.n	8027676 <x509ImportRsaPublicKey+0x3a>
      OID_COMP(oid, oidLen, RSASSA_PSS_OID) == 0)
 8027664:	2309      	movs	r3, #9
 8027666:	4a1c      	ldr	r2, [pc, #112]	@ (80276d8 <x509ImportRsaPublicKey+0x9c>)
 8027668:	68f9      	ldr	r1, [r7, #12]
 802766a:	6938      	ldr	r0, [r7, #16]
 802766c:	f7fd f81e 	bl	80246ac <oidComp>
 8027670:	4603      	mov	r3, r0
   if(OID_COMP(oid, oidLen, RSA_ENCRYPTION_OID) == 0 ||
 8027672:	2b00      	cmp	r3, #0
 8027674:	d126      	bne.n	80276c4 <x509ImportRsaPublicKey+0x88>
   {
      //Sanity check
      if(publicKeyInfo->rsaPublicKey.n.value != NULL &&
 8027676:	683b      	ldr	r3, [r7, #0]
 8027678:	699b      	ldr	r3, [r3, #24]
 802767a:	2b00      	cmp	r3, #0
 802767c:	d01d      	beq.n	80276ba <x509ImportRsaPublicKey+0x7e>
         publicKeyInfo->rsaPublicKey.e.value != NULL)
 802767e:	683b      	ldr	r3, [r7, #0]
 8027680:	6a1b      	ldr	r3, [r3, #32]
      if(publicKeyInfo->rsaPublicKey.n.value != NULL &&
 8027682:	2b00      	cmp	r3, #0
 8027684:	d019      	beq.n	80276ba <x509ImportRsaPublicKey+0x7e>
      {
         //Read modulus
         error = mpiImport(&publicKey->n, publicKeyInfo->rsaPublicKey.n.value,
 8027686:	6878      	ldr	r0, [r7, #4]
 8027688:	683b      	ldr	r3, [r7, #0]
 802768a:	6999      	ldr	r1, [r3, #24]
            publicKeyInfo->rsaPublicKey.n.length, MPI_FORMAT_BIG_ENDIAN);
 802768c:	683b      	ldr	r3, [r7, #0]
 802768e:	69da      	ldr	r2, [r3, #28]
         error = mpiImport(&publicKey->n, publicKeyInfo->rsaPublicKey.n.value,
 8027690:	2301      	movs	r3, #1
 8027692:	f7fd fe9b 	bl	80253cc <mpiImport>
 8027696:	4603      	mov	r3, r0
 8027698:	82fb      	strh	r3, [r7, #22]

         //Check status code
         if(!error)
 802769a:	8afb      	ldrh	r3, [r7, #22]
 802769c:	2b00      	cmp	r3, #0
 802769e:	d10f      	bne.n	80276c0 <x509ImportRsaPublicKey+0x84>
         {
            //Read public exponent
            error = mpiImport(&publicKey->e, publicKeyInfo->rsaPublicKey.e.value,
 80276a0:	687b      	ldr	r3, [r7, #4]
 80276a2:	f103 000c 	add.w	r0, r3, #12
 80276a6:	683b      	ldr	r3, [r7, #0]
 80276a8:	6a19      	ldr	r1, [r3, #32]
               publicKeyInfo->rsaPublicKey.e.length, MPI_FORMAT_BIG_ENDIAN);
 80276aa:	683b      	ldr	r3, [r7, #0]
 80276ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            error = mpiImport(&publicKey->e, publicKeyInfo->rsaPublicKey.e.value,
 80276ae:	2301      	movs	r3, #1
 80276b0:	f7fd fe8c 	bl	80253cc <mpiImport>
 80276b4:	4603      	mov	r3, r0
 80276b6:	82fb      	strh	r3, [r7, #22]
         }

         //Check status code
         if(!error)
 80276b8:	e002      	b.n	80276c0 <x509ImportRsaPublicKey+0x84>
         }
      }
      else
      {
         //The public key is not valid
         error = ERROR_INVALID_KEY;
 80276ba:	23e7      	movs	r3, #231	@ 0xe7
 80276bc:	82fb      	strh	r3, [r7, #22]
      if(publicKeyInfo->rsaPublicKey.n.value != NULL &&
 80276be:	e003      	b.n	80276c8 <x509ImportRsaPublicKey+0x8c>
         if(!error)
 80276c0:	bf00      	nop
      if(publicKeyInfo->rsaPublicKey.n.value != NULL &&
 80276c2:	e001      	b.n	80276c8 <x509ImportRsaPublicKey+0x8c>
   else
#endif
   //Invalid algorithm identifier?
   {
      //Report an error
      error = ERROR_WRONG_IDENTIFIER;
 80276c4:	23d6      	movs	r3, #214	@ 0xd6
 80276c6:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 80276c8:	8afb      	ldrh	r3, [r7, #22]
}
 80276ca:	4618      	mov	r0, r3
 80276cc:	3718      	adds	r7, #24
 80276ce:	46bd      	mov	sp, r7
 80276d0:	bd80      	pop	{r7, pc}
 80276d2:	bf00      	nop
 80276d4:	0802e3b4 	.word	0x0802e3b4
 80276d8:	0802e3c0 	.word	0x0802e3c0

080276dc <string_to_uint32>:
static uint16_t calculate_crc16(const uint8_t* p_data, uint32_t size);
static uint8_t calculate_checksum(const uint8_t *p_data, uint32_t size);
static COM_StatusTypeDef serial_put_byte(ymodem_handle_t *handle, uint8_t data);

// String to integer conversion (replacement for Str2Int)
static COM_StatusTypeDef string_to_uint32(const uint8_t *str, uint32_t *value) {
 80276dc:	b480      	push	{r7}
 80276de:	b085      	sub	sp, #20
 80276e0:	af00      	add	r7, sp, #0
 80276e2:	6078      	str	r0, [r7, #4]
 80276e4:	6039      	str	r1, [r7, #0]
    uint32_t result = 0;
 80276e6:	2300      	movs	r3, #0
 80276e8:	60fb      	str	r3, [r7, #12]
    uint32_t i = 0;
 80276ea:	2300      	movs	r3, #0
 80276ec:	60bb      	str	r3, [r7, #8]

    if (str == NULL || value == NULL) {
 80276ee:	687b      	ldr	r3, [r7, #4]
 80276f0:	2b00      	cmp	r3, #0
 80276f2:	d002      	beq.n	80276fa <string_to_uint32+0x1e>
 80276f4:	683b      	ldr	r3, [r7, #0]
 80276f6:	2b00      	cmp	r3, #0
 80276f8:	d11d      	bne.n	8027736 <string_to_uint32+0x5a>
        return COM_ERROR;
 80276fa:	2301      	movs	r3, #1
 80276fc:	e025      	b.n	802774a <string_to_uint32+0x6e>
    }

    while (str[i] != '\0') {
        if (str[i] >= '0' && str[i] <= '9') {
 80276fe:	687a      	ldr	r2, [r7, #4]
 8027700:	68bb      	ldr	r3, [r7, #8]
 8027702:	4413      	add	r3, r2
 8027704:	781b      	ldrb	r3, [r3, #0]
 8027706:	2b2f      	cmp	r3, #47	@ 0x2f
 8027708:	d91b      	bls.n	8027742 <string_to_uint32+0x66>
 802770a:	687a      	ldr	r2, [r7, #4]
 802770c:	68bb      	ldr	r3, [r7, #8]
 802770e:	4413      	add	r3, r2
 8027710:	781b      	ldrb	r3, [r3, #0]
 8027712:	2b39      	cmp	r3, #57	@ 0x39
 8027714:	d815      	bhi.n	8027742 <string_to_uint32+0x66>
            result = result * 10 + (str[i] - '0');
 8027716:	68fa      	ldr	r2, [r7, #12]
 8027718:	4613      	mov	r3, r2
 802771a:	009b      	lsls	r3, r3, #2
 802771c:	4413      	add	r3, r2
 802771e:	005b      	lsls	r3, r3, #1
 8027720:	4619      	mov	r1, r3
 8027722:	687a      	ldr	r2, [r7, #4]
 8027724:	68bb      	ldr	r3, [r7, #8]
 8027726:	4413      	add	r3, r2
 8027728:	781b      	ldrb	r3, [r3, #0]
 802772a:	440b      	add	r3, r1
 802772c:	3b30      	subs	r3, #48	@ 0x30
 802772e:	60fb      	str	r3, [r7, #12]
            i++;
 8027730:	68bb      	ldr	r3, [r7, #8]
 8027732:	3301      	adds	r3, #1
 8027734:	60bb      	str	r3, [r7, #8]
    while (str[i] != '\0') {
 8027736:	687a      	ldr	r2, [r7, #4]
 8027738:	68bb      	ldr	r3, [r7, #8]
 802773a:	4413      	add	r3, r2
 802773c:	781b      	ldrb	r3, [r3, #0]
 802773e:	2b00      	cmp	r3, #0
 8027740:	d1dd      	bne.n	80276fe <string_to_uint32+0x22>
        } else {
            break;
        }
    }

    *value = result;
 8027742:	683b      	ldr	r3, [r7, #0]
 8027744:	68fa      	ldr	r2, [r7, #12]
 8027746:	601a      	str	r2, [r3, #0]
    return COM_OK;
 8027748:	2300      	movs	r3, #0
}
 802774a:	4618      	mov	r0, r3
 802774c:	3714      	adds	r7, #20
 802774e:	46bd      	mov	sp, r7
 8027750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027754:	4770      	bx	lr

08027756 <ymodem_init>:
 * @brief Initialize YMODEM handle with user I/O functions
 * @param handle Pointer to YMODEM handle
 * @param read_fn User-provided read function
 * @param write_fn User-provided write function
 */
void ymodem_init(ymodem_handle_t *handle, ymodem_read_fn_t read_fn, ymodem_write_fn_t write_fn) {
 8027756:	b580      	push	{r7, lr}
 8027758:	b084      	sub	sp, #16
 802775a:	af00      	add	r7, sp, #0
 802775c:	60f8      	str	r0, [r7, #12]
 802775e:	60b9      	str	r1, [r7, #8]
 8027760:	607a      	str	r2, [r7, #4]
    if (handle == NULL) return;
 8027762:	68fb      	ldr	r3, [r7, #12]
 8027764:	2b00      	cmp	r3, #0
 8027766:	d01d      	beq.n	80277a4 <ymodem_init+0x4e>

    handle->read_fn = read_fn;
 8027768:	68fb      	ldr	r3, [r7, #12]
 802776a:	68ba      	ldr	r2, [r7, #8]
 802776c:	601a      	str	r2, [r3, #0]
    handle->write_fn = write_fn;
 802776e:	68fb      	ldr	r3, [r7, #12]
 8027770:	687a      	ldr	r2, [r7, #4]
 8027772:	605a      	str	r2, [r3, #4]
    handle->file_size = 0;
 8027774:	68fb      	ldr	r3, [r7, #12]
 8027776:	2200      	movs	r2, #0
 8027778:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
    handle->bytes_transferred = 0;
 802777c:	68fb      	ldr	r3, [r7, #12]
 802777e:	2200      	movs	r2, #0
 8027780:	f8c3 2454 	str.w	r2, [r3, #1108]	@ 0x454
    memset(handle->filename, 0, FILE_NAME_LENGTH);
 8027784:	68fb      	ldr	r3, [r7, #12]
 8027786:	3308      	adds	r3, #8
 8027788:	2240      	movs	r2, #64	@ 0x40
 802778a:	2100      	movs	r1, #0
 802778c:	4618      	mov	r0, r3
 802778e:	f004 fa53 	bl	802bc38 <memset>
    memset(handle->packet_data, 0, sizeof(handle->packet_data));
 8027792:	68fb      	ldr	r3, [r7, #12]
 8027794:	3348      	adds	r3, #72	@ 0x48
 8027796:	f240 4206 	movw	r2, #1030	@ 0x406
 802779a:	2100      	movs	r1, #0
 802779c:	4618      	mov	r0, r3
 802779e:	f004 fa4b 	bl	802bc38 <memset>
 80277a2:	e000      	b.n	80277a6 <ymodem_init+0x50>
    if (handle == NULL) return;
 80277a4:	bf00      	nop
}
 80277a6:	3710      	adds	r7, #16
 80277a8:	46bd      	mov	sp, r7
 80277aa:	bd80      	pop	{r7, pc}

080277ac <serial_put_byte>:
 * @brief Send a single byte using user write function
 * @param handle Pointer to YMODEM handle
 * @param data Byte to send
 * @return COM_StatusTypeDef
 */
static COM_StatusTypeDef serial_put_byte(ymodem_handle_t *handle, uint8_t data) {
 80277ac:	b580      	push	{r7, lr}
 80277ae:	b082      	sub	sp, #8
 80277b0:	af00      	add	r7, sp, #0
 80277b2:	6078      	str	r0, [r7, #4]
 80277b4:	460b      	mov	r3, r1
 80277b6:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL || handle->write_fn == NULL) {
 80277b8:	687b      	ldr	r3, [r7, #4]
 80277ba:	2b00      	cmp	r3, #0
 80277bc:	d003      	beq.n	80277c6 <serial_put_byte+0x1a>
 80277be:	687b      	ldr	r3, [r7, #4]
 80277c0:	685b      	ldr	r3, [r3, #4]
 80277c2:	2b00      	cmp	r3, #0
 80277c4:	d101      	bne.n	80277ca <serial_put_byte+0x1e>
        return COM_ERROR;
 80277c6:	2301      	movs	r3, #1
 80277c8:	e006      	b.n	80277d8 <serial_put_byte+0x2c>
    }
    return handle->write_fn(&data, 1);
 80277ca:	687b      	ldr	r3, [r7, #4]
 80277cc:	685b      	ldr	r3, [r3, #4]
 80277ce:	1cfa      	adds	r2, r7, #3
 80277d0:	2101      	movs	r1, #1
 80277d2:	4610      	mov	r0, r2
 80277d4:	4798      	blx	r3
 80277d6:	4603      	mov	r3, r0
}
 80277d8:	4618      	mov	r0, r3
 80277da:	3708      	adds	r7, #8
 80277dc:	46bd      	mov	sp, r7
 80277de:	bd80      	pop	{r7, pc}

080277e0 <receive_packet>:
 * @param p_data Data buffer
 * @param p_length Packet length
 * @param timeout Timeout in milliseconds
 * @return COM_StatusTypeDef
 */
static COM_StatusTypeDef receive_packet(ymodem_handle_t *handle, uint8_t *p_data, uint32_t *p_length, uint32_t timeout) {
 80277e0:	b580      	push	{r7, lr}
 80277e2:	b088      	sub	sp, #32
 80277e4:	af00      	add	r7, sp, #0
 80277e6:	60f8      	str	r0, [r7, #12]
 80277e8:	60b9      	str	r1, [r7, #8]
 80277ea:	607a      	str	r2, [r7, #4]
 80277ec:	603b      	str	r3, [r7, #0]
    uint32_t crc;
    uint32_t packet_size = 0;
 80277ee:	2300      	movs	r3, #0
 80277f0:	61fb      	str	r3, [r7, #28]
    COM_StatusTypeDef status;
    uint8_t char1;

    *p_length = 0;
 80277f2:	687b      	ldr	r3, [r7, #4]
 80277f4:	2200      	movs	r2, #0
 80277f6:	601a      	str	r2, [r3, #0]

    if (handle == NULL || handle->read_fn == NULL) {
 80277f8:	68fb      	ldr	r3, [r7, #12]
 80277fa:	2b00      	cmp	r3, #0
 80277fc:	d003      	beq.n	8027806 <receive_packet+0x26>
 80277fe:	68fb      	ldr	r3, [r7, #12]
 8027800:	681b      	ldr	r3, [r3, #0]
 8027802:	2b00      	cmp	r3, #0
 8027804:	d101      	bne.n	802780a <receive_packet+0x2a>
        return COM_ERROR;
 8027806:	2301      	movs	r3, #1
 8027808:	e0b8      	b.n	802797c <receive_packet+0x19c>
    }

    status = handle->read_fn(&char1, 1, timeout);
 802780a:	68fb      	ldr	r3, [r7, #12]
 802780c:	681b      	ldr	r3, [r3, #0]
 802780e:	f107 0013 	add.w	r0, r7, #19
 8027812:	683a      	ldr	r2, [r7, #0]
 8027814:	2101      	movs	r1, #1
 8027816:	4798      	blx	r3
 8027818:	4603      	mov	r3, r0
 802781a:	76fb      	strb	r3, [r7, #27]

    if (status == COM_OK) {
 802781c:	7efb      	ldrb	r3, [r7, #27]
 802781e:	2b00      	cmp	r3, #0
 8027820:	f040 80a8 	bne.w	8027974 <receive_packet+0x194>
        switch (char1) {
 8027824:	7cfb      	ldrb	r3, [r7, #19]
 8027826:	2b61      	cmp	r3, #97	@ 0x61
 8027828:	d059      	beq.n	80278de <receive_packet+0xfe>
 802782a:	2b61      	cmp	r3, #97	@ 0x61
 802782c:	dc5a      	bgt.n	80278e4 <receive_packet+0x104>
 802782e:	2b18      	cmp	r3, #24
 8027830:	dc38      	bgt.n	80278a4 <receive_packet+0xc4>
 8027832:	2b00      	cmp	r3, #0
 8027834:	dd56      	ble.n	80278e4 <receive_packet+0x104>
 8027836:	3b01      	subs	r3, #1
 8027838:	2b17      	cmp	r3, #23
 802783a:	d853      	bhi.n	80278e4 <receive_packet+0x104>
 802783c:	a201      	add	r2, pc, #4	@ (adr r2, 8027844 <receive_packet+0x64>)
 802783e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027842:	bf00      	nop
 8027844:	080278ab 	.word	0x080278ab
 8027848:	080278b1 	.word	0x080278b1
 802784c:	080278e5 	.word	0x080278e5
 8027850:	080278eb 	.word	0x080278eb
 8027854:	080278e5 	.word	0x080278e5
 8027858:	080278e5 	.word	0x080278e5
 802785c:	080278e5 	.word	0x080278e5
 8027860:	080278e5 	.word	0x080278e5
 8027864:	080278e5 	.word	0x080278e5
 8027868:	080278e5 	.word	0x080278e5
 802786c:	080278e5 	.word	0x080278e5
 8027870:	080278e5 	.word	0x080278e5
 8027874:	080278e5 	.word	0x080278e5
 8027878:	080278e5 	.word	0x080278e5
 802787c:	080278e5 	.word	0x080278e5
 8027880:	080278e5 	.word	0x080278e5
 8027884:	080278e5 	.word	0x080278e5
 8027888:	080278e5 	.word	0x080278e5
 802788c:	080278e5 	.word	0x080278e5
 8027890:	080278e5 	.word	0x080278e5
 8027894:	080278e5 	.word	0x080278e5
 8027898:	080278e5 	.word	0x080278e5
 802789c:	080278e5 	.word	0x080278e5
 80278a0:	080278b9 	.word	0x080278b9
 80278a4:	2b41      	cmp	r3, #65	@ 0x41
 80278a6:	d01a      	beq.n	80278de <receive_packet+0xfe>
 80278a8:	e01c      	b.n	80278e4 <receive_packet+0x104>
            case SOH:
                packet_size = PACKET_SIZE;
 80278aa:	2380      	movs	r3, #128	@ 0x80
 80278ac:	61fb      	str	r3, [r7, #28]
                break;
 80278ae:	e01d      	b.n	80278ec <receive_packet+0x10c>
            case STX:
                packet_size = PACKET_1K_SIZE;
 80278b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80278b4:	61fb      	str	r3, [r7, #28]
                break;
 80278b6:	e019      	b.n	80278ec <receive_packet+0x10c>
            case EOT:
                break;
            case CA:
                if ((handle->read_fn(&char1, 1, timeout) == COM_OK) && (char1 == CA)) {
 80278b8:	68fb      	ldr	r3, [r7, #12]
 80278ba:	681b      	ldr	r3, [r3, #0]
 80278bc:	f107 0013 	add.w	r0, r7, #19
 80278c0:	683a      	ldr	r2, [r7, #0]
 80278c2:	2101      	movs	r1, #1
 80278c4:	4798      	blx	r3
 80278c6:	4603      	mov	r3, r0
 80278c8:	2b00      	cmp	r3, #0
 80278ca:	d105      	bne.n	80278d8 <receive_packet+0xf8>
 80278cc:	7cfb      	ldrb	r3, [r7, #19]
 80278ce:	2b18      	cmp	r3, #24
 80278d0:	d102      	bne.n	80278d8 <receive_packet+0xf8>
                    packet_size = 2;
 80278d2:	2302      	movs	r3, #2
 80278d4:	61fb      	str	r3, [r7, #28]
                } else {
                    status = COM_ERROR;
                }
                break;
 80278d6:	e009      	b.n	80278ec <receive_packet+0x10c>
                    status = COM_ERROR;
 80278d8:	2301      	movs	r3, #1
 80278da:	76fb      	strb	r3, [r7, #27]
                break;
 80278dc:	e006      	b.n	80278ec <receive_packet+0x10c>
            case ABORT1:
            case ABORT2:
                status = COM_ABORT;
 80278de:	2302      	movs	r3, #2
 80278e0:	76fb      	strb	r3, [r7, #27]
                break;
 80278e2:	e003      	b.n	80278ec <receive_packet+0x10c>
            default:
                status = COM_ERROR;
 80278e4:	2301      	movs	r3, #1
 80278e6:	76fb      	strb	r3, [r7, #27]
                break;
 80278e8:	e000      	b.n	80278ec <receive_packet+0x10c>
                break;
 80278ea:	bf00      	nop
        }
        *p_data = char1;
 80278ec:	7cfa      	ldrb	r2, [r7, #19]
 80278ee:	68bb      	ldr	r3, [r7, #8]
 80278f0:	701a      	strb	r2, [r3, #0]

        if (packet_size >= PACKET_SIZE) {
 80278f2:	69fb      	ldr	r3, [r7, #28]
 80278f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80278f6:	d93d      	bls.n	8027974 <receive_packet+0x194>
            status = handle->read_fn(&p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 80278f8:	68fb      	ldr	r3, [r7, #12]
 80278fa:	681b      	ldr	r3, [r3, #0]
 80278fc:	68ba      	ldr	r2, [r7, #8]
 80278fe:	1c90      	adds	r0, r2, #2
 8027900:	69fa      	ldr	r2, [r7, #28]
 8027902:	1d11      	adds	r1, r2, #4
 8027904:	683a      	ldr	r2, [r7, #0]
 8027906:	4798      	blx	r3
 8027908:	4603      	mov	r3, r0
 802790a:	76fb      	strb	r3, [r7, #27]

            /* Simple packet sanity check */
            if (status == COM_OK) {
 802790c:	7efb      	ldrb	r3, [r7, #27]
 802790e:	2b00      	cmp	r3, #0
 8027910:	d12e      	bne.n	8027970 <receive_packet+0x190>
                if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE)) {
 8027912:	68bb      	ldr	r3, [r7, #8]
 8027914:	3302      	adds	r3, #2
 8027916:	781a      	ldrb	r2, [r3, #0]
 8027918:	68bb      	ldr	r3, [r7, #8]
 802791a:	3303      	adds	r3, #3
 802791c:	781b      	ldrb	r3, [r3, #0]
 802791e:	43db      	mvns	r3, r3
 8027920:	b2db      	uxtb	r3, r3
 8027922:	429a      	cmp	r2, r3
 8027924:	d004      	beq.n	8027930 <receive_packet+0x150>
                    packet_size = 0;
 8027926:	2300      	movs	r3, #0
 8027928:	61fb      	str	r3, [r7, #28]
                    status = COM_ERROR;
 802792a:	2301      	movs	r3, #1
 802792c:	76fb      	strb	r3, [r7, #27]
 802792e:	e021      	b.n	8027974 <receive_packet+0x194>
                } else {
                    /* Check packet CRC */
                    crc = p_data[packet_size + PACKET_DATA_INDEX] << 8;
 8027930:	69fb      	ldr	r3, [r7, #28]
 8027932:	3304      	adds	r3, #4
 8027934:	68ba      	ldr	r2, [r7, #8]
 8027936:	4413      	add	r3, r2
 8027938:	781b      	ldrb	r3, [r3, #0]
 802793a:	021b      	lsls	r3, r3, #8
 802793c:	617b      	str	r3, [r7, #20]
                    crc += p_data[packet_size + PACKET_DATA_INDEX + 1];
 802793e:	69fb      	ldr	r3, [r7, #28]
 8027940:	3305      	adds	r3, #5
 8027942:	68ba      	ldr	r2, [r7, #8]
 8027944:	4413      	add	r3, r2
 8027946:	781b      	ldrb	r3, [r3, #0]
 8027948:	461a      	mov	r2, r3
 802794a:	697b      	ldr	r3, [r7, #20]
 802794c:	4413      	add	r3, r2
 802794e:	617b      	str	r3, [r7, #20]
                    if (calculate_crc16(&p_data[PACKET_DATA_INDEX], packet_size) != crc) {
 8027950:	68bb      	ldr	r3, [r7, #8]
 8027952:	3304      	adds	r3, #4
 8027954:	69f9      	ldr	r1, [r7, #28]
 8027956:	4618      	mov	r0, r3
 8027958:	f000 f848 	bl	80279ec <calculate_crc16>
 802795c:	4603      	mov	r3, r0
 802795e:	461a      	mov	r2, r3
 8027960:	697b      	ldr	r3, [r7, #20]
 8027962:	4293      	cmp	r3, r2
 8027964:	d006      	beq.n	8027974 <receive_packet+0x194>
                        packet_size = 0;
 8027966:	2300      	movs	r3, #0
 8027968:	61fb      	str	r3, [r7, #28]
                        status = COM_ERROR;
 802796a:	2301      	movs	r3, #1
 802796c:	76fb      	strb	r3, [r7, #27]
 802796e:	e001      	b.n	8027974 <receive_packet+0x194>
                    }
                }
            } else {
                packet_size = 0;
 8027970:	2300      	movs	r3, #0
 8027972:	61fb      	str	r3, [r7, #28]
            }
        }
    }
    *p_length = packet_size;
 8027974:	687b      	ldr	r3, [r7, #4]
 8027976:	69fa      	ldr	r2, [r7, #28]
 8027978:	601a      	str	r2, [r3, #0]
    return status;
 802797a:	7efb      	ldrb	r3, [r7, #27]
}
 802797c:	4618      	mov	r0, r3
 802797e:	3720      	adds	r7, #32
 8027980:	46bd      	mov	sp, r7
 8027982:	bd80      	pop	{r7, pc}

08027984 <update_crc16>:
 * @brief Update CRC16 for input byte
 * @param crc_in Input CRC value
 * @param byte Input byte
 * @return Updated CRC16 value
 */
static uint16_t update_crc16(uint16_t crc_in, uint8_t byte) {
 8027984:	b480      	push	{r7}
 8027986:	b085      	sub	sp, #20
 8027988:	af00      	add	r7, sp, #0
 802798a:	4603      	mov	r3, r0
 802798c:	460a      	mov	r2, r1
 802798e:	80fb      	strh	r3, [r7, #6]
 8027990:	4613      	mov	r3, r2
 8027992:	717b      	strb	r3, [r7, #5]
    uint32_t crc = crc_in;
 8027994:	88fb      	ldrh	r3, [r7, #6]
 8027996:	60fb      	str	r3, [r7, #12]
    uint32_t in = byte | 0x100;
 8027998:	797b      	ldrb	r3, [r7, #5]
 802799a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 802799e:	60bb      	str	r3, [r7, #8]

    do {
        crc <<= 1;
 80279a0:	68fb      	ldr	r3, [r7, #12]
 80279a2:	005b      	lsls	r3, r3, #1
 80279a4:	60fb      	str	r3, [r7, #12]
        in <<= 1;
 80279a6:	68bb      	ldr	r3, [r7, #8]
 80279a8:	005b      	lsls	r3, r3, #1
 80279aa:	60bb      	str	r3, [r7, #8]
        if (in & 0x100)
 80279ac:	68bb      	ldr	r3, [r7, #8]
 80279ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80279b2:	2b00      	cmp	r3, #0
 80279b4:	d002      	beq.n	80279bc <update_crc16+0x38>
            ++crc;
 80279b6:	68fb      	ldr	r3, [r7, #12]
 80279b8:	3301      	adds	r3, #1
 80279ba:	60fb      	str	r3, [r7, #12]
        if (crc & 0x10000)
 80279bc:	68fb      	ldr	r3, [r7, #12]
 80279be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80279c2:	2b00      	cmp	r3, #0
 80279c4:	d005      	beq.n	80279d2 <update_crc16+0x4e>
            crc ^= 0x1021;
 80279c6:	68fb      	ldr	r3, [r7, #12]
 80279c8:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80279cc:	f083 0301 	eor.w	r3, r3, #1
 80279d0:	60fb      	str	r3, [r7, #12]
    } while (!(in & 0x10000));
 80279d2:	68bb      	ldr	r3, [r7, #8]
 80279d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80279d8:	2b00      	cmp	r3, #0
 80279da:	d0e1      	beq.n	80279a0 <update_crc16+0x1c>

    return crc & 0xffffu;
 80279dc:	68fb      	ldr	r3, [r7, #12]
 80279de:	b29b      	uxth	r3, r3
}
 80279e0:	4618      	mov	r0, r3
 80279e2:	3714      	adds	r7, #20
 80279e4:	46bd      	mov	sp, r7
 80279e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279ea:	4770      	bx	lr

080279ec <calculate_crc16>:
 * @brief Calculate CRC16 for YModem Packet
 * @param p_data Data buffer
 * @param size Data size
 * @return CRC16 value
 */
static uint16_t calculate_crc16(const uint8_t* p_data, uint32_t size) {
 80279ec:	b580      	push	{r7, lr}
 80279ee:	b084      	sub	sp, #16
 80279f0:	af00      	add	r7, sp, #0
 80279f2:	6078      	str	r0, [r7, #4]
 80279f4:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0;
 80279f6:	2300      	movs	r3, #0
 80279f8:	60fb      	str	r3, [r7, #12]
    const uint8_t* dataEnd = p_data + size;
 80279fa:	687a      	ldr	r2, [r7, #4]
 80279fc:	683b      	ldr	r3, [r7, #0]
 80279fe:	4413      	add	r3, r2
 8027a00:	60bb      	str	r3, [r7, #8]

    while (p_data < dataEnd)
 8027a02:	e00a      	b.n	8027a1a <calculate_crc16+0x2e>
        crc = update_crc16(crc, *p_data++);
 8027a04:	68fb      	ldr	r3, [r7, #12]
 8027a06:	b298      	uxth	r0, r3
 8027a08:	687b      	ldr	r3, [r7, #4]
 8027a0a:	1c5a      	adds	r2, r3, #1
 8027a0c:	607a      	str	r2, [r7, #4]
 8027a0e:	781b      	ldrb	r3, [r3, #0]
 8027a10:	4619      	mov	r1, r3
 8027a12:	f7ff ffb7 	bl	8027984 <update_crc16>
 8027a16:	4603      	mov	r3, r0
 8027a18:	60fb      	str	r3, [r7, #12]
    while (p_data < dataEnd)
 8027a1a:	687a      	ldr	r2, [r7, #4]
 8027a1c:	68bb      	ldr	r3, [r7, #8]
 8027a1e:	429a      	cmp	r2, r3
 8027a20:	d3f0      	bcc.n	8027a04 <calculate_crc16+0x18>

    crc = update_crc16(crc, 0);
 8027a22:	68fb      	ldr	r3, [r7, #12]
 8027a24:	b29b      	uxth	r3, r3
 8027a26:	2100      	movs	r1, #0
 8027a28:	4618      	mov	r0, r3
 8027a2a:	f7ff ffab 	bl	8027984 <update_crc16>
 8027a2e:	4603      	mov	r3, r0
 8027a30:	60fb      	str	r3, [r7, #12]
    crc = update_crc16(crc, 0);
 8027a32:	68fb      	ldr	r3, [r7, #12]
 8027a34:	b29b      	uxth	r3, r3
 8027a36:	2100      	movs	r1, #0
 8027a38:	4618      	mov	r0, r3
 8027a3a:	f7ff ffa3 	bl	8027984 <update_crc16>
 8027a3e:	4603      	mov	r3, r0
 8027a40:	60fb      	str	r3, [r7, #12]

    return crc & 0xffffu;
 8027a42:	68fb      	ldr	r3, [r7, #12]
 8027a44:	b29b      	uxth	r3, r3
}
 8027a46:	4618      	mov	r0, r3
 8027a48:	3710      	adds	r7, #16
 8027a4a:	46bd      	mov	sp, r7
 8027a4c:	bd80      	pop	{r7, pc}

08027a4e <ymodem_receive>:
 * @brief Receive a file using the ymodem protocol with CRC16
 * @param handle Pointer to YMODEM handle
 * @param data_callback Callback function to process received data
 * @return COM_StatusTypeDef result of reception
 */
COM_StatusTypeDef ymodem_receive(ymodem_handle_t *handle, ymodem_data_callback_t data_callback) {
 8027a4e:	b580      	push	{r7, lr}
 8027a50:	b092      	sub	sp, #72	@ 0x48
 8027a52:	af00      	add	r7, sp, #0
 8027a54:	6078      	str	r0, [r7, #4]
 8027a56:	6039      	str	r1, [r7, #0]
    uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0, packets_received = 0, bytes_received = 0;
 8027a58:	2300      	movs	r3, #0
 8027a5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8027a5c:	2300      	movs	r3, #0
 8027a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8027a60:	2300      	movs	r3, #0
 8027a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8027a64:	2300      	movs	r3, #0
 8027a66:	633b      	str	r3, [r7, #48]	@ 0x30
 8027a68:	2300      	movs	r3, #0
 8027a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t filesize;
    uint8_t *file_ptr, *data_ptr;
    uint8_t file_size[FILE_SIZE_LENGTH];
    COM_StatusTypeDef result = COM_OK;
 8027a6c:	2300      	movs	r3, #0
 8027a6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (handle == NULL || data_callback == NULL) {
 8027a72:	687b      	ldr	r3, [r7, #4]
 8027a74:	2b00      	cmp	r3, #0
 8027a76:	d002      	beq.n	8027a7e <ymodem_receive+0x30>
 8027a78:	683b      	ldr	r3, [r7, #0]
 8027a7a:	2b00      	cmp	r3, #0
 8027a7c:	d101      	bne.n	8027a82 <ymodem_receive+0x34>
        return COM_ERROR;
 8027a7e:	2301      	movs	r3, #1
 8027a80:	e12d      	b.n	8027cde <ymodem_receive+0x290>
    }

    // Reset transfer state
    handle->file_size = 0;
 8027a82:	687b      	ldr	r3, [r7, #4]
 8027a84:	2200      	movs	r2, #0
 8027a86:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
    handle->bytes_transferred = 0;
 8027a8a:	687b      	ldr	r3, [r7, #4]
 8027a8c:	2200      	movs	r2, #0
 8027a8e:	f8c3 2454 	str.w	r2, [r3, #1108]	@ 0x454
    memset(handle->filename, 0, FILE_NAME_LENGTH);
 8027a92:	687b      	ldr	r3, [r7, #4]
 8027a94:	3308      	adds	r3, #8
 8027a96:	2240      	movs	r2, #64	@ 0x40
 8027a98:	2100      	movs	r1, #0
 8027a9a:	4618      	mov	r0, r3
 8027a9c:	f004 f8cc 	bl	802bc38 <memset>

    while ((session_done == 0) && (result == COM_OK)) {
 8027aa0:	e113      	b.n	8027cca <ymodem_receive+0x27c>
        packets_received = 0;
 8027aa2:	2300      	movs	r3, #0
 8027aa4:	633b      	str	r3, [r7, #48]	@ 0x30
        file_done = 0;
 8027aa6:	2300      	movs	r3, #0
 8027aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        while ((file_done == 0) && (result == COM_OK)) {
 8027aaa:	e106      	b.n	8027cba <ymodem_receive+0x26c>
            switch (receive_packet(handle, handle->packet_data, &packet_length, DOWNLOAD_TIMEOUT)) {
 8027aac:	687b      	ldr	r3, [r7, #4]
 8027aae:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8027ab2:	f107 021c 	add.w	r2, r7, #28
 8027ab6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8027aba:	6878      	ldr	r0, [r7, #4]
 8027abc:	f7ff fe90 	bl	80277e0 <receive_packet>
 8027ac0:	4603      	mov	r3, r0
 8027ac2:	2b00      	cmp	r3, #0
 8027ac4:	d003      	beq.n	8027ace <ymodem_receive+0x80>
 8027ac6:	2b02      	cmp	r3, #2
 8027ac8:	f000 80d1 	beq.w	8027c6e <ymodem_receive+0x220>
 8027acc:	e0db      	b.n	8027c86 <ymodem_receive+0x238>
                case COM_OK:
                    errors = 0;
 8027ace:	2300      	movs	r3, #0
 8027ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
                    switch (packet_length) {
 8027ad2:	69fb      	ldr	r3, [r7, #28]
 8027ad4:	2b00      	cmp	r3, #0
 8027ad6:	d009      	beq.n	8027aec <ymodem_receive+0x9e>
 8027ad8:	2b02      	cmp	r3, #2
 8027ada:	d10e      	bne.n	8027afa <ymodem_receive+0xac>
                        case 2:
                            /* Abort by sender */
                            serial_put_byte(handle, ACK);
 8027adc:	2106      	movs	r1, #6
 8027ade:	6878      	ldr	r0, [r7, #4]
 8027ae0:	f7ff fe64 	bl	80277ac <serial_put_byte>
                            result = COM_ABORT;
 8027ae4:	2302      	movs	r3, #2
 8027ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                            break;
 8027aea:	e0bf      	b.n	8027c6c <ymodem_receive+0x21e>
                        case 0:
                            /* End of transmission */
                            serial_put_byte(handle, ACK);
 8027aec:	2106      	movs	r1, #6
 8027aee:	6878      	ldr	r0, [r7, #4]
 8027af0:	f7ff fe5c 	bl	80277ac <serial_put_byte>
                            file_done = 1;
 8027af4:	2301      	movs	r3, #1
 8027af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            break;
 8027af8:	e0b8      	b.n	8027c6c <ymodem_receive+0x21e>
                        default:
                            /* Normal packet */
                            if (handle->packet_data[PACKET_NUMBER_INDEX] != (0xFFU & packets_received)) {
 8027afa:	687b      	ldr	r3, [r7, #4]
 8027afc:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8027b00:	461a      	mov	r2, r3
 8027b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027b04:	b2db      	uxtb	r3, r3
 8027b06:	429a      	cmp	r2, r3
 8027b08:	d004      	beq.n	8027b14 <ymodem_receive+0xc6>
                                serial_put_byte(handle, NAK);
 8027b0a:	2115      	movs	r1, #21
 8027b0c:	6878      	ldr	r0, [r7, #4]
 8027b0e:	f7ff fe4d 	bl	80277ac <serial_put_byte>
                                    }
                                }
                                packets_received++;
                                session_begin = 1;
                            }
                            break;
 8027b12:	e0aa      	b.n	8027c6a <ymodem_receive+0x21c>
                                if (packets_received == 0) {
 8027b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027b16:	2b00      	cmp	r3, #0
 8027b18:	d16a      	bne.n	8027bf0 <ymodem_receive+0x1a2>
                                    if (handle->packet_data[PACKET_DATA_INDEX] != 0) {
 8027b1a:	687b      	ldr	r3, [r7, #4]
 8027b1c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8027b20:	2b00      	cmp	r3, #0
 8027b22:	d05c      	beq.n	8027bde <ymodem_receive+0x190>
                                        i = 0;
 8027b24:	2300      	movs	r3, #0
 8027b26:	647b      	str	r3, [r7, #68]	@ 0x44
                                        file_ptr = handle->packet_data + PACKET_DATA_INDEX;
 8027b28:	687b      	ldr	r3, [r7, #4]
 8027b2a:	3348      	adds	r3, #72	@ 0x48
 8027b2c:	3304      	adds	r3, #4
 8027b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
                                        while ((*file_ptr != 0) && (i < FILE_NAME_LENGTH)) {
 8027b30:	e00a      	b.n	8027b48 <ymodem_receive+0xfa>
                                            handle->filename[i++] = *file_ptr++;
 8027b32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8027b34:	1c53      	adds	r3, r2, #1
 8027b36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8027b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8027b3a:	1c59      	adds	r1, r3, #1
 8027b3c:	6479      	str	r1, [r7, #68]	@ 0x44
 8027b3e:	7811      	ldrb	r1, [r2, #0]
 8027b40:	687a      	ldr	r2, [r7, #4]
 8027b42:	4413      	add	r3, r2
 8027b44:	460a      	mov	r2, r1
 8027b46:	721a      	strb	r2, [r3, #8]
                                        while ((*file_ptr != 0) && (i < FILE_NAME_LENGTH)) {
 8027b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027b4a:	781b      	ldrb	r3, [r3, #0]
 8027b4c:	2b00      	cmp	r3, #0
 8027b4e:	d002      	beq.n	8027b56 <ymodem_receive+0x108>
 8027b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8027b52:	2b3f      	cmp	r3, #63	@ 0x3f
 8027b54:	d9ed      	bls.n	8027b32 <ymodem_receive+0xe4>
                                        handle->filename[i] = '\0';
 8027b56:	687a      	ldr	r2, [r7, #4]
 8027b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8027b5a:	4413      	add	r3, r2
 8027b5c:	3308      	adds	r3, #8
 8027b5e:	2200      	movs	r2, #0
 8027b60:	701a      	strb	r2, [r3, #0]
                                        i = 0;
 8027b62:	2300      	movs	r3, #0
 8027b64:	647b      	str	r3, [r7, #68]	@ 0x44
                                        file_ptr++;
 8027b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027b68:	3301      	adds	r3, #1
 8027b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
                                        while ((*file_ptr != ' ') && (i < FILE_SIZE_LENGTH)) {
 8027b6c:	e00a      	b.n	8027b84 <ymodem_receive+0x136>
                                            file_size[i++] = *file_ptr++;
 8027b6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8027b70:	1c53      	adds	r3, r2, #1
 8027b72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8027b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8027b76:	1c59      	adds	r1, r3, #1
 8027b78:	6479      	str	r1, [r7, #68]	@ 0x44
 8027b7a:	7812      	ldrb	r2, [r2, #0]
 8027b7c:	3348      	adds	r3, #72	@ 0x48
 8027b7e:	443b      	add	r3, r7
 8027b80:	f803 2c40 	strb.w	r2, [r3, #-64]
                                        while ((*file_ptr != ' ') && (i < FILE_SIZE_LENGTH)) {
 8027b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027b86:	781b      	ldrb	r3, [r3, #0]
 8027b88:	2b20      	cmp	r3, #32
 8027b8a:	d002      	beq.n	8027b92 <ymodem_receive+0x144>
 8027b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8027b8e:	2b0f      	cmp	r3, #15
 8027b90:	d9ed      	bls.n	8027b6e <ymodem_receive+0x120>
                                        file_size[i] = '\0';
 8027b92:	f107 0208 	add.w	r2, r7, #8
 8027b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8027b98:	4413      	add	r3, r2
 8027b9a:	2200      	movs	r2, #0
 8027b9c:	701a      	strb	r2, [r3, #0]
                                        if (string_to_uint32(file_size, &filesize) != COM_OK) {
 8027b9e:	f107 0218 	add.w	r2, r7, #24
 8027ba2:	f107 0308 	add.w	r3, r7, #8
 8027ba6:	4611      	mov	r1, r2
 8027ba8:	4618      	mov	r0, r3
 8027baa:	f7ff fd97 	bl	80276dc <string_to_uint32>
 8027bae:	4603      	mov	r3, r0
 8027bb0:	2b00      	cmp	r3, #0
 8027bb2:	d003      	beq.n	8027bbc <ymodem_receive+0x16e>
                                            result = COM_ERROR;
 8027bb4:	2301      	movs	r3, #1
 8027bb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                            break;
 8027bba:	e057      	b.n	8027c6c <ymodem_receive+0x21e>
                                        handle->file_size = filesize;
 8027bbc:	69ba      	ldr	r2, [r7, #24]
 8027bbe:	687b      	ldr	r3, [r7, #4]
 8027bc0:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
                                        handle->bytes_transferred = 0;
 8027bc4:	687b      	ldr	r3, [r7, #4]
 8027bc6:	2200      	movs	r2, #0
 8027bc8:	f8c3 2454 	str.w	r2, [r3, #1108]	@ 0x454
                                        serial_put_byte(handle, ACK);
 8027bcc:	2106      	movs	r1, #6
 8027bce:	6878      	ldr	r0, [r7, #4]
 8027bd0:	f7ff fdec 	bl	80277ac <serial_put_byte>
                                        serial_put_byte(handle, CRC16);
 8027bd4:	2143      	movs	r1, #67	@ 0x43
 8027bd6:	6878      	ldr	r0, [r7, #4]
 8027bd8:	f7ff fde8 	bl	80277ac <serial_put_byte>
 8027bdc:	e040      	b.n	8027c60 <ymodem_receive+0x212>
                                        serial_put_byte(handle, ACK);
 8027bde:	2106      	movs	r1, #6
 8027be0:	6878      	ldr	r0, [r7, #4]
 8027be2:	f7ff fde3 	bl	80277ac <serial_put_byte>
                                        file_done = 1;
 8027be6:	2301      	movs	r3, #1
 8027be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                        session_done = 1;
 8027bea:	2301      	movs	r3, #1
 8027bec:	643b      	str	r3, [r7, #64]	@ 0x40
                                        break;
 8027bee:	e03d      	b.n	8027c6c <ymodem_receive+0x21e>
                                    data_ptr = (uint8_t*)&handle->packet_data[PACKET_DATA_INDEX];
 8027bf0:	687b      	ldr	r3, [r7, #4]
 8027bf2:	334c      	adds	r3, #76	@ 0x4c
 8027bf4:	623b      	str	r3, [r7, #32]
                                    if ((handle->file_size - bytes_received) < 1024) {
 8027bf6:	687b      	ldr	r3, [r7, #4]
 8027bf8:	f8d3 2450 	ldr.w	r2, [r3, #1104]	@ 0x450
 8027bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027bfe:	1ad3      	subs	r3, r2, r3
 8027c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8027c04:	d20a      	bcs.n	8027c1c <ymodem_receive+0x1ce>
                                        while (data_ptr[packet_length - 1] == '\x1A') {
 8027c06:	e002      	b.n	8027c0e <ymodem_receive+0x1c0>
                                            packet_length--;
 8027c08:	69fb      	ldr	r3, [r7, #28]
 8027c0a:	3b01      	subs	r3, #1
 8027c0c:	61fb      	str	r3, [r7, #28]
                                        while (data_ptr[packet_length - 1] == '\x1A') {
 8027c0e:	69fb      	ldr	r3, [r7, #28]
 8027c10:	3b01      	subs	r3, #1
 8027c12:	6a3a      	ldr	r2, [r7, #32]
 8027c14:	4413      	add	r3, r2
 8027c16:	781b      	ldrb	r3, [r3, #0]
 8027c18:	2b1a      	cmp	r3, #26
 8027c1a:	d0f5      	beq.n	8027c08 <ymodem_receive+0x1ba>
                                    bytes_received += packet_length;
 8027c1c:	69fb      	ldr	r3, [r7, #28]
 8027c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8027c20:	4413      	add	r3, r2
 8027c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                    handle->bytes_transferred = bytes_received;
 8027c24:	687b      	ldr	r3, [r7, #4]
 8027c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8027c28:	f8c3 2454 	str.w	r2, [r3, #1108]	@ 0x454
                                    if (data_callback(data_ptr, packet_length, bytes_received - packet_length) == COM_OK) {
 8027c2c:	69f9      	ldr	r1, [r7, #28]
 8027c2e:	69fb      	ldr	r3, [r7, #28]
 8027c30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8027c32:	1ad2      	subs	r2, r2, r3
 8027c34:	683b      	ldr	r3, [r7, #0]
 8027c36:	6a38      	ldr	r0, [r7, #32]
 8027c38:	4798      	blx	r3
 8027c3a:	4603      	mov	r3, r0
 8027c3c:	2b00      	cmp	r3, #0
 8027c3e:	d104      	bne.n	8027c4a <ymodem_receive+0x1fc>
                                        serial_put_byte(handle, ACK);
 8027c40:	2106      	movs	r1, #6
 8027c42:	6878      	ldr	r0, [r7, #4]
 8027c44:	f7ff fdb2 	bl	80277ac <serial_put_byte>
 8027c48:	e00a      	b.n	8027c60 <ymodem_receive+0x212>
                                        serial_put_byte(handle, CA);
 8027c4a:	2118      	movs	r1, #24
 8027c4c:	6878      	ldr	r0, [r7, #4]
 8027c4e:	f7ff fdad 	bl	80277ac <serial_put_byte>
                                        serial_put_byte(handle, CA);
 8027c52:	2118      	movs	r1, #24
 8027c54:	6878      	ldr	r0, [r7, #4]
 8027c56:	f7ff fda9 	bl	80277ac <serial_put_byte>
                                        result = COM_DATA;
 8027c5a:	2304      	movs	r3, #4
 8027c5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                packets_received++;
 8027c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027c62:	3301      	adds	r3, #1
 8027c64:	633b      	str	r3, [r7, #48]	@ 0x30
                                session_begin = 1;
 8027c66:	2301      	movs	r3, #1
 8027c68:	637b      	str	r3, [r7, #52]	@ 0x34
                            break;
 8027c6a:	bf00      	nop
                    }
                    break;
 8027c6c:	e025      	b.n	8027cba <ymodem_receive+0x26c>
                case COM_ABORT: /* Abort actually */
                    serial_put_byte(handle, CA);
 8027c6e:	2118      	movs	r1, #24
 8027c70:	6878      	ldr	r0, [r7, #4]
 8027c72:	f7ff fd9b 	bl	80277ac <serial_put_byte>
                    serial_put_byte(handle, CA);
 8027c76:	2118      	movs	r1, #24
 8027c78:	6878      	ldr	r0, [r7, #4]
 8027c7a:	f7ff fd97 	bl	80277ac <serial_put_byte>
                    result = COM_ABORT;
 8027c7e:	2302      	movs	r3, #2
 8027c80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    break;
 8027c84:	e019      	b.n	8027cba <ymodem_receive+0x26c>
                default:
                    if (session_begin > 0) {
 8027c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027c88:	2b00      	cmp	r3, #0
 8027c8a:	d002      	beq.n	8027c92 <ymodem_receive+0x244>
                        errors++;
 8027c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c8e:	3301      	adds	r3, #1
 8027c90:	63bb      	str	r3, [r7, #56]	@ 0x38
                    }
                    if (errors > MAX_ERRORS) {
 8027c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c94:	2b05      	cmp	r3, #5
 8027c96:	d90b      	bls.n	8027cb0 <ymodem_receive+0x262>
                        /* Abort communication */
                        serial_put_byte(handle, CA);
 8027c98:	2118      	movs	r1, #24
 8027c9a:	6878      	ldr	r0, [r7, #4]
 8027c9c:	f7ff fd86 	bl	80277ac <serial_put_byte>
                        serial_put_byte(handle, CA);
 8027ca0:	2118      	movs	r1, #24
 8027ca2:	6878      	ldr	r0, [r7, #4]
 8027ca4:	f7ff fd82 	bl	80277ac <serial_put_byte>
                        result = COM_ERROR;
 8027ca8:	2301      	movs	r3, #1
 8027caa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    } else {
                        serial_put_byte(handle, CRC16); /* Ask for a packet */
                    }
                    break;
 8027cae:	e003      	b.n	8027cb8 <ymodem_receive+0x26a>
                        serial_put_byte(handle, CRC16); /* Ask for a packet */
 8027cb0:	2143      	movs	r1, #67	@ 0x43
 8027cb2:	6878      	ldr	r0, [r7, #4]
 8027cb4:	f7ff fd7a 	bl	80277ac <serial_put_byte>
                    break;
 8027cb8:	bf00      	nop
        while ((file_done == 0) && (result == COM_OK)) {
 8027cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8027cbc:	2b00      	cmp	r3, #0
 8027cbe:	d104      	bne.n	8027cca <ymodem_receive+0x27c>
 8027cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8027cc4:	2b00      	cmp	r3, #0
 8027cc6:	f43f aef1 	beq.w	8027aac <ymodem_receive+0x5e>
    while ((session_done == 0) && (result == COM_OK)) {
 8027cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027ccc:	2b00      	cmp	r3, #0
 8027cce:	d104      	bne.n	8027cda <ymodem_receive+0x28c>
 8027cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8027cd4:	2b00      	cmp	r3, #0
 8027cd6:	f43f aee4 	beq.w	8027aa2 <ymodem_receive+0x54>
            }
        }
    }
    return result;
 8027cda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8027cde:	4618      	mov	r0, r3
 8027ce0:	3748      	adds	r7, #72	@ 0x48
 8027ce2:	46bd      	mov	sp, r7
 8027ce4:	bd80      	pop	{r7, pc}
	...

08027ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8027ce8:	b580      	push	{r7, lr}
 8027cea:	b082      	sub	sp, #8
 8027cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8027cee:	2300      	movs	r3, #0
 8027cf0:	607b      	str	r3, [r7, #4]
 8027cf2:	4b10      	ldr	r3, [pc, #64]	@ (8027d34 <MX_DMA_Init+0x4c>)
 8027cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8027cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8027d34 <MX_DMA_Init+0x4c>)
 8027cf8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8027cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8027cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8027d34 <MX_DMA_Init+0x4c>)
 8027d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8027d02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8027d06:	607b      	str	r3, [r7, #4]
 8027d08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8027d0a:	2200      	movs	r2, #0
 8027d0c:	2100      	movs	r1, #0
 8027d0e:	2010      	movs	r0, #16
 8027d10:	f000 fe5d 	bl	80289ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8027d14:	2010      	movs	r0, #16
 8027d16:	f000 fe76 	bl	8028a06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8027d1a:	2200      	movs	r2, #0
 8027d1c:	2100      	movs	r1, #0
 8027d1e:	2011      	movs	r0, #17
 8027d20:	f000 fe55 	bl	80289ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8027d24:	2011      	movs	r0, #17
 8027d26:	f000 fe6e 	bl	8028a06 <HAL_NVIC_EnableIRQ>

}
 8027d2a:	bf00      	nop
 8027d2c:	3708      	adds	r7, #8
 8027d2e:	46bd      	mov	sp, r7
 8027d30:	bd80      	pop	{r7, pc}
 8027d32:	bf00      	nop
 8027d34:	40023800 	.word	0x40023800

08027d38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8027d38:	b580      	push	{r7, lr}
 8027d3a:	b088      	sub	sp, #32
 8027d3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8027d3e:	f107 030c 	add.w	r3, r7, #12
 8027d42:	2200      	movs	r2, #0
 8027d44:	601a      	str	r2, [r3, #0]
 8027d46:	605a      	str	r2, [r3, #4]
 8027d48:	609a      	str	r2, [r3, #8]
 8027d4a:	60da      	str	r2, [r3, #12]
 8027d4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8027d4e:	2300      	movs	r3, #0
 8027d50:	60bb      	str	r3, [r7, #8]
 8027d52:	4b20      	ldr	r3, [pc, #128]	@ (8027dd4 <MX_GPIO_Init+0x9c>)
 8027d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8027d56:	4a1f      	ldr	r2, [pc, #124]	@ (8027dd4 <MX_GPIO_Init+0x9c>)
 8027d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8027d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8027d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8027dd4 <MX_GPIO_Init+0x9c>)
 8027d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8027d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8027d66:	60bb      	str	r3, [r7, #8]
 8027d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8027d6a:	2300      	movs	r3, #0
 8027d6c:	607b      	str	r3, [r7, #4]
 8027d6e:	4b19      	ldr	r3, [pc, #100]	@ (8027dd4 <MX_GPIO_Init+0x9c>)
 8027d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8027d72:	4a18      	ldr	r2, [pc, #96]	@ (8027dd4 <MX_GPIO_Init+0x9c>)
 8027d74:	f043 0301 	orr.w	r3, r3, #1
 8027d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8027d7a:	4b16      	ldr	r3, [pc, #88]	@ (8027dd4 <MX_GPIO_Init+0x9c>)
 8027d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8027d7e:	f003 0301 	and.w	r3, r3, #1
 8027d82:	607b      	str	r3, [r7, #4]
 8027d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8027d86:	2300      	movs	r3, #0
 8027d88:	603b      	str	r3, [r7, #0]
 8027d8a:	4b12      	ldr	r3, [pc, #72]	@ (8027dd4 <MX_GPIO_Init+0x9c>)
 8027d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8027d8e:	4a11      	ldr	r2, [pc, #68]	@ (8027dd4 <MX_GPIO_Init+0x9c>)
 8027d90:	f043 0308 	orr.w	r3, r3, #8
 8027d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8027d96:	4b0f      	ldr	r3, [pc, #60]	@ (8027dd4 <MX_GPIO_Init+0x9c>)
 8027d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8027d9a:	f003 0308 	and.w	r3, r3, #8
 8027d9e:	603b      	str	r3, [r7, #0]
 8027da0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8027da2:	2200      	movs	r2, #0
 8027da4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8027da8:	480b      	ldr	r0, [pc, #44]	@ (8027dd8 <MX_GPIO_Init+0xa0>)
 8027daa:	f001 fe33 	bl	8029a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8027dae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8027db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8027db4:	2301      	movs	r3, #1
 8027db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8027db8:	2300      	movs	r3, #0
 8027dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8027dbc:	2300      	movs	r3, #0
 8027dbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8027dc0:	f107 030c 	add.w	r3, r7, #12
 8027dc4:	4619      	mov	r1, r3
 8027dc6:	4804      	ldr	r0, [pc, #16]	@ (8027dd8 <MX_GPIO_Init+0xa0>)
 8027dc8:	f001 fc88 	bl	80296dc <HAL_GPIO_Init>

}
 8027dcc:	bf00      	nop
 8027dce:	3720      	adds	r7, #32
 8027dd0:	46bd      	mov	sp, r7
 8027dd2:	bd80      	pop	{r7, pc}
 8027dd4:	40023800 	.word	0x40023800
 8027dd8:	40020c00 	.word	0x40020c00

08027ddc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8027ddc:	b480      	push	{r7}
 8027dde:	b083      	sub	sp, #12
 8027de0:	af00      	add	r7, sp, #0
 8027de2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8027de4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8027de8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8027dec:	f003 0301 	and.w	r3, r3, #1
 8027df0:	2b00      	cmp	r3, #0
 8027df2:	d013      	beq.n	8027e1c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8027df4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8027df8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8027dfc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8027e00:	2b00      	cmp	r3, #0
 8027e02:	d00b      	beq.n	8027e1c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8027e04:	e000      	b.n	8027e08 <ITM_SendChar+0x2c>
    {
      __NOP();
 8027e06:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8027e08:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8027e0c:	681b      	ldr	r3, [r3, #0]
 8027e0e:	2b00      	cmp	r3, #0
 8027e10:	d0f9      	beq.n	8027e06 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8027e12:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8027e16:	687a      	ldr	r2, [r7, #4]
 8027e18:	b2d2      	uxtb	r2, r2
 8027e1a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8027e1c:	687b      	ldr	r3, [r7, #4]
}
 8027e1e:	4618      	mov	r0, r3
 8027e20:	370c      	adds	r7, #12
 8027e22:	46bd      	mov	sp, r7
 8027e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e28:	4770      	bx	lr

08027e2a <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8027e2a:	b580      	push	{r7, lr}
 8027e2c:	b082      	sub	sp, #8
 8027e2e:	af00      	add	r7, sp, #0
 8027e30:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8027e32:	687b      	ldr	r3, [r7, #4]
 8027e34:	4618      	mov	r0, r3
 8027e36:	f7ff ffd1 	bl	8027ddc <ITM_SendChar>

	return ch;
 8027e3a:	687b      	ldr	r3, [r7, #4]
}
 8027e3c:	4618      	mov	r0, r3
 8027e3e:	3708      	adds	r7, #8
 8027e40:	46bd      	mov	sp, r7
 8027e42:	bd80      	pop	{r7, pc}

08027e44 <uart_read>:


// User-provided read function (example for UART)
COM_StatusTypeDef uart_read(uint8_t *data, size_t size, uint32_t timeout_ms) {
 8027e44:	b580      	push	{r7, lr}
 8027e46:	b084      	sub	sp, #16
 8027e48:	af00      	add	r7, sp, #0
 8027e4a:	60f8      	str	r0, [r7, #12]
 8027e4c:	60b9      	str	r1, [r7, #8]
 8027e4e:	607a      	str	r2, [r7, #4]
	return HAL_UART_Receive(&huart2, data, size, timeout_ms);
 8027e50:	68bb      	ldr	r3, [r7, #8]
 8027e52:	b29a      	uxth	r2, r3
 8027e54:	687b      	ldr	r3, [r7, #4]
 8027e56:	68f9      	ldr	r1, [r7, #12]
 8027e58:	4803      	ldr	r0, [pc, #12]	@ (8027e68 <uart_read+0x24>)
 8027e5a:	f002 fbd6 	bl	802a60a <HAL_UART_Receive>
 8027e5e:	4603      	mov	r3, r0

}
 8027e60:	4618      	mov	r0, r3
 8027e62:	3710      	adds	r7, #16
 8027e64:	46bd      	mov	sp, r7
 8027e66:	bd80      	pop	{r7, pc}
 8027e68:	200012a4 	.word	0x200012a4

08027e6c <uart_write>:

// User-provided write function (example for UART)
COM_StatusTypeDef uart_write(const uint8_t *data, size_t size) {
 8027e6c:	b580      	push	{r7, lr}
 8027e6e:	b082      	sub	sp, #8
 8027e70:	af00      	add	r7, sp, #0
 8027e72:	6078      	str	r0, [r7, #4]
 8027e74:	6039      	str	r1, [r7, #0]

	return HAL_UART_Transmit(&huart2, data, size, 2000);
 8027e76:	683b      	ldr	r3, [r7, #0]
 8027e78:	b29a      	uxth	r2, r3
 8027e7a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8027e7e:	6879      	ldr	r1, [r7, #4]
 8027e80:	4803      	ldr	r0, [pc, #12]	@ (8027e90 <uart_write+0x24>)
 8027e82:	f002 fb37 	bl	802a4f4 <HAL_UART_Transmit>
 8027e86:	4603      	mov	r3, r0

}
 8027e88:	4618      	mov	r0, r3
 8027e8a:	3708      	adds	r7, #8
 8027e8c:	46bd      	mov	sp, r7
 8027e8e:	bd80      	pop	{r7, pc}
 8027e90:	200012a4 	.word	0x200012a4

08027e94 <data_callback>:

// User data callback to process received data
COM_StatusTypeDef data_callback(uint8_t *data, size_t length, uint32_t offset) {
 8027e94:	b580      	push	{r7, lr}
 8027e96:	b086      	sub	sp, #24
 8027e98:	af00      	add	r7, sp, #0
 8027e9a:	60f8      	str	r0, [r7, #12]
 8027e9c:	60b9      	str	r1, [r7, #8]
 8027e9e:	607a      	str	r2, [r7, #4]

	error_t error;
	//write to flash
	error = updateProcess(&updateContext, data, length);
 8027ea0:	68ba      	ldr	r2, [r7, #8]
 8027ea2:	68f9      	ldr	r1, [r7, #12]
 8027ea4:	4805      	ldr	r0, [pc, #20]	@ (8027ebc <data_callback+0x28>)
 8027ea6:	f7fb f817 	bl	8022ed8 <updateProcess>
 8027eaa:	4603      	mov	r3, r0
 8027eac:	82fb      	strh	r3, [r7, #22]

	return error;
 8027eae:	8afb      	ldrh	r3, [r7, #22]
 8027eb0:	b2db      	uxtb	r3, r3
}
 8027eb2:	4618      	mov	r0, r3
 8027eb4:	3718      	adds	r7, #24
 8027eb6:	46bd      	mov	sp, r7
 8027eb8:	bd80      	pop	{r7, pc}
 8027eba:	bf00      	nop
 8027ebc:	200005e4 	.word	0x200005e4

08027ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8027ec0:	b580      	push	{r7, lr}
 8027ec2:	b082      	sub	sp, #8
 8027ec4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8027ec6:	f000 fc11 	bl	80286ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8027eca:	f000 f917 	bl	80280fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8027ece:	f7ff ff33 	bl	8027d38 <MX_GPIO_Init>
  MX_DMA_Init();
 8027ed2:	f7ff ff09 	bl	8027ce8 <MX_DMA_Init>
  MX_RNG_Init();
 8027ed6:	f000 f981 	bl	80281dc <MX_RNG_Init>
  MX_USART2_UART_Init();
 8027eda:	f000 faff 	bl	80284dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  for(uint8_t i = 0; i < 15; i++)
 8027ede:	2300      	movs	r3, #0
 8027ee0:	71fb      	strb	r3, [r7, #7]
 8027ee2:	e00b      	b.n	8027efc <main+0x3c>
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8027ee4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8027ee8:	486a      	ldr	r0, [pc, #424]	@ (8028094 <main+0x1d4>)
 8027eea:	f001 fdac 	bl	8029a46 <HAL_GPIO_TogglePin>
	  HAL_Delay(400);
 8027eee:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8027ef2:	f000 fc6d 	bl	80287d0 <HAL_Delay>
  for(uint8_t i = 0; i < 15; i++)
 8027ef6:	79fb      	ldrb	r3, [r7, #7]
 8027ef8:	3301      	adds	r3, #1
 8027efa:	71fb      	strb	r3, [r7, #7]
 8027efc:	79fb      	ldrb	r3, [r7, #7]
 8027efe:	2b0e      	cmp	r3, #14
 8027f00:	d9f0      	bls.n	8027ee4 <main+0x24>
  }
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8027f02:	2201      	movs	r2, #1
 8027f04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8027f08:	4862      	ldr	r0, [pc, #392]	@ (8028094 <main+0x1d4>)
 8027f0a:	f001 fd83 	bl	8029a14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8027f0e:	2201      	movs	r2, #1
 8027f10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8027f14:	485f      	ldr	r0, [pc, #380]	@ (8028094 <main+0x1d4>)
 8027f16:	f001 fd7d 	bl	8029a14 <HAL_GPIO_WritePin>
//	printf("user application started...\r\n!");
//
//	COM_StatusTypeDef result;
//
//	// Initialize YMODEM with user I/O functions
	ymodem_init(&ymodem, uart_read, uart_write);
 8027f1a:	4a5f      	ldr	r2, [pc, #380]	@ (8028098 <main+0x1d8>)
 8027f1c:	495f      	ldr	r1, [pc, #380]	@ (802809c <main+0x1dc>)
 8027f1e:	4860      	ldr	r0, [pc, #384]	@ (80280a0 <main+0x1e0>)
 8027f20:	f7ff fc19 	bl	8027756 <ymodem_init>
//	}
//	else
//	{
//		printf("not found\r\n");
//	}
	if(resGetData("/keys/rsa_public_key.pem", &pemUpdtSignPublicKey, &pemUpdtSignPublicKeyLen) != NO_ERROR)
 8027f24:	4a5f      	ldr	r2, [pc, #380]	@ (80280a4 <main+0x1e4>)
 8027f26:	4960      	ldr	r1, [pc, #384]	@ (80280a8 <main+0x1e8>)
 8027f28:	4860      	ldr	r0, [pc, #384]	@ (80280ac <main+0x1ec>)
 8027f2a:	f7f8 fd75 	bl	8020a18 <resGetData>
 8027f2e:	4603      	mov	r3, r0
 8027f30:	2b00      	cmp	r3, #0
 8027f32:	d005      	beq.n	8027f40 <main+0x80>
	{
		printf("public key not found!\r\n");
 8027f34:	485e      	ldr	r0, [pc, #376]	@ (80280b0 <main+0x1f0>)
 8027f36:	f003 fd8f 	bl	802ba58 <puts>

		Error_Handler();
 8027f3a:	f000 f949 	bl	80281d0 <Error_Handler>
 8027f3e:	e002      	b.n	8027f46 <main+0x86>
	}
	else
	{
		printf("Public key found!");
 8027f40:	485c      	ldr	r0, [pc, #368]	@ (80280b4 <main+0x1f4>)
 8027f42:	f003 fd21 	bl	802b988 <iprintf>
	}
	//->criptografia
	error = stm32f4xxCryptoInit();
 8027f46:	f7fc fc85 	bl	8024854 <stm32f4xxCryptoInit>
 8027f4a:	4603      	mov	r3, r0
 8027f4c:	80bb      	strh	r3, [r7, #4]
	if(error)
 8027f4e:	88bb      	ldrh	r3, [r7, #4]
 8027f50:	2b00      	cmp	r3, #0
 8027f52:	d004      	beq.n	8027f5e <main+0x9e>
	{
		printf("failed hardware crypto!");
 8027f54:	4858      	ldr	r0, [pc, #352]	@ (80280b8 <main+0x1f8>)
 8027f56:	f003 fd17 	bl	802b988 <iprintf>
		Error_Handler();
 8027f5a:	f000 f939 	bl	80281d0 <Error_Handler>
	}
	//generador de numeros aleatorios
	error = trngInit();
 8027f5e:	f7fc fc95 	bl	802488c <trngInit>
 8027f62:	4603      	mov	r3, r0
 8027f64:	80bb      	strh	r3, [r7, #4]
	if(error)
 8027f66:	88bb      	ldrh	r3, [r7, #4]
 8027f68:	2b00      	cmp	r3, #0
 8027f6a:	d004      	beq.n	8027f76 <main+0xb6>
	{
		printf("failed trng init");
 8027f6c:	4853      	ldr	r0, [pc, #332]	@ (80280bc <main+0x1fc>)
 8027f6e:	f003 fd0b 	bl	802b988 <iprintf>
		Error_Handler();
 8027f72:	f000 f92d 	bl	80281d0 <Error_Handler>
	}

    //User update settings security configuration
    updateSettings.imageInCrypto.verifySettings.verifyMethod    = VERIFY_METHOD_SIGNATURE;
 8027f76:	4b52      	ldr	r3, [pc, #328]	@ (80280c0 <main+0x200>)
 8027f78:	2202      	movs	r2, #2
 8027f7a:	741a      	strb	r2, [r3, #16]
    updateSettings.imageInCrypto.verifySettings.signAlgo        = VERIFY_SIGN_RSA;
 8027f7c:	4b50      	ldr	r3, [pc, #320]	@ (80280c0 <main+0x200>)
 8027f7e:	2201      	movs	r2, #1
 8027f80:	761a      	strb	r2, [r3, #24]
    updateSettings.imageInCrypto.verifySettings.signHashAlgo    = SHA256_HASH_ALGO;
 8027f82:	4b4f      	ldr	r3, [pc, #316]	@ (80280c0 <main+0x200>)
 8027f84:	4a4f      	ldr	r2, [pc, #316]	@ (80280c4 <main+0x204>)
 8027f86:	61da      	str	r2, [r3, #28]
    updateSettings.imageInCrypto.verifySettings.signKey         = (const char_t*) pemUpdtSignPublicKey;
 8027f88:	4b47      	ldr	r3, [pc, #284]	@ (80280a8 <main+0x1e8>)
 8027f8a:	681b      	ldr	r3, [r3, #0]
 8027f8c:	4a4c      	ldr	r2, [pc, #304]	@ (80280c0 <main+0x200>)
 8027f8e:	6213      	str	r3, [r2, #32]
    updateSettings.imageInCrypto.verifySettings.signKeyLen      = pemUpdtSignPublicKeyLen;
 8027f90:	4b44      	ldr	r3, [pc, #272]	@ (80280a4 <main+0x1e4>)
 8027f92:	681b      	ldr	r3, [r3, #0]
 8027f94:	4a4a      	ldr	r2, [pc, #296]	@ (80280c0 <main+0x200>)
 8027f96:	6253      	str	r3, [r2, #36]	@ 0x24
    updateSettings.imageInCrypto.cipherAlgo                     = AES_CIPHER_ALGO;
 8027f98:	4b49      	ldr	r3, [pc, #292]	@ (80280c0 <main+0x200>)
 8027f9a:	4a4b      	ldr	r2, [pc, #300]	@ (80280c8 <main+0x208>)
 8027f9c:	601a      	str	r2, [r3, #0]
    updateSettings.imageInCrypto.cipherMode                     = CIPHER_MODE_CBC;
 8027f9e:	4b48      	ldr	r3, [pc, #288]	@ (80280c0 <main+0x200>)
 8027fa0:	2203      	movs	r2, #3
 8027fa2:	711a      	strb	r2, [r3, #4]
    updateSettings.imageInCrypto.cipherKey                      = (const uint8_t *)"aa3ff7d43cc015682c7dfd00de9379e7";
 8027fa4:	4b46      	ldr	r3, [pc, #280]	@ (80280c0 <main+0x200>)
 8027fa6:	4a49      	ldr	r2, [pc, #292]	@ (80280cc <main+0x20c>)
 8027fa8:	609a      	str	r2, [r3, #8]
    updateSettings.imageInCrypto.cipherKeyLen                   = 32;
 8027faa:	4b45      	ldr	r3, [pc, #276]	@ (80280c0 <main+0x200>)
 8027fac:	2220      	movs	r2, #32
 8027fae:	60da      	str	r2, [r3, #12]

    //User update settings primary memory configuration
    updateSettings.memories[0].memoryRole 			   = MEMORY_ROLE_PRIMARY;
 8027fb0:	4b43      	ldr	r3, [pc, #268]	@ (80280c0 <main+0x200>)
 8027fb2:	2200      	movs	r2, #0
 8027fb4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    updateSettings.memories[0].memoryType 			   = MEMORY_TYPE_FLASH;
 8027fb8:	4b41      	ldr	r3, [pc, #260]	@ (80280c0 <main+0x200>)
 8027fba:	2200      	movs	r2, #0
 8027fbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    updateSettings.memories[0].driver     			   = &stm32f4xxFlashDriver;
 8027fc0:	4b3f      	ldr	r3, [pc, #252]	@ (80280c0 <main+0x200>)
 8027fc2:	4a43      	ldr	r2, [pc, #268]	@ (80280d0 <main+0x210>)
 8027fc4:	67da      	str	r2, [r3, #124]	@ 0x7c
    updateSettings.memories[0].nbSlots    			   = 2;
 8027fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80280c0 <main+0x200>)
 8027fc8:	2202      	movs	r2, #2
 8027fca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    //User update settings primary memory slot 0 configuration
    updateSettings.memories[0].slots[0].type 		   = SLOT_TYPE_DIRECT;
 8027fce:	4b3c      	ldr	r3, [pc, #240]	@ (80280c0 <main+0x200>)
 8027fd0:	2201      	movs	r2, #1
 8027fd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    updateSettings.memories[0].slots[0].cType 		= SLOT_CONTENT_APP;
 8027fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80280c0 <main+0x200>)
 8027fd8:	2201      	movs	r2, #1
 8027fda:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    updateSettings.memories[0].slots[0].memParent 	= &updateSettings.memories[0];
 8027fde:	4b38      	ldr	r3, [pc, #224]	@ (80280c0 <main+0x200>)
 8027fe0:	4a3c      	ldr	r2, [pc, #240]	@ (80280d4 <main+0x214>)
 8027fe2:	65da      	str	r2, [r3, #92]	@ 0x5c
    updateSettings.memories[0].slots[0].addr 		   = 0x08020000;
 8027fe4:	4b36      	ldr	r3, [pc, #216]	@ (80280c0 <main+0x200>)
 8027fe6:	4a3c      	ldr	r2, [pc, #240]	@ (80280d8 <main+0x218>)
 8027fe8:	661a      	str	r2, [r3, #96]	@ 0x60
    updateSettings.memories[0].slots[0].size 		   = 0x60000; //128x3 = 384kb
 8027fea:	4b35      	ldr	r3, [pc, #212]	@ (80280c0 <main+0x200>)
 8027fec:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8027ff0:	665a      	str	r2, [r3, #100]	@ 0x64

    //User update setting primary memory slot 1 configuration
    updateSettings.memories[0].slots[1].type 		   = SLOT_TYPE_DIRECT;
 8027ff2:	4b33      	ldr	r3, [pc, #204]	@ (80280c0 <main+0x200>)
 8027ff4:	2201      	movs	r2, #1
 8027ff6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    updateSettings.memories[0].slots[1].cType 		= SLOT_CONTENT_APP | SLOT_CONTENT_BACKUP;
 8027ffa:	4b31      	ldr	r3, [pc, #196]	@ (80280c0 <main+0x200>)
 8027ffc:	2205      	movs	r2, #5
 8027ffe:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    updateSettings.memories[0].slots[1].memParent 	= &updateSettings.memories[0];
 8028002:	4b2f      	ldr	r3, [pc, #188]	@ (80280c0 <main+0x200>)
 8028004:	4a33      	ldr	r2, [pc, #204]	@ (80280d4 <main+0x214>)
 8028006:	66da      	str	r2, [r3, #108]	@ 0x6c
    updateSettings.memories[0].slots[1].addr 		   = 0x08080000;
 8028008:	4b2d      	ldr	r3, [pc, #180]	@ (80280c0 <main+0x200>)
 802800a:	4a34      	ldr	r2, [pc, #208]	@ (80280dc <main+0x21c>)
 802800c:	671a      	str	r2, [r3, #112]	@ 0x70
    updateSettings.memories[0].slots[1].size 		   = 0x60000;	//128x3 = 384kb
 802800e:	4b2c      	ldr	r3, [pc, #176]	@ (80280c0 <main+0x200>)
 8028010:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8028014:	675a      	str	r2, [r3, #116]	@ 0x74

    //Initialize IAP update context
    cerror = updateInit(&updateContext, &updateSettings);
 8028016:	492a      	ldr	r1, [pc, #168]	@ (80280c0 <main+0x200>)
 8028018:	4831      	ldr	r0, [pc, #196]	@ (80280e0 <main+0x220>)
 802801a:	f7fa feb7 	bl	8022d8c <updateInit>
 802801e:	4603      	mov	r3, r0
 8028020:	70fb      	strb	r3, [r7, #3]

    if(cerror)
 8028022:	78fb      	ldrb	r3, [r7, #3]
 8028024:	2b00      	cmp	r3, #0
 8028026:	d004      	beq.n	8028032 <main+0x172>
    {
    	printf("failed to initialize IAP\r\n"); // in application programming
 8028028:	482e      	ldr	r0, [pc, #184]	@ (80280e4 <main+0x224>)
 802802a:	f003 fd15 	bl	802ba58 <puts>
    	Error_Handler();
 802802e:	f000 f8cf 	bl	80281d0 <Error_Handler>
    }

    printf("Receiving firmware update image...\r\n");
 8028032:	482d      	ldr	r0, [pc, #180]	@ (80280e8 <main+0x228>)
 8028034:	f003 fd10 	bl	802ba58 <puts>

    result = ymodem_receive(&ymodem, data_callback);
 8028038:	492c      	ldr	r1, [pc, #176]	@ (80280ec <main+0x22c>)
 802803a:	4819      	ldr	r0, [pc, #100]	@ (80280a0 <main+0x1e0>)
 802803c:	f7ff fd07 	bl	8027a4e <ymodem_receive>
 8028040:	4603      	mov	r3, r0
 8028042:	70bb      	strb	r3, [r7, #2]

    if(result == COM_OK)
 8028044:	78bb      	ldrb	r3, [r7, #2]
 8028046:	2b00      	cmp	r3, #0
 8028048:	d118      	bne.n	802807c <main+0x1bc>
    {
    	printf("firmware receive ok!");
 802804a:	4829      	ldr	r0, [pc, #164]	@ (80280f0 <main+0x230>)
 802804c:	f003 fc9c 	bl	802b988 <iprintf>

    	cerror = updateFinalize(&updateContext);
 8028050:	4823      	ldr	r0, [pc, #140]	@ (80280e0 <main+0x220>)
 8028052:	f7fa ffbd 	bl	8022fd0 <updateFinalize>
 8028056:	4603      	mov	r3, r0
 8028058:	70fb      	strb	r3, [r7, #3]

    	if(cerror != CBOOT_NO_ERROR)
 802805a:	78fb      	ldrb	r3, [r7, #3]
 802805c:	2b00      	cmp	r3, #0
 802805e:	d002      	beq.n	8028066 <main+0x1a6>
    	{
    		printf("failed to finalize firmware\r\n");
 8028060:	4824      	ldr	r0, [pc, #144]	@ (80280f4 <main+0x234>)
 8028062:	f003 fcf9 	bl	802ba58 <puts>
    	}

    	error = updateReboot(&updateContext);
 8028066:	481e      	ldr	r0, [pc, #120]	@ (80280e0 <main+0x220>)
 8028068:	f7fb f860 	bl	802312c <updateReboot>
 802806c:	4603      	mov	r3, r0
 802806e:	80bb      	strh	r3, [r7, #4]

    	if(cerror != CBOOT_NO_ERROR)
 8028070:	78fb      	ldrb	r3, [r7, #3]
 8028072:	2b00      	cmp	r3, #0
 8028074:	d002      	beq.n	802807c <main+0x1bc>
    	{
    		printf("failed reboot\r\n");
 8028076:	4820      	ldr	r0, [pc, #128]	@ (80280f8 <main+0x238>)
 8028078:	f003 fcee 	bl	802ba58 <puts>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		LED1_GPIO_Port->ODR ^= LED1_Pin;
 802807c:	4b05      	ldr	r3, [pc, #20]	@ (8028094 <main+0x1d4>)
 802807e:	695b      	ldr	r3, [r3, #20]
 8028080:	4a04      	ldr	r2, [pc, #16]	@ (8028094 <main+0x1d4>)
 8028082:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8028086:	6153      	str	r3, [r2, #20]
		HAL_Delay(1000);
 8028088:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 802808c:	f000 fba0 	bl	80287d0 <HAL_Delay>
		LED1_GPIO_Port->ODR ^= LED1_Pin;
 8028090:	bf00      	nop
 8028092:	e7f3      	b.n	802807c <main+0x1bc>
 8028094:	40020c00 	.word	0x40020c00
 8028098:	08027e6d 	.word	0x08027e6d
 802809c:	08027e45 	.word	0x08027e45
 80280a0:	20000100 	.word	0x20000100
 80280a4:	2000055c 	.word	0x2000055c
 80280a8:	20000558 	.word	0x20000558
 80280ac:	0802cc10 	.word	0x0802cc10
 80280b0:	0802cc2c 	.word	0x0802cc2c
 80280b4:	0802cc44 	.word	0x0802cc44
 80280b8:	0802cc58 	.word	0x0802cc58
 80280bc:	0802cc70 	.word	0x0802cc70
 80280c0:	20000560 	.word	0x20000560
 80280c4:	0802e380 	.word	0x0802e380
 80280c8:	0802e184 	.word	0x0802e184
 80280cc:	0802cc84 	.word	0x0802cc84
 80280d0:	0802d72c 	.word	0x0802d72c
 80280d4:	200005b0 	.word	0x200005b0
 80280d8:	08020000 	.word	0x08020000
 80280dc:	08080000 	.word	0x08080000
 80280e0:	200005e4 	.word	0x200005e4
 80280e4:	0802cca8 	.word	0x0802cca8
 80280e8:	0802ccc4 	.word	0x0802ccc4
 80280ec:	08027e95 	.word	0x08027e95
 80280f0:	0802cce8 	.word	0x0802cce8
 80280f4:	0802cd00 	.word	0x0802cd00
 80280f8:	0802cd20 	.word	0x0802cd20

080280fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80280fc:	b580      	push	{r7, lr}
 80280fe:	b094      	sub	sp, #80	@ 0x50
 8028100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8028102:	f107 0320 	add.w	r3, r7, #32
 8028106:	2230      	movs	r2, #48	@ 0x30
 8028108:	2100      	movs	r1, #0
 802810a:	4618      	mov	r0, r3
 802810c:	f003 fd94 	bl	802bc38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8028110:	f107 030c 	add.w	r3, r7, #12
 8028114:	2200      	movs	r2, #0
 8028116:	601a      	str	r2, [r3, #0]
 8028118:	605a      	str	r2, [r3, #4]
 802811a:	609a      	str	r2, [r3, #8]
 802811c:	60da      	str	r2, [r3, #12]
 802811e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8028120:	2300      	movs	r3, #0
 8028122:	60bb      	str	r3, [r7, #8]
 8028124:	4b28      	ldr	r3, [pc, #160]	@ (80281c8 <SystemClock_Config+0xcc>)
 8028126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028128:	4a27      	ldr	r2, [pc, #156]	@ (80281c8 <SystemClock_Config+0xcc>)
 802812a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 802812e:	6413      	str	r3, [r2, #64]	@ 0x40
 8028130:	4b25      	ldr	r3, [pc, #148]	@ (80281c8 <SystemClock_Config+0xcc>)
 8028132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8028138:	60bb      	str	r3, [r7, #8]
 802813a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802813c:	2300      	movs	r3, #0
 802813e:	607b      	str	r3, [r7, #4]
 8028140:	4b22      	ldr	r3, [pc, #136]	@ (80281cc <SystemClock_Config+0xd0>)
 8028142:	681b      	ldr	r3, [r3, #0]
 8028144:	4a21      	ldr	r2, [pc, #132]	@ (80281cc <SystemClock_Config+0xd0>)
 8028146:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 802814a:	6013      	str	r3, [r2, #0]
 802814c:	4b1f      	ldr	r3, [pc, #124]	@ (80281cc <SystemClock_Config+0xd0>)
 802814e:	681b      	ldr	r3, [r3, #0]
 8028150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8028154:	607b      	str	r3, [r7, #4]
 8028156:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8028158:	2302      	movs	r3, #2
 802815a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 802815c:	2301      	movs	r3, #1
 802815e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8028160:	2310      	movs	r3, #16
 8028162:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8028164:	2302      	movs	r3, #2
 8028166:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8028168:	2300      	movs	r3, #0
 802816a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 802816c:	2308      	movs	r3, #8
 802816e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8028170:	23a8      	movs	r3, #168	@ 0xa8
 8028172:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8028174:	2302      	movs	r3, #2
 8028176:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8028178:	2307      	movs	r3, #7
 802817a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802817c:	f107 0320 	add.w	r3, r7, #32
 8028180:	4618      	mov	r0, r3
 8028182:	f001 fc7b 	bl	8029a7c <HAL_RCC_OscConfig>
 8028186:	4603      	mov	r3, r0
 8028188:	2b00      	cmp	r3, #0
 802818a:	d001      	beq.n	8028190 <SystemClock_Config+0x94>
  {
    Error_Handler();
 802818c:	f000 f820 	bl	80281d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8028190:	230f      	movs	r3, #15
 8028192:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8028194:	2302      	movs	r3, #2
 8028196:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8028198:	2300      	movs	r3, #0
 802819a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802819c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80281a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80281a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80281a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80281a8:	f107 030c 	add.w	r3, r7, #12
 80281ac:	2105      	movs	r1, #5
 80281ae:	4618      	mov	r0, r3
 80281b0:	f001 fedc 	bl	8029f6c <HAL_RCC_ClockConfig>
 80281b4:	4603      	mov	r3, r0
 80281b6:	2b00      	cmp	r3, #0
 80281b8:	d001      	beq.n	80281be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80281ba:	f000 f809 	bl	80281d0 <Error_Handler>
  }
}
 80281be:	bf00      	nop
 80281c0:	3750      	adds	r7, #80	@ 0x50
 80281c2:	46bd      	mov	sp, r7
 80281c4:	bd80      	pop	{r7, pc}
 80281c6:	bf00      	nop
 80281c8:	40023800 	.word	0x40023800
 80281cc:	40007000 	.word	0x40007000

080281d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80281d0:	b480      	push	{r7}
 80281d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80281d4:	b672      	cpsid	i
}
 80281d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80281d8:	bf00      	nop
 80281da:	e7fd      	b.n	80281d8 <Error_Handler+0x8>

080281dc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80281dc:	b580      	push	{r7, lr}
 80281de:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80281e0:	4b06      	ldr	r3, [pc, #24]	@ (80281fc <MX_RNG_Init+0x20>)
 80281e2:	4a07      	ldr	r2, [pc, #28]	@ (8028200 <MX_RNG_Init+0x24>)
 80281e4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80281e6:	4805      	ldr	r0, [pc, #20]	@ (80281fc <MX_RNG_Init+0x20>)
 80281e8:	f002 f8e0 	bl	802a3ac <HAL_RNG_Init>
 80281ec:	4603      	mov	r3, r0
 80281ee:	2b00      	cmp	r3, #0
 80281f0:	d001      	beq.n	80281f6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80281f2:	f7ff ffed 	bl	80281d0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80281f6:	bf00      	nop
 80281f8:	bd80      	pop	{r7, pc}
 80281fa:	bf00      	nop
 80281fc:	20001290 	.word	0x20001290
 8028200:	50060800 	.word	0x50060800

08028204 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8028204:	b480      	push	{r7}
 8028206:	b085      	sub	sp, #20
 8028208:	af00      	add	r7, sp, #0
 802820a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 802820c:	687b      	ldr	r3, [r7, #4]
 802820e:	681b      	ldr	r3, [r3, #0]
 8028210:	4a0b      	ldr	r2, [pc, #44]	@ (8028240 <HAL_RNG_MspInit+0x3c>)
 8028212:	4293      	cmp	r3, r2
 8028214:	d10d      	bne.n	8028232 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8028216:	2300      	movs	r3, #0
 8028218:	60fb      	str	r3, [r7, #12]
 802821a:	4b0a      	ldr	r3, [pc, #40]	@ (8028244 <HAL_RNG_MspInit+0x40>)
 802821c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802821e:	4a09      	ldr	r2, [pc, #36]	@ (8028244 <HAL_RNG_MspInit+0x40>)
 8028220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028224:	6353      	str	r3, [r2, #52]	@ 0x34
 8028226:	4b07      	ldr	r3, [pc, #28]	@ (8028244 <HAL_RNG_MspInit+0x40>)
 8028228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802822a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802822e:	60fb      	str	r3, [r7, #12]
 8028230:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8028232:	bf00      	nop
 8028234:	3714      	adds	r7, #20
 8028236:	46bd      	mov	sp, r7
 8028238:	f85d 7b04 	ldr.w	r7, [sp], #4
 802823c:	4770      	bx	lr
 802823e:	bf00      	nop
 8028240:	50060800 	.word	0x50060800
 8028244:	40023800 	.word	0x40023800

08028248 <HAL_RNG_MspDeInit>:

void HAL_RNG_MspDeInit(RNG_HandleTypeDef* rngHandle)
{
 8028248:	b480      	push	{r7}
 802824a:	b083      	sub	sp, #12
 802824c:	af00      	add	r7, sp, #0
 802824e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8028250:	687b      	ldr	r3, [r7, #4]
 8028252:	681b      	ldr	r3, [r3, #0]
 8028254:	4a07      	ldr	r2, [pc, #28]	@ (8028274 <HAL_RNG_MspDeInit+0x2c>)
 8028256:	4293      	cmp	r3, r2
 8028258:	d105      	bne.n	8028266 <HAL_RNG_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 802825a:	4b07      	ldr	r3, [pc, #28]	@ (8028278 <HAL_RNG_MspDeInit+0x30>)
 802825c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802825e:	4a06      	ldr	r2, [pc, #24]	@ (8028278 <HAL_RNG_MspDeInit+0x30>)
 8028260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8028264:	6353      	str	r3, [r2, #52]	@ 0x34
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }
}
 8028266:	bf00      	nop
 8028268:	370c      	adds	r7, #12
 802826a:	46bd      	mov	sp, r7
 802826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028270:	4770      	bx	lr
 8028272:	bf00      	nop
 8028274:	50060800 	.word	0x50060800
 8028278:	40023800 	.word	0x40023800

0802827c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802827c:	b480      	push	{r7}
 802827e:	b083      	sub	sp, #12
 8028280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8028282:	2300      	movs	r3, #0
 8028284:	607b      	str	r3, [r7, #4]
 8028286:	4b10      	ldr	r3, [pc, #64]	@ (80282c8 <HAL_MspInit+0x4c>)
 8028288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802828a:	4a0f      	ldr	r2, [pc, #60]	@ (80282c8 <HAL_MspInit+0x4c>)
 802828c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8028290:	6453      	str	r3, [r2, #68]	@ 0x44
 8028292:	4b0d      	ldr	r3, [pc, #52]	@ (80282c8 <HAL_MspInit+0x4c>)
 8028294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8028296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 802829a:	607b      	str	r3, [r7, #4]
 802829c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802829e:	2300      	movs	r3, #0
 80282a0:	603b      	str	r3, [r7, #0]
 80282a2:	4b09      	ldr	r3, [pc, #36]	@ (80282c8 <HAL_MspInit+0x4c>)
 80282a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80282a6:	4a08      	ldr	r2, [pc, #32]	@ (80282c8 <HAL_MspInit+0x4c>)
 80282a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80282ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80282ae:	4b06      	ldr	r3, [pc, #24]	@ (80282c8 <HAL_MspInit+0x4c>)
 80282b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80282b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80282b6:	603b      	str	r3, [r7, #0]
 80282b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80282ba:	bf00      	nop
 80282bc:	370c      	adds	r7, #12
 80282be:	46bd      	mov	sp, r7
 80282c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80282c4:	4770      	bx	lr
 80282c6:	bf00      	nop
 80282c8:	40023800 	.word	0x40023800

080282cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80282cc:	b480      	push	{r7}
 80282ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80282d0:	bf00      	nop
 80282d2:	e7fd      	b.n	80282d0 <NMI_Handler+0x4>

080282d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80282d4:	b480      	push	{r7}
 80282d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80282d8:	bf00      	nop
 80282da:	e7fd      	b.n	80282d8 <HardFault_Handler+0x4>

080282dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80282dc:	b480      	push	{r7}
 80282de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80282e0:	bf00      	nop
 80282e2:	e7fd      	b.n	80282e0 <MemManage_Handler+0x4>

080282e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80282e4:	b480      	push	{r7}
 80282e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80282e8:	bf00      	nop
 80282ea:	e7fd      	b.n	80282e8 <BusFault_Handler+0x4>

080282ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80282ec:	b480      	push	{r7}
 80282ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80282f0:	bf00      	nop
 80282f2:	e7fd      	b.n	80282f0 <UsageFault_Handler+0x4>

080282f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80282f4:	b480      	push	{r7}
 80282f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80282f8:	bf00      	nop
 80282fa:	46bd      	mov	sp, r7
 80282fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028300:	4770      	bx	lr

08028302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8028302:	b480      	push	{r7}
 8028304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8028306:	bf00      	nop
 8028308:	46bd      	mov	sp, r7
 802830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802830e:	4770      	bx	lr

08028310 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8028310:	b480      	push	{r7}
 8028312:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8028314:	bf00      	nop
 8028316:	46bd      	mov	sp, r7
 8028318:	f85d 7b04 	ldr.w	r7, [sp], #4
 802831c:	4770      	bx	lr

0802831e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802831e:	b580      	push	{r7, lr}
 8028320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8028322:	f000 fa35 	bl	8028790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8028326:	bf00      	nop
 8028328:	bd80      	pop	{r7, pc}
	...

0802832c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 802832c:	b580      	push	{r7, lr}
 802832e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8028330:	4802      	ldr	r0, [pc, #8]	@ (802833c <DMA1_Stream5_IRQHandler+0x10>)
 8028332:	f000 fcc3 	bl	8028cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8028336:	bf00      	nop
 8028338:	bd80      	pop	{r7, pc}
 802833a:	bf00      	nop
 802833c:	200012ec 	.word	0x200012ec

08028340 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8028340:	b580      	push	{r7, lr}
 8028342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8028344:	4802      	ldr	r0, [pc, #8]	@ (8028350 <DMA1_Stream6_IRQHandler+0x10>)
 8028346:	f000 fcb9 	bl	8028cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 802834a:	bf00      	nop
 802834c:	bd80      	pop	{r7, pc}
 802834e:	bf00      	nop
 8028350:	2000134c 	.word	0x2000134c

08028354 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8028354:	b580      	push	{r7, lr}
 8028356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8028358:	4802      	ldr	r0, [pc, #8]	@ (8028364 <USART2_IRQHandler+0x10>)
 802835a:	f002 f9ed 	bl	802a738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 802835e:	bf00      	nop
 8028360:	bd80      	pop	{r7, pc}
 8028362:	bf00      	nop
 8028364:	200012a4 	.word	0x200012a4

08028368 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8028368:	b580      	push	{r7, lr}
 802836a:	b086      	sub	sp, #24
 802836c:	af00      	add	r7, sp, #0
 802836e:	60f8      	str	r0, [r7, #12]
 8028370:	60b9      	str	r1, [r7, #8]
 8028372:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8028374:	2300      	movs	r3, #0
 8028376:	617b      	str	r3, [r7, #20]
 8028378:	e00a      	b.n	8028390 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 802837a:	f3af 8000 	nop.w
 802837e:	4601      	mov	r1, r0
 8028380:	68bb      	ldr	r3, [r7, #8]
 8028382:	1c5a      	adds	r2, r3, #1
 8028384:	60ba      	str	r2, [r7, #8]
 8028386:	b2ca      	uxtb	r2, r1
 8028388:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802838a:	697b      	ldr	r3, [r7, #20]
 802838c:	3301      	adds	r3, #1
 802838e:	617b      	str	r3, [r7, #20]
 8028390:	697a      	ldr	r2, [r7, #20]
 8028392:	687b      	ldr	r3, [r7, #4]
 8028394:	429a      	cmp	r2, r3
 8028396:	dbf0      	blt.n	802837a <_read+0x12>
  }

  return len;
 8028398:	687b      	ldr	r3, [r7, #4]
}
 802839a:	4618      	mov	r0, r3
 802839c:	3718      	adds	r7, #24
 802839e:	46bd      	mov	sp, r7
 80283a0:	bd80      	pop	{r7, pc}

080283a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80283a2:	b580      	push	{r7, lr}
 80283a4:	b086      	sub	sp, #24
 80283a6:	af00      	add	r7, sp, #0
 80283a8:	60f8      	str	r0, [r7, #12]
 80283aa:	60b9      	str	r1, [r7, #8]
 80283ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80283ae:	2300      	movs	r3, #0
 80283b0:	617b      	str	r3, [r7, #20]
 80283b2:	e009      	b.n	80283c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80283b4:	68bb      	ldr	r3, [r7, #8]
 80283b6:	1c5a      	adds	r2, r3, #1
 80283b8:	60ba      	str	r2, [r7, #8]
 80283ba:	781b      	ldrb	r3, [r3, #0]
 80283bc:	4618      	mov	r0, r3
 80283be:	f7ff fd34 	bl	8027e2a <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80283c2:	697b      	ldr	r3, [r7, #20]
 80283c4:	3301      	adds	r3, #1
 80283c6:	617b      	str	r3, [r7, #20]
 80283c8:	697a      	ldr	r2, [r7, #20]
 80283ca:	687b      	ldr	r3, [r7, #4]
 80283cc:	429a      	cmp	r2, r3
 80283ce:	dbf1      	blt.n	80283b4 <_write+0x12>
  }
  return len;
 80283d0:	687b      	ldr	r3, [r7, #4]
}
 80283d2:	4618      	mov	r0, r3
 80283d4:	3718      	adds	r7, #24
 80283d6:	46bd      	mov	sp, r7
 80283d8:	bd80      	pop	{r7, pc}

080283da <_close>:

int _close(int file)
{
 80283da:	b480      	push	{r7}
 80283dc:	b083      	sub	sp, #12
 80283de:	af00      	add	r7, sp, #0
 80283e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80283e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80283e6:	4618      	mov	r0, r3
 80283e8:	370c      	adds	r7, #12
 80283ea:	46bd      	mov	sp, r7
 80283ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80283f0:	4770      	bx	lr

080283f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80283f2:	b480      	push	{r7}
 80283f4:	b083      	sub	sp, #12
 80283f6:	af00      	add	r7, sp, #0
 80283f8:	6078      	str	r0, [r7, #4]
 80283fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80283fc:	683b      	ldr	r3, [r7, #0]
 80283fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8028402:	605a      	str	r2, [r3, #4]
  return 0;
 8028404:	2300      	movs	r3, #0
}
 8028406:	4618      	mov	r0, r3
 8028408:	370c      	adds	r7, #12
 802840a:	46bd      	mov	sp, r7
 802840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028410:	4770      	bx	lr

08028412 <_isatty>:

int _isatty(int file)
{
 8028412:	b480      	push	{r7}
 8028414:	b083      	sub	sp, #12
 8028416:	af00      	add	r7, sp, #0
 8028418:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 802841a:	2301      	movs	r3, #1
}
 802841c:	4618      	mov	r0, r3
 802841e:	370c      	adds	r7, #12
 8028420:	46bd      	mov	sp, r7
 8028422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028426:	4770      	bx	lr

08028428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8028428:	b480      	push	{r7}
 802842a:	b085      	sub	sp, #20
 802842c:	af00      	add	r7, sp, #0
 802842e:	60f8      	str	r0, [r7, #12]
 8028430:	60b9      	str	r1, [r7, #8]
 8028432:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8028434:	2300      	movs	r3, #0
}
 8028436:	4618      	mov	r0, r3
 8028438:	3714      	adds	r7, #20
 802843a:	46bd      	mov	sp, r7
 802843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028440:	4770      	bx	lr
	...

08028444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8028444:	b580      	push	{r7, lr}
 8028446:	b086      	sub	sp, #24
 8028448:	af00      	add	r7, sp, #0
 802844a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 802844c:	4a14      	ldr	r2, [pc, #80]	@ (80284a0 <_sbrk+0x5c>)
 802844e:	4b15      	ldr	r3, [pc, #84]	@ (80284a4 <_sbrk+0x60>)
 8028450:	1ad3      	subs	r3, r2, r3
 8028452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8028454:	697b      	ldr	r3, [r7, #20]
 8028456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8028458:	4b13      	ldr	r3, [pc, #76]	@ (80284a8 <_sbrk+0x64>)
 802845a:	681b      	ldr	r3, [r3, #0]
 802845c:	2b00      	cmp	r3, #0
 802845e:	d102      	bne.n	8028466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8028460:	4b11      	ldr	r3, [pc, #68]	@ (80284a8 <_sbrk+0x64>)
 8028462:	4a12      	ldr	r2, [pc, #72]	@ (80284ac <_sbrk+0x68>)
 8028464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8028466:	4b10      	ldr	r3, [pc, #64]	@ (80284a8 <_sbrk+0x64>)
 8028468:	681a      	ldr	r2, [r3, #0]
 802846a:	687b      	ldr	r3, [r7, #4]
 802846c:	4413      	add	r3, r2
 802846e:	693a      	ldr	r2, [r7, #16]
 8028470:	429a      	cmp	r2, r3
 8028472:	d207      	bcs.n	8028484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8028474:	f003 fc70 	bl	802bd58 <__errno>
 8028478:	4603      	mov	r3, r0
 802847a:	220c      	movs	r2, #12
 802847c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 802847e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028482:	e009      	b.n	8028498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8028484:	4b08      	ldr	r3, [pc, #32]	@ (80284a8 <_sbrk+0x64>)
 8028486:	681b      	ldr	r3, [r3, #0]
 8028488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802848a:	4b07      	ldr	r3, [pc, #28]	@ (80284a8 <_sbrk+0x64>)
 802848c:	681a      	ldr	r2, [r3, #0]
 802848e:	687b      	ldr	r3, [r7, #4]
 8028490:	4413      	add	r3, r2
 8028492:	4a05      	ldr	r2, [pc, #20]	@ (80284a8 <_sbrk+0x64>)
 8028494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8028496:	68fb      	ldr	r3, [r7, #12]
}
 8028498:	4618      	mov	r0, r3
 802849a:	3718      	adds	r7, #24
 802849c:	46bd      	mov	sp, r7
 802849e:	bd80      	pop	{r7, pc}
 80284a0:	20020000 	.word	0x20020000
 80284a4:	00000400 	.word	0x00000400
 80284a8:	200012a0 	.word	0x200012a0
 80284ac:	20001500 	.word	0x20001500

080284b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80284b0:	b480      	push	{r7}
 80284b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80284b4:	4b07      	ldr	r3, [pc, #28]	@ (80284d4 <SystemInit+0x24>)
 80284b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80284ba:	4a06      	ldr	r2, [pc, #24]	@ (80284d4 <SystemInit+0x24>)
 80284bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80284c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80284c4:	4b03      	ldr	r3, [pc, #12]	@ (80284d4 <SystemInit+0x24>)
 80284c6:	4a04      	ldr	r2, [pc, #16]	@ (80284d8 <SystemInit+0x28>)
 80284c8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80284ca:	bf00      	nop
 80284cc:	46bd      	mov	sp, r7
 80284ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80284d2:	4770      	bx	lr
 80284d4:	e000ed00 	.word	0xe000ed00
 80284d8:	08020400 	.word	0x08020400

080284dc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80284dc:	b580      	push	{r7, lr}
 80284de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80284e0:	4b11      	ldr	r3, [pc, #68]	@ (8028528 <MX_USART2_UART_Init+0x4c>)
 80284e2:	4a12      	ldr	r2, [pc, #72]	@ (802852c <MX_USART2_UART_Init+0x50>)
 80284e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80284e6:	4b10      	ldr	r3, [pc, #64]	@ (8028528 <MX_USART2_UART_Init+0x4c>)
 80284e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80284ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80284ee:	4b0e      	ldr	r3, [pc, #56]	@ (8028528 <MX_USART2_UART_Init+0x4c>)
 80284f0:	2200      	movs	r2, #0
 80284f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80284f4:	4b0c      	ldr	r3, [pc, #48]	@ (8028528 <MX_USART2_UART_Init+0x4c>)
 80284f6:	2200      	movs	r2, #0
 80284f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80284fa:	4b0b      	ldr	r3, [pc, #44]	@ (8028528 <MX_USART2_UART_Init+0x4c>)
 80284fc:	2200      	movs	r2, #0
 80284fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8028500:	4b09      	ldr	r3, [pc, #36]	@ (8028528 <MX_USART2_UART_Init+0x4c>)
 8028502:	220c      	movs	r2, #12
 8028504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8028506:	4b08      	ldr	r3, [pc, #32]	@ (8028528 <MX_USART2_UART_Init+0x4c>)
 8028508:	2200      	movs	r2, #0
 802850a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802850c:	4b06      	ldr	r3, [pc, #24]	@ (8028528 <MX_USART2_UART_Init+0x4c>)
 802850e:	2200      	movs	r2, #0
 8028510:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8028512:	4805      	ldr	r0, [pc, #20]	@ (8028528 <MX_USART2_UART_Init+0x4c>)
 8028514:	f001 ff9e 	bl	802a454 <HAL_UART_Init>
 8028518:	4603      	mov	r3, r0
 802851a:	2b00      	cmp	r3, #0
 802851c:	d001      	beq.n	8028522 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 802851e:	f7ff fe57 	bl	80281d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8028522:	bf00      	nop
 8028524:	bd80      	pop	{r7, pc}
 8028526:	bf00      	nop
 8028528:	200012a4 	.word	0x200012a4
 802852c:	40004400 	.word	0x40004400

08028530 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8028530:	b580      	push	{r7, lr}
 8028532:	b08a      	sub	sp, #40	@ 0x28
 8028534:	af00      	add	r7, sp, #0
 8028536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8028538:	f107 0314 	add.w	r3, r7, #20
 802853c:	2200      	movs	r2, #0
 802853e:	601a      	str	r2, [r3, #0]
 8028540:	605a      	str	r2, [r3, #4]
 8028542:	609a      	str	r2, [r3, #8]
 8028544:	60da      	str	r2, [r3, #12]
 8028546:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8028548:	687b      	ldr	r3, [r7, #4]
 802854a:	681b      	ldr	r3, [r3, #0]
 802854c:	4a4b      	ldr	r2, [pc, #300]	@ (802867c <HAL_UART_MspInit+0x14c>)
 802854e:	4293      	cmp	r3, r2
 8028550:	f040 8090 	bne.w	8028674 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8028554:	2300      	movs	r3, #0
 8028556:	613b      	str	r3, [r7, #16]
 8028558:	4b49      	ldr	r3, [pc, #292]	@ (8028680 <HAL_UART_MspInit+0x150>)
 802855a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802855c:	4a48      	ldr	r2, [pc, #288]	@ (8028680 <HAL_UART_MspInit+0x150>)
 802855e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8028562:	6413      	str	r3, [r2, #64]	@ 0x40
 8028564:	4b46      	ldr	r3, [pc, #280]	@ (8028680 <HAL_UART_MspInit+0x150>)
 8028566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802856c:	613b      	str	r3, [r7, #16]
 802856e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8028570:	2300      	movs	r3, #0
 8028572:	60fb      	str	r3, [r7, #12]
 8028574:	4b42      	ldr	r3, [pc, #264]	@ (8028680 <HAL_UART_MspInit+0x150>)
 8028576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028578:	4a41      	ldr	r2, [pc, #260]	@ (8028680 <HAL_UART_MspInit+0x150>)
 802857a:	f043 0301 	orr.w	r3, r3, #1
 802857e:	6313      	str	r3, [r2, #48]	@ 0x30
 8028580:	4b3f      	ldr	r3, [pc, #252]	@ (8028680 <HAL_UART_MspInit+0x150>)
 8028582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028584:	f003 0301 	and.w	r3, r3, #1
 8028588:	60fb      	str	r3, [r7, #12]
 802858a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 802858c:	230c      	movs	r3, #12
 802858e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8028590:	2302      	movs	r3, #2
 8028592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8028594:	2300      	movs	r3, #0
 8028596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8028598:	2303      	movs	r3, #3
 802859a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802859c:	2307      	movs	r3, #7
 802859e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80285a0:	f107 0314 	add.w	r3, r7, #20
 80285a4:	4619      	mov	r1, r3
 80285a6:	4837      	ldr	r0, [pc, #220]	@ (8028684 <HAL_UART_MspInit+0x154>)
 80285a8:	f001 f898 	bl	80296dc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80285ac:	4b36      	ldr	r3, [pc, #216]	@ (8028688 <HAL_UART_MspInit+0x158>)
 80285ae:	4a37      	ldr	r2, [pc, #220]	@ (802868c <HAL_UART_MspInit+0x15c>)
 80285b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80285b2:	4b35      	ldr	r3, [pc, #212]	@ (8028688 <HAL_UART_MspInit+0x158>)
 80285b4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80285b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80285ba:	4b33      	ldr	r3, [pc, #204]	@ (8028688 <HAL_UART_MspInit+0x158>)
 80285bc:	2200      	movs	r2, #0
 80285be:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80285c0:	4b31      	ldr	r3, [pc, #196]	@ (8028688 <HAL_UART_MspInit+0x158>)
 80285c2:	2200      	movs	r2, #0
 80285c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80285c6:	4b30      	ldr	r3, [pc, #192]	@ (8028688 <HAL_UART_MspInit+0x158>)
 80285c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80285cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80285ce:	4b2e      	ldr	r3, [pc, #184]	@ (8028688 <HAL_UART_MspInit+0x158>)
 80285d0:	2200      	movs	r2, #0
 80285d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80285d4:	4b2c      	ldr	r3, [pc, #176]	@ (8028688 <HAL_UART_MspInit+0x158>)
 80285d6:	2200      	movs	r2, #0
 80285d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80285da:	4b2b      	ldr	r3, [pc, #172]	@ (8028688 <HAL_UART_MspInit+0x158>)
 80285dc:	2200      	movs	r2, #0
 80285de:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80285e0:	4b29      	ldr	r3, [pc, #164]	@ (8028688 <HAL_UART_MspInit+0x158>)
 80285e2:	2200      	movs	r2, #0
 80285e4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80285e6:	4b28      	ldr	r3, [pc, #160]	@ (8028688 <HAL_UART_MspInit+0x158>)
 80285e8:	2200      	movs	r2, #0
 80285ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80285ec:	4826      	ldr	r0, [pc, #152]	@ (8028688 <HAL_UART_MspInit+0x158>)
 80285ee:	f000 fa25 	bl	8028a3c <HAL_DMA_Init>
 80285f2:	4603      	mov	r3, r0
 80285f4:	2b00      	cmp	r3, #0
 80285f6:	d001      	beq.n	80285fc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80285f8:	f7ff fdea 	bl	80281d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80285fc:	687b      	ldr	r3, [r7, #4]
 80285fe:	4a22      	ldr	r2, [pc, #136]	@ (8028688 <HAL_UART_MspInit+0x158>)
 8028600:	63da      	str	r2, [r3, #60]	@ 0x3c
 8028602:	4a21      	ldr	r2, [pc, #132]	@ (8028688 <HAL_UART_MspInit+0x158>)
 8028604:	687b      	ldr	r3, [r7, #4]
 8028606:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8028608:	4b21      	ldr	r3, [pc, #132]	@ (8028690 <HAL_UART_MspInit+0x160>)
 802860a:	4a22      	ldr	r2, [pc, #136]	@ (8028694 <HAL_UART_MspInit+0x164>)
 802860c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 802860e:	4b20      	ldr	r3, [pc, #128]	@ (8028690 <HAL_UART_MspInit+0x160>)
 8028610:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8028614:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8028616:	4b1e      	ldr	r3, [pc, #120]	@ (8028690 <HAL_UART_MspInit+0x160>)
 8028618:	2240      	movs	r2, #64	@ 0x40
 802861a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802861c:	4b1c      	ldr	r3, [pc, #112]	@ (8028690 <HAL_UART_MspInit+0x160>)
 802861e:	2200      	movs	r2, #0
 8028620:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8028622:	4b1b      	ldr	r3, [pc, #108]	@ (8028690 <HAL_UART_MspInit+0x160>)
 8028624:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8028628:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802862a:	4b19      	ldr	r3, [pc, #100]	@ (8028690 <HAL_UART_MspInit+0x160>)
 802862c:	2200      	movs	r2, #0
 802862e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8028630:	4b17      	ldr	r3, [pc, #92]	@ (8028690 <HAL_UART_MspInit+0x160>)
 8028632:	2200      	movs	r2, #0
 8028634:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8028636:	4b16      	ldr	r3, [pc, #88]	@ (8028690 <HAL_UART_MspInit+0x160>)
 8028638:	2200      	movs	r2, #0
 802863a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 802863c:	4b14      	ldr	r3, [pc, #80]	@ (8028690 <HAL_UART_MspInit+0x160>)
 802863e:	2200      	movs	r2, #0
 8028640:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8028642:	4b13      	ldr	r3, [pc, #76]	@ (8028690 <HAL_UART_MspInit+0x160>)
 8028644:	2200      	movs	r2, #0
 8028646:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8028648:	4811      	ldr	r0, [pc, #68]	@ (8028690 <HAL_UART_MspInit+0x160>)
 802864a:	f000 f9f7 	bl	8028a3c <HAL_DMA_Init>
 802864e:	4603      	mov	r3, r0
 8028650:	2b00      	cmp	r3, #0
 8028652:	d001      	beq.n	8028658 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8028654:	f7ff fdbc 	bl	80281d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8028658:	687b      	ldr	r3, [r7, #4]
 802865a:	4a0d      	ldr	r2, [pc, #52]	@ (8028690 <HAL_UART_MspInit+0x160>)
 802865c:	639a      	str	r2, [r3, #56]	@ 0x38
 802865e:	4a0c      	ldr	r2, [pc, #48]	@ (8028690 <HAL_UART_MspInit+0x160>)
 8028660:	687b      	ldr	r3, [r7, #4]
 8028662:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8028664:	2200      	movs	r2, #0
 8028666:	2100      	movs	r1, #0
 8028668:	2026      	movs	r0, #38	@ 0x26
 802866a:	f000 f9b0 	bl	80289ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 802866e:	2026      	movs	r0, #38	@ 0x26
 8028670:	f000 f9c9 	bl	8028a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8028674:	bf00      	nop
 8028676:	3728      	adds	r7, #40	@ 0x28
 8028678:	46bd      	mov	sp, r7
 802867a:	bd80      	pop	{r7, pc}
 802867c:	40004400 	.word	0x40004400
 8028680:	40023800 	.word	0x40023800
 8028684:	40020000 	.word	0x40020000
 8028688:	200012ec 	.word	0x200012ec
 802868c:	40026088 	.word	0x40026088
 8028690:	2000134c 	.word	0x2000134c
 8028694:	400260a0 	.word	0x400260a0

08028698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8028698:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80286d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 802869c:	f7ff ff08 	bl	80284b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80286a0:	480c      	ldr	r0, [pc, #48]	@ (80286d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80286a2:	490d      	ldr	r1, [pc, #52]	@ (80286d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80286a4:	4a0d      	ldr	r2, [pc, #52]	@ (80286dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80286a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80286a8:	e002      	b.n	80286b0 <LoopCopyDataInit>

080286aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80286aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80286ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80286ae:	3304      	adds	r3, #4

080286b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80286b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80286b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80286b4:	d3f9      	bcc.n	80286aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80286b6:	4a0a      	ldr	r2, [pc, #40]	@ (80286e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80286b8:	4c0a      	ldr	r4, [pc, #40]	@ (80286e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80286ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80286bc:	e001      	b.n	80286c2 <LoopFillZerobss>

080286be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80286be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80286c0:	3204      	adds	r2, #4

080286c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80286c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80286c4:	d3fb      	bcc.n	80286be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80286c6:	f003 fb4d 	bl	802bd64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80286ca:	f7ff fbf9 	bl	8027ec0 <main>
  bx  lr    
 80286ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80286d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80286d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80286d8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80286dc:	0802e530 	.word	0x0802e530
  ldr r2, =_sbss
 80286e0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80286e4:	200014fc 	.word	0x200014fc

080286e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80286e8:	e7fe      	b.n	80286e8 <ADC_IRQHandler>
	...

080286ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80286ec:	b580      	push	{r7, lr}
 80286ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80286f0:	4b0e      	ldr	r3, [pc, #56]	@ (802872c <HAL_Init+0x40>)
 80286f2:	681b      	ldr	r3, [r3, #0]
 80286f4:	4a0d      	ldr	r2, [pc, #52]	@ (802872c <HAL_Init+0x40>)
 80286f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80286fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80286fc:	4b0b      	ldr	r3, [pc, #44]	@ (802872c <HAL_Init+0x40>)
 80286fe:	681b      	ldr	r3, [r3, #0]
 8028700:	4a0a      	ldr	r2, [pc, #40]	@ (802872c <HAL_Init+0x40>)
 8028702:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8028706:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8028708:	4b08      	ldr	r3, [pc, #32]	@ (802872c <HAL_Init+0x40>)
 802870a:	681b      	ldr	r3, [r3, #0]
 802870c:	4a07      	ldr	r2, [pc, #28]	@ (802872c <HAL_Init+0x40>)
 802870e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8028712:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8028714:	2003      	movs	r0, #3
 8028716:	f000 f94f 	bl	80289b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802871a:	200f      	movs	r0, #15
 802871c:	f000 f808 	bl	8028730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8028720:	f7ff fdac 	bl	802827c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8028724:	2300      	movs	r3, #0
}
 8028726:	4618      	mov	r0, r3
 8028728:	bd80      	pop	{r7, pc}
 802872a:	bf00      	nop
 802872c:	40023c00 	.word	0x40023c00

08028730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8028730:	b580      	push	{r7, lr}
 8028732:	b082      	sub	sp, #8
 8028734:	af00      	add	r7, sp, #0
 8028736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8028738:	4b12      	ldr	r3, [pc, #72]	@ (8028784 <HAL_InitTick+0x54>)
 802873a:	681a      	ldr	r2, [r3, #0]
 802873c:	4b12      	ldr	r3, [pc, #72]	@ (8028788 <HAL_InitTick+0x58>)
 802873e:	781b      	ldrb	r3, [r3, #0]
 8028740:	4619      	mov	r1, r3
 8028742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8028746:	fbb3 f3f1 	udiv	r3, r3, r1
 802874a:	fbb2 f3f3 	udiv	r3, r2, r3
 802874e:	4618      	mov	r0, r3
 8028750:	f000 f967 	bl	8028a22 <HAL_SYSTICK_Config>
 8028754:	4603      	mov	r3, r0
 8028756:	2b00      	cmp	r3, #0
 8028758:	d001      	beq.n	802875e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 802875a:	2301      	movs	r3, #1
 802875c:	e00e      	b.n	802877c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802875e:	687b      	ldr	r3, [r7, #4]
 8028760:	2b0f      	cmp	r3, #15
 8028762:	d80a      	bhi.n	802877a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8028764:	2200      	movs	r2, #0
 8028766:	6879      	ldr	r1, [r7, #4]
 8028768:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802876c:	f000 f92f 	bl	80289ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8028770:	4a06      	ldr	r2, [pc, #24]	@ (802878c <HAL_InitTick+0x5c>)
 8028772:	687b      	ldr	r3, [r7, #4]
 8028774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8028776:	2300      	movs	r3, #0
 8028778:	e000      	b.n	802877c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 802877a:	2301      	movs	r3, #1
}
 802877c:	4618      	mov	r0, r3
 802877e:	3708      	adds	r7, #8
 8028780:	46bd      	mov	sp, r7
 8028782:	bd80      	pop	{r7, pc}
 8028784:	20000004 	.word	0x20000004
 8028788:	2000000c 	.word	0x2000000c
 802878c:	20000008 	.word	0x20000008

08028790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8028790:	b480      	push	{r7}
 8028792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8028794:	4b06      	ldr	r3, [pc, #24]	@ (80287b0 <HAL_IncTick+0x20>)
 8028796:	781b      	ldrb	r3, [r3, #0]
 8028798:	461a      	mov	r2, r3
 802879a:	4b06      	ldr	r3, [pc, #24]	@ (80287b4 <HAL_IncTick+0x24>)
 802879c:	681b      	ldr	r3, [r3, #0]
 802879e:	4413      	add	r3, r2
 80287a0:	4a04      	ldr	r2, [pc, #16]	@ (80287b4 <HAL_IncTick+0x24>)
 80287a2:	6013      	str	r3, [r2, #0]
}
 80287a4:	bf00      	nop
 80287a6:	46bd      	mov	sp, r7
 80287a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287ac:	4770      	bx	lr
 80287ae:	bf00      	nop
 80287b0:	2000000c 	.word	0x2000000c
 80287b4:	200013ac 	.word	0x200013ac

080287b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80287b8:	b480      	push	{r7}
 80287ba:	af00      	add	r7, sp, #0
  return uwTick;
 80287bc:	4b03      	ldr	r3, [pc, #12]	@ (80287cc <HAL_GetTick+0x14>)
 80287be:	681b      	ldr	r3, [r3, #0]
}
 80287c0:	4618      	mov	r0, r3
 80287c2:	46bd      	mov	sp, r7
 80287c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287c8:	4770      	bx	lr
 80287ca:	bf00      	nop
 80287cc:	200013ac 	.word	0x200013ac

080287d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80287d0:	b580      	push	{r7, lr}
 80287d2:	b084      	sub	sp, #16
 80287d4:	af00      	add	r7, sp, #0
 80287d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80287d8:	f7ff ffee 	bl	80287b8 <HAL_GetTick>
 80287dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80287de:	687b      	ldr	r3, [r7, #4]
 80287e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80287e2:	68fb      	ldr	r3, [r7, #12]
 80287e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80287e8:	d005      	beq.n	80287f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80287ea:	4b0a      	ldr	r3, [pc, #40]	@ (8028814 <HAL_Delay+0x44>)
 80287ec:	781b      	ldrb	r3, [r3, #0]
 80287ee:	461a      	mov	r2, r3
 80287f0:	68fb      	ldr	r3, [r7, #12]
 80287f2:	4413      	add	r3, r2
 80287f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80287f6:	bf00      	nop
 80287f8:	f7ff ffde 	bl	80287b8 <HAL_GetTick>
 80287fc:	4602      	mov	r2, r0
 80287fe:	68bb      	ldr	r3, [r7, #8]
 8028800:	1ad3      	subs	r3, r2, r3
 8028802:	68fa      	ldr	r2, [r7, #12]
 8028804:	429a      	cmp	r2, r3
 8028806:	d8f7      	bhi.n	80287f8 <HAL_Delay+0x28>
  {
  }
}
 8028808:	bf00      	nop
 802880a:	bf00      	nop
 802880c:	3710      	adds	r7, #16
 802880e:	46bd      	mov	sp, r7
 8028810:	bd80      	pop	{r7, pc}
 8028812:	bf00      	nop
 8028814:	2000000c 	.word	0x2000000c

08028818 <__NVIC_SetPriorityGrouping>:
{
 8028818:	b480      	push	{r7}
 802881a:	b085      	sub	sp, #20
 802881c:	af00      	add	r7, sp, #0
 802881e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8028820:	687b      	ldr	r3, [r7, #4]
 8028822:	f003 0307 	and.w	r3, r3, #7
 8028826:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8028828:	4b0c      	ldr	r3, [pc, #48]	@ (802885c <__NVIC_SetPriorityGrouping+0x44>)
 802882a:	68db      	ldr	r3, [r3, #12]
 802882c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802882e:	68ba      	ldr	r2, [r7, #8]
 8028830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8028834:	4013      	ands	r3, r2
 8028836:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8028838:	68fb      	ldr	r3, [r7, #12]
 802883a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802883c:	68bb      	ldr	r3, [r7, #8]
 802883e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8028840:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8028844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8028848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802884a:	4a04      	ldr	r2, [pc, #16]	@ (802885c <__NVIC_SetPriorityGrouping+0x44>)
 802884c:	68bb      	ldr	r3, [r7, #8]
 802884e:	60d3      	str	r3, [r2, #12]
}
 8028850:	bf00      	nop
 8028852:	3714      	adds	r7, #20
 8028854:	46bd      	mov	sp, r7
 8028856:	f85d 7b04 	ldr.w	r7, [sp], #4
 802885a:	4770      	bx	lr
 802885c:	e000ed00 	.word	0xe000ed00

08028860 <__NVIC_GetPriorityGrouping>:
{
 8028860:	b480      	push	{r7}
 8028862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8028864:	4b04      	ldr	r3, [pc, #16]	@ (8028878 <__NVIC_GetPriorityGrouping+0x18>)
 8028866:	68db      	ldr	r3, [r3, #12]
 8028868:	0a1b      	lsrs	r3, r3, #8
 802886a:	f003 0307 	and.w	r3, r3, #7
}
 802886e:	4618      	mov	r0, r3
 8028870:	46bd      	mov	sp, r7
 8028872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028876:	4770      	bx	lr
 8028878:	e000ed00 	.word	0xe000ed00

0802887c <__NVIC_EnableIRQ>:
{
 802887c:	b480      	push	{r7}
 802887e:	b083      	sub	sp, #12
 8028880:	af00      	add	r7, sp, #0
 8028882:	4603      	mov	r3, r0
 8028884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8028886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802888a:	2b00      	cmp	r3, #0
 802888c:	db0b      	blt.n	80288a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802888e:	79fb      	ldrb	r3, [r7, #7]
 8028890:	f003 021f 	and.w	r2, r3, #31
 8028894:	4907      	ldr	r1, [pc, #28]	@ (80288b4 <__NVIC_EnableIRQ+0x38>)
 8028896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802889a:	095b      	lsrs	r3, r3, #5
 802889c:	2001      	movs	r0, #1
 802889e:	fa00 f202 	lsl.w	r2, r0, r2
 80288a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80288a6:	bf00      	nop
 80288a8:	370c      	adds	r7, #12
 80288aa:	46bd      	mov	sp, r7
 80288ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80288b0:	4770      	bx	lr
 80288b2:	bf00      	nop
 80288b4:	e000e100 	.word	0xe000e100

080288b8 <__NVIC_SetPriority>:
{
 80288b8:	b480      	push	{r7}
 80288ba:	b083      	sub	sp, #12
 80288bc:	af00      	add	r7, sp, #0
 80288be:	4603      	mov	r3, r0
 80288c0:	6039      	str	r1, [r7, #0]
 80288c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80288c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80288c8:	2b00      	cmp	r3, #0
 80288ca:	db0a      	blt.n	80288e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80288cc:	683b      	ldr	r3, [r7, #0]
 80288ce:	b2da      	uxtb	r2, r3
 80288d0:	490c      	ldr	r1, [pc, #48]	@ (8028904 <__NVIC_SetPriority+0x4c>)
 80288d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80288d6:	0112      	lsls	r2, r2, #4
 80288d8:	b2d2      	uxtb	r2, r2
 80288da:	440b      	add	r3, r1
 80288dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80288e0:	e00a      	b.n	80288f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80288e2:	683b      	ldr	r3, [r7, #0]
 80288e4:	b2da      	uxtb	r2, r3
 80288e6:	4908      	ldr	r1, [pc, #32]	@ (8028908 <__NVIC_SetPriority+0x50>)
 80288e8:	79fb      	ldrb	r3, [r7, #7]
 80288ea:	f003 030f 	and.w	r3, r3, #15
 80288ee:	3b04      	subs	r3, #4
 80288f0:	0112      	lsls	r2, r2, #4
 80288f2:	b2d2      	uxtb	r2, r2
 80288f4:	440b      	add	r3, r1
 80288f6:	761a      	strb	r2, [r3, #24]
}
 80288f8:	bf00      	nop
 80288fa:	370c      	adds	r7, #12
 80288fc:	46bd      	mov	sp, r7
 80288fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028902:	4770      	bx	lr
 8028904:	e000e100 	.word	0xe000e100
 8028908:	e000ed00 	.word	0xe000ed00

0802890c <NVIC_EncodePriority>:
{
 802890c:	b480      	push	{r7}
 802890e:	b089      	sub	sp, #36	@ 0x24
 8028910:	af00      	add	r7, sp, #0
 8028912:	60f8      	str	r0, [r7, #12]
 8028914:	60b9      	str	r1, [r7, #8]
 8028916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8028918:	68fb      	ldr	r3, [r7, #12]
 802891a:	f003 0307 	and.w	r3, r3, #7
 802891e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8028920:	69fb      	ldr	r3, [r7, #28]
 8028922:	f1c3 0307 	rsb	r3, r3, #7
 8028926:	2b04      	cmp	r3, #4
 8028928:	bf28      	it	cs
 802892a:	2304      	movcs	r3, #4
 802892c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802892e:	69fb      	ldr	r3, [r7, #28]
 8028930:	3304      	adds	r3, #4
 8028932:	2b06      	cmp	r3, #6
 8028934:	d902      	bls.n	802893c <NVIC_EncodePriority+0x30>
 8028936:	69fb      	ldr	r3, [r7, #28]
 8028938:	3b03      	subs	r3, #3
 802893a:	e000      	b.n	802893e <NVIC_EncodePriority+0x32>
 802893c:	2300      	movs	r3, #0
 802893e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8028940:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8028944:	69bb      	ldr	r3, [r7, #24]
 8028946:	fa02 f303 	lsl.w	r3, r2, r3
 802894a:	43da      	mvns	r2, r3
 802894c:	68bb      	ldr	r3, [r7, #8]
 802894e:	401a      	ands	r2, r3
 8028950:	697b      	ldr	r3, [r7, #20]
 8028952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8028954:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8028958:	697b      	ldr	r3, [r7, #20]
 802895a:	fa01 f303 	lsl.w	r3, r1, r3
 802895e:	43d9      	mvns	r1, r3
 8028960:	687b      	ldr	r3, [r7, #4]
 8028962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8028964:	4313      	orrs	r3, r2
}
 8028966:	4618      	mov	r0, r3
 8028968:	3724      	adds	r7, #36	@ 0x24
 802896a:	46bd      	mov	sp, r7
 802896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028970:	4770      	bx	lr
	...

08028974 <SysTick_Config>:
{
 8028974:	b580      	push	{r7, lr}
 8028976:	b082      	sub	sp, #8
 8028978:	af00      	add	r7, sp, #0
 802897a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802897c:	687b      	ldr	r3, [r7, #4]
 802897e:	3b01      	subs	r3, #1
 8028980:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8028984:	d301      	bcc.n	802898a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8028986:	2301      	movs	r3, #1
 8028988:	e00f      	b.n	80289aa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802898a:	4a0a      	ldr	r2, [pc, #40]	@ (80289b4 <SysTick_Config+0x40>)
 802898c:	687b      	ldr	r3, [r7, #4]
 802898e:	3b01      	subs	r3, #1
 8028990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8028992:	210f      	movs	r1, #15
 8028994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028998:	f7ff ff8e 	bl	80288b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802899c:	4b05      	ldr	r3, [pc, #20]	@ (80289b4 <SysTick_Config+0x40>)
 802899e:	2200      	movs	r2, #0
 80289a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80289a2:	4b04      	ldr	r3, [pc, #16]	@ (80289b4 <SysTick_Config+0x40>)
 80289a4:	2207      	movs	r2, #7
 80289a6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80289a8:	2300      	movs	r3, #0
}
 80289aa:	4618      	mov	r0, r3
 80289ac:	3708      	adds	r7, #8
 80289ae:	46bd      	mov	sp, r7
 80289b0:	bd80      	pop	{r7, pc}
 80289b2:	bf00      	nop
 80289b4:	e000e010 	.word	0xe000e010

080289b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80289b8:	b580      	push	{r7, lr}
 80289ba:	b082      	sub	sp, #8
 80289bc:	af00      	add	r7, sp, #0
 80289be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80289c0:	6878      	ldr	r0, [r7, #4]
 80289c2:	f7ff ff29 	bl	8028818 <__NVIC_SetPriorityGrouping>
}
 80289c6:	bf00      	nop
 80289c8:	3708      	adds	r7, #8
 80289ca:	46bd      	mov	sp, r7
 80289cc:	bd80      	pop	{r7, pc}

080289ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80289ce:	b580      	push	{r7, lr}
 80289d0:	b086      	sub	sp, #24
 80289d2:	af00      	add	r7, sp, #0
 80289d4:	4603      	mov	r3, r0
 80289d6:	60b9      	str	r1, [r7, #8]
 80289d8:	607a      	str	r2, [r7, #4]
 80289da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80289dc:	2300      	movs	r3, #0
 80289de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80289e0:	f7ff ff3e 	bl	8028860 <__NVIC_GetPriorityGrouping>
 80289e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80289e6:	687a      	ldr	r2, [r7, #4]
 80289e8:	68b9      	ldr	r1, [r7, #8]
 80289ea:	6978      	ldr	r0, [r7, #20]
 80289ec:	f7ff ff8e 	bl	802890c <NVIC_EncodePriority>
 80289f0:	4602      	mov	r2, r0
 80289f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80289f6:	4611      	mov	r1, r2
 80289f8:	4618      	mov	r0, r3
 80289fa:	f7ff ff5d 	bl	80288b8 <__NVIC_SetPriority>
}
 80289fe:	bf00      	nop
 8028a00:	3718      	adds	r7, #24
 8028a02:	46bd      	mov	sp, r7
 8028a04:	bd80      	pop	{r7, pc}

08028a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8028a06:	b580      	push	{r7, lr}
 8028a08:	b082      	sub	sp, #8
 8028a0a:	af00      	add	r7, sp, #0
 8028a0c:	4603      	mov	r3, r0
 8028a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8028a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8028a14:	4618      	mov	r0, r3
 8028a16:	f7ff ff31 	bl	802887c <__NVIC_EnableIRQ>
}
 8028a1a:	bf00      	nop
 8028a1c:	3708      	adds	r7, #8
 8028a1e:	46bd      	mov	sp, r7
 8028a20:	bd80      	pop	{r7, pc}

08028a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8028a22:	b580      	push	{r7, lr}
 8028a24:	b082      	sub	sp, #8
 8028a26:	af00      	add	r7, sp, #0
 8028a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8028a2a:	6878      	ldr	r0, [r7, #4]
 8028a2c:	f7ff ffa2 	bl	8028974 <SysTick_Config>
 8028a30:	4603      	mov	r3, r0
}
 8028a32:	4618      	mov	r0, r3
 8028a34:	3708      	adds	r7, #8
 8028a36:	46bd      	mov	sp, r7
 8028a38:	bd80      	pop	{r7, pc}
	...

08028a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8028a3c:	b580      	push	{r7, lr}
 8028a3e:	b086      	sub	sp, #24
 8028a40:	af00      	add	r7, sp, #0
 8028a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8028a44:	2300      	movs	r3, #0
 8028a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8028a48:	f7ff feb6 	bl	80287b8 <HAL_GetTick>
 8028a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8028a4e:	687b      	ldr	r3, [r7, #4]
 8028a50:	2b00      	cmp	r3, #0
 8028a52:	d101      	bne.n	8028a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8028a54:	2301      	movs	r3, #1
 8028a56:	e099      	b.n	8028b8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8028a58:	687b      	ldr	r3, [r7, #4]
 8028a5a:	2202      	movs	r2, #2
 8028a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8028a60:	687b      	ldr	r3, [r7, #4]
 8028a62:	2200      	movs	r2, #0
 8028a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8028a68:	687b      	ldr	r3, [r7, #4]
 8028a6a:	681b      	ldr	r3, [r3, #0]
 8028a6c:	681a      	ldr	r2, [r3, #0]
 8028a6e:	687b      	ldr	r3, [r7, #4]
 8028a70:	681b      	ldr	r3, [r3, #0]
 8028a72:	f022 0201 	bic.w	r2, r2, #1
 8028a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8028a78:	e00f      	b.n	8028a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8028a7a:	f7ff fe9d 	bl	80287b8 <HAL_GetTick>
 8028a7e:	4602      	mov	r2, r0
 8028a80:	693b      	ldr	r3, [r7, #16]
 8028a82:	1ad3      	subs	r3, r2, r3
 8028a84:	2b05      	cmp	r3, #5
 8028a86:	d908      	bls.n	8028a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8028a88:	687b      	ldr	r3, [r7, #4]
 8028a8a:	2220      	movs	r2, #32
 8028a8c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8028a8e:	687b      	ldr	r3, [r7, #4]
 8028a90:	2203      	movs	r2, #3
 8028a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8028a96:	2303      	movs	r3, #3
 8028a98:	e078      	b.n	8028b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8028a9a:	687b      	ldr	r3, [r7, #4]
 8028a9c:	681b      	ldr	r3, [r3, #0]
 8028a9e:	681b      	ldr	r3, [r3, #0]
 8028aa0:	f003 0301 	and.w	r3, r3, #1
 8028aa4:	2b00      	cmp	r3, #0
 8028aa6:	d1e8      	bne.n	8028a7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8028aa8:	687b      	ldr	r3, [r7, #4]
 8028aaa:	681b      	ldr	r3, [r3, #0]
 8028aac:	681b      	ldr	r3, [r3, #0]
 8028aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8028ab0:	697a      	ldr	r2, [r7, #20]
 8028ab2:	4b38      	ldr	r3, [pc, #224]	@ (8028b94 <HAL_DMA_Init+0x158>)
 8028ab4:	4013      	ands	r3, r2
 8028ab6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8028ab8:	687b      	ldr	r3, [r7, #4]
 8028aba:	685a      	ldr	r2, [r3, #4]
 8028abc:	687b      	ldr	r3, [r7, #4]
 8028abe:	689b      	ldr	r3, [r3, #8]
 8028ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8028ac2:	687b      	ldr	r3, [r7, #4]
 8028ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8028ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8028ac8:	687b      	ldr	r3, [r7, #4]
 8028aca:	691b      	ldr	r3, [r3, #16]
 8028acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8028ace:	687b      	ldr	r3, [r7, #4]
 8028ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8028ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8028ad4:	687b      	ldr	r3, [r7, #4]
 8028ad6:	699b      	ldr	r3, [r3, #24]
 8028ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8028ada:	687b      	ldr	r3, [r7, #4]
 8028adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8028ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8028ae0:	687b      	ldr	r3, [r7, #4]
 8028ae2:	6a1b      	ldr	r3, [r3, #32]
 8028ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8028ae6:	697a      	ldr	r2, [r7, #20]
 8028ae8:	4313      	orrs	r3, r2
 8028aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8028aec:	687b      	ldr	r3, [r7, #4]
 8028aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028af0:	2b04      	cmp	r3, #4
 8028af2:	d107      	bne.n	8028b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8028af4:	687b      	ldr	r3, [r7, #4]
 8028af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028af8:	687b      	ldr	r3, [r7, #4]
 8028afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028afc:	4313      	orrs	r3, r2
 8028afe:	697a      	ldr	r2, [r7, #20]
 8028b00:	4313      	orrs	r3, r2
 8028b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8028b04:	687b      	ldr	r3, [r7, #4]
 8028b06:	681b      	ldr	r3, [r3, #0]
 8028b08:	697a      	ldr	r2, [r7, #20]
 8028b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8028b0c:	687b      	ldr	r3, [r7, #4]
 8028b0e:	681b      	ldr	r3, [r3, #0]
 8028b10:	695b      	ldr	r3, [r3, #20]
 8028b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8028b14:	697b      	ldr	r3, [r7, #20]
 8028b16:	f023 0307 	bic.w	r3, r3, #7
 8028b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8028b1c:	687b      	ldr	r3, [r7, #4]
 8028b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028b20:	697a      	ldr	r2, [r7, #20]
 8028b22:	4313      	orrs	r3, r2
 8028b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8028b26:	687b      	ldr	r3, [r7, #4]
 8028b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028b2a:	2b04      	cmp	r3, #4
 8028b2c:	d117      	bne.n	8028b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8028b2e:	687b      	ldr	r3, [r7, #4]
 8028b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028b32:	697a      	ldr	r2, [r7, #20]
 8028b34:	4313      	orrs	r3, r2
 8028b36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8028b38:	687b      	ldr	r3, [r7, #4]
 8028b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028b3c:	2b00      	cmp	r3, #0
 8028b3e:	d00e      	beq.n	8028b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8028b40:	6878      	ldr	r0, [r7, #4]
 8028b42:	f000 fa7b 	bl	802903c <DMA_CheckFifoParam>
 8028b46:	4603      	mov	r3, r0
 8028b48:	2b00      	cmp	r3, #0
 8028b4a:	d008      	beq.n	8028b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8028b4c:	687b      	ldr	r3, [r7, #4]
 8028b4e:	2240      	movs	r2, #64	@ 0x40
 8028b50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8028b52:	687b      	ldr	r3, [r7, #4]
 8028b54:	2201      	movs	r2, #1
 8028b56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8028b5a:	2301      	movs	r3, #1
 8028b5c:	e016      	b.n	8028b8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8028b5e:	687b      	ldr	r3, [r7, #4]
 8028b60:	681b      	ldr	r3, [r3, #0]
 8028b62:	697a      	ldr	r2, [r7, #20]
 8028b64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8028b66:	6878      	ldr	r0, [r7, #4]
 8028b68:	f000 fa32 	bl	8028fd0 <DMA_CalcBaseAndBitshift>
 8028b6c:	4603      	mov	r3, r0
 8028b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8028b70:	687b      	ldr	r3, [r7, #4]
 8028b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8028b74:	223f      	movs	r2, #63	@ 0x3f
 8028b76:	409a      	lsls	r2, r3
 8028b78:	68fb      	ldr	r3, [r7, #12]
 8028b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8028b7c:	687b      	ldr	r3, [r7, #4]
 8028b7e:	2200      	movs	r2, #0
 8028b80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8028b82:	687b      	ldr	r3, [r7, #4]
 8028b84:	2201      	movs	r2, #1
 8028b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8028b8a:	2300      	movs	r3, #0
}
 8028b8c:	4618      	mov	r0, r3
 8028b8e:	3718      	adds	r7, #24
 8028b90:	46bd      	mov	sp, r7
 8028b92:	bd80      	pop	{r7, pc}
 8028b94:	f010803f 	.word	0xf010803f

08028b98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8028b98:	b580      	push	{r7, lr}
 8028b9a:	b084      	sub	sp, #16
 8028b9c:	af00      	add	r7, sp, #0
 8028b9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8028ba0:	687b      	ldr	r3, [r7, #4]
 8028ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8028ba4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8028ba6:	f7ff fe07 	bl	80287b8 <HAL_GetTick>
 8028baa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8028bac:	687b      	ldr	r3, [r7, #4]
 8028bae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8028bb2:	b2db      	uxtb	r3, r3
 8028bb4:	2b02      	cmp	r3, #2
 8028bb6:	d008      	beq.n	8028bca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8028bb8:	687b      	ldr	r3, [r7, #4]
 8028bba:	2280      	movs	r2, #128	@ 0x80
 8028bbc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8028bbe:	687b      	ldr	r3, [r7, #4]
 8028bc0:	2200      	movs	r2, #0
 8028bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8028bc6:	2301      	movs	r3, #1
 8028bc8:	e052      	b.n	8028c70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8028bca:	687b      	ldr	r3, [r7, #4]
 8028bcc:	681b      	ldr	r3, [r3, #0]
 8028bce:	681a      	ldr	r2, [r3, #0]
 8028bd0:	687b      	ldr	r3, [r7, #4]
 8028bd2:	681b      	ldr	r3, [r3, #0]
 8028bd4:	f022 0216 	bic.w	r2, r2, #22
 8028bd8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8028bda:	687b      	ldr	r3, [r7, #4]
 8028bdc:	681b      	ldr	r3, [r3, #0]
 8028bde:	695a      	ldr	r2, [r3, #20]
 8028be0:	687b      	ldr	r3, [r7, #4]
 8028be2:	681b      	ldr	r3, [r3, #0]
 8028be4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8028be8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8028bea:	687b      	ldr	r3, [r7, #4]
 8028bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028bee:	2b00      	cmp	r3, #0
 8028bf0:	d103      	bne.n	8028bfa <HAL_DMA_Abort+0x62>
 8028bf2:	687b      	ldr	r3, [r7, #4]
 8028bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8028bf6:	2b00      	cmp	r3, #0
 8028bf8:	d007      	beq.n	8028c0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8028bfa:	687b      	ldr	r3, [r7, #4]
 8028bfc:	681b      	ldr	r3, [r3, #0]
 8028bfe:	681a      	ldr	r2, [r3, #0]
 8028c00:	687b      	ldr	r3, [r7, #4]
 8028c02:	681b      	ldr	r3, [r3, #0]
 8028c04:	f022 0208 	bic.w	r2, r2, #8
 8028c08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8028c0a:	687b      	ldr	r3, [r7, #4]
 8028c0c:	681b      	ldr	r3, [r3, #0]
 8028c0e:	681a      	ldr	r2, [r3, #0]
 8028c10:	687b      	ldr	r3, [r7, #4]
 8028c12:	681b      	ldr	r3, [r3, #0]
 8028c14:	f022 0201 	bic.w	r2, r2, #1
 8028c18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8028c1a:	e013      	b.n	8028c44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8028c1c:	f7ff fdcc 	bl	80287b8 <HAL_GetTick>
 8028c20:	4602      	mov	r2, r0
 8028c22:	68bb      	ldr	r3, [r7, #8]
 8028c24:	1ad3      	subs	r3, r2, r3
 8028c26:	2b05      	cmp	r3, #5
 8028c28:	d90c      	bls.n	8028c44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8028c2a:	687b      	ldr	r3, [r7, #4]
 8028c2c:	2220      	movs	r2, #32
 8028c2e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8028c30:	687b      	ldr	r3, [r7, #4]
 8028c32:	2203      	movs	r2, #3
 8028c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8028c38:	687b      	ldr	r3, [r7, #4]
 8028c3a:	2200      	movs	r2, #0
 8028c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8028c40:	2303      	movs	r3, #3
 8028c42:	e015      	b.n	8028c70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8028c44:	687b      	ldr	r3, [r7, #4]
 8028c46:	681b      	ldr	r3, [r3, #0]
 8028c48:	681b      	ldr	r3, [r3, #0]
 8028c4a:	f003 0301 	and.w	r3, r3, #1
 8028c4e:	2b00      	cmp	r3, #0
 8028c50:	d1e4      	bne.n	8028c1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8028c52:	687b      	ldr	r3, [r7, #4]
 8028c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8028c56:	223f      	movs	r2, #63	@ 0x3f
 8028c58:	409a      	lsls	r2, r3
 8028c5a:	68fb      	ldr	r3, [r7, #12]
 8028c5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8028c5e:	687b      	ldr	r3, [r7, #4]
 8028c60:	2201      	movs	r2, #1
 8028c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8028c66:	687b      	ldr	r3, [r7, #4]
 8028c68:	2200      	movs	r2, #0
 8028c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8028c6e:	2300      	movs	r3, #0
}
 8028c70:	4618      	mov	r0, r3
 8028c72:	3710      	adds	r7, #16
 8028c74:	46bd      	mov	sp, r7
 8028c76:	bd80      	pop	{r7, pc}

08028c78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8028c78:	b480      	push	{r7}
 8028c7a:	b083      	sub	sp, #12
 8028c7c:	af00      	add	r7, sp, #0
 8028c7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8028c80:	687b      	ldr	r3, [r7, #4]
 8028c82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8028c86:	b2db      	uxtb	r3, r3
 8028c88:	2b02      	cmp	r3, #2
 8028c8a:	d004      	beq.n	8028c96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8028c8c:	687b      	ldr	r3, [r7, #4]
 8028c8e:	2280      	movs	r2, #128	@ 0x80
 8028c90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8028c92:	2301      	movs	r3, #1
 8028c94:	e00c      	b.n	8028cb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8028c96:	687b      	ldr	r3, [r7, #4]
 8028c98:	2205      	movs	r2, #5
 8028c9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8028c9e:	687b      	ldr	r3, [r7, #4]
 8028ca0:	681b      	ldr	r3, [r3, #0]
 8028ca2:	681a      	ldr	r2, [r3, #0]
 8028ca4:	687b      	ldr	r3, [r7, #4]
 8028ca6:	681b      	ldr	r3, [r3, #0]
 8028ca8:	f022 0201 	bic.w	r2, r2, #1
 8028cac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8028cae:	2300      	movs	r3, #0
}
 8028cb0:	4618      	mov	r0, r3
 8028cb2:	370c      	adds	r7, #12
 8028cb4:	46bd      	mov	sp, r7
 8028cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028cba:	4770      	bx	lr

08028cbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8028cbc:	b580      	push	{r7, lr}
 8028cbe:	b086      	sub	sp, #24
 8028cc0:	af00      	add	r7, sp, #0
 8028cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8028cc4:	2300      	movs	r3, #0
 8028cc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8028cc8:	4b8e      	ldr	r3, [pc, #568]	@ (8028f04 <HAL_DMA_IRQHandler+0x248>)
 8028cca:	681b      	ldr	r3, [r3, #0]
 8028ccc:	4a8e      	ldr	r2, [pc, #568]	@ (8028f08 <HAL_DMA_IRQHandler+0x24c>)
 8028cce:	fba2 2303 	umull	r2, r3, r2, r3
 8028cd2:	0a9b      	lsrs	r3, r3, #10
 8028cd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8028cd6:	687b      	ldr	r3, [r7, #4]
 8028cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8028cda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8028cdc:	693b      	ldr	r3, [r7, #16]
 8028cde:	681b      	ldr	r3, [r3, #0]
 8028ce0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8028ce2:	687b      	ldr	r3, [r7, #4]
 8028ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8028ce6:	2208      	movs	r2, #8
 8028ce8:	409a      	lsls	r2, r3
 8028cea:	68fb      	ldr	r3, [r7, #12]
 8028cec:	4013      	ands	r3, r2
 8028cee:	2b00      	cmp	r3, #0
 8028cf0:	d01a      	beq.n	8028d28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8028cf2:	687b      	ldr	r3, [r7, #4]
 8028cf4:	681b      	ldr	r3, [r3, #0]
 8028cf6:	681b      	ldr	r3, [r3, #0]
 8028cf8:	f003 0304 	and.w	r3, r3, #4
 8028cfc:	2b00      	cmp	r3, #0
 8028cfe:	d013      	beq.n	8028d28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8028d00:	687b      	ldr	r3, [r7, #4]
 8028d02:	681b      	ldr	r3, [r3, #0]
 8028d04:	681a      	ldr	r2, [r3, #0]
 8028d06:	687b      	ldr	r3, [r7, #4]
 8028d08:	681b      	ldr	r3, [r3, #0]
 8028d0a:	f022 0204 	bic.w	r2, r2, #4
 8028d0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8028d10:	687b      	ldr	r3, [r7, #4]
 8028d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8028d14:	2208      	movs	r2, #8
 8028d16:	409a      	lsls	r2, r3
 8028d18:	693b      	ldr	r3, [r7, #16]
 8028d1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8028d1c:	687b      	ldr	r3, [r7, #4]
 8028d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8028d20:	f043 0201 	orr.w	r2, r3, #1
 8028d24:	687b      	ldr	r3, [r7, #4]
 8028d26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8028d28:	687b      	ldr	r3, [r7, #4]
 8028d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8028d2c:	2201      	movs	r2, #1
 8028d2e:	409a      	lsls	r2, r3
 8028d30:	68fb      	ldr	r3, [r7, #12]
 8028d32:	4013      	ands	r3, r2
 8028d34:	2b00      	cmp	r3, #0
 8028d36:	d012      	beq.n	8028d5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8028d38:	687b      	ldr	r3, [r7, #4]
 8028d3a:	681b      	ldr	r3, [r3, #0]
 8028d3c:	695b      	ldr	r3, [r3, #20]
 8028d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8028d42:	2b00      	cmp	r3, #0
 8028d44:	d00b      	beq.n	8028d5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8028d46:	687b      	ldr	r3, [r7, #4]
 8028d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8028d4a:	2201      	movs	r2, #1
 8028d4c:	409a      	lsls	r2, r3
 8028d4e:	693b      	ldr	r3, [r7, #16]
 8028d50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8028d52:	687b      	ldr	r3, [r7, #4]
 8028d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8028d56:	f043 0202 	orr.w	r2, r3, #2
 8028d5a:	687b      	ldr	r3, [r7, #4]
 8028d5c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8028d5e:	687b      	ldr	r3, [r7, #4]
 8028d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8028d62:	2204      	movs	r2, #4
 8028d64:	409a      	lsls	r2, r3
 8028d66:	68fb      	ldr	r3, [r7, #12]
 8028d68:	4013      	ands	r3, r2
 8028d6a:	2b00      	cmp	r3, #0
 8028d6c:	d012      	beq.n	8028d94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8028d6e:	687b      	ldr	r3, [r7, #4]
 8028d70:	681b      	ldr	r3, [r3, #0]
 8028d72:	681b      	ldr	r3, [r3, #0]
 8028d74:	f003 0302 	and.w	r3, r3, #2
 8028d78:	2b00      	cmp	r3, #0
 8028d7a:	d00b      	beq.n	8028d94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8028d7c:	687b      	ldr	r3, [r7, #4]
 8028d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8028d80:	2204      	movs	r2, #4
 8028d82:	409a      	lsls	r2, r3
 8028d84:	693b      	ldr	r3, [r7, #16]
 8028d86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8028d88:	687b      	ldr	r3, [r7, #4]
 8028d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8028d8c:	f043 0204 	orr.w	r2, r3, #4
 8028d90:	687b      	ldr	r3, [r7, #4]
 8028d92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8028d94:	687b      	ldr	r3, [r7, #4]
 8028d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8028d98:	2210      	movs	r2, #16
 8028d9a:	409a      	lsls	r2, r3
 8028d9c:	68fb      	ldr	r3, [r7, #12]
 8028d9e:	4013      	ands	r3, r2
 8028da0:	2b00      	cmp	r3, #0
 8028da2:	d043      	beq.n	8028e2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8028da4:	687b      	ldr	r3, [r7, #4]
 8028da6:	681b      	ldr	r3, [r3, #0]
 8028da8:	681b      	ldr	r3, [r3, #0]
 8028daa:	f003 0308 	and.w	r3, r3, #8
 8028dae:	2b00      	cmp	r3, #0
 8028db0:	d03c      	beq.n	8028e2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8028db2:	687b      	ldr	r3, [r7, #4]
 8028db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8028db6:	2210      	movs	r2, #16
 8028db8:	409a      	lsls	r2, r3
 8028dba:	693b      	ldr	r3, [r7, #16]
 8028dbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8028dbe:	687b      	ldr	r3, [r7, #4]
 8028dc0:	681b      	ldr	r3, [r3, #0]
 8028dc2:	681b      	ldr	r3, [r3, #0]
 8028dc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8028dc8:	2b00      	cmp	r3, #0
 8028dca:	d018      	beq.n	8028dfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8028dcc:	687b      	ldr	r3, [r7, #4]
 8028dce:	681b      	ldr	r3, [r3, #0]
 8028dd0:	681b      	ldr	r3, [r3, #0]
 8028dd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8028dd6:	2b00      	cmp	r3, #0
 8028dd8:	d108      	bne.n	8028dec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8028dda:	687b      	ldr	r3, [r7, #4]
 8028ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028dde:	2b00      	cmp	r3, #0
 8028de0:	d024      	beq.n	8028e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8028de2:	687b      	ldr	r3, [r7, #4]
 8028de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028de6:	6878      	ldr	r0, [r7, #4]
 8028de8:	4798      	blx	r3
 8028dea:	e01f      	b.n	8028e2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8028dec:	687b      	ldr	r3, [r7, #4]
 8028dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8028df0:	2b00      	cmp	r3, #0
 8028df2:	d01b      	beq.n	8028e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8028df4:	687b      	ldr	r3, [r7, #4]
 8028df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8028df8:	6878      	ldr	r0, [r7, #4]
 8028dfa:	4798      	blx	r3
 8028dfc:	e016      	b.n	8028e2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8028dfe:	687b      	ldr	r3, [r7, #4]
 8028e00:	681b      	ldr	r3, [r3, #0]
 8028e02:	681b      	ldr	r3, [r3, #0]
 8028e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8028e08:	2b00      	cmp	r3, #0
 8028e0a:	d107      	bne.n	8028e1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8028e0c:	687b      	ldr	r3, [r7, #4]
 8028e0e:	681b      	ldr	r3, [r3, #0]
 8028e10:	681a      	ldr	r2, [r3, #0]
 8028e12:	687b      	ldr	r3, [r7, #4]
 8028e14:	681b      	ldr	r3, [r3, #0]
 8028e16:	f022 0208 	bic.w	r2, r2, #8
 8028e1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8028e1c:	687b      	ldr	r3, [r7, #4]
 8028e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028e20:	2b00      	cmp	r3, #0
 8028e22:	d003      	beq.n	8028e2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8028e24:	687b      	ldr	r3, [r7, #4]
 8028e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028e28:	6878      	ldr	r0, [r7, #4]
 8028e2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8028e2c:	687b      	ldr	r3, [r7, #4]
 8028e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8028e30:	2220      	movs	r2, #32
 8028e32:	409a      	lsls	r2, r3
 8028e34:	68fb      	ldr	r3, [r7, #12]
 8028e36:	4013      	ands	r3, r2
 8028e38:	2b00      	cmp	r3, #0
 8028e3a:	f000 808f 	beq.w	8028f5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8028e3e:	687b      	ldr	r3, [r7, #4]
 8028e40:	681b      	ldr	r3, [r3, #0]
 8028e42:	681b      	ldr	r3, [r3, #0]
 8028e44:	f003 0310 	and.w	r3, r3, #16
 8028e48:	2b00      	cmp	r3, #0
 8028e4a:	f000 8087 	beq.w	8028f5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8028e4e:	687b      	ldr	r3, [r7, #4]
 8028e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8028e52:	2220      	movs	r2, #32
 8028e54:	409a      	lsls	r2, r3
 8028e56:	693b      	ldr	r3, [r7, #16]
 8028e58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8028e5a:	687b      	ldr	r3, [r7, #4]
 8028e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8028e60:	b2db      	uxtb	r3, r3
 8028e62:	2b05      	cmp	r3, #5
 8028e64:	d136      	bne.n	8028ed4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8028e66:	687b      	ldr	r3, [r7, #4]
 8028e68:	681b      	ldr	r3, [r3, #0]
 8028e6a:	681a      	ldr	r2, [r3, #0]
 8028e6c:	687b      	ldr	r3, [r7, #4]
 8028e6e:	681b      	ldr	r3, [r3, #0]
 8028e70:	f022 0216 	bic.w	r2, r2, #22
 8028e74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8028e76:	687b      	ldr	r3, [r7, #4]
 8028e78:	681b      	ldr	r3, [r3, #0]
 8028e7a:	695a      	ldr	r2, [r3, #20]
 8028e7c:	687b      	ldr	r3, [r7, #4]
 8028e7e:	681b      	ldr	r3, [r3, #0]
 8028e80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8028e84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8028e86:	687b      	ldr	r3, [r7, #4]
 8028e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028e8a:	2b00      	cmp	r3, #0
 8028e8c:	d103      	bne.n	8028e96 <HAL_DMA_IRQHandler+0x1da>
 8028e8e:	687b      	ldr	r3, [r7, #4]
 8028e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8028e92:	2b00      	cmp	r3, #0
 8028e94:	d007      	beq.n	8028ea6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8028e96:	687b      	ldr	r3, [r7, #4]
 8028e98:	681b      	ldr	r3, [r3, #0]
 8028e9a:	681a      	ldr	r2, [r3, #0]
 8028e9c:	687b      	ldr	r3, [r7, #4]
 8028e9e:	681b      	ldr	r3, [r3, #0]
 8028ea0:	f022 0208 	bic.w	r2, r2, #8
 8028ea4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8028ea6:	687b      	ldr	r3, [r7, #4]
 8028ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8028eaa:	223f      	movs	r2, #63	@ 0x3f
 8028eac:	409a      	lsls	r2, r3
 8028eae:	693b      	ldr	r3, [r7, #16]
 8028eb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8028eb2:	687b      	ldr	r3, [r7, #4]
 8028eb4:	2201      	movs	r2, #1
 8028eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8028eba:	687b      	ldr	r3, [r7, #4]
 8028ebc:	2200      	movs	r2, #0
 8028ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8028ec2:	687b      	ldr	r3, [r7, #4]
 8028ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8028ec6:	2b00      	cmp	r3, #0
 8028ec8:	d07e      	beq.n	8028fc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8028eca:	687b      	ldr	r3, [r7, #4]
 8028ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8028ece:	6878      	ldr	r0, [r7, #4]
 8028ed0:	4798      	blx	r3
        }
        return;
 8028ed2:	e079      	b.n	8028fc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8028ed4:	687b      	ldr	r3, [r7, #4]
 8028ed6:	681b      	ldr	r3, [r3, #0]
 8028ed8:	681b      	ldr	r3, [r3, #0]
 8028eda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8028ede:	2b00      	cmp	r3, #0
 8028ee0:	d01d      	beq.n	8028f1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8028ee2:	687b      	ldr	r3, [r7, #4]
 8028ee4:	681b      	ldr	r3, [r3, #0]
 8028ee6:	681b      	ldr	r3, [r3, #0]
 8028ee8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8028eec:	2b00      	cmp	r3, #0
 8028eee:	d10d      	bne.n	8028f0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8028ef0:	687b      	ldr	r3, [r7, #4]
 8028ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8028ef4:	2b00      	cmp	r3, #0
 8028ef6:	d031      	beq.n	8028f5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8028ef8:	687b      	ldr	r3, [r7, #4]
 8028efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8028efc:	6878      	ldr	r0, [r7, #4]
 8028efe:	4798      	blx	r3
 8028f00:	e02c      	b.n	8028f5c <HAL_DMA_IRQHandler+0x2a0>
 8028f02:	bf00      	nop
 8028f04:	20000004 	.word	0x20000004
 8028f08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8028f0c:	687b      	ldr	r3, [r7, #4]
 8028f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8028f10:	2b00      	cmp	r3, #0
 8028f12:	d023      	beq.n	8028f5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8028f14:	687b      	ldr	r3, [r7, #4]
 8028f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8028f18:	6878      	ldr	r0, [r7, #4]
 8028f1a:	4798      	blx	r3
 8028f1c:	e01e      	b.n	8028f5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8028f1e:	687b      	ldr	r3, [r7, #4]
 8028f20:	681b      	ldr	r3, [r3, #0]
 8028f22:	681b      	ldr	r3, [r3, #0]
 8028f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8028f28:	2b00      	cmp	r3, #0
 8028f2a:	d10f      	bne.n	8028f4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8028f2c:	687b      	ldr	r3, [r7, #4]
 8028f2e:	681b      	ldr	r3, [r3, #0]
 8028f30:	681a      	ldr	r2, [r3, #0]
 8028f32:	687b      	ldr	r3, [r7, #4]
 8028f34:	681b      	ldr	r3, [r3, #0]
 8028f36:	f022 0210 	bic.w	r2, r2, #16
 8028f3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8028f3c:	687b      	ldr	r3, [r7, #4]
 8028f3e:	2201      	movs	r2, #1
 8028f40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8028f44:	687b      	ldr	r3, [r7, #4]
 8028f46:	2200      	movs	r2, #0
 8028f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8028f4c:	687b      	ldr	r3, [r7, #4]
 8028f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8028f50:	2b00      	cmp	r3, #0
 8028f52:	d003      	beq.n	8028f5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8028f54:	687b      	ldr	r3, [r7, #4]
 8028f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8028f58:	6878      	ldr	r0, [r7, #4]
 8028f5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8028f5c:	687b      	ldr	r3, [r7, #4]
 8028f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8028f60:	2b00      	cmp	r3, #0
 8028f62:	d032      	beq.n	8028fca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8028f64:	687b      	ldr	r3, [r7, #4]
 8028f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8028f68:	f003 0301 	and.w	r3, r3, #1
 8028f6c:	2b00      	cmp	r3, #0
 8028f6e:	d022      	beq.n	8028fb6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8028f70:	687b      	ldr	r3, [r7, #4]
 8028f72:	2205      	movs	r2, #5
 8028f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8028f78:	687b      	ldr	r3, [r7, #4]
 8028f7a:	681b      	ldr	r3, [r3, #0]
 8028f7c:	681a      	ldr	r2, [r3, #0]
 8028f7e:	687b      	ldr	r3, [r7, #4]
 8028f80:	681b      	ldr	r3, [r3, #0]
 8028f82:	f022 0201 	bic.w	r2, r2, #1
 8028f86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8028f88:	68bb      	ldr	r3, [r7, #8]
 8028f8a:	3301      	adds	r3, #1
 8028f8c:	60bb      	str	r3, [r7, #8]
 8028f8e:	697a      	ldr	r2, [r7, #20]
 8028f90:	429a      	cmp	r2, r3
 8028f92:	d307      	bcc.n	8028fa4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8028f94:	687b      	ldr	r3, [r7, #4]
 8028f96:	681b      	ldr	r3, [r3, #0]
 8028f98:	681b      	ldr	r3, [r3, #0]
 8028f9a:	f003 0301 	and.w	r3, r3, #1
 8028f9e:	2b00      	cmp	r3, #0
 8028fa0:	d1f2      	bne.n	8028f88 <HAL_DMA_IRQHandler+0x2cc>
 8028fa2:	e000      	b.n	8028fa6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8028fa4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8028fa6:	687b      	ldr	r3, [r7, #4]
 8028fa8:	2201      	movs	r2, #1
 8028faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8028fae:	687b      	ldr	r3, [r7, #4]
 8028fb0:	2200      	movs	r2, #0
 8028fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8028fb6:	687b      	ldr	r3, [r7, #4]
 8028fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8028fba:	2b00      	cmp	r3, #0
 8028fbc:	d005      	beq.n	8028fca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8028fbe:	687b      	ldr	r3, [r7, #4]
 8028fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8028fc2:	6878      	ldr	r0, [r7, #4]
 8028fc4:	4798      	blx	r3
 8028fc6:	e000      	b.n	8028fca <HAL_DMA_IRQHandler+0x30e>
        return;
 8028fc8:	bf00      	nop
    }
  }
}
 8028fca:	3718      	adds	r7, #24
 8028fcc:	46bd      	mov	sp, r7
 8028fce:	bd80      	pop	{r7, pc}

08028fd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8028fd0:	b480      	push	{r7}
 8028fd2:	b085      	sub	sp, #20
 8028fd4:	af00      	add	r7, sp, #0
 8028fd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8028fd8:	687b      	ldr	r3, [r7, #4]
 8028fda:	681b      	ldr	r3, [r3, #0]
 8028fdc:	b2db      	uxtb	r3, r3
 8028fde:	3b10      	subs	r3, #16
 8028fe0:	4a14      	ldr	r2, [pc, #80]	@ (8029034 <DMA_CalcBaseAndBitshift+0x64>)
 8028fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8028fe6:	091b      	lsrs	r3, r3, #4
 8028fe8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8028fea:	4a13      	ldr	r2, [pc, #76]	@ (8029038 <DMA_CalcBaseAndBitshift+0x68>)
 8028fec:	68fb      	ldr	r3, [r7, #12]
 8028fee:	4413      	add	r3, r2
 8028ff0:	781b      	ldrb	r3, [r3, #0]
 8028ff2:	461a      	mov	r2, r3
 8028ff4:	687b      	ldr	r3, [r7, #4]
 8028ff6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8028ff8:	68fb      	ldr	r3, [r7, #12]
 8028ffa:	2b03      	cmp	r3, #3
 8028ffc:	d909      	bls.n	8029012 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8028ffe:	687b      	ldr	r3, [r7, #4]
 8029000:	681b      	ldr	r3, [r3, #0]
 8029002:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8029006:	f023 0303 	bic.w	r3, r3, #3
 802900a:	1d1a      	adds	r2, r3, #4
 802900c:	687b      	ldr	r3, [r7, #4]
 802900e:	659a      	str	r2, [r3, #88]	@ 0x58
 8029010:	e007      	b.n	8029022 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8029012:	687b      	ldr	r3, [r7, #4]
 8029014:	681b      	ldr	r3, [r3, #0]
 8029016:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 802901a:	f023 0303 	bic.w	r3, r3, #3
 802901e:	687a      	ldr	r2, [r7, #4]
 8029020:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8029022:	687b      	ldr	r3, [r7, #4]
 8029024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8029026:	4618      	mov	r0, r3
 8029028:	3714      	adds	r7, #20
 802902a:	46bd      	mov	sp, r7
 802902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029030:	4770      	bx	lr
 8029032:	bf00      	nop
 8029034:	aaaaaaab 	.word	0xaaaaaaab
 8029038:	0802e3e4 	.word	0x0802e3e4

0802903c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 802903c:	b480      	push	{r7}
 802903e:	b085      	sub	sp, #20
 8029040:	af00      	add	r7, sp, #0
 8029042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8029044:	2300      	movs	r3, #0
 8029046:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8029048:	687b      	ldr	r3, [r7, #4]
 802904a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802904c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802904e:	687b      	ldr	r3, [r7, #4]
 8029050:	699b      	ldr	r3, [r3, #24]
 8029052:	2b00      	cmp	r3, #0
 8029054:	d11f      	bne.n	8029096 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8029056:	68bb      	ldr	r3, [r7, #8]
 8029058:	2b03      	cmp	r3, #3
 802905a:	d856      	bhi.n	802910a <DMA_CheckFifoParam+0xce>
 802905c:	a201      	add	r2, pc, #4	@ (adr r2, 8029064 <DMA_CheckFifoParam+0x28>)
 802905e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029062:	bf00      	nop
 8029064:	08029075 	.word	0x08029075
 8029068:	08029087 	.word	0x08029087
 802906c:	08029075 	.word	0x08029075
 8029070:	0802910b 	.word	0x0802910b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8029074:	687b      	ldr	r3, [r7, #4]
 8029076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029078:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 802907c:	2b00      	cmp	r3, #0
 802907e:	d046      	beq.n	802910e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8029080:	2301      	movs	r3, #1
 8029082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8029084:	e043      	b.n	802910e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8029086:	687b      	ldr	r3, [r7, #4]
 8029088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802908a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 802908e:	d140      	bne.n	8029112 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8029090:	2301      	movs	r3, #1
 8029092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8029094:	e03d      	b.n	8029112 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8029096:	687b      	ldr	r3, [r7, #4]
 8029098:	699b      	ldr	r3, [r3, #24]
 802909a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802909e:	d121      	bne.n	80290e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80290a0:	68bb      	ldr	r3, [r7, #8]
 80290a2:	2b03      	cmp	r3, #3
 80290a4:	d837      	bhi.n	8029116 <DMA_CheckFifoParam+0xda>
 80290a6:	a201      	add	r2, pc, #4	@ (adr r2, 80290ac <DMA_CheckFifoParam+0x70>)
 80290a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80290ac:	080290bd 	.word	0x080290bd
 80290b0:	080290c3 	.word	0x080290c3
 80290b4:	080290bd 	.word	0x080290bd
 80290b8:	080290d5 	.word	0x080290d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80290bc:	2301      	movs	r3, #1
 80290be:	73fb      	strb	r3, [r7, #15]
      break;
 80290c0:	e030      	b.n	8029124 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80290c2:	687b      	ldr	r3, [r7, #4]
 80290c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80290c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80290ca:	2b00      	cmp	r3, #0
 80290cc:	d025      	beq.n	802911a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80290ce:	2301      	movs	r3, #1
 80290d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80290d2:	e022      	b.n	802911a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80290d4:	687b      	ldr	r3, [r7, #4]
 80290d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80290d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80290dc:	d11f      	bne.n	802911e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80290de:	2301      	movs	r3, #1
 80290e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80290e2:	e01c      	b.n	802911e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80290e4:	68bb      	ldr	r3, [r7, #8]
 80290e6:	2b02      	cmp	r3, #2
 80290e8:	d903      	bls.n	80290f2 <DMA_CheckFifoParam+0xb6>
 80290ea:	68bb      	ldr	r3, [r7, #8]
 80290ec:	2b03      	cmp	r3, #3
 80290ee:	d003      	beq.n	80290f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80290f0:	e018      	b.n	8029124 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80290f2:	2301      	movs	r3, #1
 80290f4:	73fb      	strb	r3, [r7, #15]
      break;
 80290f6:	e015      	b.n	8029124 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80290f8:	687b      	ldr	r3, [r7, #4]
 80290fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80290fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8029100:	2b00      	cmp	r3, #0
 8029102:	d00e      	beq.n	8029122 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8029104:	2301      	movs	r3, #1
 8029106:	73fb      	strb	r3, [r7, #15]
      break;
 8029108:	e00b      	b.n	8029122 <DMA_CheckFifoParam+0xe6>
      break;
 802910a:	bf00      	nop
 802910c:	e00a      	b.n	8029124 <DMA_CheckFifoParam+0xe8>
      break;
 802910e:	bf00      	nop
 8029110:	e008      	b.n	8029124 <DMA_CheckFifoParam+0xe8>
      break;
 8029112:	bf00      	nop
 8029114:	e006      	b.n	8029124 <DMA_CheckFifoParam+0xe8>
      break;
 8029116:	bf00      	nop
 8029118:	e004      	b.n	8029124 <DMA_CheckFifoParam+0xe8>
      break;
 802911a:	bf00      	nop
 802911c:	e002      	b.n	8029124 <DMA_CheckFifoParam+0xe8>
      break;   
 802911e:	bf00      	nop
 8029120:	e000      	b.n	8029124 <DMA_CheckFifoParam+0xe8>
      break;
 8029122:	bf00      	nop
    }
  } 
  
  return status; 
 8029124:	7bfb      	ldrb	r3, [r7, #15]
}
 8029126:	4618      	mov	r0, r3
 8029128:	3714      	adds	r7, #20
 802912a:	46bd      	mov	sp, r7
 802912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029130:	4770      	bx	lr
 8029132:	bf00      	nop

08029134 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8029134:	b580      	push	{r7, lr}
 8029136:	b086      	sub	sp, #24
 8029138:	af00      	add	r7, sp, #0
 802913a:	60f8      	str	r0, [r7, #12]
 802913c:	60b9      	str	r1, [r7, #8]
 802913e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8029142:	4b23      	ldr	r3, [pc, #140]	@ (80291d0 <HAL_FLASH_Program+0x9c>)
 8029144:	7e1b      	ldrb	r3, [r3, #24]
 8029146:	2b01      	cmp	r3, #1
 8029148:	d101      	bne.n	802914e <HAL_FLASH_Program+0x1a>
 802914a:	2302      	movs	r3, #2
 802914c:	e03b      	b.n	80291c6 <HAL_FLASH_Program+0x92>
 802914e:	4b20      	ldr	r3, [pc, #128]	@ (80291d0 <HAL_FLASH_Program+0x9c>)
 8029150:	2201      	movs	r2, #1
 8029152:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8029154:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8029158:	f000 f870 	bl	802923c <FLASH_WaitForLastOperation>
 802915c:	4603      	mov	r3, r0
 802915e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8029160:	7dfb      	ldrb	r3, [r7, #23]
 8029162:	2b00      	cmp	r3, #0
 8029164:	d12b      	bne.n	80291be <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8029166:	68fb      	ldr	r3, [r7, #12]
 8029168:	2b00      	cmp	r3, #0
 802916a:	d105      	bne.n	8029178 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 802916c:	783b      	ldrb	r3, [r7, #0]
 802916e:	4619      	mov	r1, r3
 8029170:	68b8      	ldr	r0, [r7, #8]
 8029172:	f000 f91b 	bl	80293ac <FLASH_Program_Byte>
 8029176:	e016      	b.n	80291a6 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8029178:	68fb      	ldr	r3, [r7, #12]
 802917a:	2b01      	cmp	r3, #1
 802917c:	d105      	bne.n	802918a <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 802917e:	883b      	ldrh	r3, [r7, #0]
 8029180:	4619      	mov	r1, r3
 8029182:	68b8      	ldr	r0, [r7, #8]
 8029184:	f000 f8ee 	bl	8029364 <FLASH_Program_HalfWord>
 8029188:	e00d      	b.n	80291a6 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 802918a:	68fb      	ldr	r3, [r7, #12]
 802918c:	2b02      	cmp	r3, #2
 802918e:	d105      	bne.n	802919c <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8029190:	683b      	ldr	r3, [r7, #0]
 8029192:	4619      	mov	r1, r3
 8029194:	68b8      	ldr	r0, [r7, #8]
 8029196:	f000 f8c3 	bl	8029320 <FLASH_Program_Word>
 802919a:	e004      	b.n	80291a6 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 802919c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80291a0:	68b8      	ldr	r0, [r7, #8]
 80291a2:	f000 f88b 	bl	80292bc <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80291a6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80291aa:	f000 f847 	bl	802923c <FLASH_WaitForLastOperation>
 80291ae:	4603      	mov	r3, r0
 80291b0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80291b2:	4b08      	ldr	r3, [pc, #32]	@ (80291d4 <HAL_FLASH_Program+0xa0>)
 80291b4:	691b      	ldr	r3, [r3, #16]
 80291b6:	4a07      	ldr	r2, [pc, #28]	@ (80291d4 <HAL_FLASH_Program+0xa0>)
 80291b8:	f023 0301 	bic.w	r3, r3, #1
 80291bc:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80291be:	4b04      	ldr	r3, [pc, #16]	@ (80291d0 <HAL_FLASH_Program+0x9c>)
 80291c0:	2200      	movs	r2, #0
 80291c2:	761a      	strb	r2, [r3, #24]

  return status;
 80291c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80291c6:	4618      	mov	r0, r3
 80291c8:	3718      	adds	r7, #24
 80291ca:	46bd      	mov	sp, r7
 80291cc:	bd80      	pop	{r7, pc}
 80291ce:	bf00      	nop
 80291d0:	20000010 	.word	0x20000010
 80291d4:	40023c00 	.word	0x40023c00

080291d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80291d8:	b480      	push	{r7}
 80291da:	b083      	sub	sp, #12
 80291dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80291de:	2300      	movs	r3, #0
 80291e0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80291e2:	4b0b      	ldr	r3, [pc, #44]	@ (8029210 <HAL_FLASH_Unlock+0x38>)
 80291e4:	691b      	ldr	r3, [r3, #16]
 80291e6:	2b00      	cmp	r3, #0
 80291e8:	da0b      	bge.n	8029202 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80291ea:	4b09      	ldr	r3, [pc, #36]	@ (8029210 <HAL_FLASH_Unlock+0x38>)
 80291ec:	4a09      	ldr	r2, [pc, #36]	@ (8029214 <HAL_FLASH_Unlock+0x3c>)
 80291ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80291f0:	4b07      	ldr	r3, [pc, #28]	@ (8029210 <HAL_FLASH_Unlock+0x38>)
 80291f2:	4a09      	ldr	r2, [pc, #36]	@ (8029218 <HAL_FLASH_Unlock+0x40>)
 80291f4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80291f6:	4b06      	ldr	r3, [pc, #24]	@ (8029210 <HAL_FLASH_Unlock+0x38>)
 80291f8:	691b      	ldr	r3, [r3, #16]
 80291fa:	2b00      	cmp	r3, #0
 80291fc:	da01      	bge.n	8029202 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80291fe:	2301      	movs	r3, #1
 8029200:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8029202:	79fb      	ldrb	r3, [r7, #7]
}
 8029204:	4618      	mov	r0, r3
 8029206:	370c      	adds	r7, #12
 8029208:	46bd      	mov	sp, r7
 802920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802920e:	4770      	bx	lr
 8029210:	40023c00 	.word	0x40023c00
 8029214:	45670123 	.word	0x45670123
 8029218:	cdef89ab 	.word	0xcdef89ab

0802921c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 802921c:	b480      	push	{r7}
 802921e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8029220:	4b05      	ldr	r3, [pc, #20]	@ (8029238 <HAL_FLASH_Lock+0x1c>)
 8029222:	691b      	ldr	r3, [r3, #16]
 8029224:	4a04      	ldr	r2, [pc, #16]	@ (8029238 <HAL_FLASH_Lock+0x1c>)
 8029226:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 802922a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 802922c:	2300      	movs	r3, #0
}
 802922e:	4618      	mov	r0, r3
 8029230:	46bd      	mov	sp, r7
 8029232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029236:	4770      	bx	lr
 8029238:	40023c00 	.word	0x40023c00

0802923c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 802923c:	b580      	push	{r7, lr}
 802923e:	b084      	sub	sp, #16
 8029240:	af00      	add	r7, sp, #0
 8029242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8029244:	2300      	movs	r3, #0
 8029246:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8029248:	4b1a      	ldr	r3, [pc, #104]	@ (80292b4 <FLASH_WaitForLastOperation+0x78>)
 802924a:	2200      	movs	r2, #0
 802924c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 802924e:	f7ff fab3 	bl	80287b8 <HAL_GetTick>
 8029252:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8029254:	e010      	b.n	8029278 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8029256:	687b      	ldr	r3, [r7, #4]
 8029258:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802925c:	d00c      	beq.n	8029278 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 802925e:	687b      	ldr	r3, [r7, #4]
 8029260:	2b00      	cmp	r3, #0
 8029262:	d007      	beq.n	8029274 <FLASH_WaitForLastOperation+0x38>
 8029264:	f7ff faa8 	bl	80287b8 <HAL_GetTick>
 8029268:	4602      	mov	r2, r0
 802926a:	68fb      	ldr	r3, [r7, #12]
 802926c:	1ad3      	subs	r3, r2, r3
 802926e:	687a      	ldr	r2, [r7, #4]
 8029270:	429a      	cmp	r2, r3
 8029272:	d201      	bcs.n	8029278 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8029274:	2303      	movs	r3, #3
 8029276:	e019      	b.n	80292ac <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8029278:	4b0f      	ldr	r3, [pc, #60]	@ (80292b8 <FLASH_WaitForLastOperation+0x7c>)
 802927a:	68db      	ldr	r3, [r3, #12]
 802927c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8029280:	2b00      	cmp	r3, #0
 8029282:	d1e8      	bne.n	8029256 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8029284:	4b0c      	ldr	r3, [pc, #48]	@ (80292b8 <FLASH_WaitForLastOperation+0x7c>)
 8029286:	68db      	ldr	r3, [r3, #12]
 8029288:	f003 0301 	and.w	r3, r3, #1
 802928c:	2b00      	cmp	r3, #0
 802928e:	d002      	beq.n	8029296 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8029290:	4b09      	ldr	r3, [pc, #36]	@ (80292b8 <FLASH_WaitForLastOperation+0x7c>)
 8029292:	2201      	movs	r2, #1
 8029294:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8029296:	4b08      	ldr	r3, [pc, #32]	@ (80292b8 <FLASH_WaitForLastOperation+0x7c>)
 8029298:	68db      	ldr	r3, [r3, #12]
 802929a:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 802929e:	2b00      	cmp	r3, #0
 80292a0:	d003      	beq.n	80292aa <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80292a2:	f000 f8a5 	bl	80293f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80292a6:	2301      	movs	r3, #1
 80292a8:	e000      	b.n	80292ac <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80292aa:	2300      	movs	r3, #0

}
 80292ac:	4618      	mov	r0, r3
 80292ae:	3710      	adds	r7, #16
 80292b0:	46bd      	mov	sp, r7
 80292b2:	bd80      	pop	{r7, pc}
 80292b4:	20000010 	.word	0x20000010
 80292b8:	40023c00 	.word	0x40023c00

080292bc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80292bc:	b480      	push	{r7}
 80292be:	b085      	sub	sp, #20
 80292c0:	af00      	add	r7, sp, #0
 80292c2:	60f8      	str	r0, [r7, #12]
 80292c4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80292c8:	4b14      	ldr	r3, [pc, #80]	@ (802931c <FLASH_Program_DoubleWord+0x60>)
 80292ca:	691b      	ldr	r3, [r3, #16]
 80292cc:	4a13      	ldr	r2, [pc, #76]	@ (802931c <FLASH_Program_DoubleWord+0x60>)
 80292ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80292d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80292d4:	4b11      	ldr	r3, [pc, #68]	@ (802931c <FLASH_Program_DoubleWord+0x60>)
 80292d6:	691b      	ldr	r3, [r3, #16]
 80292d8:	4a10      	ldr	r2, [pc, #64]	@ (802931c <FLASH_Program_DoubleWord+0x60>)
 80292da:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80292de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80292e0:	4b0e      	ldr	r3, [pc, #56]	@ (802931c <FLASH_Program_DoubleWord+0x60>)
 80292e2:	691b      	ldr	r3, [r3, #16]
 80292e4:	4a0d      	ldr	r2, [pc, #52]	@ (802931c <FLASH_Program_DoubleWord+0x60>)
 80292e6:	f043 0301 	orr.w	r3, r3, #1
 80292ea:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80292ec:	68fb      	ldr	r3, [r7, #12]
 80292ee:	683a      	ldr	r2, [r7, #0]
 80292f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80292f2:	f3bf 8f6f 	isb	sy
}
 80292f6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80292f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80292fc:	f04f 0200 	mov.w	r2, #0
 8029300:	f04f 0300 	mov.w	r3, #0
 8029304:	000a      	movs	r2, r1
 8029306:	2300      	movs	r3, #0
 8029308:	68f9      	ldr	r1, [r7, #12]
 802930a:	3104      	adds	r1, #4
 802930c:	4613      	mov	r3, r2
 802930e:	600b      	str	r3, [r1, #0]
}
 8029310:	bf00      	nop
 8029312:	3714      	adds	r7, #20
 8029314:	46bd      	mov	sp, r7
 8029316:	f85d 7b04 	ldr.w	r7, [sp], #4
 802931a:	4770      	bx	lr
 802931c:	40023c00 	.word	0x40023c00

08029320 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8029320:	b480      	push	{r7}
 8029322:	b083      	sub	sp, #12
 8029324:	af00      	add	r7, sp, #0
 8029326:	6078      	str	r0, [r7, #4]
 8029328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802932a:	4b0d      	ldr	r3, [pc, #52]	@ (8029360 <FLASH_Program_Word+0x40>)
 802932c:	691b      	ldr	r3, [r3, #16]
 802932e:	4a0c      	ldr	r2, [pc, #48]	@ (8029360 <FLASH_Program_Word+0x40>)
 8029330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8029334:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8029336:	4b0a      	ldr	r3, [pc, #40]	@ (8029360 <FLASH_Program_Word+0x40>)
 8029338:	691b      	ldr	r3, [r3, #16]
 802933a:	4a09      	ldr	r2, [pc, #36]	@ (8029360 <FLASH_Program_Word+0x40>)
 802933c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8029340:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8029342:	4b07      	ldr	r3, [pc, #28]	@ (8029360 <FLASH_Program_Word+0x40>)
 8029344:	691b      	ldr	r3, [r3, #16]
 8029346:	4a06      	ldr	r2, [pc, #24]	@ (8029360 <FLASH_Program_Word+0x40>)
 8029348:	f043 0301 	orr.w	r3, r3, #1
 802934c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 802934e:	687b      	ldr	r3, [r7, #4]
 8029350:	683a      	ldr	r2, [r7, #0]
 8029352:	601a      	str	r2, [r3, #0]
}
 8029354:	bf00      	nop
 8029356:	370c      	adds	r7, #12
 8029358:	46bd      	mov	sp, r7
 802935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802935e:	4770      	bx	lr
 8029360:	40023c00 	.word	0x40023c00

08029364 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8029364:	b480      	push	{r7}
 8029366:	b083      	sub	sp, #12
 8029368:	af00      	add	r7, sp, #0
 802936a:	6078      	str	r0, [r7, #4]
 802936c:	460b      	mov	r3, r1
 802936e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8029370:	4b0d      	ldr	r3, [pc, #52]	@ (80293a8 <FLASH_Program_HalfWord+0x44>)
 8029372:	691b      	ldr	r3, [r3, #16]
 8029374:	4a0c      	ldr	r2, [pc, #48]	@ (80293a8 <FLASH_Program_HalfWord+0x44>)
 8029376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802937a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 802937c:	4b0a      	ldr	r3, [pc, #40]	@ (80293a8 <FLASH_Program_HalfWord+0x44>)
 802937e:	691b      	ldr	r3, [r3, #16]
 8029380:	4a09      	ldr	r2, [pc, #36]	@ (80293a8 <FLASH_Program_HalfWord+0x44>)
 8029382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8029386:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8029388:	4b07      	ldr	r3, [pc, #28]	@ (80293a8 <FLASH_Program_HalfWord+0x44>)
 802938a:	691b      	ldr	r3, [r3, #16]
 802938c:	4a06      	ldr	r2, [pc, #24]	@ (80293a8 <FLASH_Program_HalfWord+0x44>)
 802938e:	f043 0301 	orr.w	r3, r3, #1
 8029392:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8029394:	687b      	ldr	r3, [r7, #4]
 8029396:	887a      	ldrh	r2, [r7, #2]
 8029398:	801a      	strh	r2, [r3, #0]
}
 802939a:	bf00      	nop
 802939c:	370c      	adds	r7, #12
 802939e:	46bd      	mov	sp, r7
 80293a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293a4:	4770      	bx	lr
 80293a6:	bf00      	nop
 80293a8:	40023c00 	.word	0x40023c00

080293ac <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80293ac:	b480      	push	{r7}
 80293ae:	b083      	sub	sp, #12
 80293b0:	af00      	add	r7, sp, #0
 80293b2:	6078      	str	r0, [r7, #4]
 80293b4:	460b      	mov	r3, r1
 80293b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80293b8:	4b0c      	ldr	r3, [pc, #48]	@ (80293ec <FLASH_Program_Byte+0x40>)
 80293ba:	691b      	ldr	r3, [r3, #16]
 80293bc:	4a0b      	ldr	r2, [pc, #44]	@ (80293ec <FLASH_Program_Byte+0x40>)
 80293be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80293c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80293c4:	4b09      	ldr	r3, [pc, #36]	@ (80293ec <FLASH_Program_Byte+0x40>)
 80293c6:	4a09      	ldr	r2, [pc, #36]	@ (80293ec <FLASH_Program_Byte+0x40>)
 80293c8:	691b      	ldr	r3, [r3, #16]
 80293ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80293cc:	4b07      	ldr	r3, [pc, #28]	@ (80293ec <FLASH_Program_Byte+0x40>)
 80293ce:	691b      	ldr	r3, [r3, #16]
 80293d0:	4a06      	ldr	r2, [pc, #24]	@ (80293ec <FLASH_Program_Byte+0x40>)
 80293d2:	f043 0301 	orr.w	r3, r3, #1
 80293d6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80293d8:	687b      	ldr	r3, [r7, #4]
 80293da:	78fa      	ldrb	r2, [r7, #3]
 80293dc:	701a      	strb	r2, [r3, #0]
}
 80293de:	bf00      	nop
 80293e0:	370c      	adds	r7, #12
 80293e2:	46bd      	mov	sp, r7
 80293e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293e8:	4770      	bx	lr
 80293ea:	bf00      	nop
 80293ec:	40023c00 	.word	0x40023c00

080293f0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80293f0:	b480      	push	{r7}
 80293f2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80293f4:	4b27      	ldr	r3, [pc, #156]	@ (8029494 <FLASH_SetErrorCode+0xa4>)
 80293f6:	68db      	ldr	r3, [r3, #12]
 80293f8:	f003 0310 	and.w	r3, r3, #16
 80293fc:	2b00      	cmp	r3, #0
 80293fe:	d008      	beq.n	8029412 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8029400:	4b25      	ldr	r3, [pc, #148]	@ (8029498 <FLASH_SetErrorCode+0xa8>)
 8029402:	69db      	ldr	r3, [r3, #28]
 8029404:	f043 0310 	orr.w	r3, r3, #16
 8029408:	4a23      	ldr	r2, [pc, #140]	@ (8029498 <FLASH_SetErrorCode+0xa8>)
 802940a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 802940c:	4b21      	ldr	r3, [pc, #132]	@ (8029494 <FLASH_SetErrorCode+0xa4>)
 802940e:	2210      	movs	r2, #16
 8029410:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8029412:	4b20      	ldr	r3, [pc, #128]	@ (8029494 <FLASH_SetErrorCode+0xa4>)
 8029414:	68db      	ldr	r3, [r3, #12]
 8029416:	f003 0320 	and.w	r3, r3, #32
 802941a:	2b00      	cmp	r3, #0
 802941c:	d008      	beq.n	8029430 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 802941e:	4b1e      	ldr	r3, [pc, #120]	@ (8029498 <FLASH_SetErrorCode+0xa8>)
 8029420:	69db      	ldr	r3, [r3, #28]
 8029422:	f043 0308 	orr.w	r3, r3, #8
 8029426:	4a1c      	ldr	r2, [pc, #112]	@ (8029498 <FLASH_SetErrorCode+0xa8>)
 8029428:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 802942a:	4b1a      	ldr	r3, [pc, #104]	@ (8029494 <FLASH_SetErrorCode+0xa4>)
 802942c:	2220      	movs	r2, #32
 802942e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8029430:	4b18      	ldr	r3, [pc, #96]	@ (8029494 <FLASH_SetErrorCode+0xa4>)
 8029432:	68db      	ldr	r3, [r3, #12]
 8029434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8029438:	2b00      	cmp	r3, #0
 802943a:	d008      	beq.n	802944e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 802943c:	4b16      	ldr	r3, [pc, #88]	@ (8029498 <FLASH_SetErrorCode+0xa8>)
 802943e:	69db      	ldr	r3, [r3, #28]
 8029440:	f043 0304 	orr.w	r3, r3, #4
 8029444:	4a14      	ldr	r2, [pc, #80]	@ (8029498 <FLASH_SetErrorCode+0xa8>)
 8029446:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8029448:	4b12      	ldr	r3, [pc, #72]	@ (8029494 <FLASH_SetErrorCode+0xa4>)
 802944a:	2240      	movs	r2, #64	@ 0x40
 802944c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 802944e:	4b11      	ldr	r3, [pc, #68]	@ (8029494 <FLASH_SetErrorCode+0xa4>)
 8029450:	68db      	ldr	r3, [r3, #12]
 8029452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8029456:	2b00      	cmp	r3, #0
 8029458:	d008      	beq.n	802946c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 802945a:	4b0f      	ldr	r3, [pc, #60]	@ (8029498 <FLASH_SetErrorCode+0xa8>)
 802945c:	69db      	ldr	r3, [r3, #28]
 802945e:	f043 0302 	orr.w	r3, r3, #2
 8029462:	4a0d      	ldr	r2, [pc, #52]	@ (8029498 <FLASH_SetErrorCode+0xa8>)
 8029464:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8029466:	4b0b      	ldr	r3, [pc, #44]	@ (8029494 <FLASH_SetErrorCode+0xa4>)
 8029468:	2280      	movs	r2, #128	@ 0x80
 802946a:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 802946c:	4b09      	ldr	r3, [pc, #36]	@ (8029494 <FLASH_SetErrorCode+0xa4>)
 802946e:	68db      	ldr	r3, [r3, #12]
 8029470:	f003 0302 	and.w	r3, r3, #2
 8029474:	2b00      	cmp	r3, #0
 8029476:	d008      	beq.n	802948a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8029478:	4b07      	ldr	r3, [pc, #28]	@ (8029498 <FLASH_SetErrorCode+0xa8>)
 802947a:	69db      	ldr	r3, [r3, #28]
 802947c:	f043 0320 	orr.w	r3, r3, #32
 8029480:	4a05      	ldr	r2, [pc, #20]	@ (8029498 <FLASH_SetErrorCode+0xa8>)
 8029482:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8029484:	4b03      	ldr	r3, [pc, #12]	@ (8029494 <FLASH_SetErrorCode+0xa4>)
 8029486:	2202      	movs	r2, #2
 8029488:	60da      	str	r2, [r3, #12]
  }
}
 802948a:	bf00      	nop
 802948c:	46bd      	mov	sp, r7
 802948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029492:	4770      	bx	lr
 8029494:	40023c00 	.word	0x40023c00
 8029498:	20000010 	.word	0x20000010

0802949c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 802949c:	b580      	push	{r7, lr}
 802949e:	b084      	sub	sp, #16
 80294a0:	af00      	add	r7, sp, #0
 80294a2:	6078      	str	r0, [r7, #4]
 80294a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 80294a6:	2300      	movs	r3, #0
 80294a8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80294aa:	4b31      	ldr	r3, [pc, #196]	@ (8029570 <HAL_FLASHEx_Erase+0xd4>)
 80294ac:	7e1b      	ldrb	r3, [r3, #24]
 80294ae:	2b01      	cmp	r3, #1
 80294b0:	d101      	bne.n	80294b6 <HAL_FLASHEx_Erase+0x1a>
 80294b2:	2302      	movs	r3, #2
 80294b4:	e058      	b.n	8029568 <HAL_FLASHEx_Erase+0xcc>
 80294b6:	4b2e      	ldr	r3, [pc, #184]	@ (8029570 <HAL_FLASHEx_Erase+0xd4>)
 80294b8:	2201      	movs	r2, #1
 80294ba:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80294bc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80294c0:	f7ff febc 	bl	802923c <FLASH_WaitForLastOperation>
 80294c4:	4603      	mov	r3, r0
 80294c6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80294c8:	7bfb      	ldrb	r3, [r7, #15]
 80294ca:	2b00      	cmp	r3, #0
 80294cc:	d148      	bne.n	8029560 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80294ce:	683b      	ldr	r3, [r7, #0]
 80294d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80294d4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80294d6:	687b      	ldr	r3, [r7, #4]
 80294d8:	681b      	ldr	r3, [r3, #0]
 80294da:	2b01      	cmp	r3, #1
 80294dc:	d115      	bne.n	802950a <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80294de:	687b      	ldr	r3, [r7, #4]
 80294e0:	691b      	ldr	r3, [r3, #16]
 80294e2:	b2da      	uxtb	r2, r3
 80294e4:	687b      	ldr	r3, [r7, #4]
 80294e6:	685b      	ldr	r3, [r3, #4]
 80294e8:	4619      	mov	r1, r3
 80294ea:	4610      	mov	r0, r2
 80294ec:	f000 f844 	bl	8029578 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80294f0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80294f4:	f7ff fea2 	bl	802923c <FLASH_WaitForLastOperation>
 80294f8:	4603      	mov	r3, r0
 80294fa:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80294fc:	4b1d      	ldr	r3, [pc, #116]	@ (8029574 <HAL_FLASHEx_Erase+0xd8>)
 80294fe:	691b      	ldr	r3, [r3, #16]
 8029500:	4a1c      	ldr	r2, [pc, #112]	@ (8029574 <HAL_FLASHEx_Erase+0xd8>)
 8029502:	f023 0304 	bic.w	r3, r3, #4
 8029506:	6113      	str	r3, [r2, #16]
 8029508:	e028      	b.n	802955c <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802950a:	687b      	ldr	r3, [r7, #4]
 802950c:	689b      	ldr	r3, [r3, #8]
 802950e:	60bb      	str	r3, [r7, #8]
 8029510:	e01c      	b.n	802954c <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8029512:	687b      	ldr	r3, [r7, #4]
 8029514:	691b      	ldr	r3, [r3, #16]
 8029516:	b2db      	uxtb	r3, r3
 8029518:	4619      	mov	r1, r3
 802951a:	68b8      	ldr	r0, [r7, #8]
 802951c:	f000 f850 	bl	80295c0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8029520:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8029524:	f7ff fe8a 	bl	802923c <FLASH_WaitForLastOperation>
 8029528:	4603      	mov	r3, r0
 802952a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 802952c:	4b11      	ldr	r3, [pc, #68]	@ (8029574 <HAL_FLASHEx_Erase+0xd8>)
 802952e:	691b      	ldr	r3, [r3, #16]
 8029530:	4a10      	ldr	r2, [pc, #64]	@ (8029574 <HAL_FLASHEx_Erase+0xd8>)
 8029532:	f023 037a 	bic.w	r3, r3, #122	@ 0x7a
 8029536:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8029538:	7bfb      	ldrb	r3, [r7, #15]
 802953a:	2b00      	cmp	r3, #0
 802953c:	d003      	beq.n	8029546 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 802953e:	683b      	ldr	r3, [r7, #0]
 8029540:	68ba      	ldr	r2, [r7, #8]
 8029542:	601a      	str	r2, [r3, #0]
          break;
 8029544:	e00a      	b.n	802955c <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8029546:	68bb      	ldr	r3, [r7, #8]
 8029548:	3301      	adds	r3, #1
 802954a:	60bb      	str	r3, [r7, #8]
 802954c:	687b      	ldr	r3, [r7, #4]
 802954e:	68da      	ldr	r2, [r3, #12]
 8029550:	687b      	ldr	r3, [r7, #4]
 8029552:	689b      	ldr	r3, [r3, #8]
 8029554:	4413      	add	r3, r2
 8029556:	68ba      	ldr	r2, [r7, #8]
 8029558:	429a      	cmp	r2, r3
 802955a:	d3da      	bcc.n	8029512 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 802955c:	f000 f878 	bl	8029650 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8029560:	4b03      	ldr	r3, [pc, #12]	@ (8029570 <HAL_FLASHEx_Erase+0xd4>)
 8029562:	2200      	movs	r2, #0
 8029564:	761a      	strb	r2, [r3, #24]

  return status;
 8029566:	7bfb      	ldrb	r3, [r7, #15]
}
 8029568:	4618      	mov	r0, r3
 802956a:	3710      	adds	r7, #16
 802956c:	46bd      	mov	sp, r7
 802956e:	bd80      	pop	{r7, pc}
 8029570:	20000010 	.word	0x20000010
 8029574:	40023c00 	.word	0x40023c00

08029578 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8029578:	b480      	push	{r7}
 802957a:	b083      	sub	sp, #12
 802957c:	af00      	add	r7, sp, #0
 802957e:	4603      	mov	r3, r0
 8029580:	6039      	str	r1, [r7, #0]
 8029582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8029584:	4b0d      	ldr	r3, [pc, #52]	@ (80295bc <FLASH_MassErase+0x44>)
 8029586:	691b      	ldr	r3, [r3, #16]
 8029588:	4a0c      	ldr	r2, [pc, #48]	@ (80295bc <FLASH_MassErase+0x44>)
 802958a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802958e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8029590:	4b0a      	ldr	r3, [pc, #40]	@ (80295bc <FLASH_MassErase+0x44>)
 8029592:	691b      	ldr	r3, [r3, #16]
 8029594:	4a09      	ldr	r2, [pc, #36]	@ (80295bc <FLASH_MassErase+0x44>)
 8029596:	f043 0304 	orr.w	r3, r3, #4
 802959a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 802959c:	4b07      	ldr	r3, [pc, #28]	@ (80295bc <FLASH_MassErase+0x44>)
 802959e:	691a      	ldr	r2, [r3, #16]
 80295a0:	79fb      	ldrb	r3, [r7, #7]
 80295a2:	021b      	lsls	r3, r3, #8
 80295a4:	4313      	orrs	r3, r2
 80295a6:	4a05      	ldr	r2, [pc, #20]	@ (80295bc <FLASH_MassErase+0x44>)
 80295a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80295ac:	6113      	str	r3, [r2, #16]
}
 80295ae:	bf00      	nop
 80295b0:	370c      	adds	r7, #12
 80295b2:	46bd      	mov	sp, r7
 80295b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295b8:	4770      	bx	lr
 80295ba:	bf00      	nop
 80295bc:	40023c00 	.word	0x40023c00

080295c0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80295c0:	b480      	push	{r7}
 80295c2:	b085      	sub	sp, #20
 80295c4:	af00      	add	r7, sp, #0
 80295c6:	6078      	str	r0, [r7, #4]
 80295c8:	460b      	mov	r3, r1
 80295ca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80295cc:	2300      	movs	r3, #0
 80295ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80295d0:	78fb      	ldrb	r3, [r7, #3]
 80295d2:	2b00      	cmp	r3, #0
 80295d4:	d102      	bne.n	80295dc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80295d6:	2300      	movs	r3, #0
 80295d8:	60fb      	str	r3, [r7, #12]
 80295da:	e010      	b.n	80295fe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80295dc:	78fb      	ldrb	r3, [r7, #3]
 80295de:	2b01      	cmp	r3, #1
 80295e0:	d103      	bne.n	80295ea <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80295e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80295e6:	60fb      	str	r3, [r7, #12]
 80295e8:	e009      	b.n	80295fe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80295ea:	78fb      	ldrb	r3, [r7, #3]
 80295ec:	2b02      	cmp	r3, #2
 80295ee:	d103      	bne.n	80295f8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80295f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80295f4:	60fb      	str	r3, [r7, #12]
 80295f6:	e002      	b.n	80295fe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80295f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80295fc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80295fe:	4b13      	ldr	r3, [pc, #76]	@ (802964c <FLASH_Erase_Sector+0x8c>)
 8029600:	691b      	ldr	r3, [r3, #16]
 8029602:	4a12      	ldr	r2, [pc, #72]	@ (802964c <FLASH_Erase_Sector+0x8c>)
 8029604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8029608:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 802960a:	4b10      	ldr	r3, [pc, #64]	@ (802964c <FLASH_Erase_Sector+0x8c>)
 802960c:	691a      	ldr	r2, [r3, #16]
 802960e:	490f      	ldr	r1, [pc, #60]	@ (802964c <FLASH_Erase_Sector+0x8c>)
 8029610:	68fb      	ldr	r3, [r7, #12]
 8029612:	4313      	orrs	r3, r2
 8029614:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8029616:	4b0d      	ldr	r3, [pc, #52]	@ (802964c <FLASH_Erase_Sector+0x8c>)
 8029618:	691b      	ldr	r3, [r3, #16]
 802961a:	4a0c      	ldr	r2, [pc, #48]	@ (802964c <FLASH_Erase_Sector+0x8c>)
 802961c:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8029620:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8029622:	4b0a      	ldr	r3, [pc, #40]	@ (802964c <FLASH_Erase_Sector+0x8c>)
 8029624:	691a      	ldr	r2, [r3, #16]
 8029626:	687b      	ldr	r3, [r7, #4]
 8029628:	00db      	lsls	r3, r3, #3
 802962a:	4313      	orrs	r3, r2
 802962c:	4a07      	ldr	r2, [pc, #28]	@ (802964c <FLASH_Erase_Sector+0x8c>)
 802962e:	f043 0302 	orr.w	r3, r3, #2
 8029632:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8029634:	4b05      	ldr	r3, [pc, #20]	@ (802964c <FLASH_Erase_Sector+0x8c>)
 8029636:	691b      	ldr	r3, [r3, #16]
 8029638:	4a04      	ldr	r2, [pc, #16]	@ (802964c <FLASH_Erase_Sector+0x8c>)
 802963a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 802963e:	6113      	str	r3, [r2, #16]
}
 8029640:	bf00      	nop
 8029642:	3714      	adds	r7, #20
 8029644:	46bd      	mov	sp, r7
 8029646:	f85d 7b04 	ldr.w	r7, [sp], #4
 802964a:	4770      	bx	lr
 802964c:	40023c00 	.word	0x40023c00

08029650 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8029650:	b480      	push	{r7}
 8029652:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8029654:	4b20      	ldr	r3, [pc, #128]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 8029656:	681b      	ldr	r3, [r3, #0]
 8029658:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802965c:	2b00      	cmp	r3, #0
 802965e:	d017      	beq.n	8029690 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8029660:	4b1d      	ldr	r3, [pc, #116]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 8029662:	681b      	ldr	r3, [r3, #0]
 8029664:	4a1c      	ldr	r2, [pc, #112]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 8029666:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 802966a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 802966c:	4b1a      	ldr	r3, [pc, #104]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 802966e:	681b      	ldr	r3, [r3, #0]
 8029670:	4a19      	ldr	r2, [pc, #100]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 8029672:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8029676:	6013      	str	r3, [r2, #0]
 8029678:	4b17      	ldr	r3, [pc, #92]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 802967a:	681b      	ldr	r3, [r3, #0]
 802967c:	4a16      	ldr	r2, [pc, #88]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 802967e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8029682:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8029684:	4b14      	ldr	r3, [pc, #80]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 8029686:	681b      	ldr	r3, [r3, #0]
 8029688:	4a13      	ldr	r2, [pc, #76]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 802968a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 802968e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8029690:	4b11      	ldr	r3, [pc, #68]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 8029692:	681b      	ldr	r3, [r3, #0]
 8029694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8029698:	2b00      	cmp	r3, #0
 802969a:	d017      	beq.n	80296cc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 802969c:	4b0e      	ldr	r3, [pc, #56]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 802969e:	681b      	ldr	r3, [r3, #0]
 80296a0:	4a0d      	ldr	r2, [pc, #52]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 80296a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80296a6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80296a8:	4b0b      	ldr	r3, [pc, #44]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 80296aa:	681b      	ldr	r3, [r3, #0]
 80296ac:	4a0a      	ldr	r2, [pc, #40]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 80296ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80296b2:	6013      	str	r3, [r2, #0]
 80296b4:	4b08      	ldr	r3, [pc, #32]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 80296b6:	681b      	ldr	r3, [r3, #0]
 80296b8:	4a07      	ldr	r2, [pc, #28]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 80296ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80296be:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80296c0:	4b05      	ldr	r3, [pc, #20]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 80296c2:	681b      	ldr	r3, [r3, #0]
 80296c4:	4a04      	ldr	r2, [pc, #16]	@ (80296d8 <FLASH_FlushCaches+0x88>)
 80296c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80296ca:	6013      	str	r3, [r2, #0]
  }
}
 80296cc:	bf00      	nop
 80296ce:	46bd      	mov	sp, r7
 80296d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80296d4:	4770      	bx	lr
 80296d6:	bf00      	nop
 80296d8:	40023c00 	.word	0x40023c00

080296dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80296dc:	b480      	push	{r7}
 80296de:	b089      	sub	sp, #36	@ 0x24
 80296e0:	af00      	add	r7, sp, #0
 80296e2:	6078      	str	r0, [r7, #4]
 80296e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80296e6:	2300      	movs	r3, #0
 80296e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80296ea:	2300      	movs	r3, #0
 80296ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80296ee:	2300      	movs	r3, #0
 80296f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80296f2:	2300      	movs	r3, #0
 80296f4:	61fb      	str	r3, [r7, #28]
 80296f6:	e16b      	b.n	80299d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80296f8:	2201      	movs	r2, #1
 80296fa:	69fb      	ldr	r3, [r7, #28]
 80296fc:	fa02 f303 	lsl.w	r3, r2, r3
 8029700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8029702:	683b      	ldr	r3, [r7, #0]
 8029704:	681b      	ldr	r3, [r3, #0]
 8029706:	697a      	ldr	r2, [r7, #20]
 8029708:	4013      	ands	r3, r2
 802970a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 802970c:	693a      	ldr	r2, [r7, #16]
 802970e:	697b      	ldr	r3, [r7, #20]
 8029710:	429a      	cmp	r2, r3
 8029712:	f040 815a 	bne.w	80299ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8029716:	683b      	ldr	r3, [r7, #0]
 8029718:	685b      	ldr	r3, [r3, #4]
 802971a:	f003 0303 	and.w	r3, r3, #3
 802971e:	2b01      	cmp	r3, #1
 8029720:	d005      	beq.n	802972e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8029722:	683b      	ldr	r3, [r7, #0]
 8029724:	685b      	ldr	r3, [r3, #4]
 8029726:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 802972a:	2b02      	cmp	r3, #2
 802972c:	d130      	bne.n	8029790 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802972e:	687b      	ldr	r3, [r7, #4]
 8029730:	689b      	ldr	r3, [r3, #8]
 8029732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8029734:	69fb      	ldr	r3, [r7, #28]
 8029736:	005b      	lsls	r3, r3, #1
 8029738:	2203      	movs	r2, #3
 802973a:	fa02 f303 	lsl.w	r3, r2, r3
 802973e:	43db      	mvns	r3, r3
 8029740:	69ba      	ldr	r2, [r7, #24]
 8029742:	4013      	ands	r3, r2
 8029744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8029746:	683b      	ldr	r3, [r7, #0]
 8029748:	68da      	ldr	r2, [r3, #12]
 802974a:	69fb      	ldr	r3, [r7, #28]
 802974c:	005b      	lsls	r3, r3, #1
 802974e:	fa02 f303 	lsl.w	r3, r2, r3
 8029752:	69ba      	ldr	r2, [r7, #24]
 8029754:	4313      	orrs	r3, r2
 8029756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8029758:	687b      	ldr	r3, [r7, #4]
 802975a:	69ba      	ldr	r2, [r7, #24]
 802975c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802975e:	687b      	ldr	r3, [r7, #4]
 8029760:	685b      	ldr	r3, [r3, #4]
 8029762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8029764:	2201      	movs	r2, #1
 8029766:	69fb      	ldr	r3, [r7, #28]
 8029768:	fa02 f303 	lsl.w	r3, r2, r3
 802976c:	43db      	mvns	r3, r3
 802976e:	69ba      	ldr	r2, [r7, #24]
 8029770:	4013      	ands	r3, r2
 8029772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8029774:	683b      	ldr	r3, [r7, #0]
 8029776:	685b      	ldr	r3, [r3, #4]
 8029778:	091b      	lsrs	r3, r3, #4
 802977a:	f003 0201 	and.w	r2, r3, #1
 802977e:	69fb      	ldr	r3, [r7, #28]
 8029780:	fa02 f303 	lsl.w	r3, r2, r3
 8029784:	69ba      	ldr	r2, [r7, #24]
 8029786:	4313      	orrs	r3, r2
 8029788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802978a:	687b      	ldr	r3, [r7, #4]
 802978c:	69ba      	ldr	r2, [r7, #24]
 802978e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8029790:	683b      	ldr	r3, [r7, #0]
 8029792:	685b      	ldr	r3, [r3, #4]
 8029794:	f003 0303 	and.w	r3, r3, #3
 8029798:	2b03      	cmp	r3, #3
 802979a:	d017      	beq.n	80297cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 802979c:	687b      	ldr	r3, [r7, #4]
 802979e:	68db      	ldr	r3, [r3, #12]
 80297a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80297a2:	69fb      	ldr	r3, [r7, #28]
 80297a4:	005b      	lsls	r3, r3, #1
 80297a6:	2203      	movs	r2, #3
 80297a8:	fa02 f303 	lsl.w	r3, r2, r3
 80297ac:	43db      	mvns	r3, r3
 80297ae:	69ba      	ldr	r2, [r7, #24]
 80297b0:	4013      	ands	r3, r2
 80297b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80297b4:	683b      	ldr	r3, [r7, #0]
 80297b6:	689a      	ldr	r2, [r3, #8]
 80297b8:	69fb      	ldr	r3, [r7, #28]
 80297ba:	005b      	lsls	r3, r3, #1
 80297bc:	fa02 f303 	lsl.w	r3, r2, r3
 80297c0:	69ba      	ldr	r2, [r7, #24]
 80297c2:	4313      	orrs	r3, r2
 80297c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80297c6:	687b      	ldr	r3, [r7, #4]
 80297c8:	69ba      	ldr	r2, [r7, #24]
 80297ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80297cc:	683b      	ldr	r3, [r7, #0]
 80297ce:	685b      	ldr	r3, [r3, #4]
 80297d0:	f003 0303 	and.w	r3, r3, #3
 80297d4:	2b02      	cmp	r3, #2
 80297d6:	d123      	bne.n	8029820 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80297d8:	69fb      	ldr	r3, [r7, #28]
 80297da:	08da      	lsrs	r2, r3, #3
 80297dc:	687b      	ldr	r3, [r7, #4]
 80297de:	3208      	adds	r2, #8
 80297e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80297e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80297e6:	69fb      	ldr	r3, [r7, #28]
 80297e8:	f003 0307 	and.w	r3, r3, #7
 80297ec:	009b      	lsls	r3, r3, #2
 80297ee:	220f      	movs	r2, #15
 80297f0:	fa02 f303 	lsl.w	r3, r2, r3
 80297f4:	43db      	mvns	r3, r3
 80297f6:	69ba      	ldr	r2, [r7, #24]
 80297f8:	4013      	ands	r3, r2
 80297fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80297fc:	683b      	ldr	r3, [r7, #0]
 80297fe:	691a      	ldr	r2, [r3, #16]
 8029800:	69fb      	ldr	r3, [r7, #28]
 8029802:	f003 0307 	and.w	r3, r3, #7
 8029806:	009b      	lsls	r3, r3, #2
 8029808:	fa02 f303 	lsl.w	r3, r2, r3
 802980c:	69ba      	ldr	r2, [r7, #24]
 802980e:	4313      	orrs	r3, r2
 8029810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8029812:	69fb      	ldr	r3, [r7, #28]
 8029814:	08da      	lsrs	r2, r3, #3
 8029816:	687b      	ldr	r3, [r7, #4]
 8029818:	3208      	adds	r2, #8
 802981a:	69b9      	ldr	r1, [r7, #24]
 802981c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8029820:	687b      	ldr	r3, [r7, #4]
 8029822:	681b      	ldr	r3, [r3, #0]
 8029824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8029826:	69fb      	ldr	r3, [r7, #28]
 8029828:	005b      	lsls	r3, r3, #1
 802982a:	2203      	movs	r2, #3
 802982c:	fa02 f303 	lsl.w	r3, r2, r3
 8029830:	43db      	mvns	r3, r3
 8029832:	69ba      	ldr	r2, [r7, #24]
 8029834:	4013      	ands	r3, r2
 8029836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8029838:	683b      	ldr	r3, [r7, #0]
 802983a:	685b      	ldr	r3, [r3, #4]
 802983c:	f003 0203 	and.w	r2, r3, #3
 8029840:	69fb      	ldr	r3, [r7, #28]
 8029842:	005b      	lsls	r3, r3, #1
 8029844:	fa02 f303 	lsl.w	r3, r2, r3
 8029848:	69ba      	ldr	r2, [r7, #24]
 802984a:	4313      	orrs	r3, r2
 802984c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802984e:	687b      	ldr	r3, [r7, #4]
 8029850:	69ba      	ldr	r2, [r7, #24]
 8029852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8029854:	683b      	ldr	r3, [r7, #0]
 8029856:	685b      	ldr	r3, [r3, #4]
 8029858:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 802985c:	2b00      	cmp	r3, #0
 802985e:	f000 80b4 	beq.w	80299ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8029862:	2300      	movs	r3, #0
 8029864:	60fb      	str	r3, [r7, #12]
 8029866:	4b60      	ldr	r3, [pc, #384]	@ (80299e8 <HAL_GPIO_Init+0x30c>)
 8029868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802986a:	4a5f      	ldr	r2, [pc, #380]	@ (80299e8 <HAL_GPIO_Init+0x30c>)
 802986c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8029870:	6453      	str	r3, [r2, #68]	@ 0x44
 8029872:	4b5d      	ldr	r3, [pc, #372]	@ (80299e8 <HAL_GPIO_Init+0x30c>)
 8029874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8029876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 802987a:	60fb      	str	r3, [r7, #12]
 802987c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802987e:	4a5b      	ldr	r2, [pc, #364]	@ (80299ec <HAL_GPIO_Init+0x310>)
 8029880:	69fb      	ldr	r3, [r7, #28]
 8029882:	089b      	lsrs	r3, r3, #2
 8029884:	3302      	adds	r3, #2
 8029886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802988a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 802988c:	69fb      	ldr	r3, [r7, #28]
 802988e:	f003 0303 	and.w	r3, r3, #3
 8029892:	009b      	lsls	r3, r3, #2
 8029894:	220f      	movs	r2, #15
 8029896:	fa02 f303 	lsl.w	r3, r2, r3
 802989a:	43db      	mvns	r3, r3
 802989c:	69ba      	ldr	r2, [r7, #24]
 802989e:	4013      	ands	r3, r2
 80298a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80298a2:	687b      	ldr	r3, [r7, #4]
 80298a4:	4a52      	ldr	r2, [pc, #328]	@ (80299f0 <HAL_GPIO_Init+0x314>)
 80298a6:	4293      	cmp	r3, r2
 80298a8:	d02b      	beq.n	8029902 <HAL_GPIO_Init+0x226>
 80298aa:	687b      	ldr	r3, [r7, #4]
 80298ac:	4a51      	ldr	r2, [pc, #324]	@ (80299f4 <HAL_GPIO_Init+0x318>)
 80298ae:	4293      	cmp	r3, r2
 80298b0:	d025      	beq.n	80298fe <HAL_GPIO_Init+0x222>
 80298b2:	687b      	ldr	r3, [r7, #4]
 80298b4:	4a50      	ldr	r2, [pc, #320]	@ (80299f8 <HAL_GPIO_Init+0x31c>)
 80298b6:	4293      	cmp	r3, r2
 80298b8:	d01f      	beq.n	80298fa <HAL_GPIO_Init+0x21e>
 80298ba:	687b      	ldr	r3, [r7, #4]
 80298bc:	4a4f      	ldr	r2, [pc, #316]	@ (80299fc <HAL_GPIO_Init+0x320>)
 80298be:	4293      	cmp	r3, r2
 80298c0:	d019      	beq.n	80298f6 <HAL_GPIO_Init+0x21a>
 80298c2:	687b      	ldr	r3, [r7, #4]
 80298c4:	4a4e      	ldr	r2, [pc, #312]	@ (8029a00 <HAL_GPIO_Init+0x324>)
 80298c6:	4293      	cmp	r3, r2
 80298c8:	d013      	beq.n	80298f2 <HAL_GPIO_Init+0x216>
 80298ca:	687b      	ldr	r3, [r7, #4]
 80298cc:	4a4d      	ldr	r2, [pc, #308]	@ (8029a04 <HAL_GPIO_Init+0x328>)
 80298ce:	4293      	cmp	r3, r2
 80298d0:	d00d      	beq.n	80298ee <HAL_GPIO_Init+0x212>
 80298d2:	687b      	ldr	r3, [r7, #4]
 80298d4:	4a4c      	ldr	r2, [pc, #304]	@ (8029a08 <HAL_GPIO_Init+0x32c>)
 80298d6:	4293      	cmp	r3, r2
 80298d8:	d007      	beq.n	80298ea <HAL_GPIO_Init+0x20e>
 80298da:	687b      	ldr	r3, [r7, #4]
 80298dc:	4a4b      	ldr	r2, [pc, #300]	@ (8029a0c <HAL_GPIO_Init+0x330>)
 80298de:	4293      	cmp	r3, r2
 80298e0:	d101      	bne.n	80298e6 <HAL_GPIO_Init+0x20a>
 80298e2:	2307      	movs	r3, #7
 80298e4:	e00e      	b.n	8029904 <HAL_GPIO_Init+0x228>
 80298e6:	2308      	movs	r3, #8
 80298e8:	e00c      	b.n	8029904 <HAL_GPIO_Init+0x228>
 80298ea:	2306      	movs	r3, #6
 80298ec:	e00a      	b.n	8029904 <HAL_GPIO_Init+0x228>
 80298ee:	2305      	movs	r3, #5
 80298f0:	e008      	b.n	8029904 <HAL_GPIO_Init+0x228>
 80298f2:	2304      	movs	r3, #4
 80298f4:	e006      	b.n	8029904 <HAL_GPIO_Init+0x228>
 80298f6:	2303      	movs	r3, #3
 80298f8:	e004      	b.n	8029904 <HAL_GPIO_Init+0x228>
 80298fa:	2302      	movs	r3, #2
 80298fc:	e002      	b.n	8029904 <HAL_GPIO_Init+0x228>
 80298fe:	2301      	movs	r3, #1
 8029900:	e000      	b.n	8029904 <HAL_GPIO_Init+0x228>
 8029902:	2300      	movs	r3, #0
 8029904:	69fa      	ldr	r2, [r7, #28]
 8029906:	f002 0203 	and.w	r2, r2, #3
 802990a:	0092      	lsls	r2, r2, #2
 802990c:	4093      	lsls	r3, r2
 802990e:	69ba      	ldr	r2, [r7, #24]
 8029910:	4313      	orrs	r3, r2
 8029912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8029914:	4935      	ldr	r1, [pc, #212]	@ (80299ec <HAL_GPIO_Init+0x310>)
 8029916:	69fb      	ldr	r3, [r7, #28]
 8029918:	089b      	lsrs	r3, r3, #2
 802991a:	3302      	adds	r3, #2
 802991c:	69ba      	ldr	r2, [r7, #24]
 802991e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8029922:	4b3b      	ldr	r3, [pc, #236]	@ (8029a10 <HAL_GPIO_Init+0x334>)
 8029924:	689b      	ldr	r3, [r3, #8]
 8029926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8029928:	693b      	ldr	r3, [r7, #16]
 802992a:	43db      	mvns	r3, r3
 802992c:	69ba      	ldr	r2, [r7, #24]
 802992e:	4013      	ands	r3, r2
 8029930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8029932:	683b      	ldr	r3, [r7, #0]
 8029934:	685b      	ldr	r3, [r3, #4]
 8029936:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802993a:	2b00      	cmp	r3, #0
 802993c:	d003      	beq.n	8029946 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 802993e:	69ba      	ldr	r2, [r7, #24]
 8029940:	693b      	ldr	r3, [r7, #16]
 8029942:	4313      	orrs	r3, r2
 8029944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8029946:	4a32      	ldr	r2, [pc, #200]	@ (8029a10 <HAL_GPIO_Init+0x334>)
 8029948:	69bb      	ldr	r3, [r7, #24]
 802994a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 802994c:	4b30      	ldr	r3, [pc, #192]	@ (8029a10 <HAL_GPIO_Init+0x334>)
 802994e:	68db      	ldr	r3, [r3, #12]
 8029950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8029952:	693b      	ldr	r3, [r7, #16]
 8029954:	43db      	mvns	r3, r3
 8029956:	69ba      	ldr	r2, [r7, #24]
 8029958:	4013      	ands	r3, r2
 802995a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 802995c:	683b      	ldr	r3, [r7, #0]
 802995e:	685b      	ldr	r3, [r3, #4]
 8029960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8029964:	2b00      	cmp	r3, #0
 8029966:	d003      	beq.n	8029970 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8029968:	69ba      	ldr	r2, [r7, #24]
 802996a:	693b      	ldr	r3, [r7, #16]
 802996c:	4313      	orrs	r3, r2
 802996e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8029970:	4a27      	ldr	r2, [pc, #156]	@ (8029a10 <HAL_GPIO_Init+0x334>)
 8029972:	69bb      	ldr	r3, [r7, #24]
 8029974:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8029976:	4b26      	ldr	r3, [pc, #152]	@ (8029a10 <HAL_GPIO_Init+0x334>)
 8029978:	685b      	ldr	r3, [r3, #4]
 802997a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802997c:	693b      	ldr	r3, [r7, #16]
 802997e:	43db      	mvns	r3, r3
 8029980:	69ba      	ldr	r2, [r7, #24]
 8029982:	4013      	ands	r3, r2
 8029984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8029986:	683b      	ldr	r3, [r7, #0]
 8029988:	685b      	ldr	r3, [r3, #4]
 802998a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802998e:	2b00      	cmp	r3, #0
 8029990:	d003      	beq.n	802999a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8029992:	69ba      	ldr	r2, [r7, #24]
 8029994:	693b      	ldr	r3, [r7, #16]
 8029996:	4313      	orrs	r3, r2
 8029998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 802999a:	4a1d      	ldr	r2, [pc, #116]	@ (8029a10 <HAL_GPIO_Init+0x334>)
 802999c:	69bb      	ldr	r3, [r7, #24]
 802999e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80299a0:	4b1b      	ldr	r3, [pc, #108]	@ (8029a10 <HAL_GPIO_Init+0x334>)
 80299a2:	681b      	ldr	r3, [r3, #0]
 80299a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80299a6:	693b      	ldr	r3, [r7, #16]
 80299a8:	43db      	mvns	r3, r3
 80299aa:	69ba      	ldr	r2, [r7, #24]
 80299ac:	4013      	ands	r3, r2
 80299ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80299b0:	683b      	ldr	r3, [r7, #0]
 80299b2:	685b      	ldr	r3, [r3, #4]
 80299b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80299b8:	2b00      	cmp	r3, #0
 80299ba:	d003      	beq.n	80299c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80299bc:	69ba      	ldr	r2, [r7, #24]
 80299be:	693b      	ldr	r3, [r7, #16]
 80299c0:	4313      	orrs	r3, r2
 80299c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80299c4:	4a12      	ldr	r2, [pc, #72]	@ (8029a10 <HAL_GPIO_Init+0x334>)
 80299c6:	69bb      	ldr	r3, [r7, #24]
 80299c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80299ca:	69fb      	ldr	r3, [r7, #28]
 80299cc:	3301      	adds	r3, #1
 80299ce:	61fb      	str	r3, [r7, #28]
 80299d0:	69fb      	ldr	r3, [r7, #28]
 80299d2:	2b0f      	cmp	r3, #15
 80299d4:	f67f ae90 	bls.w	80296f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80299d8:	bf00      	nop
 80299da:	bf00      	nop
 80299dc:	3724      	adds	r7, #36	@ 0x24
 80299de:	46bd      	mov	sp, r7
 80299e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80299e4:	4770      	bx	lr
 80299e6:	bf00      	nop
 80299e8:	40023800 	.word	0x40023800
 80299ec:	40013800 	.word	0x40013800
 80299f0:	40020000 	.word	0x40020000
 80299f4:	40020400 	.word	0x40020400
 80299f8:	40020800 	.word	0x40020800
 80299fc:	40020c00 	.word	0x40020c00
 8029a00:	40021000 	.word	0x40021000
 8029a04:	40021400 	.word	0x40021400
 8029a08:	40021800 	.word	0x40021800
 8029a0c:	40021c00 	.word	0x40021c00
 8029a10:	40013c00 	.word	0x40013c00

08029a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8029a14:	b480      	push	{r7}
 8029a16:	b083      	sub	sp, #12
 8029a18:	af00      	add	r7, sp, #0
 8029a1a:	6078      	str	r0, [r7, #4]
 8029a1c:	460b      	mov	r3, r1
 8029a1e:	807b      	strh	r3, [r7, #2]
 8029a20:	4613      	mov	r3, r2
 8029a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8029a24:	787b      	ldrb	r3, [r7, #1]
 8029a26:	2b00      	cmp	r3, #0
 8029a28:	d003      	beq.n	8029a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8029a2a:	887a      	ldrh	r2, [r7, #2]
 8029a2c:	687b      	ldr	r3, [r7, #4]
 8029a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8029a30:	e003      	b.n	8029a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8029a32:	887b      	ldrh	r3, [r7, #2]
 8029a34:	041a      	lsls	r2, r3, #16
 8029a36:	687b      	ldr	r3, [r7, #4]
 8029a38:	619a      	str	r2, [r3, #24]
}
 8029a3a:	bf00      	nop
 8029a3c:	370c      	adds	r7, #12
 8029a3e:	46bd      	mov	sp, r7
 8029a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a44:	4770      	bx	lr

08029a46 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8029a46:	b480      	push	{r7}
 8029a48:	b085      	sub	sp, #20
 8029a4a:	af00      	add	r7, sp, #0
 8029a4c:	6078      	str	r0, [r7, #4]
 8029a4e:	460b      	mov	r3, r1
 8029a50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8029a52:	687b      	ldr	r3, [r7, #4]
 8029a54:	695b      	ldr	r3, [r3, #20]
 8029a56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8029a58:	887a      	ldrh	r2, [r7, #2]
 8029a5a:	68fb      	ldr	r3, [r7, #12]
 8029a5c:	4013      	ands	r3, r2
 8029a5e:	041a      	lsls	r2, r3, #16
 8029a60:	68fb      	ldr	r3, [r7, #12]
 8029a62:	43d9      	mvns	r1, r3
 8029a64:	887b      	ldrh	r3, [r7, #2]
 8029a66:	400b      	ands	r3, r1
 8029a68:	431a      	orrs	r2, r3
 8029a6a:	687b      	ldr	r3, [r7, #4]
 8029a6c:	619a      	str	r2, [r3, #24]
}
 8029a6e:	bf00      	nop
 8029a70:	3714      	adds	r7, #20
 8029a72:	46bd      	mov	sp, r7
 8029a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a78:	4770      	bx	lr
	...

08029a7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8029a7c:	b580      	push	{r7, lr}
 8029a7e:	b086      	sub	sp, #24
 8029a80:	af00      	add	r7, sp, #0
 8029a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8029a84:	687b      	ldr	r3, [r7, #4]
 8029a86:	2b00      	cmp	r3, #0
 8029a88:	d101      	bne.n	8029a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8029a8a:	2301      	movs	r3, #1
 8029a8c:	e267      	b.n	8029f5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8029a8e:	687b      	ldr	r3, [r7, #4]
 8029a90:	681b      	ldr	r3, [r3, #0]
 8029a92:	f003 0301 	and.w	r3, r3, #1
 8029a96:	2b00      	cmp	r3, #0
 8029a98:	d075      	beq.n	8029b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8029a9a:	4b88      	ldr	r3, [pc, #544]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029a9c:	689b      	ldr	r3, [r3, #8]
 8029a9e:	f003 030c 	and.w	r3, r3, #12
 8029aa2:	2b04      	cmp	r3, #4
 8029aa4:	d00c      	beq.n	8029ac0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8029aa6:	4b85      	ldr	r3, [pc, #532]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029aa8:	689b      	ldr	r3, [r3, #8]
 8029aaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8029aae:	2b08      	cmp	r3, #8
 8029ab0:	d112      	bne.n	8029ad8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8029ab2:	4b82      	ldr	r3, [pc, #520]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029ab4:	685b      	ldr	r3, [r3, #4]
 8029ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8029aba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8029abe:	d10b      	bne.n	8029ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8029ac0:	4b7e      	ldr	r3, [pc, #504]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029ac2:	681b      	ldr	r3, [r3, #0]
 8029ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8029ac8:	2b00      	cmp	r3, #0
 8029aca:	d05b      	beq.n	8029b84 <HAL_RCC_OscConfig+0x108>
 8029acc:	687b      	ldr	r3, [r7, #4]
 8029ace:	685b      	ldr	r3, [r3, #4]
 8029ad0:	2b00      	cmp	r3, #0
 8029ad2:	d157      	bne.n	8029b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8029ad4:	2301      	movs	r3, #1
 8029ad6:	e242      	b.n	8029f5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8029ad8:	687b      	ldr	r3, [r7, #4]
 8029ada:	685b      	ldr	r3, [r3, #4]
 8029adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8029ae0:	d106      	bne.n	8029af0 <HAL_RCC_OscConfig+0x74>
 8029ae2:	4b76      	ldr	r3, [pc, #472]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029ae4:	681b      	ldr	r3, [r3, #0]
 8029ae6:	4a75      	ldr	r2, [pc, #468]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8029aec:	6013      	str	r3, [r2, #0]
 8029aee:	e01d      	b.n	8029b2c <HAL_RCC_OscConfig+0xb0>
 8029af0:	687b      	ldr	r3, [r7, #4]
 8029af2:	685b      	ldr	r3, [r3, #4]
 8029af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8029af8:	d10c      	bne.n	8029b14 <HAL_RCC_OscConfig+0x98>
 8029afa:	4b70      	ldr	r3, [pc, #448]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029afc:	681b      	ldr	r3, [r3, #0]
 8029afe:	4a6f      	ldr	r2, [pc, #444]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8029b04:	6013      	str	r3, [r2, #0]
 8029b06:	4b6d      	ldr	r3, [pc, #436]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029b08:	681b      	ldr	r3, [r3, #0]
 8029b0a:	4a6c      	ldr	r2, [pc, #432]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8029b10:	6013      	str	r3, [r2, #0]
 8029b12:	e00b      	b.n	8029b2c <HAL_RCC_OscConfig+0xb0>
 8029b14:	4b69      	ldr	r3, [pc, #420]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029b16:	681b      	ldr	r3, [r3, #0]
 8029b18:	4a68      	ldr	r2, [pc, #416]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8029b1e:	6013      	str	r3, [r2, #0]
 8029b20:	4b66      	ldr	r3, [pc, #408]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029b22:	681b      	ldr	r3, [r3, #0]
 8029b24:	4a65      	ldr	r2, [pc, #404]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8029b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8029b2c:	687b      	ldr	r3, [r7, #4]
 8029b2e:	685b      	ldr	r3, [r3, #4]
 8029b30:	2b00      	cmp	r3, #0
 8029b32:	d013      	beq.n	8029b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8029b34:	f7fe fe40 	bl	80287b8 <HAL_GetTick>
 8029b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8029b3a:	e008      	b.n	8029b4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8029b3c:	f7fe fe3c 	bl	80287b8 <HAL_GetTick>
 8029b40:	4602      	mov	r2, r0
 8029b42:	693b      	ldr	r3, [r7, #16]
 8029b44:	1ad3      	subs	r3, r2, r3
 8029b46:	2b64      	cmp	r3, #100	@ 0x64
 8029b48:	d901      	bls.n	8029b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8029b4a:	2303      	movs	r3, #3
 8029b4c:	e207      	b.n	8029f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8029b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029b50:	681b      	ldr	r3, [r3, #0]
 8029b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8029b56:	2b00      	cmp	r3, #0
 8029b58:	d0f0      	beq.n	8029b3c <HAL_RCC_OscConfig+0xc0>
 8029b5a:	e014      	b.n	8029b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8029b5c:	f7fe fe2c 	bl	80287b8 <HAL_GetTick>
 8029b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8029b62:	e008      	b.n	8029b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8029b64:	f7fe fe28 	bl	80287b8 <HAL_GetTick>
 8029b68:	4602      	mov	r2, r0
 8029b6a:	693b      	ldr	r3, [r7, #16]
 8029b6c:	1ad3      	subs	r3, r2, r3
 8029b6e:	2b64      	cmp	r3, #100	@ 0x64
 8029b70:	d901      	bls.n	8029b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8029b72:	2303      	movs	r3, #3
 8029b74:	e1f3      	b.n	8029f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8029b76:	4b51      	ldr	r3, [pc, #324]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029b78:	681b      	ldr	r3, [r3, #0]
 8029b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8029b7e:	2b00      	cmp	r3, #0
 8029b80:	d1f0      	bne.n	8029b64 <HAL_RCC_OscConfig+0xe8>
 8029b82:	e000      	b.n	8029b86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8029b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8029b86:	687b      	ldr	r3, [r7, #4]
 8029b88:	681b      	ldr	r3, [r3, #0]
 8029b8a:	f003 0302 	and.w	r3, r3, #2
 8029b8e:	2b00      	cmp	r3, #0
 8029b90:	d063      	beq.n	8029c5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8029b92:	4b4a      	ldr	r3, [pc, #296]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029b94:	689b      	ldr	r3, [r3, #8]
 8029b96:	f003 030c 	and.w	r3, r3, #12
 8029b9a:	2b00      	cmp	r3, #0
 8029b9c:	d00b      	beq.n	8029bb6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8029b9e:	4b47      	ldr	r3, [pc, #284]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029ba0:	689b      	ldr	r3, [r3, #8]
 8029ba2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8029ba6:	2b08      	cmp	r3, #8
 8029ba8:	d11c      	bne.n	8029be4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8029baa:	4b44      	ldr	r3, [pc, #272]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029bac:	685b      	ldr	r3, [r3, #4]
 8029bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8029bb2:	2b00      	cmp	r3, #0
 8029bb4:	d116      	bne.n	8029be4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8029bb6:	4b41      	ldr	r3, [pc, #260]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029bb8:	681b      	ldr	r3, [r3, #0]
 8029bba:	f003 0302 	and.w	r3, r3, #2
 8029bbe:	2b00      	cmp	r3, #0
 8029bc0:	d005      	beq.n	8029bce <HAL_RCC_OscConfig+0x152>
 8029bc2:	687b      	ldr	r3, [r7, #4]
 8029bc4:	68db      	ldr	r3, [r3, #12]
 8029bc6:	2b01      	cmp	r3, #1
 8029bc8:	d001      	beq.n	8029bce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8029bca:	2301      	movs	r3, #1
 8029bcc:	e1c7      	b.n	8029f5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8029bce:	4b3b      	ldr	r3, [pc, #236]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029bd0:	681b      	ldr	r3, [r3, #0]
 8029bd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8029bd6:	687b      	ldr	r3, [r7, #4]
 8029bd8:	691b      	ldr	r3, [r3, #16]
 8029bda:	00db      	lsls	r3, r3, #3
 8029bdc:	4937      	ldr	r1, [pc, #220]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029bde:	4313      	orrs	r3, r2
 8029be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8029be2:	e03a      	b.n	8029c5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8029be4:	687b      	ldr	r3, [r7, #4]
 8029be6:	68db      	ldr	r3, [r3, #12]
 8029be8:	2b00      	cmp	r3, #0
 8029bea:	d020      	beq.n	8029c2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8029bec:	4b34      	ldr	r3, [pc, #208]	@ (8029cc0 <HAL_RCC_OscConfig+0x244>)
 8029bee:	2201      	movs	r2, #1
 8029bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8029bf2:	f7fe fde1 	bl	80287b8 <HAL_GetTick>
 8029bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8029bf8:	e008      	b.n	8029c0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8029bfa:	f7fe fddd 	bl	80287b8 <HAL_GetTick>
 8029bfe:	4602      	mov	r2, r0
 8029c00:	693b      	ldr	r3, [r7, #16]
 8029c02:	1ad3      	subs	r3, r2, r3
 8029c04:	2b02      	cmp	r3, #2
 8029c06:	d901      	bls.n	8029c0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8029c08:	2303      	movs	r3, #3
 8029c0a:	e1a8      	b.n	8029f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8029c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029c0e:	681b      	ldr	r3, [r3, #0]
 8029c10:	f003 0302 	and.w	r3, r3, #2
 8029c14:	2b00      	cmp	r3, #0
 8029c16:	d0f0      	beq.n	8029bfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8029c18:	4b28      	ldr	r3, [pc, #160]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029c1a:	681b      	ldr	r3, [r3, #0]
 8029c1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8029c20:	687b      	ldr	r3, [r7, #4]
 8029c22:	691b      	ldr	r3, [r3, #16]
 8029c24:	00db      	lsls	r3, r3, #3
 8029c26:	4925      	ldr	r1, [pc, #148]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029c28:	4313      	orrs	r3, r2
 8029c2a:	600b      	str	r3, [r1, #0]
 8029c2c:	e015      	b.n	8029c5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8029c2e:	4b24      	ldr	r3, [pc, #144]	@ (8029cc0 <HAL_RCC_OscConfig+0x244>)
 8029c30:	2200      	movs	r2, #0
 8029c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8029c34:	f7fe fdc0 	bl	80287b8 <HAL_GetTick>
 8029c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8029c3a:	e008      	b.n	8029c4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8029c3c:	f7fe fdbc 	bl	80287b8 <HAL_GetTick>
 8029c40:	4602      	mov	r2, r0
 8029c42:	693b      	ldr	r3, [r7, #16]
 8029c44:	1ad3      	subs	r3, r2, r3
 8029c46:	2b02      	cmp	r3, #2
 8029c48:	d901      	bls.n	8029c4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8029c4a:	2303      	movs	r3, #3
 8029c4c:	e187      	b.n	8029f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8029c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029c50:	681b      	ldr	r3, [r3, #0]
 8029c52:	f003 0302 	and.w	r3, r3, #2
 8029c56:	2b00      	cmp	r3, #0
 8029c58:	d1f0      	bne.n	8029c3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8029c5a:	687b      	ldr	r3, [r7, #4]
 8029c5c:	681b      	ldr	r3, [r3, #0]
 8029c5e:	f003 0308 	and.w	r3, r3, #8
 8029c62:	2b00      	cmp	r3, #0
 8029c64:	d036      	beq.n	8029cd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8029c66:	687b      	ldr	r3, [r7, #4]
 8029c68:	695b      	ldr	r3, [r3, #20]
 8029c6a:	2b00      	cmp	r3, #0
 8029c6c:	d016      	beq.n	8029c9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8029c6e:	4b15      	ldr	r3, [pc, #84]	@ (8029cc4 <HAL_RCC_OscConfig+0x248>)
 8029c70:	2201      	movs	r2, #1
 8029c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8029c74:	f7fe fda0 	bl	80287b8 <HAL_GetTick>
 8029c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8029c7a:	e008      	b.n	8029c8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8029c7c:	f7fe fd9c 	bl	80287b8 <HAL_GetTick>
 8029c80:	4602      	mov	r2, r0
 8029c82:	693b      	ldr	r3, [r7, #16]
 8029c84:	1ad3      	subs	r3, r2, r3
 8029c86:	2b02      	cmp	r3, #2
 8029c88:	d901      	bls.n	8029c8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8029c8a:	2303      	movs	r3, #3
 8029c8c:	e167      	b.n	8029f5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8029c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8029cbc <HAL_RCC_OscConfig+0x240>)
 8029c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8029c92:	f003 0302 	and.w	r3, r3, #2
 8029c96:	2b00      	cmp	r3, #0
 8029c98:	d0f0      	beq.n	8029c7c <HAL_RCC_OscConfig+0x200>
 8029c9a:	e01b      	b.n	8029cd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8029c9c:	4b09      	ldr	r3, [pc, #36]	@ (8029cc4 <HAL_RCC_OscConfig+0x248>)
 8029c9e:	2200      	movs	r2, #0
 8029ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8029ca2:	f7fe fd89 	bl	80287b8 <HAL_GetTick>
 8029ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8029ca8:	e00e      	b.n	8029cc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8029caa:	f7fe fd85 	bl	80287b8 <HAL_GetTick>
 8029cae:	4602      	mov	r2, r0
 8029cb0:	693b      	ldr	r3, [r7, #16]
 8029cb2:	1ad3      	subs	r3, r2, r3
 8029cb4:	2b02      	cmp	r3, #2
 8029cb6:	d907      	bls.n	8029cc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8029cb8:	2303      	movs	r3, #3
 8029cba:	e150      	b.n	8029f5e <HAL_RCC_OscConfig+0x4e2>
 8029cbc:	40023800 	.word	0x40023800
 8029cc0:	42470000 	.word	0x42470000
 8029cc4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8029cc8:	4b88      	ldr	r3, [pc, #544]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8029ccc:	f003 0302 	and.w	r3, r3, #2
 8029cd0:	2b00      	cmp	r3, #0
 8029cd2:	d1ea      	bne.n	8029caa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8029cd4:	687b      	ldr	r3, [r7, #4]
 8029cd6:	681b      	ldr	r3, [r3, #0]
 8029cd8:	f003 0304 	and.w	r3, r3, #4
 8029cdc:	2b00      	cmp	r3, #0
 8029cde:	f000 8097 	beq.w	8029e10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8029ce2:	2300      	movs	r3, #0
 8029ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8029ce6:	4b81      	ldr	r3, [pc, #516]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8029cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8029cee:	2b00      	cmp	r3, #0
 8029cf0:	d10f      	bne.n	8029d12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8029cf2:	2300      	movs	r3, #0
 8029cf4:	60bb      	str	r3, [r7, #8]
 8029cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8029cfa:	4a7c      	ldr	r2, [pc, #496]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8029d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8029d02:	4b7a      	ldr	r3, [pc, #488]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8029d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8029d0a:	60bb      	str	r3, [r7, #8]
 8029d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8029d0e:	2301      	movs	r3, #1
 8029d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8029d12:	4b77      	ldr	r3, [pc, #476]	@ (8029ef0 <HAL_RCC_OscConfig+0x474>)
 8029d14:	681b      	ldr	r3, [r3, #0]
 8029d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8029d1a:	2b00      	cmp	r3, #0
 8029d1c:	d118      	bne.n	8029d50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8029d1e:	4b74      	ldr	r3, [pc, #464]	@ (8029ef0 <HAL_RCC_OscConfig+0x474>)
 8029d20:	681b      	ldr	r3, [r3, #0]
 8029d22:	4a73      	ldr	r2, [pc, #460]	@ (8029ef0 <HAL_RCC_OscConfig+0x474>)
 8029d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8029d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8029d2a:	f7fe fd45 	bl	80287b8 <HAL_GetTick>
 8029d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8029d30:	e008      	b.n	8029d44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8029d32:	f7fe fd41 	bl	80287b8 <HAL_GetTick>
 8029d36:	4602      	mov	r2, r0
 8029d38:	693b      	ldr	r3, [r7, #16]
 8029d3a:	1ad3      	subs	r3, r2, r3
 8029d3c:	2b02      	cmp	r3, #2
 8029d3e:	d901      	bls.n	8029d44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8029d40:	2303      	movs	r3, #3
 8029d42:	e10c      	b.n	8029f5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8029d44:	4b6a      	ldr	r3, [pc, #424]	@ (8029ef0 <HAL_RCC_OscConfig+0x474>)
 8029d46:	681b      	ldr	r3, [r3, #0]
 8029d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8029d4c:	2b00      	cmp	r3, #0
 8029d4e:	d0f0      	beq.n	8029d32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8029d50:	687b      	ldr	r3, [r7, #4]
 8029d52:	689b      	ldr	r3, [r3, #8]
 8029d54:	2b01      	cmp	r3, #1
 8029d56:	d106      	bne.n	8029d66 <HAL_RCC_OscConfig+0x2ea>
 8029d58:	4b64      	ldr	r3, [pc, #400]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8029d5c:	4a63      	ldr	r2, [pc, #396]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029d5e:	f043 0301 	orr.w	r3, r3, #1
 8029d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8029d64:	e01c      	b.n	8029da0 <HAL_RCC_OscConfig+0x324>
 8029d66:	687b      	ldr	r3, [r7, #4]
 8029d68:	689b      	ldr	r3, [r3, #8]
 8029d6a:	2b05      	cmp	r3, #5
 8029d6c:	d10c      	bne.n	8029d88 <HAL_RCC_OscConfig+0x30c>
 8029d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8029d72:	4a5e      	ldr	r2, [pc, #376]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029d74:	f043 0304 	orr.w	r3, r3, #4
 8029d78:	6713      	str	r3, [r2, #112]	@ 0x70
 8029d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8029d7e:	4a5b      	ldr	r2, [pc, #364]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029d80:	f043 0301 	orr.w	r3, r3, #1
 8029d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8029d86:	e00b      	b.n	8029da0 <HAL_RCC_OscConfig+0x324>
 8029d88:	4b58      	ldr	r3, [pc, #352]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8029d8c:	4a57      	ldr	r2, [pc, #348]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029d8e:	f023 0301 	bic.w	r3, r3, #1
 8029d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8029d94:	4b55      	ldr	r3, [pc, #340]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8029d98:	4a54      	ldr	r2, [pc, #336]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029d9a:	f023 0304 	bic.w	r3, r3, #4
 8029d9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8029da0:	687b      	ldr	r3, [r7, #4]
 8029da2:	689b      	ldr	r3, [r3, #8]
 8029da4:	2b00      	cmp	r3, #0
 8029da6:	d015      	beq.n	8029dd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8029da8:	f7fe fd06 	bl	80287b8 <HAL_GetTick>
 8029dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8029dae:	e00a      	b.n	8029dc6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8029db0:	f7fe fd02 	bl	80287b8 <HAL_GetTick>
 8029db4:	4602      	mov	r2, r0
 8029db6:	693b      	ldr	r3, [r7, #16]
 8029db8:	1ad3      	subs	r3, r2, r3
 8029dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8029dbe:	4293      	cmp	r3, r2
 8029dc0:	d901      	bls.n	8029dc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8029dc2:	2303      	movs	r3, #3
 8029dc4:	e0cb      	b.n	8029f5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8029dc6:	4b49      	ldr	r3, [pc, #292]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8029dca:	f003 0302 	and.w	r3, r3, #2
 8029dce:	2b00      	cmp	r3, #0
 8029dd0:	d0ee      	beq.n	8029db0 <HAL_RCC_OscConfig+0x334>
 8029dd2:	e014      	b.n	8029dfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8029dd4:	f7fe fcf0 	bl	80287b8 <HAL_GetTick>
 8029dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8029dda:	e00a      	b.n	8029df2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8029ddc:	f7fe fcec 	bl	80287b8 <HAL_GetTick>
 8029de0:	4602      	mov	r2, r0
 8029de2:	693b      	ldr	r3, [r7, #16]
 8029de4:	1ad3      	subs	r3, r2, r3
 8029de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8029dea:	4293      	cmp	r3, r2
 8029dec:	d901      	bls.n	8029df2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8029dee:	2303      	movs	r3, #3
 8029df0:	e0b5      	b.n	8029f5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8029df2:	4b3e      	ldr	r3, [pc, #248]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8029df6:	f003 0302 	and.w	r3, r3, #2
 8029dfa:	2b00      	cmp	r3, #0
 8029dfc:	d1ee      	bne.n	8029ddc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8029dfe:	7dfb      	ldrb	r3, [r7, #23]
 8029e00:	2b01      	cmp	r3, #1
 8029e02:	d105      	bne.n	8029e10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8029e04:	4b39      	ldr	r3, [pc, #228]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8029e08:	4a38      	ldr	r2, [pc, #224]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029e0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8029e0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8029e10:	687b      	ldr	r3, [r7, #4]
 8029e12:	699b      	ldr	r3, [r3, #24]
 8029e14:	2b00      	cmp	r3, #0
 8029e16:	f000 80a1 	beq.w	8029f5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8029e1a:	4b34      	ldr	r3, [pc, #208]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029e1c:	689b      	ldr	r3, [r3, #8]
 8029e1e:	f003 030c 	and.w	r3, r3, #12
 8029e22:	2b08      	cmp	r3, #8
 8029e24:	d05c      	beq.n	8029ee0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8029e26:	687b      	ldr	r3, [r7, #4]
 8029e28:	699b      	ldr	r3, [r3, #24]
 8029e2a:	2b02      	cmp	r3, #2
 8029e2c:	d141      	bne.n	8029eb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8029e2e:	4b31      	ldr	r3, [pc, #196]	@ (8029ef4 <HAL_RCC_OscConfig+0x478>)
 8029e30:	2200      	movs	r2, #0
 8029e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8029e34:	f7fe fcc0 	bl	80287b8 <HAL_GetTick>
 8029e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8029e3a:	e008      	b.n	8029e4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8029e3c:	f7fe fcbc 	bl	80287b8 <HAL_GetTick>
 8029e40:	4602      	mov	r2, r0
 8029e42:	693b      	ldr	r3, [r7, #16]
 8029e44:	1ad3      	subs	r3, r2, r3
 8029e46:	2b02      	cmp	r3, #2
 8029e48:	d901      	bls.n	8029e4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8029e4a:	2303      	movs	r3, #3
 8029e4c:	e087      	b.n	8029f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8029e4e:	4b27      	ldr	r3, [pc, #156]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029e50:	681b      	ldr	r3, [r3, #0]
 8029e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8029e56:	2b00      	cmp	r3, #0
 8029e58:	d1f0      	bne.n	8029e3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8029e5a:	687b      	ldr	r3, [r7, #4]
 8029e5c:	69da      	ldr	r2, [r3, #28]
 8029e5e:	687b      	ldr	r3, [r7, #4]
 8029e60:	6a1b      	ldr	r3, [r3, #32]
 8029e62:	431a      	orrs	r2, r3
 8029e64:	687b      	ldr	r3, [r7, #4]
 8029e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8029e68:	019b      	lsls	r3, r3, #6
 8029e6a:	431a      	orrs	r2, r3
 8029e6c:	687b      	ldr	r3, [r7, #4]
 8029e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8029e70:	085b      	lsrs	r3, r3, #1
 8029e72:	3b01      	subs	r3, #1
 8029e74:	041b      	lsls	r3, r3, #16
 8029e76:	431a      	orrs	r2, r3
 8029e78:	687b      	ldr	r3, [r7, #4]
 8029e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029e7c:	061b      	lsls	r3, r3, #24
 8029e7e:	491b      	ldr	r1, [pc, #108]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029e80:	4313      	orrs	r3, r2
 8029e82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8029e84:	4b1b      	ldr	r3, [pc, #108]	@ (8029ef4 <HAL_RCC_OscConfig+0x478>)
 8029e86:	2201      	movs	r2, #1
 8029e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8029e8a:	f7fe fc95 	bl	80287b8 <HAL_GetTick>
 8029e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8029e90:	e008      	b.n	8029ea4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8029e92:	f7fe fc91 	bl	80287b8 <HAL_GetTick>
 8029e96:	4602      	mov	r2, r0
 8029e98:	693b      	ldr	r3, [r7, #16]
 8029e9a:	1ad3      	subs	r3, r2, r3
 8029e9c:	2b02      	cmp	r3, #2
 8029e9e:	d901      	bls.n	8029ea4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8029ea0:	2303      	movs	r3, #3
 8029ea2:	e05c      	b.n	8029f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8029ea4:	4b11      	ldr	r3, [pc, #68]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029ea6:	681b      	ldr	r3, [r3, #0]
 8029ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8029eac:	2b00      	cmp	r3, #0
 8029eae:	d0f0      	beq.n	8029e92 <HAL_RCC_OscConfig+0x416>
 8029eb0:	e054      	b.n	8029f5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8029eb2:	4b10      	ldr	r3, [pc, #64]	@ (8029ef4 <HAL_RCC_OscConfig+0x478>)
 8029eb4:	2200      	movs	r2, #0
 8029eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8029eb8:	f7fe fc7e 	bl	80287b8 <HAL_GetTick>
 8029ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8029ebe:	e008      	b.n	8029ed2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8029ec0:	f7fe fc7a 	bl	80287b8 <HAL_GetTick>
 8029ec4:	4602      	mov	r2, r0
 8029ec6:	693b      	ldr	r3, [r7, #16]
 8029ec8:	1ad3      	subs	r3, r2, r3
 8029eca:	2b02      	cmp	r3, #2
 8029ecc:	d901      	bls.n	8029ed2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8029ece:	2303      	movs	r3, #3
 8029ed0:	e045      	b.n	8029f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8029ed2:	4b06      	ldr	r3, [pc, #24]	@ (8029eec <HAL_RCC_OscConfig+0x470>)
 8029ed4:	681b      	ldr	r3, [r3, #0]
 8029ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8029eda:	2b00      	cmp	r3, #0
 8029edc:	d1f0      	bne.n	8029ec0 <HAL_RCC_OscConfig+0x444>
 8029ede:	e03d      	b.n	8029f5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8029ee0:	687b      	ldr	r3, [r7, #4]
 8029ee2:	699b      	ldr	r3, [r3, #24]
 8029ee4:	2b01      	cmp	r3, #1
 8029ee6:	d107      	bne.n	8029ef8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8029ee8:	2301      	movs	r3, #1
 8029eea:	e038      	b.n	8029f5e <HAL_RCC_OscConfig+0x4e2>
 8029eec:	40023800 	.word	0x40023800
 8029ef0:	40007000 	.word	0x40007000
 8029ef4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8029ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8029f68 <HAL_RCC_OscConfig+0x4ec>)
 8029efa:	685b      	ldr	r3, [r3, #4]
 8029efc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8029efe:	687b      	ldr	r3, [r7, #4]
 8029f00:	699b      	ldr	r3, [r3, #24]
 8029f02:	2b01      	cmp	r3, #1
 8029f04:	d028      	beq.n	8029f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8029f06:	68fb      	ldr	r3, [r7, #12]
 8029f08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8029f0c:	687b      	ldr	r3, [r7, #4]
 8029f0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8029f10:	429a      	cmp	r2, r3
 8029f12:	d121      	bne.n	8029f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8029f14:	68fb      	ldr	r3, [r7, #12]
 8029f16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8029f1a:	687b      	ldr	r3, [r7, #4]
 8029f1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8029f1e:	429a      	cmp	r2, r3
 8029f20:	d11a      	bne.n	8029f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8029f22:	68fa      	ldr	r2, [r7, #12]
 8029f24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8029f28:	4013      	ands	r3, r2
 8029f2a:	687a      	ldr	r2, [r7, #4]
 8029f2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8029f2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8029f30:	4293      	cmp	r3, r2
 8029f32:	d111      	bne.n	8029f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8029f34:	68fb      	ldr	r3, [r7, #12]
 8029f36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8029f3a:	687b      	ldr	r3, [r7, #4]
 8029f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8029f3e:	085b      	lsrs	r3, r3, #1
 8029f40:	3b01      	subs	r3, #1
 8029f42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8029f44:	429a      	cmp	r2, r3
 8029f46:	d107      	bne.n	8029f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8029f48:	68fb      	ldr	r3, [r7, #12]
 8029f4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8029f4e:	687b      	ldr	r3, [r7, #4]
 8029f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029f52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8029f54:	429a      	cmp	r2, r3
 8029f56:	d001      	beq.n	8029f5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8029f58:	2301      	movs	r3, #1
 8029f5a:	e000      	b.n	8029f5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8029f5c:	2300      	movs	r3, #0
}
 8029f5e:	4618      	mov	r0, r3
 8029f60:	3718      	adds	r7, #24
 8029f62:	46bd      	mov	sp, r7
 8029f64:	bd80      	pop	{r7, pc}
 8029f66:	bf00      	nop
 8029f68:	40023800 	.word	0x40023800

08029f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8029f6c:	b580      	push	{r7, lr}
 8029f6e:	b084      	sub	sp, #16
 8029f70:	af00      	add	r7, sp, #0
 8029f72:	6078      	str	r0, [r7, #4]
 8029f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8029f76:	687b      	ldr	r3, [r7, #4]
 8029f78:	2b00      	cmp	r3, #0
 8029f7a:	d101      	bne.n	8029f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8029f7c:	2301      	movs	r3, #1
 8029f7e:	e0cc      	b.n	802a11a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8029f80:	4b68      	ldr	r3, [pc, #416]	@ (802a124 <HAL_RCC_ClockConfig+0x1b8>)
 8029f82:	681b      	ldr	r3, [r3, #0]
 8029f84:	f003 0307 	and.w	r3, r3, #7
 8029f88:	683a      	ldr	r2, [r7, #0]
 8029f8a:	429a      	cmp	r2, r3
 8029f8c:	d90c      	bls.n	8029fa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8029f8e:	4b65      	ldr	r3, [pc, #404]	@ (802a124 <HAL_RCC_ClockConfig+0x1b8>)
 8029f90:	683a      	ldr	r2, [r7, #0]
 8029f92:	b2d2      	uxtb	r2, r2
 8029f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8029f96:	4b63      	ldr	r3, [pc, #396]	@ (802a124 <HAL_RCC_ClockConfig+0x1b8>)
 8029f98:	681b      	ldr	r3, [r3, #0]
 8029f9a:	f003 0307 	and.w	r3, r3, #7
 8029f9e:	683a      	ldr	r2, [r7, #0]
 8029fa0:	429a      	cmp	r2, r3
 8029fa2:	d001      	beq.n	8029fa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8029fa4:	2301      	movs	r3, #1
 8029fa6:	e0b8      	b.n	802a11a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8029fa8:	687b      	ldr	r3, [r7, #4]
 8029faa:	681b      	ldr	r3, [r3, #0]
 8029fac:	f003 0302 	and.w	r3, r3, #2
 8029fb0:	2b00      	cmp	r3, #0
 8029fb2:	d020      	beq.n	8029ff6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8029fb4:	687b      	ldr	r3, [r7, #4]
 8029fb6:	681b      	ldr	r3, [r3, #0]
 8029fb8:	f003 0304 	and.w	r3, r3, #4
 8029fbc:	2b00      	cmp	r3, #0
 8029fbe:	d005      	beq.n	8029fcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8029fc0:	4b59      	ldr	r3, [pc, #356]	@ (802a128 <HAL_RCC_ClockConfig+0x1bc>)
 8029fc2:	689b      	ldr	r3, [r3, #8]
 8029fc4:	4a58      	ldr	r2, [pc, #352]	@ (802a128 <HAL_RCC_ClockConfig+0x1bc>)
 8029fc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8029fca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8029fcc:	687b      	ldr	r3, [r7, #4]
 8029fce:	681b      	ldr	r3, [r3, #0]
 8029fd0:	f003 0308 	and.w	r3, r3, #8
 8029fd4:	2b00      	cmp	r3, #0
 8029fd6:	d005      	beq.n	8029fe4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8029fd8:	4b53      	ldr	r3, [pc, #332]	@ (802a128 <HAL_RCC_ClockConfig+0x1bc>)
 8029fda:	689b      	ldr	r3, [r3, #8]
 8029fdc:	4a52      	ldr	r2, [pc, #328]	@ (802a128 <HAL_RCC_ClockConfig+0x1bc>)
 8029fde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8029fe2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8029fe4:	4b50      	ldr	r3, [pc, #320]	@ (802a128 <HAL_RCC_ClockConfig+0x1bc>)
 8029fe6:	689b      	ldr	r3, [r3, #8]
 8029fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8029fec:	687b      	ldr	r3, [r7, #4]
 8029fee:	689b      	ldr	r3, [r3, #8]
 8029ff0:	494d      	ldr	r1, [pc, #308]	@ (802a128 <HAL_RCC_ClockConfig+0x1bc>)
 8029ff2:	4313      	orrs	r3, r2
 8029ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8029ff6:	687b      	ldr	r3, [r7, #4]
 8029ff8:	681b      	ldr	r3, [r3, #0]
 8029ffa:	f003 0301 	and.w	r3, r3, #1
 8029ffe:	2b00      	cmp	r3, #0
 802a000:	d044      	beq.n	802a08c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802a002:	687b      	ldr	r3, [r7, #4]
 802a004:	685b      	ldr	r3, [r3, #4]
 802a006:	2b01      	cmp	r3, #1
 802a008:	d107      	bne.n	802a01a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802a00a:	4b47      	ldr	r3, [pc, #284]	@ (802a128 <HAL_RCC_ClockConfig+0x1bc>)
 802a00c:	681b      	ldr	r3, [r3, #0]
 802a00e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802a012:	2b00      	cmp	r3, #0
 802a014:	d119      	bne.n	802a04a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802a016:	2301      	movs	r3, #1
 802a018:	e07f      	b.n	802a11a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802a01a:	687b      	ldr	r3, [r7, #4]
 802a01c:	685b      	ldr	r3, [r3, #4]
 802a01e:	2b02      	cmp	r3, #2
 802a020:	d003      	beq.n	802a02a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802a022:	687b      	ldr	r3, [r7, #4]
 802a024:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802a026:	2b03      	cmp	r3, #3
 802a028:	d107      	bne.n	802a03a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802a02a:	4b3f      	ldr	r3, [pc, #252]	@ (802a128 <HAL_RCC_ClockConfig+0x1bc>)
 802a02c:	681b      	ldr	r3, [r3, #0]
 802a02e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802a032:	2b00      	cmp	r3, #0
 802a034:	d109      	bne.n	802a04a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802a036:	2301      	movs	r3, #1
 802a038:	e06f      	b.n	802a11a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802a03a:	4b3b      	ldr	r3, [pc, #236]	@ (802a128 <HAL_RCC_ClockConfig+0x1bc>)
 802a03c:	681b      	ldr	r3, [r3, #0]
 802a03e:	f003 0302 	and.w	r3, r3, #2
 802a042:	2b00      	cmp	r3, #0
 802a044:	d101      	bne.n	802a04a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802a046:	2301      	movs	r3, #1
 802a048:	e067      	b.n	802a11a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802a04a:	4b37      	ldr	r3, [pc, #220]	@ (802a128 <HAL_RCC_ClockConfig+0x1bc>)
 802a04c:	689b      	ldr	r3, [r3, #8]
 802a04e:	f023 0203 	bic.w	r2, r3, #3
 802a052:	687b      	ldr	r3, [r7, #4]
 802a054:	685b      	ldr	r3, [r3, #4]
 802a056:	4934      	ldr	r1, [pc, #208]	@ (802a128 <HAL_RCC_ClockConfig+0x1bc>)
 802a058:	4313      	orrs	r3, r2
 802a05a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 802a05c:	f7fe fbac 	bl	80287b8 <HAL_GetTick>
 802a060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802a062:	e00a      	b.n	802a07a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802a064:	f7fe fba8 	bl	80287b8 <HAL_GetTick>
 802a068:	4602      	mov	r2, r0
 802a06a:	68fb      	ldr	r3, [r7, #12]
 802a06c:	1ad3      	subs	r3, r2, r3
 802a06e:	f241 3288 	movw	r2, #5000	@ 0x1388
 802a072:	4293      	cmp	r3, r2
 802a074:	d901      	bls.n	802a07a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802a076:	2303      	movs	r3, #3
 802a078:	e04f      	b.n	802a11a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802a07a:	4b2b      	ldr	r3, [pc, #172]	@ (802a128 <HAL_RCC_ClockConfig+0x1bc>)
 802a07c:	689b      	ldr	r3, [r3, #8]
 802a07e:	f003 020c 	and.w	r2, r3, #12
 802a082:	687b      	ldr	r3, [r7, #4]
 802a084:	685b      	ldr	r3, [r3, #4]
 802a086:	009b      	lsls	r3, r3, #2
 802a088:	429a      	cmp	r2, r3
 802a08a:	d1eb      	bne.n	802a064 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 802a08c:	4b25      	ldr	r3, [pc, #148]	@ (802a124 <HAL_RCC_ClockConfig+0x1b8>)
 802a08e:	681b      	ldr	r3, [r3, #0]
 802a090:	f003 0307 	and.w	r3, r3, #7
 802a094:	683a      	ldr	r2, [r7, #0]
 802a096:	429a      	cmp	r2, r3
 802a098:	d20c      	bcs.n	802a0b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802a09a:	4b22      	ldr	r3, [pc, #136]	@ (802a124 <HAL_RCC_ClockConfig+0x1b8>)
 802a09c:	683a      	ldr	r2, [r7, #0]
 802a09e:	b2d2      	uxtb	r2, r2
 802a0a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802a0a2:	4b20      	ldr	r3, [pc, #128]	@ (802a124 <HAL_RCC_ClockConfig+0x1b8>)
 802a0a4:	681b      	ldr	r3, [r3, #0]
 802a0a6:	f003 0307 	and.w	r3, r3, #7
 802a0aa:	683a      	ldr	r2, [r7, #0]
 802a0ac:	429a      	cmp	r2, r3
 802a0ae:	d001      	beq.n	802a0b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 802a0b0:	2301      	movs	r3, #1
 802a0b2:	e032      	b.n	802a11a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802a0b4:	687b      	ldr	r3, [r7, #4]
 802a0b6:	681b      	ldr	r3, [r3, #0]
 802a0b8:	f003 0304 	and.w	r3, r3, #4
 802a0bc:	2b00      	cmp	r3, #0
 802a0be:	d008      	beq.n	802a0d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802a0c0:	4b19      	ldr	r3, [pc, #100]	@ (802a128 <HAL_RCC_ClockConfig+0x1bc>)
 802a0c2:	689b      	ldr	r3, [r3, #8]
 802a0c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 802a0c8:	687b      	ldr	r3, [r7, #4]
 802a0ca:	68db      	ldr	r3, [r3, #12]
 802a0cc:	4916      	ldr	r1, [pc, #88]	@ (802a128 <HAL_RCC_ClockConfig+0x1bc>)
 802a0ce:	4313      	orrs	r3, r2
 802a0d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802a0d2:	687b      	ldr	r3, [r7, #4]
 802a0d4:	681b      	ldr	r3, [r3, #0]
 802a0d6:	f003 0308 	and.w	r3, r3, #8
 802a0da:	2b00      	cmp	r3, #0
 802a0dc:	d009      	beq.n	802a0f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802a0de:	4b12      	ldr	r3, [pc, #72]	@ (802a128 <HAL_RCC_ClockConfig+0x1bc>)
 802a0e0:	689b      	ldr	r3, [r3, #8]
 802a0e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 802a0e6:	687b      	ldr	r3, [r7, #4]
 802a0e8:	691b      	ldr	r3, [r3, #16]
 802a0ea:	00db      	lsls	r3, r3, #3
 802a0ec:	490e      	ldr	r1, [pc, #56]	@ (802a128 <HAL_RCC_ClockConfig+0x1bc>)
 802a0ee:	4313      	orrs	r3, r2
 802a0f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 802a0f2:	f000 f821 	bl	802a138 <HAL_RCC_GetSysClockFreq>
 802a0f6:	4602      	mov	r2, r0
 802a0f8:	4b0b      	ldr	r3, [pc, #44]	@ (802a128 <HAL_RCC_ClockConfig+0x1bc>)
 802a0fa:	689b      	ldr	r3, [r3, #8]
 802a0fc:	091b      	lsrs	r3, r3, #4
 802a0fe:	f003 030f 	and.w	r3, r3, #15
 802a102:	490a      	ldr	r1, [pc, #40]	@ (802a12c <HAL_RCC_ClockConfig+0x1c0>)
 802a104:	5ccb      	ldrb	r3, [r1, r3]
 802a106:	fa22 f303 	lsr.w	r3, r2, r3
 802a10a:	4a09      	ldr	r2, [pc, #36]	@ (802a130 <HAL_RCC_ClockConfig+0x1c4>)
 802a10c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 802a10e:	4b09      	ldr	r3, [pc, #36]	@ (802a134 <HAL_RCC_ClockConfig+0x1c8>)
 802a110:	681b      	ldr	r3, [r3, #0]
 802a112:	4618      	mov	r0, r3
 802a114:	f7fe fb0c 	bl	8028730 <HAL_InitTick>

  return HAL_OK;
 802a118:	2300      	movs	r3, #0
}
 802a11a:	4618      	mov	r0, r3
 802a11c:	3710      	adds	r7, #16
 802a11e:	46bd      	mov	sp, r7
 802a120:	bd80      	pop	{r7, pc}
 802a122:	bf00      	nop
 802a124:	40023c00 	.word	0x40023c00
 802a128:	40023800 	.word	0x40023800
 802a12c:	0802e3cc 	.word	0x0802e3cc
 802a130:	20000004 	.word	0x20000004
 802a134:	20000008 	.word	0x20000008

0802a138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802a138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802a13c:	b094      	sub	sp, #80	@ 0x50
 802a13e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 802a140:	2300      	movs	r3, #0
 802a142:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 802a144:	2300      	movs	r3, #0
 802a146:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 802a148:	2300      	movs	r3, #0
 802a14a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 802a14c:	2300      	movs	r3, #0
 802a14e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802a150:	4b79      	ldr	r3, [pc, #484]	@ (802a338 <HAL_RCC_GetSysClockFreq+0x200>)
 802a152:	689b      	ldr	r3, [r3, #8]
 802a154:	f003 030c 	and.w	r3, r3, #12
 802a158:	2b08      	cmp	r3, #8
 802a15a:	d00d      	beq.n	802a178 <HAL_RCC_GetSysClockFreq+0x40>
 802a15c:	2b08      	cmp	r3, #8
 802a15e:	f200 80e1 	bhi.w	802a324 <HAL_RCC_GetSysClockFreq+0x1ec>
 802a162:	2b00      	cmp	r3, #0
 802a164:	d002      	beq.n	802a16c <HAL_RCC_GetSysClockFreq+0x34>
 802a166:	2b04      	cmp	r3, #4
 802a168:	d003      	beq.n	802a172 <HAL_RCC_GetSysClockFreq+0x3a>
 802a16a:	e0db      	b.n	802a324 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802a16c:	4b73      	ldr	r3, [pc, #460]	@ (802a33c <HAL_RCC_GetSysClockFreq+0x204>)
 802a16e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 802a170:	e0db      	b.n	802a32a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802a172:	4b73      	ldr	r3, [pc, #460]	@ (802a340 <HAL_RCC_GetSysClockFreq+0x208>)
 802a174:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 802a176:	e0d8      	b.n	802a32a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802a178:	4b6f      	ldr	r3, [pc, #444]	@ (802a338 <HAL_RCC_GetSysClockFreq+0x200>)
 802a17a:	685b      	ldr	r3, [r3, #4]
 802a17c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802a180:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802a182:	4b6d      	ldr	r3, [pc, #436]	@ (802a338 <HAL_RCC_GetSysClockFreq+0x200>)
 802a184:	685b      	ldr	r3, [r3, #4]
 802a186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802a18a:	2b00      	cmp	r3, #0
 802a18c:	d063      	beq.n	802a256 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802a18e:	4b6a      	ldr	r3, [pc, #424]	@ (802a338 <HAL_RCC_GetSysClockFreq+0x200>)
 802a190:	685b      	ldr	r3, [r3, #4]
 802a192:	099b      	lsrs	r3, r3, #6
 802a194:	2200      	movs	r2, #0
 802a196:	63bb      	str	r3, [r7, #56]	@ 0x38
 802a198:	63fa      	str	r2, [r7, #60]	@ 0x3c
 802a19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802a19c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802a1a0:	633b      	str	r3, [r7, #48]	@ 0x30
 802a1a2:	2300      	movs	r3, #0
 802a1a4:	637b      	str	r3, [r7, #52]	@ 0x34
 802a1a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 802a1aa:	4622      	mov	r2, r4
 802a1ac:	462b      	mov	r3, r5
 802a1ae:	f04f 0000 	mov.w	r0, #0
 802a1b2:	f04f 0100 	mov.w	r1, #0
 802a1b6:	0159      	lsls	r1, r3, #5
 802a1b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802a1bc:	0150      	lsls	r0, r2, #5
 802a1be:	4602      	mov	r2, r0
 802a1c0:	460b      	mov	r3, r1
 802a1c2:	4621      	mov	r1, r4
 802a1c4:	1a51      	subs	r1, r2, r1
 802a1c6:	6139      	str	r1, [r7, #16]
 802a1c8:	4629      	mov	r1, r5
 802a1ca:	eb63 0301 	sbc.w	r3, r3, r1
 802a1ce:	617b      	str	r3, [r7, #20]
 802a1d0:	f04f 0200 	mov.w	r2, #0
 802a1d4:	f04f 0300 	mov.w	r3, #0
 802a1d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802a1dc:	4659      	mov	r1, fp
 802a1de:	018b      	lsls	r3, r1, #6
 802a1e0:	4651      	mov	r1, sl
 802a1e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 802a1e6:	4651      	mov	r1, sl
 802a1e8:	018a      	lsls	r2, r1, #6
 802a1ea:	4651      	mov	r1, sl
 802a1ec:	ebb2 0801 	subs.w	r8, r2, r1
 802a1f0:	4659      	mov	r1, fp
 802a1f2:	eb63 0901 	sbc.w	r9, r3, r1
 802a1f6:	f04f 0200 	mov.w	r2, #0
 802a1fa:	f04f 0300 	mov.w	r3, #0
 802a1fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802a202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802a206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802a20a:	4690      	mov	r8, r2
 802a20c:	4699      	mov	r9, r3
 802a20e:	4623      	mov	r3, r4
 802a210:	eb18 0303 	adds.w	r3, r8, r3
 802a214:	60bb      	str	r3, [r7, #8]
 802a216:	462b      	mov	r3, r5
 802a218:	eb49 0303 	adc.w	r3, r9, r3
 802a21c:	60fb      	str	r3, [r7, #12]
 802a21e:	f04f 0200 	mov.w	r2, #0
 802a222:	f04f 0300 	mov.w	r3, #0
 802a226:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 802a22a:	4629      	mov	r1, r5
 802a22c:	024b      	lsls	r3, r1, #9
 802a22e:	4621      	mov	r1, r4
 802a230:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 802a234:	4621      	mov	r1, r4
 802a236:	024a      	lsls	r2, r1, #9
 802a238:	4610      	mov	r0, r2
 802a23a:	4619      	mov	r1, r3
 802a23c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802a23e:	2200      	movs	r2, #0
 802a240:	62bb      	str	r3, [r7, #40]	@ 0x28
 802a242:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802a244:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 802a248:	f7f6 fa1a 	bl	8020680 <__aeabi_uldivmod>
 802a24c:	4602      	mov	r2, r0
 802a24e:	460b      	mov	r3, r1
 802a250:	4613      	mov	r3, r2
 802a252:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802a254:	e058      	b.n	802a308 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802a256:	4b38      	ldr	r3, [pc, #224]	@ (802a338 <HAL_RCC_GetSysClockFreq+0x200>)
 802a258:	685b      	ldr	r3, [r3, #4]
 802a25a:	099b      	lsrs	r3, r3, #6
 802a25c:	2200      	movs	r2, #0
 802a25e:	4618      	mov	r0, r3
 802a260:	4611      	mov	r1, r2
 802a262:	f3c0 0308 	ubfx	r3, r0, #0, #9
 802a266:	623b      	str	r3, [r7, #32]
 802a268:	2300      	movs	r3, #0
 802a26a:	627b      	str	r3, [r7, #36]	@ 0x24
 802a26c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 802a270:	4642      	mov	r2, r8
 802a272:	464b      	mov	r3, r9
 802a274:	f04f 0000 	mov.w	r0, #0
 802a278:	f04f 0100 	mov.w	r1, #0
 802a27c:	0159      	lsls	r1, r3, #5
 802a27e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802a282:	0150      	lsls	r0, r2, #5
 802a284:	4602      	mov	r2, r0
 802a286:	460b      	mov	r3, r1
 802a288:	4641      	mov	r1, r8
 802a28a:	ebb2 0a01 	subs.w	sl, r2, r1
 802a28e:	4649      	mov	r1, r9
 802a290:	eb63 0b01 	sbc.w	fp, r3, r1
 802a294:	f04f 0200 	mov.w	r2, #0
 802a298:	f04f 0300 	mov.w	r3, #0
 802a29c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 802a2a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 802a2a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 802a2a8:	ebb2 040a 	subs.w	r4, r2, sl
 802a2ac:	eb63 050b 	sbc.w	r5, r3, fp
 802a2b0:	f04f 0200 	mov.w	r2, #0
 802a2b4:	f04f 0300 	mov.w	r3, #0
 802a2b8:	00eb      	lsls	r3, r5, #3
 802a2ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802a2be:	00e2      	lsls	r2, r4, #3
 802a2c0:	4614      	mov	r4, r2
 802a2c2:	461d      	mov	r5, r3
 802a2c4:	4643      	mov	r3, r8
 802a2c6:	18e3      	adds	r3, r4, r3
 802a2c8:	603b      	str	r3, [r7, #0]
 802a2ca:	464b      	mov	r3, r9
 802a2cc:	eb45 0303 	adc.w	r3, r5, r3
 802a2d0:	607b      	str	r3, [r7, #4]
 802a2d2:	f04f 0200 	mov.w	r2, #0
 802a2d6:	f04f 0300 	mov.w	r3, #0
 802a2da:	e9d7 4500 	ldrd	r4, r5, [r7]
 802a2de:	4629      	mov	r1, r5
 802a2e0:	028b      	lsls	r3, r1, #10
 802a2e2:	4621      	mov	r1, r4
 802a2e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 802a2e8:	4621      	mov	r1, r4
 802a2ea:	028a      	lsls	r2, r1, #10
 802a2ec:	4610      	mov	r0, r2
 802a2ee:	4619      	mov	r1, r3
 802a2f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802a2f2:	2200      	movs	r2, #0
 802a2f4:	61bb      	str	r3, [r7, #24]
 802a2f6:	61fa      	str	r2, [r7, #28]
 802a2f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802a2fc:	f7f6 f9c0 	bl	8020680 <__aeabi_uldivmod>
 802a300:	4602      	mov	r2, r0
 802a302:	460b      	mov	r3, r1
 802a304:	4613      	mov	r3, r2
 802a306:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 802a308:	4b0b      	ldr	r3, [pc, #44]	@ (802a338 <HAL_RCC_GetSysClockFreq+0x200>)
 802a30a:	685b      	ldr	r3, [r3, #4]
 802a30c:	0c1b      	lsrs	r3, r3, #16
 802a30e:	f003 0303 	and.w	r3, r3, #3
 802a312:	3301      	adds	r3, #1
 802a314:	005b      	lsls	r3, r3, #1
 802a316:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 802a318:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802a31a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802a31c:	fbb2 f3f3 	udiv	r3, r2, r3
 802a320:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 802a322:	e002      	b.n	802a32a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802a324:	4b05      	ldr	r3, [pc, #20]	@ (802a33c <HAL_RCC_GetSysClockFreq+0x204>)
 802a326:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 802a328:	bf00      	nop
    }
  }
  return sysclockfreq;
 802a32a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 802a32c:	4618      	mov	r0, r3
 802a32e:	3750      	adds	r7, #80	@ 0x50
 802a330:	46bd      	mov	sp, r7
 802a332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802a336:	bf00      	nop
 802a338:	40023800 	.word	0x40023800
 802a33c:	00f42400 	.word	0x00f42400
 802a340:	007a1200 	.word	0x007a1200

0802a344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802a344:	b480      	push	{r7}
 802a346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 802a348:	4b03      	ldr	r3, [pc, #12]	@ (802a358 <HAL_RCC_GetHCLKFreq+0x14>)
 802a34a:	681b      	ldr	r3, [r3, #0]
}
 802a34c:	4618      	mov	r0, r3
 802a34e:	46bd      	mov	sp, r7
 802a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a354:	4770      	bx	lr
 802a356:	bf00      	nop
 802a358:	20000004 	.word	0x20000004

0802a35c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802a35c:	b580      	push	{r7, lr}
 802a35e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 802a360:	f7ff fff0 	bl	802a344 <HAL_RCC_GetHCLKFreq>
 802a364:	4602      	mov	r2, r0
 802a366:	4b05      	ldr	r3, [pc, #20]	@ (802a37c <HAL_RCC_GetPCLK1Freq+0x20>)
 802a368:	689b      	ldr	r3, [r3, #8]
 802a36a:	0a9b      	lsrs	r3, r3, #10
 802a36c:	f003 0307 	and.w	r3, r3, #7
 802a370:	4903      	ldr	r1, [pc, #12]	@ (802a380 <HAL_RCC_GetPCLK1Freq+0x24>)
 802a372:	5ccb      	ldrb	r3, [r1, r3]
 802a374:	fa22 f303 	lsr.w	r3, r2, r3
}
 802a378:	4618      	mov	r0, r3
 802a37a:	bd80      	pop	{r7, pc}
 802a37c:	40023800 	.word	0x40023800
 802a380:	0802e3dc 	.word	0x0802e3dc

0802a384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802a384:	b580      	push	{r7, lr}
 802a386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 802a388:	f7ff ffdc 	bl	802a344 <HAL_RCC_GetHCLKFreq>
 802a38c:	4602      	mov	r2, r0
 802a38e:	4b05      	ldr	r3, [pc, #20]	@ (802a3a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 802a390:	689b      	ldr	r3, [r3, #8]
 802a392:	0b5b      	lsrs	r3, r3, #13
 802a394:	f003 0307 	and.w	r3, r3, #7
 802a398:	4903      	ldr	r1, [pc, #12]	@ (802a3a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 802a39a:	5ccb      	ldrb	r3, [r1, r3]
 802a39c:	fa22 f303 	lsr.w	r3, r2, r3
}
 802a3a0:	4618      	mov	r0, r3
 802a3a2:	bd80      	pop	{r7, pc}
 802a3a4:	40023800 	.word	0x40023800
 802a3a8:	0802e3dc 	.word	0x0802e3dc

0802a3ac <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 802a3ac:	b580      	push	{r7, lr}
 802a3ae:	b082      	sub	sp, #8
 802a3b0:	af00      	add	r7, sp, #0
 802a3b2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 802a3b4:	687b      	ldr	r3, [r7, #4]
 802a3b6:	2b00      	cmp	r3, #0
 802a3b8:	d101      	bne.n	802a3be <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 802a3ba:	2301      	movs	r3, #1
 802a3bc:	e01c      	b.n	802a3f8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 802a3be:	687b      	ldr	r3, [r7, #4]
 802a3c0:	795b      	ldrb	r3, [r3, #5]
 802a3c2:	b2db      	uxtb	r3, r3
 802a3c4:	2b00      	cmp	r3, #0
 802a3c6:	d105      	bne.n	802a3d4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 802a3c8:	687b      	ldr	r3, [r7, #4]
 802a3ca:	2200      	movs	r2, #0
 802a3cc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 802a3ce:	6878      	ldr	r0, [r7, #4]
 802a3d0:	f7fd ff18 	bl	8028204 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 802a3d4:	687b      	ldr	r3, [r7, #4]
 802a3d6:	2202      	movs	r2, #2
 802a3d8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 802a3da:	687b      	ldr	r3, [r7, #4]
 802a3dc:	681b      	ldr	r3, [r3, #0]
 802a3de:	681a      	ldr	r2, [r3, #0]
 802a3e0:	687b      	ldr	r3, [r7, #4]
 802a3e2:	681b      	ldr	r3, [r3, #0]
 802a3e4:	f042 0204 	orr.w	r2, r2, #4
 802a3e8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 802a3ea:	687b      	ldr	r3, [r7, #4]
 802a3ec:	2201      	movs	r2, #1
 802a3ee:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 802a3f0:	687b      	ldr	r3, [r7, #4]
 802a3f2:	2200      	movs	r2, #0
 802a3f4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 802a3f6:	2300      	movs	r3, #0
}
 802a3f8:	4618      	mov	r0, r3
 802a3fa:	3708      	adds	r7, #8
 802a3fc:	46bd      	mov	sp, r7
 802a3fe:	bd80      	pop	{r7, pc}

0802a400 <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 802a400:	b580      	push	{r7, lr}
 802a402:	b082      	sub	sp, #8
 802a404:	af00      	add	r7, sp, #0
 802a406:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 802a408:	687b      	ldr	r3, [r7, #4]
 802a40a:	2b00      	cmp	r3, #0
 802a40c:	d101      	bne.n	802a412 <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 802a40e:	2301      	movs	r3, #1
 802a410:	e01c      	b.n	802a44c <HAL_RNG_DeInit+0x4c>
  }

  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 802a412:	687b      	ldr	r3, [r7, #4]
 802a414:	681b      	ldr	r3, [r3, #0]
 802a416:	681a      	ldr	r2, [r3, #0]
 802a418:	687b      	ldr	r3, [r7, #4]
 802a41a:	681b      	ldr	r3, [r3, #0]
 802a41c:	f022 020c 	bic.w	r2, r2, #12
 802a420:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 802a422:	687b      	ldr	r3, [r7, #4]
 802a424:	681b      	ldr	r3, [r3, #0]
 802a426:	685a      	ldr	r2, [r3, #4]
 802a428:	687b      	ldr	r3, [r7, #4]
 802a42a:	681b      	ldr	r3, [r3, #0]
 802a42c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 802a430:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 802a432:	6878      	ldr	r0, [r7, #4]
 802a434:	f7fd ff08 	bl	8028248 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 802a438:	687b      	ldr	r3, [r7, #4]
 802a43a:	2200      	movs	r2, #0
 802a43c:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 802a43e:	687b      	ldr	r3, [r7, #4]
 802a440:	2200      	movs	r2, #0
 802a442:	609a      	str	r2, [r3, #8]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 802a444:	687b      	ldr	r3, [r7, #4]
 802a446:	2200      	movs	r2, #0
 802a448:	711a      	strb	r2, [r3, #4]

  /* Return the function status */
  return HAL_OK;
 802a44a:	2300      	movs	r3, #0
}
 802a44c:	4618      	mov	r0, r3
 802a44e:	3708      	adds	r7, #8
 802a450:	46bd      	mov	sp, r7
 802a452:	bd80      	pop	{r7, pc}

0802a454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802a454:	b580      	push	{r7, lr}
 802a456:	b082      	sub	sp, #8
 802a458:	af00      	add	r7, sp, #0
 802a45a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802a45c:	687b      	ldr	r3, [r7, #4]
 802a45e:	2b00      	cmp	r3, #0
 802a460:	d101      	bne.n	802a466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802a462:	2301      	movs	r3, #1
 802a464:	e042      	b.n	802a4ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802a466:	687b      	ldr	r3, [r7, #4]
 802a468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 802a46c:	b2db      	uxtb	r3, r3
 802a46e:	2b00      	cmp	r3, #0
 802a470:	d106      	bne.n	802a480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802a472:	687b      	ldr	r3, [r7, #4]
 802a474:	2200      	movs	r2, #0
 802a476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802a47a:	6878      	ldr	r0, [r7, #4]
 802a47c:	f7fe f858 	bl	8028530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802a480:	687b      	ldr	r3, [r7, #4]
 802a482:	2224      	movs	r2, #36	@ 0x24
 802a484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 802a488:	687b      	ldr	r3, [r7, #4]
 802a48a:	681b      	ldr	r3, [r3, #0]
 802a48c:	68da      	ldr	r2, [r3, #12]
 802a48e:	687b      	ldr	r3, [r7, #4]
 802a490:	681b      	ldr	r3, [r3, #0]
 802a492:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 802a496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 802a498:	6878      	ldr	r0, [r7, #4]
 802a49a:	f000 fe15 	bl	802b0c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802a49e:	687b      	ldr	r3, [r7, #4]
 802a4a0:	681b      	ldr	r3, [r3, #0]
 802a4a2:	691a      	ldr	r2, [r3, #16]
 802a4a4:	687b      	ldr	r3, [r7, #4]
 802a4a6:	681b      	ldr	r3, [r3, #0]
 802a4a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 802a4ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802a4ae:	687b      	ldr	r3, [r7, #4]
 802a4b0:	681b      	ldr	r3, [r3, #0]
 802a4b2:	695a      	ldr	r2, [r3, #20]
 802a4b4:	687b      	ldr	r3, [r7, #4]
 802a4b6:	681b      	ldr	r3, [r3, #0]
 802a4b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 802a4bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 802a4be:	687b      	ldr	r3, [r7, #4]
 802a4c0:	681b      	ldr	r3, [r3, #0]
 802a4c2:	68da      	ldr	r2, [r3, #12]
 802a4c4:	687b      	ldr	r3, [r7, #4]
 802a4c6:	681b      	ldr	r3, [r3, #0]
 802a4c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 802a4cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802a4ce:	687b      	ldr	r3, [r7, #4]
 802a4d0:	2200      	movs	r2, #0
 802a4d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 802a4d4:	687b      	ldr	r3, [r7, #4]
 802a4d6:	2220      	movs	r2, #32
 802a4d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 802a4dc:	687b      	ldr	r3, [r7, #4]
 802a4de:	2220      	movs	r2, #32
 802a4e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 802a4e4:	687b      	ldr	r3, [r7, #4]
 802a4e6:	2200      	movs	r2, #0
 802a4e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 802a4ea:	2300      	movs	r3, #0
}
 802a4ec:	4618      	mov	r0, r3
 802a4ee:	3708      	adds	r7, #8
 802a4f0:	46bd      	mov	sp, r7
 802a4f2:	bd80      	pop	{r7, pc}

0802a4f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802a4f4:	b580      	push	{r7, lr}
 802a4f6:	b08a      	sub	sp, #40	@ 0x28
 802a4f8:	af02      	add	r7, sp, #8
 802a4fa:	60f8      	str	r0, [r7, #12]
 802a4fc:	60b9      	str	r1, [r7, #8]
 802a4fe:	603b      	str	r3, [r7, #0]
 802a500:	4613      	mov	r3, r2
 802a502:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 802a504:	2300      	movs	r3, #0
 802a506:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802a508:	68fb      	ldr	r3, [r7, #12]
 802a50a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 802a50e:	b2db      	uxtb	r3, r3
 802a510:	2b20      	cmp	r3, #32
 802a512:	d175      	bne.n	802a600 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 802a514:	68bb      	ldr	r3, [r7, #8]
 802a516:	2b00      	cmp	r3, #0
 802a518:	d002      	beq.n	802a520 <HAL_UART_Transmit+0x2c>
 802a51a:	88fb      	ldrh	r3, [r7, #6]
 802a51c:	2b00      	cmp	r3, #0
 802a51e:	d101      	bne.n	802a524 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 802a520:	2301      	movs	r3, #1
 802a522:	e06e      	b.n	802a602 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802a524:	68fb      	ldr	r3, [r7, #12]
 802a526:	2200      	movs	r2, #0
 802a528:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802a52a:	68fb      	ldr	r3, [r7, #12]
 802a52c:	2221      	movs	r2, #33	@ 0x21
 802a52e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802a532:	f7fe f941 	bl	80287b8 <HAL_GetTick>
 802a536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 802a538:	68fb      	ldr	r3, [r7, #12]
 802a53a:	88fa      	ldrh	r2, [r7, #6]
 802a53c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 802a53e:	68fb      	ldr	r3, [r7, #12]
 802a540:	88fa      	ldrh	r2, [r7, #6]
 802a542:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802a544:	68fb      	ldr	r3, [r7, #12]
 802a546:	689b      	ldr	r3, [r3, #8]
 802a548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802a54c:	d108      	bne.n	802a560 <HAL_UART_Transmit+0x6c>
 802a54e:	68fb      	ldr	r3, [r7, #12]
 802a550:	691b      	ldr	r3, [r3, #16]
 802a552:	2b00      	cmp	r3, #0
 802a554:	d104      	bne.n	802a560 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 802a556:	2300      	movs	r3, #0
 802a558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802a55a:	68bb      	ldr	r3, [r7, #8]
 802a55c:	61bb      	str	r3, [r7, #24]
 802a55e:	e003      	b.n	802a568 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 802a560:	68bb      	ldr	r3, [r7, #8]
 802a562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802a564:	2300      	movs	r3, #0
 802a566:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 802a568:	e02e      	b.n	802a5c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802a56a:	683b      	ldr	r3, [r7, #0]
 802a56c:	9300      	str	r3, [sp, #0]
 802a56e:	697b      	ldr	r3, [r7, #20]
 802a570:	2200      	movs	r2, #0
 802a572:	2180      	movs	r1, #128	@ 0x80
 802a574:	68f8      	ldr	r0, [r7, #12]
 802a576:	f000 fbb3 	bl	802ace0 <UART_WaitOnFlagUntilTimeout>
 802a57a:	4603      	mov	r3, r0
 802a57c:	2b00      	cmp	r3, #0
 802a57e:	d005      	beq.n	802a58c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 802a580:	68fb      	ldr	r3, [r7, #12]
 802a582:	2220      	movs	r2, #32
 802a584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 802a588:	2303      	movs	r3, #3
 802a58a:	e03a      	b.n	802a602 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 802a58c:	69fb      	ldr	r3, [r7, #28]
 802a58e:	2b00      	cmp	r3, #0
 802a590:	d10b      	bne.n	802a5aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 802a592:	69bb      	ldr	r3, [r7, #24]
 802a594:	881b      	ldrh	r3, [r3, #0]
 802a596:	461a      	mov	r2, r3
 802a598:	68fb      	ldr	r3, [r7, #12]
 802a59a:	681b      	ldr	r3, [r3, #0]
 802a59c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802a5a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 802a5a2:	69bb      	ldr	r3, [r7, #24]
 802a5a4:	3302      	adds	r3, #2
 802a5a6:	61bb      	str	r3, [r7, #24]
 802a5a8:	e007      	b.n	802a5ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 802a5aa:	69fb      	ldr	r3, [r7, #28]
 802a5ac:	781a      	ldrb	r2, [r3, #0]
 802a5ae:	68fb      	ldr	r3, [r7, #12]
 802a5b0:	681b      	ldr	r3, [r3, #0]
 802a5b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 802a5b4:	69fb      	ldr	r3, [r7, #28]
 802a5b6:	3301      	adds	r3, #1
 802a5b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802a5ba:	68fb      	ldr	r3, [r7, #12]
 802a5bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 802a5be:	b29b      	uxth	r3, r3
 802a5c0:	3b01      	subs	r3, #1
 802a5c2:	b29a      	uxth	r2, r3
 802a5c4:	68fb      	ldr	r3, [r7, #12]
 802a5c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 802a5c8:	68fb      	ldr	r3, [r7, #12]
 802a5ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 802a5cc:	b29b      	uxth	r3, r3
 802a5ce:	2b00      	cmp	r3, #0
 802a5d0:	d1cb      	bne.n	802a56a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802a5d2:	683b      	ldr	r3, [r7, #0]
 802a5d4:	9300      	str	r3, [sp, #0]
 802a5d6:	697b      	ldr	r3, [r7, #20]
 802a5d8:	2200      	movs	r2, #0
 802a5da:	2140      	movs	r1, #64	@ 0x40
 802a5dc:	68f8      	ldr	r0, [r7, #12]
 802a5de:	f000 fb7f 	bl	802ace0 <UART_WaitOnFlagUntilTimeout>
 802a5e2:	4603      	mov	r3, r0
 802a5e4:	2b00      	cmp	r3, #0
 802a5e6:	d005      	beq.n	802a5f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 802a5e8:	68fb      	ldr	r3, [r7, #12]
 802a5ea:	2220      	movs	r2, #32
 802a5ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 802a5f0:	2303      	movs	r3, #3
 802a5f2:	e006      	b.n	802a602 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 802a5f4:	68fb      	ldr	r3, [r7, #12]
 802a5f6:	2220      	movs	r2, #32
 802a5f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 802a5fc:	2300      	movs	r3, #0
 802a5fe:	e000      	b.n	802a602 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 802a600:	2302      	movs	r3, #2
  }
}
 802a602:	4618      	mov	r0, r3
 802a604:	3720      	adds	r7, #32
 802a606:	46bd      	mov	sp, r7
 802a608:	bd80      	pop	{r7, pc}

0802a60a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802a60a:	b580      	push	{r7, lr}
 802a60c:	b08a      	sub	sp, #40	@ 0x28
 802a60e:	af02      	add	r7, sp, #8
 802a610:	60f8      	str	r0, [r7, #12]
 802a612:	60b9      	str	r1, [r7, #8]
 802a614:	603b      	str	r3, [r7, #0]
 802a616:	4613      	mov	r3, r2
 802a618:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 802a61a:	2300      	movs	r3, #0
 802a61c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 802a61e:	68fb      	ldr	r3, [r7, #12]
 802a620:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 802a624:	b2db      	uxtb	r3, r3
 802a626:	2b20      	cmp	r3, #32
 802a628:	f040 8081 	bne.w	802a72e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 802a62c:	68bb      	ldr	r3, [r7, #8]
 802a62e:	2b00      	cmp	r3, #0
 802a630:	d002      	beq.n	802a638 <HAL_UART_Receive+0x2e>
 802a632:	88fb      	ldrh	r3, [r7, #6]
 802a634:	2b00      	cmp	r3, #0
 802a636:	d101      	bne.n	802a63c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 802a638:	2301      	movs	r3, #1
 802a63a:	e079      	b.n	802a730 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802a63c:	68fb      	ldr	r3, [r7, #12]
 802a63e:	2200      	movs	r2, #0
 802a640:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 802a642:	68fb      	ldr	r3, [r7, #12]
 802a644:	2222      	movs	r2, #34	@ 0x22
 802a646:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802a64a:	68fb      	ldr	r3, [r7, #12]
 802a64c:	2200      	movs	r2, #0
 802a64e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802a650:	f7fe f8b2 	bl	80287b8 <HAL_GetTick>
 802a654:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 802a656:	68fb      	ldr	r3, [r7, #12]
 802a658:	88fa      	ldrh	r2, [r7, #6]
 802a65a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 802a65c:	68fb      	ldr	r3, [r7, #12]
 802a65e:	88fa      	ldrh	r2, [r7, #6]
 802a660:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802a662:	68fb      	ldr	r3, [r7, #12]
 802a664:	689b      	ldr	r3, [r3, #8]
 802a666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802a66a:	d108      	bne.n	802a67e <HAL_UART_Receive+0x74>
 802a66c:	68fb      	ldr	r3, [r7, #12]
 802a66e:	691b      	ldr	r3, [r3, #16]
 802a670:	2b00      	cmp	r3, #0
 802a672:	d104      	bne.n	802a67e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 802a674:	2300      	movs	r3, #0
 802a676:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 802a678:	68bb      	ldr	r3, [r7, #8]
 802a67a:	61bb      	str	r3, [r7, #24]
 802a67c:	e003      	b.n	802a686 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 802a67e:	68bb      	ldr	r3, [r7, #8]
 802a680:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802a682:	2300      	movs	r3, #0
 802a684:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 802a686:	e047      	b.n	802a718 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 802a688:	683b      	ldr	r3, [r7, #0]
 802a68a:	9300      	str	r3, [sp, #0]
 802a68c:	697b      	ldr	r3, [r7, #20]
 802a68e:	2200      	movs	r2, #0
 802a690:	2120      	movs	r1, #32
 802a692:	68f8      	ldr	r0, [r7, #12]
 802a694:	f000 fb24 	bl	802ace0 <UART_WaitOnFlagUntilTimeout>
 802a698:	4603      	mov	r3, r0
 802a69a:	2b00      	cmp	r3, #0
 802a69c:	d005      	beq.n	802a6aa <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 802a69e:	68fb      	ldr	r3, [r7, #12]
 802a6a0:	2220      	movs	r2, #32
 802a6a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 802a6a6:	2303      	movs	r3, #3
 802a6a8:	e042      	b.n	802a730 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 802a6aa:	69fb      	ldr	r3, [r7, #28]
 802a6ac:	2b00      	cmp	r3, #0
 802a6ae:	d10c      	bne.n	802a6ca <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 802a6b0:	68fb      	ldr	r3, [r7, #12]
 802a6b2:	681b      	ldr	r3, [r3, #0]
 802a6b4:	685b      	ldr	r3, [r3, #4]
 802a6b6:	b29b      	uxth	r3, r3
 802a6b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802a6bc:	b29a      	uxth	r2, r3
 802a6be:	69bb      	ldr	r3, [r7, #24]
 802a6c0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 802a6c2:	69bb      	ldr	r3, [r7, #24]
 802a6c4:	3302      	adds	r3, #2
 802a6c6:	61bb      	str	r3, [r7, #24]
 802a6c8:	e01f      	b.n	802a70a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802a6ca:	68fb      	ldr	r3, [r7, #12]
 802a6cc:	689b      	ldr	r3, [r3, #8]
 802a6ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802a6d2:	d007      	beq.n	802a6e4 <HAL_UART_Receive+0xda>
 802a6d4:	68fb      	ldr	r3, [r7, #12]
 802a6d6:	689b      	ldr	r3, [r3, #8]
 802a6d8:	2b00      	cmp	r3, #0
 802a6da:	d10a      	bne.n	802a6f2 <HAL_UART_Receive+0xe8>
 802a6dc:	68fb      	ldr	r3, [r7, #12]
 802a6de:	691b      	ldr	r3, [r3, #16]
 802a6e0:	2b00      	cmp	r3, #0
 802a6e2:	d106      	bne.n	802a6f2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802a6e4:	68fb      	ldr	r3, [r7, #12]
 802a6e6:	681b      	ldr	r3, [r3, #0]
 802a6e8:	685b      	ldr	r3, [r3, #4]
 802a6ea:	b2da      	uxtb	r2, r3
 802a6ec:	69fb      	ldr	r3, [r7, #28]
 802a6ee:	701a      	strb	r2, [r3, #0]
 802a6f0:	e008      	b.n	802a704 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802a6f2:	68fb      	ldr	r3, [r7, #12]
 802a6f4:	681b      	ldr	r3, [r3, #0]
 802a6f6:	685b      	ldr	r3, [r3, #4]
 802a6f8:	b2db      	uxtb	r3, r3
 802a6fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802a6fe:	b2da      	uxtb	r2, r3
 802a700:	69fb      	ldr	r3, [r7, #28]
 802a702:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 802a704:	69fb      	ldr	r3, [r7, #28]
 802a706:	3301      	adds	r3, #1
 802a708:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 802a70a:	68fb      	ldr	r3, [r7, #12]
 802a70c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802a70e:	b29b      	uxth	r3, r3
 802a710:	3b01      	subs	r3, #1
 802a712:	b29a      	uxth	r2, r3
 802a714:	68fb      	ldr	r3, [r7, #12]
 802a716:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 802a718:	68fb      	ldr	r3, [r7, #12]
 802a71a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802a71c:	b29b      	uxth	r3, r3
 802a71e:	2b00      	cmp	r3, #0
 802a720:	d1b2      	bne.n	802a688 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 802a722:	68fb      	ldr	r3, [r7, #12]
 802a724:	2220      	movs	r2, #32
 802a726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 802a72a:	2300      	movs	r3, #0
 802a72c:	e000      	b.n	802a730 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 802a72e:	2302      	movs	r3, #2
  }
}
 802a730:	4618      	mov	r0, r3
 802a732:	3720      	adds	r7, #32
 802a734:	46bd      	mov	sp, r7
 802a736:	bd80      	pop	{r7, pc}

0802a738 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 802a738:	b580      	push	{r7, lr}
 802a73a:	b0ba      	sub	sp, #232	@ 0xe8
 802a73c:	af00      	add	r7, sp, #0
 802a73e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 802a740:	687b      	ldr	r3, [r7, #4]
 802a742:	681b      	ldr	r3, [r3, #0]
 802a744:	681b      	ldr	r3, [r3, #0]
 802a746:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802a74a:	687b      	ldr	r3, [r7, #4]
 802a74c:	681b      	ldr	r3, [r3, #0]
 802a74e:	68db      	ldr	r3, [r3, #12]
 802a750:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 802a754:	687b      	ldr	r3, [r7, #4]
 802a756:	681b      	ldr	r3, [r3, #0]
 802a758:	695b      	ldr	r3, [r3, #20]
 802a75a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 802a75e:	2300      	movs	r3, #0
 802a760:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 802a764:	2300      	movs	r3, #0
 802a766:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 802a76a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802a76e:	f003 030f 	and.w	r3, r3, #15
 802a772:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 802a776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802a77a:	2b00      	cmp	r3, #0
 802a77c:	d10f      	bne.n	802a79e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802a77e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802a782:	f003 0320 	and.w	r3, r3, #32
 802a786:	2b00      	cmp	r3, #0
 802a788:	d009      	beq.n	802a79e <HAL_UART_IRQHandler+0x66>
 802a78a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802a78e:	f003 0320 	and.w	r3, r3, #32
 802a792:	2b00      	cmp	r3, #0
 802a794:	d003      	beq.n	802a79e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 802a796:	6878      	ldr	r0, [r7, #4]
 802a798:	f000 fbd7 	bl	802af4a <UART_Receive_IT>
      return;
 802a79c:	e273      	b.n	802ac86 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 802a79e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802a7a2:	2b00      	cmp	r3, #0
 802a7a4:	f000 80de 	beq.w	802a964 <HAL_UART_IRQHandler+0x22c>
 802a7a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802a7ac:	f003 0301 	and.w	r3, r3, #1
 802a7b0:	2b00      	cmp	r3, #0
 802a7b2:	d106      	bne.n	802a7c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 802a7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802a7b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 802a7bc:	2b00      	cmp	r3, #0
 802a7be:	f000 80d1 	beq.w	802a964 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 802a7c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802a7c6:	f003 0301 	and.w	r3, r3, #1
 802a7ca:	2b00      	cmp	r3, #0
 802a7cc:	d00b      	beq.n	802a7e6 <HAL_UART_IRQHandler+0xae>
 802a7ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802a7d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802a7d6:	2b00      	cmp	r3, #0
 802a7d8:	d005      	beq.n	802a7e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802a7da:	687b      	ldr	r3, [r7, #4]
 802a7dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802a7de:	f043 0201 	orr.w	r2, r3, #1
 802a7e2:	687b      	ldr	r3, [r7, #4]
 802a7e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802a7e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802a7ea:	f003 0304 	and.w	r3, r3, #4
 802a7ee:	2b00      	cmp	r3, #0
 802a7f0:	d00b      	beq.n	802a80a <HAL_UART_IRQHandler+0xd2>
 802a7f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802a7f6:	f003 0301 	and.w	r3, r3, #1
 802a7fa:	2b00      	cmp	r3, #0
 802a7fc:	d005      	beq.n	802a80a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 802a7fe:	687b      	ldr	r3, [r7, #4]
 802a800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802a802:	f043 0202 	orr.w	r2, r3, #2
 802a806:	687b      	ldr	r3, [r7, #4]
 802a808:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802a80a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802a80e:	f003 0302 	and.w	r3, r3, #2
 802a812:	2b00      	cmp	r3, #0
 802a814:	d00b      	beq.n	802a82e <HAL_UART_IRQHandler+0xf6>
 802a816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802a81a:	f003 0301 	and.w	r3, r3, #1
 802a81e:	2b00      	cmp	r3, #0
 802a820:	d005      	beq.n	802a82e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 802a822:	687b      	ldr	r3, [r7, #4]
 802a824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802a826:	f043 0204 	orr.w	r2, r3, #4
 802a82a:	687b      	ldr	r3, [r7, #4]
 802a82c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 802a82e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802a832:	f003 0308 	and.w	r3, r3, #8
 802a836:	2b00      	cmp	r3, #0
 802a838:	d011      	beq.n	802a85e <HAL_UART_IRQHandler+0x126>
 802a83a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802a83e:	f003 0320 	and.w	r3, r3, #32
 802a842:	2b00      	cmp	r3, #0
 802a844:	d105      	bne.n	802a852 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 802a846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802a84a:	f003 0301 	and.w	r3, r3, #1
 802a84e:	2b00      	cmp	r3, #0
 802a850:	d005      	beq.n	802a85e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 802a852:	687b      	ldr	r3, [r7, #4]
 802a854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802a856:	f043 0208 	orr.w	r2, r3, #8
 802a85a:	687b      	ldr	r3, [r7, #4]
 802a85c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802a85e:	687b      	ldr	r3, [r7, #4]
 802a860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802a862:	2b00      	cmp	r3, #0
 802a864:	f000 820a 	beq.w	802ac7c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802a868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802a86c:	f003 0320 	and.w	r3, r3, #32
 802a870:	2b00      	cmp	r3, #0
 802a872:	d008      	beq.n	802a886 <HAL_UART_IRQHandler+0x14e>
 802a874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802a878:	f003 0320 	and.w	r3, r3, #32
 802a87c:	2b00      	cmp	r3, #0
 802a87e:	d002      	beq.n	802a886 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 802a880:	6878      	ldr	r0, [r7, #4]
 802a882:	f000 fb62 	bl	802af4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 802a886:	687b      	ldr	r3, [r7, #4]
 802a888:	681b      	ldr	r3, [r3, #0]
 802a88a:	695b      	ldr	r3, [r3, #20]
 802a88c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802a890:	2b40      	cmp	r3, #64	@ 0x40
 802a892:	bf0c      	ite	eq
 802a894:	2301      	moveq	r3, #1
 802a896:	2300      	movne	r3, #0
 802a898:	b2db      	uxtb	r3, r3
 802a89a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 802a89e:	687b      	ldr	r3, [r7, #4]
 802a8a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802a8a2:	f003 0308 	and.w	r3, r3, #8
 802a8a6:	2b00      	cmp	r3, #0
 802a8a8:	d103      	bne.n	802a8b2 <HAL_UART_IRQHandler+0x17a>
 802a8aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 802a8ae:	2b00      	cmp	r3, #0
 802a8b0:	d04f      	beq.n	802a952 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 802a8b2:	6878      	ldr	r0, [r7, #4]
 802a8b4:	f000 fa6d 	bl	802ad92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802a8b8:	687b      	ldr	r3, [r7, #4]
 802a8ba:	681b      	ldr	r3, [r3, #0]
 802a8bc:	695b      	ldr	r3, [r3, #20]
 802a8be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802a8c2:	2b40      	cmp	r3, #64	@ 0x40
 802a8c4:	d141      	bne.n	802a94a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802a8c6:	687b      	ldr	r3, [r7, #4]
 802a8c8:	681b      	ldr	r3, [r3, #0]
 802a8ca:	3314      	adds	r3, #20
 802a8cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a8d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 802a8d4:	e853 3f00 	ldrex	r3, [r3]
 802a8d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 802a8dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 802a8e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 802a8e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 802a8e8:	687b      	ldr	r3, [r7, #4]
 802a8ea:	681b      	ldr	r3, [r3, #0]
 802a8ec:	3314      	adds	r3, #20
 802a8ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 802a8f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 802a8f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a8fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 802a8fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 802a902:	e841 2300 	strex	r3, r2, [r1]
 802a906:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 802a90a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802a90e:	2b00      	cmp	r3, #0
 802a910:	d1d9      	bne.n	802a8c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 802a912:	687b      	ldr	r3, [r7, #4]
 802a914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802a916:	2b00      	cmp	r3, #0
 802a918:	d013      	beq.n	802a942 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802a91a:	687b      	ldr	r3, [r7, #4]
 802a91c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802a91e:	4a8a      	ldr	r2, [pc, #552]	@ (802ab48 <HAL_UART_IRQHandler+0x410>)
 802a920:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802a922:	687b      	ldr	r3, [r7, #4]
 802a924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802a926:	4618      	mov	r0, r3
 802a928:	f7fe f9a6 	bl	8028c78 <HAL_DMA_Abort_IT>
 802a92c:	4603      	mov	r3, r0
 802a92e:	2b00      	cmp	r3, #0
 802a930:	d016      	beq.n	802a960 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 802a932:	687b      	ldr	r3, [r7, #4]
 802a934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802a936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802a938:	687a      	ldr	r2, [r7, #4]
 802a93a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 802a93c:	4610      	mov	r0, r2
 802a93e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802a940:	e00e      	b.n	802a960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 802a942:	6878      	ldr	r0, [r7, #4]
 802a944:	f000 f9b6 	bl	802acb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802a948:	e00a      	b.n	802a960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802a94a:	6878      	ldr	r0, [r7, #4]
 802a94c:	f000 f9b2 	bl	802acb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802a950:	e006      	b.n	802a960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 802a952:	6878      	ldr	r0, [r7, #4]
 802a954:	f000 f9ae 	bl	802acb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802a958:	687b      	ldr	r3, [r7, #4]
 802a95a:	2200      	movs	r2, #0
 802a95c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 802a95e:	e18d      	b.n	802ac7c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802a960:	bf00      	nop
    return;
 802a962:	e18b      	b.n	802ac7c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802a964:	687b      	ldr	r3, [r7, #4]
 802a966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a968:	2b01      	cmp	r3, #1
 802a96a:	f040 8167 	bne.w	802ac3c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 802a96e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802a972:	f003 0310 	and.w	r3, r3, #16
 802a976:	2b00      	cmp	r3, #0
 802a978:	f000 8160 	beq.w	802ac3c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 802a97c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802a980:	f003 0310 	and.w	r3, r3, #16
 802a984:	2b00      	cmp	r3, #0
 802a986:	f000 8159 	beq.w	802ac3c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 802a98a:	2300      	movs	r3, #0
 802a98c:	60bb      	str	r3, [r7, #8]
 802a98e:	687b      	ldr	r3, [r7, #4]
 802a990:	681b      	ldr	r3, [r3, #0]
 802a992:	681b      	ldr	r3, [r3, #0]
 802a994:	60bb      	str	r3, [r7, #8]
 802a996:	687b      	ldr	r3, [r7, #4]
 802a998:	681b      	ldr	r3, [r3, #0]
 802a99a:	685b      	ldr	r3, [r3, #4]
 802a99c:	60bb      	str	r3, [r7, #8]
 802a99e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802a9a0:	687b      	ldr	r3, [r7, #4]
 802a9a2:	681b      	ldr	r3, [r3, #0]
 802a9a4:	695b      	ldr	r3, [r3, #20]
 802a9a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802a9aa:	2b40      	cmp	r3, #64	@ 0x40
 802a9ac:	f040 80ce 	bne.w	802ab4c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 802a9b0:	687b      	ldr	r3, [r7, #4]
 802a9b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802a9b4:	681b      	ldr	r3, [r3, #0]
 802a9b6:	685b      	ldr	r3, [r3, #4]
 802a9b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 802a9bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 802a9c0:	2b00      	cmp	r3, #0
 802a9c2:	f000 80a9 	beq.w	802ab18 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802a9c6:	687b      	ldr	r3, [r7, #4]
 802a9c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802a9ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 802a9ce:	429a      	cmp	r2, r3
 802a9d0:	f080 80a2 	bcs.w	802ab18 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 802a9d4:	687b      	ldr	r3, [r7, #4]
 802a9d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 802a9da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 802a9dc:	687b      	ldr	r3, [r7, #4]
 802a9de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802a9e0:	69db      	ldr	r3, [r3, #28]
 802a9e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802a9e6:	f000 8088 	beq.w	802aafa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802a9ea:	687b      	ldr	r3, [r7, #4]
 802a9ec:	681b      	ldr	r3, [r3, #0]
 802a9ee:	330c      	adds	r3, #12
 802a9f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a9f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 802a9f8:	e853 3f00 	ldrex	r3, [r3]
 802a9fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 802aa00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 802aa04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 802aa08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 802aa0c:	687b      	ldr	r3, [r7, #4]
 802aa0e:	681b      	ldr	r3, [r3, #0]
 802aa10:	330c      	adds	r3, #12
 802aa12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 802aa16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 802aa1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802aa1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 802aa22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 802aa26:	e841 2300 	strex	r3, r2, [r1]
 802aa2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 802aa2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802aa32:	2b00      	cmp	r3, #0
 802aa34:	d1d9      	bne.n	802a9ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802aa36:	687b      	ldr	r3, [r7, #4]
 802aa38:	681b      	ldr	r3, [r3, #0]
 802aa3a:	3314      	adds	r3, #20
 802aa3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802aa3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 802aa40:	e853 3f00 	ldrex	r3, [r3]
 802aa44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 802aa46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802aa48:	f023 0301 	bic.w	r3, r3, #1
 802aa4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 802aa50:	687b      	ldr	r3, [r7, #4]
 802aa52:	681b      	ldr	r3, [r3, #0]
 802aa54:	3314      	adds	r3, #20
 802aa56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 802aa5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 802aa5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802aa60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 802aa62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 802aa66:	e841 2300 	strex	r3, r2, [r1]
 802aa6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 802aa6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802aa6e:	2b00      	cmp	r3, #0
 802aa70:	d1e1      	bne.n	802aa36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802aa72:	687b      	ldr	r3, [r7, #4]
 802aa74:	681b      	ldr	r3, [r3, #0]
 802aa76:	3314      	adds	r3, #20
 802aa78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802aa7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802aa7c:	e853 3f00 	ldrex	r3, [r3]
 802aa80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 802aa82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802aa84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 802aa88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 802aa8c:	687b      	ldr	r3, [r7, #4]
 802aa8e:	681b      	ldr	r3, [r3, #0]
 802aa90:	3314      	adds	r3, #20
 802aa92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 802aa96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 802aa98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802aa9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 802aa9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 802aa9e:	e841 2300 	strex	r3, r2, [r1]
 802aaa2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 802aaa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802aaa6:	2b00      	cmp	r3, #0
 802aaa8:	d1e3      	bne.n	802aa72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 802aaaa:	687b      	ldr	r3, [r7, #4]
 802aaac:	2220      	movs	r2, #32
 802aaae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802aab2:	687b      	ldr	r3, [r7, #4]
 802aab4:	2200      	movs	r2, #0
 802aab6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802aab8:	687b      	ldr	r3, [r7, #4]
 802aaba:	681b      	ldr	r3, [r3, #0]
 802aabc:	330c      	adds	r3, #12
 802aabe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802aac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802aac2:	e853 3f00 	ldrex	r3, [r3]
 802aac6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 802aac8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802aaca:	f023 0310 	bic.w	r3, r3, #16
 802aace:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 802aad2:	687b      	ldr	r3, [r7, #4]
 802aad4:	681b      	ldr	r3, [r3, #0]
 802aad6:	330c      	adds	r3, #12
 802aad8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 802aadc:	65ba      	str	r2, [r7, #88]	@ 0x58
 802aade:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802aae0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 802aae2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802aae4:	e841 2300 	strex	r3, r2, [r1]
 802aae8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 802aaea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802aaec:	2b00      	cmp	r3, #0
 802aaee:	d1e3      	bne.n	802aab8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 802aaf0:	687b      	ldr	r3, [r7, #4]
 802aaf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802aaf4:	4618      	mov	r0, r3
 802aaf6:	f7fe f84f 	bl	8028b98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 802aafa:	687b      	ldr	r3, [r7, #4]
 802aafc:	2202      	movs	r2, #2
 802aafe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 802ab00:	687b      	ldr	r3, [r7, #4]
 802ab02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 802ab04:	687b      	ldr	r3, [r7, #4]
 802ab06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802ab08:	b29b      	uxth	r3, r3
 802ab0a:	1ad3      	subs	r3, r2, r3
 802ab0c:	b29b      	uxth	r3, r3
 802ab0e:	4619      	mov	r1, r3
 802ab10:	6878      	ldr	r0, [r7, #4]
 802ab12:	f000 f8d9 	bl	802acc8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 802ab16:	e0b3      	b.n	802ac80 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 802ab18:	687b      	ldr	r3, [r7, #4]
 802ab1a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802ab1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 802ab20:	429a      	cmp	r2, r3
 802ab22:	f040 80ad 	bne.w	802ac80 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 802ab26:	687b      	ldr	r3, [r7, #4]
 802ab28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802ab2a:	69db      	ldr	r3, [r3, #28]
 802ab2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802ab30:	f040 80a6 	bne.w	802ac80 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 802ab34:	687b      	ldr	r3, [r7, #4]
 802ab36:	2202      	movs	r2, #2
 802ab38:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802ab3a:	687b      	ldr	r3, [r7, #4]
 802ab3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802ab3e:	4619      	mov	r1, r3
 802ab40:	6878      	ldr	r0, [r7, #4]
 802ab42:	f000 f8c1 	bl	802acc8 <HAL_UARTEx_RxEventCallback>
      return;
 802ab46:	e09b      	b.n	802ac80 <HAL_UART_IRQHandler+0x548>
 802ab48:	0802ae59 	.word	0x0802ae59
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 802ab4c:	687b      	ldr	r3, [r7, #4]
 802ab4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 802ab50:	687b      	ldr	r3, [r7, #4]
 802ab52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802ab54:	b29b      	uxth	r3, r3
 802ab56:	1ad3      	subs	r3, r2, r3
 802ab58:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 802ab5c:	687b      	ldr	r3, [r7, #4]
 802ab5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802ab60:	b29b      	uxth	r3, r3
 802ab62:	2b00      	cmp	r3, #0
 802ab64:	f000 808e 	beq.w	802ac84 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 802ab68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 802ab6c:	2b00      	cmp	r3, #0
 802ab6e:	f000 8089 	beq.w	802ac84 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802ab72:	687b      	ldr	r3, [r7, #4]
 802ab74:	681b      	ldr	r3, [r3, #0]
 802ab76:	330c      	adds	r3, #12
 802ab78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ab7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802ab7c:	e853 3f00 	ldrex	r3, [r3]
 802ab80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 802ab82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ab84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802ab88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 802ab8c:	687b      	ldr	r3, [r7, #4]
 802ab8e:	681b      	ldr	r3, [r3, #0]
 802ab90:	330c      	adds	r3, #12
 802ab92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 802ab96:	647a      	str	r2, [r7, #68]	@ 0x44
 802ab98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ab9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802ab9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802ab9e:	e841 2300 	strex	r3, r2, [r1]
 802aba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 802aba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802aba6:	2b00      	cmp	r3, #0
 802aba8:	d1e3      	bne.n	802ab72 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802abaa:	687b      	ldr	r3, [r7, #4]
 802abac:	681b      	ldr	r3, [r3, #0]
 802abae:	3314      	adds	r3, #20
 802abb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802abb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802abb4:	e853 3f00 	ldrex	r3, [r3]
 802abb8:	623b      	str	r3, [r7, #32]
   return(result);
 802abba:	6a3b      	ldr	r3, [r7, #32]
 802abbc:	f023 0301 	bic.w	r3, r3, #1
 802abc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 802abc4:	687b      	ldr	r3, [r7, #4]
 802abc6:	681b      	ldr	r3, [r3, #0]
 802abc8:	3314      	adds	r3, #20
 802abca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 802abce:	633a      	str	r2, [r7, #48]	@ 0x30
 802abd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802abd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802abd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802abd6:	e841 2300 	strex	r3, r2, [r1]
 802abda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 802abdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802abde:	2b00      	cmp	r3, #0
 802abe0:	d1e3      	bne.n	802abaa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802abe2:	687b      	ldr	r3, [r7, #4]
 802abe4:	2220      	movs	r2, #32
 802abe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802abea:	687b      	ldr	r3, [r7, #4]
 802abec:	2200      	movs	r2, #0
 802abee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802abf0:	687b      	ldr	r3, [r7, #4]
 802abf2:	681b      	ldr	r3, [r3, #0]
 802abf4:	330c      	adds	r3, #12
 802abf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802abf8:	693b      	ldr	r3, [r7, #16]
 802abfa:	e853 3f00 	ldrex	r3, [r3]
 802abfe:	60fb      	str	r3, [r7, #12]
   return(result);
 802ac00:	68fb      	ldr	r3, [r7, #12]
 802ac02:	f023 0310 	bic.w	r3, r3, #16
 802ac06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 802ac0a:	687b      	ldr	r3, [r7, #4]
 802ac0c:	681b      	ldr	r3, [r3, #0]
 802ac0e:	330c      	adds	r3, #12
 802ac10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 802ac14:	61fa      	str	r2, [r7, #28]
 802ac16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ac18:	69b9      	ldr	r1, [r7, #24]
 802ac1a:	69fa      	ldr	r2, [r7, #28]
 802ac1c:	e841 2300 	strex	r3, r2, [r1]
 802ac20:	617b      	str	r3, [r7, #20]
   return(result);
 802ac22:	697b      	ldr	r3, [r7, #20]
 802ac24:	2b00      	cmp	r3, #0
 802ac26:	d1e3      	bne.n	802abf0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 802ac28:	687b      	ldr	r3, [r7, #4]
 802ac2a:	2202      	movs	r2, #2
 802ac2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 802ac2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 802ac32:	4619      	mov	r1, r3
 802ac34:	6878      	ldr	r0, [r7, #4]
 802ac36:	f000 f847 	bl	802acc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802ac3a:	e023      	b.n	802ac84 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 802ac3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802ac40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802ac44:	2b00      	cmp	r3, #0
 802ac46:	d009      	beq.n	802ac5c <HAL_UART_IRQHandler+0x524>
 802ac48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802ac4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802ac50:	2b00      	cmp	r3, #0
 802ac52:	d003      	beq.n	802ac5c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 802ac54:	6878      	ldr	r0, [r7, #4]
 802ac56:	f000 f910 	bl	802ae7a <UART_Transmit_IT>
    return;
 802ac5a:	e014      	b.n	802ac86 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 802ac5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802ac60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802ac64:	2b00      	cmp	r3, #0
 802ac66:	d00e      	beq.n	802ac86 <HAL_UART_IRQHandler+0x54e>
 802ac68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802ac6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802ac70:	2b00      	cmp	r3, #0
 802ac72:	d008      	beq.n	802ac86 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 802ac74:	6878      	ldr	r0, [r7, #4]
 802ac76:	f000 f950 	bl	802af1a <UART_EndTransmit_IT>
    return;
 802ac7a:	e004      	b.n	802ac86 <HAL_UART_IRQHandler+0x54e>
    return;
 802ac7c:	bf00      	nop
 802ac7e:	e002      	b.n	802ac86 <HAL_UART_IRQHandler+0x54e>
      return;
 802ac80:	bf00      	nop
 802ac82:	e000      	b.n	802ac86 <HAL_UART_IRQHandler+0x54e>
      return;
 802ac84:	bf00      	nop
  }
}
 802ac86:	37e8      	adds	r7, #232	@ 0xe8
 802ac88:	46bd      	mov	sp, r7
 802ac8a:	bd80      	pop	{r7, pc}

0802ac8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 802ac8c:	b480      	push	{r7}
 802ac8e:	b083      	sub	sp, #12
 802ac90:	af00      	add	r7, sp, #0
 802ac92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 802ac94:	bf00      	nop
 802ac96:	370c      	adds	r7, #12
 802ac98:	46bd      	mov	sp, r7
 802ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac9e:	4770      	bx	lr

0802aca0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 802aca0:	b480      	push	{r7}
 802aca2:	b083      	sub	sp, #12
 802aca4:	af00      	add	r7, sp, #0
 802aca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 802aca8:	bf00      	nop
 802acaa:	370c      	adds	r7, #12
 802acac:	46bd      	mov	sp, r7
 802acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acb2:	4770      	bx	lr

0802acb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 802acb4:	b480      	push	{r7}
 802acb6:	b083      	sub	sp, #12
 802acb8:	af00      	add	r7, sp, #0
 802acba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 802acbc:	bf00      	nop
 802acbe:	370c      	adds	r7, #12
 802acc0:	46bd      	mov	sp, r7
 802acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acc6:	4770      	bx	lr

0802acc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 802acc8:	b480      	push	{r7}
 802acca:	b083      	sub	sp, #12
 802accc:	af00      	add	r7, sp, #0
 802acce:	6078      	str	r0, [r7, #4]
 802acd0:	460b      	mov	r3, r1
 802acd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 802acd4:	bf00      	nop
 802acd6:	370c      	adds	r7, #12
 802acd8:	46bd      	mov	sp, r7
 802acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acde:	4770      	bx	lr

0802ace0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 802ace0:	b580      	push	{r7, lr}
 802ace2:	b086      	sub	sp, #24
 802ace4:	af00      	add	r7, sp, #0
 802ace6:	60f8      	str	r0, [r7, #12]
 802ace8:	60b9      	str	r1, [r7, #8]
 802acea:	603b      	str	r3, [r7, #0]
 802acec:	4613      	mov	r3, r2
 802acee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802acf0:	e03b      	b.n	802ad6a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802acf2:	6a3b      	ldr	r3, [r7, #32]
 802acf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802acf8:	d037      	beq.n	802ad6a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802acfa:	f7fd fd5d 	bl	80287b8 <HAL_GetTick>
 802acfe:	4602      	mov	r2, r0
 802ad00:	683b      	ldr	r3, [r7, #0]
 802ad02:	1ad3      	subs	r3, r2, r3
 802ad04:	6a3a      	ldr	r2, [r7, #32]
 802ad06:	429a      	cmp	r2, r3
 802ad08:	d302      	bcc.n	802ad10 <UART_WaitOnFlagUntilTimeout+0x30>
 802ad0a:	6a3b      	ldr	r3, [r7, #32]
 802ad0c:	2b00      	cmp	r3, #0
 802ad0e:	d101      	bne.n	802ad14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 802ad10:	2303      	movs	r3, #3
 802ad12:	e03a      	b.n	802ad8a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 802ad14:	68fb      	ldr	r3, [r7, #12]
 802ad16:	681b      	ldr	r3, [r3, #0]
 802ad18:	68db      	ldr	r3, [r3, #12]
 802ad1a:	f003 0304 	and.w	r3, r3, #4
 802ad1e:	2b00      	cmp	r3, #0
 802ad20:	d023      	beq.n	802ad6a <UART_WaitOnFlagUntilTimeout+0x8a>
 802ad22:	68bb      	ldr	r3, [r7, #8]
 802ad24:	2b80      	cmp	r3, #128	@ 0x80
 802ad26:	d020      	beq.n	802ad6a <UART_WaitOnFlagUntilTimeout+0x8a>
 802ad28:	68bb      	ldr	r3, [r7, #8]
 802ad2a:	2b40      	cmp	r3, #64	@ 0x40
 802ad2c:	d01d      	beq.n	802ad6a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 802ad2e:	68fb      	ldr	r3, [r7, #12]
 802ad30:	681b      	ldr	r3, [r3, #0]
 802ad32:	681b      	ldr	r3, [r3, #0]
 802ad34:	f003 0308 	and.w	r3, r3, #8
 802ad38:	2b08      	cmp	r3, #8
 802ad3a:	d116      	bne.n	802ad6a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 802ad3c:	2300      	movs	r3, #0
 802ad3e:	617b      	str	r3, [r7, #20]
 802ad40:	68fb      	ldr	r3, [r7, #12]
 802ad42:	681b      	ldr	r3, [r3, #0]
 802ad44:	681b      	ldr	r3, [r3, #0]
 802ad46:	617b      	str	r3, [r7, #20]
 802ad48:	68fb      	ldr	r3, [r7, #12]
 802ad4a:	681b      	ldr	r3, [r3, #0]
 802ad4c:	685b      	ldr	r3, [r3, #4]
 802ad4e:	617b      	str	r3, [r7, #20]
 802ad50:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 802ad52:	68f8      	ldr	r0, [r7, #12]
 802ad54:	f000 f81d 	bl	802ad92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 802ad58:	68fb      	ldr	r3, [r7, #12]
 802ad5a:	2208      	movs	r2, #8
 802ad5c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802ad5e:	68fb      	ldr	r3, [r7, #12]
 802ad60:	2200      	movs	r2, #0
 802ad62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 802ad66:	2301      	movs	r3, #1
 802ad68:	e00f      	b.n	802ad8a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802ad6a:	68fb      	ldr	r3, [r7, #12]
 802ad6c:	681b      	ldr	r3, [r3, #0]
 802ad6e:	681a      	ldr	r2, [r3, #0]
 802ad70:	68bb      	ldr	r3, [r7, #8]
 802ad72:	4013      	ands	r3, r2
 802ad74:	68ba      	ldr	r2, [r7, #8]
 802ad76:	429a      	cmp	r2, r3
 802ad78:	bf0c      	ite	eq
 802ad7a:	2301      	moveq	r3, #1
 802ad7c:	2300      	movne	r3, #0
 802ad7e:	b2db      	uxtb	r3, r3
 802ad80:	461a      	mov	r2, r3
 802ad82:	79fb      	ldrb	r3, [r7, #7]
 802ad84:	429a      	cmp	r2, r3
 802ad86:	d0b4      	beq.n	802acf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802ad88:	2300      	movs	r3, #0
}
 802ad8a:	4618      	mov	r0, r3
 802ad8c:	3718      	adds	r7, #24
 802ad8e:	46bd      	mov	sp, r7
 802ad90:	bd80      	pop	{r7, pc}

0802ad92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802ad92:	b480      	push	{r7}
 802ad94:	b095      	sub	sp, #84	@ 0x54
 802ad96:	af00      	add	r7, sp, #0
 802ad98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802ad9a:	687b      	ldr	r3, [r7, #4]
 802ad9c:	681b      	ldr	r3, [r3, #0]
 802ad9e:	330c      	adds	r3, #12
 802ada0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ada2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ada4:	e853 3f00 	ldrex	r3, [r3]
 802ada8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 802adaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802adac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802adb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802adb2:	687b      	ldr	r3, [r7, #4]
 802adb4:	681b      	ldr	r3, [r3, #0]
 802adb6:	330c      	adds	r3, #12
 802adb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802adba:	643a      	str	r2, [r7, #64]	@ 0x40
 802adbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802adbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 802adc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802adc2:	e841 2300 	strex	r3, r2, [r1]
 802adc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 802adc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802adca:	2b00      	cmp	r3, #0
 802adcc:	d1e5      	bne.n	802ad9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802adce:	687b      	ldr	r3, [r7, #4]
 802add0:	681b      	ldr	r3, [r3, #0]
 802add2:	3314      	adds	r3, #20
 802add4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802add6:	6a3b      	ldr	r3, [r7, #32]
 802add8:	e853 3f00 	ldrex	r3, [r3]
 802addc:	61fb      	str	r3, [r7, #28]
   return(result);
 802adde:	69fb      	ldr	r3, [r7, #28]
 802ade0:	f023 0301 	bic.w	r3, r3, #1
 802ade4:	64bb      	str	r3, [r7, #72]	@ 0x48
 802ade6:	687b      	ldr	r3, [r7, #4]
 802ade8:	681b      	ldr	r3, [r3, #0]
 802adea:	3314      	adds	r3, #20
 802adec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802adee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802adf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802adf2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802adf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802adf6:	e841 2300 	strex	r3, r2, [r1]
 802adfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 802adfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802adfe:	2b00      	cmp	r3, #0
 802ae00:	d1e5      	bne.n	802adce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802ae02:	687b      	ldr	r3, [r7, #4]
 802ae04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802ae06:	2b01      	cmp	r3, #1
 802ae08:	d119      	bne.n	802ae3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802ae0a:	687b      	ldr	r3, [r7, #4]
 802ae0c:	681b      	ldr	r3, [r3, #0]
 802ae0e:	330c      	adds	r3, #12
 802ae10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ae12:	68fb      	ldr	r3, [r7, #12]
 802ae14:	e853 3f00 	ldrex	r3, [r3]
 802ae18:	60bb      	str	r3, [r7, #8]
   return(result);
 802ae1a:	68bb      	ldr	r3, [r7, #8]
 802ae1c:	f023 0310 	bic.w	r3, r3, #16
 802ae20:	647b      	str	r3, [r7, #68]	@ 0x44
 802ae22:	687b      	ldr	r3, [r7, #4]
 802ae24:	681b      	ldr	r3, [r3, #0]
 802ae26:	330c      	adds	r3, #12
 802ae28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802ae2a:	61ba      	str	r2, [r7, #24]
 802ae2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ae2e:	6979      	ldr	r1, [r7, #20]
 802ae30:	69ba      	ldr	r2, [r7, #24]
 802ae32:	e841 2300 	strex	r3, r2, [r1]
 802ae36:	613b      	str	r3, [r7, #16]
   return(result);
 802ae38:	693b      	ldr	r3, [r7, #16]
 802ae3a:	2b00      	cmp	r3, #0
 802ae3c:	d1e5      	bne.n	802ae0a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802ae3e:	687b      	ldr	r3, [r7, #4]
 802ae40:	2220      	movs	r2, #32
 802ae42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802ae46:	687b      	ldr	r3, [r7, #4]
 802ae48:	2200      	movs	r2, #0
 802ae4a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 802ae4c:	bf00      	nop
 802ae4e:	3754      	adds	r7, #84	@ 0x54
 802ae50:	46bd      	mov	sp, r7
 802ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae56:	4770      	bx	lr

0802ae58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802ae58:	b580      	push	{r7, lr}
 802ae5a:	b084      	sub	sp, #16
 802ae5c:	af00      	add	r7, sp, #0
 802ae5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802ae60:	687b      	ldr	r3, [r7, #4]
 802ae62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802ae64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802ae66:	68fb      	ldr	r3, [r7, #12]
 802ae68:	2200      	movs	r2, #0
 802ae6a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802ae6c:	68f8      	ldr	r0, [r7, #12]
 802ae6e:	f7ff ff21 	bl	802acb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802ae72:	bf00      	nop
 802ae74:	3710      	adds	r7, #16
 802ae76:	46bd      	mov	sp, r7
 802ae78:	bd80      	pop	{r7, pc}

0802ae7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802ae7a:	b480      	push	{r7}
 802ae7c:	b085      	sub	sp, #20
 802ae7e:	af00      	add	r7, sp, #0
 802ae80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802ae82:	687b      	ldr	r3, [r7, #4]
 802ae84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 802ae88:	b2db      	uxtb	r3, r3
 802ae8a:	2b21      	cmp	r3, #33	@ 0x21
 802ae8c:	d13e      	bne.n	802af0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802ae8e:	687b      	ldr	r3, [r7, #4]
 802ae90:	689b      	ldr	r3, [r3, #8]
 802ae92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802ae96:	d114      	bne.n	802aec2 <UART_Transmit_IT+0x48>
 802ae98:	687b      	ldr	r3, [r7, #4]
 802ae9a:	691b      	ldr	r3, [r3, #16]
 802ae9c:	2b00      	cmp	r3, #0
 802ae9e:	d110      	bne.n	802aec2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 802aea0:	687b      	ldr	r3, [r7, #4]
 802aea2:	6a1b      	ldr	r3, [r3, #32]
 802aea4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802aea6:	68fb      	ldr	r3, [r7, #12]
 802aea8:	881b      	ldrh	r3, [r3, #0]
 802aeaa:	461a      	mov	r2, r3
 802aeac:	687b      	ldr	r3, [r7, #4]
 802aeae:	681b      	ldr	r3, [r3, #0]
 802aeb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802aeb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 802aeb6:	687b      	ldr	r3, [r7, #4]
 802aeb8:	6a1b      	ldr	r3, [r3, #32]
 802aeba:	1c9a      	adds	r2, r3, #2
 802aebc:	687b      	ldr	r3, [r7, #4]
 802aebe:	621a      	str	r2, [r3, #32]
 802aec0:	e008      	b.n	802aed4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802aec2:	687b      	ldr	r3, [r7, #4]
 802aec4:	6a1b      	ldr	r3, [r3, #32]
 802aec6:	1c59      	adds	r1, r3, #1
 802aec8:	687a      	ldr	r2, [r7, #4]
 802aeca:	6211      	str	r1, [r2, #32]
 802aecc:	781a      	ldrb	r2, [r3, #0]
 802aece:	687b      	ldr	r3, [r7, #4]
 802aed0:	681b      	ldr	r3, [r3, #0]
 802aed2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802aed4:	687b      	ldr	r3, [r7, #4]
 802aed6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 802aed8:	b29b      	uxth	r3, r3
 802aeda:	3b01      	subs	r3, #1
 802aedc:	b29b      	uxth	r3, r3
 802aede:	687a      	ldr	r2, [r7, #4]
 802aee0:	4619      	mov	r1, r3
 802aee2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 802aee4:	2b00      	cmp	r3, #0
 802aee6:	d10f      	bne.n	802af08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802aee8:	687b      	ldr	r3, [r7, #4]
 802aeea:	681b      	ldr	r3, [r3, #0]
 802aeec:	68da      	ldr	r2, [r3, #12]
 802aeee:	687b      	ldr	r3, [r7, #4]
 802aef0:	681b      	ldr	r3, [r3, #0]
 802aef2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 802aef6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802aef8:	687b      	ldr	r3, [r7, #4]
 802aefa:	681b      	ldr	r3, [r3, #0]
 802aefc:	68da      	ldr	r2, [r3, #12]
 802aefe:	687b      	ldr	r3, [r7, #4]
 802af00:	681b      	ldr	r3, [r3, #0]
 802af02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 802af06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802af08:	2300      	movs	r3, #0
 802af0a:	e000      	b.n	802af0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 802af0c:	2302      	movs	r3, #2
  }
}
 802af0e:	4618      	mov	r0, r3
 802af10:	3714      	adds	r7, #20
 802af12:	46bd      	mov	sp, r7
 802af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af18:	4770      	bx	lr

0802af1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802af1a:	b580      	push	{r7, lr}
 802af1c:	b082      	sub	sp, #8
 802af1e:	af00      	add	r7, sp, #0
 802af20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802af22:	687b      	ldr	r3, [r7, #4]
 802af24:	681b      	ldr	r3, [r3, #0]
 802af26:	68da      	ldr	r2, [r3, #12]
 802af28:	687b      	ldr	r3, [r7, #4]
 802af2a:	681b      	ldr	r3, [r3, #0]
 802af2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 802af30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802af32:	687b      	ldr	r3, [r7, #4]
 802af34:	2220      	movs	r2, #32
 802af36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802af3a:	6878      	ldr	r0, [r7, #4]
 802af3c:	f7ff fea6 	bl	802ac8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802af40:	2300      	movs	r3, #0
}
 802af42:	4618      	mov	r0, r3
 802af44:	3708      	adds	r7, #8
 802af46:	46bd      	mov	sp, r7
 802af48:	bd80      	pop	{r7, pc}

0802af4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802af4a:	b580      	push	{r7, lr}
 802af4c:	b08c      	sub	sp, #48	@ 0x30
 802af4e:	af00      	add	r7, sp, #0
 802af50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 802af52:	2300      	movs	r3, #0
 802af54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 802af56:	2300      	movs	r3, #0
 802af58:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802af5a:	687b      	ldr	r3, [r7, #4]
 802af5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 802af60:	b2db      	uxtb	r3, r3
 802af62:	2b22      	cmp	r3, #34	@ 0x22
 802af64:	f040 80aa 	bne.w	802b0bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802af68:	687b      	ldr	r3, [r7, #4]
 802af6a:	689b      	ldr	r3, [r3, #8]
 802af6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802af70:	d115      	bne.n	802af9e <UART_Receive_IT+0x54>
 802af72:	687b      	ldr	r3, [r7, #4]
 802af74:	691b      	ldr	r3, [r3, #16]
 802af76:	2b00      	cmp	r3, #0
 802af78:	d111      	bne.n	802af9e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 802af7a:	687b      	ldr	r3, [r7, #4]
 802af7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802af7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802af80:	687b      	ldr	r3, [r7, #4]
 802af82:	681b      	ldr	r3, [r3, #0]
 802af84:	685b      	ldr	r3, [r3, #4]
 802af86:	b29b      	uxth	r3, r3
 802af88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802af8c:	b29a      	uxth	r2, r3
 802af8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802af90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 802af92:	687b      	ldr	r3, [r7, #4]
 802af94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802af96:	1c9a      	adds	r2, r3, #2
 802af98:	687b      	ldr	r3, [r7, #4]
 802af9a:	629a      	str	r2, [r3, #40]	@ 0x28
 802af9c:	e024      	b.n	802afe8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802af9e:	687b      	ldr	r3, [r7, #4]
 802afa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802afa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802afa4:	687b      	ldr	r3, [r7, #4]
 802afa6:	689b      	ldr	r3, [r3, #8]
 802afa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802afac:	d007      	beq.n	802afbe <UART_Receive_IT+0x74>
 802afae:	687b      	ldr	r3, [r7, #4]
 802afb0:	689b      	ldr	r3, [r3, #8]
 802afb2:	2b00      	cmp	r3, #0
 802afb4:	d10a      	bne.n	802afcc <UART_Receive_IT+0x82>
 802afb6:	687b      	ldr	r3, [r7, #4]
 802afb8:	691b      	ldr	r3, [r3, #16]
 802afba:	2b00      	cmp	r3, #0
 802afbc:	d106      	bne.n	802afcc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802afbe:	687b      	ldr	r3, [r7, #4]
 802afc0:	681b      	ldr	r3, [r3, #0]
 802afc2:	685b      	ldr	r3, [r3, #4]
 802afc4:	b2da      	uxtb	r2, r3
 802afc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802afc8:	701a      	strb	r2, [r3, #0]
 802afca:	e008      	b.n	802afde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802afcc:	687b      	ldr	r3, [r7, #4]
 802afce:	681b      	ldr	r3, [r3, #0]
 802afd0:	685b      	ldr	r3, [r3, #4]
 802afd2:	b2db      	uxtb	r3, r3
 802afd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802afd8:	b2da      	uxtb	r2, r3
 802afda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802afdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 802afde:	687b      	ldr	r3, [r7, #4]
 802afe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802afe2:	1c5a      	adds	r2, r3, #1
 802afe4:	687b      	ldr	r3, [r7, #4]
 802afe6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 802afe8:	687b      	ldr	r3, [r7, #4]
 802afea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802afec:	b29b      	uxth	r3, r3
 802afee:	3b01      	subs	r3, #1
 802aff0:	b29b      	uxth	r3, r3
 802aff2:	687a      	ldr	r2, [r7, #4]
 802aff4:	4619      	mov	r1, r3
 802aff6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 802aff8:	2b00      	cmp	r3, #0
 802affa:	d15d      	bne.n	802b0b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802affc:	687b      	ldr	r3, [r7, #4]
 802affe:	681b      	ldr	r3, [r3, #0]
 802b000:	68da      	ldr	r2, [r3, #12]
 802b002:	687b      	ldr	r3, [r7, #4]
 802b004:	681b      	ldr	r3, [r3, #0]
 802b006:	f022 0220 	bic.w	r2, r2, #32
 802b00a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802b00c:	687b      	ldr	r3, [r7, #4]
 802b00e:	681b      	ldr	r3, [r3, #0]
 802b010:	68da      	ldr	r2, [r3, #12]
 802b012:	687b      	ldr	r3, [r7, #4]
 802b014:	681b      	ldr	r3, [r3, #0]
 802b016:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 802b01a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 802b01c:	687b      	ldr	r3, [r7, #4]
 802b01e:	681b      	ldr	r3, [r3, #0]
 802b020:	695a      	ldr	r2, [r3, #20]
 802b022:	687b      	ldr	r3, [r7, #4]
 802b024:	681b      	ldr	r3, [r3, #0]
 802b026:	f022 0201 	bic.w	r2, r2, #1
 802b02a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802b02c:	687b      	ldr	r3, [r7, #4]
 802b02e:	2220      	movs	r2, #32
 802b030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 802b034:	687b      	ldr	r3, [r7, #4]
 802b036:	2200      	movs	r2, #0
 802b038:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802b03a:	687b      	ldr	r3, [r7, #4]
 802b03c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b03e:	2b01      	cmp	r3, #1
 802b040:	d135      	bne.n	802b0ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802b042:	687b      	ldr	r3, [r7, #4]
 802b044:	2200      	movs	r2, #0
 802b046:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802b048:	687b      	ldr	r3, [r7, #4]
 802b04a:	681b      	ldr	r3, [r3, #0]
 802b04c:	330c      	adds	r3, #12
 802b04e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b050:	697b      	ldr	r3, [r7, #20]
 802b052:	e853 3f00 	ldrex	r3, [r3]
 802b056:	613b      	str	r3, [r7, #16]
   return(result);
 802b058:	693b      	ldr	r3, [r7, #16]
 802b05a:	f023 0310 	bic.w	r3, r3, #16
 802b05e:	627b      	str	r3, [r7, #36]	@ 0x24
 802b060:	687b      	ldr	r3, [r7, #4]
 802b062:	681b      	ldr	r3, [r3, #0]
 802b064:	330c      	adds	r3, #12
 802b066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802b068:	623a      	str	r2, [r7, #32]
 802b06a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b06c:	69f9      	ldr	r1, [r7, #28]
 802b06e:	6a3a      	ldr	r2, [r7, #32]
 802b070:	e841 2300 	strex	r3, r2, [r1]
 802b074:	61bb      	str	r3, [r7, #24]
   return(result);
 802b076:	69bb      	ldr	r3, [r7, #24]
 802b078:	2b00      	cmp	r3, #0
 802b07a:	d1e5      	bne.n	802b048 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 802b07c:	687b      	ldr	r3, [r7, #4]
 802b07e:	681b      	ldr	r3, [r3, #0]
 802b080:	681b      	ldr	r3, [r3, #0]
 802b082:	f003 0310 	and.w	r3, r3, #16
 802b086:	2b10      	cmp	r3, #16
 802b088:	d10a      	bne.n	802b0a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 802b08a:	2300      	movs	r3, #0
 802b08c:	60fb      	str	r3, [r7, #12]
 802b08e:	687b      	ldr	r3, [r7, #4]
 802b090:	681b      	ldr	r3, [r3, #0]
 802b092:	681b      	ldr	r3, [r3, #0]
 802b094:	60fb      	str	r3, [r7, #12]
 802b096:	687b      	ldr	r3, [r7, #4]
 802b098:	681b      	ldr	r3, [r3, #0]
 802b09a:	685b      	ldr	r3, [r3, #4]
 802b09c:	60fb      	str	r3, [r7, #12]
 802b09e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802b0a0:	687b      	ldr	r3, [r7, #4]
 802b0a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802b0a4:	4619      	mov	r1, r3
 802b0a6:	6878      	ldr	r0, [r7, #4]
 802b0a8:	f7ff fe0e 	bl	802acc8 <HAL_UARTEx_RxEventCallback>
 802b0ac:	e002      	b.n	802b0b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 802b0ae:	6878      	ldr	r0, [r7, #4]
 802b0b0:	f7ff fdf6 	bl	802aca0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 802b0b4:	2300      	movs	r3, #0
 802b0b6:	e002      	b.n	802b0be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 802b0b8:	2300      	movs	r3, #0
 802b0ba:	e000      	b.n	802b0be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 802b0bc:	2302      	movs	r3, #2
  }
}
 802b0be:	4618      	mov	r0, r3
 802b0c0:	3730      	adds	r7, #48	@ 0x30
 802b0c2:	46bd      	mov	sp, r7
 802b0c4:	bd80      	pop	{r7, pc}
	...

0802b0c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802b0c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802b0cc:	b0c0      	sub	sp, #256	@ 0x100
 802b0ce:	af00      	add	r7, sp, #0
 802b0d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802b0d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b0d8:	681b      	ldr	r3, [r3, #0]
 802b0da:	691b      	ldr	r3, [r3, #16]
 802b0dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 802b0e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b0e4:	68d9      	ldr	r1, [r3, #12]
 802b0e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b0ea:	681a      	ldr	r2, [r3, #0]
 802b0ec:	ea40 0301 	orr.w	r3, r0, r1
 802b0f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802b0f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b0f6:	689a      	ldr	r2, [r3, #8]
 802b0f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b0fc:	691b      	ldr	r3, [r3, #16]
 802b0fe:	431a      	orrs	r2, r3
 802b100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b104:	695b      	ldr	r3, [r3, #20]
 802b106:	431a      	orrs	r2, r3
 802b108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b10c:	69db      	ldr	r3, [r3, #28]
 802b10e:	4313      	orrs	r3, r2
 802b110:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 802b114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b118:	681b      	ldr	r3, [r3, #0]
 802b11a:	68db      	ldr	r3, [r3, #12]
 802b11c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 802b120:	f021 010c 	bic.w	r1, r1, #12
 802b124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b128:	681a      	ldr	r2, [r3, #0]
 802b12a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 802b12e:	430b      	orrs	r3, r1
 802b130:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802b132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b136:	681b      	ldr	r3, [r3, #0]
 802b138:	695b      	ldr	r3, [r3, #20]
 802b13a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 802b13e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b142:	6999      	ldr	r1, [r3, #24]
 802b144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b148:	681a      	ldr	r2, [r3, #0]
 802b14a:	ea40 0301 	orr.w	r3, r0, r1
 802b14e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802b150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b154:	681a      	ldr	r2, [r3, #0]
 802b156:	4b8f      	ldr	r3, [pc, #572]	@ (802b394 <UART_SetConfig+0x2cc>)
 802b158:	429a      	cmp	r2, r3
 802b15a:	d005      	beq.n	802b168 <UART_SetConfig+0xa0>
 802b15c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b160:	681a      	ldr	r2, [r3, #0]
 802b162:	4b8d      	ldr	r3, [pc, #564]	@ (802b398 <UART_SetConfig+0x2d0>)
 802b164:	429a      	cmp	r2, r3
 802b166:	d104      	bne.n	802b172 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802b168:	f7ff f90c 	bl	802a384 <HAL_RCC_GetPCLK2Freq>
 802b16c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 802b170:	e003      	b.n	802b17a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802b172:	f7ff f8f3 	bl	802a35c <HAL_RCC_GetPCLK1Freq>
 802b176:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802b17a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b17e:	69db      	ldr	r3, [r3, #28]
 802b180:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802b184:	f040 810c 	bne.w	802b3a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802b188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802b18c:	2200      	movs	r2, #0
 802b18e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 802b192:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 802b196:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 802b19a:	4622      	mov	r2, r4
 802b19c:	462b      	mov	r3, r5
 802b19e:	1891      	adds	r1, r2, r2
 802b1a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 802b1a2:	415b      	adcs	r3, r3
 802b1a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 802b1a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 802b1aa:	4621      	mov	r1, r4
 802b1ac:	eb12 0801 	adds.w	r8, r2, r1
 802b1b0:	4629      	mov	r1, r5
 802b1b2:	eb43 0901 	adc.w	r9, r3, r1
 802b1b6:	f04f 0200 	mov.w	r2, #0
 802b1ba:	f04f 0300 	mov.w	r3, #0
 802b1be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802b1c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802b1c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802b1ca:	4690      	mov	r8, r2
 802b1cc:	4699      	mov	r9, r3
 802b1ce:	4623      	mov	r3, r4
 802b1d0:	eb18 0303 	adds.w	r3, r8, r3
 802b1d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 802b1d8:	462b      	mov	r3, r5
 802b1da:	eb49 0303 	adc.w	r3, r9, r3
 802b1de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 802b1e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b1e6:	685b      	ldr	r3, [r3, #4]
 802b1e8:	2200      	movs	r2, #0
 802b1ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 802b1ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 802b1f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 802b1f6:	460b      	mov	r3, r1
 802b1f8:	18db      	adds	r3, r3, r3
 802b1fa:	653b      	str	r3, [r7, #80]	@ 0x50
 802b1fc:	4613      	mov	r3, r2
 802b1fe:	eb42 0303 	adc.w	r3, r2, r3
 802b202:	657b      	str	r3, [r7, #84]	@ 0x54
 802b204:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 802b208:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 802b20c:	f7f5 fa38 	bl	8020680 <__aeabi_uldivmod>
 802b210:	4602      	mov	r2, r0
 802b212:	460b      	mov	r3, r1
 802b214:	4b61      	ldr	r3, [pc, #388]	@ (802b39c <UART_SetConfig+0x2d4>)
 802b216:	fba3 2302 	umull	r2, r3, r3, r2
 802b21a:	095b      	lsrs	r3, r3, #5
 802b21c:	011c      	lsls	r4, r3, #4
 802b21e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802b222:	2200      	movs	r2, #0
 802b224:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 802b228:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 802b22c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 802b230:	4642      	mov	r2, r8
 802b232:	464b      	mov	r3, r9
 802b234:	1891      	adds	r1, r2, r2
 802b236:	64b9      	str	r1, [r7, #72]	@ 0x48
 802b238:	415b      	adcs	r3, r3
 802b23a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802b23c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 802b240:	4641      	mov	r1, r8
 802b242:	eb12 0a01 	adds.w	sl, r2, r1
 802b246:	4649      	mov	r1, r9
 802b248:	eb43 0b01 	adc.w	fp, r3, r1
 802b24c:	f04f 0200 	mov.w	r2, #0
 802b250:	f04f 0300 	mov.w	r3, #0
 802b254:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802b258:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 802b25c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802b260:	4692      	mov	sl, r2
 802b262:	469b      	mov	fp, r3
 802b264:	4643      	mov	r3, r8
 802b266:	eb1a 0303 	adds.w	r3, sl, r3
 802b26a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 802b26e:	464b      	mov	r3, r9
 802b270:	eb4b 0303 	adc.w	r3, fp, r3
 802b274:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 802b278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b27c:	685b      	ldr	r3, [r3, #4]
 802b27e:	2200      	movs	r2, #0
 802b280:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 802b284:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 802b288:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 802b28c:	460b      	mov	r3, r1
 802b28e:	18db      	adds	r3, r3, r3
 802b290:	643b      	str	r3, [r7, #64]	@ 0x40
 802b292:	4613      	mov	r3, r2
 802b294:	eb42 0303 	adc.w	r3, r2, r3
 802b298:	647b      	str	r3, [r7, #68]	@ 0x44
 802b29a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 802b29e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 802b2a2:	f7f5 f9ed 	bl	8020680 <__aeabi_uldivmod>
 802b2a6:	4602      	mov	r2, r0
 802b2a8:	460b      	mov	r3, r1
 802b2aa:	4611      	mov	r1, r2
 802b2ac:	4b3b      	ldr	r3, [pc, #236]	@ (802b39c <UART_SetConfig+0x2d4>)
 802b2ae:	fba3 2301 	umull	r2, r3, r3, r1
 802b2b2:	095b      	lsrs	r3, r3, #5
 802b2b4:	2264      	movs	r2, #100	@ 0x64
 802b2b6:	fb02 f303 	mul.w	r3, r2, r3
 802b2ba:	1acb      	subs	r3, r1, r3
 802b2bc:	00db      	lsls	r3, r3, #3
 802b2be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 802b2c2:	4b36      	ldr	r3, [pc, #216]	@ (802b39c <UART_SetConfig+0x2d4>)
 802b2c4:	fba3 2302 	umull	r2, r3, r3, r2
 802b2c8:	095b      	lsrs	r3, r3, #5
 802b2ca:	005b      	lsls	r3, r3, #1
 802b2cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 802b2d0:	441c      	add	r4, r3
 802b2d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802b2d6:	2200      	movs	r2, #0
 802b2d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 802b2dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 802b2e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 802b2e4:	4642      	mov	r2, r8
 802b2e6:	464b      	mov	r3, r9
 802b2e8:	1891      	adds	r1, r2, r2
 802b2ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 802b2ec:	415b      	adcs	r3, r3
 802b2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802b2f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 802b2f4:	4641      	mov	r1, r8
 802b2f6:	1851      	adds	r1, r2, r1
 802b2f8:	6339      	str	r1, [r7, #48]	@ 0x30
 802b2fa:	4649      	mov	r1, r9
 802b2fc:	414b      	adcs	r3, r1
 802b2fe:	637b      	str	r3, [r7, #52]	@ 0x34
 802b300:	f04f 0200 	mov.w	r2, #0
 802b304:	f04f 0300 	mov.w	r3, #0
 802b308:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 802b30c:	4659      	mov	r1, fp
 802b30e:	00cb      	lsls	r3, r1, #3
 802b310:	4651      	mov	r1, sl
 802b312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802b316:	4651      	mov	r1, sl
 802b318:	00ca      	lsls	r2, r1, #3
 802b31a:	4610      	mov	r0, r2
 802b31c:	4619      	mov	r1, r3
 802b31e:	4603      	mov	r3, r0
 802b320:	4642      	mov	r2, r8
 802b322:	189b      	adds	r3, r3, r2
 802b324:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 802b328:	464b      	mov	r3, r9
 802b32a:	460a      	mov	r2, r1
 802b32c:	eb42 0303 	adc.w	r3, r2, r3
 802b330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 802b334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b338:	685b      	ldr	r3, [r3, #4]
 802b33a:	2200      	movs	r2, #0
 802b33c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 802b340:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 802b344:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 802b348:	460b      	mov	r3, r1
 802b34a:	18db      	adds	r3, r3, r3
 802b34c:	62bb      	str	r3, [r7, #40]	@ 0x28
 802b34e:	4613      	mov	r3, r2
 802b350:	eb42 0303 	adc.w	r3, r2, r3
 802b354:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802b356:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 802b35a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 802b35e:	f7f5 f98f 	bl	8020680 <__aeabi_uldivmod>
 802b362:	4602      	mov	r2, r0
 802b364:	460b      	mov	r3, r1
 802b366:	4b0d      	ldr	r3, [pc, #52]	@ (802b39c <UART_SetConfig+0x2d4>)
 802b368:	fba3 1302 	umull	r1, r3, r3, r2
 802b36c:	095b      	lsrs	r3, r3, #5
 802b36e:	2164      	movs	r1, #100	@ 0x64
 802b370:	fb01 f303 	mul.w	r3, r1, r3
 802b374:	1ad3      	subs	r3, r2, r3
 802b376:	00db      	lsls	r3, r3, #3
 802b378:	3332      	adds	r3, #50	@ 0x32
 802b37a:	4a08      	ldr	r2, [pc, #32]	@ (802b39c <UART_SetConfig+0x2d4>)
 802b37c:	fba2 2303 	umull	r2, r3, r2, r3
 802b380:	095b      	lsrs	r3, r3, #5
 802b382:	f003 0207 	and.w	r2, r3, #7
 802b386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b38a:	681b      	ldr	r3, [r3, #0]
 802b38c:	4422      	add	r2, r4
 802b38e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 802b390:	e106      	b.n	802b5a0 <UART_SetConfig+0x4d8>
 802b392:	bf00      	nop
 802b394:	40011000 	.word	0x40011000
 802b398:	40011400 	.word	0x40011400
 802b39c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802b3a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802b3a4:	2200      	movs	r2, #0
 802b3a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 802b3aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 802b3ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 802b3b2:	4642      	mov	r2, r8
 802b3b4:	464b      	mov	r3, r9
 802b3b6:	1891      	adds	r1, r2, r2
 802b3b8:	6239      	str	r1, [r7, #32]
 802b3ba:	415b      	adcs	r3, r3
 802b3bc:	627b      	str	r3, [r7, #36]	@ 0x24
 802b3be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802b3c2:	4641      	mov	r1, r8
 802b3c4:	1854      	adds	r4, r2, r1
 802b3c6:	4649      	mov	r1, r9
 802b3c8:	eb43 0501 	adc.w	r5, r3, r1
 802b3cc:	f04f 0200 	mov.w	r2, #0
 802b3d0:	f04f 0300 	mov.w	r3, #0
 802b3d4:	00eb      	lsls	r3, r5, #3
 802b3d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802b3da:	00e2      	lsls	r2, r4, #3
 802b3dc:	4614      	mov	r4, r2
 802b3de:	461d      	mov	r5, r3
 802b3e0:	4643      	mov	r3, r8
 802b3e2:	18e3      	adds	r3, r4, r3
 802b3e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 802b3e8:	464b      	mov	r3, r9
 802b3ea:	eb45 0303 	adc.w	r3, r5, r3
 802b3ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 802b3f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b3f6:	685b      	ldr	r3, [r3, #4]
 802b3f8:	2200      	movs	r2, #0
 802b3fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 802b3fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 802b402:	f04f 0200 	mov.w	r2, #0
 802b406:	f04f 0300 	mov.w	r3, #0
 802b40a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 802b40e:	4629      	mov	r1, r5
 802b410:	008b      	lsls	r3, r1, #2
 802b412:	4621      	mov	r1, r4
 802b414:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802b418:	4621      	mov	r1, r4
 802b41a:	008a      	lsls	r2, r1, #2
 802b41c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 802b420:	f7f5 f92e 	bl	8020680 <__aeabi_uldivmod>
 802b424:	4602      	mov	r2, r0
 802b426:	460b      	mov	r3, r1
 802b428:	4b60      	ldr	r3, [pc, #384]	@ (802b5ac <UART_SetConfig+0x4e4>)
 802b42a:	fba3 2302 	umull	r2, r3, r3, r2
 802b42e:	095b      	lsrs	r3, r3, #5
 802b430:	011c      	lsls	r4, r3, #4
 802b432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802b436:	2200      	movs	r2, #0
 802b438:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 802b43c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 802b440:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 802b444:	4642      	mov	r2, r8
 802b446:	464b      	mov	r3, r9
 802b448:	1891      	adds	r1, r2, r2
 802b44a:	61b9      	str	r1, [r7, #24]
 802b44c:	415b      	adcs	r3, r3
 802b44e:	61fb      	str	r3, [r7, #28]
 802b450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802b454:	4641      	mov	r1, r8
 802b456:	1851      	adds	r1, r2, r1
 802b458:	6139      	str	r1, [r7, #16]
 802b45a:	4649      	mov	r1, r9
 802b45c:	414b      	adcs	r3, r1
 802b45e:	617b      	str	r3, [r7, #20]
 802b460:	f04f 0200 	mov.w	r2, #0
 802b464:	f04f 0300 	mov.w	r3, #0
 802b468:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802b46c:	4659      	mov	r1, fp
 802b46e:	00cb      	lsls	r3, r1, #3
 802b470:	4651      	mov	r1, sl
 802b472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802b476:	4651      	mov	r1, sl
 802b478:	00ca      	lsls	r2, r1, #3
 802b47a:	4610      	mov	r0, r2
 802b47c:	4619      	mov	r1, r3
 802b47e:	4603      	mov	r3, r0
 802b480:	4642      	mov	r2, r8
 802b482:	189b      	adds	r3, r3, r2
 802b484:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 802b488:	464b      	mov	r3, r9
 802b48a:	460a      	mov	r2, r1
 802b48c:	eb42 0303 	adc.w	r3, r2, r3
 802b490:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 802b494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b498:	685b      	ldr	r3, [r3, #4]
 802b49a:	2200      	movs	r2, #0
 802b49c:	67bb      	str	r3, [r7, #120]	@ 0x78
 802b49e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 802b4a0:	f04f 0200 	mov.w	r2, #0
 802b4a4:	f04f 0300 	mov.w	r3, #0
 802b4a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 802b4ac:	4649      	mov	r1, r9
 802b4ae:	008b      	lsls	r3, r1, #2
 802b4b0:	4641      	mov	r1, r8
 802b4b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802b4b6:	4641      	mov	r1, r8
 802b4b8:	008a      	lsls	r2, r1, #2
 802b4ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 802b4be:	f7f5 f8df 	bl	8020680 <__aeabi_uldivmod>
 802b4c2:	4602      	mov	r2, r0
 802b4c4:	460b      	mov	r3, r1
 802b4c6:	4611      	mov	r1, r2
 802b4c8:	4b38      	ldr	r3, [pc, #224]	@ (802b5ac <UART_SetConfig+0x4e4>)
 802b4ca:	fba3 2301 	umull	r2, r3, r3, r1
 802b4ce:	095b      	lsrs	r3, r3, #5
 802b4d0:	2264      	movs	r2, #100	@ 0x64
 802b4d2:	fb02 f303 	mul.w	r3, r2, r3
 802b4d6:	1acb      	subs	r3, r1, r3
 802b4d8:	011b      	lsls	r3, r3, #4
 802b4da:	3332      	adds	r3, #50	@ 0x32
 802b4dc:	4a33      	ldr	r2, [pc, #204]	@ (802b5ac <UART_SetConfig+0x4e4>)
 802b4de:	fba2 2303 	umull	r2, r3, r2, r3
 802b4e2:	095b      	lsrs	r3, r3, #5
 802b4e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 802b4e8:	441c      	add	r4, r3
 802b4ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802b4ee:	2200      	movs	r2, #0
 802b4f0:	673b      	str	r3, [r7, #112]	@ 0x70
 802b4f2:	677a      	str	r2, [r7, #116]	@ 0x74
 802b4f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 802b4f8:	4642      	mov	r2, r8
 802b4fa:	464b      	mov	r3, r9
 802b4fc:	1891      	adds	r1, r2, r2
 802b4fe:	60b9      	str	r1, [r7, #8]
 802b500:	415b      	adcs	r3, r3
 802b502:	60fb      	str	r3, [r7, #12]
 802b504:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802b508:	4641      	mov	r1, r8
 802b50a:	1851      	adds	r1, r2, r1
 802b50c:	6039      	str	r1, [r7, #0]
 802b50e:	4649      	mov	r1, r9
 802b510:	414b      	adcs	r3, r1
 802b512:	607b      	str	r3, [r7, #4]
 802b514:	f04f 0200 	mov.w	r2, #0
 802b518:	f04f 0300 	mov.w	r3, #0
 802b51c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802b520:	4659      	mov	r1, fp
 802b522:	00cb      	lsls	r3, r1, #3
 802b524:	4651      	mov	r1, sl
 802b526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802b52a:	4651      	mov	r1, sl
 802b52c:	00ca      	lsls	r2, r1, #3
 802b52e:	4610      	mov	r0, r2
 802b530:	4619      	mov	r1, r3
 802b532:	4603      	mov	r3, r0
 802b534:	4642      	mov	r2, r8
 802b536:	189b      	adds	r3, r3, r2
 802b538:	66bb      	str	r3, [r7, #104]	@ 0x68
 802b53a:	464b      	mov	r3, r9
 802b53c:	460a      	mov	r2, r1
 802b53e:	eb42 0303 	adc.w	r3, r2, r3
 802b542:	66fb      	str	r3, [r7, #108]	@ 0x6c
 802b544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b548:	685b      	ldr	r3, [r3, #4]
 802b54a:	2200      	movs	r2, #0
 802b54c:	663b      	str	r3, [r7, #96]	@ 0x60
 802b54e:	667a      	str	r2, [r7, #100]	@ 0x64
 802b550:	f04f 0200 	mov.w	r2, #0
 802b554:	f04f 0300 	mov.w	r3, #0
 802b558:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 802b55c:	4649      	mov	r1, r9
 802b55e:	008b      	lsls	r3, r1, #2
 802b560:	4641      	mov	r1, r8
 802b562:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802b566:	4641      	mov	r1, r8
 802b568:	008a      	lsls	r2, r1, #2
 802b56a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 802b56e:	f7f5 f887 	bl	8020680 <__aeabi_uldivmod>
 802b572:	4602      	mov	r2, r0
 802b574:	460b      	mov	r3, r1
 802b576:	4b0d      	ldr	r3, [pc, #52]	@ (802b5ac <UART_SetConfig+0x4e4>)
 802b578:	fba3 1302 	umull	r1, r3, r3, r2
 802b57c:	095b      	lsrs	r3, r3, #5
 802b57e:	2164      	movs	r1, #100	@ 0x64
 802b580:	fb01 f303 	mul.w	r3, r1, r3
 802b584:	1ad3      	subs	r3, r2, r3
 802b586:	011b      	lsls	r3, r3, #4
 802b588:	3332      	adds	r3, #50	@ 0x32
 802b58a:	4a08      	ldr	r2, [pc, #32]	@ (802b5ac <UART_SetConfig+0x4e4>)
 802b58c:	fba2 2303 	umull	r2, r3, r2, r3
 802b590:	095b      	lsrs	r3, r3, #5
 802b592:	f003 020f 	and.w	r2, r3, #15
 802b596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802b59a:	681b      	ldr	r3, [r3, #0]
 802b59c:	4422      	add	r2, r4
 802b59e:	609a      	str	r2, [r3, #8]
}
 802b5a0:	bf00      	nop
 802b5a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 802b5a6:	46bd      	mov	sp, r7
 802b5a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802b5ac:	51eb851f 	.word	0x51eb851f

0802b5b0 <malloc>:
 802b5b0:	4b02      	ldr	r3, [pc, #8]	@ (802b5bc <malloc+0xc>)
 802b5b2:	4601      	mov	r1, r0
 802b5b4:	6818      	ldr	r0, [r3, #0]
 802b5b6:	f000 b82d 	b.w	802b614 <_malloc_r>
 802b5ba:	bf00      	nop
 802b5bc:	2000003c 	.word	0x2000003c

0802b5c0 <free>:
 802b5c0:	4b02      	ldr	r3, [pc, #8]	@ (802b5cc <free+0xc>)
 802b5c2:	4601      	mov	r1, r0
 802b5c4:	6818      	ldr	r0, [r3, #0]
 802b5c6:	f000 bc03 	b.w	802bdd0 <_free_r>
 802b5ca:	bf00      	nop
 802b5cc:	2000003c 	.word	0x2000003c

0802b5d0 <sbrk_aligned>:
 802b5d0:	b570      	push	{r4, r5, r6, lr}
 802b5d2:	4e0f      	ldr	r6, [pc, #60]	@ (802b610 <sbrk_aligned+0x40>)
 802b5d4:	460c      	mov	r4, r1
 802b5d6:	6831      	ldr	r1, [r6, #0]
 802b5d8:	4605      	mov	r5, r0
 802b5da:	b911      	cbnz	r1, 802b5e2 <sbrk_aligned+0x12>
 802b5dc:	f000 fb9a 	bl	802bd14 <_sbrk_r>
 802b5e0:	6030      	str	r0, [r6, #0]
 802b5e2:	4621      	mov	r1, r4
 802b5e4:	4628      	mov	r0, r5
 802b5e6:	f000 fb95 	bl	802bd14 <_sbrk_r>
 802b5ea:	1c43      	adds	r3, r0, #1
 802b5ec:	d103      	bne.n	802b5f6 <sbrk_aligned+0x26>
 802b5ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802b5f2:	4620      	mov	r0, r4
 802b5f4:	bd70      	pop	{r4, r5, r6, pc}
 802b5f6:	1cc4      	adds	r4, r0, #3
 802b5f8:	f024 0403 	bic.w	r4, r4, #3
 802b5fc:	42a0      	cmp	r0, r4
 802b5fe:	d0f8      	beq.n	802b5f2 <sbrk_aligned+0x22>
 802b600:	1a21      	subs	r1, r4, r0
 802b602:	4628      	mov	r0, r5
 802b604:	f000 fb86 	bl	802bd14 <_sbrk_r>
 802b608:	3001      	adds	r0, #1
 802b60a:	d1f2      	bne.n	802b5f2 <sbrk_aligned+0x22>
 802b60c:	e7ef      	b.n	802b5ee <sbrk_aligned+0x1e>
 802b60e:	bf00      	nop
 802b610:	200013b0 	.word	0x200013b0

0802b614 <_malloc_r>:
 802b614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b618:	1ccd      	adds	r5, r1, #3
 802b61a:	f025 0503 	bic.w	r5, r5, #3
 802b61e:	3508      	adds	r5, #8
 802b620:	2d0c      	cmp	r5, #12
 802b622:	bf38      	it	cc
 802b624:	250c      	movcc	r5, #12
 802b626:	2d00      	cmp	r5, #0
 802b628:	4606      	mov	r6, r0
 802b62a:	db01      	blt.n	802b630 <_malloc_r+0x1c>
 802b62c:	42a9      	cmp	r1, r5
 802b62e:	d904      	bls.n	802b63a <_malloc_r+0x26>
 802b630:	230c      	movs	r3, #12
 802b632:	6033      	str	r3, [r6, #0]
 802b634:	2000      	movs	r0, #0
 802b636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b63a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802b710 <_malloc_r+0xfc>
 802b63e:	f000 f869 	bl	802b714 <__malloc_lock>
 802b642:	f8d8 3000 	ldr.w	r3, [r8]
 802b646:	461c      	mov	r4, r3
 802b648:	bb44      	cbnz	r4, 802b69c <_malloc_r+0x88>
 802b64a:	4629      	mov	r1, r5
 802b64c:	4630      	mov	r0, r6
 802b64e:	f7ff ffbf 	bl	802b5d0 <sbrk_aligned>
 802b652:	1c43      	adds	r3, r0, #1
 802b654:	4604      	mov	r4, r0
 802b656:	d158      	bne.n	802b70a <_malloc_r+0xf6>
 802b658:	f8d8 4000 	ldr.w	r4, [r8]
 802b65c:	4627      	mov	r7, r4
 802b65e:	2f00      	cmp	r7, #0
 802b660:	d143      	bne.n	802b6ea <_malloc_r+0xd6>
 802b662:	2c00      	cmp	r4, #0
 802b664:	d04b      	beq.n	802b6fe <_malloc_r+0xea>
 802b666:	6823      	ldr	r3, [r4, #0]
 802b668:	4639      	mov	r1, r7
 802b66a:	4630      	mov	r0, r6
 802b66c:	eb04 0903 	add.w	r9, r4, r3
 802b670:	f000 fb50 	bl	802bd14 <_sbrk_r>
 802b674:	4581      	cmp	r9, r0
 802b676:	d142      	bne.n	802b6fe <_malloc_r+0xea>
 802b678:	6821      	ldr	r1, [r4, #0]
 802b67a:	1a6d      	subs	r5, r5, r1
 802b67c:	4629      	mov	r1, r5
 802b67e:	4630      	mov	r0, r6
 802b680:	f7ff ffa6 	bl	802b5d0 <sbrk_aligned>
 802b684:	3001      	adds	r0, #1
 802b686:	d03a      	beq.n	802b6fe <_malloc_r+0xea>
 802b688:	6823      	ldr	r3, [r4, #0]
 802b68a:	442b      	add	r3, r5
 802b68c:	6023      	str	r3, [r4, #0]
 802b68e:	f8d8 3000 	ldr.w	r3, [r8]
 802b692:	685a      	ldr	r2, [r3, #4]
 802b694:	bb62      	cbnz	r2, 802b6f0 <_malloc_r+0xdc>
 802b696:	f8c8 7000 	str.w	r7, [r8]
 802b69a:	e00f      	b.n	802b6bc <_malloc_r+0xa8>
 802b69c:	6822      	ldr	r2, [r4, #0]
 802b69e:	1b52      	subs	r2, r2, r5
 802b6a0:	d420      	bmi.n	802b6e4 <_malloc_r+0xd0>
 802b6a2:	2a0b      	cmp	r2, #11
 802b6a4:	d917      	bls.n	802b6d6 <_malloc_r+0xc2>
 802b6a6:	1961      	adds	r1, r4, r5
 802b6a8:	42a3      	cmp	r3, r4
 802b6aa:	6025      	str	r5, [r4, #0]
 802b6ac:	bf18      	it	ne
 802b6ae:	6059      	strne	r1, [r3, #4]
 802b6b0:	6863      	ldr	r3, [r4, #4]
 802b6b2:	bf08      	it	eq
 802b6b4:	f8c8 1000 	streq.w	r1, [r8]
 802b6b8:	5162      	str	r2, [r4, r5]
 802b6ba:	604b      	str	r3, [r1, #4]
 802b6bc:	4630      	mov	r0, r6
 802b6be:	f000 f82f 	bl	802b720 <__malloc_unlock>
 802b6c2:	f104 000b 	add.w	r0, r4, #11
 802b6c6:	1d23      	adds	r3, r4, #4
 802b6c8:	f020 0007 	bic.w	r0, r0, #7
 802b6cc:	1ac2      	subs	r2, r0, r3
 802b6ce:	bf1c      	itt	ne
 802b6d0:	1a1b      	subne	r3, r3, r0
 802b6d2:	50a3      	strne	r3, [r4, r2]
 802b6d4:	e7af      	b.n	802b636 <_malloc_r+0x22>
 802b6d6:	6862      	ldr	r2, [r4, #4]
 802b6d8:	42a3      	cmp	r3, r4
 802b6da:	bf0c      	ite	eq
 802b6dc:	f8c8 2000 	streq.w	r2, [r8]
 802b6e0:	605a      	strne	r2, [r3, #4]
 802b6e2:	e7eb      	b.n	802b6bc <_malloc_r+0xa8>
 802b6e4:	4623      	mov	r3, r4
 802b6e6:	6864      	ldr	r4, [r4, #4]
 802b6e8:	e7ae      	b.n	802b648 <_malloc_r+0x34>
 802b6ea:	463c      	mov	r4, r7
 802b6ec:	687f      	ldr	r7, [r7, #4]
 802b6ee:	e7b6      	b.n	802b65e <_malloc_r+0x4a>
 802b6f0:	461a      	mov	r2, r3
 802b6f2:	685b      	ldr	r3, [r3, #4]
 802b6f4:	42a3      	cmp	r3, r4
 802b6f6:	d1fb      	bne.n	802b6f0 <_malloc_r+0xdc>
 802b6f8:	2300      	movs	r3, #0
 802b6fa:	6053      	str	r3, [r2, #4]
 802b6fc:	e7de      	b.n	802b6bc <_malloc_r+0xa8>
 802b6fe:	230c      	movs	r3, #12
 802b700:	6033      	str	r3, [r6, #0]
 802b702:	4630      	mov	r0, r6
 802b704:	f000 f80c 	bl	802b720 <__malloc_unlock>
 802b708:	e794      	b.n	802b634 <_malloc_r+0x20>
 802b70a:	6005      	str	r5, [r0, #0]
 802b70c:	e7d6      	b.n	802b6bc <_malloc_r+0xa8>
 802b70e:	bf00      	nop
 802b710:	200013b4 	.word	0x200013b4

0802b714 <__malloc_lock>:
 802b714:	4801      	ldr	r0, [pc, #4]	@ (802b71c <__malloc_lock+0x8>)
 802b716:	f000 bb4a 	b.w	802bdae <__retarget_lock_acquire_recursive>
 802b71a:	bf00      	nop
 802b71c:	200014f8 	.word	0x200014f8

0802b720 <__malloc_unlock>:
 802b720:	4801      	ldr	r0, [pc, #4]	@ (802b728 <__malloc_unlock+0x8>)
 802b722:	f000 bb45 	b.w	802bdb0 <__retarget_lock_release_recursive>
 802b726:	bf00      	nop
 802b728:	200014f8 	.word	0x200014f8

0802b72c <std>:
 802b72c:	2300      	movs	r3, #0
 802b72e:	b510      	push	{r4, lr}
 802b730:	4604      	mov	r4, r0
 802b732:	e9c0 3300 	strd	r3, r3, [r0]
 802b736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b73a:	6083      	str	r3, [r0, #8]
 802b73c:	8181      	strh	r1, [r0, #12]
 802b73e:	6643      	str	r3, [r0, #100]	@ 0x64
 802b740:	81c2      	strh	r2, [r0, #14]
 802b742:	6183      	str	r3, [r0, #24]
 802b744:	4619      	mov	r1, r3
 802b746:	2208      	movs	r2, #8
 802b748:	305c      	adds	r0, #92	@ 0x5c
 802b74a:	f000 fa75 	bl	802bc38 <memset>
 802b74e:	4b0d      	ldr	r3, [pc, #52]	@ (802b784 <std+0x58>)
 802b750:	6263      	str	r3, [r4, #36]	@ 0x24
 802b752:	4b0d      	ldr	r3, [pc, #52]	@ (802b788 <std+0x5c>)
 802b754:	62a3      	str	r3, [r4, #40]	@ 0x28
 802b756:	4b0d      	ldr	r3, [pc, #52]	@ (802b78c <std+0x60>)
 802b758:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802b75a:	4b0d      	ldr	r3, [pc, #52]	@ (802b790 <std+0x64>)
 802b75c:	6323      	str	r3, [r4, #48]	@ 0x30
 802b75e:	4b0d      	ldr	r3, [pc, #52]	@ (802b794 <std+0x68>)
 802b760:	6224      	str	r4, [r4, #32]
 802b762:	429c      	cmp	r4, r3
 802b764:	d006      	beq.n	802b774 <std+0x48>
 802b766:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802b76a:	4294      	cmp	r4, r2
 802b76c:	d002      	beq.n	802b774 <std+0x48>
 802b76e:	33d0      	adds	r3, #208	@ 0xd0
 802b770:	429c      	cmp	r4, r3
 802b772:	d105      	bne.n	802b780 <std+0x54>
 802b774:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802b778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b77c:	f000 bb16 	b.w	802bdac <__retarget_lock_init_recursive>
 802b780:	bd10      	pop	{r4, pc}
 802b782:	bf00      	nop
 802b784:	0802ba69 	.word	0x0802ba69
 802b788:	0802ba8b 	.word	0x0802ba8b
 802b78c:	0802bac3 	.word	0x0802bac3
 802b790:	0802bae7 	.word	0x0802bae7
 802b794:	200013b8 	.word	0x200013b8

0802b798 <stdio_exit_handler>:
 802b798:	4a02      	ldr	r2, [pc, #8]	@ (802b7a4 <stdio_exit_handler+0xc>)
 802b79a:	4903      	ldr	r1, [pc, #12]	@ (802b7a8 <stdio_exit_handler+0x10>)
 802b79c:	4803      	ldr	r0, [pc, #12]	@ (802b7ac <stdio_exit_handler+0x14>)
 802b79e:	f000 b87b 	b.w	802b898 <_fwalk_sglue>
 802b7a2:	bf00      	nop
 802b7a4:	20000030 	.word	0x20000030
 802b7a8:	0802c509 	.word	0x0802c509
 802b7ac:	20000040 	.word	0x20000040

0802b7b0 <cleanup_stdio>:
 802b7b0:	6841      	ldr	r1, [r0, #4]
 802b7b2:	4b0c      	ldr	r3, [pc, #48]	@ (802b7e4 <cleanup_stdio+0x34>)
 802b7b4:	4299      	cmp	r1, r3
 802b7b6:	b510      	push	{r4, lr}
 802b7b8:	4604      	mov	r4, r0
 802b7ba:	d001      	beq.n	802b7c0 <cleanup_stdio+0x10>
 802b7bc:	f000 fea4 	bl	802c508 <_fflush_r>
 802b7c0:	68a1      	ldr	r1, [r4, #8]
 802b7c2:	4b09      	ldr	r3, [pc, #36]	@ (802b7e8 <cleanup_stdio+0x38>)
 802b7c4:	4299      	cmp	r1, r3
 802b7c6:	d002      	beq.n	802b7ce <cleanup_stdio+0x1e>
 802b7c8:	4620      	mov	r0, r4
 802b7ca:	f000 fe9d 	bl	802c508 <_fflush_r>
 802b7ce:	68e1      	ldr	r1, [r4, #12]
 802b7d0:	4b06      	ldr	r3, [pc, #24]	@ (802b7ec <cleanup_stdio+0x3c>)
 802b7d2:	4299      	cmp	r1, r3
 802b7d4:	d004      	beq.n	802b7e0 <cleanup_stdio+0x30>
 802b7d6:	4620      	mov	r0, r4
 802b7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b7dc:	f000 be94 	b.w	802c508 <_fflush_r>
 802b7e0:	bd10      	pop	{r4, pc}
 802b7e2:	bf00      	nop
 802b7e4:	200013b8 	.word	0x200013b8
 802b7e8:	20001420 	.word	0x20001420
 802b7ec:	20001488 	.word	0x20001488

0802b7f0 <global_stdio_init.part.0>:
 802b7f0:	b510      	push	{r4, lr}
 802b7f2:	4b0b      	ldr	r3, [pc, #44]	@ (802b820 <global_stdio_init.part.0+0x30>)
 802b7f4:	4c0b      	ldr	r4, [pc, #44]	@ (802b824 <global_stdio_init.part.0+0x34>)
 802b7f6:	4a0c      	ldr	r2, [pc, #48]	@ (802b828 <global_stdio_init.part.0+0x38>)
 802b7f8:	601a      	str	r2, [r3, #0]
 802b7fa:	4620      	mov	r0, r4
 802b7fc:	2200      	movs	r2, #0
 802b7fe:	2104      	movs	r1, #4
 802b800:	f7ff ff94 	bl	802b72c <std>
 802b804:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802b808:	2201      	movs	r2, #1
 802b80a:	2109      	movs	r1, #9
 802b80c:	f7ff ff8e 	bl	802b72c <std>
 802b810:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802b814:	2202      	movs	r2, #2
 802b816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b81a:	2112      	movs	r1, #18
 802b81c:	f7ff bf86 	b.w	802b72c <std>
 802b820:	200014f0 	.word	0x200014f0
 802b824:	200013b8 	.word	0x200013b8
 802b828:	0802b799 	.word	0x0802b799

0802b82c <__sfp_lock_acquire>:
 802b82c:	4801      	ldr	r0, [pc, #4]	@ (802b834 <__sfp_lock_acquire+0x8>)
 802b82e:	f000 babe 	b.w	802bdae <__retarget_lock_acquire_recursive>
 802b832:	bf00      	nop
 802b834:	200014f9 	.word	0x200014f9

0802b838 <__sfp_lock_release>:
 802b838:	4801      	ldr	r0, [pc, #4]	@ (802b840 <__sfp_lock_release+0x8>)
 802b83a:	f000 bab9 	b.w	802bdb0 <__retarget_lock_release_recursive>
 802b83e:	bf00      	nop
 802b840:	200014f9 	.word	0x200014f9

0802b844 <__sinit>:
 802b844:	b510      	push	{r4, lr}
 802b846:	4604      	mov	r4, r0
 802b848:	f7ff fff0 	bl	802b82c <__sfp_lock_acquire>
 802b84c:	6a23      	ldr	r3, [r4, #32]
 802b84e:	b11b      	cbz	r3, 802b858 <__sinit+0x14>
 802b850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b854:	f7ff bff0 	b.w	802b838 <__sfp_lock_release>
 802b858:	4b04      	ldr	r3, [pc, #16]	@ (802b86c <__sinit+0x28>)
 802b85a:	6223      	str	r3, [r4, #32]
 802b85c:	4b04      	ldr	r3, [pc, #16]	@ (802b870 <__sinit+0x2c>)
 802b85e:	681b      	ldr	r3, [r3, #0]
 802b860:	2b00      	cmp	r3, #0
 802b862:	d1f5      	bne.n	802b850 <__sinit+0xc>
 802b864:	f7ff ffc4 	bl	802b7f0 <global_stdio_init.part.0>
 802b868:	e7f2      	b.n	802b850 <__sinit+0xc>
 802b86a:	bf00      	nop
 802b86c:	0802b7b1 	.word	0x0802b7b1
 802b870:	200014f0 	.word	0x200014f0

0802b874 <fiprintf>:
 802b874:	b40e      	push	{r1, r2, r3}
 802b876:	b503      	push	{r0, r1, lr}
 802b878:	4601      	mov	r1, r0
 802b87a:	ab03      	add	r3, sp, #12
 802b87c:	4805      	ldr	r0, [pc, #20]	@ (802b894 <fiprintf+0x20>)
 802b87e:	f853 2b04 	ldr.w	r2, [r3], #4
 802b882:	6800      	ldr	r0, [r0, #0]
 802b884:	9301      	str	r3, [sp, #4]
 802b886:	f000 fb17 	bl	802beb8 <_vfiprintf_r>
 802b88a:	b002      	add	sp, #8
 802b88c:	f85d eb04 	ldr.w	lr, [sp], #4
 802b890:	b003      	add	sp, #12
 802b892:	4770      	bx	lr
 802b894:	2000003c 	.word	0x2000003c

0802b898 <_fwalk_sglue>:
 802b898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b89c:	4607      	mov	r7, r0
 802b89e:	4688      	mov	r8, r1
 802b8a0:	4614      	mov	r4, r2
 802b8a2:	2600      	movs	r6, #0
 802b8a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b8a8:	f1b9 0901 	subs.w	r9, r9, #1
 802b8ac:	d505      	bpl.n	802b8ba <_fwalk_sglue+0x22>
 802b8ae:	6824      	ldr	r4, [r4, #0]
 802b8b0:	2c00      	cmp	r4, #0
 802b8b2:	d1f7      	bne.n	802b8a4 <_fwalk_sglue+0xc>
 802b8b4:	4630      	mov	r0, r6
 802b8b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b8ba:	89ab      	ldrh	r3, [r5, #12]
 802b8bc:	2b01      	cmp	r3, #1
 802b8be:	d907      	bls.n	802b8d0 <_fwalk_sglue+0x38>
 802b8c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b8c4:	3301      	adds	r3, #1
 802b8c6:	d003      	beq.n	802b8d0 <_fwalk_sglue+0x38>
 802b8c8:	4629      	mov	r1, r5
 802b8ca:	4638      	mov	r0, r7
 802b8cc:	47c0      	blx	r8
 802b8ce:	4306      	orrs	r6, r0
 802b8d0:	3568      	adds	r5, #104	@ 0x68
 802b8d2:	e7e9      	b.n	802b8a8 <_fwalk_sglue+0x10>

0802b8d4 <_fwrite_r>:
 802b8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b8d8:	9c08      	ldr	r4, [sp, #32]
 802b8da:	468a      	mov	sl, r1
 802b8dc:	4690      	mov	r8, r2
 802b8de:	fb02 f903 	mul.w	r9, r2, r3
 802b8e2:	4606      	mov	r6, r0
 802b8e4:	b118      	cbz	r0, 802b8ee <_fwrite_r+0x1a>
 802b8e6:	6a03      	ldr	r3, [r0, #32]
 802b8e8:	b90b      	cbnz	r3, 802b8ee <_fwrite_r+0x1a>
 802b8ea:	f7ff ffab 	bl	802b844 <__sinit>
 802b8ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b8f0:	07dd      	lsls	r5, r3, #31
 802b8f2:	d405      	bmi.n	802b900 <_fwrite_r+0x2c>
 802b8f4:	89a3      	ldrh	r3, [r4, #12]
 802b8f6:	0598      	lsls	r0, r3, #22
 802b8f8:	d402      	bmi.n	802b900 <_fwrite_r+0x2c>
 802b8fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b8fc:	f000 fa57 	bl	802bdae <__retarget_lock_acquire_recursive>
 802b900:	89a3      	ldrh	r3, [r4, #12]
 802b902:	0719      	lsls	r1, r3, #28
 802b904:	d516      	bpl.n	802b934 <_fwrite_r+0x60>
 802b906:	6923      	ldr	r3, [r4, #16]
 802b908:	b1a3      	cbz	r3, 802b934 <_fwrite_r+0x60>
 802b90a:	2500      	movs	r5, #0
 802b90c:	454d      	cmp	r5, r9
 802b90e:	d01f      	beq.n	802b950 <_fwrite_r+0x7c>
 802b910:	68a7      	ldr	r7, [r4, #8]
 802b912:	f81a 1005 	ldrb.w	r1, [sl, r5]
 802b916:	3f01      	subs	r7, #1
 802b918:	2f00      	cmp	r7, #0
 802b91a:	60a7      	str	r7, [r4, #8]
 802b91c:	da04      	bge.n	802b928 <_fwrite_r+0x54>
 802b91e:	69a3      	ldr	r3, [r4, #24]
 802b920:	429f      	cmp	r7, r3
 802b922:	db0f      	blt.n	802b944 <_fwrite_r+0x70>
 802b924:	290a      	cmp	r1, #10
 802b926:	d00d      	beq.n	802b944 <_fwrite_r+0x70>
 802b928:	6823      	ldr	r3, [r4, #0]
 802b92a:	1c5a      	adds	r2, r3, #1
 802b92c:	6022      	str	r2, [r4, #0]
 802b92e:	7019      	strb	r1, [r3, #0]
 802b930:	3501      	adds	r5, #1
 802b932:	e7eb      	b.n	802b90c <_fwrite_r+0x38>
 802b934:	4621      	mov	r1, r4
 802b936:	4630      	mov	r0, r6
 802b938:	f000 f918 	bl	802bb6c <__swsetup_r>
 802b93c:	2800      	cmp	r0, #0
 802b93e:	d0e4      	beq.n	802b90a <_fwrite_r+0x36>
 802b940:	2500      	movs	r5, #0
 802b942:	e005      	b.n	802b950 <_fwrite_r+0x7c>
 802b944:	4622      	mov	r2, r4
 802b946:	4630      	mov	r0, r6
 802b948:	f000 f8d1 	bl	802baee <__swbuf_r>
 802b94c:	3001      	adds	r0, #1
 802b94e:	d1ef      	bne.n	802b930 <_fwrite_r+0x5c>
 802b950:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b952:	07da      	lsls	r2, r3, #31
 802b954:	d405      	bmi.n	802b962 <_fwrite_r+0x8e>
 802b956:	89a3      	ldrh	r3, [r4, #12]
 802b958:	059b      	lsls	r3, r3, #22
 802b95a:	d402      	bmi.n	802b962 <_fwrite_r+0x8e>
 802b95c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b95e:	f000 fa27 	bl	802bdb0 <__retarget_lock_release_recursive>
 802b962:	fbb5 f0f8 	udiv	r0, r5, r8
 802b966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0802b96c <fwrite>:
 802b96c:	b507      	push	{r0, r1, r2, lr}
 802b96e:	9300      	str	r3, [sp, #0]
 802b970:	4613      	mov	r3, r2
 802b972:	460a      	mov	r2, r1
 802b974:	4601      	mov	r1, r0
 802b976:	4803      	ldr	r0, [pc, #12]	@ (802b984 <fwrite+0x18>)
 802b978:	6800      	ldr	r0, [r0, #0]
 802b97a:	f7ff ffab 	bl	802b8d4 <_fwrite_r>
 802b97e:	b003      	add	sp, #12
 802b980:	f85d fb04 	ldr.w	pc, [sp], #4
 802b984:	2000003c 	.word	0x2000003c

0802b988 <iprintf>:
 802b988:	b40f      	push	{r0, r1, r2, r3}
 802b98a:	b507      	push	{r0, r1, r2, lr}
 802b98c:	4906      	ldr	r1, [pc, #24]	@ (802b9a8 <iprintf+0x20>)
 802b98e:	ab04      	add	r3, sp, #16
 802b990:	6808      	ldr	r0, [r1, #0]
 802b992:	f853 2b04 	ldr.w	r2, [r3], #4
 802b996:	6881      	ldr	r1, [r0, #8]
 802b998:	9301      	str	r3, [sp, #4]
 802b99a:	f000 fa8d 	bl	802beb8 <_vfiprintf_r>
 802b99e:	b003      	add	sp, #12
 802b9a0:	f85d eb04 	ldr.w	lr, [sp], #4
 802b9a4:	b004      	add	sp, #16
 802b9a6:	4770      	bx	lr
 802b9a8:	2000003c 	.word	0x2000003c

0802b9ac <_puts_r>:
 802b9ac:	6a03      	ldr	r3, [r0, #32]
 802b9ae:	b570      	push	{r4, r5, r6, lr}
 802b9b0:	6884      	ldr	r4, [r0, #8]
 802b9b2:	4605      	mov	r5, r0
 802b9b4:	460e      	mov	r6, r1
 802b9b6:	b90b      	cbnz	r3, 802b9bc <_puts_r+0x10>
 802b9b8:	f7ff ff44 	bl	802b844 <__sinit>
 802b9bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b9be:	07db      	lsls	r3, r3, #31
 802b9c0:	d405      	bmi.n	802b9ce <_puts_r+0x22>
 802b9c2:	89a3      	ldrh	r3, [r4, #12]
 802b9c4:	0598      	lsls	r0, r3, #22
 802b9c6:	d402      	bmi.n	802b9ce <_puts_r+0x22>
 802b9c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b9ca:	f000 f9f0 	bl	802bdae <__retarget_lock_acquire_recursive>
 802b9ce:	89a3      	ldrh	r3, [r4, #12]
 802b9d0:	0719      	lsls	r1, r3, #28
 802b9d2:	d502      	bpl.n	802b9da <_puts_r+0x2e>
 802b9d4:	6923      	ldr	r3, [r4, #16]
 802b9d6:	2b00      	cmp	r3, #0
 802b9d8:	d135      	bne.n	802ba46 <_puts_r+0x9a>
 802b9da:	4621      	mov	r1, r4
 802b9dc:	4628      	mov	r0, r5
 802b9de:	f000 f8c5 	bl	802bb6c <__swsetup_r>
 802b9e2:	b380      	cbz	r0, 802ba46 <_puts_r+0x9a>
 802b9e4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802b9e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b9ea:	07da      	lsls	r2, r3, #31
 802b9ec:	d405      	bmi.n	802b9fa <_puts_r+0x4e>
 802b9ee:	89a3      	ldrh	r3, [r4, #12]
 802b9f0:	059b      	lsls	r3, r3, #22
 802b9f2:	d402      	bmi.n	802b9fa <_puts_r+0x4e>
 802b9f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b9f6:	f000 f9db 	bl	802bdb0 <__retarget_lock_release_recursive>
 802b9fa:	4628      	mov	r0, r5
 802b9fc:	bd70      	pop	{r4, r5, r6, pc}
 802b9fe:	2b00      	cmp	r3, #0
 802ba00:	da04      	bge.n	802ba0c <_puts_r+0x60>
 802ba02:	69a2      	ldr	r2, [r4, #24]
 802ba04:	429a      	cmp	r2, r3
 802ba06:	dc17      	bgt.n	802ba38 <_puts_r+0x8c>
 802ba08:	290a      	cmp	r1, #10
 802ba0a:	d015      	beq.n	802ba38 <_puts_r+0x8c>
 802ba0c:	6823      	ldr	r3, [r4, #0]
 802ba0e:	1c5a      	adds	r2, r3, #1
 802ba10:	6022      	str	r2, [r4, #0]
 802ba12:	7019      	strb	r1, [r3, #0]
 802ba14:	68a3      	ldr	r3, [r4, #8]
 802ba16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802ba1a:	3b01      	subs	r3, #1
 802ba1c:	60a3      	str	r3, [r4, #8]
 802ba1e:	2900      	cmp	r1, #0
 802ba20:	d1ed      	bne.n	802b9fe <_puts_r+0x52>
 802ba22:	2b00      	cmp	r3, #0
 802ba24:	da11      	bge.n	802ba4a <_puts_r+0x9e>
 802ba26:	4622      	mov	r2, r4
 802ba28:	210a      	movs	r1, #10
 802ba2a:	4628      	mov	r0, r5
 802ba2c:	f000 f85f 	bl	802baee <__swbuf_r>
 802ba30:	3001      	adds	r0, #1
 802ba32:	d0d7      	beq.n	802b9e4 <_puts_r+0x38>
 802ba34:	250a      	movs	r5, #10
 802ba36:	e7d7      	b.n	802b9e8 <_puts_r+0x3c>
 802ba38:	4622      	mov	r2, r4
 802ba3a:	4628      	mov	r0, r5
 802ba3c:	f000 f857 	bl	802baee <__swbuf_r>
 802ba40:	3001      	adds	r0, #1
 802ba42:	d1e7      	bne.n	802ba14 <_puts_r+0x68>
 802ba44:	e7ce      	b.n	802b9e4 <_puts_r+0x38>
 802ba46:	3e01      	subs	r6, #1
 802ba48:	e7e4      	b.n	802ba14 <_puts_r+0x68>
 802ba4a:	6823      	ldr	r3, [r4, #0]
 802ba4c:	1c5a      	adds	r2, r3, #1
 802ba4e:	6022      	str	r2, [r4, #0]
 802ba50:	220a      	movs	r2, #10
 802ba52:	701a      	strb	r2, [r3, #0]
 802ba54:	e7ee      	b.n	802ba34 <_puts_r+0x88>
	...

0802ba58 <puts>:
 802ba58:	4b02      	ldr	r3, [pc, #8]	@ (802ba64 <puts+0xc>)
 802ba5a:	4601      	mov	r1, r0
 802ba5c:	6818      	ldr	r0, [r3, #0]
 802ba5e:	f7ff bfa5 	b.w	802b9ac <_puts_r>
 802ba62:	bf00      	nop
 802ba64:	2000003c 	.word	0x2000003c

0802ba68 <__sread>:
 802ba68:	b510      	push	{r4, lr}
 802ba6a:	460c      	mov	r4, r1
 802ba6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ba70:	f000 f93e 	bl	802bcf0 <_read_r>
 802ba74:	2800      	cmp	r0, #0
 802ba76:	bfab      	itete	ge
 802ba78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802ba7a:	89a3      	ldrhlt	r3, [r4, #12]
 802ba7c:	181b      	addge	r3, r3, r0
 802ba7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802ba82:	bfac      	ite	ge
 802ba84:	6563      	strge	r3, [r4, #84]	@ 0x54
 802ba86:	81a3      	strhlt	r3, [r4, #12]
 802ba88:	bd10      	pop	{r4, pc}

0802ba8a <__swrite>:
 802ba8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ba8e:	461f      	mov	r7, r3
 802ba90:	898b      	ldrh	r3, [r1, #12]
 802ba92:	05db      	lsls	r3, r3, #23
 802ba94:	4605      	mov	r5, r0
 802ba96:	460c      	mov	r4, r1
 802ba98:	4616      	mov	r6, r2
 802ba9a:	d505      	bpl.n	802baa8 <__swrite+0x1e>
 802ba9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802baa0:	2302      	movs	r3, #2
 802baa2:	2200      	movs	r2, #0
 802baa4:	f000 f912 	bl	802bccc <_lseek_r>
 802baa8:	89a3      	ldrh	r3, [r4, #12]
 802baaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802baae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802bab2:	81a3      	strh	r3, [r4, #12]
 802bab4:	4632      	mov	r2, r6
 802bab6:	463b      	mov	r3, r7
 802bab8:	4628      	mov	r0, r5
 802baba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802babe:	f000 b939 	b.w	802bd34 <_write_r>

0802bac2 <__sseek>:
 802bac2:	b510      	push	{r4, lr}
 802bac4:	460c      	mov	r4, r1
 802bac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802baca:	f000 f8ff 	bl	802bccc <_lseek_r>
 802bace:	1c43      	adds	r3, r0, #1
 802bad0:	89a3      	ldrh	r3, [r4, #12]
 802bad2:	bf15      	itete	ne
 802bad4:	6560      	strne	r0, [r4, #84]	@ 0x54
 802bad6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802bada:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802bade:	81a3      	strheq	r3, [r4, #12]
 802bae0:	bf18      	it	ne
 802bae2:	81a3      	strhne	r3, [r4, #12]
 802bae4:	bd10      	pop	{r4, pc}

0802bae6 <__sclose>:
 802bae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802baea:	f000 b8df 	b.w	802bcac <_close_r>

0802baee <__swbuf_r>:
 802baee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802baf0:	460e      	mov	r6, r1
 802baf2:	4614      	mov	r4, r2
 802baf4:	4605      	mov	r5, r0
 802baf6:	b118      	cbz	r0, 802bb00 <__swbuf_r+0x12>
 802baf8:	6a03      	ldr	r3, [r0, #32]
 802bafa:	b90b      	cbnz	r3, 802bb00 <__swbuf_r+0x12>
 802bafc:	f7ff fea2 	bl	802b844 <__sinit>
 802bb00:	69a3      	ldr	r3, [r4, #24]
 802bb02:	60a3      	str	r3, [r4, #8]
 802bb04:	89a3      	ldrh	r3, [r4, #12]
 802bb06:	071a      	lsls	r2, r3, #28
 802bb08:	d501      	bpl.n	802bb0e <__swbuf_r+0x20>
 802bb0a:	6923      	ldr	r3, [r4, #16]
 802bb0c:	b943      	cbnz	r3, 802bb20 <__swbuf_r+0x32>
 802bb0e:	4621      	mov	r1, r4
 802bb10:	4628      	mov	r0, r5
 802bb12:	f000 f82b 	bl	802bb6c <__swsetup_r>
 802bb16:	b118      	cbz	r0, 802bb20 <__swbuf_r+0x32>
 802bb18:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802bb1c:	4638      	mov	r0, r7
 802bb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bb20:	6823      	ldr	r3, [r4, #0]
 802bb22:	6922      	ldr	r2, [r4, #16]
 802bb24:	1a98      	subs	r0, r3, r2
 802bb26:	6963      	ldr	r3, [r4, #20]
 802bb28:	b2f6      	uxtb	r6, r6
 802bb2a:	4283      	cmp	r3, r0
 802bb2c:	4637      	mov	r7, r6
 802bb2e:	dc05      	bgt.n	802bb3c <__swbuf_r+0x4e>
 802bb30:	4621      	mov	r1, r4
 802bb32:	4628      	mov	r0, r5
 802bb34:	f000 fce8 	bl	802c508 <_fflush_r>
 802bb38:	2800      	cmp	r0, #0
 802bb3a:	d1ed      	bne.n	802bb18 <__swbuf_r+0x2a>
 802bb3c:	68a3      	ldr	r3, [r4, #8]
 802bb3e:	3b01      	subs	r3, #1
 802bb40:	60a3      	str	r3, [r4, #8]
 802bb42:	6823      	ldr	r3, [r4, #0]
 802bb44:	1c5a      	adds	r2, r3, #1
 802bb46:	6022      	str	r2, [r4, #0]
 802bb48:	701e      	strb	r6, [r3, #0]
 802bb4a:	6962      	ldr	r2, [r4, #20]
 802bb4c:	1c43      	adds	r3, r0, #1
 802bb4e:	429a      	cmp	r2, r3
 802bb50:	d004      	beq.n	802bb5c <__swbuf_r+0x6e>
 802bb52:	89a3      	ldrh	r3, [r4, #12]
 802bb54:	07db      	lsls	r3, r3, #31
 802bb56:	d5e1      	bpl.n	802bb1c <__swbuf_r+0x2e>
 802bb58:	2e0a      	cmp	r6, #10
 802bb5a:	d1df      	bne.n	802bb1c <__swbuf_r+0x2e>
 802bb5c:	4621      	mov	r1, r4
 802bb5e:	4628      	mov	r0, r5
 802bb60:	f000 fcd2 	bl	802c508 <_fflush_r>
 802bb64:	2800      	cmp	r0, #0
 802bb66:	d0d9      	beq.n	802bb1c <__swbuf_r+0x2e>
 802bb68:	e7d6      	b.n	802bb18 <__swbuf_r+0x2a>
	...

0802bb6c <__swsetup_r>:
 802bb6c:	b538      	push	{r3, r4, r5, lr}
 802bb6e:	4b29      	ldr	r3, [pc, #164]	@ (802bc14 <__swsetup_r+0xa8>)
 802bb70:	4605      	mov	r5, r0
 802bb72:	6818      	ldr	r0, [r3, #0]
 802bb74:	460c      	mov	r4, r1
 802bb76:	b118      	cbz	r0, 802bb80 <__swsetup_r+0x14>
 802bb78:	6a03      	ldr	r3, [r0, #32]
 802bb7a:	b90b      	cbnz	r3, 802bb80 <__swsetup_r+0x14>
 802bb7c:	f7ff fe62 	bl	802b844 <__sinit>
 802bb80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bb84:	0719      	lsls	r1, r3, #28
 802bb86:	d422      	bmi.n	802bbce <__swsetup_r+0x62>
 802bb88:	06da      	lsls	r2, r3, #27
 802bb8a:	d407      	bmi.n	802bb9c <__swsetup_r+0x30>
 802bb8c:	2209      	movs	r2, #9
 802bb8e:	602a      	str	r2, [r5, #0]
 802bb90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bb94:	81a3      	strh	r3, [r4, #12]
 802bb96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802bb9a:	e033      	b.n	802bc04 <__swsetup_r+0x98>
 802bb9c:	0758      	lsls	r0, r3, #29
 802bb9e:	d512      	bpl.n	802bbc6 <__swsetup_r+0x5a>
 802bba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802bba2:	b141      	cbz	r1, 802bbb6 <__swsetup_r+0x4a>
 802bba4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802bba8:	4299      	cmp	r1, r3
 802bbaa:	d002      	beq.n	802bbb2 <__swsetup_r+0x46>
 802bbac:	4628      	mov	r0, r5
 802bbae:	f000 f90f 	bl	802bdd0 <_free_r>
 802bbb2:	2300      	movs	r3, #0
 802bbb4:	6363      	str	r3, [r4, #52]	@ 0x34
 802bbb6:	89a3      	ldrh	r3, [r4, #12]
 802bbb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802bbbc:	81a3      	strh	r3, [r4, #12]
 802bbbe:	2300      	movs	r3, #0
 802bbc0:	6063      	str	r3, [r4, #4]
 802bbc2:	6923      	ldr	r3, [r4, #16]
 802bbc4:	6023      	str	r3, [r4, #0]
 802bbc6:	89a3      	ldrh	r3, [r4, #12]
 802bbc8:	f043 0308 	orr.w	r3, r3, #8
 802bbcc:	81a3      	strh	r3, [r4, #12]
 802bbce:	6923      	ldr	r3, [r4, #16]
 802bbd0:	b94b      	cbnz	r3, 802bbe6 <__swsetup_r+0x7a>
 802bbd2:	89a3      	ldrh	r3, [r4, #12]
 802bbd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802bbd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802bbdc:	d003      	beq.n	802bbe6 <__swsetup_r+0x7a>
 802bbde:	4621      	mov	r1, r4
 802bbe0:	4628      	mov	r0, r5
 802bbe2:	f000 fcdf 	bl	802c5a4 <__smakebuf_r>
 802bbe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bbea:	f013 0201 	ands.w	r2, r3, #1
 802bbee:	d00a      	beq.n	802bc06 <__swsetup_r+0x9a>
 802bbf0:	2200      	movs	r2, #0
 802bbf2:	60a2      	str	r2, [r4, #8]
 802bbf4:	6962      	ldr	r2, [r4, #20]
 802bbf6:	4252      	negs	r2, r2
 802bbf8:	61a2      	str	r2, [r4, #24]
 802bbfa:	6922      	ldr	r2, [r4, #16]
 802bbfc:	b942      	cbnz	r2, 802bc10 <__swsetup_r+0xa4>
 802bbfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802bc02:	d1c5      	bne.n	802bb90 <__swsetup_r+0x24>
 802bc04:	bd38      	pop	{r3, r4, r5, pc}
 802bc06:	0799      	lsls	r1, r3, #30
 802bc08:	bf58      	it	pl
 802bc0a:	6962      	ldrpl	r2, [r4, #20]
 802bc0c:	60a2      	str	r2, [r4, #8]
 802bc0e:	e7f4      	b.n	802bbfa <__swsetup_r+0x8e>
 802bc10:	2000      	movs	r0, #0
 802bc12:	e7f7      	b.n	802bc04 <__swsetup_r+0x98>
 802bc14:	2000003c 	.word	0x2000003c

0802bc18 <memcmp>:
 802bc18:	b510      	push	{r4, lr}
 802bc1a:	3901      	subs	r1, #1
 802bc1c:	4402      	add	r2, r0
 802bc1e:	4290      	cmp	r0, r2
 802bc20:	d101      	bne.n	802bc26 <memcmp+0xe>
 802bc22:	2000      	movs	r0, #0
 802bc24:	e005      	b.n	802bc32 <memcmp+0x1a>
 802bc26:	7803      	ldrb	r3, [r0, #0]
 802bc28:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802bc2c:	42a3      	cmp	r3, r4
 802bc2e:	d001      	beq.n	802bc34 <memcmp+0x1c>
 802bc30:	1b18      	subs	r0, r3, r4
 802bc32:	bd10      	pop	{r4, pc}
 802bc34:	3001      	adds	r0, #1
 802bc36:	e7f2      	b.n	802bc1e <memcmp+0x6>

0802bc38 <memset>:
 802bc38:	4402      	add	r2, r0
 802bc3a:	4603      	mov	r3, r0
 802bc3c:	4293      	cmp	r3, r2
 802bc3e:	d100      	bne.n	802bc42 <memset+0xa>
 802bc40:	4770      	bx	lr
 802bc42:	f803 1b01 	strb.w	r1, [r3], #1
 802bc46:	e7f9      	b.n	802bc3c <memset+0x4>

0802bc48 <strncasecmp>:
 802bc48:	b570      	push	{r4, r5, r6, lr}
 802bc4a:	4e0e      	ldr	r6, [pc, #56]	@ (802bc84 <strncasecmp+0x3c>)
 802bc4c:	4605      	mov	r5, r0
 802bc4e:	440a      	add	r2, r1
 802bc50:	428a      	cmp	r2, r1
 802bc52:	d101      	bne.n	802bc58 <strncasecmp+0x10>
 802bc54:	2000      	movs	r0, #0
 802bc56:	e013      	b.n	802bc80 <strncasecmp+0x38>
 802bc58:	f815 3b01 	ldrb.w	r3, [r5], #1
 802bc5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 802bc60:	5cf0      	ldrb	r0, [r6, r3]
 802bc62:	f000 0003 	and.w	r0, r0, #3
 802bc66:	2801      	cmp	r0, #1
 802bc68:	5d30      	ldrb	r0, [r6, r4]
 802bc6a:	f000 0003 	and.w	r0, r0, #3
 802bc6e:	bf08      	it	eq
 802bc70:	3320      	addeq	r3, #32
 802bc72:	2801      	cmp	r0, #1
 802bc74:	bf08      	it	eq
 802bc76:	3420      	addeq	r4, #32
 802bc78:	1b18      	subs	r0, r3, r4
 802bc7a:	d101      	bne.n	802bc80 <strncasecmp+0x38>
 802bc7c:	2c00      	cmp	r4, #0
 802bc7e:	d1e7      	bne.n	802bc50 <strncasecmp+0x8>
 802bc80:	bd70      	pop	{r4, r5, r6, pc}
 802bc82:	bf00      	nop
 802bc84:	0802e3ed 	.word	0x0802e3ed

0802bc88 <strncmp>:
 802bc88:	b510      	push	{r4, lr}
 802bc8a:	b16a      	cbz	r2, 802bca8 <strncmp+0x20>
 802bc8c:	3901      	subs	r1, #1
 802bc8e:	1884      	adds	r4, r0, r2
 802bc90:	f810 2b01 	ldrb.w	r2, [r0], #1
 802bc94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802bc98:	429a      	cmp	r2, r3
 802bc9a:	d103      	bne.n	802bca4 <strncmp+0x1c>
 802bc9c:	42a0      	cmp	r0, r4
 802bc9e:	d001      	beq.n	802bca4 <strncmp+0x1c>
 802bca0:	2a00      	cmp	r2, #0
 802bca2:	d1f5      	bne.n	802bc90 <strncmp+0x8>
 802bca4:	1ad0      	subs	r0, r2, r3
 802bca6:	bd10      	pop	{r4, pc}
 802bca8:	4610      	mov	r0, r2
 802bcaa:	e7fc      	b.n	802bca6 <strncmp+0x1e>

0802bcac <_close_r>:
 802bcac:	b538      	push	{r3, r4, r5, lr}
 802bcae:	4d06      	ldr	r5, [pc, #24]	@ (802bcc8 <_close_r+0x1c>)
 802bcb0:	2300      	movs	r3, #0
 802bcb2:	4604      	mov	r4, r0
 802bcb4:	4608      	mov	r0, r1
 802bcb6:	602b      	str	r3, [r5, #0]
 802bcb8:	f7fc fb8f 	bl	80283da <_close>
 802bcbc:	1c43      	adds	r3, r0, #1
 802bcbe:	d102      	bne.n	802bcc6 <_close_r+0x1a>
 802bcc0:	682b      	ldr	r3, [r5, #0]
 802bcc2:	b103      	cbz	r3, 802bcc6 <_close_r+0x1a>
 802bcc4:	6023      	str	r3, [r4, #0]
 802bcc6:	bd38      	pop	{r3, r4, r5, pc}
 802bcc8:	200014f4 	.word	0x200014f4

0802bccc <_lseek_r>:
 802bccc:	b538      	push	{r3, r4, r5, lr}
 802bcce:	4d07      	ldr	r5, [pc, #28]	@ (802bcec <_lseek_r+0x20>)
 802bcd0:	4604      	mov	r4, r0
 802bcd2:	4608      	mov	r0, r1
 802bcd4:	4611      	mov	r1, r2
 802bcd6:	2200      	movs	r2, #0
 802bcd8:	602a      	str	r2, [r5, #0]
 802bcda:	461a      	mov	r2, r3
 802bcdc:	f7fc fba4 	bl	8028428 <_lseek>
 802bce0:	1c43      	adds	r3, r0, #1
 802bce2:	d102      	bne.n	802bcea <_lseek_r+0x1e>
 802bce4:	682b      	ldr	r3, [r5, #0]
 802bce6:	b103      	cbz	r3, 802bcea <_lseek_r+0x1e>
 802bce8:	6023      	str	r3, [r4, #0]
 802bcea:	bd38      	pop	{r3, r4, r5, pc}
 802bcec:	200014f4 	.word	0x200014f4

0802bcf0 <_read_r>:
 802bcf0:	b538      	push	{r3, r4, r5, lr}
 802bcf2:	4d07      	ldr	r5, [pc, #28]	@ (802bd10 <_read_r+0x20>)
 802bcf4:	4604      	mov	r4, r0
 802bcf6:	4608      	mov	r0, r1
 802bcf8:	4611      	mov	r1, r2
 802bcfa:	2200      	movs	r2, #0
 802bcfc:	602a      	str	r2, [r5, #0]
 802bcfe:	461a      	mov	r2, r3
 802bd00:	f7fc fb32 	bl	8028368 <_read>
 802bd04:	1c43      	adds	r3, r0, #1
 802bd06:	d102      	bne.n	802bd0e <_read_r+0x1e>
 802bd08:	682b      	ldr	r3, [r5, #0]
 802bd0a:	b103      	cbz	r3, 802bd0e <_read_r+0x1e>
 802bd0c:	6023      	str	r3, [r4, #0]
 802bd0e:	bd38      	pop	{r3, r4, r5, pc}
 802bd10:	200014f4 	.word	0x200014f4

0802bd14 <_sbrk_r>:
 802bd14:	b538      	push	{r3, r4, r5, lr}
 802bd16:	4d06      	ldr	r5, [pc, #24]	@ (802bd30 <_sbrk_r+0x1c>)
 802bd18:	2300      	movs	r3, #0
 802bd1a:	4604      	mov	r4, r0
 802bd1c:	4608      	mov	r0, r1
 802bd1e:	602b      	str	r3, [r5, #0]
 802bd20:	f7fc fb90 	bl	8028444 <_sbrk>
 802bd24:	1c43      	adds	r3, r0, #1
 802bd26:	d102      	bne.n	802bd2e <_sbrk_r+0x1a>
 802bd28:	682b      	ldr	r3, [r5, #0]
 802bd2a:	b103      	cbz	r3, 802bd2e <_sbrk_r+0x1a>
 802bd2c:	6023      	str	r3, [r4, #0]
 802bd2e:	bd38      	pop	{r3, r4, r5, pc}
 802bd30:	200014f4 	.word	0x200014f4

0802bd34 <_write_r>:
 802bd34:	b538      	push	{r3, r4, r5, lr}
 802bd36:	4d07      	ldr	r5, [pc, #28]	@ (802bd54 <_write_r+0x20>)
 802bd38:	4604      	mov	r4, r0
 802bd3a:	4608      	mov	r0, r1
 802bd3c:	4611      	mov	r1, r2
 802bd3e:	2200      	movs	r2, #0
 802bd40:	602a      	str	r2, [r5, #0]
 802bd42:	461a      	mov	r2, r3
 802bd44:	f7fc fb2d 	bl	80283a2 <_write>
 802bd48:	1c43      	adds	r3, r0, #1
 802bd4a:	d102      	bne.n	802bd52 <_write_r+0x1e>
 802bd4c:	682b      	ldr	r3, [r5, #0]
 802bd4e:	b103      	cbz	r3, 802bd52 <_write_r+0x1e>
 802bd50:	6023      	str	r3, [r4, #0]
 802bd52:	bd38      	pop	{r3, r4, r5, pc}
 802bd54:	200014f4 	.word	0x200014f4

0802bd58 <__errno>:
 802bd58:	4b01      	ldr	r3, [pc, #4]	@ (802bd60 <__errno+0x8>)
 802bd5a:	6818      	ldr	r0, [r3, #0]
 802bd5c:	4770      	bx	lr
 802bd5e:	bf00      	nop
 802bd60:	2000003c 	.word	0x2000003c

0802bd64 <__libc_init_array>:
 802bd64:	b570      	push	{r4, r5, r6, lr}
 802bd66:	4d0d      	ldr	r5, [pc, #52]	@ (802bd9c <__libc_init_array+0x38>)
 802bd68:	4c0d      	ldr	r4, [pc, #52]	@ (802bda0 <__libc_init_array+0x3c>)
 802bd6a:	1b64      	subs	r4, r4, r5
 802bd6c:	10a4      	asrs	r4, r4, #2
 802bd6e:	2600      	movs	r6, #0
 802bd70:	42a6      	cmp	r6, r4
 802bd72:	d109      	bne.n	802bd88 <__libc_init_array+0x24>
 802bd74:	4d0b      	ldr	r5, [pc, #44]	@ (802bda4 <__libc_init_array+0x40>)
 802bd76:	4c0c      	ldr	r4, [pc, #48]	@ (802bda8 <__libc_init_array+0x44>)
 802bd78:	f000 fc72 	bl	802c660 <_init>
 802bd7c:	1b64      	subs	r4, r4, r5
 802bd7e:	10a4      	asrs	r4, r4, #2
 802bd80:	2600      	movs	r6, #0
 802bd82:	42a6      	cmp	r6, r4
 802bd84:	d105      	bne.n	802bd92 <__libc_init_array+0x2e>
 802bd86:	bd70      	pop	{r4, r5, r6, pc}
 802bd88:	f855 3b04 	ldr.w	r3, [r5], #4
 802bd8c:	4798      	blx	r3
 802bd8e:	3601      	adds	r6, #1
 802bd90:	e7ee      	b.n	802bd70 <__libc_init_array+0xc>
 802bd92:	f855 3b04 	ldr.w	r3, [r5], #4
 802bd96:	4798      	blx	r3
 802bd98:	3601      	adds	r6, #1
 802bd9a:	e7f2      	b.n	802bd82 <__libc_init_array+0x1e>
 802bd9c:	0802e528 	.word	0x0802e528
 802bda0:	0802e528 	.word	0x0802e528
 802bda4:	0802e528 	.word	0x0802e528
 802bda8:	0802e52c 	.word	0x0802e52c

0802bdac <__retarget_lock_init_recursive>:
 802bdac:	4770      	bx	lr

0802bdae <__retarget_lock_acquire_recursive>:
 802bdae:	4770      	bx	lr

0802bdb0 <__retarget_lock_release_recursive>:
 802bdb0:	4770      	bx	lr

0802bdb2 <memcpy>:
 802bdb2:	440a      	add	r2, r1
 802bdb4:	4291      	cmp	r1, r2
 802bdb6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802bdba:	d100      	bne.n	802bdbe <memcpy+0xc>
 802bdbc:	4770      	bx	lr
 802bdbe:	b510      	push	{r4, lr}
 802bdc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 802bdc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 802bdc8:	4291      	cmp	r1, r2
 802bdca:	d1f9      	bne.n	802bdc0 <memcpy+0xe>
 802bdcc:	bd10      	pop	{r4, pc}
	...

0802bdd0 <_free_r>:
 802bdd0:	b538      	push	{r3, r4, r5, lr}
 802bdd2:	4605      	mov	r5, r0
 802bdd4:	2900      	cmp	r1, #0
 802bdd6:	d041      	beq.n	802be5c <_free_r+0x8c>
 802bdd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802bddc:	1f0c      	subs	r4, r1, #4
 802bdde:	2b00      	cmp	r3, #0
 802bde0:	bfb8      	it	lt
 802bde2:	18e4      	addlt	r4, r4, r3
 802bde4:	f7ff fc96 	bl	802b714 <__malloc_lock>
 802bde8:	4a1d      	ldr	r2, [pc, #116]	@ (802be60 <_free_r+0x90>)
 802bdea:	6813      	ldr	r3, [r2, #0]
 802bdec:	b933      	cbnz	r3, 802bdfc <_free_r+0x2c>
 802bdee:	6063      	str	r3, [r4, #4]
 802bdf0:	6014      	str	r4, [r2, #0]
 802bdf2:	4628      	mov	r0, r5
 802bdf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802bdf8:	f7ff bc92 	b.w	802b720 <__malloc_unlock>
 802bdfc:	42a3      	cmp	r3, r4
 802bdfe:	d908      	bls.n	802be12 <_free_r+0x42>
 802be00:	6820      	ldr	r0, [r4, #0]
 802be02:	1821      	adds	r1, r4, r0
 802be04:	428b      	cmp	r3, r1
 802be06:	bf01      	itttt	eq
 802be08:	6819      	ldreq	r1, [r3, #0]
 802be0a:	685b      	ldreq	r3, [r3, #4]
 802be0c:	1809      	addeq	r1, r1, r0
 802be0e:	6021      	streq	r1, [r4, #0]
 802be10:	e7ed      	b.n	802bdee <_free_r+0x1e>
 802be12:	461a      	mov	r2, r3
 802be14:	685b      	ldr	r3, [r3, #4]
 802be16:	b10b      	cbz	r3, 802be1c <_free_r+0x4c>
 802be18:	42a3      	cmp	r3, r4
 802be1a:	d9fa      	bls.n	802be12 <_free_r+0x42>
 802be1c:	6811      	ldr	r1, [r2, #0]
 802be1e:	1850      	adds	r0, r2, r1
 802be20:	42a0      	cmp	r0, r4
 802be22:	d10b      	bne.n	802be3c <_free_r+0x6c>
 802be24:	6820      	ldr	r0, [r4, #0]
 802be26:	4401      	add	r1, r0
 802be28:	1850      	adds	r0, r2, r1
 802be2a:	4283      	cmp	r3, r0
 802be2c:	6011      	str	r1, [r2, #0]
 802be2e:	d1e0      	bne.n	802bdf2 <_free_r+0x22>
 802be30:	6818      	ldr	r0, [r3, #0]
 802be32:	685b      	ldr	r3, [r3, #4]
 802be34:	6053      	str	r3, [r2, #4]
 802be36:	4408      	add	r0, r1
 802be38:	6010      	str	r0, [r2, #0]
 802be3a:	e7da      	b.n	802bdf2 <_free_r+0x22>
 802be3c:	d902      	bls.n	802be44 <_free_r+0x74>
 802be3e:	230c      	movs	r3, #12
 802be40:	602b      	str	r3, [r5, #0]
 802be42:	e7d6      	b.n	802bdf2 <_free_r+0x22>
 802be44:	6820      	ldr	r0, [r4, #0]
 802be46:	1821      	adds	r1, r4, r0
 802be48:	428b      	cmp	r3, r1
 802be4a:	bf04      	itt	eq
 802be4c:	6819      	ldreq	r1, [r3, #0]
 802be4e:	685b      	ldreq	r3, [r3, #4]
 802be50:	6063      	str	r3, [r4, #4]
 802be52:	bf04      	itt	eq
 802be54:	1809      	addeq	r1, r1, r0
 802be56:	6021      	streq	r1, [r4, #0]
 802be58:	6054      	str	r4, [r2, #4]
 802be5a:	e7ca      	b.n	802bdf2 <_free_r+0x22>
 802be5c:	bd38      	pop	{r3, r4, r5, pc}
 802be5e:	bf00      	nop
 802be60:	200013b4 	.word	0x200013b4

0802be64 <__sfputc_r>:
 802be64:	6893      	ldr	r3, [r2, #8]
 802be66:	3b01      	subs	r3, #1
 802be68:	2b00      	cmp	r3, #0
 802be6a:	b410      	push	{r4}
 802be6c:	6093      	str	r3, [r2, #8]
 802be6e:	da08      	bge.n	802be82 <__sfputc_r+0x1e>
 802be70:	6994      	ldr	r4, [r2, #24]
 802be72:	42a3      	cmp	r3, r4
 802be74:	db01      	blt.n	802be7a <__sfputc_r+0x16>
 802be76:	290a      	cmp	r1, #10
 802be78:	d103      	bne.n	802be82 <__sfputc_r+0x1e>
 802be7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802be7e:	f7ff be36 	b.w	802baee <__swbuf_r>
 802be82:	6813      	ldr	r3, [r2, #0]
 802be84:	1c58      	adds	r0, r3, #1
 802be86:	6010      	str	r0, [r2, #0]
 802be88:	7019      	strb	r1, [r3, #0]
 802be8a:	4608      	mov	r0, r1
 802be8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802be90:	4770      	bx	lr

0802be92 <__sfputs_r>:
 802be92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802be94:	4606      	mov	r6, r0
 802be96:	460f      	mov	r7, r1
 802be98:	4614      	mov	r4, r2
 802be9a:	18d5      	adds	r5, r2, r3
 802be9c:	42ac      	cmp	r4, r5
 802be9e:	d101      	bne.n	802bea4 <__sfputs_r+0x12>
 802bea0:	2000      	movs	r0, #0
 802bea2:	e007      	b.n	802beb4 <__sfputs_r+0x22>
 802bea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bea8:	463a      	mov	r2, r7
 802beaa:	4630      	mov	r0, r6
 802beac:	f7ff ffda 	bl	802be64 <__sfputc_r>
 802beb0:	1c43      	adds	r3, r0, #1
 802beb2:	d1f3      	bne.n	802be9c <__sfputs_r+0xa>
 802beb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802beb8 <_vfiprintf_r>:
 802beb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bebc:	460d      	mov	r5, r1
 802bebe:	b09d      	sub	sp, #116	@ 0x74
 802bec0:	4614      	mov	r4, r2
 802bec2:	4698      	mov	r8, r3
 802bec4:	4606      	mov	r6, r0
 802bec6:	b118      	cbz	r0, 802bed0 <_vfiprintf_r+0x18>
 802bec8:	6a03      	ldr	r3, [r0, #32]
 802beca:	b90b      	cbnz	r3, 802bed0 <_vfiprintf_r+0x18>
 802becc:	f7ff fcba 	bl	802b844 <__sinit>
 802bed0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802bed2:	07d9      	lsls	r1, r3, #31
 802bed4:	d405      	bmi.n	802bee2 <_vfiprintf_r+0x2a>
 802bed6:	89ab      	ldrh	r3, [r5, #12]
 802bed8:	059a      	lsls	r2, r3, #22
 802beda:	d402      	bmi.n	802bee2 <_vfiprintf_r+0x2a>
 802bedc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802bede:	f7ff ff66 	bl	802bdae <__retarget_lock_acquire_recursive>
 802bee2:	89ab      	ldrh	r3, [r5, #12]
 802bee4:	071b      	lsls	r3, r3, #28
 802bee6:	d501      	bpl.n	802beec <_vfiprintf_r+0x34>
 802bee8:	692b      	ldr	r3, [r5, #16]
 802beea:	b99b      	cbnz	r3, 802bf14 <_vfiprintf_r+0x5c>
 802beec:	4629      	mov	r1, r5
 802beee:	4630      	mov	r0, r6
 802bef0:	f7ff fe3c 	bl	802bb6c <__swsetup_r>
 802bef4:	b170      	cbz	r0, 802bf14 <_vfiprintf_r+0x5c>
 802bef6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802bef8:	07dc      	lsls	r4, r3, #31
 802befa:	d504      	bpl.n	802bf06 <_vfiprintf_r+0x4e>
 802befc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802bf00:	b01d      	add	sp, #116	@ 0x74
 802bf02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bf06:	89ab      	ldrh	r3, [r5, #12]
 802bf08:	0598      	lsls	r0, r3, #22
 802bf0a:	d4f7      	bmi.n	802befc <_vfiprintf_r+0x44>
 802bf0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802bf0e:	f7ff ff4f 	bl	802bdb0 <__retarget_lock_release_recursive>
 802bf12:	e7f3      	b.n	802befc <_vfiprintf_r+0x44>
 802bf14:	2300      	movs	r3, #0
 802bf16:	9309      	str	r3, [sp, #36]	@ 0x24
 802bf18:	2320      	movs	r3, #32
 802bf1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802bf1e:	f8cd 800c 	str.w	r8, [sp, #12]
 802bf22:	2330      	movs	r3, #48	@ 0x30
 802bf24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802c0d4 <_vfiprintf_r+0x21c>
 802bf28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802bf2c:	f04f 0901 	mov.w	r9, #1
 802bf30:	4623      	mov	r3, r4
 802bf32:	469a      	mov	sl, r3
 802bf34:	f813 2b01 	ldrb.w	r2, [r3], #1
 802bf38:	b10a      	cbz	r2, 802bf3e <_vfiprintf_r+0x86>
 802bf3a:	2a25      	cmp	r2, #37	@ 0x25
 802bf3c:	d1f9      	bne.n	802bf32 <_vfiprintf_r+0x7a>
 802bf3e:	ebba 0b04 	subs.w	fp, sl, r4
 802bf42:	d00b      	beq.n	802bf5c <_vfiprintf_r+0xa4>
 802bf44:	465b      	mov	r3, fp
 802bf46:	4622      	mov	r2, r4
 802bf48:	4629      	mov	r1, r5
 802bf4a:	4630      	mov	r0, r6
 802bf4c:	f7ff ffa1 	bl	802be92 <__sfputs_r>
 802bf50:	3001      	adds	r0, #1
 802bf52:	f000 80a7 	beq.w	802c0a4 <_vfiprintf_r+0x1ec>
 802bf56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802bf58:	445a      	add	r2, fp
 802bf5a:	9209      	str	r2, [sp, #36]	@ 0x24
 802bf5c:	f89a 3000 	ldrb.w	r3, [sl]
 802bf60:	2b00      	cmp	r3, #0
 802bf62:	f000 809f 	beq.w	802c0a4 <_vfiprintf_r+0x1ec>
 802bf66:	2300      	movs	r3, #0
 802bf68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802bf6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802bf70:	f10a 0a01 	add.w	sl, sl, #1
 802bf74:	9304      	str	r3, [sp, #16]
 802bf76:	9307      	str	r3, [sp, #28]
 802bf78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802bf7c:	931a      	str	r3, [sp, #104]	@ 0x68
 802bf7e:	4654      	mov	r4, sl
 802bf80:	2205      	movs	r2, #5
 802bf82:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bf86:	4853      	ldr	r0, [pc, #332]	@ (802c0d4 <_vfiprintf_r+0x21c>)
 802bf88:	f7f4 fb22 	bl	80205d0 <memchr>
 802bf8c:	9a04      	ldr	r2, [sp, #16]
 802bf8e:	b9d8      	cbnz	r0, 802bfc8 <_vfiprintf_r+0x110>
 802bf90:	06d1      	lsls	r1, r2, #27
 802bf92:	bf44      	itt	mi
 802bf94:	2320      	movmi	r3, #32
 802bf96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802bf9a:	0713      	lsls	r3, r2, #28
 802bf9c:	bf44      	itt	mi
 802bf9e:	232b      	movmi	r3, #43	@ 0x2b
 802bfa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802bfa4:	f89a 3000 	ldrb.w	r3, [sl]
 802bfa8:	2b2a      	cmp	r3, #42	@ 0x2a
 802bfaa:	d015      	beq.n	802bfd8 <_vfiprintf_r+0x120>
 802bfac:	9a07      	ldr	r2, [sp, #28]
 802bfae:	4654      	mov	r4, sl
 802bfb0:	2000      	movs	r0, #0
 802bfb2:	f04f 0c0a 	mov.w	ip, #10
 802bfb6:	4621      	mov	r1, r4
 802bfb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 802bfbc:	3b30      	subs	r3, #48	@ 0x30
 802bfbe:	2b09      	cmp	r3, #9
 802bfc0:	d94b      	bls.n	802c05a <_vfiprintf_r+0x1a2>
 802bfc2:	b1b0      	cbz	r0, 802bff2 <_vfiprintf_r+0x13a>
 802bfc4:	9207      	str	r2, [sp, #28]
 802bfc6:	e014      	b.n	802bff2 <_vfiprintf_r+0x13a>
 802bfc8:	eba0 0308 	sub.w	r3, r0, r8
 802bfcc:	fa09 f303 	lsl.w	r3, r9, r3
 802bfd0:	4313      	orrs	r3, r2
 802bfd2:	9304      	str	r3, [sp, #16]
 802bfd4:	46a2      	mov	sl, r4
 802bfd6:	e7d2      	b.n	802bf7e <_vfiprintf_r+0xc6>
 802bfd8:	9b03      	ldr	r3, [sp, #12]
 802bfda:	1d19      	adds	r1, r3, #4
 802bfdc:	681b      	ldr	r3, [r3, #0]
 802bfde:	9103      	str	r1, [sp, #12]
 802bfe0:	2b00      	cmp	r3, #0
 802bfe2:	bfbb      	ittet	lt
 802bfe4:	425b      	neglt	r3, r3
 802bfe6:	f042 0202 	orrlt.w	r2, r2, #2
 802bfea:	9307      	strge	r3, [sp, #28]
 802bfec:	9307      	strlt	r3, [sp, #28]
 802bfee:	bfb8      	it	lt
 802bff0:	9204      	strlt	r2, [sp, #16]
 802bff2:	7823      	ldrb	r3, [r4, #0]
 802bff4:	2b2e      	cmp	r3, #46	@ 0x2e
 802bff6:	d10a      	bne.n	802c00e <_vfiprintf_r+0x156>
 802bff8:	7863      	ldrb	r3, [r4, #1]
 802bffa:	2b2a      	cmp	r3, #42	@ 0x2a
 802bffc:	d132      	bne.n	802c064 <_vfiprintf_r+0x1ac>
 802bffe:	9b03      	ldr	r3, [sp, #12]
 802c000:	1d1a      	adds	r2, r3, #4
 802c002:	681b      	ldr	r3, [r3, #0]
 802c004:	9203      	str	r2, [sp, #12]
 802c006:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802c00a:	3402      	adds	r4, #2
 802c00c:	9305      	str	r3, [sp, #20]
 802c00e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802c0e4 <_vfiprintf_r+0x22c>
 802c012:	7821      	ldrb	r1, [r4, #0]
 802c014:	2203      	movs	r2, #3
 802c016:	4650      	mov	r0, sl
 802c018:	f7f4 fada 	bl	80205d0 <memchr>
 802c01c:	b138      	cbz	r0, 802c02e <_vfiprintf_r+0x176>
 802c01e:	9b04      	ldr	r3, [sp, #16]
 802c020:	eba0 000a 	sub.w	r0, r0, sl
 802c024:	2240      	movs	r2, #64	@ 0x40
 802c026:	4082      	lsls	r2, r0
 802c028:	4313      	orrs	r3, r2
 802c02a:	3401      	adds	r4, #1
 802c02c:	9304      	str	r3, [sp, #16]
 802c02e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c032:	4829      	ldr	r0, [pc, #164]	@ (802c0d8 <_vfiprintf_r+0x220>)
 802c034:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802c038:	2206      	movs	r2, #6
 802c03a:	f7f4 fac9 	bl	80205d0 <memchr>
 802c03e:	2800      	cmp	r0, #0
 802c040:	d03f      	beq.n	802c0c2 <_vfiprintf_r+0x20a>
 802c042:	4b26      	ldr	r3, [pc, #152]	@ (802c0dc <_vfiprintf_r+0x224>)
 802c044:	bb1b      	cbnz	r3, 802c08e <_vfiprintf_r+0x1d6>
 802c046:	9b03      	ldr	r3, [sp, #12]
 802c048:	3307      	adds	r3, #7
 802c04a:	f023 0307 	bic.w	r3, r3, #7
 802c04e:	3308      	adds	r3, #8
 802c050:	9303      	str	r3, [sp, #12]
 802c052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c054:	443b      	add	r3, r7
 802c056:	9309      	str	r3, [sp, #36]	@ 0x24
 802c058:	e76a      	b.n	802bf30 <_vfiprintf_r+0x78>
 802c05a:	fb0c 3202 	mla	r2, ip, r2, r3
 802c05e:	460c      	mov	r4, r1
 802c060:	2001      	movs	r0, #1
 802c062:	e7a8      	b.n	802bfb6 <_vfiprintf_r+0xfe>
 802c064:	2300      	movs	r3, #0
 802c066:	3401      	adds	r4, #1
 802c068:	9305      	str	r3, [sp, #20]
 802c06a:	4619      	mov	r1, r3
 802c06c:	f04f 0c0a 	mov.w	ip, #10
 802c070:	4620      	mov	r0, r4
 802c072:	f810 2b01 	ldrb.w	r2, [r0], #1
 802c076:	3a30      	subs	r2, #48	@ 0x30
 802c078:	2a09      	cmp	r2, #9
 802c07a:	d903      	bls.n	802c084 <_vfiprintf_r+0x1cc>
 802c07c:	2b00      	cmp	r3, #0
 802c07e:	d0c6      	beq.n	802c00e <_vfiprintf_r+0x156>
 802c080:	9105      	str	r1, [sp, #20]
 802c082:	e7c4      	b.n	802c00e <_vfiprintf_r+0x156>
 802c084:	fb0c 2101 	mla	r1, ip, r1, r2
 802c088:	4604      	mov	r4, r0
 802c08a:	2301      	movs	r3, #1
 802c08c:	e7f0      	b.n	802c070 <_vfiprintf_r+0x1b8>
 802c08e:	ab03      	add	r3, sp, #12
 802c090:	9300      	str	r3, [sp, #0]
 802c092:	462a      	mov	r2, r5
 802c094:	4b12      	ldr	r3, [pc, #72]	@ (802c0e0 <_vfiprintf_r+0x228>)
 802c096:	a904      	add	r1, sp, #16
 802c098:	4630      	mov	r0, r6
 802c09a:	f3af 8000 	nop.w
 802c09e:	4607      	mov	r7, r0
 802c0a0:	1c78      	adds	r0, r7, #1
 802c0a2:	d1d6      	bne.n	802c052 <_vfiprintf_r+0x19a>
 802c0a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802c0a6:	07d9      	lsls	r1, r3, #31
 802c0a8:	d405      	bmi.n	802c0b6 <_vfiprintf_r+0x1fe>
 802c0aa:	89ab      	ldrh	r3, [r5, #12]
 802c0ac:	059a      	lsls	r2, r3, #22
 802c0ae:	d402      	bmi.n	802c0b6 <_vfiprintf_r+0x1fe>
 802c0b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802c0b2:	f7ff fe7d 	bl	802bdb0 <__retarget_lock_release_recursive>
 802c0b6:	89ab      	ldrh	r3, [r5, #12]
 802c0b8:	065b      	lsls	r3, r3, #25
 802c0ba:	f53f af1f 	bmi.w	802befc <_vfiprintf_r+0x44>
 802c0be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802c0c0:	e71e      	b.n	802bf00 <_vfiprintf_r+0x48>
 802c0c2:	ab03      	add	r3, sp, #12
 802c0c4:	9300      	str	r3, [sp, #0]
 802c0c6:	462a      	mov	r2, r5
 802c0c8:	4b05      	ldr	r3, [pc, #20]	@ (802c0e0 <_vfiprintf_r+0x228>)
 802c0ca:	a904      	add	r1, sp, #16
 802c0cc:	4630      	mov	r0, r6
 802c0ce:	f000 f879 	bl	802c1c4 <_printf_i>
 802c0d2:	e7e4      	b.n	802c09e <_vfiprintf_r+0x1e6>
 802c0d4:	0802e4ed 	.word	0x0802e4ed
 802c0d8:	0802e4f7 	.word	0x0802e4f7
 802c0dc:	00000000 	.word	0x00000000
 802c0e0:	0802be93 	.word	0x0802be93
 802c0e4:	0802e4f3 	.word	0x0802e4f3

0802c0e8 <_printf_common>:
 802c0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c0ec:	4616      	mov	r6, r2
 802c0ee:	4698      	mov	r8, r3
 802c0f0:	688a      	ldr	r2, [r1, #8]
 802c0f2:	690b      	ldr	r3, [r1, #16]
 802c0f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802c0f8:	4293      	cmp	r3, r2
 802c0fa:	bfb8      	it	lt
 802c0fc:	4613      	movlt	r3, r2
 802c0fe:	6033      	str	r3, [r6, #0]
 802c100:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802c104:	4607      	mov	r7, r0
 802c106:	460c      	mov	r4, r1
 802c108:	b10a      	cbz	r2, 802c10e <_printf_common+0x26>
 802c10a:	3301      	adds	r3, #1
 802c10c:	6033      	str	r3, [r6, #0]
 802c10e:	6823      	ldr	r3, [r4, #0]
 802c110:	0699      	lsls	r1, r3, #26
 802c112:	bf42      	ittt	mi
 802c114:	6833      	ldrmi	r3, [r6, #0]
 802c116:	3302      	addmi	r3, #2
 802c118:	6033      	strmi	r3, [r6, #0]
 802c11a:	6825      	ldr	r5, [r4, #0]
 802c11c:	f015 0506 	ands.w	r5, r5, #6
 802c120:	d106      	bne.n	802c130 <_printf_common+0x48>
 802c122:	f104 0a19 	add.w	sl, r4, #25
 802c126:	68e3      	ldr	r3, [r4, #12]
 802c128:	6832      	ldr	r2, [r6, #0]
 802c12a:	1a9b      	subs	r3, r3, r2
 802c12c:	42ab      	cmp	r3, r5
 802c12e:	dc26      	bgt.n	802c17e <_printf_common+0x96>
 802c130:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802c134:	6822      	ldr	r2, [r4, #0]
 802c136:	3b00      	subs	r3, #0
 802c138:	bf18      	it	ne
 802c13a:	2301      	movne	r3, #1
 802c13c:	0692      	lsls	r2, r2, #26
 802c13e:	d42b      	bmi.n	802c198 <_printf_common+0xb0>
 802c140:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802c144:	4641      	mov	r1, r8
 802c146:	4638      	mov	r0, r7
 802c148:	47c8      	blx	r9
 802c14a:	3001      	adds	r0, #1
 802c14c:	d01e      	beq.n	802c18c <_printf_common+0xa4>
 802c14e:	6823      	ldr	r3, [r4, #0]
 802c150:	6922      	ldr	r2, [r4, #16]
 802c152:	f003 0306 	and.w	r3, r3, #6
 802c156:	2b04      	cmp	r3, #4
 802c158:	bf02      	ittt	eq
 802c15a:	68e5      	ldreq	r5, [r4, #12]
 802c15c:	6833      	ldreq	r3, [r6, #0]
 802c15e:	1aed      	subeq	r5, r5, r3
 802c160:	68a3      	ldr	r3, [r4, #8]
 802c162:	bf0c      	ite	eq
 802c164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802c168:	2500      	movne	r5, #0
 802c16a:	4293      	cmp	r3, r2
 802c16c:	bfc4      	itt	gt
 802c16e:	1a9b      	subgt	r3, r3, r2
 802c170:	18ed      	addgt	r5, r5, r3
 802c172:	2600      	movs	r6, #0
 802c174:	341a      	adds	r4, #26
 802c176:	42b5      	cmp	r5, r6
 802c178:	d11a      	bne.n	802c1b0 <_printf_common+0xc8>
 802c17a:	2000      	movs	r0, #0
 802c17c:	e008      	b.n	802c190 <_printf_common+0xa8>
 802c17e:	2301      	movs	r3, #1
 802c180:	4652      	mov	r2, sl
 802c182:	4641      	mov	r1, r8
 802c184:	4638      	mov	r0, r7
 802c186:	47c8      	blx	r9
 802c188:	3001      	adds	r0, #1
 802c18a:	d103      	bne.n	802c194 <_printf_common+0xac>
 802c18c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c194:	3501      	adds	r5, #1
 802c196:	e7c6      	b.n	802c126 <_printf_common+0x3e>
 802c198:	18e1      	adds	r1, r4, r3
 802c19a:	1c5a      	adds	r2, r3, #1
 802c19c:	2030      	movs	r0, #48	@ 0x30
 802c19e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802c1a2:	4422      	add	r2, r4
 802c1a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802c1a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802c1ac:	3302      	adds	r3, #2
 802c1ae:	e7c7      	b.n	802c140 <_printf_common+0x58>
 802c1b0:	2301      	movs	r3, #1
 802c1b2:	4622      	mov	r2, r4
 802c1b4:	4641      	mov	r1, r8
 802c1b6:	4638      	mov	r0, r7
 802c1b8:	47c8      	blx	r9
 802c1ba:	3001      	adds	r0, #1
 802c1bc:	d0e6      	beq.n	802c18c <_printf_common+0xa4>
 802c1be:	3601      	adds	r6, #1
 802c1c0:	e7d9      	b.n	802c176 <_printf_common+0x8e>
	...

0802c1c4 <_printf_i>:
 802c1c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c1c8:	7e0f      	ldrb	r7, [r1, #24]
 802c1ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802c1cc:	2f78      	cmp	r7, #120	@ 0x78
 802c1ce:	4691      	mov	r9, r2
 802c1d0:	4680      	mov	r8, r0
 802c1d2:	460c      	mov	r4, r1
 802c1d4:	469a      	mov	sl, r3
 802c1d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802c1da:	d807      	bhi.n	802c1ec <_printf_i+0x28>
 802c1dc:	2f62      	cmp	r7, #98	@ 0x62
 802c1de:	d80a      	bhi.n	802c1f6 <_printf_i+0x32>
 802c1e0:	2f00      	cmp	r7, #0
 802c1e2:	f000 80d1 	beq.w	802c388 <_printf_i+0x1c4>
 802c1e6:	2f58      	cmp	r7, #88	@ 0x58
 802c1e8:	f000 80b8 	beq.w	802c35c <_printf_i+0x198>
 802c1ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802c1f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802c1f4:	e03a      	b.n	802c26c <_printf_i+0xa8>
 802c1f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802c1fa:	2b15      	cmp	r3, #21
 802c1fc:	d8f6      	bhi.n	802c1ec <_printf_i+0x28>
 802c1fe:	a101      	add	r1, pc, #4	@ (adr r1, 802c204 <_printf_i+0x40>)
 802c200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802c204:	0802c25d 	.word	0x0802c25d
 802c208:	0802c271 	.word	0x0802c271
 802c20c:	0802c1ed 	.word	0x0802c1ed
 802c210:	0802c1ed 	.word	0x0802c1ed
 802c214:	0802c1ed 	.word	0x0802c1ed
 802c218:	0802c1ed 	.word	0x0802c1ed
 802c21c:	0802c271 	.word	0x0802c271
 802c220:	0802c1ed 	.word	0x0802c1ed
 802c224:	0802c1ed 	.word	0x0802c1ed
 802c228:	0802c1ed 	.word	0x0802c1ed
 802c22c:	0802c1ed 	.word	0x0802c1ed
 802c230:	0802c36f 	.word	0x0802c36f
 802c234:	0802c29b 	.word	0x0802c29b
 802c238:	0802c329 	.word	0x0802c329
 802c23c:	0802c1ed 	.word	0x0802c1ed
 802c240:	0802c1ed 	.word	0x0802c1ed
 802c244:	0802c391 	.word	0x0802c391
 802c248:	0802c1ed 	.word	0x0802c1ed
 802c24c:	0802c29b 	.word	0x0802c29b
 802c250:	0802c1ed 	.word	0x0802c1ed
 802c254:	0802c1ed 	.word	0x0802c1ed
 802c258:	0802c331 	.word	0x0802c331
 802c25c:	6833      	ldr	r3, [r6, #0]
 802c25e:	1d1a      	adds	r2, r3, #4
 802c260:	681b      	ldr	r3, [r3, #0]
 802c262:	6032      	str	r2, [r6, #0]
 802c264:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802c268:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802c26c:	2301      	movs	r3, #1
 802c26e:	e09c      	b.n	802c3aa <_printf_i+0x1e6>
 802c270:	6833      	ldr	r3, [r6, #0]
 802c272:	6820      	ldr	r0, [r4, #0]
 802c274:	1d19      	adds	r1, r3, #4
 802c276:	6031      	str	r1, [r6, #0]
 802c278:	0606      	lsls	r6, r0, #24
 802c27a:	d501      	bpl.n	802c280 <_printf_i+0xbc>
 802c27c:	681d      	ldr	r5, [r3, #0]
 802c27e:	e003      	b.n	802c288 <_printf_i+0xc4>
 802c280:	0645      	lsls	r5, r0, #25
 802c282:	d5fb      	bpl.n	802c27c <_printf_i+0xb8>
 802c284:	f9b3 5000 	ldrsh.w	r5, [r3]
 802c288:	2d00      	cmp	r5, #0
 802c28a:	da03      	bge.n	802c294 <_printf_i+0xd0>
 802c28c:	232d      	movs	r3, #45	@ 0x2d
 802c28e:	426d      	negs	r5, r5
 802c290:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802c294:	4858      	ldr	r0, [pc, #352]	@ (802c3f8 <_printf_i+0x234>)
 802c296:	230a      	movs	r3, #10
 802c298:	e011      	b.n	802c2be <_printf_i+0xfa>
 802c29a:	6821      	ldr	r1, [r4, #0]
 802c29c:	6833      	ldr	r3, [r6, #0]
 802c29e:	0608      	lsls	r0, r1, #24
 802c2a0:	f853 5b04 	ldr.w	r5, [r3], #4
 802c2a4:	d402      	bmi.n	802c2ac <_printf_i+0xe8>
 802c2a6:	0649      	lsls	r1, r1, #25
 802c2a8:	bf48      	it	mi
 802c2aa:	b2ad      	uxthmi	r5, r5
 802c2ac:	2f6f      	cmp	r7, #111	@ 0x6f
 802c2ae:	4852      	ldr	r0, [pc, #328]	@ (802c3f8 <_printf_i+0x234>)
 802c2b0:	6033      	str	r3, [r6, #0]
 802c2b2:	bf14      	ite	ne
 802c2b4:	230a      	movne	r3, #10
 802c2b6:	2308      	moveq	r3, #8
 802c2b8:	2100      	movs	r1, #0
 802c2ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802c2be:	6866      	ldr	r6, [r4, #4]
 802c2c0:	60a6      	str	r6, [r4, #8]
 802c2c2:	2e00      	cmp	r6, #0
 802c2c4:	db05      	blt.n	802c2d2 <_printf_i+0x10e>
 802c2c6:	6821      	ldr	r1, [r4, #0]
 802c2c8:	432e      	orrs	r6, r5
 802c2ca:	f021 0104 	bic.w	r1, r1, #4
 802c2ce:	6021      	str	r1, [r4, #0]
 802c2d0:	d04b      	beq.n	802c36a <_printf_i+0x1a6>
 802c2d2:	4616      	mov	r6, r2
 802c2d4:	fbb5 f1f3 	udiv	r1, r5, r3
 802c2d8:	fb03 5711 	mls	r7, r3, r1, r5
 802c2dc:	5dc7      	ldrb	r7, [r0, r7]
 802c2de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802c2e2:	462f      	mov	r7, r5
 802c2e4:	42bb      	cmp	r3, r7
 802c2e6:	460d      	mov	r5, r1
 802c2e8:	d9f4      	bls.n	802c2d4 <_printf_i+0x110>
 802c2ea:	2b08      	cmp	r3, #8
 802c2ec:	d10b      	bne.n	802c306 <_printf_i+0x142>
 802c2ee:	6823      	ldr	r3, [r4, #0]
 802c2f0:	07df      	lsls	r7, r3, #31
 802c2f2:	d508      	bpl.n	802c306 <_printf_i+0x142>
 802c2f4:	6923      	ldr	r3, [r4, #16]
 802c2f6:	6861      	ldr	r1, [r4, #4]
 802c2f8:	4299      	cmp	r1, r3
 802c2fa:	bfde      	ittt	le
 802c2fc:	2330      	movle	r3, #48	@ 0x30
 802c2fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 802c302:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 802c306:	1b92      	subs	r2, r2, r6
 802c308:	6122      	str	r2, [r4, #16]
 802c30a:	f8cd a000 	str.w	sl, [sp]
 802c30e:	464b      	mov	r3, r9
 802c310:	aa03      	add	r2, sp, #12
 802c312:	4621      	mov	r1, r4
 802c314:	4640      	mov	r0, r8
 802c316:	f7ff fee7 	bl	802c0e8 <_printf_common>
 802c31a:	3001      	adds	r0, #1
 802c31c:	d14a      	bne.n	802c3b4 <_printf_i+0x1f0>
 802c31e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c322:	b004      	add	sp, #16
 802c324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c328:	6823      	ldr	r3, [r4, #0]
 802c32a:	f043 0320 	orr.w	r3, r3, #32
 802c32e:	6023      	str	r3, [r4, #0]
 802c330:	4832      	ldr	r0, [pc, #200]	@ (802c3fc <_printf_i+0x238>)
 802c332:	2778      	movs	r7, #120	@ 0x78
 802c334:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802c338:	6823      	ldr	r3, [r4, #0]
 802c33a:	6831      	ldr	r1, [r6, #0]
 802c33c:	061f      	lsls	r7, r3, #24
 802c33e:	f851 5b04 	ldr.w	r5, [r1], #4
 802c342:	d402      	bmi.n	802c34a <_printf_i+0x186>
 802c344:	065f      	lsls	r7, r3, #25
 802c346:	bf48      	it	mi
 802c348:	b2ad      	uxthmi	r5, r5
 802c34a:	6031      	str	r1, [r6, #0]
 802c34c:	07d9      	lsls	r1, r3, #31
 802c34e:	bf44      	itt	mi
 802c350:	f043 0320 	orrmi.w	r3, r3, #32
 802c354:	6023      	strmi	r3, [r4, #0]
 802c356:	b11d      	cbz	r5, 802c360 <_printf_i+0x19c>
 802c358:	2310      	movs	r3, #16
 802c35a:	e7ad      	b.n	802c2b8 <_printf_i+0xf4>
 802c35c:	4826      	ldr	r0, [pc, #152]	@ (802c3f8 <_printf_i+0x234>)
 802c35e:	e7e9      	b.n	802c334 <_printf_i+0x170>
 802c360:	6823      	ldr	r3, [r4, #0]
 802c362:	f023 0320 	bic.w	r3, r3, #32
 802c366:	6023      	str	r3, [r4, #0]
 802c368:	e7f6      	b.n	802c358 <_printf_i+0x194>
 802c36a:	4616      	mov	r6, r2
 802c36c:	e7bd      	b.n	802c2ea <_printf_i+0x126>
 802c36e:	6833      	ldr	r3, [r6, #0]
 802c370:	6825      	ldr	r5, [r4, #0]
 802c372:	6961      	ldr	r1, [r4, #20]
 802c374:	1d18      	adds	r0, r3, #4
 802c376:	6030      	str	r0, [r6, #0]
 802c378:	062e      	lsls	r6, r5, #24
 802c37a:	681b      	ldr	r3, [r3, #0]
 802c37c:	d501      	bpl.n	802c382 <_printf_i+0x1be>
 802c37e:	6019      	str	r1, [r3, #0]
 802c380:	e002      	b.n	802c388 <_printf_i+0x1c4>
 802c382:	0668      	lsls	r0, r5, #25
 802c384:	d5fb      	bpl.n	802c37e <_printf_i+0x1ba>
 802c386:	8019      	strh	r1, [r3, #0]
 802c388:	2300      	movs	r3, #0
 802c38a:	6123      	str	r3, [r4, #16]
 802c38c:	4616      	mov	r6, r2
 802c38e:	e7bc      	b.n	802c30a <_printf_i+0x146>
 802c390:	6833      	ldr	r3, [r6, #0]
 802c392:	1d1a      	adds	r2, r3, #4
 802c394:	6032      	str	r2, [r6, #0]
 802c396:	681e      	ldr	r6, [r3, #0]
 802c398:	6862      	ldr	r2, [r4, #4]
 802c39a:	2100      	movs	r1, #0
 802c39c:	4630      	mov	r0, r6
 802c39e:	f7f4 f917 	bl	80205d0 <memchr>
 802c3a2:	b108      	cbz	r0, 802c3a8 <_printf_i+0x1e4>
 802c3a4:	1b80      	subs	r0, r0, r6
 802c3a6:	6060      	str	r0, [r4, #4]
 802c3a8:	6863      	ldr	r3, [r4, #4]
 802c3aa:	6123      	str	r3, [r4, #16]
 802c3ac:	2300      	movs	r3, #0
 802c3ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802c3b2:	e7aa      	b.n	802c30a <_printf_i+0x146>
 802c3b4:	6923      	ldr	r3, [r4, #16]
 802c3b6:	4632      	mov	r2, r6
 802c3b8:	4649      	mov	r1, r9
 802c3ba:	4640      	mov	r0, r8
 802c3bc:	47d0      	blx	sl
 802c3be:	3001      	adds	r0, #1
 802c3c0:	d0ad      	beq.n	802c31e <_printf_i+0x15a>
 802c3c2:	6823      	ldr	r3, [r4, #0]
 802c3c4:	079b      	lsls	r3, r3, #30
 802c3c6:	d413      	bmi.n	802c3f0 <_printf_i+0x22c>
 802c3c8:	68e0      	ldr	r0, [r4, #12]
 802c3ca:	9b03      	ldr	r3, [sp, #12]
 802c3cc:	4298      	cmp	r0, r3
 802c3ce:	bfb8      	it	lt
 802c3d0:	4618      	movlt	r0, r3
 802c3d2:	e7a6      	b.n	802c322 <_printf_i+0x15e>
 802c3d4:	2301      	movs	r3, #1
 802c3d6:	4632      	mov	r2, r6
 802c3d8:	4649      	mov	r1, r9
 802c3da:	4640      	mov	r0, r8
 802c3dc:	47d0      	blx	sl
 802c3de:	3001      	adds	r0, #1
 802c3e0:	d09d      	beq.n	802c31e <_printf_i+0x15a>
 802c3e2:	3501      	adds	r5, #1
 802c3e4:	68e3      	ldr	r3, [r4, #12]
 802c3e6:	9903      	ldr	r1, [sp, #12]
 802c3e8:	1a5b      	subs	r3, r3, r1
 802c3ea:	42ab      	cmp	r3, r5
 802c3ec:	dcf2      	bgt.n	802c3d4 <_printf_i+0x210>
 802c3ee:	e7eb      	b.n	802c3c8 <_printf_i+0x204>
 802c3f0:	2500      	movs	r5, #0
 802c3f2:	f104 0619 	add.w	r6, r4, #25
 802c3f6:	e7f5      	b.n	802c3e4 <_printf_i+0x220>
 802c3f8:	0802e4fe 	.word	0x0802e4fe
 802c3fc:	0802e50f 	.word	0x0802e50f

0802c400 <__sflush_r>:
 802c400:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802c404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c408:	0716      	lsls	r6, r2, #28
 802c40a:	4605      	mov	r5, r0
 802c40c:	460c      	mov	r4, r1
 802c40e:	d454      	bmi.n	802c4ba <__sflush_r+0xba>
 802c410:	684b      	ldr	r3, [r1, #4]
 802c412:	2b00      	cmp	r3, #0
 802c414:	dc02      	bgt.n	802c41c <__sflush_r+0x1c>
 802c416:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802c418:	2b00      	cmp	r3, #0
 802c41a:	dd48      	ble.n	802c4ae <__sflush_r+0xae>
 802c41c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802c41e:	2e00      	cmp	r6, #0
 802c420:	d045      	beq.n	802c4ae <__sflush_r+0xae>
 802c422:	2300      	movs	r3, #0
 802c424:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802c428:	682f      	ldr	r7, [r5, #0]
 802c42a:	6a21      	ldr	r1, [r4, #32]
 802c42c:	602b      	str	r3, [r5, #0]
 802c42e:	d030      	beq.n	802c492 <__sflush_r+0x92>
 802c430:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802c432:	89a3      	ldrh	r3, [r4, #12]
 802c434:	0759      	lsls	r1, r3, #29
 802c436:	d505      	bpl.n	802c444 <__sflush_r+0x44>
 802c438:	6863      	ldr	r3, [r4, #4]
 802c43a:	1ad2      	subs	r2, r2, r3
 802c43c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802c43e:	b10b      	cbz	r3, 802c444 <__sflush_r+0x44>
 802c440:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802c442:	1ad2      	subs	r2, r2, r3
 802c444:	2300      	movs	r3, #0
 802c446:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802c448:	6a21      	ldr	r1, [r4, #32]
 802c44a:	4628      	mov	r0, r5
 802c44c:	47b0      	blx	r6
 802c44e:	1c43      	adds	r3, r0, #1
 802c450:	89a3      	ldrh	r3, [r4, #12]
 802c452:	d106      	bne.n	802c462 <__sflush_r+0x62>
 802c454:	6829      	ldr	r1, [r5, #0]
 802c456:	291d      	cmp	r1, #29
 802c458:	d82b      	bhi.n	802c4b2 <__sflush_r+0xb2>
 802c45a:	4a2a      	ldr	r2, [pc, #168]	@ (802c504 <__sflush_r+0x104>)
 802c45c:	40ca      	lsrs	r2, r1
 802c45e:	07d6      	lsls	r6, r2, #31
 802c460:	d527      	bpl.n	802c4b2 <__sflush_r+0xb2>
 802c462:	2200      	movs	r2, #0
 802c464:	6062      	str	r2, [r4, #4]
 802c466:	04d9      	lsls	r1, r3, #19
 802c468:	6922      	ldr	r2, [r4, #16]
 802c46a:	6022      	str	r2, [r4, #0]
 802c46c:	d504      	bpl.n	802c478 <__sflush_r+0x78>
 802c46e:	1c42      	adds	r2, r0, #1
 802c470:	d101      	bne.n	802c476 <__sflush_r+0x76>
 802c472:	682b      	ldr	r3, [r5, #0]
 802c474:	b903      	cbnz	r3, 802c478 <__sflush_r+0x78>
 802c476:	6560      	str	r0, [r4, #84]	@ 0x54
 802c478:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802c47a:	602f      	str	r7, [r5, #0]
 802c47c:	b1b9      	cbz	r1, 802c4ae <__sflush_r+0xae>
 802c47e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802c482:	4299      	cmp	r1, r3
 802c484:	d002      	beq.n	802c48c <__sflush_r+0x8c>
 802c486:	4628      	mov	r0, r5
 802c488:	f7ff fca2 	bl	802bdd0 <_free_r>
 802c48c:	2300      	movs	r3, #0
 802c48e:	6363      	str	r3, [r4, #52]	@ 0x34
 802c490:	e00d      	b.n	802c4ae <__sflush_r+0xae>
 802c492:	2301      	movs	r3, #1
 802c494:	4628      	mov	r0, r5
 802c496:	47b0      	blx	r6
 802c498:	4602      	mov	r2, r0
 802c49a:	1c50      	adds	r0, r2, #1
 802c49c:	d1c9      	bne.n	802c432 <__sflush_r+0x32>
 802c49e:	682b      	ldr	r3, [r5, #0]
 802c4a0:	2b00      	cmp	r3, #0
 802c4a2:	d0c6      	beq.n	802c432 <__sflush_r+0x32>
 802c4a4:	2b1d      	cmp	r3, #29
 802c4a6:	d001      	beq.n	802c4ac <__sflush_r+0xac>
 802c4a8:	2b16      	cmp	r3, #22
 802c4aa:	d11e      	bne.n	802c4ea <__sflush_r+0xea>
 802c4ac:	602f      	str	r7, [r5, #0]
 802c4ae:	2000      	movs	r0, #0
 802c4b0:	e022      	b.n	802c4f8 <__sflush_r+0xf8>
 802c4b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c4b6:	b21b      	sxth	r3, r3
 802c4b8:	e01b      	b.n	802c4f2 <__sflush_r+0xf2>
 802c4ba:	690f      	ldr	r7, [r1, #16]
 802c4bc:	2f00      	cmp	r7, #0
 802c4be:	d0f6      	beq.n	802c4ae <__sflush_r+0xae>
 802c4c0:	0793      	lsls	r3, r2, #30
 802c4c2:	680e      	ldr	r6, [r1, #0]
 802c4c4:	bf08      	it	eq
 802c4c6:	694b      	ldreq	r3, [r1, #20]
 802c4c8:	600f      	str	r7, [r1, #0]
 802c4ca:	bf18      	it	ne
 802c4cc:	2300      	movne	r3, #0
 802c4ce:	eba6 0807 	sub.w	r8, r6, r7
 802c4d2:	608b      	str	r3, [r1, #8]
 802c4d4:	f1b8 0f00 	cmp.w	r8, #0
 802c4d8:	dde9      	ble.n	802c4ae <__sflush_r+0xae>
 802c4da:	6a21      	ldr	r1, [r4, #32]
 802c4dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c4de:	4643      	mov	r3, r8
 802c4e0:	463a      	mov	r2, r7
 802c4e2:	4628      	mov	r0, r5
 802c4e4:	47b0      	blx	r6
 802c4e6:	2800      	cmp	r0, #0
 802c4e8:	dc08      	bgt.n	802c4fc <__sflush_r+0xfc>
 802c4ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c4ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c4f2:	81a3      	strh	r3, [r4, #12]
 802c4f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c4fc:	4407      	add	r7, r0
 802c4fe:	eba8 0800 	sub.w	r8, r8, r0
 802c502:	e7e7      	b.n	802c4d4 <__sflush_r+0xd4>
 802c504:	20400001 	.word	0x20400001

0802c508 <_fflush_r>:
 802c508:	b538      	push	{r3, r4, r5, lr}
 802c50a:	690b      	ldr	r3, [r1, #16]
 802c50c:	4605      	mov	r5, r0
 802c50e:	460c      	mov	r4, r1
 802c510:	b913      	cbnz	r3, 802c518 <_fflush_r+0x10>
 802c512:	2500      	movs	r5, #0
 802c514:	4628      	mov	r0, r5
 802c516:	bd38      	pop	{r3, r4, r5, pc}
 802c518:	b118      	cbz	r0, 802c522 <_fflush_r+0x1a>
 802c51a:	6a03      	ldr	r3, [r0, #32]
 802c51c:	b90b      	cbnz	r3, 802c522 <_fflush_r+0x1a>
 802c51e:	f7ff f991 	bl	802b844 <__sinit>
 802c522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c526:	2b00      	cmp	r3, #0
 802c528:	d0f3      	beq.n	802c512 <_fflush_r+0xa>
 802c52a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802c52c:	07d0      	lsls	r0, r2, #31
 802c52e:	d404      	bmi.n	802c53a <_fflush_r+0x32>
 802c530:	0599      	lsls	r1, r3, #22
 802c532:	d402      	bmi.n	802c53a <_fflush_r+0x32>
 802c534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c536:	f7ff fc3a 	bl	802bdae <__retarget_lock_acquire_recursive>
 802c53a:	4628      	mov	r0, r5
 802c53c:	4621      	mov	r1, r4
 802c53e:	f7ff ff5f 	bl	802c400 <__sflush_r>
 802c542:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c544:	07da      	lsls	r2, r3, #31
 802c546:	4605      	mov	r5, r0
 802c548:	d4e4      	bmi.n	802c514 <_fflush_r+0xc>
 802c54a:	89a3      	ldrh	r3, [r4, #12]
 802c54c:	059b      	lsls	r3, r3, #22
 802c54e:	d4e1      	bmi.n	802c514 <_fflush_r+0xc>
 802c550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c552:	f7ff fc2d 	bl	802bdb0 <__retarget_lock_release_recursive>
 802c556:	e7dd      	b.n	802c514 <_fflush_r+0xc>

0802c558 <__swhatbuf_r>:
 802c558:	b570      	push	{r4, r5, r6, lr}
 802c55a:	460c      	mov	r4, r1
 802c55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c560:	2900      	cmp	r1, #0
 802c562:	b096      	sub	sp, #88	@ 0x58
 802c564:	4615      	mov	r5, r2
 802c566:	461e      	mov	r6, r3
 802c568:	da0d      	bge.n	802c586 <__swhatbuf_r+0x2e>
 802c56a:	89a3      	ldrh	r3, [r4, #12]
 802c56c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802c570:	f04f 0100 	mov.w	r1, #0
 802c574:	bf14      	ite	ne
 802c576:	2340      	movne	r3, #64	@ 0x40
 802c578:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802c57c:	2000      	movs	r0, #0
 802c57e:	6031      	str	r1, [r6, #0]
 802c580:	602b      	str	r3, [r5, #0]
 802c582:	b016      	add	sp, #88	@ 0x58
 802c584:	bd70      	pop	{r4, r5, r6, pc}
 802c586:	466a      	mov	r2, sp
 802c588:	f000 f848 	bl	802c61c <_fstat_r>
 802c58c:	2800      	cmp	r0, #0
 802c58e:	dbec      	blt.n	802c56a <__swhatbuf_r+0x12>
 802c590:	9901      	ldr	r1, [sp, #4]
 802c592:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802c596:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802c59a:	4259      	negs	r1, r3
 802c59c:	4159      	adcs	r1, r3
 802c59e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c5a2:	e7eb      	b.n	802c57c <__swhatbuf_r+0x24>

0802c5a4 <__smakebuf_r>:
 802c5a4:	898b      	ldrh	r3, [r1, #12]
 802c5a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802c5a8:	079d      	lsls	r5, r3, #30
 802c5aa:	4606      	mov	r6, r0
 802c5ac:	460c      	mov	r4, r1
 802c5ae:	d507      	bpl.n	802c5c0 <__smakebuf_r+0x1c>
 802c5b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802c5b4:	6023      	str	r3, [r4, #0]
 802c5b6:	6123      	str	r3, [r4, #16]
 802c5b8:	2301      	movs	r3, #1
 802c5ba:	6163      	str	r3, [r4, #20]
 802c5bc:	b003      	add	sp, #12
 802c5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c5c0:	ab01      	add	r3, sp, #4
 802c5c2:	466a      	mov	r2, sp
 802c5c4:	f7ff ffc8 	bl	802c558 <__swhatbuf_r>
 802c5c8:	9f00      	ldr	r7, [sp, #0]
 802c5ca:	4605      	mov	r5, r0
 802c5cc:	4639      	mov	r1, r7
 802c5ce:	4630      	mov	r0, r6
 802c5d0:	f7ff f820 	bl	802b614 <_malloc_r>
 802c5d4:	b948      	cbnz	r0, 802c5ea <__smakebuf_r+0x46>
 802c5d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c5da:	059a      	lsls	r2, r3, #22
 802c5dc:	d4ee      	bmi.n	802c5bc <__smakebuf_r+0x18>
 802c5de:	f023 0303 	bic.w	r3, r3, #3
 802c5e2:	f043 0302 	orr.w	r3, r3, #2
 802c5e6:	81a3      	strh	r3, [r4, #12]
 802c5e8:	e7e2      	b.n	802c5b0 <__smakebuf_r+0xc>
 802c5ea:	89a3      	ldrh	r3, [r4, #12]
 802c5ec:	6020      	str	r0, [r4, #0]
 802c5ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802c5f2:	81a3      	strh	r3, [r4, #12]
 802c5f4:	9b01      	ldr	r3, [sp, #4]
 802c5f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802c5fa:	b15b      	cbz	r3, 802c614 <__smakebuf_r+0x70>
 802c5fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c600:	4630      	mov	r0, r6
 802c602:	f000 f81d 	bl	802c640 <_isatty_r>
 802c606:	b128      	cbz	r0, 802c614 <__smakebuf_r+0x70>
 802c608:	89a3      	ldrh	r3, [r4, #12]
 802c60a:	f023 0303 	bic.w	r3, r3, #3
 802c60e:	f043 0301 	orr.w	r3, r3, #1
 802c612:	81a3      	strh	r3, [r4, #12]
 802c614:	89a3      	ldrh	r3, [r4, #12]
 802c616:	431d      	orrs	r5, r3
 802c618:	81a5      	strh	r5, [r4, #12]
 802c61a:	e7cf      	b.n	802c5bc <__smakebuf_r+0x18>

0802c61c <_fstat_r>:
 802c61c:	b538      	push	{r3, r4, r5, lr}
 802c61e:	4d07      	ldr	r5, [pc, #28]	@ (802c63c <_fstat_r+0x20>)
 802c620:	2300      	movs	r3, #0
 802c622:	4604      	mov	r4, r0
 802c624:	4608      	mov	r0, r1
 802c626:	4611      	mov	r1, r2
 802c628:	602b      	str	r3, [r5, #0]
 802c62a:	f7fb fee2 	bl	80283f2 <_fstat>
 802c62e:	1c43      	adds	r3, r0, #1
 802c630:	d102      	bne.n	802c638 <_fstat_r+0x1c>
 802c632:	682b      	ldr	r3, [r5, #0]
 802c634:	b103      	cbz	r3, 802c638 <_fstat_r+0x1c>
 802c636:	6023      	str	r3, [r4, #0]
 802c638:	bd38      	pop	{r3, r4, r5, pc}
 802c63a:	bf00      	nop
 802c63c:	200014f4 	.word	0x200014f4

0802c640 <_isatty_r>:
 802c640:	b538      	push	{r3, r4, r5, lr}
 802c642:	4d06      	ldr	r5, [pc, #24]	@ (802c65c <_isatty_r+0x1c>)
 802c644:	2300      	movs	r3, #0
 802c646:	4604      	mov	r4, r0
 802c648:	4608      	mov	r0, r1
 802c64a:	602b      	str	r3, [r5, #0]
 802c64c:	f7fb fee1 	bl	8028412 <_isatty>
 802c650:	1c43      	adds	r3, r0, #1
 802c652:	d102      	bne.n	802c65a <_isatty_r+0x1a>
 802c654:	682b      	ldr	r3, [r5, #0]
 802c656:	b103      	cbz	r3, 802c65a <_isatty_r+0x1a>
 802c658:	6023      	str	r3, [r4, #0]
 802c65a:	bd38      	pop	{r3, r4, r5, pc}
 802c65c:	200014f4 	.word	0x200014f4

0802c660 <_init>:
 802c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c662:	bf00      	nop
 802c664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c666:	bc08      	pop	{r3}
 802c668:	469e      	mov	lr, r3
 802c66a:	4770      	bx	lr

0802c66c <_fini>:
 802c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c66e:	bf00      	nop
 802c670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c672:	bc08      	pop	{r3}
 802c674:	469e      	mov	lr, r3
 802c676:	4770      	bx	lr
