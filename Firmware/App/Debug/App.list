
App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020400  08020400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010868  08020590  08020590  00000590  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000243c  08030df8  08030df8  00010df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08033234  08033234  000140dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08033234  08033234  00013234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803323c  0803323c  000140dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803323c  0803323c  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08033240  08033240  00013240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000dc  20000000  08033244  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000140dc  2**0
                  CONTENTS
 10 .bss          00001608  200000dc  200000dc  000140dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200016e4  200016e4  000140dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000140dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003238d  00000000  00000000  0001410c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007a33  00000000  00000000  00046499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a68  00000000  00000000  0004ded0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c77  00000000  00000000  0004f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d414  00000000  00000000  000785af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8500  00000000  00000000  000a59c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017dec3  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 000013e6  00000000  00000000  0017df06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000070f8  00000000  00000000  0017f2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001863e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020590 <__do_global_dtors_aux>:
 8020590:	b510      	push	{r4, lr}
 8020592:	4c05      	ldr	r4, [pc, #20]	@ (80205a8 <__do_global_dtors_aux+0x18>)
 8020594:	7823      	ldrb	r3, [r4, #0]
 8020596:	b933      	cbnz	r3, 80205a6 <__do_global_dtors_aux+0x16>
 8020598:	4b04      	ldr	r3, [pc, #16]	@ (80205ac <__do_global_dtors_aux+0x1c>)
 802059a:	b113      	cbz	r3, 80205a2 <__do_global_dtors_aux+0x12>
 802059c:	4804      	ldr	r0, [pc, #16]	@ (80205b0 <__do_global_dtors_aux+0x20>)
 802059e:	f3af 8000 	nop.w
 80205a2:	2301      	movs	r3, #1
 80205a4:	7023      	strb	r3, [r4, #0]
 80205a6:	bd10      	pop	{r4, pc}
 80205a8:	200000dc 	.word	0x200000dc
 80205ac:	00000000 	.word	0x00000000
 80205b0:	08030de0 	.word	0x08030de0

080205b4 <frame_dummy>:
 80205b4:	b508      	push	{r3, lr}
 80205b6:	4b03      	ldr	r3, [pc, #12]	@ (80205c4 <frame_dummy+0x10>)
 80205b8:	b11b      	cbz	r3, 80205c2 <frame_dummy+0xe>
 80205ba:	4903      	ldr	r1, [pc, #12]	@ (80205c8 <frame_dummy+0x14>)
 80205bc:	4803      	ldr	r0, [pc, #12]	@ (80205cc <frame_dummy+0x18>)
 80205be:	f3af 8000 	nop.w
 80205c2:	bd08      	pop	{r3, pc}
 80205c4:	00000000 	.word	0x00000000
 80205c8:	200000e0 	.word	0x200000e0
 80205cc:	08030de0 	.word	0x08030de0

080205d0 <memchr>:
 80205d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80205d4:	2a10      	cmp	r2, #16
 80205d6:	db2b      	blt.n	8020630 <memchr+0x60>
 80205d8:	f010 0f07 	tst.w	r0, #7
 80205dc:	d008      	beq.n	80205f0 <memchr+0x20>
 80205de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80205e2:	3a01      	subs	r2, #1
 80205e4:	428b      	cmp	r3, r1
 80205e6:	d02d      	beq.n	8020644 <memchr+0x74>
 80205e8:	f010 0f07 	tst.w	r0, #7
 80205ec:	b342      	cbz	r2, 8020640 <memchr+0x70>
 80205ee:	d1f6      	bne.n	80205de <memchr+0xe>
 80205f0:	b4f0      	push	{r4, r5, r6, r7}
 80205f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80205f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80205fa:	f022 0407 	bic.w	r4, r2, #7
 80205fe:	f07f 0700 	mvns.w	r7, #0
 8020602:	2300      	movs	r3, #0
 8020604:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020608:	3c08      	subs	r4, #8
 802060a:	ea85 0501 	eor.w	r5, r5, r1
 802060e:	ea86 0601 	eor.w	r6, r6, r1
 8020612:	fa85 f547 	uadd8	r5, r5, r7
 8020616:	faa3 f587 	sel	r5, r3, r7
 802061a:	fa86 f647 	uadd8	r6, r6, r7
 802061e:	faa5 f687 	sel	r6, r5, r7
 8020622:	b98e      	cbnz	r6, 8020648 <memchr+0x78>
 8020624:	d1ee      	bne.n	8020604 <memchr+0x34>
 8020626:	bcf0      	pop	{r4, r5, r6, r7}
 8020628:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 802062c:	f002 0207 	and.w	r2, r2, #7
 8020630:	b132      	cbz	r2, 8020640 <memchr+0x70>
 8020632:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020636:	3a01      	subs	r2, #1
 8020638:	ea83 0301 	eor.w	r3, r3, r1
 802063c:	b113      	cbz	r3, 8020644 <memchr+0x74>
 802063e:	d1f8      	bne.n	8020632 <memchr+0x62>
 8020640:	2000      	movs	r0, #0
 8020642:	4770      	bx	lr
 8020644:	3801      	subs	r0, #1
 8020646:	4770      	bx	lr
 8020648:	2d00      	cmp	r5, #0
 802064a:	bf06      	itte	eq
 802064c:	4635      	moveq	r5, r6
 802064e:	3803      	subeq	r0, #3
 8020650:	3807      	subne	r0, #7
 8020652:	f015 0f01 	tst.w	r5, #1
 8020656:	d107      	bne.n	8020668 <memchr+0x98>
 8020658:	3001      	adds	r0, #1
 802065a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 802065e:	bf02      	ittt	eq
 8020660:	3001      	addeq	r0, #1
 8020662:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8020666:	3001      	addeq	r0, #1
 8020668:	bcf0      	pop	{r4, r5, r6, r7}
 802066a:	3801      	subs	r0, #1
 802066c:	4770      	bx	lr
 802066e:	bf00      	nop

08020670 <strlen>:
 8020670:	4603      	mov	r3, r0
 8020672:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020676:	2a00      	cmp	r2, #0
 8020678:	d1fb      	bne.n	8020672 <strlen+0x2>
 802067a:	1a18      	subs	r0, r3, r0
 802067c:	3801      	subs	r0, #1
 802067e:	4770      	bx	lr

08020680 <__aeabi_drsub>:
 8020680:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8020684:	e002      	b.n	802068c <__adddf3>
 8020686:	bf00      	nop

08020688 <__aeabi_dsub>:
 8020688:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0802068c <__adddf3>:
 802068c:	b530      	push	{r4, r5, lr}
 802068e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020692:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020696:	ea94 0f05 	teq	r4, r5
 802069a:	bf08      	it	eq
 802069c:	ea90 0f02 	teqeq	r0, r2
 80206a0:	bf1f      	itttt	ne
 80206a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80206a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80206aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80206ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80206b2:	f000 80e2 	beq.w	802087a <__adddf3+0x1ee>
 80206b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80206ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80206be:	bfb8      	it	lt
 80206c0:	426d      	neglt	r5, r5
 80206c2:	dd0c      	ble.n	80206de <__adddf3+0x52>
 80206c4:	442c      	add	r4, r5
 80206c6:	ea80 0202 	eor.w	r2, r0, r2
 80206ca:	ea81 0303 	eor.w	r3, r1, r3
 80206ce:	ea82 0000 	eor.w	r0, r2, r0
 80206d2:	ea83 0101 	eor.w	r1, r3, r1
 80206d6:	ea80 0202 	eor.w	r2, r0, r2
 80206da:	ea81 0303 	eor.w	r3, r1, r3
 80206de:	2d36      	cmp	r5, #54	@ 0x36
 80206e0:	bf88      	it	hi
 80206e2:	bd30      	pophi	{r4, r5, pc}
 80206e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80206e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80206ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80206f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80206f4:	d002      	beq.n	80206fc <__adddf3+0x70>
 80206f6:	4240      	negs	r0, r0
 80206f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80206fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8020700:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020704:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020708:	d002      	beq.n	8020710 <__adddf3+0x84>
 802070a:	4252      	negs	r2, r2
 802070c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020710:	ea94 0f05 	teq	r4, r5
 8020714:	f000 80a7 	beq.w	8020866 <__adddf3+0x1da>
 8020718:	f1a4 0401 	sub.w	r4, r4, #1
 802071c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020720:	db0d      	blt.n	802073e <__adddf3+0xb2>
 8020722:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020726:	fa22 f205 	lsr.w	r2, r2, r5
 802072a:	1880      	adds	r0, r0, r2
 802072c:	f141 0100 	adc.w	r1, r1, #0
 8020730:	fa03 f20e 	lsl.w	r2, r3, lr
 8020734:	1880      	adds	r0, r0, r2
 8020736:	fa43 f305 	asr.w	r3, r3, r5
 802073a:	4159      	adcs	r1, r3
 802073c:	e00e      	b.n	802075c <__adddf3+0xd0>
 802073e:	f1a5 0520 	sub.w	r5, r5, #32
 8020742:	f10e 0e20 	add.w	lr, lr, #32
 8020746:	2a01      	cmp	r2, #1
 8020748:	fa03 fc0e 	lsl.w	ip, r3, lr
 802074c:	bf28      	it	cs
 802074e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020752:	fa43 f305 	asr.w	r3, r3, r5
 8020756:	18c0      	adds	r0, r0, r3
 8020758:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8020760:	d507      	bpl.n	8020772 <__adddf3+0xe6>
 8020762:	f04f 0e00 	mov.w	lr, #0
 8020766:	f1dc 0c00 	rsbs	ip, ip, #0
 802076a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802076e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020772:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8020776:	d31b      	bcc.n	80207b0 <__adddf3+0x124>
 8020778:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 802077c:	d30c      	bcc.n	8020798 <__adddf3+0x10c>
 802077e:	0849      	lsrs	r1, r1, #1
 8020780:	ea5f 0030 	movs.w	r0, r0, rrx
 8020784:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020788:	f104 0401 	add.w	r4, r4, #1
 802078c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020790:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8020794:	f080 809a 	bcs.w	80208cc <__adddf3+0x240>
 8020798:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 802079c:	bf08      	it	eq
 802079e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80207a2:	f150 0000 	adcs.w	r0, r0, #0
 80207a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80207aa:	ea41 0105 	orr.w	r1, r1, r5
 80207ae:	bd30      	pop	{r4, r5, pc}
 80207b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80207b4:	4140      	adcs	r0, r0
 80207b6:	eb41 0101 	adc.w	r1, r1, r1
 80207ba:	3c01      	subs	r4, #1
 80207bc:	bf28      	it	cs
 80207be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80207c2:	d2e9      	bcs.n	8020798 <__adddf3+0x10c>
 80207c4:	f091 0f00 	teq	r1, #0
 80207c8:	bf04      	itt	eq
 80207ca:	4601      	moveq	r1, r0
 80207cc:	2000      	moveq	r0, #0
 80207ce:	fab1 f381 	clz	r3, r1
 80207d2:	bf08      	it	eq
 80207d4:	3320      	addeq	r3, #32
 80207d6:	f1a3 030b 	sub.w	r3, r3, #11
 80207da:	f1b3 0220 	subs.w	r2, r3, #32
 80207de:	da0c      	bge.n	80207fa <__adddf3+0x16e>
 80207e0:	320c      	adds	r2, #12
 80207e2:	dd08      	ble.n	80207f6 <__adddf3+0x16a>
 80207e4:	f102 0c14 	add.w	ip, r2, #20
 80207e8:	f1c2 020c 	rsb	r2, r2, #12
 80207ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80207f0:	fa21 f102 	lsr.w	r1, r1, r2
 80207f4:	e00c      	b.n	8020810 <__adddf3+0x184>
 80207f6:	f102 0214 	add.w	r2, r2, #20
 80207fa:	bfd8      	it	le
 80207fc:	f1c2 0c20 	rsble	ip, r2, #32
 8020800:	fa01 f102 	lsl.w	r1, r1, r2
 8020804:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020808:	bfdc      	itt	le
 802080a:	ea41 010c 	orrle.w	r1, r1, ip
 802080e:	4090      	lslle	r0, r2
 8020810:	1ae4      	subs	r4, r4, r3
 8020812:	bfa2      	ittt	ge
 8020814:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020818:	4329      	orrge	r1, r5
 802081a:	bd30      	popge	{r4, r5, pc}
 802081c:	ea6f 0404 	mvn.w	r4, r4
 8020820:	3c1f      	subs	r4, #31
 8020822:	da1c      	bge.n	802085e <__adddf3+0x1d2>
 8020824:	340c      	adds	r4, #12
 8020826:	dc0e      	bgt.n	8020846 <__adddf3+0x1ba>
 8020828:	f104 0414 	add.w	r4, r4, #20
 802082c:	f1c4 0220 	rsb	r2, r4, #32
 8020830:	fa20 f004 	lsr.w	r0, r0, r4
 8020834:	fa01 f302 	lsl.w	r3, r1, r2
 8020838:	ea40 0003 	orr.w	r0, r0, r3
 802083c:	fa21 f304 	lsr.w	r3, r1, r4
 8020840:	ea45 0103 	orr.w	r1, r5, r3
 8020844:	bd30      	pop	{r4, r5, pc}
 8020846:	f1c4 040c 	rsb	r4, r4, #12
 802084a:	f1c4 0220 	rsb	r2, r4, #32
 802084e:	fa20 f002 	lsr.w	r0, r0, r2
 8020852:	fa01 f304 	lsl.w	r3, r1, r4
 8020856:	ea40 0003 	orr.w	r0, r0, r3
 802085a:	4629      	mov	r1, r5
 802085c:	bd30      	pop	{r4, r5, pc}
 802085e:	fa21 f004 	lsr.w	r0, r1, r4
 8020862:	4629      	mov	r1, r5
 8020864:	bd30      	pop	{r4, r5, pc}
 8020866:	f094 0f00 	teq	r4, #0
 802086a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 802086e:	bf06      	itte	eq
 8020870:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8020874:	3401      	addeq	r4, #1
 8020876:	3d01      	subne	r5, #1
 8020878:	e74e      	b.n	8020718 <__adddf3+0x8c>
 802087a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802087e:	bf18      	it	ne
 8020880:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020884:	d029      	beq.n	80208da <__adddf3+0x24e>
 8020886:	ea94 0f05 	teq	r4, r5
 802088a:	bf08      	it	eq
 802088c:	ea90 0f02 	teqeq	r0, r2
 8020890:	d005      	beq.n	802089e <__adddf3+0x212>
 8020892:	ea54 0c00 	orrs.w	ip, r4, r0
 8020896:	bf04      	itt	eq
 8020898:	4619      	moveq	r1, r3
 802089a:	4610      	moveq	r0, r2
 802089c:	bd30      	pop	{r4, r5, pc}
 802089e:	ea91 0f03 	teq	r1, r3
 80208a2:	bf1e      	ittt	ne
 80208a4:	2100      	movne	r1, #0
 80208a6:	2000      	movne	r0, #0
 80208a8:	bd30      	popne	{r4, r5, pc}
 80208aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80208ae:	d105      	bne.n	80208bc <__adddf3+0x230>
 80208b0:	0040      	lsls	r0, r0, #1
 80208b2:	4149      	adcs	r1, r1
 80208b4:	bf28      	it	cs
 80208b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80208ba:	bd30      	pop	{r4, r5, pc}
 80208bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80208c0:	bf3c      	itt	cc
 80208c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80208c6:	bd30      	popcc	{r4, r5, pc}
 80208c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80208cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80208d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80208d4:	f04f 0000 	mov.w	r0, #0
 80208d8:	bd30      	pop	{r4, r5, pc}
 80208da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80208de:	bf1a      	itte	ne
 80208e0:	4619      	movne	r1, r3
 80208e2:	4610      	movne	r0, r2
 80208e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80208e8:	bf1c      	itt	ne
 80208ea:	460b      	movne	r3, r1
 80208ec:	4602      	movne	r2, r0
 80208ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80208f2:	bf06      	itte	eq
 80208f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80208f8:	ea91 0f03 	teqeq	r1, r3
 80208fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8020900:	bd30      	pop	{r4, r5, pc}
 8020902:	bf00      	nop

08020904 <__aeabi_ui2d>:
 8020904:	f090 0f00 	teq	r0, #0
 8020908:	bf04      	itt	eq
 802090a:	2100      	moveq	r1, #0
 802090c:	4770      	bxeq	lr
 802090e:	b530      	push	{r4, r5, lr}
 8020910:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020914:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8020918:	f04f 0500 	mov.w	r5, #0
 802091c:	f04f 0100 	mov.w	r1, #0
 8020920:	e750      	b.n	80207c4 <__adddf3+0x138>
 8020922:	bf00      	nop

08020924 <__aeabi_i2d>:
 8020924:	f090 0f00 	teq	r0, #0
 8020928:	bf04      	itt	eq
 802092a:	2100      	moveq	r1, #0
 802092c:	4770      	bxeq	lr
 802092e:	b530      	push	{r4, r5, lr}
 8020930:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020934:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8020938:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 802093c:	bf48      	it	mi
 802093e:	4240      	negmi	r0, r0
 8020940:	f04f 0100 	mov.w	r1, #0
 8020944:	e73e      	b.n	80207c4 <__adddf3+0x138>
 8020946:	bf00      	nop

08020948 <__aeabi_f2d>:
 8020948:	0042      	lsls	r2, r0, #1
 802094a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802094e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020952:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020956:	bf1f      	itttt	ne
 8020958:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 802095c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8020960:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8020964:	4770      	bxne	lr
 8020966:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 802096a:	bf08      	it	eq
 802096c:	4770      	bxeq	lr
 802096e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8020972:	bf04      	itt	eq
 8020974:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8020978:	4770      	bxeq	lr
 802097a:	b530      	push	{r4, r5, lr}
 802097c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8020980:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8020984:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8020988:	e71c      	b.n	80207c4 <__adddf3+0x138>
 802098a:	bf00      	nop

0802098c <__aeabi_ul2d>:
 802098c:	ea50 0201 	orrs.w	r2, r0, r1
 8020990:	bf08      	it	eq
 8020992:	4770      	bxeq	lr
 8020994:	b530      	push	{r4, r5, lr}
 8020996:	f04f 0500 	mov.w	r5, #0
 802099a:	e00a      	b.n	80209b2 <__aeabi_l2d+0x16>

0802099c <__aeabi_l2d>:
 802099c:	ea50 0201 	orrs.w	r2, r0, r1
 80209a0:	bf08      	it	eq
 80209a2:	4770      	bxeq	lr
 80209a4:	b530      	push	{r4, r5, lr}
 80209a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80209aa:	d502      	bpl.n	80209b2 <__aeabi_l2d+0x16>
 80209ac:	4240      	negs	r0, r0
 80209ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80209b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80209b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80209ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80209be:	f43f aed8 	beq.w	8020772 <__adddf3+0xe6>
 80209c2:	f04f 0203 	mov.w	r2, #3
 80209c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80209ca:	bf18      	it	ne
 80209cc:	3203      	addne	r2, #3
 80209ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80209d2:	bf18      	it	ne
 80209d4:	3203      	addne	r2, #3
 80209d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80209da:	f1c2 0320 	rsb	r3, r2, #32
 80209de:	fa00 fc03 	lsl.w	ip, r0, r3
 80209e2:	fa20 f002 	lsr.w	r0, r0, r2
 80209e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80209ea:	ea40 000e 	orr.w	r0, r0, lr
 80209ee:	fa21 f102 	lsr.w	r1, r1, r2
 80209f2:	4414      	add	r4, r2
 80209f4:	e6bd      	b.n	8020772 <__adddf3+0xe6>
 80209f6:	bf00      	nop

080209f8 <__aeabi_dmul>:
 80209f8:	b570      	push	{r4, r5, r6, lr}
 80209fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80209fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8020a02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020a06:	bf1d      	ittte	ne
 8020a08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020a0c:	ea94 0f0c 	teqne	r4, ip
 8020a10:	ea95 0f0c 	teqne	r5, ip
 8020a14:	f000 f8de 	bleq	8020bd4 <__aeabi_dmul+0x1dc>
 8020a18:	442c      	add	r4, r5
 8020a1a:	ea81 0603 	eor.w	r6, r1, r3
 8020a1e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020a22:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020a26:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8020a2a:	bf18      	it	ne
 8020a2c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020a30:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8020a34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8020a38:	d038      	beq.n	8020aac <__aeabi_dmul+0xb4>
 8020a3a:	fba0 ce02 	umull	ip, lr, r0, r2
 8020a3e:	f04f 0500 	mov.w	r5, #0
 8020a42:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020a46:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8020a4a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8020a4e:	f04f 0600 	mov.w	r6, #0
 8020a52:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020a56:	f09c 0f00 	teq	ip, #0
 8020a5a:	bf18      	it	ne
 8020a5c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020a60:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8020a64:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8020a68:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8020a6c:	d204      	bcs.n	8020a78 <__aeabi_dmul+0x80>
 8020a6e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020a72:	416d      	adcs	r5, r5
 8020a74:	eb46 0606 	adc.w	r6, r6, r6
 8020a78:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8020a7c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020a80:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020a84:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020a88:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8020a8c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8020a90:	bf88      	it	hi
 8020a92:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8020a96:	d81e      	bhi.n	8020ad6 <__aeabi_dmul+0xde>
 8020a98:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8020a9c:	bf08      	it	eq
 8020a9e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020aa2:	f150 0000 	adcs.w	r0, r0, #0
 8020aa6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8020aaa:	bd70      	pop	{r4, r5, r6, pc}
 8020aac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8020ab0:	ea46 0101 	orr.w	r1, r6, r1
 8020ab4:	ea40 0002 	orr.w	r0, r0, r2
 8020ab8:	ea81 0103 	eor.w	r1, r1, r3
 8020abc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020ac0:	bfc2      	ittt	gt
 8020ac2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020ac6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020aca:	bd70      	popgt	{r4, r5, r6, pc}
 8020acc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8020ad0:	f04f 0e00 	mov.w	lr, #0
 8020ad4:	3c01      	subs	r4, #1
 8020ad6:	f300 80ab 	bgt.w	8020c30 <__aeabi_dmul+0x238>
 8020ada:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8020ade:	bfde      	ittt	le
 8020ae0:	2000      	movle	r0, #0
 8020ae2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8020ae6:	bd70      	pople	{r4, r5, r6, pc}
 8020ae8:	f1c4 0400 	rsb	r4, r4, #0
 8020aec:	3c20      	subs	r4, #32
 8020aee:	da35      	bge.n	8020b5c <__aeabi_dmul+0x164>
 8020af0:	340c      	adds	r4, #12
 8020af2:	dc1b      	bgt.n	8020b2c <__aeabi_dmul+0x134>
 8020af4:	f104 0414 	add.w	r4, r4, #20
 8020af8:	f1c4 0520 	rsb	r5, r4, #32
 8020afc:	fa00 f305 	lsl.w	r3, r0, r5
 8020b00:	fa20 f004 	lsr.w	r0, r0, r4
 8020b04:	fa01 f205 	lsl.w	r2, r1, r5
 8020b08:	ea40 0002 	orr.w	r0, r0, r2
 8020b0c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8020b10:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8020b14:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020b18:	fa21 f604 	lsr.w	r6, r1, r4
 8020b1c:	eb42 0106 	adc.w	r1, r2, r6
 8020b20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020b24:	bf08      	it	eq
 8020b26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020b2a:	bd70      	pop	{r4, r5, r6, pc}
 8020b2c:	f1c4 040c 	rsb	r4, r4, #12
 8020b30:	f1c4 0520 	rsb	r5, r4, #32
 8020b34:	fa00 f304 	lsl.w	r3, r0, r4
 8020b38:	fa20 f005 	lsr.w	r0, r0, r5
 8020b3c:	fa01 f204 	lsl.w	r2, r1, r4
 8020b40:	ea40 0002 	orr.w	r0, r0, r2
 8020b44:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020b48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020b4c:	f141 0100 	adc.w	r1, r1, #0
 8020b50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020b54:	bf08      	it	eq
 8020b56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020b5a:	bd70      	pop	{r4, r5, r6, pc}
 8020b5c:	f1c4 0520 	rsb	r5, r4, #32
 8020b60:	fa00 f205 	lsl.w	r2, r0, r5
 8020b64:	ea4e 0e02 	orr.w	lr, lr, r2
 8020b68:	fa20 f304 	lsr.w	r3, r0, r4
 8020b6c:	fa01 f205 	lsl.w	r2, r1, r5
 8020b70:	ea43 0302 	orr.w	r3, r3, r2
 8020b74:	fa21 f004 	lsr.w	r0, r1, r4
 8020b78:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020b7c:	fa21 f204 	lsr.w	r2, r1, r4
 8020b80:	ea20 0002 	bic.w	r0, r0, r2
 8020b84:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020b88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020b8c:	bf08      	it	eq
 8020b8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020b92:	bd70      	pop	{r4, r5, r6, pc}
 8020b94:	f094 0f00 	teq	r4, #0
 8020b98:	d10f      	bne.n	8020bba <__aeabi_dmul+0x1c2>
 8020b9a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8020b9e:	0040      	lsls	r0, r0, #1
 8020ba0:	eb41 0101 	adc.w	r1, r1, r1
 8020ba4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8020ba8:	bf08      	it	eq
 8020baa:	3c01      	subeq	r4, #1
 8020bac:	d0f7      	beq.n	8020b9e <__aeabi_dmul+0x1a6>
 8020bae:	ea41 0106 	orr.w	r1, r1, r6
 8020bb2:	f095 0f00 	teq	r5, #0
 8020bb6:	bf18      	it	ne
 8020bb8:	4770      	bxne	lr
 8020bba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8020bbe:	0052      	lsls	r2, r2, #1
 8020bc0:	eb43 0303 	adc.w	r3, r3, r3
 8020bc4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8020bc8:	bf08      	it	eq
 8020bca:	3d01      	subeq	r5, #1
 8020bcc:	d0f7      	beq.n	8020bbe <__aeabi_dmul+0x1c6>
 8020bce:	ea43 0306 	orr.w	r3, r3, r6
 8020bd2:	4770      	bx	lr
 8020bd4:	ea94 0f0c 	teq	r4, ip
 8020bd8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8020bdc:	bf18      	it	ne
 8020bde:	ea95 0f0c 	teqne	r5, ip
 8020be2:	d00c      	beq.n	8020bfe <__aeabi_dmul+0x206>
 8020be4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020be8:	bf18      	it	ne
 8020bea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020bee:	d1d1      	bne.n	8020b94 <__aeabi_dmul+0x19c>
 8020bf0:	ea81 0103 	eor.w	r1, r1, r3
 8020bf4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020bf8:	f04f 0000 	mov.w	r0, #0
 8020bfc:	bd70      	pop	{r4, r5, r6, pc}
 8020bfe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020c02:	bf06      	itte	eq
 8020c04:	4610      	moveq	r0, r2
 8020c06:	4619      	moveq	r1, r3
 8020c08:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020c0c:	d019      	beq.n	8020c42 <__aeabi_dmul+0x24a>
 8020c0e:	ea94 0f0c 	teq	r4, ip
 8020c12:	d102      	bne.n	8020c1a <__aeabi_dmul+0x222>
 8020c14:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020c18:	d113      	bne.n	8020c42 <__aeabi_dmul+0x24a>
 8020c1a:	ea95 0f0c 	teq	r5, ip
 8020c1e:	d105      	bne.n	8020c2c <__aeabi_dmul+0x234>
 8020c20:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020c24:	bf1c      	itt	ne
 8020c26:	4610      	movne	r0, r2
 8020c28:	4619      	movne	r1, r3
 8020c2a:	d10a      	bne.n	8020c42 <__aeabi_dmul+0x24a>
 8020c2c:	ea81 0103 	eor.w	r1, r1, r3
 8020c30:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020c34:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8020c38:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8020c3c:	f04f 0000 	mov.w	r0, #0
 8020c40:	bd70      	pop	{r4, r5, r6, pc}
 8020c42:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8020c46:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8020c4a:	bd70      	pop	{r4, r5, r6, pc}

08020c4c <__aeabi_ddiv>:
 8020c4c:	b570      	push	{r4, r5, r6, lr}
 8020c4e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8020c52:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8020c56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020c5a:	bf1d      	ittte	ne
 8020c5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020c60:	ea94 0f0c 	teqne	r4, ip
 8020c64:	ea95 0f0c 	teqne	r5, ip
 8020c68:	f000 f8a7 	bleq	8020dba <__aeabi_ddiv+0x16e>
 8020c6c:	eba4 0405 	sub.w	r4, r4, r5
 8020c70:	ea81 0e03 	eor.w	lr, r1, r3
 8020c74:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020c78:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8020c7c:	f000 8088 	beq.w	8020d90 <__aeabi_ddiv+0x144>
 8020c80:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020c84:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8020c88:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8020c8c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020c90:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020c94:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020c98:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8020c9c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020ca0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8020ca4:	429d      	cmp	r5, r3
 8020ca6:	bf08      	it	eq
 8020ca8:	4296      	cmpeq	r6, r2
 8020caa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8020cae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8020cb2:	d202      	bcs.n	8020cba <__aeabi_ddiv+0x6e>
 8020cb4:	085b      	lsrs	r3, r3, #1
 8020cb6:	ea4f 0232 	mov.w	r2, r2, rrx
 8020cba:	1ab6      	subs	r6, r6, r2
 8020cbc:	eb65 0503 	sbc.w	r5, r5, r3
 8020cc0:	085b      	lsrs	r3, r3, #1
 8020cc2:	ea4f 0232 	mov.w	r2, r2, rrx
 8020cc6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8020cca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8020cce:	ebb6 0e02 	subs.w	lr, r6, r2
 8020cd2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020cd6:	bf22      	ittt	cs
 8020cd8:	1ab6      	subcs	r6, r6, r2
 8020cda:	4675      	movcs	r5, lr
 8020cdc:	ea40 000c 	orrcs.w	r0, r0, ip
 8020ce0:	085b      	lsrs	r3, r3, #1
 8020ce2:	ea4f 0232 	mov.w	r2, r2, rrx
 8020ce6:	ebb6 0e02 	subs.w	lr, r6, r2
 8020cea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020cee:	bf22      	ittt	cs
 8020cf0:	1ab6      	subcs	r6, r6, r2
 8020cf2:	4675      	movcs	r5, lr
 8020cf4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8020cf8:	085b      	lsrs	r3, r3, #1
 8020cfa:	ea4f 0232 	mov.w	r2, r2, rrx
 8020cfe:	ebb6 0e02 	subs.w	lr, r6, r2
 8020d02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020d06:	bf22      	ittt	cs
 8020d08:	1ab6      	subcs	r6, r6, r2
 8020d0a:	4675      	movcs	r5, lr
 8020d0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020d10:	085b      	lsrs	r3, r3, #1
 8020d12:	ea4f 0232 	mov.w	r2, r2, rrx
 8020d16:	ebb6 0e02 	subs.w	lr, r6, r2
 8020d1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020d1e:	bf22      	ittt	cs
 8020d20:	1ab6      	subcs	r6, r6, r2
 8020d22:	4675      	movcs	r5, lr
 8020d24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020d28:	ea55 0e06 	orrs.w	lr, r5, r6
 8020d2c:	d018      	beq.n	8020d60 <__aeabi_ddiv+0x114>
 8020d2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020d32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020d36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8020d3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8020d3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020d42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020d46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8020d4a:	d1c0      	bne.n	8020cce <__aeabi_ddiv+0x82>
 8020d4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8020d50:	d10b      	bne.n	8020d6a <__aeabi_ddiv+0x11e>
 8020d52:	ea41 0100 	orr.w	r1, r1, r0
 8020d56:	f04f 0000 	mov.w	r0, #0
 8020d5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8020d5e:	e7b6      	b.n	8020cce <__aeabi_ddiv+0x82>
 8020d60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8020d64:	bf04      	itt	eq
 8020d66:	4301      	orreq	r1, r0
 8020d68:	2000      	moveq	r0, #0
 8020d6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8020d6e:	bf88      	it	hi
 8020d70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8020d74:	f63f aeaf 	bhi.w	8020ad6 <__aeabi_dmul+0xde>
 8020d78:	ebb5 0c03 	subs.w	ip, r5, r3
 8020d7c:	bf04      	itt	eq
 8020d7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020d82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020d86:	f150 0000 	adcs.w	r0, r0, #0
 8020d8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8020d8e:	bd70      	pop	{r4, r5, r6, pc}
 8020d90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8020d94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020d98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8020d9c:	bfc2      	ittt	gt
 8020d9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020da2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020da6:	bd70      	popgt	{r4, r5, r6, pc}
 8020da8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8020dac:	f04f 0e00 	mov.w	lr, #0
 8020db0:	3c01      	subs	r4, #1
 8020db2:	e690      	b.n	8020ad6 <__aeabi_dmul+0xde>
 8020db4:	ea45 0e06 	orr.w	lr, r5, r6
 8020db8:	e68d      	b.n	8020ad6 <__aeabi_dmul+0xde>
 8020dba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8020dbe:	ea94 0f0c 	teq	r4, ip
 8020dc2:	bf08      	it	eq
 8020dc4:	ea95 0f0c 	teqeq	r5, ip
 8020dc8:	f43f af3b 	beq.w	8020c42 <__aeabi_dmul+0x24a>
 8020dcc:	ea94 0f0c 	teq	r4, ip
 8020dd0:	d10a      	bne.n	8020de8 <__aeabi_ddiv+0x19c>
 8020dd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020dd6:	f47f af34 	bne.w	8020c42 <__aeabi_dmul+0x24a>
 8020dda:	ea95 0f0c 	teq	r5, ip
 8020dde:	f47f af25 	bne.w	8020c2c <__aeabi_dmul+0x234>
 8020de2:	4610      	mov	r0, r2
 8020de4:	4619      	mov	r1, r3
 8020de6:	e72c      	b.n	8020c42 <__aeabi_dmul+0x24a>
 8020de8:	ea95 0f0c 	teq	r5, ip
 8020dec:	d106      	bne.n	8020dfc <__aeabi_ddiv+0x1b0>
 8020dee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020df2:	f43f aefd 	beq.w	8020bf0 <__aeabi_dmul+0x1f8>
 8020df6:	4610      	mov	r0, r2
 8020df8:	4619      	mov	r1, r3
 8020dfa:	e722      	b.n	8020c42 <__aeabi_dmul+0x24a>
 8020dfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020e00:	bf18      	it	ne
 8020e02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020e06:	f47f aec5 	bne.w	8020b94 <__aeabi_dmul+0x19c>
 8020e0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8020e0e:	f47f af0d 	bne.w	8020c2c <__aeabi_dmul+0x234>
 8020e12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020e16:	f47f aeeb 	bne.w	8020bf0 <__aeabi_dmul+0x1f8>
 8020e1a:	e712      	b.n	8020c42 <__aeabi_dmul+0x24a>

08020e1c <__gedf2>:
 8020e1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8020e20:	e006      	b.n	8020e30 <__cmpdf2+0x4>
 8020e22:	bf00      	nop

08020e24 <__ledf2>:
 8020e24:	f04f 0c01 	mov.w	ip, #1
 8020e28:	e002      	b.n	8020e30 <__cmpdf2+0x4>
 8020e2a:	bf00      	nop

08020e2c <__cmpdf2>:
 8020e2c:	f04f 0c01 	mov.w	ip, #1
 8020e30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020e34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020e38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020e3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020e40:	bf18      	it	ne
 8020e42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020e46:	d01b      	beq.n	8020e80 <__cmpdf2+0x54>
 8020e48:	b001      	add	sp, #4
 8020e4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8020e4e:	bf0c      	ite	eq
 8020e50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020e54:	ea91 0f03 	teqne	r1, r3
 8020e58:	bf02      	ittt	eq
 8020e5a:	ea90 0f02 	teqeq	r0, r2
 8020e5e:	2000      	moveq	r0, #0
 8020e60:	4770      	bxeq	lr
 8020e62:	f110 0f00 	cmn.w	r0, #0
 8020e66:	ea91 0f03 	teq	r1, r3
 8020e6a:	bf58      	it	pl
 8020e6c:	4299      	cmppl	r1, r3
 8020e6e:	bf08      	it	eq
 8020e70:	4290      	cmpeq	r0, r2
 8020e72:	bf2c      	ite	cs
 8020e74:	17d8      	asrcs	r0, r3, #31
 8020e76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8020e7a:	f040 0001 	orr.w	r0, r0, #1
 8020e7e:	4770      	bx	lr
 8020e80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020e84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020e88:	d102      	bne.n	8020e90 <__cmpdf2+0x64>
 8020e8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020e8e:	d107      	bne.n	8020ea0 <__cmpdf2+0x74>
 8020e90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020e94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020e98:	d1d6      	bne.n	8020e48 <__cmpdf2+0x1c>
 8020e9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020e9e:	d0d3      	beq.n	8020e48 <__cmpdf2+0x1c>
 8020ea0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020ea4:	4770      	bx	lr
 8020ea6:	bf00      	nop

08020ea8 <__aeabi_cdrcmple>:
 8020ea8:	4684      	mov	ip, r0
 8020eaa:	4610      	mov	r0, r2
 8020eac:	4662      	mov	r2, ip
 8020eae:	468c      	mov	ip, r1
 8020eb0:	4619      	mov	r1, r3
 8020eb2:	4663      	mov	r3, ip
 8020eb4:	e000      	b.n	8020eb8 <__aeabi_cdcmpeq>
 8020eb6:	bf00      	nop

08020eb8 <__aeabi_cdcmpeq>:
 8020eb8:	b501      	push	{r0, lr}
 8020eba:	f7ff ffb7 	bl	8020e2c <__cmpdf2>
 8020ebe:	2800      	cmp	r0, #0
 8020ec0:	bf48      	it	mi
 8020ec2:	f110 0f00 	cmnmi.w	r0, #0
 8020ec6:	bd01      	pop	{r0, pc}

08020ec8 <__aeabi_dcmpeq>:
 8020ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020ecc:	f7ff fff4 	bl	8020eb8 <__aeabi_cdcmpeq>
 8020ed0:	bf0c      	ite	eq
 8020ed2:	2001      	moveq	r0, #1
 8020ed4:	2000      	movne	r0, #0
 8020ed6:	f85d fb08 	ldr.w	pc, [sp], #8
 8020eda:	bf00      	nop

08020edc <__aeabi_dcmplt>:
 8020edc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020ee0:	f7ff ffea 	bl	8020eb8 <__aeabi_cdcmpeq>
 8020ee4:	bf34      	ite	cc
 8020ee6:	2001      	movcc	r0, #1
 8020ee8:	2000      	movcs	r0, #0
 8020eea:	f85d fb08 	ldr.w	pc, [sp], #8
 8020eee:	bf00      	nop

08020ef0 <__aeabi_dcmple>:
 8020ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020ef4:	f7ff ffe0 	bl	8020eb8 <__aeabi_cdcmpeq>
 8020ef8:	bf94      	ite	ls
 8020efa:	2001      	movls	r0, #1
 8020efc:	2000      	movhi	r0, #0
 8020efe:	f85d fb08 	ldr.w	pc, [sp], #8
 8020f02:	bf00      	nop

08020f04 <__aeabi_dcmpge>:
 8020f04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020f08:	f7ff ffce 	bl	8020ea8 <__aeabi_cdrcmple>
 8020f0c:	bf94      	ite	ls
 8020f0e:	2001      	movls	r0, #1
 8020f10:	2000      	movhi	r0, #0
 8020f12:	f85d fb08 	ldr.w	pc, [sp], #8
 8020f16:	bf00      	nop

08020f18 <__aeabi_dcmpgt>:
 8020f18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020f1c:	f7ff ffc4 	bl	8020ea8 <__aeabi_cdrcmple>
 8020f20:	bf34      	ite	cc
 8020f22:	2001      	movcc	r0, #1
 8020f24:	2000      	movcs	r0, #0
 8020f26:	f85d fb08 	ldr.w	pc, [sp], #8
 8020f2a:	bf00      	nop

08020f2c <__aeabi_ldivmod>:
 8020f2c:	b97b      	cbnz	r3, 8020f4e <__aeabi_ldivmod+0x22>
 8020f2e:	b972      	cbnz	r2, 8020f4e <__aeabi_ldivmod+0x22>
 8020f30:	2900      	cmp	r1, #0
 8020f32:	bfbe      	ittt	lt
 8020f34:	2000      	movlt	r0, #0
 8020f36:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8020f3a:	e006      	blt.n	8020f4a <__aeabi_ldivmod+0x1e>
 8020f3c:	bf08      	it	eq
 8020f3e:	2800      	cmpeq	r0, #0
 8020f40:	bf1c      	itt	ne
 8020f42:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8020f46:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8020f4a:	f000 ba09 	b.w	8021360 <__aeabi_idiv0>
 8020f4e:	f1ad 0c08 	sub.w	ip, sp, #8
 8020f52:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020f56:	2900      	cmp	r1, #0
 8020f58:	db09      	blt.n	8020f6e <__aeabi_ldivmod+0x42>
 8020f5a:	2b00      	cmp	r3, #0
 8020f5c:	db1a      	blt.n	8020f94 <__aeabi_ldivmod+0x68>
 8020f5e:	f000 f883 	bl	8021068 <__udivmoddi4>
 8020f62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020f6a:	b004      	add	sp, #16
 8020f6c:	4770      	bx	lr
 8020f6e:	4240      	negs	r0, r0
 8020f70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020f74:	2b00      	cmp	r3, #0
 8020f76:	db1b      	blt.n	8020fb0 <__aeabi_ldivmod+0x84>
 8020f78:	f000 f876 	bl	8021068 <__udivmoddi4>
 8020f7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020f80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020f84:	b004      	add	sp, #16
 8020f86:	4240      	negs	r0, r0
 8020f88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020f8c:	4252      	negs	r2, r2
 8020f8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020f92:	4770      	bx	lr
 8020f94:	4252      	negs	r2, r2
 8020f96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020f9a:	f000 f865 	bl	8021068 <__udivmoddi4>
 8020f9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020fa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020fa6:	b004      	add	sp, #16
 8020fa8:	4240      	negs	r0, r0
 8020faa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020fae:	4770      	bx	lr
 8020fb0:	4252      	negs	r2, r2
 8020fb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020fb6:	f000 f857 	bl	8021068 <__udivmoddi4>
 8020fba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020fbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020fc2:	b004      	add	sp, #16
 8020fc4:	4252      	negs	r2, r2
 8020fc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020fca:	4770      	bx	lr

08020fcc <__aeabi_uldivmod>:
 8020fcc:	b953      	cbnz	r3, 8020fe4 <__aeabi_uldivmod+0x18>
 8020fce:	b94a      	cbnz	r2, 8020fe4 <__aeabi_uldivmod+0x18>
 8020fd0:	2900      	cmp	r1, #0
 8020fd2:	bf08      	it	eq
 8020fd4:	2800      	cmpeq	r0, #0
 8020fd6:	bf1c      	itt	ne
 8020fd8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8020fdc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8020fe0:	f000 b9be 	b.w	8021360 <__aeabi_idiv0>
 8020fe4:	f1ad 0c08 	sub.w	ip, sp, #8
 8020fe8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020fec:	f000 f83c 	bl	8021068 <__udivmoddi4>
 8020ff0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020ff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020ff8:	b004      	add	sp, #16
 8020ffa:	4770      	bx	lr

08020ffc <__aeabi_d2lz>:
 8020ffc:	b538      	push	{r3, r4, r5, lr}
 8020ffe:	2200      	movs	r2, #0
 8021000:	2300      	movs	r3, #0
 8021002:	4604      	mov	r4, r0
 8021004:	460d      	mov	r5, r1
 8021006:	f7ff ff69 	bl	8020edc <__aeabi_dcmplt>
 802100a:	b928      	cbnz	r0, 8021018 <__aeabi_d2lz+0x1c>
 802100c:	4620      	mov	r0, r4
 802100e:	4629      	mov	r1, r5
 8021010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021014:	f000 b80a 	b.w	802102c <__aeabi_d2ulz>
 8021018:	4620      	mov	r0, r4
 802101a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 802101e:	f000 f805 	bl	802102c <__aeabi_d2ulz>
 8021022:	4240      	negs	r0, r0
 8021024:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8021028:	bd38      	pop	{r3, r4, r5, pc}
 802102a:	bf00      	nop

0802102c <__aeabi_d2ulz>:
 802102c:	b5d0      	push	{r4, r6, r7, lr}
 802102e:	4b0c      	ldr	r3, [pc, #48]	@ (8021060 <__aeabi_d2ulz+0x34>)
 8021030:	2200      	movs	r2, #0
 8021032:	4606      	mov	r6, r0
 8021034:	460f      	mov	r7, r1
 8021036:	f7ff fcdf 	bl	80209f8 <__aeabi_dmul>
 802103a:	f000 f993 	bl	8021364 <__aeabi_d2uiz>
 802103e:	4604      	mov	r4, r0
 8021040:	f7ff fc60 	bl	8020904 <__aeabi_ui2d>
 8021044:	4b07      	ldr	r3, [pc, #28]	@ (8021064 <__aeabi_d2ulz+0x38>)
 8021046:	2200      	movs	r2, #0
 8021048:	f7ff fcd6 	bl	80209f8 <__aeabi_dmul>
 802104c:	4602      	mov	r2, r0
 802104e:	460b      	mov	r3, r1
 8021050:	4630      	mov	r0, r6
 8021052:	4639      	mov	r1, r7
 8021054:	f7ff fb18 	bl	8020688 <__aeabi_dsub>
 8021058:	f000 f984 	bl	8021364 <__aeabi_d2uiz>
 802105c:	4621      	mov	r1, r4
 802105e:	bdd0      	pop	{r4, r6, r7, pc}
 8021060:	3df00000 	.word	0x3df00000
 8021064:	41f00000 	.word	0x41f00000

08021068 <__udivmoddi4>:
 8021068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802106c:	9d08      	ldr	r5, [sp, #32]
 802106e:	468e      	mov	lr, r1
 8021070:	4604      	mov	r4, r0
 8021072:	4688      	mov	r8, r1
 8021074:	2b00      	cmp	r3, #0
 8021076:	d14a      	bne.n	802110e <__udivmoddi4+0xa6>
 8021078:	428a      	cmp	r2, r1
 802107a:	4617      	mov	r7, r2
 802107c:	d962      	bls.n	8021144 <__udivmoddi4+0xdc>
 802107e:	fab2 f682 	clz	r6, r2
 8021082:	b14e      	cbz	r6, 8021098 <__udivmoddi4+0x30>
 8021084:	f1c6 0320 	rsb	r3, r6, #32
 8021088:	fa01 f806 	lsl.w	r8, r1, r6
 802108c:	fa20 f303 	lsr.w	r3, r0, r3
 8021090:	40b7      	lsls	r7, r6
 8021092:	ea43 0808 	orr.w	r8, r3, r8
 8021096:	40b4      	lsls	r4, r6
 8021098:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 802109c:	fa1f fc87 	uxth.w	ip, r7
 80210a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80210a4:	0c23      	lsrs	r3, r4, #16
 80210a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80210aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80210ae:	fb01 f20c 	mul.w	r2, r1, ip
 80210b2:	429a      	cmp	r2, r3
 80210b4:	d909      	bls.n	80210ca <__udivmoddi4+0x62>
 80210b6:	18fb      	adds	r3, r7, r3
 80210b8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80210bc:	f080 80ea 	bcs.w	8021294 <__udivmoddi4+0x22c>
 80210c0:	429a      	cmp	r2, r3
 80210c2:	f240 80e7 	bls.w	8021294 <__udivmoddi4+0x22c>
 80210c6:	3902      	subs	r1, #2
 80210c8:	443b      	add	r3, r7
 80210ca:	1a9a      	subs	r2, r3, r2
 80210cc:	b2a3      	uxth	r3, r4
 80210ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80210d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80210d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80210da:	fb00 fc0c 	mul.w	ip, r0, ip
 80210de:	459c      	cmp	ip, r3
 80210e0:	d909      	bls.n	80210f6 <__udivmoddi4+0x8e>
 80210e2:	18fb      	adds	r3, r7, r3
 80210e4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80210e8:	f080 80d6 	bcs.w	8021298 <__udivmoddi4+0x230>
 80210ec:	459c      	cmp	ip, r3
 80210ee:	f240 80d3 	bls.w	8021298 <__udivmoddi4+0x230>
 80210f2:	443b      	add	r3, r7
 80210f4:	3802      	subs	r0, #2
 80210f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80210fa:	eba3 030c 	sub.w	r3, r3, ip
 80210fe:	2100      	movs	r1, #0
 8021100:	b11d      	cbz	r5, 802110a <__udivmoddi4+0xa2>
 8021102:	40f3      	lsrs	r3, r6
 8021104:	2200      	movs	r2, #0
 8021106:	e9c5 3200 	strd	r3, r2, [r5]
 802110a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802110e:	428b      	cmp	r3, r1
 8021110:	d905      	bls.n	802111e <__udivmoddi4+0xb6>
 8021112:	b10d      	cbz	r5, 8021118 <__udivmoddi4+0xb0>
 8021114:	e9c5 0100 	strd	r0, r1, [r5]
 8021118:	2100      	movs	r1, #0
 802111a:	4608      	mov	r0, r1
 802111c:	e7f5      	b.n	802110a <__udivmoddi4+0xa2>
 802111e:	fab3 f183 	clz	r1, r3
 8021122:	2900      	cmp	r1, #0
 8021124:	d146      	bne.n	80211b4 <__udivmoddi4+0x14c>
 8021126:	4573      	cmp	r3, lr
 8021128:	d302      	bcc.n	8021130 <__udivmoddi4+0xc8>
 802112a:	4282      	cmp	r2, r0
 802112c:	f200 8105 	bhi.w	802133a <__udivmoddi4+0x2d2>
 8021130:	1a84      	subs	r4, r0, r2
 8021132:	eb6e 0203 	sbc.w	r2, lr, r3
 8021136:	2001      	movs	r0, #1
 8021138:	4690      	mov	r8, r2
 802113a:	2d00      	cmp	r5, #0
 802113c:	d0e5      	beq.n	802110a <__udivmoddi4+0xa2>
 802113e:	e9c5 4800 	strd	r4, r8, [r5]
 8021142:	e7e2      	b.n	802110a <__udivmoddi4+0xa2>
 8021144:	2a00      	cmp	r2, #0
 8021146:	f000 8090 	beq.w	802126a <__udivmoddi4+0x202>
 802114a:	fab2 f682 	clz	r6, r2
 802114e:	2e00      	cmp	r6, #0
 8021150:	f040 80a4 	bne.w	802129c <__udivmoddi4+0x234>
 8021154:	1a8a      	subs	r2, r1, r2
 8021156:	0c03      	lsrs	r3, r0, #16
 8021158:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 802115c:	b280      	uxth	r0, r0
 802115e:	b2bc      	uxth	r4, r7
 8021160:	2101      	movs	r1, #1
 8021162:	fbb2 fcfe 	udiv	ip, r2, lr
 8021166:	fb0e 221c 	mls	r2, lr, ip, r2
 802116a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802116e:	fb04 f20c 	mul.w	r2, r4, ip
 8021172:	429a      	cmp	r2, r3
 8021174:	d907      	bls.n	8021186 <__udivmoddi4+0x11e>
 8021176:	18fb      	adds	r3, r7, r3
 8021178:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 802117c:	d202      	bcs.n	8021184 <__udivmoddi4+0x11c>
 802117e:	429a      	cmp	r2, r3
 8021180:	f200 80e0 	bhi.w	8021344 <__udivmoddi4+0x2dc>
 8021184:	46c4      	mov	ip, r8
 8021186:	1a9b      	subs	r3, r3, r2
 8021188:	fbb3 f2fe 	udiv	r2, r3, lr
 802118c:	fb0e 3312 	mls	r3, lr, r2, r3
 8021190:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8021194:	fb02 f404 	mul.w	r4, r2, r4
 8021198:	429c      	cmp	r4, r3
 802119a:	d907      	bls.n	80211ac <__udivmoddi4+0x144>
 802119c:	18fb      	adds	r3, r7, r3
 802119e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80211a2:	d202      	bcs.n	80211aa <__udivmoddi4+0x142>
 80211a4:	429c      	cmp	r4, r3
 80211a6:	f200 80ca 	bhi.w	802133e <__udivmoddi4+0x2d6>
 80211aa:	4602      	mov	r2, r0
 80211ac:	1b1b      	subs	r3, r3, r4
 80211ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80211b2:	e7a5      	b.n	8021100 <__udivmoddi4+0x98>
 80211b4:	f1c1 0620 	rsb	r6, r1, #32
 80211b8:	408b      	lsls	r3, r1
 80211ba:	fa22 f706 	lsr.w	r7, r2, r6
 80211be:	431f      	orrs	r7, r3
 80211c0:	fa0e f401 	lsl.w	r4, lr, r1
 80211c4:	fa20 f306 	lsr.w	r3, r0, r6
 80211c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80211cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80211d0:	4323      	orrs	r3, r4
 80211d2:	fa00 f801 	lsl.w	r8, r0, r1
 80211d6:	fa1f fc87 	uxth.w	ip, r7
 80211da:	fbbe f0f9 	udiv	r0, lr, r9
 80211de:	0c1c      	lsrs	r4, r3, #16
 80211e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80211e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80211e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80211ec:	45a6      	cmp	lr, r4
 80211ee:	fa02 f201 	lsl.w	r2, r2, r1
 80211f2:	d909      	bls.n	8021208 <__udivmoddi4+0x1a0>
 80211f4:	193c      	adds	r4, r7, r4
 80211f6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80211fa:	f080 809c 	bcs.w	8021336 <__udivmoddi4+0x2ce>
 80211fe:	45a6      	cmp	lr, r4
 8021200:	f240 8099 	bls.w	8021336 <__udivmoddi4+0x2ce>
 8021204:	3802      	subs	r0, #2
 8021206:	443c      	add	r4, r7
 8021208:	eba4 040e 	sub.w	r4, r4, lr
 802120c:	fa1f fe83 	uxth.w	lr, r3
 8021210:	fbb4 f3f9 	udiv	r3, r4, r9
 8021214:	fb09 4413 	mls	r4, r9, r3, r4
 8021218:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 802121c:	fb03 fc0c 	mul.w	ip, r3, ip
 8021220:	45a4      	cmp	ip, r4
 8021222:	d908      	bls.n	8021236 <__udivmoddi4+0x1ce>
 8021224:	193c      	adds	r4, r7, r4
 8021226:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 802122a:	f080 8082 	bcs.w	8021332 <__udivmoddi4+0x2ca>
 802122e:	45a4      	cmp	ip, r4
 8021230:	d97f      	bls.n	8021332 <__udivmoddi4+0x2ca>
 8021232:	3b02      	subs	r3, #2
 8021234:	443c      	add	r4, r7
 8021236:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 802123a:	eba4 040c 	sub.w	r4, r4, ip
 802123e:	fba0 ec02 	umull	lr, ip, r0, r2
 8021242:	4564      	cmp	r4, ip
 8021244:	4673      	mov	r3, lr
 8021246:	46e1      	mov	r9, ip
 8021248:	d362      	bcc.n	8021310 <__udivmoddi4+0x2a8>
 802124a:	d05f      	beq.n	802130c <__udivmoddi4+0x2a4>
 802124c:	b15d      	cbz	r5, 8021266 <__udivmoddi4+0x1fe>
 802124e:	ebb8 0203 	subs.w	r2, r8, r3
 8021252:	eb64 0409 	sbc.w	r4, r4, r9
 8021256:	fa04 f606 	lsl.w	r6, r4, r6
 802125a:	fa22 f301 	lsr.w	r3, r2, r1
 802125e:	431e      	orrs	r6, r3
 8021260:	40cc      	lsrs	r4, r1
 8021262:	e9c5 6400 	strd	r6, r4, [r5]
 8021266:	2100      	movs	r1, #0
 8021268:	e74f      	b.n	802110a <__udivmoddi4+0xa2>
 802126a:	fbb1 fcf2 	udiv	ip, r1, r2
 802126e:	0c01      	lsrs	r1, r0, #16
 8021270:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8021274:	b280      	uxth	r0, r0
 8021276:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 802127a:	463b      	mov	r3, r7
 802127c:	4638      	mov	r0, r7
 802127e:	463c      	mov	r4, r7
 8021280:	46b8      	mov	r8, r7
 8021282:	46be      	mov	lr, r7
 8021284:	2620      	movs	r6, #32
 8021286:	fbb1 f1f7 	udiv	r1, r1, r7
 802128a:	eba2 0208 	sub.w	r2, r2, r8
 802128e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8021292:	e766      	b.n	8021162 <__udivmoddi4+0xfa>
 8021294:	4601      	mov	r1, r0
 8021296:	e718      	b.n	80210ca <__udivmoddi4+0x62>
 8021298:	4610      	mov	r0, r2
 802129a:	e72c      	b.n	80210f6 <__udivmoddi4+0x8e>
 802129c:	f1c6 0220 	rsb	r2, r6, #32
 80212a0:	fa2e f302 	lsr.w	r3, lr, r2
 80212a4:	40b7      	lsls	r7, r6
 80212a6:	40b1      	lsls	r1, r6
 80212a8:	fa20 f202 	lsr.w	r2, r0, r2
 80212ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80212b0:	430a      	orrs	r2, r1
 80212b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80212b6:	b2bc      	uxth	r4, r7
 80212b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80212bc:	0c11      	lsrs	r1, r2, #16
 80212be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80212c2:	fb08 f904 	mul.w	r9, r8, r4
 80212c6:	40b0      	lsls	r0, r6
 80212c8:	4589      	cmp	r9, r1
 80212ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80212ce:	b280      	uxth	r0, r0
 80212d0:	d93e      	bls.n	8021350 <__udivmoddi4+0x2e8>
 80212d2:	1879      	adds	r1, r7, r1
 80212d4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80212d8:	d201      	bcs.n	80212de <__udivmoddi4+0x276>
 80212da:	4589      	cmp	r9, r1
 80212dc:	d81f      	bhi.n	802131e <__udivmoddi4+0x2b6>
 80212de:	eba1 0109 	sub.w	r1, r1, r9
 80212e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80212e6:	fb09 f804 	mul.w	r8, r9, r4
 80212ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80212ee:	b292      	uxth	r2, r2
 80212f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80212f4:	4542      	cmp	r2, r8
 80212f6:	d229      	bcs.n	802134c <__udivmoddi4+0x2e4>
 80212f8:	18ba      	adds	r2, r7, r2
 80212fa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80212fe:	d2c4      	bcs.n	802128a <__udivmoddi4+0x222>
 8021300:	4542      	cmp	r2, r8
 8021302:	d2c2      	bcs.n	802128a <__udivmoddi4+0x222>
 8021304:	f1a9 0102 	sub.w	r1, r9, #2
 8021308:	443a      	add	r2, r7
 802130a:	e7be      	b.n	802128a <__udivmoddi4+0x222>
 802130c:	45f0      	cmp	r8, lr
 802130e:	d29d      	bcs.n	802124c <__udivmoddi4+0x1e4>
 8021310:	ebbe 0302 	subs.w	r3, lr, r2
 8021314:	eb6c 0c07 	sbc.w	ip, ip, r7
 8021318:	3801      	subs	r0, #1
 802131a:	46e1      	mov	r9, ip
 802131c:	e796      	b.n	802124c <__udivmoddi4+0x1e4>
 802131e:	eba7 0909 	sub.w	r9, r7, r9
 8021322:	4449      	add	r1, r9
 8021324:	f1a8 0c02 	sub.w	ip, r8, #2
 8021328:	fbb1 f9fe 	udiv	r9, r1, lr
 802132c:	fb09 f804 	mul.w	r8, r9, r4
 8021330:	e7db      	b.n	80212ea <__udivmoddi4+0x282>
 8021332:	4673      	mov	r3, lr
 8021334:	e77f      	b.n	8021236 <__udivmoddi4+0x1ce>
 8021336:	4650      	mov	r0, sl
 8021338:	e766      	b.n	8021208 <__udivmoddi4+0x1a0>
 802133a:	4608      	mov	r0, r1
 802133c:	e6fd      	b.n	802113a <__udivmoddi4+0xd2>
 802133e:	443b      	add	r3, r7
 8021340:	3a02      	subs	r2, #2
 8021342:	e733      	b.n	80211ac <__udivmoddi4+0x144>
 8021344:	f1ac 0c02 	sub.w	ip, ip, #2
 8021348:	443b      	add	r3, r7
 802134a:	e71c      	b.n	8021186 <__udivmoddi4+0x11e>
 802134c:	4649      	mov	r1, r9
 802134e:	e79c      	b.n	802128a <__udivmoddi4+0x222>
 8021350:	eba1 0109 	sub.w	r1, r1, r9
 8021354:	46c4      	mov	ip, r8
 8021356:	fbb1 f9fe 	udiv	r9, r1, lr
 802135a:	fb09 f804 	mul.w	r8, r9, r4
 802135e:	e7c4      	b.n	80212ea <__udivmoddi4+0x282>

08021360 <__aeabi_idiv0>:
 8021360:	4770      	bx	lr
 8021362:	bf00      	nop

08021364 <__aeabi_d2uiz>:
 8021364:	004a      	lsls	r2, r1, #1
 8021366:	d211      	bcs.n	802138c <__aeabi_d2uiz+0x28>
 8021368:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 802136c:	d211      	bcs.n	8021392 <__aeabi_d2uiz+0x2e>
 802136e:	d50d      	bpl.n	802138c <__aeabi_d2uiz+0x28>
 8021370:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8021374:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8021378:	d40e      	bmi.n	8021398 <__aeabi_d2uiz+0x34>
 802137a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 802137e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8021382:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8021386:	fa23 f002 	lsr.w	r0, r3, r2
 802138a:	4770      	bx	lr
 802138c:	f04f 0000 	mov.w	r0, #0
 8021390:	4770      	bx	lr
 8021392:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8021396:	d102      	bne.n	802139e <__aeabi_d2uiz+0x3a>
 8021398:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802139c:	4770      	bx	lr
 802139e:	f04f 0000 	mov.w	r0, #0
 80213a2:	4770      	bx	lr

080213a4 <osDelayTask>:
 * @brief Delay routine
 * @param[in] delay Amount of time for which the calling task should block
 **/

void osDelayTask(systime_t delay)
{
 80213a4:	b480      	push	{r7}
 80213a6:	b083      	sub	sp, #12
 80213a8:	af00      	add	r7, sp, #0
 80213aa:	6078      	str	r0, [r7, #4]
   //Not implemented
}
 80213ac:	bf00      	nop
 80213ae:	370c      	adds	r7, #12
 80213b0:	46bd      	mov	sp, r7
 80213b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213b6:	4770      	bx	lr

080213b8 <osSuspendAllTasks>:
/**
 * @brief Suspend scheduler activity
 **/

void osSuspendAllTasks(void)
{
 80213b8:	b480      	push	{r7}
 80213ba:	af00      	add	r7, sp, #0
   //Not implemented
}
 80213bc:	bf00      	nop
 80213be:	46bd      	mov	sp, r7
 80213c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213c4:	4770      	bx	lr

080213c6 <osResumeAllTasks>:
/**
 * @brief Resume scheduler activity
 **/

void osResumeAllTasks(void)
{
 80213c6:	b480      	push	{r7}
 80213c8:	af00      	add	r7, sp, #0
   //Not implemented
}
 80213ca:	bf00      	nop
 80213cc:	46bd      	mov	sp, r7
 80213ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213d2:	4770      	bx	lr

080213d4 <osCreateMutex>:
 * @return The function returns TRUE if the mutex was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateMutex(OsMutex *mutex)
{
 80213d4:	b480      	push	{r7}
 80213d6:	b083      	sub	sp, #12
 80213d8:	af00      	add	r7, sp, #0
 80213da:	6078      	str	r0, [r7, #4]
   //The mutex was successfully created
   return TRUE;
 80213dc:	2301      	movs	r3, #1
}
 80213de:	4618      	mov	r0, r3
 80213e0:	370c      	adds	r7, #12
 80213e2:	46bd      	mov	sp, r7
 80213e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213e8:	4770      	bx	lr

080213ea <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

__weak_func void *osAllocMem(size_t size)
{
 80213ea:	b580      	push	{r7, lr}
 80213ec:	b084      	sub	sp, #16
 80213ee:	af00      	add	r7, sp, #0
 80213f0:	6078      	str	r0, [r7, #4]
   void *p;

   //Allocate a memory block
   p = malloc(size);
 80213f2:	6878      	ldr	r0, [r7, #4]
 80213f4:	f00e fd04 	bl	802fe00 <malloc>
 80213f8:	4603      	mov	r3, r0
 80213fa:	60fb      	str	r3, [r7, #12]
   //Debug message
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes at 0x%08" PRIXPTR "\r\n",
      size, (uintptr_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
 80213fc:	68fb      	ldr	r3, [r7, #12]
}
 80213fe:	4618      	mov	r0, r3
 8021400:	3710      	adds	r7, #16
 8021402:	46bd      	mov	sp, r7
 8021404:	bd80      	pop	{r7, pc}

08021406 <osFreeMem>:
 * @brief Release a previously allocated memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

__weak_func void osFreeMem(void *p)
{
 8021406:	b580      	push	{r7, lr}
 8021408:	b082      	sub	sp, #8
 802140a:	af00      	add	r7, sp, #0
 802140c:	6078      	str	r0, [r7, #4]
   //Make sure the pointer is valid
   if(p != NULL)
 802140e:	687b      	ldr	r3, [r7, #4]
 8021410:	2b00      	cmp	r3, #0
 8021412:	d002      	beq.n	802141a <osFreeMem+0x14>
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08" PRIXPTR "\r\n", (uintptr_t) p);

      //Free memory block
      free(p);
 8021414:	6878      	ldr	r0, [r7, #4]
 8021416:	f00e fcfb 	bl	802fe10 <free>
   }
}
 802141a:	bf00      	nop
 802141c:	3708      	adds	r7, #8
 802141e:	46bd      	mov	sp, r7
 8021420:	bd80      	pop	{r7, pc}
	...

08021424 <resGetData>:
//Resource data
extern const uint8_t res[];


error_t resGetData(const char_t *path, const uint8_t **data, size_t *length)
{
 8021424:	b580      	push	{r7, lr}
 8021426:	b08a      	sub	sp, #40	@ 0x28
 8021428:	af00      	add	r7, sp, #0
 802142a:	60f8      	str	r0, [r7, #12]
 802142c:	60b9      	str	r1, [r7, #8]
 802142e:	607a      	str	r2, [r7, #4]
   uint_t n;
   uint_t dirLength;
   ResEntry *resEntry;

   //Point to the resource header
   ResHeader *resHeader = (ResHeader *) res;
 8021430:	4b6a      	ldr	r3, [pc, #424]	@ (80215dc <resGetData+0x1b8>)
 8021432:	613b      	str	r3, [r7, #16]

   //Make sure the resource data is valid
   if(letoh32(resHeader->totalSize) < sizeof(ResHeader))
 8021434:	693b      	ldr	r3, [r7, #16]
 8021436:	681b      	ldr	r3, [r3, #0]
 8021438:	2b0d      	cmp	r3, #13
 802143a:	d802      	bhi.n	8021442 <resGetData+0x1e>
      return ERROR_INVALID_RESOURCE;
 802143c:	f240 130d 	movw	r3, #269	@ 0x10d
 8021440:	e0c7      	b.n	80215d2 <resGetData+0x1ae>

   //Retrieve the length of the root directory
   dirLength = letoh32(resHeader->rootEntry.dataLength);
 8021442:	693b      	ldr	r3, [r7, #16]
 8021444:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8021448:	61bb      	str	r3, [r7, #24]
   //Point to the contents of the root directory
   resEntry = (ResEntry *) (res + letoh32(resHeader->rootEntry.dataStart));
 802144a:	693b      	ldr	r3, [r7, #16]
 802144c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8021450:	4a62      	ldr	r2, [pc, #392]	@ (80215dc <resGetData+0x1b8>)
 8021452:	4413      	add	r3, r2
 8021454:	617b      	str	r3, [r7, #20]

   //Parse the entire path
   for(found = FALSE; !found && path[0] != '\0'; path += n + 1)
 8021456:	2300      	movs	r3, #0
 8021458:	627b      	str	r3, [r7, #36]	@ 0x24
 802145a:	e098      	b.n	802158e <resGetData+0x16a>
   {
      //Search for the separator that terminates the current token
      for(n = 0; path[n] != '\\' && path[n] != '/' && path[n] != '\0'; n++)
 802145c:	2300      	movs	r3, #0
 802145e:	61fb      	str	r3, [r7, #28]
 8021460:	e002      	b.n	8021468 <resGetData+0x44>
 8021462:	69fb      	ldr	r3, [r7, #28]
 8021464:	3301      	adds	r3, #1
 8021466:	61fb      	str	r3, [r7, #28]
 8021468:	68fa      	ldr	r2, [r7, #12]
 802146a:	69fb      	ldr	r3, [r7, #28]
 802146c:	4413      	add	r3, r2
 802146e:	781b      	ldrb	r3, [r3, #0]
 8021470:	2b5c      	cmp	r3, #92	@ 0x5c
 8021472:	d00b      	beq.n	802148c <resGetData+0x68>
 8021474:	68fa      	ldr	r2, [r7, #12]
 8021476:	69fb      	ldr	r3, [r7, #28]
 8021478:	4413      	add	r3, r2
 802147a:	781b      	ldrb	r3, [r3, #0]
 802147c:	2b2f      	cmp	r3, #47	@ 0x2f
 802147e:	d005      	beq.n	802148c <resGetData+0x68>
 8021480:	68fa      	ldr	r2, [r7, #12]
 8021482:	69fb      	ldr	r3, [r7, #28]
 8021484:	4413      	add	r3, r2
 8021486:	781b      	ldrb	r3, [r3, #0]
 8021488:	2b00      	cmp	r3, #0
 802148a:	d1ea      	bne.n	8021462 <resGetData+0x3e>
      {
      }

      if(n == 0 && path[n] != '\0')
 802148c:	69fb      	ldr	r3, [r7, #28]
 802148e:	2b00      	cmp	r3, #0
 8021490:	d120      	bne.n	80214d4 <resGetData+0xb0>
 8021492:	68fa      	ldr	r2, [r7, #12]
 8021494:	69fb      	ldr	r3, [r7, #28]
 8021496:	4413      	add	r3, r2
 8021498:	781b      	ldrb	r3, [r3, #0]
 802149a:	2b00      	cmp	r3, #0
 802149c:	d01a      	beq.n	80214d4 <resGetData+0xb0>
      {
         path++;
 802149e:	68fb      	ldr	r3, [r7, #12]
 80214a0:	3301      	adds	r3, #1
 80214a2:	60fb      	str	r3, [r7, #12]

         for(n = 0; path[n] != '\\' && path[n] != '/' && path[n] != '\0'; n++)
 80214a4:	2300      	movs	r3, #0
 80214a6:	61fb      	str	r3, [r7, #28]
 80214a8:	e002      	b.n	80214b0 <resGetData+0x8c>
 80214aa:	69fb      	ldr	r3, [r7, #28]
 80214ac:	3301      	adds	r3, #1
 80214ae:	61fb      	str	r3, [r7, #28]
 80214b0:	68fa      	ldr	r2, [r7, #12]
 80214b2:	69fb      	ldr	r3, [r7, #28]
 80214b4:	4413      	add	r3, r2
 80214b6:	781b      	ldrb	r3, [r3, #0]
 80214b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80214ba:	d00b      	beq.n	80214d4 <resGetData+0xb0>
 80214bc:	68fa      	ldr	r2, [r7, #12]
 80214be:	69fb      	ldr	r3, [r7, #28]
 80214c0:	4413      	add	r3, r2
 80214c2:	781b      	ldrb	r3, [r3, #0]
 80214c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80214c6:	d005      	beq.n	80214d4 <resGetData+0xb0>
 80214c8:	68fa      	ldr	r2, [r7, #12]
 80214ca:	69fb      	ldr	r3, [r7, #28]
 80214cc:	4413      	add	r3, r2
 80214ce:	781b      	ldrb	r3, [r3, #0]
 80214d0:	2b00      	cmp	r3, #0
 80214d2:	d1ea      	bne.n	80214aa <resGetData+0x86>
         {
         }
      }

      //Loop through the directory
      for(match = FALSE; !match && dirLength > 0; )
 80214d4:	2300      	movs	r3, #0
 80214d6:	623b      	str	r3, [r7, #32]
 80214d8:	e048      	b.n	802156c <resGetData+0x148>
      {
         //Check the number of remaining bytes
         if(dirLength < sizeof(ResEntry))
 80214da:	69bb      	ldr	r3, [r7, #24]
 80214dc:	2b09      	cmp	r3, #9
 80214de:	d802      	bhi.n	80214e6 <resGetData+0xc2>
            return ERROR_INVALID_RESOURCE;
 80214e0:	f240 130d 	movw	r3, #269	@ 0x10d
 80214e4:	e075      	b.n	80215d2 <resGetData+0x1ae>
         //Make sure the entry is valid
         if(dirLength < (sizeof(ResEntry) + resEntry->nameLength))
 80214e6:	697b      	ldr	r3, [r7, #20]
 80214e8:	7a5b      	ldrb	r3, [r3, #9]
 80214ea:	330a      	adds	r3, #10
 80214ec:	69ba      	ldr	r2, [r7, #24]
 80214ee:	429a      	cmp	r2, r3
 80214f0:	d202      	bcs.n	80214f8 <resGetData+0xd4>
            return ERROR_INVALID_RESOURCE;
 80214f2:	f240 130d 	movw	r3, #269	@ 0x10d
 80214f6:	e06c      	b.n	80215d2 <resGetData+0x1ae>

         //Compare current entry name against the expected one
         if(resEntry->nameLength == n && !strncasecmp(resEntry->name, path, n))
 80214f8:	697b      	ldr	r3, [r7, #20]
 80214fa:	7a5b      	ldrb	r3, [r3, #9]
 80214fc:	461a      	mov	r2, r3
 80214fe:	69fb      	ldr	r3, [r7, #28]
 8021500:	4293      	cmp	r3, r2
 8021502:	d126      	bne.n	8021552 <resGetData+0x12e>
 8021504:	697b      	ldr	r3, [r7, #20]
 8021506:	330a      	adds	r3, #10
 8021508:	69fa      	ldr	r2, [r7, #28]
 802150a:	68f9      	ldr	r1, [r7, #12]
 802150c:	4618      	mov	r0, r3
 802150e:	f00e ff53 	bl	80303b8 <strncasecmp>
 8021512:	4603      	mov	r3, r0
 8021514:	2b00      	cmp	r3, #0
 8021516:	d11c      	bne.n	8021552 <resGetData+0x12e>
         {
            //Check the type of the entry
            if(resEntry->type == RES_TYPE_DIR)
 8021518:	697b      	ldr	r3, [r7, #20]
 802151a:	781b      	ldrb	r3, [r3, #0]
 802151c:	2b01      	cmp	r3, #1
 802151e:	d10a      	bne.n	8021536 <resGetData+0x112>
            {
               //Save the length of the directory
               dirLength = letoh32(resEntry->dataLength);
 8021520:	697b      	ldr	r3, [r7, #20]
 8021522:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8021526:	61bb      	str	r3, [r7, #24]
               //Point to the contents of the directory
               resEntry = (ResEntry *) (res + letoh32(resEntry->dataStart));
 8021528:	697b      	ldr	r3, [r7, #20]
 802152a:	f8d3 3001 	ldr.w	r3, [r3, #1]
 802152e:	4a2b      	ldr	r2, [pc, #172]	@ (80215dc <resGetData+0x1b8>)
 8021530:	4413      	add	r3, r2
 8021532:	617b      	str	r3, [r7, #20]
 8021534:	e00a      	b.n	802154c <resGetData+0x128>
            }
            else
            {
               //A file may only appear at the end of the path
               if(path[n] != '\0')
 8021536:	68fa      	ldr	r2, [r7, #12]
 8021538:	69fb      	ldr	r3, [r7, #28]
 802153a:	4413      	add	r3, r2
 802153c:	781b      	ldrb	r3, [r3, #0]
 802153e:	2b00      	cmp	r3, #0
 8021540:	d002      	beq.n	8021548 <resGetData+0x124>
                  return ERROR_NOT_FOUND;
 8021542:	f240 130f 	movw	r3, #271	@ 0x10f
 8021546:	e044      	b.n	80215d2 <resGetData+0x1ae>

               //The search process is complete
               found = TRUE;
 8021548:	2301      	movs	r3, #1
 802154a:	627b      	str	r3, [r7, #36]	@ 0x24
            }
            //The current entry matches the specified path
            match = TRUE;
 802154c:	2301      	movs	r3, #1
 802154e:	623b      	str	r3, [r7, #32]
 8021550:	e00c      	b.n	802156c <resGetData+0x148>
         }
         else
         {
            //Remaining bytes to process
            dirLength -= sizeof(ResEntry) + resEntry->nameLength;
 8021552:	697b      	ldr	r3, [r7, #20]
 8021554:	7a5b      	ldrb	r3, [r3, #9]
 8021556:	461a      	mov	r2, r3
 8021558:	69bb      	ldr	r3, [r7, #24]
 802155a:	1a9b      	subs	r3, r3, r2
 802155c:	3b0a      	subs	r3, #10
 802155e:	61bb      	str	r3, [r7, #24]

            //Point to the next entry
            resEntry = (ResEntry *) ((uint8_t *) resEntry + sizeof(ResEntry) +
               resEntry->nameLength);
 8021560:	697b      	ldr	r3, [r7, #20]
 8021562:	7a5b      	ldrb	r3, [r3, #9]
            resEntry = (ResEntry *) ((uint8_t *) resEntry + sizeof(ResEntry) +
 8021564:	330a      	adds	r3, #10
 8021566:	697a      	ldr	r2, [r7, #20]
 8021568:	4413      	add	r3, r2
 802156a:	617b      	str	r3, [r7, #20]
      for(match = FALSE; !match && dirLength > 0; )
 802156c:	6a3b      	ldr	r3, [r7, #32]
 802156e:	2b00      	cmp	r3, #0
 8021570:	d102      	bne.n	8021578 <resGetData+0x154>
 8021572:	69bb      	ldr	r3, [r7, #24]
 8021574:	2b00      	cmp	r3, #0
 8021576:	d1b0      	bne.n	80214da <resGetData+0xb6>
         }
      }

      //Unable to find the specified file?
      if(!match)
 8021578:	6a3b      	ldr	r3, [r7, #32]
 802157a:	2b00      	cmp	r3, #0
 802157c:	d102      	bne.n	8021584 <resGetData+0x160>
         return ERROR_NOT_FOUND;
 802157e:	f240 130f 	movw	r3, #271	@ 0x10f
 8021582:	e026      	b.n	80215d2 <resGetData+0x1ae>
   for(found = FALSE; !found && path[0] != '\0'; path += n + 1)
 8021584:	69fb      	ldr	r3, [r7, #28]
 8021586:	3301      	adds	r3, #1
 8021588:	68fa      	ldr	r2, [r7, #12]
 802158a:	4413      	add	r3, r2
 802158c:	60fb      	str	r3, [r7, #12]
 802158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021590:	2b00      	cmp	r3, #0
 8021592:	d104      	bne.n	802159e <resGetData+0x17a>
 8021594:	68fb      	ldr	r3, [r7, #12]
 8021596:	781b      	ldrb	r3, [r3, #0]
 8021598:	2b00      	cmp	r3, #0
 802159a:	f47f af5f 	bne.w	802145c <resGetData+0x38>
   }

   //Unable to find the specified file?
   if(!found)
 802159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80215a0:	2b00      	cmp	r3, #0
 80215a2:	d102      	bne.n	80215aa <resGetData+0x186>
      return ERROR_NOT_FOUND;
 80215a4:	f240 130f 	movw	r3, #271	@ 0x10f
 80215a8:	e013      	b.n	80215d2 <resGetData+0x1ae>
   //Enforce the entry type
   if(resEntry->type != RES_TYPE_FILE)
 80215aa:	697b      	ldr	r3, [r7, #20]
 80215ac:	781b      	ldrb	r3, [r3, #0]
 80215ae:	2b02      	cmp	r3, #2
 80215b0:	d002      	beq.n	80215b8 <resGetData+0x194>
      return ERROR_NOT_FOUND;
 80215b2:	f240 130f 	movw	r3, #271	@ 0x10f
 80215b6:	e00c      	b.n	80215d2 <resGetData+0x1ae>

   //Return the location of the specified resource
   *data = res + letoh32(resEntry->dataStart);
 80215b8:	697b      	ldr	r3, [r7, #20]
 80215ba:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80215be:	4a07      	ldr	r2, [pc, #28]	@ (80215dc <resGetData+0x1b8>)
 80215c0:	441a      	add	r2, r3
 80215c2:	68bb      	ldr	r3, [r7, #8]
 80215c4:	601a      	str	r2, [r3, #0]
   //Return the length of the resource
   *length = letoh32(resEntry->dataLength);
 80215c6:	697b      	ldr	r3, [r7, #20]
 80215c8:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80215cc:	687b      	ldr	r3, [r7, #4]
 80215ce:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 80215d0:	2300      	movs	r3, #0
}
 80215d2:	4618      	mov	r0, r3
 80215d4:	3728      	adds	r7, #40	@ 0x28
 80215d6:	46bd      	mov	sp, r7
 80215d8:	bd80      	pop	{r7, pc}
 80215da:	bf00      	nop
 80215dc:	0803197c 	.word	0x0803197c

080215e0 <crc32Compute>:
 * @param[out] digest Pointer to the calculated digest
 * @return Error code
 **/

error_t crc32Compute(const void *data, size_t length, uint8_t *digest)
{
 80215e0:	b580      	push	{r7, lr}
 80215e2:	b086      	sub	sp, #24
 80215e4:	af00      	add	r7, sp, #0
 80215e6:	60f8      	str	r0, [r7, #12]
 80215e8:	60b9      	str	r1, [r7, #8]
 80215ea:	607a      	str	r2, [r7, #4]
   //Allocate a memory buffer to hold the CRC32 context
   Crc32Context *context = cryptoAllocMem(sizeof(Crc32Context));
 80215ec:	2004      	movs	r0, #4
 80215ee:	f7ff fefc 	bl	80213ea <osAllocMem>
 80215f2:	6178      	str	r0, [r7, #20]
   //Failed to allocate memory?
   if(context == NULL)
 80215f4:	697b      	ldr	r3, [r7, #20]
 80215f6:	2b00      	cmp	r3, #0
 80215f8:	d101      	bne.n	80215fe <crc32Compute+0x1e>
      return ERROR_OUT_OF_MEMORY;
 80215fa:	2364      	movs	r3, #100	@ 0x64
 80215fc:	e00f      	b.n	802161e <crc32Compute+0x3e>

   //Initialize the CRC32 context
   crc32Init(context);
 80215fe:	6978      	ldr	r0, [r7, #20]
 8021600:	f000 f811 	bl	8021626 <crc32Init>
   //Digest the message
   crc32Update(context, data, length);
 8021604:	68ba      	ldr	r2, [r7, #8]
 8021606:	68f9      	ldr	r1, [r7, #12]
 8021608:	6978      	ldr	r0, [r7, #20]
 802160a:	f000 f81b 	bl	8021644 <crc32Update>
   //Finalize the CRC32 message digest
   crc32Final(context, digest);
 802160e:	6879      	ldr	r1, [r7, #4]
 8021610:	6978      	ldr	r0, [r7, #20]
 8021612:	f000 f845 	bl	80216a0 <crc32Final>

   //Free previously allocated memory
   cryptoFreeMem(context);
 8021616:	6978      	ldr	r0, [r7, #20]
 8021618:	f7ff fef5 	bl	8021406 <osFreeMem>

   //Successful processing
   return NO_ERROR;
 802161c:	2300      	movs	r3, #0
}
 802161e:	4618      	mov	r0, r3
 8021620:	3718      	adds	r7, #24
 8021622:	46bd      	mov	sp, r7
 8021624:	bd80      	pop	{r7, pc}

08021626 <crc32Init>:
 * @brief Initialize CRC32 message digest context
 * @param[in] context Pointer to the CRC32 context to initialize
 **/

void crc32Init(Crc32Context *context)
{
 8021626:	b480      	push	{r7}
 8021628:	b083      	sub	sp, #12
 802162a:	af00      	add	r7, sp, #0
 802162c:	6078      	str	r0, [r7, #4]
   //CRC (digest) preset value
   context->digest = 0xFFFFFFFF;
 802162e:	687b      	ldr	r3, [r7, #4]
 8021630:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021634:	601a      	str	r2, [r3, #0]
}
 8021636:	bf00      	nop
 8021638:	370c      	adds	r7, #12
 802163a:	46bd      	mov	sp, r7
 802163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021640:	4770      	bx	lr
	...

08021644 <crc32Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

void crc32Update(Crc32Context *context, const void *data, size_t length)
{
 8021644:	b480      	push	{r7}
 8021646:	b089      	sub	sp, #36	@ 0x24
 8021648:	af00      	add	r7, sp, #0
 802164a:	60f8      	str	r0, [r7, #12]
 802164c:	60b9      	str	r1, [r7, #8]
 802164e:	607a      	str	r2, [r7, #4]
   size_t i;
   const uint8_t *p;
   uint32_t crc;

   //Restaure last crc
   crc = (uint32_t)context->digest;
 8021650:	68fb      	ldr	r3, [r7, #12]
 8021652:	681b      	ldr	r3, [r3, #0]
 8021654:	61bb      	str	r3, [r7, #24]

   //Point to the data over which to calculate the CRC
   p = (uint8_t *) data;
 8021656:	68bb      	ldr	r3, [r7, #8]
 8021658:	617b      	str	r3, [r7, #20]

   //Process the incoming data
   for(i = 0; i < length; i++)
 802165a:	2300      	movs	r3, #0
 802165c:	61fb      	str	r3, [r7, #28]
 802165e:	e010      	b.n	8021682 <crc32Update+0x3e>
   {
      //The message is processed byte by byte
      crc = (crc >> 8) ^ crc32Table[(crc & 0xFF) ^ p[i]];
 8021660:	69bb      	ldr	r3, [r7, #24]
 8021662:	0a1a      	lsrs	r2, r3, #8
 8021664:	69bb      	ldr	r3, [r7, #24]
 8021666:	b2db      	uxtb	r3, r3
 8021668:	6978      	ldr	r0, [r7, #20]
 802166a:	69f9      	ldr	r1, [r7, #28]
 802166c:	4401      	add	r1, r0
 802166e:	7809      	ldrb	r1, [r1, #0]
 8021670:	404b      	eors	r3, r1
 8021672:	490a      	ldr	r1, [pc, #40]	@ (802169c <crc32Update+0x58>)
 8021674:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021678:	4053      	eors	r3, r2
 802167a:	61bb      	str	r3, [r7, #24]
   for(i = 0; i < length; i++)
 802167c:	69fb      	ldr	r3, [r7, #28]
 802167e:	3301      	adds	r3, #1
 8021680:	61fb      	str	r3, [r7, #28]
 8021682:	69fa      	ldr	r2, [r7, #28]
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	429a      	cmp	r2, r3
 8021688:	d3ea      	bcc.n	8021660 <crc32Update+0x1c>
   }

   //Save updated crc
   context->digest = crc;
 802168a:	68fb      	ldr	r3, [r7, #12]
 802168c:	69ba      	ldr	r2, [r7, #24]
 802168e:	601a      	str	r2, [r3, #0]
}
 8021690:	bf00      	nop
 8021692:	3724      	adds	r7, #36	@ 0x24
 8021694:	46bd      	mov	sp, r7
 8021696:	f85d 7b04 	ldr.w	r7, [sp], #4
 802169a:	4770      	bx	lr
 802169c:	08031ef0 	.word	0x08031ef0

080216a0 <crc32Final>:
 * @param[in] context Pointer to the CRC32 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

void crc32Final(Crc32Context *context, uint8_t *digest)
{
 80216a0:	b480      	push	{r7}
 80216a2:	b083      	sub	sp, #12
 80216a4:	af00      	add	r7, sp, #0
 80216a6:	6078      	str	r0, [r7, #4]
 80216a8:	6039      	str	r1, [r7, #0]
   //Copy the resulting digest
   if(digest != NULL)
 80216aa:	683b      	ldr	r3, [r7, #0]
 80216ac:	2b00      	cmp	r3, #0
 80216ae:	d004      	beq.n	80216ba <crc32Final+0x1a>
      osMemcpy(digest, (uint8_t*)&context->digest, CRC32_DIGEST_SIZE);
 80216b0:	687b      	ldr	r3, [r7, #4]
 80216b2:	681b      	ldr	r3, [r3, #0]
 80216b4:	461a      	mov	r2, r3
 80216b6:	683b      	ldr	r3, [r7, #0]
 80216b8:	601a      	str	r2, [r3, #0]
}
 80216ba:	bf00      	nop
 80216bc:	370c      	adds	r7, #12
 80216be:	46bd      	mov	sp, r7
 80216c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216c4:	4770      	bx	lr
	...

080216c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80216c8:	b480      	push	{r7}
 80216ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80216cc:	f3bf 8f4f 	dsb	sy
}
 80216d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80216d2:	4b06      	ldr	r3, [pc, #24]	@ (80216ec <__NVIC_SystemReset+0x24>)
 80216d4:	68db      	ldr	r3, [r3, #12]
 80216d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80216da:	4904      	ldr	r1, [pc, #16]	@ (80216ec <__NVIC_SystemReset+0x24>)
 80216dc:	4b04      	ldr	r3, [pc, #16]	@ (80216f0 <__NVIC_SystemReset+0x28>)
 80216de:	4313      	orrs	r3, r2
 80216e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80216e2:	f3bf 8f4f 	dsb	sy
}
 80216e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80216e8:	bf00      	nop
 80216ea:	e7fd      	b.n	80216e8 <__NVIC_SystemReset+0x20>
 80216ec:	e000ed00 	.word	0xe000ed00
 80216f0:	05fa0004 	.word	0x05fa0004

080216f4 <mcuSystemReset>:
/**
 * @brief Reset MCU system
 **/

void mcuSystemReset(void)
{
 80216f4:	b580      	push	{r7, lr}
 80216f6:	af00      	add	r7, sp, #0
   NVIC_SystemReset();
 80216f8:	f7ff ffe6 	bl	80216c8 <__NVIC_SystemReset>

080216fc <w25qFlashSetConfig>:
/**
 * @brief Set hardware configuration for W25Q driver
 * @param config Hardware configuration structure
 */
void w25qFlashSetConfig(const w25q_driver_config_t *config)
{
 80216fc:	b580      	push	{r7, lr}
 80216fe:	b082      	sub	sp, #8
 8021700:	af00      	add	r7, sp, #0
 8021702:	6078      	str	r0, [r7, #4]
    if (config != NULL) {
 8021704:	687b      	ldr	r3, [r7, #4]
 8021706:	2b00      	cmp	r3, #0
 8021708:	d004      	beq.n	8021714 <w25qFlashSetConfig+0x18>
        memcpy(&driver_config, config, sizeof(w25q_driver_config_t));
 802170a:	2224      	movs	r2, #36	@ 0x24
 802170c:	6879      	ldr	r1, [r7, #4]
 802170e:	4803      	ldr	r0, [pc, #12]	@ (802171c <w25qFlashSetConfig+0x20>)
 8021710:	f00e ff0f 	bl	8030532 <memcpy>
    }
}
 8021714:	bf00      	nop
 8021716:	3708      	adds	r7, #8
 8021718:	46bd      	mov	sp, r7
 802171a:	bd80      	pop	{r7, pc}
 802171c:	20000118 	.word	0x20000118

08021720 <default_spi_init>:
 * @brief Default hardware callbacks (to be implemented by user)
 */

// Default SPI init callback
static int32_t default_spi_init(void *user_ctx)
{
 8021720:	b590      	push	{r4, r7, lr}
 8021722:	b085      	sub	sp, #20
 8021724:	af02      	add	r7, sp, #8
 8021726:	6078      	str	r0, [r7, #4]
    // User must implement this based on their hardware
    STM32_LOGI(TAG, "Default SPI init called - implement in application");
 8021728:	4b09      	ldr	r3, [pc, #36]	@ (8021750 <default_spi_init+0x30>)
 802172a:	681c      	ldr	r4, [r3, #0]
 802172c:	f008 fcd4 	bl	802a0d8 <stm32_log_timestamp>
 8021730:	4602      	mov	r2, r0
 8021732:	4b07      	ldr	r3, [pc, #28]	@ (8021750 <default_spi_init+0x30>)
 8021734:	681b      	ldr	r3, [r3, #0]
 8021736:	9300      	str	r3, [sp, #0]
 8021738:	4613      	mov	r3, r2
 802173a:	4a06      	ldr	r2, [pc, #24]	@ (8021754 <default_spi_init+0x34>)
 802173c:	4621      	mov	r1, r4
 802173e:	2003      	movs	r0, #3
 8021740:	f008 fcd2 	bl	802a0e8 <stm32_log_write>
    return 0;
 8021744:	2300      	movs	r3, #0
}
 8021746:	4618      	mov	r0, r3
 8021748:	370c      	adds	r7, #12
 802174a:	46bd      	mov	sp, r7
 802174c:	bd90      	pop	{r4, r7, pc}
 802174e:	bf00      	nop
 8021750:	20000000 	.word	0x20000000
 8021754:	08030e28 	.word	0x08030e28

08021758 <default_spi_write_read>:

// Default SPI transfer callback
static int32_t default_spi_write_read(void *user_ctx, const uint8_t *tx, uint8_t *rx, size_t len)
{
 8021758:	b590      	push	{r4, r7, lr}
 802175a:	b087      	sub	sp, #28
 802175c:	af02      	add	r7, sp, #8
 802175e:	60f8      	str	r0, [r7, #12]
 8021760:	60b9      	str	r1, [r7, #8]
 8021762:	607a      	str	r2, [r7, #4]
 8021764:	603b      	str	r3, [r7, #0]
    // User must implement this based on their hardware
    STM32_LOGI(TAG, "Default SPI transfer called - implement in application");
 8021766:	4b09      	ldr	r3, [pc, #36]	@ (802178c <default_spi_write_read+0x34>)
 8021768:	681c      	ldr	r4, [r3, #0]
 802176a:	f008 fcb5 	bl	802a0d8 <stm32_log_timestamp>
 802176e:	4602      	mov	r2, r0
 8021770:	4b06      	ldr	r3, [pc, #24]	@ (802178c <default_spi_write_read+0x34>)
 8021772:	681b      	ldr	r3, [r3, #0]
 8021774:	9300      	str	r3, [sp, #0]
 8021776:	4613      	mov	r3, r2
 8021778:	4a05      	ldr	r2, [pc, #20]	@ (8021790 <default_spi_write_read+0x38>)
 802177a:	4621      	mov	r1, r4
 802177c:	2003      	movs	r0, #3
 802177e:	f008 fcb3 	bl	802a0e8 <stm32_log_write>
    return 0;
 8021782:	2300      	movs	r3, #0
}
 8021784:	4618      	mov	r0, r3
 8021786:	3714      	adds	r7, #20
 8021788:	46bd      	mov	sp, r7
 802178a:	bd90      	pop	{r4, r7, pc}
 802178c:	20000000 	.word	0x20000000
 8021790:	08030e68 	.word	0x08030e68

08021794 <default_cs_control>:

// Default CS control callback
static void default_cs_control(void *user_ctx, bool level)
{
 8021794:	b480      	push	{r7}
 8021796:	b083      	sub	sp, #12
 8021798:	af00      	add	r7, sp, #0
 802179a:	6078      	str	r0, [r7, #4]
 802179c:	460b      	mov	r3, r1
 802179e:	70fb      	strb	r3, [r7, #3]
    // User must implement this based on their hardware
}
 80217a0:	bf00      	nop
 80217a2:	370c      	adds	r7, #12
 80217a4:	46bd      	mov	sp, r7
 80217a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217aa:	4770      	bx	lr

080217ac <default_delay_ms>:

// Default delay callback
static void default_delay_ms(uint32_t ms)
{
 80217ac:	b580      	push	{r7, lr}
 80217ae:	b082      	sub	sp, #8
 80217b0:	af00      	add	r7, sp, #0
 80217b2:	6078      	str	r0, [r7, #4]
    // User must implement this based on their hardware
	osDelayTask(ms);
 80217b4:	6878      	ldr	r0, [r7, #4]
 80217b6:	f7ff fdf5 	bl	80213a4 <osDelayTask>
}
 80217ba:	bf00      	nop
 80217bc:	3708      	adds	r7, #8
 80217be:	46bd      	mov	sp, r7
 80217c0:	bd80      	pop	{r7, pc}

080217c2 <default_lock>:

// Default lock/unlock callbacks (for thread safety)
static void default_lock(void *user_ctx) {}
 80217c2:	b480      	push	{r7}
 80217c4:	b083      	sub	sp, #12
 80217c6:	af00      	add	r7, sp, #0
 80217c8:	6078      	str	r0, [r7, #4]
 80217ca:	bf00      	nop
 80217cc:	370c      	adds	r7, #12
 80217ce:	46bd      	mov	sp, r7
 80217d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217d4:	4770      	bx	lr

080217d6 <default_unlock>:
static void default_unlock(void *user_ctx) {}
 80217d6:	b480      	push	{r7}
 80217d8:	b083      	sub	sp, #12
 80217da:	af00      	add	r7, sp, #0
 80217dc:	6078      	str	r0, [r7, #4]
 80217de:	bf00      	nop
 80217e0:	370c      	adds	r7, #12
 80217e2:	46bd      	mov	sp, r7
 80217e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217e8:	4770      	bx	lr
	...

080217ec <w25qFlashDriverInit>:
/**
 * @brief Initialize Flash Memory
 * @return Error code
 */
error_t w25qFlashDriverInit(void)
{
 80217ec:	b590      	push	{r4, r7, lr}
 80217ee:	b08f      	sub	sp, #60	@ 0x3c
 80217f0:	af04      	add	r7, sp, #16
    w25q_config_t config;
    w25q_info_t info;
    w25q_err_t ret;

    STM32_LOGI(TAG, "Initializing W25Q flash memory...");
 80217f2:	4b54      	ldr	r3, [pc, #336]	@ (8021944 <w25qFlashDriverInit+0x158>)
 80217f4:	681c      	ldr	r4, [r3, #0]
 80217f6:	f008 fc6f 	bl	802a0d8 <stm32_log_timestamp>
 80217fa:	4602      	mov	r2, r0
 80217fc:	4b51      	ldr	r3, [pc, #324]	@ (8021944 <w25qFlashDriverInit+0x158>)
 80217fe:	681b      	ldr	r3, [r3, #0]
 8021800:	9300      	str	r3, [sp, #0]
 8021802:	4613      	mov	r3, r2
 8021804:	4a50      	ldr	r2, [pc, #320]	@ (8021948 <w25qFlashDriverInit+0x15c>)
 8021806:	4621      	mov	r1, r4
 8021808:	2003      	movs	r0, #3
 802180a:	f008 fc6d 	bl	802a0e8 <stm32_log_write>

    // Set default callbacks if not configured
    if (driver_config.hw_callbacks.spi_write_read == NULL) {
 802180e:	4b4f      	ldr	r3, [pc, #316]	@ (802194c <w25qFlashDriverInit+0x160>)
 8021810:	685b      	ldr	r3, [r3, #4]
 8021812:	2b00      	cmp	r3, #0
 8021814:	d12a      	bne.n	802186c <w25qFlashDriverInit+0x80>
        driver_config.hw_callbacks.spi_init = default_spi_init;
 8021816:	4b4d      	ldr	r3, [pc, #308]	@ (802194c <w25qFlashDriverInit+0x160>)
 8021818:	4a4d      	ldr	r2, [pc, #308]	@ (8021950 <w25qFlashDriverInit+0x164>)
 802181a:	601a      	str	r2, [r3, #0]
        driver_config.hw_callbacks.spi_write_read = default_spi_write_read;
 802181c:	4b4b      	ldr	r3, [pc, #300]	@ (802194c <w25qFlashDriverInit+0x160>)
 802181e:	4a4d      	ldr	r2, [pc, #308]	@ (8021954 <w25qFlashDriverInit+0x168>)
 8021820:	605a      	str	r2, [r3, #4]
        driver_config.hw_callbacks.cs_control = default_cs_control;
 8021822:	4b4a      	ldr	r3, [pc, #296]	@ (802194c <w25qFlashDriverInit+0x160>)
 8021824:	4a4c      	ldr	r2, [pc, #304]	@ (8021958 <w25qFlashDriverInit+0x16c>)
 8021826:	609a      	str	r2, [r3, #8]
        driver_config.hw_callbacks.delay_ms = default_delay_ms;
 8021828:	4b48      	ldr	r3, [pc, #288]	@ (802194c <w25qFlashDriverInit+0x160>)
 802182a:	4a4c      	ldr	r2, [pc, #304]	@ (802195c <w25qFlashDriverInit+0x170>)
 802182c:	60da      	str	r2, [r3, #12]
        driver_config.hw_callbacks.lock = default_lock;
 802182e:	4b47      	ldr	r3, [pc, #284]	@ (802194c <w25qFlashDriverInit+0x160>)
 8021830:	4a4b      	ldr	r2, [pc, #300]	@ (8021960 <w25qFlashDriverInit+0x174>)
 8021832:	611a      	str	r2, [r3, #16]
        driver_config.hw_callbacks.unlock = default_unlock;
 8021834:	4b45      	ldr	r3, [pc, #276]	@ (802194c <w25qFlashDriverInit+0x160>)
 8021836:	4a4b      	ldr	r2, [pc, #300]	@ (8021964 <w25qFlashDriverInit+0x178>)
 8021838:	615a      	str	r2, [r3, #20]
        driver_config.user_ctx = NULL;
 802183a:	4b44      	ldr	r3, [pc, #272]	@ (802194c <w25qFlashDriverInit+0x160>)
 802183c:	2200      	movs	r2, #0
 802183e:	619a      	str	r2, [r3, #24]
        driver_config.timeout_ms = 5000;
 8021840:	4b42      	ldr	r3, [pc, #264]	@ (802194c <w25qFlashDriverInit+0x160>)
 8021842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021846:	61da      	str	r2, [r3, #28]
        driver_config.software_cs = true;
 8021848:	4b40      	ldr	r3, [pc, #256]	@ (802194c <w25qFlashDriverInit+0x160>)
 802184a:	2201      	movs	r2, #1
 802184c:	f883 2020 	strb.w	r2, [r3, #32]

        STM32_LOGW(TAG, "Using default callbacks - configure with w25qFlashSetConfig()");
 8021850:	4b3c      	ldr	r3, [pc, #240]	@ (8021944 <w25qFlashDriverInit+0x158>)
 8021852:	681c      	ldr	r4, [r3, #0]
 8021854:	f008 fc40 	bl	802a0d8 <stm32_log_timestamp>
 8021858:	4602      	mov	r2, r0
 802185a:	4b3a      	ldr	r3, [pc, #232]	@ (8021944 <w25qFlashDriverInit+0x158>)
 802185c:	681b      	ldr	r3, [r3, #0]
 802185e:	9300      	str	r3, [sp, #0]
 8021860:	4613      	mov	r3, r2
 8021862:	4a41      	ldr	r2, [pc, #260]	@ (8021968 <w25qFlashDriverInit+0x17c>)
 8021864:	4621      	mov	r1, r4
 8021866:	2002      	movs	r0, #2
 8021868:	f008 fc3e 	bl	802a0e8 <stm32_log_write>
    }

    // Configure W25Q library
    config.hw = &driver_config.hw_callbacks;
 802186c:	4b37      	ldr	r3, [pc, #220]	@ (802194c <w25qFlashDriverInit+0x160>)
 802186e:	617b      	str	r3, [r7, #20]
    config.user_ctx = driver_config.user_ctx;
 8021870:	4b36      	ldr	r3, [pc, #216]	@ (802194c <w25qFlashDriverInit+0x160>)
 8021872:	699b      	ldr	r3, [r3, #24]
 8021874:	61bb      	str	r3, [r7, #24]
    config.timeout_ms = driver_config.timeout_ms;
 8021876:	4b35      	ldr	r3, [pc, #212]	@ (802194c <w25qFlashDriverInit+0x160>)
 8021878:	69db      	ldr	r3, [r3, #28]
 802187a:	61fb      	str	r3, [r7, #28]
    config.software_cs = driver_config.software_cs;
 802187c:	4b33      	ldr	r3, [pc, #204]	@ (802194c <w25qFlashDriverInit+0x160>)
 802187e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8021882:	f887 3020 	strb.w	r3, [r7, #32]

    // Initialize W25Q device
    ret = w25q_init(&w25q_handle, &config);
 8021886:	f107 0314 	add.w	r3, r7, #20
 802188a:	4619      	mov	r1, r3
 802188c:	4837      	ldr	r0, [pc, #220]	@ (802196c <w25qFlashDriverInit+0x180>)
 802188e:	f008 fe18 	bl	802a4c2 <w25q_init>
 8021892:	4603      	mov	r3, r0
 8021894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ret != W25Q_OK) {
 8021898:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 802189c:	2b00      	cmp	r3, #0
 802189e:	d012      	beq.n	80218c6 <w25qFlashDriverInit+0xda>
        STM32_LOGE(TAG, "Failed to initialize W25Q flash: %d", ret);
 80218a0:	4b28      	ldr	r3, [pc, #160]	@ (8021944 <w25qFlashDriverInit+0x158>)
 80218a2:	681c      	ldr	r4, [r3, #0]
 80218a4:	f008 fc18 	bl	802a0d8 <stm32_log_timestamp>
 80218a8:	4601      	mov	r1, r0
 80218aa:	4b26      	ldr	r3, [pc, #152]	@ (8021944 <w25qFlashDriverInit+0x158>)
 80218ac:	681b      	ldr	r3, [r3, #0]
 80218ae:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80218b2:	9201      	str	r2, [sp, #4]
 80218b4:	9300      	str	r3, [sp, #0]
 80218b6:	460b      	mov	r3, r1
 80218b8:	4a2d      	ldr	r2, [pc, #180]	@ (8021970 <w25qFlashDriverInit+0x184>)
 80218ba:	4621      	mov	r1, r4
 80218bc:	2001      	movs	r0, #1
 80218be:	f008 fc13 	bl	802a0e8 <stm32_log_write>
        return ERROR_FAILURE;
 80218c2:	2301      	movs	r3, #1
 80218c4:	e03a      	b.n	802193c <w25qFlashDriverInit+0x150>
    }

    // Get device information
    ret = w25q_get_info(&w25q_handle, &info);
 80218c6:	1d3b      	adds	r3, r7, #4
 80218c8:	4619      	mov	r1, r3
 80218ca:	4828      	ldr	r0, [pc, #160]	@ (802196c <w25qFlashDriverInit+0x180>)
 80218cc:	f008 feb9 	bl	802a642 <w25q_get_info>
 80218d0:	4603      	mov	r3, r0
 80218d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ret != W25Q_OK) {
 80218d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80218da:	2b00      	cmp	r3, #0
 80218dc:	d012      	beq.n	8021904 <w25qFlashDriverInit+0x118>
        STM32_LOGE(TAG, "Failed to get W25Q info: %d", ret);
 80218de:	4b19      	ldr	r3, [pc, #100]	@ (8021944 <w25qFlashDriverInit+0x158>)
 80218e0:	681c      	ldr	r4, [r3, #0]
 80218e2:	f008 fbf9 	bl	802a0d8 <stm32_log_timestamp>
 80218e6:	4601      	mov	r1, r0
 80218e8:	4b16      	ldr	r3, [pc, #88]	@ (8021944 <w25qFlashDriverInit+0x158>)
 80218ea:	681b      	ldr	r3, [r3, #0]
 80218ec:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80218f0:	9201      	str	r2, [sp, #4]
 80218f2:	9300      	str	r3, [sp, #0]
 80218f4:	460b      	mov	r3, r1
 80218f6:	4a1f      	ldr	r2, [pc, #124]	@ (8021974 <w25qFlashDriverInit+0x188>)
 80218f8:	4621      	mov	r1, r4
 80218fa:	2001      	movs	r0, #1
 80218fc:	f008 fbf4 	bl	802a0e8 <stm32_log_write>
        return ERROR_FAILURE;
 8021900:	2301      	movs	r3, #1
 8021902:	e01b      	b.n	802193c <w25qFlashDriverInit+0x150>
    }

    // Update flash driver info with actual device capabilities
    w25qFlashDriverInfo.flashSize = info.capacity_bytes;
 8021904:	687b      	ldr	r3, [r7, #4]
 8021906:	4a1c      	ldr	r2, [pc, #112]	@ (8021978 <w25qFlashDriverInit+0x18c>)
 8021908:	6113      	str	r3, [r2, #16]
    flash_capacity = info.capacity_bytes;
 802190a:	687b      	ldr	r3, [r7, #4]
 802190c:	4a1b      	ldr	r2, [pc, #108]	@ (802197c <w25qFlashDriverInit+0x190>)
 802190e:	6013      	str	r3, [r2, #0]

    STM32_LOGI(TAG, "W25Q flash initialized: %s, Capacity: %lu bytes",
 8021910:	4b0c      	ldr	r3, [pc, #48]	@ (8021944 <w25qFlashDriverInit+0x158>)
 8021912:	681c      	ldr	r4, [r3, #0]
 8021914:	f008 fbe0 	bl	802a0d8 <stm32_log_timestamp>
 8021918:	4601      	mov	r1, r0
 802191a:	4b0a      	ldr	r3, [pc, #40]	@ (8021944 <w25qFlashDriverInit+0x158>)
 802191c:	681b      	ldr	r3, [r3, #0]
 802191e:	687a      	ldr	r2, [r7, #4]
 8021920:	9202      	str	r2, [sp, #8]
 8021922:	4a17      	ldr	r2, [pc, #92]	@ (8021980 <w25qFlashDriverInit+0x194>)
 8021924:	9201      	str	r2, [sp, #4]
 8021926:	9300      	str	r3, [sp, #0]
 8021928:	460b      	mov	r3, r1
 802192a:	4a16      	ldr	r2, [pc, #88]	@ (8021984 <w25qFlashDriverInit+0x198>)
 802192c:	4621      	mov	r1, r4
 802192e:	2003      	movs	r0, #3
 8021930:	f008 fbda 	bl	802a0e8 <stm32_log_write>
               W25Q_FLASH_NAME, info.capacity_bytes);

    driver_initialized = true;
 8021934:	4b14      	ldr	r3, [pc, #80]	@ (8021988 <w25qFlashDriverInit+0x19c>)
 8021936:	2201      	movs	r2, #1
 8021938:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 802193a:	2300      	movs	r3, #0
}
 802193c:	4618      	mov	r0, r3
 802193e:	372c      	adds	r7, #44	@ 0x2c
 8021940:	46bd      	mov	sp, r7
 8021942:	bd90      	pop	{r4, r7, pc}
 8021944:	20000000 	.word	0x20000000
 8021948:	08030eac 	.word	0x08030eac
 802194c:	20000118 	.word	0x20000118
 8021950:	08021721 	.word	0x08021721
 8021954:	08021759 	.word	0x08021759
 8021958:	08021795 	.word	0x08021795
 802195c:	080217ad 	.word	0x080217ad
 8021960:	080217c3 	.word	0x080217c3
 8021964:	080217d7 	.word	0x080217d7
 8021968:	08030edc 	.word	0x08030edc
 802196c:	200000f8 	.word	0x200000f8
 8021970:	08030f28 	.word	0x08030f28
 8021974:	08030f5c 	.word	0x08030f5c
 8021978:	20000004 	.word	0x20000004
 802197c:	20000140 	.word	0x20000140
 8021980:	08030e0c 	.word	0x08030e0c
 8021984:	08030f88 	.word	0x08030f88
 8021988:	2000013c 	.word	0x2000013c

0802198c <w25qFlashDriverDeInit>:
/**
 * @brief Deinitialize Flash Memory
 * @return Error code
 */
error_t w25qFlashDriverDeInit(void)
{
 802198c:	b590      	push	{r4, r7, lr}
 802198e:	b085      	sub	sp, #20
 8021990:	af02      	add	r7, sp, #8
    if (!driver_initialized) {
 8021992:	4b1d      	ldr	r3, [pc, #116]	@ (8021a08 <w25qFlashDriverDeInit+0x7c>)
 8021994:	781b      	ldrb	r3, [r3, #0]
 8021996:	f083 0301 	eor.w	r3, r3, #1
 802199a:	b2db      	uxtb	r3, r3
 802199c:	2b00      	cmp	r3, #0
 802199e:	d001      	beq.n	80219a4 <w25qFlashDriverDeInit+0x18>
        return NO_ERROR;
 80219a0:	2300      	movs	r3, #0
 80219a2:	e02d      	b.n	8021a00 <w25qFlashDriverDeInit+0x74>
    }

    w25q_err_t ret = w25q_deinit(&w25q_handle);
 80219a4:	4819      	ldr	r0, [pc, #100]	@ (8021a0c <w25qFlashDriverDeInit+0x80>)
 80219a6:	f008 fe22 	bl	802a5ee <w25q_deinit>
 80219aa:	4603      	mov	r3, r0
 80219ac:	71fb      	strb	r3, [r7, #7]
    if (ret != W25Q_OK) {
 80219ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80219b2:	2b00      	cmp	r3, #0
 80219b4:	d012      	beq.n	80219dc <w25qFlashDriverDeInit+0x50>
        STM32_LOGE(TAG, "Failed to deinitialize W25Q flash: %d", ret);
 80219b6:	4b16      	ldr	r3, [pc, #88]	@ (8021a10 <w25qFlashDriverDeInit+0x84>)
 80219b8:	681c      	ldr	r4, [r3, #0]
 80219ba:	f008 fb8d 	bl	802a0d8 <stm32_log_timestamp>
 80219be:	4601      	mov	r1, r0
 80219c0:	4b13      	ldr	r3, [pc, #76]	@ (8021a10 <w25qFlashDriverDeInit+0x84>)
 80219c2:	681b      	ldr	r3, [r3, #0]
 80219c4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80219c8:	9201      	str	r2, [sp, #4]
 80219ca:	9300      	str	r3, [sp, #0]
 80219cc:	460b      	mov	r3, r1
 80219ce:	4a11      	ldr	r2, [pc, #68]	@ (8021a14 <w25qFlashDriverDeInit+0x88>)
 80219d0:	4621      	mov	r1, r4
 80219d2:	2001      	movs	r0, #1
 80219d4:	f008 fb88 	bl	802a0e8 <stm32_log_write>
        return ERROR_FAILURE;
 80219d8:	2301      	movs	r3, #1
 80219da:	e011      	b.n	8021a00 <w25qFlashDriverDeInit+0x74>
    }

    driver_initialized = false;
 80219dc:	4b0a      	ldr	r3, [pc, #40]	@ (8021a08 <w25qFlashDriverDeInit+0x7c>)
 80219de:	2200      	movs	r2, #0
 80219e0:	701a      	strb	r2, [r3, #0]
    STM32_LOGI(TAG, "W25Q flash deinitialized");
 80219e2:	4b0b      	ldr	r3, [pc, #44]	@ (8021a10 <w25qFlashDriverDeInit+0x84>)
 80219e4:	681c      	ldr	r4, [r3, #0]
 80219e6:	f008 fb77 	bl	802a0d8 <stm32_log_timestamp>
 80219ea:	4602      	mov	r2, r0
 80219ec:	4b08      	ldr	r3, [pc, #32]	@ (8021a10 <w25qFlashDriverDeInit+0x84>)
 80219ee:	681b      	ldr	r3, [r3, #0]
 80219f0:	9300      	str	r3, [sp, #0]
 80219f2:	4613      	mov	r3, r2
 80219f4:	4a08      	ldr	r2, [pc, #32]	@ (8021a18 <w25qFlashDriverDeInit+0x8c>)
 80219f6:	4621      	mov	r1, r4
 80219f8:	2003      	movs	r0, #3
 80219fa:	f008 fb75 	bl	802a0e8 <stm32_log_write>
    return NO_ERROR;
 80219fe:	2300      	movs	r3, #0
}
 8021a00:	4618      	mov	r0, r3
 8021a02:	370c      	adds	r7, #12
 8021a04:	46bd      	mov	sp, r7
 8021a06:	bd90      	pop	{r4, r7, pc}
 8021a08:	2000013c 	.word	0x2000013c
 8021a0c:	200000f8 	.word	0x200000f8
 8021a10:	20000000 	.word	0x20000000
 8021a14:	08030fc8 	.word	0x08030fc8
 8021a18:	08030ffc 	.word	0x08030ffc

08021a1c <w25qFlashDriverGetInfo>:
 * @brief Get Flash Memory information
 * @param[in,out] info Pointer to the Memory information structure to be returned
 * @return Error code
 */
error_t w25qFlashDriverGetInfo(const FlashInfo **info)
{
 8021a1c:	b480      	push	{r7}
 8021a1e:	b083      	sub	sp, #12
 8021a20:	af00      	add	r7, sp, #0
 8021a22:	6078      	str	r0, [r7, #4]
    if (!driver_initialized) {
 8021a24:	4b09      	ldr	r3, [pc, #36]	@ (8021a4c <w25qFlashDriverGetInfo+0x30>)
 8021a26:	781b      	ldrb	r3, [r3, #0]
 8021a28:	f083 0301 	eor.w	r3, r3, #1
 8021a2c:	b2db      	uxtb	r3, r3
 8021a2e:	2b00      	cmp	r3, #0
 8021a30:	d001      	beq.n	8021a36 <w25qFlashDriverGetInfo+0x1a>
        return ERROR_FAILURE;
 8021a32:	2301      	movs	r3, #1
 8021a34:	e003      	b.n	8021a3e <w25qFlashDriverGetInfo+0x22>
    }

    // Set Memory information pointer
    *info = (const FlashInfo*) &w25qFlashDriverInfo;
 8021a36:	687b      	ldr	r3, [r7, #4]
 8021a38:	4a05      	ldr	r2, [pc, #20]	@ (8021a50 <w25qFlashDriverGetInfo+0x34>)
 8021a3a:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 8021a3c:	2300      	movs	r3, #0
}
 8021a3e:	4618      	mov	r0, r3
 8021a40:	370c      	adds	r7, #12
 8021a42:	46bd      	mov	sp, r7
 8021a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a48:	4770      	bx	lr
 8021a4a:	bf00      	nop
 8021a4c:	2000013c 	.word	0x2000013c
 8021a50:	20000004 	.word	0x20000004

08021a54 <w25qFlashDriverGetStatus>:
 * @brief Get Flash Memory status
 * @param[in,out] status Pointer to the Memory status to be returned
 * @return Error code
 */
error_t w25qFlashDriverGetStatus(FlashStatus *status)
{
 8021a54:	b590      	push	{r4, r7, lr}
 8021a56:	b087      	sub	sp, #28
 8021a58:	af02      	add	r7, sp, #8
 8021a5a:	6078      	str	r0, [r7, #4]
    uint8_t sr;
    w25q_err_t ret;

    if (!driver_initialized) {
 8021a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8021ad8 <w25qFlashDriverGetStatus+0x84>)
 8021a5e:	781b      	ldrb	r3, [r3, #0]
 8021a60:	f083 0301 	eor.w	r3, r3, #1
 8021a64:	b2db      	uxtb	r3, r3
 8021a66:	2b00      	cmp	r3, #0
 8021a68:	d001      	beq.n	8021a6e <w25qFlashDriverGetStatus+0x1a>
        return ERROR_FAILURE;
 8021a6a:	2301      	movs	r3, #1
 8021a6c:	e030      	b.n	8021ad0 <w25qFlashDriverGetStatus+0x7c>
    }

    if (status == NULL) {
 8021a6e:	687b      	ldr	r3, [r7, #4]
 8021a70:	2b00      	cmp	r3, #0
 8021a72:	d101      	bne.n	8021a78 <w25qFlashDriverGetStatus+0x24>
        return ERROR_INVALID_PARAMETER;
 8021a74:	2302      	movs	r3, #2
 8021a76:	e02b      	b.n	8021ad0 <w25qFlashDriverGetStatus+0x7c>
    }

    // Read status register
    ret = w25q_read_status(&w25q_handle, &sr);
 8021a78:	f107 030e 	add.w	r3, r7, #14
 8021a7c:	4619      	mov	r1, r3
 8021a7e:	4817      	ldr	r0, [pc, #92]	@ (8021adc <w25qFlashDriverGetStatus+0x88>)
 8021a80:	f008 fe86 	bl	802a790 <w25q_read_status>
 8021a84:	4603      	mov	r3, r0
 8021a86:	73fb      	strb	r3, [r7, #15]
    if (ret != W25Q_OK) {
 8021a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021a8c:	2b00      	cmp	r3, #0
 8021a8e:	d012      	beq.n	8021ab6 <w25qFlashDriverGetStatus+0x62>
        STM32_LOGE(TAG, "Failed to read status register: %d", ret);
 8021a90:	4b13      	ldr	r3, [pc, #76]	@ (8021ae0 <w25qFlashDriverGetStatus+0x8c>)
 8021a92:	681c      	ldr	r4, [r3, #0]
 8021a94:	f008 fb20 	bl	802a0d8 <stm32_log_timestamp>
 8021a98:	4601      	mov	r1, r0
 8021a9a:	4b11      	ldr	r3, [pc, #68]	@ (8021ae0 <w25qFlashDriverGetStatus+0x8c>)
 8021a9c:	681b      	ldr	r3, [r3, #0]
 8021a9e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8021aa2:	9201      	str	r2, [sp, #4]
 8021aa4:	9300      	str	r3, [sp, #0]
 8021aa6:	460b      	mov	r3, r1
 8021aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8021ae4 <w25qFlashDriverGetStatus+0x90>)
 8021aaa:	4621      	mov	r1, r4
 8021aac:	2001      	movs	r0, #1
 8021aae:	f008 fb1b 	bl	802a0e8 <stm32_log_write>
        return ERROR_FAILURE;
 8021ab2:	2301      	movs	r3, #1
 8021ab4:	e00c      	b.n	8021ad0 <w25qFlashDriverGetStatus+0x7c>
    }

    // Check busy bit
    if (sr & 0x01) {  // BUSY bit
 8021ab6:	7bbb      	ldrb	r3, [r7, #14]
 8021ab8:	f003 0301 	and.w	r3, r3, #1
 8021abc:	2b00      	cmp	r3, #0
 8021abe:	d003      	beq.n	8021ac8 <w25qFlashDriverGetStatus+0x74>
        *status = FLASH_STATUS_BUSY;
 8021ac0:	687b      	ldr	r3, [r7, #4]
 8021ac2:	2201      	movs	r2, #1
 8021ac4:	701a      	strb	r2, [r3, #0]
 8021ac6:	e002      	b.n	8021ace <w25qFlashDriverGetStatus+0x7a>
    } else {
        *status = FLASH_STATUS_OK;
 8021ac8:	687b      	ldr	r3, [r7, #4]
 8021aca:	2200      	movs	r2, #0
 8021acc:	701a      	strb	r2, [r3, #0]
    }

    return NO_ERROR;
 8021ace:	2300      	movs	r3, #0
}
 8021ad0:	4618      	mov	r0, r3
 8021ad2:	3714      	adds	r7, #20
 8021ad4:	46bd      	mov	sp, r7
 8021ad6:	bd90      	pop	{r4, r7, pc}
 8021ad8:	2000013c 	.word	0x2000013c
 8021adc:	200000f8 	.word	0x200000f8
 8021ae0:	20000000 	.word	0x20000000
 8021ae4:	08031024 	.word	0x08031024

08021ae8 <w25qFlashDriverWrite>:
 * @param[in] data Pointer to the data to write
 * @param[in] length Number of data bytes to write in
 * @return Error code
 */
error_t w25qFlashDriverWrite(uint32_t address, uint8_t* data, size_t length)
{
 8021ae8:	b590      	push	{r4, r7, lr}
 8021aea:	b08b      	sub	sp, #44	@ 0x2c
 8021aec:	af04      	add	r7, sp, #16
 8021aee:	60f8      	str	r0, [r7, #12]
 8021af0:	60b9      	str	r1, [r7, #8]
 8021af2:	607a      	str	r2, [r7, #4]
    w25q_err_t ret;
    uint32_t top_address;

    if (!driver_initialized) {
 8021af4:	4b29      	ldr	r3, [pc, #164]	@ (8021b9c <w25qFlashDriverWrite+0xb4>)
 8021af6:	781b      	ldrb	r3, [r3, #0]
 8021af8:	f083 0301 	eor.w	r3, r3, #1
 8021afc:	b2db      	uxtb	r3, r3
 8021afe:	2b00      	cmp	r3, #0
 8021b00:	d001      	beq.n	8021b06 <w25qFlashDriverWrite+0x1e>
        return ERROR_FAILURE;
 8021b02:	2301      	movs	r3, #1
 8021b04:	e045      	b.n	8021b92 <w25qFlashDriverWrite+0xaa>
    }

    // Precompute the top address
    top_address = W25Q_FLASH_ADDR + flash_capacity;
 8021b06:	4b26      	ldr	r3, [pc, #152]	@ (8021ba0 <w25qFlashDriverWrite+0xb8>)
 8021b08:	681b      	ldr	r3, [r3, #0]
 8021b0a:	617b      	str	r3, [r7, #20]

    // Check address validity
    if (address >= top_address) {
 8021b0c:	68fa      	ldr	r2, [r7, #12]
 8021b0e:	697b      	ldr	r3, [r7, #20]
 8021b10:	429a      	cmp	r2, r3
 8021b12:	d301      	bcc.n	8021b18 <w25qFlashDriverWrite+0x30>
        return ERROR_INVALID_PARAMETER;
 8021b14:	2302      	movs	r3, #2
 8021b16:	e03c      	b.n	8021b92 <w25qFlashDriverWrite+0xaa>
    }

    // Check parameters validity
    if (data == NULL || address + length > top_address) {
 8021b18:	68bb      	ldr	r3, [r7, #8]
 8021b1a:	2b00      	cmp	r3, #0
 8021b1c:	d005      	beq.n	8021b2a <w25qFlashDriverWrite+0x42>
 8021b1e:	68fa      	ldr	r2, [r7, #12]
 8021b20:	687b      	ldr	r3, [r7, #4]
 8021b22:	4413      	add	r3, r2
 8021b24:	697a      	ldr	r2, [r7, #20]
 8021b26:	429a      	cmp	r2, r3
 8021b28:	d201      	bcs.n	8021b2e <w25qFlashDriverWrite+0x46>
        return ERROR_INVALID_PARAMETER;
 8021b2a:	2302      	movs	r3, #2
 8021b2c:	e031      	b.n	8021b92 <w25qFlashDriverWrite+0xaa>
    }

    STM32_LOGD(TAG, "Write process: 0x%lX (%lu bytes)", address, length);
 8021b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8021ba4 <w25qFlashDriverWrite+0xbc>)
 8021b30:	681c      	ldr	r4, [r3, #0]
 8021b32:	f008 fad1 	bl	802a0d8 <stm32_log_timestamp>
 8021b36:	4601      	mov	r1, r0
 8021b38:	4b1a      	ldr	r3, [pc, #104]	@ (8021ba4 <w25qFlashDriverWrite+0xbc>)
 8021b3a:	681b      	ldr	r3, [r3, #0]
 8021b3c:	687a      	ldr	r2, [r7, #4]
 8021b3e:	9202      	str	r2, [sp, #8]
 8021b40:	68fa      	ldr	r2, [r7, #12]
 8021b42:	9201      	str	r2, [sp, #4]
 8021b44:	9300      	str	r3, [sp, #0]
 8021b46:	460b      	mov	r3, r1
 8021b48:	4a17      	ldr	r2, [pc, #92]	@ (8021ba8 <w25qFlashDriverWrite+0xc0>)
 8021b4a:	4621      	mov	r1, r4
 8021b4c:	2004      	movs	r0, #4
 8021b4e:	f008 facb 	bl	802a0e8 <stm32_log_write>

    // Perform write operation using W25Q library
    ret = w25q_write(&w25q_handle, address, data, length);
 8021b52:	687b      	ldr	r3, [r7, #4]
 8021b54:	68ba      	ldr	r2, [r7, #8]
 8021b56:	68f9      	ldr	r1, [r7, #12]
 8021b58:	4814      	ldr	r0, [pc, #80]	@ (8021bac <w25qFlashDriverWrite+0xc4>)
 8021b5a:	f009 f864 	bl	802ac26 <w25q_write>
 8021b5e:	4603      	mov	r3, r0
 8021b60:	74fb      	strb	r3, [r7, #19]
    if (ret != W25Q_OK) {
 8021b62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8021b66:	2b00      	cmp	r3, #0
 8021b68:	d012      	beq.n	8021b90 <w25qFlashDriverWrite+0xa8>
        STM32_LOGE(TAG, "Failed to write flash: %d", ret);
 8021b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8021ba4 <w25qFlashDriverWrite+0xbc>)
 8021b6c:	681c      	ldr	r4, [r3, #0]
 8021b6e:	f008 fab3 	bl	802a0d8 <stm32_log_timestamp>
 8021b72:	4601      	mov	r1, r0
 8021b74:	4b0b      	ldr	r3, [pc, #44]	@ (8021ba4 <w25qFlashDriverWrite+0xbc>)
 8021b76:	681b      	ldr	r3, [r3, #0]
 8021b78:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8021b7c:	9201      	str	r2, [sp, #4]
 8021b7e:	9300      	str	r3, [sp, #0]
 8021b80:	460b      	mov	r3, r1
 8021b82:	4a0b      	ldr	r2, [pc, #44]	@ (8021bb0 <w25qFlashDriverWrite+0xc8>)
 8021b84:	4621      	mov	r1, r4
 8021b86:	2001      	movs	r0, #1
 8021b88:	f008 faae 	bl	802a0e8 <stm32_log_write>
        return ERROR_FAILURE;
 8021b8c:	2301      	movs	r3, #1
 8021b8e:	e000      	b.n	8021b92 <w25qFlashDriverWrite+0xaa>
    }

    return NO_ERROR;
 8021b90:	2300      	movs	r3, #0
}
 8021b92:	4618      	mov	r0, r3
 8021b94:	371c      	adds	r7, #28
 8021b96:	46bd      	mov	sp, r7
 8021b98:	bd90      	pop	{r4, r7, pc}
 8021b9a:	bf00      	nop
 8021b9c:	2000013c 	.word	0x2000013c
 8021ba0:	20000140 	.word	0x20000140
 8021ba4:	20000000 	.word	0x20000000
 8021ba8:	08031054 	.word	0x08031054
 8021bac:	200000f8 	.word	0x200000f8
 8021bb0:	08031084 	.word	0x08031084

08021bb4 <w25qFlashDriverRead>:
 * @param[in] data Buffer to store read data
 * @param[in] length Number of data bytes to read out
 * @return Error code
 */
error_t w25qFlashDriverRead(uint32_t address, uint8_t* data, size_t length)
{
 8021bb4:	b590      	push	{r4, r7, lr}
 8021bb6:	b08b      	sub	sp, #44	@ 0x2c
 8021bb8:	af04      	add	r7, sp, #16
 8021bba:	60f8      	str	r0, [r7, #12]
 8021bbc:	60b9      	str	r1, [r7, #8]
 8021bbe:	607a      	str	r2, [r7, #4]
    w25q_err_t ret;
    uint32_t top_address;

    if (!driver_initialized) {
 8021bc0:	4b29      	ldr	r3, [pc, #164]	@ (8021c68 <w25qFlashDriverRead+0xb4>)
 8021bc2:	781b      	ldrb	r3, [r3, #0]
 8021bc4:	f083 0301 	eor.w	r3, r3, #1
 8021bc8:	b2db      	uxtb	r3, r3
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	d001      	beq.n	8021bd2 <w25qFlashDriverRead+0x1e>
        return ERROR_FAILURE;
 8021bce:	2301      	movs	r3, #1
 8021bd0:	e045      	b.n	8021c5e <w25qFlashDriverRead+0xaa>
    }

    // Precompute the top address
    top_address = W25Q_FLASH_ADDR + flash_capacity;
 8021bd2:	4b26      	ldr	r3, [pc, #152]	@ (8021c6c <w25qFlashDriverRead+0xb8>)
 8021bd4:	681b      	ldr	r3, [r3, #0]
 8021bd6:	617b      	str	r3, [r7, #20]

    // Check address validity
    if (address >= top_address) {
 8021bd8:	68fa      	ldr	r2, [r7, #12]
 8021bda:	697b      	ldr	r3, [r7, #20]
 8021bdc:	429a      	cmp	r2, r3
 8021bde:	d301      	bcc.n	8021be4 <w25qFlashDriverRead+0x30>
        return ERROR_INVALID_PARAMETER;
 8021be0:	2302      	movs	r3, #2
 8021be2:	e03c      	b.n	8021c5e <w25qFlashDriverRead+0xaa>
    }

    // Check parameters validity
    if (data == NULL || address + length > top_address) {
 8021be4:	68bb      	ldr	r3, [r7, #8]
 8021be6:	2b00      	cmp	r3, #0
 8021be8:	d005      	beq.n	8021bf6 <w25qFlashDriverRead+0x42>
 8021bea:	68fa      	ldr	r2, [r7, #12]
 8021bec:	687b      	ldr	r3, [r7, #4]
 8021bee:	4413      	add	r3, r2
 8021bf0:	697a      	ldr	r2, [r7, #20]
 8021bf2:	429a      	cmp	r2, r3
 8021bf4:	d201      	bcs.n	8021bfa <w25qFlashDriverRead+0x46>
        return ERROR_INVALID_PARAMETER;
 8021bf6:	2302      	movs	r3, #2
 8021bf8:	e031      	b.n	8021c5e <w25qFlashDriverRead+0xaa>
    }

    STM32_LOGD(TAG, "Read process: 0x%lX (%lu bytes)", address, length);
 8021bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8021c70 <w25qFlashDriverRead+0xbc>)
 8021bfc:	681c      	ldr	r4, [r3, #0]
 8021bfe:	f008 fa6b 	bl	802a0d8 <stm32_log_timestamp>
 8021c02:	4601      	mov	r1, r0
 8021c04:	4b1a      	ldr	r3, [pc, #104]	@ (8021c70 <w25qFlashDriverRead+0xbc>)
 8021c06:	681b      	ldr	r3, [r3, #0]
 8021c08:	687a      	ldr	r2, [r7, #4]
 8021c0a:	9202      	str	r2, [sp, #8]
 8021c0c:	68fa      	ldr	r2, [r7, #12]
 8021c0e:	9201      	str	r2, [sp, #4]
 8021c10:	9300      	str	r3, [sp, #0]
 8021c12:	460b      	mov	r3, r1
 8021c14:	4a17      	ldr	r2, [pc, #92]	@ (8021c74 <w25qFlashDriverRead+0xc0>)
 8021c16:	4621      	mov	r1, r4
 8021c18:	2004      	movs	r0, #4
 8021c1a:	f008 fa65 	bl	802a0e8 <stm32_log_write>

    // Perform read operation using W25Q library
    ret = w25q_read(&w25q_handle, address, data, length);
 8021c1e:	687b      	ldr	r3, [r7, #4]
 8021c20:	68ba      	ldr	r2, [r7, #8]
 8021c22:	68f9      	ldr	r1, [r7, #12]
 8021c24:	4814      	ldr	r0, [pc, #80]	@ (8021c78 <w25qFlashDriverRead+0xc4>)
 8021c26:	f008 fe74 	bl	802a912 <w25q_read>
 8021c2a:	4603      	mov	r3, r0
 8021c2c:	74fb      	strb	r3, [r7, #19]
    if (ret != W25Q_OK) {
 8021c2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8021c32:	2b00      	cmp	r3, #0
 8021c34:	d012      	beq.n	8021c5c <w25qFlashDriverRead+0xa8>
        STM32_LOGE(TAG, "Failed to read flash: %d", ret);
 8021c36:	4b0e      	ldr	r3, [pc, #56]	@ (8021c70 <w25qFlashDriverRead+0xbc>)
 8021c38:	681c      	ldr	r4, [r3, #0]
 8021c3a:	f008 fa4d 	bl	802a0d8 <stm32_log_timestamp>
 8021c3e:	4601      	mov	r1, r0
 8021c40:	4b0b      	ldr	r3, [pc, #44]	@ (8021c70 <w25qFlashDriverRead+0xbc>)
 8021c42:	681b      	ldr	r3, [r3, #0]
 8021c44:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8021c48:	9201      	str	r2, [sp, #4]
 8021c4a:	9300      	str	r3, [sp, #0]
 8021c4c:	460b      	mov	r3, r1
 8021c4e:	4a0b      	ldr	r2, [pc, #44]	@ (8021c7c <w25qFlashDriverRead+0xc8>)
 8021c50:	4621      	mov	r1, r4
 8021c52:	2001      	movs	r0, #1
 8021c54:	f008 fa48 	bl	802a0e8 <stm32_log_write>
        return ERROR_FAILURE;
 8021c58:	2301      	movs	r3, #1
 8021c5a:	e000      	b.n	8021c5e <w25qFlashDriverRead+0xaa>
    }

    return NO_ERROR;
 8021c5c:	2300      	movs	r3, #0
}
 8021c5e:	4618      	mov	r0, r3
 8021c60:	371c      	adds	r7, #28
 8021c62:	46bd      	mov	sp, r7
 8021c64:	bd90      	pop	{r4, r7, pc}
 8021c66:	bf00      	nop
 8021c68:	2000013c 	.word	0x2000013c
 8021c6c:	20000140 	.word	0x20000140
 8021c70:	20000000 	.word	0x20000000
 8021c74:	080310ac 	.word	0x080310ac
 8021c78:	200000f8 	.word	0x200000f8
 8021c7c:	080310dc 	.word	0x080310dc

08021c80 <w25qFlashDriverErase>:
 * @param[in] address Memory start erase address
 * @param[in] length Number of data bytes to be erased
 * @return Error code
 */
error_t w25qFlashDriverErase(uint32_t address, size_t length)
{
 8021c80:	b590      	push	{r4, r7, lr}
 8021c82:	b08f      	sub	sp, #60	@ 0x3c
 8021c84:	af04      	add	r7, sp, #16
 8021c86:	6078      	str	r0, [r7, #4]
 8021c88:	6039      	str	r1, [r7, #0]
    w25q_err_t ret;
    uint32_t top_address;
    uint32_t current_addr;
    size_t remaining;

    if (!driver_initialized) {
 8021c8a:	4b44      	ldr	r3, [pc, #272]	@ (8021d9c <w25qFlashDriverErase+0x11c>)
 8021c8c:	781b      	ldrb	r3, [r3, #0]
 8021c8e:	f083 0301 	eor.w	r3, r3, #1
 8021c92:	b2db      	uxtb	r3, r3
 8021c94:	2b00      	cmp	r3, #0
 8021c96:	d001      	beq.n	8021c9c <w25qFlashDriverErase+0x1c>
        return ERROR_FAILURE;
 8021c98:	2301      	movs	r3, #1
 8021c9a:	e07b      	b.n	8021d94 <w25qFlashDriverErase+0x114>
    }

    // Precompute the top address
    top_address = W25Q_FLASH_ADDR + flash_capacity;
 8021c9c:	4b40      	ldr	r3, [pc, #256]	@ (8021da0 <w25qFlashDriverErase+0x120>)
 8021c9e:	681b      	ldr	r3, [r3, #0]
 8021ca0:	61fb      	str	r3, [r7, #28]

    // Check address validity
    if (address >= top_address) {
 8021ca2:	687a      	ldr	r2, [r7, #4]
 8021ca4:	69fb      	ldr	r3, [r7, #28]
 8021ca6:	429a      	cmp	r2, r3
 8021ca8:	d301      	bcc.n	8021cae <w25qFlashDriverErase+0x2e>
        return ERROR_INVALID_PARAMETER;
 8021caa:	2302      	movs	r3, #2
 8021cac:	e072      	b.n	8021d94 <w25qFlashDriverErase+0x114>
    }

    // Check parameters validity
    if (address + length > top_address) {
 8021cae:	687a      	ldr	r2, [r7, #4]
 8021cb0:	683b      	ldr	r3, [r7, #0]
 8021cb2:	4413      	add	r3, r2
 8021cb4:	69fa      	ldr	r2, [r7, #28]
 8021cb6:	429a      	cmp	r2, r3
 8021cb8:	d201      	bcs.n	8021cbe <w25qFlashDriverErase+0x3e>
        return ERROR_INVALID_PARAMETER;
 8021cba:	2302      	movs	r3, #2
 8021cbc:	e06a      	b.n	8021d94 <w25qFlashDriverErase+0x114>
    }

    STM32_LOGI(TAG, "Erase process: 0x%lX (%lu bytes)", address, length);
 8021cbe:	4b39      	ldr	r3, [pc, #228]	@ (8021da4 <w25qFlashDriverErase+0x124>)
 8021cc0:	681c      	ldr	r4, [r3, #0]
 8021cc2:	f008 fa09 	bl	802a0d8 <stm32_log_timestamp>
 8021cc6:	4601      	mov	r1, r0
 8021cc8:	4b36      	ldr	r3, [pc, #216]	@ (8021da4 <w25qFlashDriverErase+0x124>)
 8021cca:	681b      	ldr	r3, [r3, #0]
 8021ccc:	683a      	ldr	r2, [r7, #0]
 8021cce:	9202      	str	r2, [sp, #8]
 8021cd0:	687a      	ldr	r2, [r7, #4]
 8021cd2:	9201      	str	r2, [sp, #4]
 8021cd4:	9300      	str	r3, [sp, #0]
 8021cd6:	460b      	mov	r3, r1
 8021cd8:	4a33      	ldr	r2, [pc, #204]	@ (8021da8 <w25qFlashDriverErase+0x128>)
 8021cda:	4621      	mov	r1, r4
 8021cdc:	2003      	movs	r0, #3
 8021cde:	f008 fa03 	bl	802a0e8 <stm32_log_write>

    // Align address to sector boundary and adjust length
    uint32_t sector_size = 4096;  // Standard W25Q sector size
 8021ce2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021ce6:	61bb      	str	r3, [r7, #24]
    uint32_t start_sector = address / sector_size;
 8021ce8:	687a      	ldr	r2, [r7, #4]
 8021cea:	69bb      	ldr	r3, [r7, #24]
 8021cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8021cf0:	617b      	str	r3, [r7, #20]
    uint32_t end_sector = (address + length - 1) / sector_size;
 8021cf2:	687a      	ldr	r2, [r7, #4]
 8021cf4:	683b      	ldr	r3, [r7, #0]
 8021cf6:	4413      	add	r3, r2
 8021cf8:	1e5a      	subs	r2, r3, #1
 8021cfa:	69bb      	ldr	r3, [r7, #24]
 8021cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8021d00:	613b      	str	r3, [r7, #16]

    current_addr = start_sector * sector_size;
 8021d02:	697b      	ldr	r3, [r7, #20]
 8021d04:	69ba      	ldr	r2, [r7, #24]
 8021d06:	fb02 f303 	mul.w	r3, r2, r3
 8021d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    remaining = (end_sector - start_sector + 1) * sector_size;
 8021d0c:	693a      	ldr	r2, [r7, #16]
 8021d0e:	697b      	ldr	r3, [r7, #20]
 8021d10:	1ad3      	subs	r3, r2, r3
 8021d12:	1c5a      	adds	r2, r3, #1
 8021d14:	69bb      	ldr	r3, [r7, #24]
 8021d16:	fb02 f303 	mul.w	r3, r2, r3
 8021d1a:	623b      	str	r3, [r7, #32]

    // Perform erase operation sector by sector
    while (remaining > 0) {
 8021d1c:	e036      	b.n	8021d8c <w25qFlashDriverErase+0x10c>
        STM32_LOGD(TAG, "Erasing sector: 0x%lX", current_addr);
 8021d1e:	4b21      	ldr	r3, [pc, #132]	@ (8021da4 <w25qFlashDriverErase+0x124>)
 8021d20:	681c      	ldr	r4, [r3, #0]
 8021d22:	f008 f9d9 	bl	802a0d8 <stm32_log_timestamp>
 8021d26:	4601      	mov	r1, r0
 8021d28:	4b1e      	ldr	r3, [pc, #120]	@ (8021da4 <w25qFlashDriverErase+0x124>)
 8021d2a:	681b      	ldr	r3, [r3, #0]
 8021d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021d2e:	9201      	str	r2, [sp, #4]
 8021d30:	9300      	str	r3, [sp, #0]
 8021d32:	460b      	mov	r3, r1
 8021d34:	4a1d      	ldr	r2, [pc, #116]	@ (8021dac <w25qFlashDriverErase+0x12c>)
 8021d36:	4621      	mov	r1, r4
 8021d38:	2004      	movs	r0, #4
 8021d3a:	f008 f9d5 	bl	802a0e8 <stm32_log_write>

        ret = w25q_erase_sector(&w25q_handle, current_addr);
 8021d3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8021d40:	481b      	ldr	r0, [pc, #108]	@ (8021db0 <w25qFlashDriverErase+0x130>)
 8021d42:	f008 ffcf 	bl	802ace4 <w25q_erase_sector>
 8021d46:	4603      	mov	r3, r0
 8021d48:	73fb      	strb	r3, [r7, #15]
        if (ret != W25Q_OK) {
 8021d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021d4e:	2b00      	cmp	r3, #0
 8021d50:	d014      	beq.n	8021d7c <w25qFlashDriverErase+0xfc>
            STM32_LOGE(TAG, "Failed to erase sector 0x%lX: %d", current_addr, ret);
 8021d52:	4b14      	ldr	r3, [pc, #80]	@ (8021da4 <w25qFlashDriverErase+0x124>)
 8021d54:	681c      	ldr	r4, [r3, #0]
 8021d56:	f008 f9bf 	bl	802a0d8 <stm32_log_timestamp>
 8021d5a:	4601      	mov	r1, r0
 8021d5c:	4b11      	ldr	r3, [pc, #68]	@ (8021da4 <w25qFlashDriverErase+0x124>)
 8021d5e:	681b      	ldr	r3, [r3, #0]
 8021d60:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8021d64:	9202      	str	r2, [sp, #8]
 8021d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021d68:	9201      	str	r2, [sp, #4]
 8021d6a:	9300      	str	r3, [sp, #0]
 8021d6c:	460b      	mov	r3, r1
 8021d6e:	4a11      	ldr	r2, [pc, #68]	@ (8021db4 <w25qFlashDriverErase+0x134>)
 8021d70:	4621      	mov	r1, r4
 8021d72:	2001      	movs	r0, #1
 8021d74:	f008 f9b8 	bl	802a0e8 <stm32_log_write>
            return ERROR_FAILURE;
 8021d78:	2301      	movs	r3, #1
 8021d7a:	e00b      	b.n	8021d94 <w25qFlashDriverErase+0x114>
        }

        current_addr += sector_size;
 8021d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021d7e:	69bb      	ldr	r3, [r7, #24]
 8021d80:	4413      	add	r3, r2
 8021d82:	627b      	str	r3, [r7, #36]	@ 0x24
        remaining -= sector_size;
 8021d84:	6a3a      	ldr	r2, [r7, #32]
 8021d86:	69bb      	ldr	r3, [r7, #24]
 8021d88:	1ad3      	subs	r3, r2, r3
 8021d8a:	623b      	str	r3, [r7, #32]
    while (remaining > 0) {
 8021d8c:	6a3b      	ldr	r3, [r7, #32]
 8021d8e:	2b00      	cmp	r3, #0
 8021d90:	d1c5      	bne.n	8021d1e <w25qFlashDriverErase+0x9e>
    }

    return NO_ERROR;
 8021d92:	2300      	movs	r3, #0
}
 8021d94:	4618      	mov	r0, r3
 8021d96:	372c      	adds	r7, #44	@ 0x2c
 8021d98:	46bd      	mov	sp, r7
 8021d9a:	bd90      	pop	{r4, r7, pc}
 8021d9c:	2000013c 	.word	0x2000013c
 8021da0:	20000140 	.word	0x20000140
 8021da4:	20000000 	.word	0x20000000
 8021da8:	08031104 	.word	0x08031104
 8021dac:	08031134 	.word	0x08031134
 8021db0:	200000f8 	.word	0x200000f8
 8021db4:	08031158 	.word	0x08031158

08021db8 <w25qFlashDriverSectorAddr>:
 * @brief Check if address is a sector start address
 * @param[in] address Address to check
 * @return TRUE if sector address, FALSE otherwise
 */
bool_t w25qFlashDriverSectorAddr(uint32_t address)
{
 8021db8:	b480      	push	{r7}
 8021dba:	b083      	sub	sp, #12
 8021dbc:	af00      	add	r7, sp, #0
 8021dbe:	6078      	str	r0, [r7, #4]
    // Check if address is aligned to 4KB sector boundary
    return (address % 4096 == 0) ? TRUE : FALSE;
 8021dc0:	687b      	ldr	r3, [r7, #4]
 8021dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021dc6:	2b00      	cmp	r3, #0
 8021dc8:	bf0c      	ite	eq
 8021dca:	2301      	moveq	r3, #1
 8021dcc:	2300      	movne	r3, #0
 8021dce:	b2db      	uxtb	r3, r3
}
 8021dd0:	4618      	mov	r0, r3
 8021dd2:	370c      	adds	r7, #12
 8021dd4:	46bd      	mov	sp, r7
 8021dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dda:	4770      	bx	lr

08021ddc <stm32f4xxFlashDriverInit>:
 * @brief Initialize Flash Memory.
 * @return Error code
 **/

error_t stm32f4xxFlashDriverInit(void)
{
 8021ddc:	b580      	push	{r7, lr}
 8021dde:	af00      	add	r7, sp, #0
   //Debug message
   TRACE_INFO("Initializing %s memory...\r\n", STM32F4xx_NAME);
 8021de0:	f7ff faea 	bl	80213b8 <osSuspendAllTasks>
 8021de4:	4b08      	ldr	r3, [pc, #32]	@ (8021e08 <stm32f4xxFlashDriverInit+0x2c>)
 8021de6:	681b      	ldr	r3, [r3, #0]
 8021de8:	68db      	ldr	r3, [r3, #12]
 8021dea:	4a08      	ldr	r2, [pc, #32]	@ (8021e0c <stm32f4xxFlashDriverInit+0x30>)
 8021dec:	4908      	ldr	r1, [pc, #32]	@ (8021e10 <stm32f4xxFlashDriverInit+0x34>)
 8021dee:	4618      	mov	r0, r3
 8021df0:	f00e f968 	bl	80300c4 <fiprintf>
 8021df4:	f7ff fae7 	bl	80213c6 <osResumeAllTasks>

   //Initialize FLASH flags
   //(Patch to fix stm32 hal library wrong initial flash flags issue)
   FLASH_WaitForLastOperation((uint32_t)50000U);
 8021df8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8021dfc:	f00b f85c 	bl	802ceb8 <FLASH_WaitForLastOperation>

   //Successfull process
   return NO_ERROR;
 8021e00:	2300      	movs	r3, #0
}
 8021e02:	4618      	mov	r0, r3
 8021e04:	bd80      	pop	{r7, pc}
 8021e06:	bf00      	nop
 8021e08:	2000008c 	.word	0x2000008c
 8021e0c:	08031188 	.word	0x08031188
 8021e10:	080311a4 	.word	0x080311a4

08021e14 <stm32f4xxFlashDriverDeInit>:
 * @brief De-Initialize Flash Memory.
 * @return Error code
 **/

error_t stm32f4xxFlashDriverDeInit(void)
{
 8021e14:	b480      	push	{r7}
 8021e16:	af00      	add	r7, sp, #0
   return ERROR_NOT_IMPLEMENTED;
 8021e18:	2367      	movs	r3, #103	@ 0x67
}
 8021e1a:	4618      	mov	r0, r3
 8021e1c:	46bd      	mov	sp, r7
 8021e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e22:	4770      	bx	lr

08021e24 <stm32f4xxFlashDriverGetInfo>:
 * @param[in,out] info Pointeur to the Memory information structure to be returned
 * @return Error code
 **/

error_t stm32f4xxFlashDriverGetInfo(const FlashInfo **info)
{
 8021e24:	b480      	push	{r7}
 8021e26:	b083      	sub	sp, #12
 8021e28:	af00      	add	r7, sp, #0
 8021e2a:	6078      	str	r0, [r7, #4]
   //Set Memory information pointeur
   *info = (const FlashInfo*) &stm32f4xxFlashDriverInfo;
 8021e2c:	687b      	ldr	r3, [r7, #4]
 8021e2e:	4a04      	ldr	r2, [pc, #16]	@ (8021e40 <stm32f4xxFlashDriverGetInfo+0x1c>)
 8021e30:	601a      	str	r2, [r3, #0]

   //Successfull process
   return NO_ERROR;
 8021e32:	2300      	movs	r3, #0
}
 8021e34:	4618      	mov	r0, r3
 8021e36:	370c      	adds	r7, #12
 8021e38:	46bd      	mov	sp, r7
 8021e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e3e:	4770      	bx	lr
 8021e40:	08032374 	.word	0x08032374

08021e44 <stm32f4xxFlashDriverGetStatus>:
 * @param[in,out] status Pointeur to the Memory status to be returned
 * @return Error code
 **/

error_t stm32f4xxFlashDriverGetStatus(FlashStatus *status)
{
 8021e44:	b480      	push	{r7}
 8021e46:	b085      	sub	sp, #20
 8021e48:	af00      	add	r7, sp, #0
 8021e4a:	6078      	str	r0, [r7, #4]
   uint32_t flag;

   //Check parameter vailidity
   if(status == NULL)
 8021e4c:	687b      	ldr	r3, [r7, #4]
 8021e4e:	2b00      	cmp	r3, #0
 8021e50:	d101      	bne.n	8021e56 <stm32f4xxFlashDriverGetStatus+0x12>
      return ERROR_INVALID_PARAMETER;
 8021e52:	2302      	movs	r3, #2
 8021e54:	e01b      	b.n	8021e8e <stm32f4xxFlashDriverGetStatus+0x4a>

   do
   {
      //Get Flash Memory error flags status
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR |
 8021e56:	4b11      	ldr	r3, [pc, #68]	@ (8021e9c <stm32f4xxFlashDriverGetStatus+0x58>)
 8021e58:	68db      	ldr	r3, [r3, #12]
 8021e5a:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8021e5e:	60fb      	str	r3, [r7, #12]
                        FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
                        FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

      //Is any error flag set?
      if(flag != RESET)
 8021e60:	68fb      	ldr	r3, [r7, #12]
 8021e62:	2b00      	cmp	r3, #0
 8021e64:	d003      	beq.n	8021e6e <stm32f4xxFlashDriverGetStatus+0x2a>
      {
         //Set Flash memory status
         *status = FLASH_STATUS_ERR;
 8021e66:	687b      	ldr	r3, [r7, #4]
 8021e68:	2202      	movs	r2, #2
 8021e6a:	701a      	strb	r2, [r3, #0]
         break;
 8021e6c:	e00e      	b.n	8021e8c <stm32f4xxFlashDriverGetStatus+0x48>
      }

      //Get Flash Memory busy flags
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY);
 8021e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8021e9c <stm32f4xxFlashDriverGetStatus+0x58>)
 8021e70:	68db      	ldr	r3, [r3, #12]
 8021e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8021e76:	60fb      	str	r3, [r7, #12]
      //Is busy flag set?
      if(flag != RESET)
 8021e78:	68fb      	ldr	r3, [r7, #12]
 8021e7a:	2b00      	cmp	r3, #0
 8021e7c:	d003      	beq.n	8021e86 <stm32f4xxFlashDriverGetStatus+0x42>
      {
         //Set Flash memory status
         *status = FLASH_STATUS_BUSY;
 8021e7e:	687b      	ldr	r3, [r7, #4]
 8021e80:	2201      	movs	r2, #1
 8021e82:	701a      	strb	r2, [r3, #0]
         break;
 8021e84:	e002      	b.n	8021e8c <stm32f4xxFlashDriverGetStatus+0x48>
      }

      //Set Flash memory status
      *status = FLASH_STATUS_OK;
 8021e86:	687b      	ldr	r3, [r7, #4]
 8021e88:	2200      	movs	r2, #0
 8021e8a:	701a      	strb	r2, [r3, #0]
   }while(0);

   //Successfull process
   return NO_ERROR;
 8021e8c:	2300      	movs	r3, #0
}
 8021e8e:	4618      	mov	r0, r3
 8021e90:	3714      	adds	r7, #20
 8021e92:	46bd      	mov	sp, r7
 8021e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e98:	4770      	bx	lr
 8021e9a:	bf00      	nop
 8021e9c:	40023c00 	.word	0x40023c00

08021ea0 <stm32f4xxFlashDriverWrite>:
 * @param[in] length Number of data bytes to write in
 * @return Error code
 **/

error_t stm32f4xxFlashDriverWrite(uint32_t address, uint8_t* data, size_t length)
{
 8021ea0:	b580      	push	{r7, lr}
 8021ea2:	b08a      	sub	sp, #40	@ 0x28
 8021ea4:	af00      	add	r7, sp, #0
 8021ea6:	60f8      	str	r0, [r7, #12]
 8021ea8:	60b9      	str	r1, [r7, #8]
 8021eaa:	607a      	str	r2, [r7, #4]
   const uint8_t *p;
   uint8_t word[4];
   size_t n;

   //Precompute the top address
   topAddress = STM32F4xx_ADDR + STM32F4xx_SIZE;
 8021eac:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8021eb0:	623b      	str	r3, [r7, #32]

   //Check address validity
   if((address < STM32F4xx_ADDR || address >= topAddress) ||
 8021eb2:	68fb      	ldr	r3, [r7, #12]
 8021eb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021eb8:	d308      	bcc.n	8021ecc <stm32f4xxFlashDriverWrite+0x2c>
 8021eba:	68fa      	ldr	r2, [r7, #12]
 8021ebc:	6a3b      	ldr	r3, [r7, #32]
 8021ebe:	429a      	cmp	r2, r3
 8021ec0:	d204      	bcs.n	8021ecc <stm32f4xxFlashDriverWrite+0x2c>
      (address % sizeof(uint32_t) != 0))
 8021ec2:	68fb      	ldr	r3, [r7, #12]
 8021ec4:	f003 0303 	and.w	r3, r3, #3
   if((address < STM32F4xx_ADDR || address >= topAddress) ||
 8021ec8:	2b00      	cmp	r3, #0
 8021eca:	d001      	beq.n	8021ed0 <stm32f4xxFlashDriverWrite+0x30>
      return ERROR_INVALID_PARAMETER;
 8021ecc:	2302      	movs	r3, #2
 8021ece:	e04d      	b.n	8021f6c <stm32f4xxFlashDriverWrite+0xcc>

#ifndef FLASH_DB_MODE
   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 8021ed0:	68bb      	ldr	r3, [r7, #8]
 8021ed2:	2b00      	cmp	r3, #0
 8021ed4:	d005      	beq.n	8021ee2 <stm32f4xxFlashDriverWrite+0x42>
 8021ed6:	68fa      	ldr	r2, [r7, #12]
 8021ed8:	687b      	ldr	r3, [r7, #4]
 8021eda:	4413      	add	r3, r2
 8021edc:	6a3a      	ldr	r2, [r7, #32]
 8021ede:	429a      	cmp	r2, r3
 8021ee0:	d201      	bcs.n	8021ee6 <stm32f4xxFlashDriverWrite+0x46>
      return ERROR_INVALID_PARAMETER;
 8021ee2:	2302      	movs	r3, #2
 8021ee4:	e042      	b.n	8021f6c <stm32f4xxFlashDriverWrite+0xcc>
   TRACE_DEBUG("Writing data (%d bytes) at 0x%08X\r\n", length, address);
   TRACE_DEBUG_ARRAY("WRITE DATA: ", data, length);


   //Cast data pointer
   p = (const uint8_t*) data;
 8021ee6:	68bb      	ldr	r3, [r7, #8]
 8021ee8:	627b      	str	r3, [r7, #36]	@ 0x24

   //Perform write operation
   while(length > 0)
 8021eea:	e03b      	b.n	8021f64 <stm32f4xxFlashDriverWrite+0xc4>
   {
      //Prevent to write more than 4 bytes at a time
      n = MIN(sizeof(word), length);
 8021eec:	687b      	ldr	r3, [r7, #4]
 8021eee:	2b04      	cmp	r3, #4
 8021ef0:	bf28      	it	cs
 8021ef2:	2304      	movcs	r3, #4
 8021ef4:	61fb      	str	r3, [r7, #28]

      //Check if remaining bytes is less than 4 (32bits word)
      if(n < sizeof(uint32_t))
 8021ef6:	69fb      	ldr	r3, [r7, #28]
 8021ef8:	2b03      	cmp	r3, #3
 8021efa:	d806      	bhi.n	8021f0a <stm32f4xxFlashDriverWrite+0x6a>
         memset(word, 0, sizeof(word));
 8021efc:	f107 0314 	add.w	r3, r7, #20
 8021f00:	2204      	movs	r2, #4
 8021f02:	2100      	movs	r1, #0
 8021f04:	4618      	mov	r0, r3
 8021f06:	f00e fa4f 	bl	80303a8 <memset>

      //Copy n bytes
      memcpy(word, p, n);
 8021f0a:	f107 0314 	add.w	r3, r7, #20
 8021f0e:	69fa      	ldr	r2, [r7, #28]
 8021f10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8021f12:	4618      	mov	r0, r3
 8021f14:	f00e fb0d 	bl	8030532 <memcpy>

      //Program 32-bit word in flash memory
      error = stm32f4xxFlashDriverWriteWord(address, *((uint32_t*)word));
 8021f18:	f107 0314 	add.w	r3, r7, #20
 8021f1c:	681b      	ldr	r3, [r3, #0]
 8021f1e:	4619      	mov	r1, r3
 8021f20:	68f8      	ldr	r0, [r7, #12]
 8021f22:	f000 f9d7 	bl	80222d4 <stm32f4xxFlashDriverWriteWord>
 8021f26:	4603      	mov	r3, r0
 8021f28:	837b      	strh	r3, [r7, #26]
      if(error)
 8021f2a:	8b7b      	ldrh	r3, [r7, #26]
 8021f2c:	2b00      	cmp	r3, #0
 8021f2e:	d00d      	beq.n	8021f4c <stm32f4xxFlashDriverWrite+0xac>
      {
         TRACE_ERROR("Failed to write in flash memory!\r\n");
 8021f30:	f7ff fa42 	bl	80213b8 <osSuspendAllTasks>
 8021f34:	4b0f      	ldr	r3, [pc, #60]	@ (8021f74 <stm32f4xxFlashDriverWrite+0xd4>)
 8021f36:	681b      	ldr	r3, [r3, #0]
 8021f38:	68db      	ldr	r3, [r3, #12]
 8021f3a:	2222      	movs	r2, #34	@ 0x22
 8021f3c:	2101      	movs	r1, #1
 8021f3e:	480e      	ldr	r0, [pc, #56]	@ (8021f78 <stm32f4xxFlashDriverWrite+0xd8>)
 8021f40:	f00e f93c 	bl	80301bc <fwrite>
 8021f44:	f7ff fa3f 	bl	80213c6 <osResumeAllTasks>
         return error;
 8021f48:	8b7b      	ldrh	r3, [r7, #26]
 8021f4a:	e00f      	b.n	8021f6c <stm32f4xxFlashDriverWrite+0xcc>
      }

      //Advance data pointer
      p += n;
 8021f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021f4e:	69fb      	ldr	r3, [r7, #28]
 8021f50:	4413      	add	r3, r2
 8021f52:	627b      	str	r3, [r7, #36]	@ 0x24
      //Increment word address
      address += n;
 8021f54:	68fa      	ldr	r2, [r7, #12]
 8021f56:	69fb      	ldr	r3, [r7, #28]
 8021f58:	4413      	add	r3, r2
 8021f5a:	60fb      	str	r3, [r7, #12]
      //Remaining bytes to be written
      length -= n;
 8021f5c:	687a      	ldr	r2, [r7, #4]
 8021f5e:	69fb      	ldr	r3, [r7, #28]
 8021f60:	1ad3      	subs	r3, r2, r3
 8021f62:	607b      	str	r3, [r7, #4]
   while(length > 0)
 8021f64:	687b      	ldr	r3, [r7, #4]
 8021f66:	2b00      	cmp	r3, #0
 8021f68:	d1c0      	bne.n	8021eec <stm32f4xxFlashDriverWrite+0x4c>
   }

   //Successful process
   return NO_ERROR;
 8021f6a:	2300      	movs	r3, #0
}
 8021f6c:	4618      	mov	r0, r3
 8021f6e:	3728      	adds	r7, #40	@ 0x28
 8021f70:	46bd      	mov	sp, r7
 8021f72:	bd80      	pop	{r7, pc}
 8021f74:	2000008c 	.word	0x2000008c
 8021f78:	080311c0 	.word	0x080311c0

08021f7c <stm32f4xxFlashDriverRead>:
 * @param[in] length Number of data bytes to read out
 * @return Error code
 **/

error_t stm32f4xxFlashDriverRead(uint32_t address, uint8_t* data, size_t length)
{
 8021f7c:	b480      	push	{r7}
 8021f7e:	b087      	sub	sp, #28
 8021f80:	af00      	add	r7, sp, #0
 8021f82:	60f8      	str	r0, [r7, #12]
 8021f84:	60b9      	str	r1, [r7, #8]
 8021f86:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint32_t topAddress;

   //Precompute the top address
   topAddress = STM32F4xx_ADDR + STM32F4xx_SIZE;
 8021f88:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8021f8c:	613b      	str	r3, [r7, #16]

   //Check address validity
   if(address < STM32F4xx_ADDR || address >= topAddress)
 8021f8e:	68fb      	ldr	r3, [r7, #12]
 8021f90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021f94:	d303      	bcc.n	8021f9e <stm32f4xxFlashDriverRead+0x22>
 8021f96:	68fa      	ldr	r2, [r7, #12]
 8021f98:	693b      	ldr	r3, [r7, #16]
 8021f9a:	429a      	cmp	r2, r3
 8021f9c:	d301      	bcc.n	8021fa2 <stm32f4xxFlashDriverRead+0x26>
      return ERROR_INVALID_PARAMETER;
 8021f9e:	2302      	movs	r3, #2
 8021fa0:	e01e      	b.n	8021fe0 <stm32f4xxFlashDriverRead+0x64>

#ifndef FLASH_DB_MODE
   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 8021fa2:	68bb      	ldr	r3, [r7, #8]
 8021fa4:	2b00      	cmp	r3, #0
 8021fa6:	d005      	beq.n	8021fb4 <stm32f4xxFlashDriverRead+0x38>
 8021fa8:	68fa      	ldr	r2, [r7, #12]
 8021faa:	687b      	ldr	r3, [r7, #4]
 8021fac:	4413      	add	r3, r2
 8021fae:	693a      	ldr	r2, [r7, #16]
 8021fb0:	429a      	cmp	r2, r3
 8021fb2:	d201      	bcs.n	8021fb8 <stm32f4xxFlashDriverRead+0x3c>
      return ERROR_INVALID_PARAMETER;
 8021fb4:	2302      	movs	r3, #2
 8021fb6:	e013      	b.n	8021fe0 <stm32f4xxFlashDriverRead+0x64>
      (address >= STM32F4xx_BANK_2_ADDR && address + length <= topAddress)))
      return ERROR_INVALID_PARAMETER;
#endif

   //Perform read operation
   for(i = 0; i < length; i++)
 8021fb8:	2300      	movs	r3, #0
 8021fba:	617b      	str	r3, [r7, #20]
 8021fbc:	e00b      	b.n	8021fd6 <stm32f4xxFlashDriverRead+0x5a>
   {
      *((uint8_t *)data + i) = *(uint8_t*)address;
 8021fbe:	68fa      	ldr	r2, [r7, #12]
 8021fc0:	68b9      	ldr	r1, [r7, #8]
 8021fc2:	697b      	ldr	r3, [r7, #20]
 8021fc4:	440b      	add	r3, r1
 8021fc6:	7812      	ldrb	r2, [r2, #0]
 8021fc8:	701a      	strb	r2, [r3, #0]
      address++;
 8021fca:	68fb      	ldr	r3, [r7, #12]
 8021fcc:	3301      	adds	r3, #1
 8021fce:	60fb      	str	r3, [r7, #12]
   for(i = 0; i < length; i++)
 8021fd0:	697b      	ldr	r3, [r7, #20]
 8021fd2:	3301      	adds	r3, #1
 8021fd4:	617b      	str	r3, [r7, #20]
 8021fd6:	697a      	ldr	r2, [r7, #20]
 8021fd8:	687b      	ldr	r3, [r7, #4]
 8021fda:	429a      	cmp	r2, r3
 8021fdc:	d3ef      	bcc.n	8021fbe <stm32f4xxFlashDriverRead+0x42>
   }

   //Successfull process
   return NO_ERROR;
 8021fde:	2300      	movs	r3, #0
}
 8021fe0:	4618      	mov	r0, r3
 8021fe2:	371c      	adds	r7, #28
 8021fe4:	46bd      	mov	sp, r7
 8021fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fea:	4770      	bx	lr

08021fec <stm32f4xxFlashDriverErase>:
 * @param[in] address Address in Memory to start erasing from
 * @param[in] length Number of data bytes to be erased
 * @return Error code
 **/
error_t stm32f4xxFlashDriverErase(uint32_t address, size_t length)
{
 8021fec:	b580      	push	{r7, lr}
 8021fee:	b088      	sub	sp, #32
 8021ff0:	af00      	add	r7, sp, #0
 8021ff2:	6078      	str	r0, [r7, #4]
 8021ff4:	6039      	str	r1, [r7, #0]
   uint32_t topAddress;
   int_t firstSectorNumber;
   uint32_t lastSectorAddr;
   int_t lastSectorNumber;

   error = NO_ERROR;
 8021ff6:	2300      	movs	r3, #0
 8021ff8:	837b      	strh	r3, [r7, #26]

   //Precompute the top address
   topAddress = STM32F4xx_ADDR + STM32F4xx_SIZE;
 8021ffa:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8021ffe:	617b      	str	r3, [r7, #20]

   //Check address validity
   if((address < STM32F4xx_ADDR || address >= topAddress) ||
 8022000:	687b      	ldr	r3, [r7, #4]
 8022002:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8022006:	d308      	bcc.n	802201a <stm32f4xxFlashDriverErase+0x2e>
 8022008:	687a      	ldr	r2, [r7, #4]
 802200a:	697b      	ldr	r3, [r7, #20]
 802200c:	429a      	cmp	r2, r3
 802200e:	d204      	bcs.n	802201a <stm32f4xxFlashDriverErase+0x2e>
      (address % sizeof(uint32_t) != 0))
 8022010:	687b      	ldr	r3, [r7, #4]
 8022012:	f003 0303 	and.w	r3, r3, #3
   if((address < STM32F4xx_ADDR || address >= topAddress) ||
 8022016:	2b00      	cmp	r3, #0
 8022018:	d001      	beq.n	802201e <stm32f4xxFlashDriverErase+0x32>
      return ERROR_INVALID_PARAMETER;
 802201a:	2302      	movs	r3, #2
 802201c:	e045      	b.n	80220aa <stm32f4xxFlashDriverErase+0xbe>

#ifndef FLASH_DB_MODE
   //Check parameters validity (is data in flash)
   if((length == 0) || (address + length > topAddress))
 802201e:	683b      	ldr	r3, [r7, #0]
 8022020:	2b00      	cmp	r3, #0
 8022022:	d005      	beq.n	8022030 <stm32f4xxFlashDriverErase+0x44>
 8022024:	687a      	ldr	r2, [r7, #4]
 8022026:	683b      	ldr	r3, [r7, #0]
 8022028:	4413      	add	r3, r2
 802202a:	697a      	ldr	r2, [r7, #20]
 802202c:	429a      	cmp	r2, r3
 802202e:	d201      	bcs.n	8022034 <stm32f4xxFlashDriverErase+0x48>
      return ERROR_INVALID_PARAMETER;
 8022030:	2302      	movs	r3, #2
 8022032:	e03a      	b.n	80220aa <stm32f4xxFlashDriverErase+0xbe>
      (address >= STM32F4xx_BANK_2_ADDR && address + length <= topAddress)))
      return ERROR_INVALID_PARAMETER;
#endif

   //Get the number of the first sector to erase
   firstSectorNumber = stm32f4xxFlashGetSector(address);
 8022034:	6878      	ldr	r0, [r7, #4]
 8022036:	f000 fa31 	bl	802249c <stm32f4xxFlashGetSector>
 802203a:	6138      	str	r0, [r7, #16]

   //Check first sector number is valid (means address must match a sector start address)
   if(firstSectorNumber == -1)
 802203c:	693b      	ldr	r3, [r7, #16]
 802203e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8022042:	d101      	bne.n	8022048 <stm32f4xxFlashDriverErase+0x5c>
      return ERROR_INVALID_PARAMETER;
 8022044:	2302      	movs	r3, #2
 8022046:	e030      	b.n	80220aa <stm32f4xxFlashDriverErase+0xbe>

   if(address + length == STM32F4xx_ADDR + STM32F4xx_SIZE)
 8022048:	687a      	ldr	r2, [r7, #4]
 802204a:	683b      	ldr	r3, [r7, #0]
 802204c:	4413      	add	r3, r2
 802204e:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8022052:	d102      	bne.n	802205a <stm32f4xxFlashDriverErase+0x6e>
   {
      //Get the number of the boundary sector (not to be erased)
      lastSectorNumber = STM32F4xx_SECTORS_NUMBER;
 8022054:	230c      	movs	r3, #12
 8022056:	61fb      	str	r3, [r7, #28]
 8022058:	e014      	b.n	8022084 <stm32f4xxFlashDriverErase+0x98>
   }
   else
   {
      //Get the address of the boundary sector (not to be erased)
      error = stm32f4xxFlashDriverGetNextSector(address+length, &lastSectorAddr);
 802205a:	687a      	ldr	r2, [r7, #4]
 802205c:	683b      	ldr	r3, [r7, #0]
 802205e:	4413      	add	r3, r2
 8022060:	f107 020c 	add.w	r2, r7, #12
 8022064:	4611      	mov	r1, r2
 8022066:	4618      	mov	r0, r3
 8022068:	f000 f824 	bl	80220b4 <stm32f4xxFlashDriverGetNextSector>
 802206c:	4603      	mov	r3, r0
 802206e:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 8022070:	8b7b      	ldrh	r3, [r7, #26]
 8022072:	2b00      	cmp	r3, #0
 8022074:	d001      	beq.n	802207a <stm32f4xxFlashDriverErase+0x8e>
         return error;
 8022076:	8b7b      	ldrh	r3, [r7, #26]
 8022078:	e017      	b.n	80220aa <stm32f4xxFlashDriverErase+0xbe>

      //Get the number of the boundary sector (not to be erased)
      lastSectorNumber = stm32f4xxFlashGetSector(lastSectorAddr);
 802207a:	68fb      	ldr	r3, [r7, #12]
 802207c:	4618      	mov	r0, r3
 802207e:	f000 fa0d 	bl	802249c <stm32f4xxFlashGetSector>
 8022082:	61f8      	str	r0, [r7, #28]
   }

   //Get the number of the first sector to erase
   firstSectorNumber = stm32f4xxFlashGetSector(address);
 8022084:	6878      	ldr	r0, [r7, #4]
 8022086:	f000 fa09 	bl	802249c <stm32f4xxFlashGetSector>
 802208a:	6138      	str	r0, [r7, #16]

   //Erase the required number of sectors
   error = stm32f4xxFlashDriverEraseSector(firstSectorNumber, lastSectorNumber-firstSectorNumber);
 802208c:	6938      	ldr	r0, [r7, #16]
 802208e:	69fa      	ldr	r2, [r7, #28]
 8022090:	693b      	ldr	r3, [r7, #16]
 8022092:	1ad3      	subs	r3, r2, r3
 8022094:	4619      	mov	r1, r3
 8022096:	f000 f88d 	bl	80221b4 <stm32f4xxFlashDriverEraseSector>
 802209a:	4603      	mov	r3, r0
 802209c:	837b      	strh	r3, [r7, #26]
   //Is any error?
   if(error)
 802209e:	8b7b      	ldrh	r3, [r7, #26]
 80220a0:	2b00      	cmp	r3, #0
 80220a2:	d001      	beq.n	80220a8 <stm32f4xxFlashDriverErase+0xbc>
      return error;
 80220a4:	8b7b      	ldrh	r3, [r7, #26]
 80220a6:	e000      	b.n	80220aa <stm32f4xxFlashDriverErase+0xbe>

   //Successful process
   return NO_ERROR;
 80220a8:	2300      	movs	r3, #0
}
 80220aa:	4618      	mov	r0, r3
 80220ac:	3720      	adds	r7, #32
 80220ae:	46bd      	mov	sp, r7
 80220b0:	bd80      	pop	{r7, pc}
	...

080220b4 <stm32f4xxFlashDriverGetNextSector>:
 * @brief Get address of the neighbouring sector
 * @return Error code
 **/

error_t stm32f4xxFlashDriverGetNextSector(uint32_t address, uint32_t *sectorAddr)
{
 80220b4:	b480      	push	{r7}
 80220b6:	b089      	sub	sp, #36	@ 0x24
 80220b8:	af00      	add	r7, sp, #0
 80220ba:	6078      	str	r0, [r7, #4]
 80220bc:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t j;
   SectorsGroup *sg;
   uint32_t sAddr = 0xFFFFFFFF;
 80220be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80220c2:	617b      	str	r3, [r7, #20]
   uint32_t lastSectorAddr;

   lastSectorAddr = sectorsList[SECTORS_LIST_LEN-1].addr +
 80220c4:	4a30      	ldr	r2, [pc, #192]	@ (8022188 <stm32f4xxFlashDriverGetNextSector+0xd4>)
      (sectorsList[SECTORS_LIST_LEN-1].size * (sectorsList[SECTORS_LIST_LEN-1].nb - 1));
 80220c6:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80220ca:	2307      	movs	r3, #7
 80220cc:	3b01      	subs	r3, #1
 80220ce:	fb01 f303 	mul.w	r3, r1, r3
   lastSectorAddr = sectorsList[SECTORS_LIST_LEN-1].addr +
 80220d2:	4413      	add	r3, r2
 80220d4:	613b      	str	r3, [r7, #16]

   //Check parameters validity
   if(address < STM32F4xx_ADDR || address > lastSectorAddr || sectorAddr == NULL)
 80220d6:	687b      	ldr	r3, [r7, #4]
 80220d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80220dc:	d306      	bcc.n	80220ec <stm32f4xxFlashDriverGetNextSector+0x38>
 80220de:	687a      	ldr	r2, [r7, #4]
 80220e0:	693b      	ldr	r3, [r7, #16]
 80220e2:	429a      	cmp	r2, r3
 80220e4:	d802      	bhi.n	80220ec <stm32f4xxFlashDriverGetNextSector+0x38>
 80220e6:	683b      	ldr	r3, [r7, #0]
 80220e8:	2b00      	cmp	r3, #0
 80220ea:	d101      	bne.n	80220f0 <stm32f4xxFlashDriverGetNextSector+0x3c>
      return ERROR_INVALID_PARAMETER;
 80220ec:	2302      	movs	r3, #2
 80220ee:	e044      	b.n	802217a <stm32f4xxFlashDriverGetNextSector+0xc6>

   //Loop through sectors list
   for(i = 0; i < SECTORS_LIST_LEN && sAddr == 0xFFFFFFFF; i++)
 80220f0:	2300      	movs	r3, #0
 80220f2:	61fb      	str	r3, [r7, #28]
 80220f4:	e036      	b.n	8022164 <stm32f4xxFlashDriverGetNextSector+0xb0>
   {
      //Point to the current sectors group
      sg = (SectorsGroup *) &sectorsList[i];
 80220f6:	69fa      	ldr	r2, [r7, #28]
 80220f8:	4613      	mov	r3, r2
 80220fa:	005b      	lsls	r3, r3, #1
 80220fc:	4413      	add	r3, r2
 80220fe:	009b      	lsls	r3, r3, #2
 8022100:	4a22      	ldr	r2, [pc, #136]	@ (802218c <stm32f4xxFlashDriverGetNextSector+0xd8>)
 8022102:	4413      	add	r3, r2
 8022104:	60fb      	str	r3, [r7, #12]

      //Is address in current sector group
      if(address <= sg->addr + sg->size*sg->nb)
 8022106:	68fb      	ldr	r3, [r7, #12]
 8022108:	681a      	ldr	r2, [r3, #0]
 802210a:	68fb      	ldr	r3, [r7, #12]
 802210c:	685b      	ldr	r3, [r3, #4]
 802210e:	68f9      	ldr	r1, [r7, #12]
 8022110:	6889      	ldr	r1, [r1, #8]
 8022112:	fb01 f303 	mul.w	r3, r1, r3
 8022116:	4413      	add	r3, r2
 8022118:	687a      	ldr	r2, [r7, #4]
 802211a:	429a      	cmp	r2, r3
 802211c:	d81f      	bhi.n	802215e <stm32f4xxFlashDriverGetNextSector+0xaa>
      {
         //Loop through sectors group list
         for(j = 0; j < sg->nb; j++)
 802211e:	2300      	movs	r3, #0
 8022120:	61bb      	str	r3, [r7, #24]
 8022122:	e017      	b.n	8022154 <stm32f4xxFlashDriverGetNextSector+0xa0>
         {
            //Is address located in current sector?
            if(address <= sg->addr + j*sg->size)
 8022124:	68fb      	ldr	r3, [r7, #12]
 8022126:	681a      	ldr	r2, [r3, #0]
 8022128:	68fb      	ldr	r3, [r7, #12]
 802212a:	685b      	ldr	r3, [r3, #4]
 802212c:	69b9      	ldr	r1, [r7, #24]
 802212e:	fb01 f303 	mul.w	r3, r1, r3
 8022132:	4413      	add	r3, r2
 8022134:	687a      	ldr	r2, [r7, #4]
 8022136:	429a      	cmp	r2, r3
 8022138:	d809      	bhi.n	802214e <stm32f4xxFlashDriverGetNextSector+0x9a>
            {
               //Set next sector address
               sAddr = sg->addr + j*sg->size;
 802213a:	68fb      	ldr	r3, [r7, #12]
 802213c:	681a      	ldr	r2, [r3, #0]
 802213e:	68fb      	ldr	r3, [r7, #12]
 8022140:	685b      	ldr	r3, [r3, #4]
 8022142:	69b9      	ldr	r1, [r7, #24]
 8022144:	fb01 f303 	mul.w	r3, r1, r3
 8022148:	4413      	add	r3, r2
 802214a:	617b      	str	r3, [r7, #20]
               break;
 802214c:	e007      	b.n	802215e <stm32f4xxFlashDriverGetNextSector+0xaa>
         for(j = 0; j < sg->nb; j++)
 802214e:	69bb      	ldr	r3, [r7, #24]
 8022150:	3301      	adds	r3, #1
 8022152:	61bb      	str	r3, [r7, #24]
 8022154:	68fb      	ldr	r3, [r7, #12]
 8022156:	689b      	ldr	r3, [r3, #8]
 8022158:	69ba      	ldr	r2, [r7, #24]
 802215a:	429a      	cmp	r2, r3
 802215c:	d3e2      	bcc.n	8022124 <stm32f4xxFlashDriverGetNextSector+0x70>
   for(i = 0; i < SECTORS_LIST_LEN && sAddr == 0xFFFFFFFF; i++)
 802215e:	69fb      	ldr	r3, [r7, #28]
 8022160:	3301      	adds	r3, #1
 8022162:	61fb      	str	r3, [r7, #28]
 8022164:	69fb      	ldr	r3, [r7, #28]
 8022166:	2b02      	cmp	r3, #2
 8022168:	d803      	bhi.n	8022172 <stm32f4xxFlashDriverGetNextSector+0xbe>
 802216a:	697b      	ldr	r3, [r7, #20]
 802216c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8022170:	d0c1      	beq.n	80220f6 <stm32f4xxFlashDriverGetNextSector+0x42>
         }
      }
   }

   //Save next sector addr
   *sectorAddr = sAddr;
 8022172:	683b      	ldr	r3, [r7, #0]
 8022174:	697a      	ldr	r2, [r7, #20]
 8022176:	601a      	str	r2, [r3, #0]

   //Succesfull process
   return NO_ERROR;
 8022178:	2300      	movs	r3, #0
}
 802217a:	4618      	mov	r0, r3
 802217c:	3724      	adds	r7, #36	@ 0x24
 802217e:	46bd      	mov	sp, r7
 8022180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022184:	4770      	bx	lr
 8022186:	bf00      	nop
 8022188:	08020000 	.word	0x08020000
 802218c:	08032350 	.word	0x08032350

08022190 <stm32f4xxFlashDriverIsSectorAddr>:
 * @brief Determine if a given address is contained within a sector
 * @return boolean
 **/

bool_t stm32f4xxFlashDriverIsSectorAddr(uint32_t address)
{
 8022190:	b580      	push	{r7, lr}
 8022192:	b084      	sub	sp, #16
 8022194:	af00      	add	r7, sp, #0
 8022196:	6078      	str	r0, [r7, #4]
   int_t sector;

   //Get Flash memory sector number
   sector = stm32f4xxFlashGetSector(address);
 8022198:	6878      	ldr	r0, [r7, #4]
 802219a:	f000 f97f 	bl	802249c <stm32f4xxFlashGetSector>
 802219e:	60f8      	str	r0, [r7, #12]

   //Is given address match a sector start address?
   if(sector >= 0)
 80221a0:	68fb      	ldr	r3, [r7, #12]
 80221a2:	2b00      	cmp	r3, #0
 80221a4:	db01      	blt.n	80221aa <stm32f4xxFlashDriverIsSectorAddr+0x1a>
      return TRUE;
 80221a6:	2301      	movs	r3, #1
 80221a8:	e000      	b.n	80221ac <stm32f4xxFlashDriverIsSectorAddr+0x1c>
   else
      return FALSE;
 80221aa:	2300      	movs	r3, #0
}
 80221ac:	4618      	mov	r0, r3
 80221ae:	3710      	adds	r7, #16
 80221b0:	46bd      	mov	sp, r7
 80221b2:	bd80      	pop	{r7, pc}

080221b4 <stm32f4xxFlashDriverEraseSector>:
 * @param[in] nbSectors Number of Flash memory sector to be erased
 * @return Error code
 **/

error_t stm32f4xxFlashDriverEraseSector(uint32_t firstSector, size_t nbSectors)
{
 80221b4:	b580      	push	{r7, lr}
 80221b6:	b08a      	sub	sp, #40	@ 0x28
 80221b8:	af00      	add	r7, sp, #0
 80221ba:	6078      	str	r0, [r7, #4]
 80221bc:	6039      	str	r1, [r7, #0]
   HAL_StatusTypeDef status;
   FLASH_EraseInitTypeDef EraseInitStruct;
   uint32_t sectorError;

   //Check parameter validity
   if((firstSector >= STM32F4xx_SECTORS_NUMBER) || (nbSectors == 0) ||
 80221be:	687b      	ldr	r3, [r7, #4]
 80221c0:	2b0b      	cmp	r3, #11
 80221c2:	d808      	bhi.n	80221d6 <stm32f4xxFlashDriverEraseSector+0x22>
 80221c4:	683b      	ldr	r3, [r7, #0]
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	d005      	beq.n	80221d6 <stm32f4xxFlashDriverEraseSector+0x22>
      ((firstSector + nbSectors - 1) >= STM32F4xx_SECTORS_NUMBER))
 80221ca:	687a      	ldr	r2, [r7, #4]
 80221cc:	683b      	ldr	r3, [r7, #0]
 80221ce:	4413      	add	r3, r2
 80221d0:	3b01      	subs	r3, #1
   if((firstSector >= STM32F4xx_SECTORS_NUMBER) || (nbSectors == 0) ||
 80221d2:	2b0b      	cmp	r3, #11
 80221d4:	d901      	bls.n	80221da <stm32f4xxFlashDriverEraseSector+0x26>
      return ERROR_INVALID_PARAMETER;
 80221d6:	2302      	movs	r3, #2
 80221d8:	e06d      	b.n	80222b6 <stm32f4xxFlashDriverEraseSector+0x102>

   //Initialize FLASH flags
   //(Patch to fix STM32 HAL library wrong initial flash flags issue)
   FLASH_WaitForLastOperation((uint32_t)50000U);
 80221da:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80221de:	f00a fe6b 	bl	802ceb8 <FLASH_WaitForLastOperation>

   //Start of exception handling block
   do
   {
      //Allow access to Flash control registers and user False
      status = HAL_FLASH_Unlock();
 80221e2:	f00a fe37 	bl	802ce54 <HAL_FLASH_Unlock>
 80221e6:	4603      	mov	r3, r0
 80221e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      //Is any error?
      if (status != HAL_OK)
 80221ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80221f0:	2b00      	cmp	r3, #0
 80221f2:	d00c      	beq.n	802220e <stm32f4xxFlashDriverEraseSector+0x5a>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 80221f4:	f7ff f8e0 	bl	80213b8 <osSuspendAllTasks>
 80221f8:	4b31      	ldr	r3, [pc, #196]	@ (80222c0 <stm32f4xxFlashDriverEraseSector+0x10c>)
 80221fa:	681b      	ldr	r3, [r3, #0]
 80221fc:	68db      	ldr	r3, [r3, #12]
 80221fe:	2227      	movs	r2, #39	@ 0x27
 8022200:	2101      	movs	r1, #1
 8022202:	4830      	ldr	r0, [pc, #192]	@ (80222c4 <stm32f4xxFlashDriverEraseSector+0x110>)
 8022204:	f00d ffda 	bl	80301bc <fwrite>
 8022208:	f7ff f8dd 	bl	80213c6 <osResumeAllTasks>
         break;
 802220c:	e04b      	b.n	80222a6 <stm32f4xxFlashDriverEraseSector+0xf2>
      }

      //Initialize FLASH flags
      status = FLASH_WaitForLastOperation((uint32_t)50000U);
 802220e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8022212:	f00a fe51 	bl	802ceb8 <FLASH_WaitForLastOperation>
 8022216:	4603      	mov	r3, r0
 8022218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      //Is any error?
      if(status != HAL_OK)
 802221c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8022220:	2b00      	cmp	r3, #0
 8022222:	d00b      	beq.n	802223c <stm32f4xxFlashDriverEraseSector+0x88>
      {
         //Debug message
         TRACE_ERROR("Initialize FLASH flags...\r\n");
 8022224:	f7ff f8c8 	bl	80213b8 <osSuspendAllTasks>
 8022228:	4b25      	ldr	r3, [pc, #148]	@ (80222c0 <stm32f4xxFlashDriverEraseSector+0x10c>)
 802222a:	681b      	ldr	r3, [r3, #0]
 802222c:	68db      	ldr	r3, [r3, #12]
 802222e:	221b      	movs	r2, #27
 8022230:	2101      	movs	r1, #1
 8022232:	4825      	ldr	r0, [pc, #148]	@ (80222c8 <stm32f4xxFlashDriverEraseSector+0x114>)
 8022234:	f00d ffc2 	bl	80301bc <fwrite>
 8022238:	f7ff f8c5 	bl	80213c6 <osResumeAllTasks>
      }

      //Set flash erase parameters
      EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 802223c:	2302      	movs	r3, #2
 802223e:	623b      	str	r3, [r7, #32]
      EraseInitStruct.Sector = firstSector;
 8022240:	687b      	ldr	r3, [r7, #4]
 8022242:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS; // Erase multiple sectors
 8022244:	2300      	movs	r3, #0
 8022246:	613b      	str	r3, [r7, #16]
      EraseInitStruct.NbSectors = nbSectors;
 8022248:	683b      	ldr	r3, [r7, #0]
 802224a:	61fb      	str	r3, [r7, #28]

      //Erase the specified Flash sector(s)
      status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 802224c:	f107 020c 	add.w	r2, r7, #12
 8022250:	f107 0310 	add.w	r3, r7, #16
 8022254:	4611      	mov	r1, r2
 8022256:	4618      	mov	r0, r3
 8022258:	f00a ff5e 	bl	802d118 <HAL_FLASHEx_Erase>
 802225c:	4603      	mov	r3, r0
 802225e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      //Is any error?
      if(status != HAL_OK)
 8022262:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8022266:	2b00      	cmp	r3, #0
 8022268:	d00b      	beq.n	8022282 <stm32f4xxFlashDriverEraseSector+0xce>
      {
         //Debug message
         TRACE_ERROR("Failed to erase flash sector(s) %ld, error = 0x%08lX!\r\n", firstSector, sectorError);
 802226a:	f7ff f8a5 	bl	80213b8 <osSuspendAllTasks>
 802226e:	4b14      	ldr	r3, [pc, #80]	@ (80222c0 <stm32f4xxFlashDriverEraseSector+0x10c>)
 8022270:	681b      	ldr	r3, [r3, #0]
 8022272:	68d8      	ldr	r0, [r3, #12]
 8022274:	68fb      	ldr	r3, [r7, #12]
 8022276:	687a      	ldr	r2, [r7, #4]
 8022278:	4914      	ldr	r1, [pc, #80]	@ (80222cc <stm32f4xxFlashDriverEraseSector+0x118>)
 802227a:	f00d ff23 	bl	80300c4 <fiprintf>
 802227e:	f7ff f8a2 	bl	80213c6 <osResumeAllTasks>
      }

      //Disable the Flash option control register access (recommended to protect
      //the option Bytes against possible unwanted operations)
      if(HAL_FLASH_Lock() != HAL_OK)
 8022282:	f00a fe09 	bl	802ce98 <HAL_FLASH_Lock>
 8022286:	4603      	mov	r3, r0
 8022288:	2b00      	cmp	r3, #0
 802228a:	d00c      	beq.n	80222a6 <stm32f4xxFlashDriverEraseSector+0xf2>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register lock failed!\r\n");
 802228c:	f7ff f894 	bl	80213b8 <osSuspendAllTasks>
 8022290:	4b0b      	ldr	r3, [pc, #44]	@ (80222c0 <stm32f4xxFlashDriverEraseSector+0x10c>)
 8022292:	681b      	ldr	r3, [r3, #0]
 8022294:	68db      	ldr	r3, [r3, #12]
 8022296:	2225      	movs	r2, #37	@ 0x25
 8022298:	2101      	movs	r1, #1
 802229a:	480d      	ldr	r0, [pc, #52]	@ (80222d0 <stm32f4xxFlashDriverEraseSector+0x11c>)
 802229c:	f00d ff8e 	bl	80301bc <fwrite>
 80222a0:	f7ff f891 	bl	80213c6 <osResumeAllTasks>
         break;
 80222a4:	bf00      	nop
      }
   }while(0);

   //Return status code
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 80222a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80222aa:	2b00      	cmp	r3, #0
 80222ac:	d101      	bne.n	80222b2 <stm32f4xxFlashDriverEraseSector+0xfe>
 80222ae:	2300      	movs	r3, #0
 80222b0:	e001      	b.n	80222b6 <stm32f4xxFlashDriverEraseSector+0x102>
 80222b2:	f240 230a 	movw	r3, #522	@ 0x20a
}
 80222b6:	4618      	mov	r0, r3
 80222b8:	3728      	adds	r7, #40	@ 0x28
 80222ba:	46bd      	mov	sp, r7
 80222bc:	bd80      	pop	{r7, pc}
 80222be:	bf00      	nop
 80222c0:	2000008c 	.word	0x2000008c
 80222c4:	080311e4 	.word	0x080311e4
 80222c8:	0803120c 	.word	0x0803120c
 80222cc:	08031228 	.word	0x08031228
 80222d0:	08031260 	.word	0x08031260

080222d4 <stm32f4xxFlashDriverWriteWord>:
 * @param[in] word 32-bit word to write in Flash memory
 * @return Error code
 **/

error_t stm32f4xxFlashDriverWriteWord(uint32_t address, uint32_t word)
{
 80222d4:	b5b0      	push	{r4, r5, r7, lr}
 80222d6:	b08c      	sub	sp, #48	@ 0x30
 80222d8:	af00      	add	r7, sp, #0
 80222da:	6078      	str	r0, [r7, #4]
 80222dc:	6039      	str	r1, [r7, #0]
   uint32_t topAddress;
   HAL_StatusTypeDef status;
   FLASH_EraseInitTypeDef EraseInitStruct;

   //Precompute the top address
   topAddress = STM32F4xx_ADDR + STM32F4xx_SIZE;
 80222de:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 80222e2:	62bb      	str	r3, [r7, #40]	@ 0x28

#ifndef FLASH_DB_MODE
   //Check parameters validity (is data in flash)
   if((address + sizeof(uint32_t) >= topAddress) ||
 80222e4:	687b      	ldr	r3, [r7, #4]
 80222e6:	3304      	adds	r3, #4
 80222e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80222ea:	429a      	cmp	r2, r3
 80222ec:	d904      	bls.n	80222f8 <stm32f4xxFlashDriverWriteWord+0x24>
      (address % sizeof(uint32_t) != 0))
 80222ee:	687b      	ldr	r3, [r7, #4]
 80222f0:	f003 0303 	and.w	r3, r3, #3
   if((address + sizeof(uint32_t) >= topAddress) ||
 80222f4:	2b00      	cmp	r3, #0
 80222f6:	d001      	beq.n	80222fc <stm32f4xxFlashDriverWriteWord+0x28>
      return ERROR_INVALID_PARAMETER;
 80222f8:	2302      	movs	r3, #2
 80222fa:	e0bf      	b.n	802247c <stm32f4xxFlashDriverWriteWord+0x1a8>
      return ERROR_INVALID_PARAMETER;
#endif

   //Initialize FLASH flags
   //(Patch to fix stm32 hal library wrong initial flash flags issue)
   FLASH_WaitForLastOperation((uint32_t)50000U);
 80222fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8022300:	f00a fdda 	bl	802ceb8 <FLASH_WaitForLastOperation>

   //Get Flash memory sector number
   sector = stm32f4xxFlashGetSector(address);
 8022304:	6878      	ldr	r0, [r7, #4]
 8022306:	f000 f8c9 	bl	802249c <stm32f4xxFlashGetSector>
 802230a:	6278      	str	r0, [r7, #36]	@ 0x24

   //Check whether the address match the beginning of a Flash sector.
   //If this is the case then the flash sector must be erased before any write operation
   if(sector >= 0)
 802230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802230e:	2b00      	cmp	r3, #0
 8022310:	db61      	blt.n	80223d6 <stm32f4xxFlashDriverWriteWord+0x102>

      //Start of exception handling block
      do
      {
         //Allow access to Flash control registers and user False
         status = HAL_FLASH_Unlock();
 8022312:	f00a fd9f 	bl	802ce54 <HAL_FLASH_Unlock>
 8022316:	4603      	mov	r3, r0
 8022318:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
         //Is any error?
         if (status != HAL_OK)
 802231c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8022320:	2b00      	cmp	r3, #0
 8022322:	d00c      	beq.n	802233e <stm32f4xxFlashDriverWriteWord+0x6a>
         {
            //Debug message
            TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 8022324:	f7ff f848 	bl	80213b8 <osSuspendAllTasks>
 8022328:	4b56      	ldr	r3, [pc, #344]	@ (8022484 <stm32f4xxFlashDriverWriteWord+0x1b0>)
 802232a:	681b      	ldr	r3, [r3, #0]
 802232c:	68db      	ldr	r3, [r3, #12]
 802232e:	2227      	movs	r2, #39	@ 0x27
 8022330:	2101      	movs	r1, #1
 8022332:	4855      	ldr	r0, [pc, #340]	@ (8022488 <stm32f4xxFlashDriverWriteWord+0x1b4>)
 8022334:	f00d ff42 	bl	80301bc <fwrite>
 8022338:	f7ff f845 	bl	80213c6 <osResumeAllTasks>
            break;
 802233c:	e04e      	b.n	80223dc <stm32f4xxFlashDriverWriteWord+0x108>
         }

         //Initialize FLASH flags
         status = FLASH_WaitForLastOperation((uint32_t)50000U);
 802233e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8022342:	f00a fdb9 	bl	802ceb8 <FLASH_WaitForLastOperation>
 8022346:	4603      	mov	r3, r0
 8022348:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
         //Is any error?
         if(status != HAL_OK)
 802234c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8022350:	2b00      	cmp	r3, #0
 8022352:	d00b      	beq.n	802236c <stm32f4xxFlashDriverWriteWord+0x98>
         {
            //Debug message
            TRACE_ERROR("Initialize FLASH flags...\r\n");
 8022354:	f7ff f830 	bl	80213b8 <osSuspendAllTasks>
 8022358:	4b4a      	ldr	r3, [pc, #296]	@ (8022484 <stm32f4xxFlashDriverWriteWord+0x1b0>)
 802235a:	681b      	ldr	r3, [r3, #0]
 802235c:	68db      	ldr	r3, [r3, #12]
 802235e:	221b      	movs	r2, #27
 8022360:	2101      	movs	r1, #1
 8022362:	484a      	ldr	r0, [pc, #296]	@ (802248c <stm32f4xxFlashDriverWriteWord+0x1b8>)
 8022364:	f00d ff2a 	bl	80301bc <fwrite>
 8022368:	f7ff f82d 	bl	80213c6 <osResumeAllTasks>
         }

         //Set flash erase parameters
         EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 802236c:	2300      	movs	r3, #0
 802236e:	60fb      	str	r3, [r7, #12]
         EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8022370:	2302      	movs	r3, #2
 8022372:	61fb      	str	r3, [r7, #28]
         EraseInitStruct.Sector = sector;
 8022374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022376:	617b      	str	r3, [r7, #20]
         EraseInitStruct.NbSectors = 1;
 8022378:	2301      	movs	r3, #1
 802237a:	61bb      	str	r3, [r7, #24]

         //Erase the specified Flash sector
         status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 802237c:	f107 0220 	add.w	r2, r7, #32
 8022380:	f107 030c 	add.w	r3, r7, #12
 8022384:	4611      	mov	r1, r2
 8022386:	4618      	mov	r0, r3
 8022388:	f00a fec6 	bl	802d118 <HAL_FLASHEx_Erase>
 802238c:	4603      	mov	r3, r0
 802238e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
         //Is any error?
         if(status != HAL_OK)
 8022392:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8022396:	2b00      	cmp	r3, #0
 8022398:	d00b      	beq.n	80223b2 <stm32f4xxFlashDriverWriteWord+0xde>
         {
            //Debug message
            TRACE_ERROR("Failed to erase flash sector %d, error = 0x%08lX!\r\n", sector, sectorError);
 802239a:	f7ff f80d 	bl	80213b8 <osSuspendAllTasks>
 802239e:	4b39      	ldr	r3, [pc, #228]	@ (8022484 <stm32f4xxFlashDriverWriteWord+0x1b0>)
 80223a0:	681b      	ldr	r3, [r3, #0]
 80223a2:	68d8      	ldr	r0, [r3, #12]
 80223a4:	6a3b      	ldr	r3, [r7, #32]
 80223a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80223a8:	4939      	ldr	r1, [pc, #228]	@ (8022490 <stm32f4xxFlashDriverWriteWord+0x1bc>)
 80223aa:	f00d fe8b 	bl	80300c4 <fiprintf>
 80223ae:	f7ff f80a 	bl	80213c6 <osResumeAllTasks>
         }

         //Disable the Flash option control register access (recommended to protect
         //the option Bytes against possible unwanted operations)
         if(HAL_FLASH_Lock() != HAL_OK)
 80223b2:	f00a fd71 	bl	802ce98 <HAL_FLASH_Lock>
 80223b6:	4603      	mov	r3, r0
 80223b8:	2b00      	cmp	r3, #0
 80223ba:	d00f      	beq.n	80223dc <stm32f4xxFlashDriverWriteWord+0x108>
         {
            //Debug message
            TRACE_ERROR("Flash Control Register lock failed!\r\n");
 80223bc:	f7fe fffc 	bl	80213b8 <osSuspendAllTasks>
 80223c0:	4b30      	ldr	r3, [pc, #192]	@ (8022484 <stm32f4xxFlashDriverWriteWord+0x1b0>)
 80223c2:	681b      	ldr	r3, [r3, #0]
 80223c4:	68db      	ldr	r3, [r3, #12]
 80223c6:	2225      	movs	r2, #37	@ 0x25
 80223c8:	2101      	movs	r1, #1
 80223ca:	4832      	ldr	r0, [pc, #200]	@ (8022494 <stm32f4xxFlashDriverWriteWord+0x1c0>)
 80223cc:	f00d fef6 	bl	80301bc <fwrite>
 80223d0:	f7fe fff9 	bl	80213c6 <osResumeAllTasks>
 80223d4:	e002      	b.n	80223dc <stm32f4xxFlashDriverWriteWord+0x108>
      }while(0);
   }
   else
   {
      //Erase is not needed
      status = HAL_OK;
 80223d6:	2300      	movs	r3, #0
 80223d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
   }

   //Check status code
   if(status == HAL_OK)
 80223dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80223e0:	2b00      	cmp	r3, #0
 80223e2:	d143      	bne.n	802246c <stm32f4xxFlashDriverWriteWord+0x198>
   {
      //Start of exception handling block
      do
      {
         //Allow access to Flash control registers and user False
         status = HAL_FLASH_Unlock();
 80223e4:	f00a fd36 	bl	802ce54 <HAL_FLASH_Unlock>
 80223e8:	4603      	mov	r3, r0
 80223ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
         //Is any error?
         if (status != HAL_OK)
 80223ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80223f2:	2b00      	cmp	r3, #0
 80223f4:	d00c      	beq.n	8022410 <stm32f4xxFlashDriverWriteWord+0x13c>
         {
            //Debug message
            TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 80223f6:	f7fe ffdf 	bl	80213b8 <osSuspendAllTasks>
 80223fa:	4b22      	ldr	r3, [pc, #136]	@ (8022484 <stm32f4xxFlashDriverWriteWord+0x1b0>)
 80223fc:	681b      	ldr	r3, [r3, #0]
 80223fe:	68db      	ldr	r3, [r3, #12]
 8022400:	2227      	movs	r2, #39	@ 0x27
 8022402:	2101      	movs	r1, #1
 8022404:	4820      	ldr	r0, [pc, #128]	@ (8022488 <stm32f4xxFlashDriverWriteWord+0x1b4>)
 8022406:	f00d fed9 	bl	80301bc <fwrite>
 802240a:	f7fe ffdc 	bl	80213c6 <osResumeAllTasks>
            break;
 802240e:	e02d      	b.n	802246c <stm32f4xxFlashDriverWriteWord+0x198>
         }

         //Program the 32-bit word to Flash memory
         status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, word);
 8022410:	683b      	ldr	r3, [r7, #0]
 8022412:	2200      	movs	r2, #0
 8022414:	461c      	mov	r4, r3
 8022416:	4615      	mov	r5, r2
 8022418:	4622      	mov	r2, r4
 802241a:	462b      	mov	r3, r5
 802241c:	6879      	ldr	r1, [r7, #4]
 802241e:	2002      	movs	r0, #2
 8022420:	f00a fcc6 	bl	802cdb0 <HAL_FLASH_Program>
 8022424:	4603      	mov	r3, r0
 8022426:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
         //Is any error?
         if(status != HAL_OK)
 802242a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802242e:	2b00      	cmp	r3, #0
 8022430:	d00b      	beq.n	802244a <stm32f4xxFlashDriverWriteWord+0x176>
         {
            //Debug message
            TRACE_ERROR("Failed to write word \"0x%08lX\" at 0x%08lX!\r\n", word, address);
 8022432:	f7fe ffc1 	bl	80213b8 <osSuspendAllTasks>
 8022436:	4b13      	ldr	r3, [pc, #76]	@ (8022484 <stm32f4xxFlashDriverWriteWord+0x1b0>)
 8022438:	681b      	ldr	r3, [r3, #0]
 802243a:	68d8      	ldr	r0, [r3, #12]
 802243c:	687b      	ldr	r3, [r7, #4]
 802243e:	683a      	ldr	r2, [r7, #0]
 8022440:	4915      	ldr	r1, [pc, #84]	@ (8022498 <stm32f4xxFlashDriverWriteWord+0x1c4>)
 8022442:	f00d fe3f 	bl	80300c4 <fiprintf>
 8022446:	f7fe ffbe 	bl	80213c6 <osResumeAllTasks>
         }

         //Disable the Flash option control register access (recommended to protect
         //the option Bytes against possible unwanted operations)
         if(HAL_FLASH_Lock() != HAL_OK)
 802244a:	f00a fd25 	bl	802ce98 <HAL_FLASH_Lock>
 802244e:	4603      	mov	r3, r0
 8022450:	2b00      	cmp	r3, #0
 8022452:	d00b      	beq.n	802246c <stm32f4xxFlashDriverWriteWord+0x198>
         {
            //Debug message
            TRACE_ERROR("Flash Control Register lock failed!\r\n");
 8022454:	f7fe ffb0 	bl	80213b8 <osSuspendAllTasks>
 8022458:	4b0a      	ldr	r3, [pc, #40]	@ (8022484 <stm32f4xxFlashDriverWriteWord+0x1b0>)
 802245a:	681b      	ldr	r3, [r3, #0]
 802245c:	68db      	ldr	r3, [r3, #12]
 802245e:	2225      	movs	r2, #37	@ 0x25
 8022460:	2101      	movs	r1, #1
 8022462:	480c      	ldr	r0, [pc, #48]	@ (8022494 <stm32f4xxFlashDriverWriteWord+0x1c0>)
 8022464:	f00d feaa 	bl	80301bc <fwrite>
 8022468:	f7fe ffad 	bl	80213c6 <osResumeAllTasks>
         }
      }while(0);
   }

   //Return status code
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 802246c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8022470:	2b00      	cmp	r3, #0
 8022472:	d101      	bne.n	8022478 <stm32f4xxFlashDriverWriteWord+0x1a4>
 8022474:	2300      	movs	r3, #0
 8022476:	e001      	b.n	802247c <stm32f4xxFlashDriverWriteWord+0x1a8>
 8022478:	f240 230a 	movw	r3, #522	@ 0x20a
}
 802247c:	4618      	mov	r0, r3
 802247e:	3730      	adds	r7, #48	@ 0x30
 8022480:	46bd      	mov	sp, r7
 8022482:	bdb0      	pop	{r4, r5, r7, pc}
 8022484:	2000008c 	.word	0x2000008c
 8022488:	080311e4 	.word	0x080311e4
 802248c:	0803120c 	.word	0x0803120c
 8022490:	08031288 	.word	0x08031288
 8022494:	08031260 	.word	0x08031260
 8022498:	080312bc 	.word	0x080312bc

0802249c <stm32f4xxFlashGetSector>:
 * @param[in] address Given Flash Memory address
 * @return Sector number or -1
 **/

int_t stm32f4xxFlashGetSector(uint32_t address)
{
 802249c:	b480      	push	{r7}
 802249e:	b089      	sub	sp, #36	@ 0x24
 80224a0:	af00      	add	r7, sp, #0
 80224a2:	6078      	str	r0, [r7, #4]
   uint_t j;
   SectorsGroup* sGroup;
   int_t tempSector;

   //Initialize sector number
   sector = -1;
 80224a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80224a8:	61fb      	str	r3, [r7, #28]
   tempSector = 0;
 80224aa:	2300      	movs	r3, #0
 80224ac:	613b      	str	r3, [r7, #16]

   //Loop through flash sector group list
   for(i = 0; i < SECTORS_LIST_LEN; i++)
 80224ae:	2300      	movs	r3, #0
 80224b0:	61bb      	str	r3, [r7, #24]
 80224b2:	e026      	b.n	8022502 <stm32f4xxFlashGetSector+0x66>
   {
      //Point to the current sector group
      sGroup = (SectorsGroup*) &sectorsList[i];
 80224b4:	69ba      	ldr	r2, [r7, #24]
 80224b6:	4613      	mov	r3, r2
 80224b8:	005b      	lsls	r3, r3, #1
 80224ba:	4413      	add	r3, r2
 80224bc:	009b      	lsls	r3, r3, #2
 80224be:	4a16      	ldr	r2, [pc, #88]	@ (8022518 <stm32f4xxFlashGetSector+0x7c>)
 80224c0:	4413      	add	r3, r2
 80224c2:	60fb      	str	r3, [r7, #12]

      //Loop through sector group sectors list
      for(j = 0; j < sGroup->nb; j++)
 80224c4:	2300      	movs	r3, #0
 80224c6:	617b      	str	r3, [r7, #20]
 80224c8:	e013      	b.n	80224f2 <stm32f4xxFlashGetSector+0x56>
      {
         //Is current sector address matches given address?
         if(sGroup->addr + sGroup->size*j == address)
 80224ca:	68fb      	ldr	r3, [r7, #12]
 80224cc:	681a      	ldr	r2, [r3, #0]
 80224ce:	68fb      	ldr	r3, [r7, #12]
 80224d0:	685b      	ldr	r3, [r3, #4]
 80224d2:	6979      	ldr	r1, [r7, #20]
 80224d4:	fb01 f303 	mul.w	r3, r1, r3
 80224d8:	4413      	add	r3, r2
 80224da:	687a      	ldr	r2, [r7, #4]
 80224dc:	429a      	cmp	r2, r3
 80224de:	d102      	bne.n	80224e6 <stm32f4xxFlashGetSector+0x4a>
         {
            sector = tempSector;
 80224e0:	693b      	ldr	r3, [r7, #16]
 80224e2:	61fb      	str	r3, [r7, #28]
 80224e4:	e002      	b.n	80224ec <stm32f4xxFlashGetSector+0x50>
         }
         else
         {
            tempSector++;
 80224e6:	693b      	ldr	r3, [r7, #16]
 80224e8:	3301      	adds	r3, #1
 80224ea:	613b      	str	r3, [r7, #16]
      for(j = 0; j < sGroup->nb; j++)
 80224ec:	697b      	ldr	r3, [r7, #20]
 80224ee:	3301      	adds	r3, #1
 80224f0:	617b      	str	r3, [r7, #20]
 80224f2:	68fb      	ldr	r3, [r7, #12]
 80224f4:	689b      	ldr	r3, [r3, #8]
 80224f6:	697a      	ldr	r2, [r7, #20]
 80224f8:	429a      	cmp	r2, r3
 80224fa:	d3e6      	bcc.n	80224ca <stm32f4xxFlashGetSector+0x2e>
   for(i = 0; i < SECTORS_LIST_LEN; i++)
 80224fc:	69bb      	ldr	r3, [r7, #24]
 80224fe:	3301      	adds	r3, #1
 8022500:	61bb      	str	r3, [r7, #24]
 8022502:	69bb      	ldr	r3, [r7, #24]
 8022504:	2b02      	cmp	r3, #2
 8022506:	d9d5      	bls.n	80224b4 <stm32f4xxFlashGetSector+0x18>
         }
      }
   }

   return sector;
 8022508:	69fb      	ldr	r3, [r7, #28]
}
 802250a:	4618      	mov	r0, r3
 802250c:	3724      	adds	r7, #36	@ 0x24
 802250e:	46bd      	mov	sp, r7
 8022510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022514:	4770      	bx	lr
 8022516:	bf00      	nop
 8022518:	08032350 	.word	0x08032350

0802251c <imageCheckHeader>:
 * @param[in] header Pointer to the internal image header to be checked
 * @return Status code
 **/

cboot_error_t imageCheckHeader(ImageHeader *header)
{
 802251c:	b580      	push	{r7, lr}
 802251e:	b084      	sub	sp, #16
 8022520:	af00      	add	r7, sp, #0
 8022522:	6078      	str	r0, [r7, #4]
#ifndef SIMULATOR
   error_t error;
   uint32_t computedCrc;

   //Check parameter vailidty
   if(header == NULL)
 8022524:	687b      	ldr	r3, [r7, #4]
 8022526:	2b00      	cmp	r3, #0
 8022528:	d101      	bne.n	802252e <imageCheckHeader+0x12>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 802252a:	2304      	movs	r3, #4
 802252c:	e028      	b.n	8022580 <imageCheckHeader+0x64>

   //Compute image header crc
   error = CRC32_HASH_ALGO->compute((uint8_t*)header, sizeof(ImageHeader) - CRC32_DIGEST_SIZE, (uint8_t*)&computedCrc);
 802252e:	4b16      	ldr	r3, [pc, #88]	@ (8022588 <imageCheckHeader+0x6c>)
 8022530:	6a1b      	ldr	r3, [r3, #32]
 8022532:	f107 0208 	add.w	r2, r7, #8
 8022536:	213c      	movs	r1, #60	@ 0x3c
 8022538:	6878      	ldr	r0, [r7, #4]
 802253a:	4798      	blx	r3
 802253c:	4603      	mov	r3, r0
 802253e:	81fb      	strh	r3, [r7, #14]
   if(error)
 8022540:	89fb      	ldrh	r3, [r7, #14]
 8022542:	2b00      	cmp	r3, #0
 8022544:	d00d      	beq.n	8022562 <imageCheckHeader+0x46>
   {
      //Debug message
      TRACE_ERROR("Failed to compute image header crc!\r\n");
 8022546:	f7fe ff37 	bl	80213b8 <osSuspendAllTasks>
 802254a:	4b10      	ldr	r3, [pc, #64]	@ (802258c <imageCheckHeader+0x70>)
 802254c:	681b      	ldr	r3, [r3, #0]
 802254e:	68db      	ldr	r3, [r3, #12]
 8022550:	2225      	movs	r2, #37	@ 0x25
 8022552:	2101      	movs	r1, #1
 8022554:	480e      	ldr	r0, [pc, #56]	@ (8022590 <imageCheckHeader+0x74>)
 8022556:	f00d fe31 	bl	80301bc <fwrite>
 802255a:	f7fe ff34 	bl	80213c6 <osResumeAllTasks>
      return CBOOT_ERROR_FAILURE;
 802255e:	2301      	movs	r3, #1
 8022560:	e00e      	b.n	8022580 <imageCheckHeader+0x64>
   }

   //Check image header integrity
   if(header->headCrc != computedCrc)
 8022562:	687b      	ldr	r3, [r7, #4]
 8022564:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022566:	68bb      	ldr	r3, [r7, #8]
 8022568:	429a      	cmp	r2, r3
 802256a:	d001      	beq.n	8022570 <imageCheckHeader+0x54>
      return CBOOT_ERROR_INVALID_IMAGE_HEADER;
 802256c:	2307      	movs	r3, #7
 802256e:	e007      	b.n	8022580 <imageCheckHeader+0x64>

   //Check image header version
   if(header->headVers != IMAGE_HEADER_VERSION)
 8022570:	687b      	ldr	r3, [r7, #4]
 8022572:	681b      	ldr	r3, [r3, #0]
 8022574:	4a07      	ldr	r2, [pc, #28]	@ (8022594 <imageCheckHeader+0x78>)
 8022576:	4293      	cmp	r3, r2
 8022578:	d001      	beq.n	802257e <imageCheckHeader+0x62>
      return CBOOT_ERROR_INVALID_IMAGE_HEADER_VERSION;
 802257a:	2308      	movs	r3, #8
 802257c:	e000      	b.n	8022580 <imageCheckHeader+0x64>

   //Successful process
   return CBOOT_NO_ERROR;
 802257e:	2300      	movs	r3, #0
#else
   return CBOOT_NO_ERROR;
#endif
}
 8022580:	4618      	mov	r0, r3
 8022582:	3710      	adds	r7, #16
 8022584:	46bd      	mov	sp, r7
 8022586:	bd80      	pop	{r7, pc}
 8022588:	080322f0 	.word	0x080322f0
 802258c:	2000008c 	.word	0x2000008c
 8022590:	080312ec 	.word	0x080312ec
 8022594:	00010100 	.word	0x00010100

08022598 <imageGetHeader>:
 * @param[out] header Pointer to the header structure to be returned
 * @return Status code
 **/

cboot_error_t imageGetHeader(uint8_t *buffer, size_t bufferLen, ImageHeader **header)
{
 8022598:	b580      	push	{r7, lr}
 802259a:	b086      	sub	sp, #24
 802259c:	af00      	add	r7, sp, #0
 802259e:	60f8      	str	r0, [r7, #12]
 80225a0:	60b9      	str	r1, [r7, #8]
 80225a2:	607a      	str	r2, [r7, #4]
   cboot_error_t cerror;
   ImageHeader *tempHeader;

   //Check parameters validity
   if(buffer == NULL || bufferLen == 0 || header == NULL)
 80225a4:	68fb      	ldr	r3, [r7, #12]
 80225a6:	2b00      	cmp	r3, #0
 80225a8:	d005      	beq.n	80225b6 <imageGetHeader+0x1e>
 80225aa:	68bb      	ldr	r3, [r7, #8]
 80225ac:	2b00      	cmp	r3, #0
 80225ae:	d002      	beq.n	80225b6 <imageGetHeader+0x1e>
 80225b0:	687b      	ldr	r3, [r7, #4]
 80225b2:	2b00      	cmp	r3, #0
 80225b4:	d101      	bne.n	80225ba <imageGetHeader+0x22>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80225b6:	2304      	movs	r3, #4
 80225b8:	e014      	b.n	80225e4 <imageGetHeader+0x4c>

   if(bufferLen < sizeof(ImageHeader))
 80225ba:	68bb      	ldr	r3, [r7, #8]
 80225bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80225be:	d801      	bhi.n	80225c4 <imageGetHeader+0x2c>
      return CBOOT_ERROR_INVALID_LENGTH;
 80225c0:	2318      	movs	r3, #24
 80225c2:	e00f      	b.n	80225e4 <imageGetHeader+0x4c>

   //Point to the image header
   tempHeader = (ImageHeader *)buffer;
 80225c4:	68fb      	ldr	r3, [r7, #12]
 80225c6:	617b      	str	r3, [r7, #20]

   //Check image header
   cerror = imageCheckHeader(tempHeader);
 80225c8:	6978      	ldr	r0, [r7, #20]
 80225ca:	f7ff ffa7 	bl	802251c <imageCheckHeader>
 80225ce:	4603      	mov	r3, r0
 80225d0:	74fb      	strb	r3, [r7, #19]
   //Is any error?
   if(cerror)
 80225d2:	7cfb      	ldrb	r3, [r7, #19]
 80225d4:	2b00      	cmp	r3, #0
 80225d6:	d001      	beq.n	80225dc <imageGetHeader+0x44>
      return cerror;
 80225d8:	7cfb      	ldrb	r3, [r7, #19]
 80225da:	e003      	b.n	80225e4 <imageGetHeader+0x4c>

   //Save image header
   *header = tempHeader;
 80225dc:	687b      	ldr	r3, [r7, #4]
 80225de:	697a      	ldr	r2, [r7, #20]
 80225e0:	601a      	str	r2, [r3, #0]

   //Successful process
   return CBOOT_NO_ERROR;
 80225e2:	2300      	movs	r3, #0
}
 80225e4:	4618      	mov	r0, r3
 80225e6:	3718      	adds	r7, #24
 80225e8:	46bd      	mov	sp, r7
 80225ea:	bd80      	pop	{r7, pc}

080225ec <imageComputeHeaderCrc>:
 * @param[in/out] header Pointer the header on which to calculate the crc.
 * @return Error code
 **/

cboot_error_t imageComputeHeaderCrc(ImageHeader *header)
{
 80225ec:	b580      	push	{r7, lr}
 80225ee:	b084      	sub	sp, #16
 80225f0:	af00      	add	r7, sp, #0
 80225f2:	6078      	str	r0, [r7, #4]
    error_t error;

    //Check parameters validity
    if(header == NULL)
 80225f4:	687b      	ldr	r3, [r7, #4]
 80225f6:	2b00      	cmp	r3, #0
 80225f8:	d101      	bne.n	80225fe <imageComputeHeaderCrc+0x12>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 80225fa:	2304      	movs	r3, #4
 80225fc:	e00e      	b.n	802261c <imageComputeHeaderCrc+0x30>

    //Compute image header crc
    error = CRC32_HASH_ALGO->compute((uint8_t*)header, sizeof(ImageHeader) - CRC32_DIGEST_SIZE, (uint8_t*)&header->headCrc);
 80225fe:	4b09      	ldr	r3, [pc, #36]	@ (8022624 <imageComputeHeaderCrc+0x38>)
 8022600:	6a1b      	ldr	r3, [r3, #32]
 8022602:	687a      	ldr	r2, [r7, #4]
 8022604:	323c      	adds	r2, #60	@ 0x3c
 8022606:	213c      	movs	r1, #60	@ 0x3c
 8022608:	6878      	ldr	r0, [r7, #4]
 802260a:	4798      	blx	r3
 802260c:	4603      	mov	r3, r0
 802260e:	81fb      	strh	r3, [r7, #14]
    //Is any error?
    if(error)
 8022610:	89fb      	ldrh	r3, [r7, #14]
 8022612:	2b00      	cmp	r3, #0
 8022614:	d001      	beq.n	802261a <imageComputeHeaderCrc+0x2e>
        return CBOOT_ERROR_FAILURE;
 8022616:	2301      	movs	r3, #1
 8022618:	e000      	b.n	802261c <imageComputeHeaderCrc+0x30>

    //Successfull process
    return CBOOT_NO_ERROR;
 802261a:	2300      	movs	r3, #0
}
 802261c:	4618      	mov	r0, r3
 802261e:	3710      	adds	r7, #16
 8022620:	46bd      	mov	sp, r7
 8022622:	bd80      	pop	{r7, pc}
 8022624:	080322f0 	.word	0x080322f0

08022628 <imageProcessInputImage>:
 * @brief Process parsed image input data.
 * @param[in,out] context Pointer to the ImageProcess context
 * @return Status code
 **/
cboot_error_t imageProcessInputImage(ImageProcessContext *context)
{
 8022628:	b580      	push	{r7, lr}
 802262a:	b084      	sub	sp, #16
 802262c:	af00      	add	r7, sp, #0
 802262e:	6078      	str	r0, [r7, #4]
    cboot_error_t cerror;

    //Check parameters validity
    if(context == NULL)
 8022630:	687b      	ldr	r3, [r7, #4]
 8022632:	2b00      	cmp	r3, #0
 8022634:	d101      	bne.n	802263a <imageProcessInputImage+0x12>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 8022636:	2304      	movs	r3, #4
 8022638:	e031      	b.n	802269e <imageProcessInputImage+0x76>

    //Initialize variables
    cerror = CBOOT_NO_ERROR;
 802263a:	2300      	movs	r3, #0
 802263c:	73fb      	strb	r3, [r7, #15]

    // Image Process receiving image header state?
    if (context->inputImage.state == IMAGE_STATE_RECV_APP_HEADER)
 802263e:	687b      	ldr	r3, [r7, #4]
 8022640:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8022644:	2b01      	cmp	r3, #1
 8022646:	d109      	bne.n	802265c <imageProcessInputImage+0x34>
    {
        // Process image header
        cerror = imageProcessAppHeader(context);
 8022648:	6878      	ldr	r0, [r7, #4]
 802264a:	f000 faca 	bl	8022be2 <imageProcessAppHeader>
 802264e:	4603      	mov	r3, r0
 8022650:	73fb      	strb	r3, [r7, #15]

        // Is any error?
        if (cerror)
 8022652:	7bfb      	ldrb	r3, [r7, #15]
 8022654:	2b00      	cmp	r3, #0
 8022656:	d021      	beq.n	802269c <imageProcessInputImage+0x74>
            return cerror;
 8022658:	7bfb      	ldrb	r3, [r7, #15]
 802265a:	e020      	b.n	802269e <imageProcessInputImage+0x76>
    }
        // Image Process receiving image data state?
    else if (context->inputImage.state == IMAGE_STATE_RECV_APP_DATA)
 802265c:	687b      	ldr	r3, [r7, #4]
 802265e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8022662:	2b02      	cmp	r3, #2
 8022664:	d109      	bne.n	802267a <imageProcessInputImage+0x52>
    {
        // Process image data
        cerror = imageProcessAppData(context);
 8022666:	6878      	ldr	r0, [r7, #4]
 8022668:	f000 fb86 	bl	8022d78 <imageProcessAppData>
 802266c:	4603      	mov	r3, r0
 802266e:	73fb      	strb	r3, [r7, #15]
        // Is any error?
        if (cerror)
 8022670:	7bfb      	ldrb	r3, [r7, #15]
 8022672:	2b00      	cmp	r3, #0
 8022674:	d012      	beq.n	802269c <imageProcessInputImage+0x74>
            return cerror;
 8022676:	7bfb      	ldrb	r3, [r7, #15]
 8022678:	e011      	b.n	802269e <imageProcessInputImage+0x76>
    }
        // Image Process receiving image check data state?
    else if (context->inputImage.state == IMAGE_STATE_RECV_APP_CHECK)
 802267a:	687b      	ldr	r3, [r7, #4]
 802267c:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8022680:	2b03      	cmp	r3, #3
 8022682:	d109      	bne.n	8022698 <imageProcessInputImage+0x70>
    {
        // Process image check data
        cerror = imageProcessAppCheck(context);
 8022684:	6878      	ldr	r0, [r7, #4]
 8022686:	f000 fcb4 	bl	8022ff2 <imageProcessAppCheck>
 802268a:	4603      	mov	r3, r0
 802268c:	73fb      	strb	r3, [r7, #15]
        // Is any error?
        if (cerror)
 802268e:	7bfb      	ldrb	r3, [r7, #15]
 8022690:	2b00      	cmp	r3, #0
 8022692:	d003      	beq.n	802269c <imageProcessInputImage+0x74>
            return cerror;
 8022694:	7bfb      	ldrb	r3, [r7, #15]
 8022696:	e002      	b.n	802269e <imageProcessInputImage+0x76>
    }
    else
    {
        // Wrong state
        cerror = CBOOT_ERROR_INVALID_STATE;
 8022698:	2316      	movs	r3, #22
 802269a:	73fb      	strb	r3, [r7, #15]
    }

    // Successful process
    return cerror;
 802269c:	7bfb      	ldrb	r3, [r7, #15]
}
 802269e:	4618      	mov	r0, r3
 80226a0:	3710      	adds	r7, #16
 80226a2:	46bd      	mov	sp, r7
 80226a4:	bd80      	pop	{r7, pc}

080226a6 <imageProcessOutput>:
 * @param[in] length Length of the output data chunk.
 * @return Status code
 **/

cboot_error_t imageProcessOutput(ImageProcessContext *context, uint8_t *data, size_t length)
{
 80226a6:	b580      	push	{r7, lr}
 80226a8:	b084      	sub	sp, #16
 80226aa:	af00      	add	r7, sp, #0
 80226ac:	60f8      	str	r0, [r7, #12]
 80226ae:	60b9      	str	r1, [r7, #8]
 80226b0:	607a      	str	r2, [r7, #4]
    //Check parameters
    if(context == NULL || data == NULL || length == 0)
 80226b2:	68fb      	ldr	r3, [r7, #12]
 80226b4:	2b00      	cmp	r3, #0
 80226b6:	d005      	beq.n	80226c4 <imageProcessOutput+0x1e>
 80226b8:	68bb      	ldr	r3, [r7, #8]
 80226ba:	2b00      	cmp	r3, #0
 80226bc:	d002      	beq.n	80226c4 <imageProcessOutput+0x1e>
 80226be:	687b      	ldr	r3, [r7, #4]
 80226c0:	2b00      	cmp	r3, #0
 80226c2:	d101      	bne.n	80226c8 <imageProcessOutput+0x22>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 80226c4:	2304      	movs	r3, #4
 80226c6:	e01a      	b.n	80226fe <imageProcessOutput+0x58>

    //Select process function according outpout slot content type
    if(context->outputImage.activeSlot->cType & SLOT_CONTENT_BINARY)
 80226c8:	68fb      	ldr	r3, [r7, #12]
 80226ca:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 80226ce:	785b      	ldrb	r3, [r3, #1]
 80226d0:	f003 0308 	and.w	r3, r3, #8
 80226d4:	2b00      	cmp	r3, #0
 80226d6:	d009      	beq.n	80226ec <imageProcessOutput+0x46>
    {
        return imageProcessOutputBinary(&context->outputImage, data, length);
 80226d8:	68fb      	ldr	r3, [r7, #12]
 80226da:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80226de:	687a      	ldr	r2, [r7, #4]
 80226e0:	68b9      	ldr	r1, [r7, #8]
 80226e2:	4618      	mov	r0, r3
 80226e4:	f000 f80f 	bl	8022706 <imageProcessOutputBinary>
 80226e8:	4603      	mov	r3, r0
 80226ea:	e008      	b.n	80226fe <imageProcessOutput+0x58>
    }
    else
    {
        return imageProcessOutputImage(&context->outputImage, data, length);
 80226ec:	68fb      	ldr	r3, [r7, #12]
 80226ee:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80226f2:	687a      	ldr	r2, [r7, #4]
 80226f4:	68b9      	ldr	r1, [r7, #8]
 80226f6:	4618      	mov	r0, r3
 80226f8:	f000 f907 	bl	802290a <imageProcessOutputImage>
 80226fc:	4603      	mov	r3, r0
    }
}
 80226fe:	4618      	mov	r0, r3
 8022700:	3710      	adds	r7, #16
 8022702:	46bd      	mov	sp, r7
 8022704:	bd80      	pop	{r7, pc}

08022706 <imageProcessOutputBinary>:
 * @param[in] length Length of the output data chunk.
 * @return Status code
 **/

cboot_error_t imageProcessOutputBinary(Image *image, uint8_t *data, size_t length)
{
 8022706:	b590      	push	{r4, r7, lr}
 8022708:	b08b      	sub	sp, #44	@ 0x2c
 802270a:	af02      	add	r7, sp, #8
 802270c:	60f8      	str	r0, [r7, #12]
 802270e:	60b9      	str	r1, [r7, #8]
 8022710:	607a      	str	r2, [r7, #4]
    cboot_error_t cerror;
    size_t n;
    size_t written;

    //Check parameters validity
    if(image == NULL || data == NULL || length == 0)
 8022712:	68fb      	ldr	r3, [r7, #12]
 8022714:	2b00      	cmp	r3, #0
 8022716:	d006      	beq.n	8022726 <imageProcessOutputBinary+0x20>
 8022718:	68bb      	ldr	r3, [r7, #8]
 802271a:	2b00      	cmp	r3, #0
 802271c:	d003      	beq.n	8022726 <imageProcessOutputBinary+0x20>
 802271e:	687b      	ldr	r3, [r7, #4]
 8022720:	2b00      	cmp	r3, #0
 8022722:	f040 80e9 	bne.w	80228f8 <imageProcessOutputBinary+0x1f2>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 8022726:	2304      	movs	r3, #4
 8022728:	e0eb      	b.n	8022902 <imageProcessOutputBinary+0x1fc>

    //Process incoming data
    while(length > 0)
    {
        //The buffer can hold at most its size
        n = MIN(length, sizeof(image->buffer) - image->bufferLen);
 802272a:	68fb      	ldr	r3, [r7, #12]
 802272c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022730:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8022734:	687a      	ldr	r2, [r7, #4]
 8022736:	4293      	cmp	r3, r2
 8022738:	bf28      	it	cs
 802273a:	4613      	movcs	r3, r2
 802273c:	61fb      	str	r3, [r7, #28]

        //Copy the data to the buffer
        memcpy(image->bufferPos, data, n);
 802273e:	68fb      	ldr	r3, [r7, #12]
 8022740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8022744:	69fa      	ldr	r2, [r7, #28]
 8022746:	68b9      	ldr	r1, [r7, #8]
 8022748:	4618      	mov	r0, r3
 802274a:	f00d fef2 	bl	8030532 <memcpy>

        //Advance the data pointer
        data += n;
 802274e:	68ba      	ldr	r2, [r7, #8]
 8022750:	69fb      	ldr	r3, [r7, #28]
 8022752:	4413      	add	r3, r2
 8022754:	60bb      	str	r3, [r7, #8]
        //Remaining bytes to process
        length -= n;
 8022756:	687a      	ldr	r2, [r7, #4]
 8022758:	69fb      	ldr	r3, [r7, #28]
 802275a:	1ad3      	subs	r3, r2, r3
 802275c:	607b      	str	r3, [r7, #4]
        //Update buffer data length
        image->bufferLen += n;
 802275e:	68fb      	ldr	r3, [r7, #12]
 8022760:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8022764:	69fb      	ldr	r3, [r7, #28]
 8022766:	441a      	add	r2, r3
 8022768:	68fb      	ldr	r3, [r7, #12]
 802276a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        //Update buffer data free position
        image->bufferPos += n;
 802276e:	68fb      	ldr	r3, [r7, #12]
 8022770:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8022774:	69fb      	ldr	r3, [r7, #28]
 8022776:	441a      	add	r2, r3
 8022778:	68fb      	ldr	r3, [r7, #12]
 802277a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        //Process output image data block
        if(image->state == IMAGE_STATE_WRITE_APP_INIT)
 802277e:	68fb      	ldr	r3, [r7, #12]
 8022780:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8022784:	2b06      	cmp	r3, #6
 8022786:	d13b      	bne.n	8022800 <imageProcessOutputBinary+0xfa>
        {
            //Set firmware address offset
            image->pos = 0;
 8022788:	68fb      	ldr	r3, [r7, #12]
 802278a:	2200      	movs	r2, #0
 802278c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

            //Write first output image data block (with the flush flag)
            cerror = memoryWriteSlot(image->activeSlot, image->pos,
 8022790:	68fb      	ldr	r3, [r7, #12]
 8022792:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8022796:	68fb      	ldr	r3, [r7, #12]
 8022798:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
               image->buffer, image->bufferLen, &written, MEMORY_WRITE_RESET_FLAG);
 802279c:	68fa      	ldr	r2, [r7, #12]
            cerror = memoryWriteSlot(image->activeSlot, image->pos,
 802279e:	68fb      	ldr	r3, [r7, #12]
 80227a0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80227a4:	2302      	movs	r3, #2
 80227a6:	9301      	str	r3, [sp, #4]
 80227a8:	f107 0314 	add.w	r3, r7, #20
 80227ac:	9300      	str	r3, [sp, #0]
 80227ae:	4623      	mov	r3, r4
 80227b0:	f000 fd88 	bl	80232c4 <memoryWriteSlot>
 80227b4:	4603      	mov	r3, r0
 80227b6:	76fb      	strb	r3, [r7, #27]
            //Is any error?
            if(cerror) {
 80227b8:	7efb      	ldrb	r3, [r7, #27]
 80227ba:	2b00      	cmp	r3, #0
 80227bc:	d001      	beq.n	80227c2 <imageProcessOutputBinary+0xbc>
                //cerror = ERROR_FAILURE;
                return cerror;
 80227be:	7efb      	ldrb	r3, [r7, #27]
 80227c0:	e09f      	b.n	8022902 <imageProcessOutputBinary+0x1fc>
            }

            //Update firmware write address position
            image->pos += written;
 80227c2:	68fb      	ldr	r3, [r7, #12]
 80227c4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80227c8:	697b      	ldr	r3, [r7, #20]
 80227ca:	441a      	add	r2, r3
 80227cc:	68fb      	ldr	r3, [r7, #12]
 80227ce:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            //Update output image data written bytes number
            image->written += image->bufferLen;
 80227d2:	68fb      	ldr	r3, [r7, #12]
 80227d4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80227d8:	68fb      	ldr	r3, [r7, #12]
 80227da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80227de:	441a      	add	r2, r3
 80227e0:	68fb      	ldr	r3, [r7, #12]
 80227e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

            //Update buffer data length
            image->bufferLen = 0;
 80227e6:	68fb      	ldr	r3, [r7, #12]
 80227e8:	2200      	movs	r2, #0
 80227ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            //Move remaining buffer data at the beginning of data
            image->bufferPos = image->buffer;
 80227ee:	68fa      	ldr	r2, [r7, #12]
 80227f0:	68fb      	ldr	r3, [r7, #12]
 80227f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            //Debug message
            TRACE_DEBUG("output written bytes :0x%X/0x%X\r\n", image->written, image->firmwareLength);

            //Change state
            imageChangeState(image, IMAGE_STATE_WRITE_APP_DATA);
 80227f6:	2108      	movs	r1, #8
 80227f8:	68f8      	ldr	r0, [r7, #12]
 80227fa:	f000 fcc2 	bl	8023182 <imageChangeState>
 80227fe:	e07b      	b.n	80228f8 <imageProcessOutputBinary+0x1f2>
        }
        else if(image->state == IMAGE_STATE_WRITE_APP_DATA)
 8022800:	68fb      	ldr	r3, [r7, #12]
 8022802:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8022806:	2b08      	cmp	r3, #8
 8022808:	d176      	bne.n	80228f8 <imageProcessOutputBinary+0x1f2>
        {
            if(image->written + image->bufferLen == image->firmwareLength)
 802280a:	68fb      	ldr	r3, [r7, #12]
 802280c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8022810:	68fb      	ldr	r3, [r7, #12]
 8022812:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022816:	441a      	add	r2, r3
 8022818:	68fb      	ldr	r3, [r7, #12]
 802281a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 802281e:	429a      	cmp	r2, r3
 8022820:	d137      	bne.n	8022892 <imageProcessOutputBinary+0x18c>
            {
                //Write output image data block
                cerror = memoryWriteSlot(image->activeSlot, image->pos,
 8022822:	68fb      	ldr	r3, [r7, #12]
 8022824:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8022828:	68fb      	ldr	r3, [r7, #12]
 802282a:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
                   image->buffer, image->bufferLen, &written, MEMORY_WRITE_FORCE_FLAG);
 802282e:	68fa      	ldr	r2, [r7, #12]
                cerror = memoryWriteSlot(image->activeSlot, image->pos,
 8022830:	68fb      	ldr	r3, [r7, #12]
 8022832:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8022836:	2301      	movs	r3, #1
 8022838:	9301      	str	r3, [sp, #4]
 802283a:	f107 0314 	add.w	r3, r7, #20
 802283e:	9300      	str	r3, [sp, #0]
 8022840:	4623      	mov	r3, r4
 8022842:	f000 fd3f 	bl	80232c4 <memoryWriteSlot>
 8022846:	4603      	mov	r3, r0
 8022848:	76fb      	strb	r3, [r7, #27]
                //Is any error?
                if(cerror) {
 802284a:	7efb      	ldrb	r3, [r7, #27]
 802284c:	2b00      	cmp	r3, #0
 802284e:	d001      	beq.n	8022854 <imageProcessOutputBinary+0x14e>
                    //cerror = ERROR_FAILURE;
                    return cerror;
 8022850:	7efb      	ldrb	r3, [r7, #27]
 8022852:	e056      	b.n	8022902 <imageProcessOutputBinary+0x1fc>
                }

                //Update firmware write address position
                image->pos += written;
 8022854:	68fb      	ldr	r3, [r7, #12]
 8022856:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 802285a:	697b      	ldr	r3, [r7, #20]
 802285c:	441a      	add	r2, r3
 802285e:	68fb      	ldr	r3, [r7, #12]
 8022860:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
                //Update output image data written bytes number
                image->written += image->bufferLen;
 8022864:	68fb      	ldr	r3, [r7, #12]
 8022866:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 802286a:	68fb      	ldr	r3, [r7, #12]
 802286c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022870:	441a      	add	r2, r3
 8022872:	68fb      	ldr	r3, [r7, #12]
 8022874:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                //Update buffer data length
                image->bufferLen = 0;
 8022878:	68fb      	ldr	r3, [r7, #12]
 802287a:	2200      	movs	r2, #0
 802287c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                //Reset buffer data free position
                image->bufferPos = image->buffer;
 8022880:	68fa      	ldr	r2, [r7, #12]
 8022882:	68fb      	ldr	r3, [r7, #12]
 8022884:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

                //Change state
                imageChangeState(image, IMAGE_STATE_WRITE_APP_END);
 8022888:	210a      	movs	r1, #10
 802288a:	68f8      	ldr	r0, [r7, #12]
 802288c:	f000 fc79 	bl	8023182 <imageChangeState>
 8022890:	e032      	b.n	80228f8 <imageProcessOutputBinary+0x1f2>
            }
            else
            {
                //Write output image data block
                cerror = memoryWriteSlot(image->activeSlot, image->pos, image->buffer,
 8022892:	68fb      	ldr	r3, [r7, #12]
 8022894:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8022898:	68fb      	ldr	r3, [r7, #12]
 802289a:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 802289e:	68fa      	ldr	r2, [r7, #12]
 80228a0:	68fb      	ldr	r3, [r7, #12]
 80228a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80228a6:	2300      	movs	r3, #0
 80228a8:	9301      	str	r3, [sp, #4]
 80228aa:	f107 0314 	add.w	r3, r7, #20
 80228ae:	9300      	str	r3, [sp, #0]
 80228b0:	4623      	mov	r3, r4
 80228b2:	f000 fd07 	bl	80232c4 <memoryWriteSlot>
 80228b6:	4603      	mov	r3, r0
 80228b8:	76fb      	strb	r3, [r7, #27]
                   image->bufferLen, &written, MEMORY_WRITE_DEFAULT_FLAG);
                //Is any error?
                if(cerror) {
 80228ba:	7efb      	ldrb	r3, [r7, #27]
 80228bc:	2b00      	cmp	r3, #0
 80228be:	d001      	beq.n	80228c4 <imageProcessOutputBinary+0x1be>
                    //cerror = ERROR_FAILURE;
                    return cerror;
 80228c0:	7efb      	ldrb	r3, [r7, #27]
 80228c2:	e01e      	b.n	8022902 <imageProcessOutputBinary+0x1fc>
                }

                //Update firmware write address position
                image->pos += written;
 80228c4:	68fb      	ldr	r3, [r7, #12]
 80228c6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80228ca:	697b      	ldr	r3, [r7, #20]
 80228cc:	441a      	add	r2, r3
 80228ce:	68fb      	ldr	r3, [r7, #12]
 80228d0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
                //Update output image data written bytes number
                image->written += image->bufferLen;
 80228d4:	68fb      	ldr	r3, [r7, #12]
 80228d6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80228da:	68fb      	ldr	r3, [r7, #12]
 80228dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80228e0:	441a      	add	r2, r3
 80228e2:	68fb      	ldr	r3, [r7, #12]
 80228e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                //Update buffer data length
                image->bufferLen = 0;
 80228e8:	68fb      	ldr	r3, [r7, #12]
 80228ea:	2200      	movs	r2, #0
 80228ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                //Move remaining buffer data at the beginning of data
                image->bufferPos = image->buffer;
 80228f0:	68fa      	ldr	r2, [r7, #12]
 80228f2:	68fb      	ldr	r3, [r7, #12]
 80228f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    while(length > 0)
 80228f8:	687b      	ldr	r3, [r7, #4]
 80228fa:	2b00      	cmp	r3, #0
 80228fc:	f47f af15 	bne.w	802272a <imageProcessOutputBinary+0x24>
            //For sanity
        }
    }

    //Successful processing
    return CBOOT_NO_ERROR;
 8022900:	2300      	movs	r3, #0
}
 8022902:	4618      	mov	r0, r3
 8022904:	3724      	adds	r7, #36	@ 0x24
 8022906:	46bd      	mov	sp, r7
 8022908:	bd90      	pop	{r4, r7, pc}

0802290a <imageProcessOutputImage>:
 * @param[in] length Length of the output data chunk.
 * @return Status code
 **/

cboot_error_t imageProcessOutputImage(Image *image, uint8_t *data, size_t length)
{
 802290a:	b590      	push	{r4, r7, lr}
 802290c:	b08b      	sub	sp, #44	@ 0x2c
 802290e:	af02      	add	r7, sp, #8
 8022910:	60f8      	str	r0, [r7, #12]
 8022912:	60b9      	str	r1, [r7, #8]
 8022914:	607a      	str	r2, [r7, #4]
#if ((CIPHER_SUPPORT == ENABLED) && (IMAGE_OUTPUT_ENCRYPTED == ENABLED))
    uint8_t cipherBuff[MAX_CIPHER_BLOCK_SIZE];
#endif

    //Check parameters validity
    if(image == NULL || data == NULL || length == 0)
 8022916:	68fb      	ldr	r3, [r7, #12]
 8022918:	2b00      	cmp	r3, #0
 802291a:	d006      	beq.n	802292a <imageProcessOutputImage+0x20>
 802291c:	68bb      	ldr	r3, [r7, #8]
 802291e:	2b00      	cmp	r3, #0
 8022920:	d003      	beq.n	802292a <imageProcessOutputImage+0x20>
 8022922:	687b      	ldr	r3, [r7, #4]
 8022924:	2b00      	cmp	r3, #0
 8022926:	f040 8153 	bne.w	8022bd0 <imageProcessOutputImage+0x2c6>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 802292a:	2304      	movs	r3, #4
 802292c:	e155      	b.n	8022bda <imageProcessOutputImage+0x2d0>

    //Process the incoming data
    while(length > 0)
    {
        //The buffer can hold at most it size
        n = MIN(length, sizeof(image->buffer) - image->bufferLen);
 802292e:	68fb      	ldr	r3, [r7, #12]
 8022930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022934:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8022938:	687a      	ldr	r2, [r7, #4]
 802293a:	4293      	cmp	r3, r2
 802293c:	bf28      	it	cs
 802293e:	4613      	movcs	r3, r2
 8022940:	61fb      	str	r3, [r7, #28]

        //Copy the data to the buffer
        memcpy(image->bufferPos, data, n);
 8022942:	68fb      	ldr	r3, [r7, #12]
 8022944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8022948:	69fa      	ldr	r2, [r7, #28]
 802294a:	68b9      	ldr	r1, [r7, #8]
 802294c:	4618      	mov	r0, r3
 802294e:	f00d fdf0 	bl	8030532 <memcpy>

        //Advance the data pointer
        data += n;
 8022952:	68ba      	ldr	r2, [r7, #8]
 8022954:	69fb      	ldr	r3, [r7, #28]
 8022956:	4413      	add	r3, r2
 8022958:	60bb      	str	r3, [r7, #8]
        //Remaining bytes to process
        length -= n;
 802295a:	687a      	ldr	r2, [r7, #4]
 802295c:	69fb      	ldr	r3, [r7, #28]
 802295e:	1ad3      	subs	r3, r2, r3
 8022960:	607b      	str	r3, [r7, #4]
        //Update buffer data length
        image->bufferLen += n;
 8022962:	68fb      	ldr	r3, [r7, #12]
 8022964:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8022968:	69fb      	ldr	r3, [r7, #28]
 802296a:	441a      	add	r2, r3
 802296c:	68fb      	ldr	r3, [r7, #12]
 802296e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        //Update buffer data free position
        image->bufferPos += n;
 8022972:	68fb      	ldr	r3, [r7, #12]
 8022974:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8022978:	69fb      	ldr	r3, [r7, #28]
 802297a:	441a      	add	r2, r3
 802297c:	68fb      	ldr	r3, [r7, #12]
 802297e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        //Format new Header
        if(image->state == IMAGE_STATE_WRITE_APP_HEADER)
 8022982:	68fb      	ldr	r3, [r7, #12]
 8022984:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8022988:	2b07      	cmp	r3, #7
 802298a:	d158      	bne.n	8022a3e <imageProcessOutputImage+0x134>
        {
            //Point to image header
            imgHeader = (ImageHeader*)image->buffer;
 802298c:	68fb      	ldr	r3, [r7, #12]
 802298e:	617b      	str	r3, [r7, #20]

            //Set new header image index
            imgHeader->imgIndex = image->newImageIdx;
 8022990:	68fb      	ldr	r3, [r7, #12]
 8022992:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8022996:	461a      	mov	r2, r3
 8022998:	697b      	ldr	r3, [r7, #20]
 802299a:	605a      	str	r2, [r3, #4]

            //Save original image data size
            image->firmwareLength = imgHeader->dataSize;
 802299c:	697b      	ldr	r3, [r7, #20]
 802299e:	f8d3 200d 	ldr.w	r2, [r3, #13]
 80229a2:	68fb      	ldr	r3, [r7, #12]
 80229a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            //Make sure header image data size is a multiple of encryption algo block size
            if(imgHeader->dataSize % image->cipherEngine.ivLen != 0)
                imgHeader->dataSize += image->cipherEngine.ivLen - (imgHeader->dataSize % image->cipherEngine.ivLen);
#endif
            //Compute new image header crc
            cerror = imageComputeHeaderCrc(imgHeader);
 80229a8:	6978      	ldr	r0, [r7, #20]
 80229aa:	f7ff fe1f 	bl	80225ec <imageComputeHeaderCrc>
 80229ae:	4603      	mov	r3, r0
 80229b0:	76fb      	strb	r3, [r7, #27]
            //Is any error?
            if(cerror)
 80229b2:	7efb      	ldrb	r3, [r7, #27]
 80229b4:	2b00      	cmp	r3, #0
 80229b6:	d001      	beq.n	80229bc <imageProcessOutputImage+0xb2>
                return cerror;
 80229b8:	7efb      	ldrb	r3, [r7, #27]
 80229ba:	e10e      	b.n	8022bda <imageProcessOutputImage+0x2d0>

            //Update application check computation tag (could be integrity tag or
            //authentication tag or hash signature tag)
            cerror = verifyProcess(&image->verifyContext, (uint8_t*)&imgHeader->headCrc, CRC32_DIGEST_SIZE);
 80229bc:	68fb      	ldr	r3, [r7, #12]
 80229be:	f503 702e 	add.w	r0, r3, #696	@ 0x2b8
 80229c2:	697b      	ldr	r3, [r7, #20]
 80229c4:	333c      	adds	r3, #60	@ 0x3c
 80229c6:	2204      	movs	r2, #4
 80229c8:	4619      	mov	r1, r3
 80229ca:	f000 fffd 	bl	80239c8 <verifyProcess>
 80229ce:	4603      	mov	r3, r0
 80229d0:	76fb      	strb	r3, [r7, #27]
            //Is any error?
            if(cerror)
 80229d2:	7efb      	ldrb	r3, [r7, #27]
 80229d4:	2b00      	cmp	r3, #0
 80229d6:	d001      	beq.n	80229dc <imageProcessOutputImage+0xd2>
                return cerror;
 80229d8:	7efb      	ldrb	r3, [r7, #27]
 80229da:	e0fe      	b.n	8022bda <imageProcessOutputImage+0x2d0>

            //Write new image header (with flush)
            cerror = memoryWriteSlot(image->activeSlot, image->pos, (uint8_t*)imgHeader,
 80229dc:	68fb      	ldr	r3, [r7, #12]
 80229de:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80229e2:	68fb      	ldr	r3, [r7, #12]
 80229e4:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80229e8:	2302      	movs	r3, #2
 80229ea:	9301      	str	r3, [sp, #4]
 80229ec:	f107 0310 	add.w	r3, r7, #16
 80229f0:	9300      	str	r3, [sp, #0]
 80229f2:	2340      	movs	r3, #64	@ 0x40
 80229f4:	697a      	ldr	r2, [r7, #20]
 80229f6:	f000 fc65 	bl	80232c4 <memoryWriteSlot>
 80229fa:	4603      	mov	r3, r0
 80229fc:	76fb      	strb	r3, [r7, #27]
               sizeof(ImageHeader), &written, MEMORY_WRITE_RESET_FLAG);
            if(cerror)
 80229fe:	7efb      	ldrb	r3, [r7, #27]
 8022a00:	2b00      	cmp	r3, #0
 8022a02:	d001      	beq.n	8022a08 <imageProcessOutputImage+0xfe>
                return cerror;
 8022a04:	7efb      	ldrb	r3, [r7, #27]
 8022a06:	e0e8      	b.n	8022bda <imageProcessOutputImage+0x2d0>

            //Update firmware write position
            image->pos += written;
 8022a08:	68fb      	ldr	r3, [r7, #12]
 8022a0a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8022a0e:	693b      	ldr	r3, [r7, #16]
 8022a10:	441a      	add	r2, r3
 8022a12:	68fb      	ldr	r3, [r7, #12]
 8022a14:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            //Update firmware write position
            image->pos += written;
#endif

            //Reset buffer position
            image->bufferPos = image->buffer;
 8022a18:	68fa      	ldr	r2, [r7, #12]
 8022a1a:	68fb      	ldr	r3, [r7, #12]
 8022a1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            //Reset buffer data
            memset(image->buffer, 0x00, sizeof(image->buffer));
 8022a20:	68fb      	ldr	r3, [r7, #12]
 8022a22:	2280      	movs	r2, #128	@ 0x80
 8022a24:	2100      	movs	r1, #0
 8022a26:	4618      	mov	r0, r3
 8022a28:	f00d fcbe 	bl	80303a8 <memset>
            //Reset buffer data length
            image->bufferLen = 0;
 8022a2c:	68fb      	ldr	r3, [r7, #12]
 8022a2e:	2200      	movs	r2, #0
 8022a30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            //Change state
            imageChangeState(image, IMAGE_STATE_WRITE_APP_DATA);
 8022a34:	2108      	movs	r1, #8
 8022a36:	68f8      	ldr	r0, [r7, #12]
 8022a38:	f000 fba3 	bl	8023182 <imageChangeState>
 8022a3c:	e0c8      	b.n	8022bd0 <imageProcessOutputImage+0x2c6>
        }
        //Format image app
        else if(image->state == IMAGE_STATE_WRITE_APP_DATA)
 8022a3e:	68fb      	ldr	r3, [r7, #12]
 8022a40:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8022a44:	2b08      	cmp	r3, #8
 8022a46:	f040 80c3 	bne.w	8022bd0 <imageProcessOutputImage+0x2c6>
        {
            //Reached the end of image firmware binary section?
            if(image->written + image->bufferLen == image->firmwareLength)
 8022a4a:	68fb      	ldr	r3, [r7, #12]
 8022a4c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8022a50:	68fb      	ldr	r3, [r7, #12]
 8022a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022a56:	441a      	add	r2, r3
 8022a58:	68fb      	ldr	r3, [r7, #12]
 8022a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8022a5e:	429a      	cmp	r2, r3
 8022a60:	d16c      	bne.n	8022b3c <imageProcessOutputImage+0x232>

                //Update firmware write position
                image->pos += written;
#else
                //Update image check data computation tag (crc tag)
                cerror = verifyProcess(&image->verifyContext, image->buffer, image->bufferLen);
 8022a62:	68fb      	ldr	r3, [r7, #12]
 8022a64:	f503 702e 	add.w	r0, r3, #696	@ 0x2b8
 8022a68:	68f9      	ldr	r1, [r7, #12]
 8022a6a:	68fb      	ldr	r3, [r7, #12]
 8022a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022a70:	461a      	mov	r2, r3
 8022a72:	f000 ffa9 	bl	80239c8 <verifyProcess>
 8022a76:	4603      	mov	r3, r0
 8022a78:	76fb      	strb	r3, [r7, #27]
                if(cerror)
 8022a7a:	7efb      	ldrb	r3, [r7, #27]
 8022a7c:	2b00      	cmp	r3, #0
 8022a7e:	d001      	beq.n	8022a84 <imageProcessOutputImage+0x17a>
                    return cerror;
 8022a80:	7efb      	ldrb	r3, [r7, #27]
 8022a82:	e0aa      	b.n	8022bda <imageProcessOutputImage+0x2d0>

                //Write image data block into memory
                cerror = memoryWriteSlot(image->activeSlot, image->pos, image->buffer,
 8022a84:	68fb      	ldr	r3, [r7, #12]
 8022a86:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8022a8a:	68fb      	ldr	r3, [r7, #12]
 8022a8c:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8022a90:	68fa      	ldr	r2, [r7, #12]
 8022a92:	68fb      	ldr	r3, [r7, #12]
 8022a94:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8022a98:	2300      	movs	r3, #0
 8022a9a:	9301      	str	r3, [sp, #4]
 8022a9c:	f107 0310 	add.w	r3, r7, #16
 8022aa0:	9300      	str	r3, [sp, #0]
 8022aa2:	4623      	mov	r3, r4
 8022aa4:	f000 fc0e 	bl	80232c4 <memoryWriteSlot>
 8022aa8:	4603      	mov	r3, r0
 8022aaa:	76fb      	strb	r3, [r7, #27]
                   image->bufferLen, &written, MEMORY_WRITE_DEFAULT_FLAG);
                if(cerror)
 8022aac:	7efb      	ldrb	r3, [r7, #27]
 8022aae:	2b00      	cmp	r3, #0
 8022ab0:	d001      	beq.n	8022ab6 <imageProcessOutputImage+0x1ac>
                    return cerror;
 8022ab2:	7efb      	ldrb	r3, [r7, #27]
 8022ab4:	e091      	b.n	8022bda <imageProcessOutputImage+0x2d0>

                //Update firmware write position
                image->pos += written;
 8022ab6:	68fb      	ldr	r3, [r7, #12]
 8022ab8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8022abc:	693b      	ldr	r3, [r7, #16]
 8022abe:	441a      	add	r2, r3
 8022ac0:	68fb      	ldr	r3, [r7, #12]
 8022ac2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif

                //Update written data
                image->written += n;
 8022ac6:	68fb      	ldr	r3, [r7, #12]
 8022ac8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8022acc:	69fb      	ldr	r3, [r7, #28]
 8022ace:	441a      	add	r2, r3
 8022ad0:	68fb      	ldr	r3, [r7, #12]
 8022ad2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                //Finalize image check data computation tag (crc tag)
                cerror = verifyGenerateCheckData(&image->verifyContext, image->buffer,
 8022ad6:	68fb      	ldr	r3, [r7, #12]
 8022ad8:	f503 702e 	add.w	r0, r3, #696	@ 0x2b8
 8022adc:	68f9      	ldr	r1, [r7, #12]
 8022ade:	68fb      	ldr	r3, [r7, #12]
 8022ae0:	f8d3 23e4 	ldr.w	r2, [r3, #996]	@ 0x3e4
 8022ae4:	68fb      	ldr	r3, [r7, #12]
 8022ae6:	3384      	adds	r3, #132	@ 0x84
 8022ae8:	f001 f854 	bl	8023b94 <verifyGenerateCheckData>
 8022aec:	4603      	mov	r3, r0
 8022aee:	76fb      	strb	r3, [r7, #27]
                image->verifyContext.imageCheckDigestSize, &image->bufferLen);

                //Write new image check data tag (crc tag)
                cerror = memoryWriteSlot(image->activeSlot, image->pos, image->buffer,
 8022af0:	68fb      	ldr	r3, [r7, #12]
 8022af2:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8022af6:	68fb      	ldr	r3, [r7, #12]
 8022af8:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8022afc:	68fa      	ldr	r2, [r7, #12]
 8022afe:	68fb      	ldr	r3, [r7, #12]
 8022b00:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8022b04:	2301      	movs	r3, #1
 8022b06:	9301      	str	r3, [sp, #4]
 8022b08:	f107 0310 	add.w	r3, r7, #16
 8022b0c:	9300      	str	r3, [sp, #0]
 8022b0e:	4623      	mov	r3, r4
 8022b10:	f000 fbd8 	bl	80232c4 <memoryWriteSlot>
 8022b14:	4603      	mov	r3, r0
 8022b16:	76fb      	strb	r3, [r7, #27]
                   image->bufferLen, &written, MEMORY_WRITE_FORCE_FLAG);
                if(cerror)
 8022b18:	7efb      	ldrb	r3, [r7, #27]
 8022b1a:	2b00      	cmp	r3, #0
 8022b1c:	d001      	beq.n	8022b22 <imageProcessOutputImage+0x218>
                    return cerror;
 8022b1e:	7efb      	ldrb	r3, [r7, #27]
 8022b20:	e05b      	b.n	8022bda <imageProcessOutputImage+0x2d0>

                //Update firmware write position
                image->pos += written;
 8022b22:	68fb      	ldr	r3, [r7, #12]
 8022b24:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8022b28:	693b      	ldr	r3, [r7, #16]
 8022b2a:	441a      	add	r2, r3
 8022b2c:	68fb      	ldr	r3, [r7, #12]
 8022b2e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

                //Change state
                imageChangeState(image, IMAGE_STATE_WRITE_APP_END);
 8022b32:	210a      	movs	r1, #10
 8022b34:	68f8      	ldr	r0, [r7, #12]
 8022b36:	f000 fb24 	bl	8023182 <imageChangeState>
 8022b3a:	e049      	b.n	8022bd0 <imageProcessOutputImage+0x2c6>
                memcpy(image->buffer, image->bufferPos, image->bufferLen);
                //Reset buffer position
                image->bufferPos = image->buffer + image->bufferLen;
#else
                //Update image check data computation tag (crc tag)
                cerror = verifyProcess(&image->verifyContext, image->buffer, image->bufferLen);
 8022b3c:	68fb      	ldr	r3, [r7, #12]
 8022b3e:	f503 702e 	add.w	r0, r3, #696	@ 0x2b8
 8022b42:	68f9      	ldr	r1, [r7, #12]
 8022b44:	68fb      	ldr	r3, [r7, #12]
 8022b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022b4a:	461a      	mov	r2, r3
 8022b4c:	f000 ff3c 	bl	80239c8 <verifyProcess>
 8022b50:	4603      	mov	r3, r0
 8022b52:	76fb      	strb	r3, [r7, #27]
                if(cerror)
 8022b54:	7efb      	ldrb	r3, [r7, #27]
 8022b56:	2b00      	cmp	r3, #0
 8022b58:	d001      	beq.n	8022b5e <imageProcessOutputImage+0x254>
                    return cerror;
 8022b5a:	7efb      	ldrb	r3, [r7, #27]
 8022b5c:	e03d      	b.n	8022bda <imageProcessOutputImage+0x2d0>

                //Write encrypted image data into memory
                cerror = memoryWriteSlot(image->activeSlot, image->pos, image->buffer,
 8022b5e:	68fb      	ldr	r3, [r7, #12]
 8022b60:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8022b64:	68fb      	ldr	r3, [r7, #12]
 8022b66:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8022b6a:	68fa      	ldr	r2, [r7, #12]
 8022b6c:	68fb      	ldr	r3, [r7, #12]
 8022b6e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8022b72:	2300      	movs	r3, #0
 8022b74:	9301      	str	r3, [sp, #4]
 8022b76:	f107 0310 	add.w	r3, r7, #16
 8022b7a:	9300      	str	r3, [sp, #0]
 8022b7c:	4623      	mov	r3, r4
 8022b7e:	f000 fba1 	bl	80232c4 <memoryWriteSlot>
 8022b82:	4603      	mov	r3, r0
 8022b84:	76fb      	strb	r3, [r7, #27]
                   image->bufferLen, &written, MEMORY_WRITE_DEFAULT_FLAG);
                if(cerror)
 8022b86:	7efb      	ldrb	r3, [r7, #27]
 8022b88:	2b00      	cmp	r3, #0
 8022b8a:	d001      	beq.n	8022b90 <imageProcessOutputImage+0x286>
                    return cerror;
 8022b8c:	7efb      	ldrb	r3, [r7, #27]
 8022b8e:	e024      	b.n	8022bda <imageProcessOutputImage+0x2d0>

                //Update firmware write position
                image->pos += written;
 8022b90:	68fb      	ldr	r3, [r7, #12]
 8022b92:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8022b96:	693b      	ldr	r3, [r7, #16]
 8022b98:	441a      	add	r2, r3
 8022b9a:	68fb      	ldr	r3, [r7, #12]
 8022b9c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

                //Update context buffer length
                image->written += image->bufferLen;
 8022ba0:	68fb      	ldr	r3, [r7, #12]
 8022ba2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8022ba6:	68fb      	ldr	r3, [r7, #12]
 8022ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022bac:	441a      	add	r2, r3
 8022bae:	68fb      	ldr	r3, [r7, #12]
 8022bb0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                //Update buffer data length
                image->bufferLen = 0;
 8022bb4:	68fb      	ldr	r3, [r7, #12]
 8022bb6:	2200      	movs	r2, #0
 8022bb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                //Reset buffer position
                image->bufferPos = image->buffer;
 8022bbc:	68fa      	ldr	r2, [r7, #12]
 8022bbe:	68fb      	ldr	r3, [r7, #12]
 8022bc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                //Reset buffer
                memset(image->buffer, 0, sizeof(image->buffer));
 8022bc4:	68fb      	ldr	r3, [r7, #12]
 8022bc6:	2280      	movs	r2, #128	@ 0x80
 8022bc8:	2100      	movs	r1, #0
 8022bca:	4618      	mov	r0, r3
 8022bcc:	f00d fbec 	bl	80303a8 <memset>
    while(length > 0)
 8022bd0:	687b      	ldr	r3, [r7, #4]
 8022bd2:	2b00      	cmp	r3, #0
 8022bd4:	f47f aeab 	bne.w	802292e <imageProcessOutputImage+0x24>
            //For sanity
        }
    }

    //Successful process
    return CBOOT_NO_ERROR;
 8022bd8:	2300      	movs	r3, #0
}
 8022bda:	4618      	mov	r0, r3
 8022bdc:	3724      	adds	r7, #36	@ 0x24
 8022bde:	46bd      	mov	sp, r7
 8022be0:	bd90      	pop	{r4, r7, pc}

08022be2 <imageProcessAppHeader>:
 * @param[in,out] context Pointer to the ImageProcess context
 * @return Error code.
 **/

cboot_error_t imageProcessAppHeader(ImageProcessContext *context)
{
 8022be2:	b580      	push	{r7, lr}
 8022be4:	b088      	sub	sp, #32
 8022be6:	af00      	add	r7, sp, #0
 8022be8:	6078      	str	r0, [r7, #4]
    Image *imageIn;
    size_t n;
    size_t outputSize;

    //Check parameter validity
    if (context == NULL)
 8022bea:	687b      	ldr	r3, [r7, #4]
 8022bec:	2b00      	cmp	r3, #0
 8022bee:	d101      	bne.n	8022bf4 <imageProcessAppHeader+0x12>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 8022bf0:	2304      	movs	r3, #4
 8022bf2:	e0bd      	b.n	8022d70 <imageProcessAppHeader+0x18e>

    //Point to output image context
    imageIn = &context->inputImage;
 8022bf4:	687b      	ldr	r3, [r7, #4]
 8022bf6:	61fb      	str	r3, [r7, #28]
    imageOut = &context->outputImage;
 8022bf8:	687b      	ldr	r3, [r7, #4]
 8022bfa:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8022bfe:	61bb      	str	r3, [r7, #24]

    //Check current input image process state
    if(imageIn->state != IMAGE_STATE_RECV_APP_HEADER)
 8022c00:	69fb      	ldr	r3, [r7, #28]
 8022c02:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8022c06:	2b01      	cmp	r3, #1
 8022c08:	d001      	beq.n	8022c0e <imageProcessAppHeader+0x2c>
        return CBOOT_ERROR_INVALID_STATE;
 8022c0a:	2316      	movs	r3, #22
 8022c0c:	e0b0      	b.n	8022d70 <imageProcessAppHeader+0x18e>

    //Initialize variable
    n = 0;
 8022c0e:	2300      	movs	r3, #0
 8022c10:	617b      	str	r3, [r7, #20]
    imgHeader = NULL;
 8022c12:	2300      	movs	r3, #0
 8022c14:	60bb      	str	r3, [r7, #8]
    outputSize = 0;
 8022c16:	2300      	movs	r3, #0
 8022c18:	613b      	str	r3, [r7, #16]

    //Is buffer full enough to contain an image header?
    if (imageIn->bufferLen >= sizeof(ImageHeader))
 8022c1a:	69fb      	ldr	r3, [r7, #28]
 8022c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022c20:	2b3f      	cmp	r3, #63	@ 0x3f
 8022c22:	f240 80a4 	bls.w	8022d6e <imageProcessAppHeader+0x18c>
    {
        //Debug message
        TRACE_DEBUG("Processing firmware image header...\r\n");

        //Get input image header
        cerror = imageGetHeader(imageIn->buffer, imageIn->bufferLen, &imgHeader);
 8022c26:	69f8      	ldr	r0, [r7, #28]
 8022c28:	69fb      	ldr	r3, [r7, #28]
 8022c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022c2e:	f107 0208 	add.w	r2, r7, #8
 8022c32:	4619      	mov	r1, r3
 8022c34:	f7ff fcb0 	bl	8022598 <imageGetHeader>
 8022c38:	4603      	mov	r3, r0
 8022c3a:	73fb      	strb	r3, [r7, #15]
        //Is any error?
        if(cerror)
 8022c3c:	7bfb      	ldrb	r3, [r7, #15]
 8022c3e:	2b00      	cmp	r3, #0
 8022c40:	d001      	beq.n	8022c46 <imageProcessAppHeader+0x64>
        {
            //Debug message
            TRACE_INFO("Input image header is invalid!\r\n");
            //Forward error
            return cerror;
 8022c42:	7bfb      	ldrb	r3, [r7, #15]
 8022c44:	e094      	b.n	8022d70 <imageProcessAppHeader+0x18e>
        }

        //Check anti-rollback callback
        if(context->imgAntiRollbackCallback != NULL)
 8022c46:	687b      	ldr	r3, [r7, #4]
 8022c48:	f8d3 3bec 	ldr.w	r3, [r3, #3052]	@ 0xbec
 8022c4c:	2b00      	cmp	r3, #0
 8022c4e:	d00f      	beq.n	8022c70 <imageProcessAppHeader+0x8e>
        {
            //Decide whether to perform the update or not in regards of the
            //  firmware application version inside the update image.
            if(!context->imgAntiRollbackCallback(context->currentAppVersion, imgHeader->dataVers))
 8022c50:	687b      	ldr	r3, [r7, #4]
 8022c52:	f8d3 3bec 	ldr.w	r3, [r3, #3052]	@ 0xbec
 8022c56:	687a      	ldr	r2, [r7, #4]
 8022c58:	f8d2 0be8 	ldr.w	r0, [r2, #3048]	@ 0xbe8
 8022c5c:	68ba      	ldr	r2, [r7, #8]
 8022c5e:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8022c62:	4611      	mov	r1, r2
 8022c64:	4798      	blx	r3
 8022c66:	4603      	mov	r3, r0
 8022c68:	2b00      	cmp	r3, #0
 8022c6a:	d101      	bne.n	8022c70 <imageProcessAppHeader+0x8e>
            {
                //Debug message
                TRACE_INFO("Update Aborted! Incorrect update image application version.\r\n");
                //Forward error
                return CBOOT_ERROR_INCORRECT_IMAGE_APP_VERSION;
 8022c6c:	230e      	movs	r3, #14
 8022c6e:	e07f      	b.n	8022d70 <imageProcessAppHeader+0x18e>
            }
        }

        //Check the header image type
        if(imgHeader->imgType != IMAGE_TYPE_APP)
 8022c70:	68bb      	ldr	r3, [r7, #8]
 8022c72:	7a1b      	ldrb	r3, [r3, #8]
 8022c74:	2b01      	cmp	r3, #1
 8022c76:	d001      	beq.n	8022c7c <imageProcessAppHeader+0x9a>
        {
            //Debug message
            TRACE_ERROR("Invalid header image type!\r\n");
            return CBOOT_ERROR_INVALID_HEADER_APP_TYPE;
 8022c78:	2309      	movs	r3, #9
 8022c7a:	e079      	b.n	8022d70 <imageProcessAppHeader+0x18e>
        }

        //Check output type
        if(imageOut->activeSlot->cType & SLOT_CONTENT_BINARY)
 8022c7c:	69bb      	ldr	r3, [r7, #24]
 8022c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8022c82:	785b      	ldrb	r3, [r3, #1]
 8022c84:	f003 0308 	and.w	r3, r3, #8
 8022c88:	2b00      	cmp	r3, #0
 8022c8a:	d00c      	beq.n	8022ca6 <imageProcessAppHeader+0xc4>
        {
            //Compute output binary size
            outputSize = imgHeader->dataSize;
 8022c8c:	68bb      	ldr	r3, [r7, #8]
 8022c8e:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8022c92:	613b      	str	r3, [r7, #16]

            //Would output firmware overcome the memory slot holding it?
            if (outputSize > imageOut->activeSlot->size)
 8022c94:	69bb      	ldr	r3, [r7, #24]
 8022c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8022c9a:	68db      	ldr	r3, [r3, #12]
 8022c9c:	693a      	ldr	r2, [r7, #16]
 8022c9e:	429a      	cmp	r2, r3
 8022ca0:	d914      	bls.n	8022ccc <imageProcessAppHeader+0xea>
            {
                //Debug message
                TRACE_ERROR("Output binary would be bigger the memory slot holding it\r\n");
                //Forward error
                return CBOOT_ERROR_BUFFER_OVERFLOW;
 8022ca2:	2317      	movs	r3, #23
 8022ca4:	e064      	b.n	8022d70 <imageProcessAppHeader+0x18e>
#if ((CIPHER_SUPPORT == ENABLED) && (IMAGE_OUTPUT_ENCRYPTED == ENABLED))
            outputSize = imgHeader->dataSize + sizeof(ImageHeader) +
                imageOut->cipherEngine.ivLen +
                imageOut->verifyContext.verifySettings.integrityAlgo->digestSize;
#else
            outputSize = imgHeader->dataSize + sizeof(ImageHeader) +
 8022ca6:	68bb      	ldr	r3, [r7, #8]
 8022ca8:	f8d3 200d 	ldr.w	r2, [r3, #13]
                imageOut->verifyContext.verifySettings.integrityAlgo->digestSize;
 8022cac:	69bb      	ldr	r3, [r7, #24]
 8022cae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8022cb2:	695b      	ldr	r3, [r3, #20]
            outputSize = imgHeader->dataSize + sizeof(ImageHeader) +
 8022cb4:	4413      	add	r3, r2
 8022cb6:	3340      	adds	r3, #64	@ 0x40
 8022cb8:	613b      	str	r3, [r7, #16]
#endif
            //Would output image overcome the memory slot holding it?
            if (outputSize > imageOut->activeSlot->size)
 8022cba:	69bb      	ldr	r3, [r7, #24]
 8022cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8022cc0:	68db      	ldr	r3, [r3, #12]
 8022cc2:	693a      	ldr	r2, [r7, #16]
 8022cc4:	429a      	cmp	r2, r3
 8022cc6:	d901      	bls.n	8022ccc <imageProcessAppHeader+0xea>
            {
                //Debug message
                TRACE_ERROR("Output image would be bigger than the memory slot holding it!\r\n");
                //Forward error
                return CBOOT_ERROR_BUFFER_OVERFLOW;
 8022cc8:	2317      	movs	r3, #23
 8022cca:	e051      	b.n	8022d70 <imageProcessAppHeader+0x18e>
            }
        }

        //Save application firmware length
        imageOut->firmwareLength = imgHeader->dataSize;
 8022ccc:	68bb      	ldr	r3, [r7, #8]
 8022cce:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8022cd2:	69bb      	ldr	r3, [r7, #24]
 8022cd4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        imageIn->firmwareLength = imgHeader->dataSize;
 8022cd8:	68bb      	ldr	r3, [r7, #8]
 8022cda:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8022cde:	69fb      	ldr	r3, [r7, #28]
 8022ce0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        //Check output type
        if(!(imageOut->activeSlot->cType & SLOT_CONTENT_BINARY))
 8022ce4:	69bb      	ldr	r3, [r7, #24]
 8022ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8022cea:	785b      	ldrb	r3, [r3, #1]
 8022cec:	f003 0308 	and.w	r3, r3, #8
 8022cf0:	2b00      	cmp	r3, #0
 8022cf2:	d10c      	bne.n	8022d0e <imageProcessAppHeader+0x12c>
        {
            //Process parsed image input header for later output image generation
            cerror = imageProcessOutput(context, (uint8_t*)imgHeader, sizeof(ImageHeader));
 8022cf4:	68bb      	ldr	r3, [r7, #8]
 8022cf6:	2240      	movs	r2, #64	@ 0x40
 8022cf8:	4619      	mov	r1, r3
 8022cfa:	6878      	ldr	r0, [r7, #4]
 8022cfc:	f7ff fcd3 	bl	80226a6 <imageProcessOutput>
 8022d00:	4603      	mov	r3, r0
 8022d02:	73fb      	strb	r3, [r7, #15]
            if(cerror)
 8022d04:	7bfb      	ldrb	r3, [r7, #15]
 8022d06:	2b00      	cmp	r3, #0
 8022d08:	d001      	beq.n	8022d0e <imageProcessAppHeader+0x12c>
                return cerror;
 8022d0a:	7bfb      	ldrb	r3, [r7, #15]
 8022d0c:	e030      	b.n	8022d70 <imageProcessAppHeader+0x18e>
        }

        //Check image header integrity
        cerror = verifyProcess(&imageIn->verifyContext, (uint8_t*)&imgHeader->headCrc, CRC32_DIGEST_SIZE);
 8022d0e:	69fb      	ldr	r3, [r7, #28]
 8022d10:	f503 702e 	add.w	r0, r3, #696	@ 0x2b8
 8022d14:	68bb      	ldr	r3, [r7, #8]
 8022d16:	333c      	adds	r3, #60	@ 0x3c
 8022d18:	2204      	movs	r2, #4
 8022d1a:	4619      	mov	r1, r3
 8022d1c:	f000 fe54 	bl	80239c8 <verifyProcess>
 8022d20:	4603      	mov	r3, r0
 8022d22:	73fb      	strb	r3, [r7, #15]
        //Is any error?
        if(cerror)
 8022d24:	7bfb      	ldrb	r3, [r7, #15]
 8022d26:	2b00      	cmp	r3, #0
 8022d28:	d001      	beq.n	8022d2e <imageProcessAppHeader+0x14c>
            return cerror;
 8022d2a:	7bfb      	ldrb	r3, [r7, #15]
 8022d2c:	e020      	b.n	8022d70 <imageProcessAppHeader+0x18e>

        //Remove header from buffer
        n = imageIn->bufferLen - sizeof(ImageHeader);
 8022d2e:	69fb      	ldr	r3, [r7, #28]
 8022d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022d34:	3b40      	subs	r3, #64	@ 0x40
 8022d36:	617b      	str	r3, [r7, #20]
        memcpy(imageIn->buffer, imageIn->buffer + sizeof(ImageHeader), n);
 8022d38:	69f8      	ldr	r0, [r7, #28]
 8022d3a:	69fb      	ldr	r3, [r7, #28]
 8022d3c:	3340      	adds	r3, #64	@ 0x40
 8022d3e:	697a      	ldr	r2, [r7, #20]
 8022d40:	4619      	mov	r1, r3
 8022d42:	f00d fbf6 	bl	8030532 <memcpy>
        imageIn->bufferPos -= sizeof(ImageHeader);
 8022d46:	69fb      	ldr	r3, [r7, #28]
 8022d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8022d4c:	f1a3 0240 	sub.w	r2, r3, #64	@ 0x40
 8022d50:	69fb      	ldr	r3, [r7, #28]
 8022d52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        imageIn->bufferLen -= sizeof(ImageHeader);
 8022d56:	69fb      	ldr	r3, [r7, #28]
 8022d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022d5c:	f1a3 0240 	sub.w	r2, r3, #64	@ 0x40
 8022d60:	69fb      	ldr	r3, [r7, #28]
 8022d62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        //Change image state
        imageChangeState(imageIn, IMAGE_STATE_RECV_APP_DATA);
 8022d66:	2102      	movs	r1, #2
 8022d68:	69f8      	ldr	r0, [r7, #28]
 8022d6a:	f000 fa0a 	bl	8023182 <imageChangeState>
    }

    // Successful process
    return CBOOT_NO_ERROR;
 8022d6e:	2300      	movs	r3, #0
}
 8022d70:	4618      	mov	r0, r3
 8022d72:	3720      	adds	r7, #32
 8022d74:	46bd      	mov	sp, r7
 8022d76:	bd80      	pop	{r7, pc}

08022d78 <imageProcessAppData>:
 * @param[in,out] context Pointer to the ImageProcess context
 * @return Error code.
 **/

cboot_error_t imageProcessAppData(ImageProcessContext *context)
{
 8022d78:	b580      	push	{r7, lr}
 8022d7a:	b086      	sub	sp, #24
 8022d7c:	af00      	add	r7, sp, #0
 8022d7e:	6078      	str	r0, [r7, #4]
    cboot_error_t cerror;
    uint_t dataLength;
    Image *imageIn;

    //Check parameter validity
    if (context == NULL)
 8022d80:	687b      	ldr	r3, [r7, #4]
 8022d82:	2b00      	cmp	r3, #0
 8022d84:	d101      	bne.n	8022d8a <imageProcessAppData+0x12>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 8022d86:	2304      	movs	r3, #4
 8022d88:	e12f      	b.n	8022fea <imageProcessAppData+0x272>

    //Point to image input context
    imageIn = &context->inputImage;
 8022d8a:	687b      	ldr	r3, [r7, #4]
 8022d8c:	617b      	str	r3, [r7, #20]

    //Check current input image process state
    if(imageIn->state != IMAGE_STATE_RECV_APP_DATA)
 8022d8e:	697b      	ldr	r3, [r7, #20]
 8022d90:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8022d94:	2b02      	cmp	r3, #2
 8022d96:	d001      	beq.n	8022d9c <imageProcessAppData+0x24>
        return CBOOT_ERROR_INVALID_STATE;
 8022d98:	2316      	movs	r3, #22
 8022d9a:	e126      	b.n	8022fea <imageProcessAppData+0x272>

#if ((CIPHER_SUPPORT == ENABLED) && (IMAGE_INPUT_ENCRYPTED == ENABLED))
    //Receiving image application cipher iv?
    //if(context->cipherEngine.algo != NULL && !context->ivRetrieved)
    if((imageIn->cipherEngine.algo != NULL) && !imageIn->ivRetrieved)
 8022d9c:	697b      	ldr	r3, [r7, #20]
 8022d9e:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8022da2:	2b00      	cmp	r3, #0
 8022da4:	d00f      	beq.n	8022dc6 <imageProcessAppData+0x4e>
 8022da6:	697b      	ldr	r3, [r7, #20]
 8022da8:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8022dac:	2b00      	cmp	r3, #0
 8022dae:	d10a      	bne.n	8022dc6 <imageProcessAppData+0x4e>
    {
        //Process application cipher initialisation vector here
        cerror = imageProcessAppCipherIv(context);
 8022db0:	6878      	ldr	r0, [r7, #4]
 8022db2:	f000 f97c 	bl	80230ae <imageProcessAppCipherIv>
 8022db6:	4603      	mov	r3, r0
 8022db8:	74fb      	strb	r3, [r7, #19]
        //Is any error?
        if (cerror)
 8022dba:	7cfb      	ldrb	r3, [r7, #19]
 8022dbc:	2b00      	cmp	r3, #0
 8022dbe:	f000 8113 	beq.w	8022fe8 <imageProcessAppData+0x270>
            return cerror;
 8022dc2:	7cfb      	ldrb	r3, [r7, #19]
 8022dc4:	e111      	b.n	8022fea <imageProcessAppData+0x272>
    }
    //Receiving CRC of the non-encrypted image data (application binary)
    else if (imageIn->bufferLen >= imageIn->cipherEngine.algo->blockSize && !imageIn->magicNumberCrcRetrieved)
 8022dc6:	697b      	ldr	r3, [r7, #20]
 8022dc8:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8022dcc:	697b      	ldr	r3, [r7, #20]
 8022dce:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8022dd2:	68db      	ldr	r3, [r3, #12]
 8022dd4:	429a      	cmp	r2, r3
 8022dd6:	d35c      	bcc.n	8022e92 <imageProcessAppData+0x11a>
 8022dd8:	697b      	ldr	r3, [r7, #20]
 8022dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8022dde:	2b00      	cmp	r3, #0
 8022de0:	d157      	bne.n	8022e92 <imageProcessAppData+0x11a>
    {
        //Update application check computation tag (could be integrity tag or
        //authentification tag or hash signature tag)
        cerror = verifyProcess(&imageIn->verifyContext, imageIn->buffer, imageIn->cipherEngine.algo->blockSize);
 8022de2:	697b      	ldr	r3, [r7, #20]
 8022de4:	f503 702e 	add.w	r0, r3, #696	@ 0x2b8
 8022de8:	6979      	ldr	r1, [r7, #20]
 8022dea:	697b      	ldr	r3, [r7, #20]
 8022dec:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8022df0:	68db      	ldr	r3, [r3, #12]
 8022df2:	461a      	mov	r2, r3
 8022df4:	f000 fde8 	bl	80239c8 <verifyProcess>
 8022df8:	4603      	mov	r3, r0
 8022dfa:	74fb      	strb	r3, [r7, #19]
        //Is any error?
        if(cerror)
 8022dfc:	7cfb      	ldrb	r3, [r7, #19]
 8022dfe:	2b00      	cmp	r3, #0
 8022e00:	d001      	beq.n	8022e06 <imageProcessAppData+0x8e>
            return cerror;
 8022e02:	7cfb      	ldrb	r3, [r7, #19]
 8022e04:	e0f1      	b.n	8022fea <imageProcessAppData+0x272>

        //Decrypt application data
        cerror = cipherDecryptData(&imageIn->cipherEngine, imageIn->buffer, imageIn->cipherEngine.algo->blockSize);
 8022e06:	697b      	ldr	r3, [r7, #20]
 8022e08:	f103 00a4 	add.w	r0, r3, #164	@ 0xa4
 8022e0c:	6979      	ldr	r1, [r7, #20]
 8022e0e:	697b      	ldr	r3, [r7, #20]
 8022e10:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8022e14:	68db      	ldr	r3, [r3, #12]
 8022e16:	461a      	mov	r2, r3
 8022e18:	f000 fcfc 	bl	8023814 <cipherDecryptData>
 8022e1c:	4603      	mov	r3, r0
 8022e1e:	74fb      	strb	r3, [r7, #19]

        //Is any error?
        if (cerror)
 8022e20:	7cfb      	ldrb	r3, [r7, #19]
 8022e22:	2b00      	cmp	r3, #0
 8022e24:	d001      	beq.n	8022e2a <imageProcessAppData+0xb2>
            return cerror;
 8022e26:	7cfb      	ldrb	r3, [r7, #19]
 8022e28:	e0df      	b.n	8022fea <imageProcessAppData+0x272>

        //Save magic number crc (extract only first 4bytes, remaining 12 bytes should all zeros)
        memcpy((uint8_t*)&imageIn->magicNumberCrc, imageIn->buffer, CRC32_DIGEST_SIZE);
 8022e2a:	697b      	ldr	r3, [r7, #20]
 8022e2c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8022e30:	697a      	ldr	r2, [r7, #20]
 8022e32:	6812      	ldr	r2, [r2, #0]
 8022e34:	601a      	str	r2, [r3, #0]
        imageIn->magicNumberCrcRetrieved = TRUE;
 8022e36:	697b      	ldr	r3, [r7, #20]
 8022e38:	2201      	movs	r2, #1
 8022e3a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4

        //Remove processed data (cipher magic number) from buffer
        memcpy(imageIn->buffer, imageIn->buffer + imageIn->cipherEngine.algo->blockSize,
 8022e3e:	6978      	ldr	r0, [r7, #20]
 8022e40:	697a      	ldr	r2, [r7, #20]
 8022e42:	697b      	ldr	r3, [r7, #20]
 8022e44:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8022e48:	68db      	ldr	r3, [r3, #12]
 8022e4a:	18d1      	adds	r1, r2, r3
            imageIn->bufferLen - imageIn->cipherEngine.algo->blockSize);
 8022e4c:	697b      	ldr	r3, [r7, #20]
 8022e4e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8022e52:	697b      	ldr	r3, [r7, #20]
 8022e54:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8022e58:	68db      	ldr	r3, [r3, #12]
        memcpy(imageIn->buffer, imageIn->buffer + imageIn->cipherEngine.algo->blockSize,
 8022e5a:	1ad3      	subs	r3, r2, r3
 8022e5c:	461a      	mov	r2, r3
 8022e5e:	f00d fb68 	bl	8030532 <memcpy>
        imageIn->bufferPos -= imageIn->cipherEngine.algo->blockSize;
 8022e62:	697b      	ldr	r3, [r7, #20]
 8022e64:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8022e68:	697b      	ldr	r3, [r7, #20]
 8022e6a:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8022e6e:	68db      	ldr	r3, [r3, #12]
 8022e70:	425b      	negs	r3, r3
 8022e72:	441a      	add	r2, r3
 8022e74:	697b      	ldr	r3, [r7, #20]
 8022e76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        imageIn->bufferLen -= imageIn->cipherEngine.algo->blockSize;
 8022e7a:	697b      	ldr	r3, [r7, #20]
 8022e7c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8022e80:	697b      	ldr	r3, [r7, #20]
 8022e82:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8022e86:	68db      	ldr	r3, [r3, #12]
 8022e88:	1ad2      	subs	r2, r2, r3
 8022e8a:	697b      	ldr	r3, [r7, #20]
 8022e8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8022e90:	e0aa      	b.n	8022fe8 <imageProcessAppData+0x270>
    //Receiving image firmware data?
    if(1)
    {
#endif
        //Is buffer full or full enough to contain last application data?
        if ((imageIn->bufferLen == sizeof(imageIn->buffer)) ||
 8022e92:	697b      	ldr	r3, [r7, #20]
 8022e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022e98:	2b80      	cmp	r3, #128	@ 0x80
 8022e9a:	d00c      	beq.n	8022eb6 <imageProcessAppData+0x13e>
            (imageIn->written + imageIn->bufferLen >= imageIn->firmwareLength))
 8022e9c:	697b      	ldr	r3, [r7, #20]
 8022e9e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8022ea2:	697b      	ldr	r3, [r7, #20]
 8022ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022ea8:	441a      	add	r2, r3
 8022eaa:	697b      	ldr	r3, [r7, #20]
 8022eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
        if ((imageIn->bufferLen == sizeof(imageIn->buffer)) ||
 8022eb0:	429a      	cmp	r2, r3
 8022eb2:	f0c0 8099 	bcc.w	8022fe8 <imageProcessAppData+0x270>
        {
            //We must not process more data than the firmware length
            dataLength = MIN(imageIn->bufferLen,
 8022eb6:	697b      	ldr	r3, [r7, #20]
 8022eb8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8022ebc:	697b      	ldr	r3, [r7, #20]
 8022ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8022ec2:	1ad2      	subs	r2, r2, r3
 8022ec4:	697b      	ldr	r3, [r7, #20]
 8022ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022eca:	4293      	cmp	r3, r2
 8022ecc:	bf28      	it	cs
 8022ece:	4613      	movcs	r3, r2
 8022ed0:	60fb      	str	r3, [r7, #12]
                             imageIn->firmwareLength - imageIn->written);

            //Update application check computation tag (could be integrity tag or
            //authentication tag or hash signature tag)
            cerror = verifyProcess(&imageIn->verifyContext,
 8022ed2:	697b      	ldr	r3, [r7, #20]
 8022ed4:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
                                  imageIn->buffer, dataLength);
 8022ed8:	6979      	ldr	r1, [r7, #20]
            cerror = verifyProcess(&imageIn->verifyContext,
 8022eda:	68fa      	ldr	r2, [r7, #12]
 8022edc:	4618      	mov	r0, r3
 8022ede:	f000 fd73 	bl	80239c8 <verifyProcess>
 8022ee2:	4603      	mov	r3, r0
 8022ee4:	74fb      	strb	r3, [r7, #19]

            //Is any error?
            if (cerror)
 8022ee6:	7cfb      	ldrb	r3, [r7, #19]
 8022ee8:	2b00      	cmp	r3, #0
 8022eea:	d001      	beq.n	8022ef0 <imageProcessAppData+0x178>
                return cerror;
 8022eec:	7cfb      	ldrb	r3, [r7, #19]
 8022eee:	e07c      	b.n	8022fea <imageProcessAppData+0x272>

#if ((CIPHER_SUPPORT == ENABLED) && (IMAGE_INPUT_ENCRYPTED == ENABLED))
            //Is application is encrypted?
            if (imageIn->cipherEngine.algo != NULL)
 8022ef0:	697b      	ldr	r3, [r7, #20]
 8022ef2:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8022ef6:	2b00      	cmp	r3, #0
 8022ef8:	d00d      	beq.n	8022f16 <imageProcessAppData+0x19e>
            {
                //Decrypt application data
                cerror = cipherDecryptData(&imageIn->cipherEngine, imageIn->buffer, dataLength);
 8022efa:	697b      	ldr	r3, [r7, #20]
 8022efc:	33a4      	adds	r3, #164	@ 0xa4
 8022efe:	6979      	ldr	r1, [r7, #20]
 8022f00:	68fa      	ldr	r2, [r7, #12]
 8022f02:	4618      	mov	r0, r3
 8022f04:	f000 fc86 	bl	8023814 <cipherDecryptData>
 8022f08:	4603      	mov	r3, r0
 8022f0a:	74fb      	strb	r3, [r7, #19]

                //Is any error?
                if (cerror)
 8022f0c:	7cfb      	ldrb	r3, [r7, #19]
 8022f0e:	2b00      	cmp	r3, #0
 8022f10:	d001      	beq.n	8022f16 <imageProcessAppData+0x19e>
                    return cerror;
 8022f12:	7cfb      	ldrb	r3, [r7, #19]
 8022f14:	e069      	b.n	8022fea <imageProcessAppData+0x272>
            }
#endif

            //Process/format output data
            cerror = imageProcessOutput(context,imageIn->buffer, dataLength);
 8022f16:	697b      	ldr	r3, [r7, #20]
 8022f18:	68fa      	ldr	r2, [r7, #12]
 8022f1a:	4619      	mov	r1, r3
 8022f1c:	6878      	ldr	r0, [r7, #4]
 8022f1e:	f7ff fbc2 	bl	80226a6 <imageProcessOutput>
 8022f22:	4603      	mov	r3, r0
 8022f24:	74fb      	strb	r3, [r7, #19]
            //Is any error?
            if(cerror)
 8022f26:	7cfb      	ldrb	r3, [r7, #19]
 8022f28:	2b00      	cmp	r3, #0
 8022f2a:	d001      	beq.n	8022f30 <imageProcessAppData+0x1b8>
                return cerror;
 8022f2c:	7cfb      	ldrb	r3, [r7, #19]
 8022f2e:	e05c      	b.n	8022fea <imageProcessAppData+0x272>

            //imgOutput->written += dataLength;
            imageIn->written += dataLength;
 8022f30:	697b      	ldr	r3, [r7, #20]
 8022f32:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8022f36:	68fb      	ldr	r3, [r7, #12]
 8022f38:	441a      	add	r2, r3
 8022f3a:	697b      	ldr	r3, [r7, #20]
 8022f3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

            //Does the buffer contain remaining data?
            if (imageIn->bufferLen != dataLength)
 8022f40:	697b      	ldr	r3, [r7, #20]
 8022f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022f46:	68fa      	ldr	r2, [r7, #12]
 8022f48:	429a      	cmp	r2, r3
 8022f4a:	d024      	beq.n	8022f96 <imageProcessAppData+0x21e>
            {
               //Discard already processed data
               memset(imageIn->buffer, 0, dataLength);
 8022f4c:	697b      	ldr	r3, [r7, #20]
 8022f4e:	68fa      	ldr	r2, [r7, #12]
 8022f50:	2100      	movs	r1, #0
 8022f52:	4618      	mov	r0, r3
 8022f54:	f00d fa28 	bl	80303a8 <memset>

               //Put remaining data at buffer start
               memcpy(imageIn->buffer, imageIn->buffer + dataLength,
 8022f58:	6978      	ldr	r0, [r7, #20]
 8022f5a:	697a      	ldr	r2, [r7, #20]
 8022f5c:	68fb      	ldr	r3, [r7, #12]
 8022f5e:	18d1      	adds	r1, r2, r3
                      imageIn->bufferLen - dataLength);
 8022f60:	697b      	ldr	r3, [r7, #20]
 8022f62:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
               memcpy(imageIn->buffer, imageIn->buffer + dataLength,
 8022f66:	68fb      	ldr	r3, [r7, #12]
 8022f68:	1ad3      	subs	r3, r2, r3
 8022f6a:	461a      	mov	r2, r3
 8022f6c:	f00d fae1 	bl	8030532 <memcpy>
               //Update buffer position and length
               imageIn->bufferPos = imageIn->buffer +
 8022f70:	697a      	ldr	r2, [r7, #20]
                       (imageIn->bufferLen - dataLength);
 8022f72:	697b      	ldr	r3, [r7, #20]
 8022f74:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8022f78:	68fb      	ldr	r3, [r7, #12]
 8022f7a:	1acb      	subs	r3, r1, r3
               imageIn->bufferPos = imageIn->buffer +
 8022f7c:	441a      	add	r2, r3
 8022f7e:	697b      	ldr	r3, [r7, #20]
 8022f80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
               imageIn->bufferLen = imageIn->bufferLen - dataLength;
 8022f84:	697b      	ldr	r3, [r7, #20]
 8022f86:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8022f8a:	68fb      	ldr	r3, [r7, #12]
 8022f8c:	1ad2      	subs	r2, r2, r3
 8022f8e:	697b      	ldr	r3, [r7, #20]
 8022f90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8022f94:	e00d      	b.n	8022fb2 <imageProcessAppData+0x23a>
            }
            else
            {
                //Reset buffer
                memset(imageIn->buffer, 0, sizeof(imageIn->buffer));
 8022f96:	697b      	ldr	r3, [r7, #20]
 8022f98:	2280      	movs	r2, #128	@ 0x80
 8022f9a:	2100      	movs	r1, #0
 8022f9c:	4618      	mov	r0, r3
 8022f9e:	f00d fa03 	bl	80303a8 <memset>
                imageIn->bufferPos = imageIn->buffer;
 8022fa2:	697a      	ldr	r2, [r7, #20]
 8022fa4:	697b      	ldr	r3, [r7, #20]
 8022fa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                imageIn->bufferLen = 0;
 8022faa:	697b      	ldr	r3, [r7, #20]
 8022fac:	2200      	movs	r2, #0
 8022fae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            }

            //Is application data all received?
            if (imageIn->written == imageIn->firmwareLength)
 8022fb2:	697b      	ldr	r3, [r7, #20]
 8022fb4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8022fb8:	697b      	ldr	r3, [r7, #20]
 8022fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8022fbe:	429a      	cmp	r2, r3
 8022fc0:	d112      	bne.n	8022fe8 <imageProcessAppData+0x270>
            {
                //Change Image process state
                imageChangeState(imageIn, IMAGE_STATE_RECV_APP_CHECK);
 8022fc2:	2103      	movs	r1, #3
 8022fc4:	6978      	ldr	r0, [r7, #20]
 8022fc6:	f000 f8dc 	bl	8023182 <imageChangeState>

                //Still data to process?
                if (imageIn->bufferLen > 0)
 8022fca:	697b      	ldr	r3, [r7, #20]
 8022fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022fd0:	2b00      	cmp	r3, #0
 8022fd2:	d009      	beq.n	8022fe8 <imageProcessAppData+0x270>
                {
                    //Process Image check app data
                    cerror = imageProcessAppCheck(context);
 8022fd4:	6878      	ldr	r0, [r7, #4]
 8022fd6:	f000 f80c 	bl	8022ff2 <imageProcessAppCheck>
 8022fda:	4603      	mov	r3, r0
 8022fdc:	74fb      	strb	r3, [r7, #19]
                    //Is any error?
                    if (cerror)
 8022fde:	7cfb      	ldrb	r3, [r7, #19]
 8022fe0:	2b00      	cmp	r3, #0
 8022fe2:	d001      	beq.n	8022fe8 <imageProcessAppData+0x270>
                        return cerror;
 8022fe4:	7cfb      	ldrb	r3, [r7, #19]
 8022fe6:	e000      	b.n	8022fea <imageProcessAppData+0x272>
            }
        }
    }

    //Successful process
    return CBOOT_NO_ERROR;
 8022fe8:	2300      	movs	r3, #0
}
 8022fea:	4618      	mov	r0, r3
 8022fec:	3718      	adds	r7, #24
 8022fee:	46bd      	mov	sp, r7
 8022ff0:	bd80      	pop	{r7, pc}

08022ff2 <imageProcessAppCheck>:
* @param[in,out] context Pointer to the ImageProcess context
* @return Error code.
**/

cboot_error_t imageProcessAppCheck(ImageProcessContext *context)
{
 8022ff2:	b580      	push	{r7, lr}
 8022ff4:	b084      	sub	sp, #16
 8022ff6:	af00      	add	r7, sp, #0
 8022ff8:	6078      	str	r0, [r7, #4]
    Image *imageIn;

    //Check parameter validity
    if (context == NULL)
 8022ffa:	687b      	ldr	r3, [r7, #4]
 8022ffc:	2b00      	cmp	r3, #0
 8022ffe:	d101      	bne.n	8023004 <imageProcessAppCheck+0x12>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 8023000:	2304      	movs	r3, #4
 8023002:	e050      	b.n	80230a6 <imageProcessAppCheck+0xb4>

    //Point to the input image context
    imageIn = (Image*)&context->inputImage;
 8023004:	687b      	ldr	r3, [r7, #4]
 8023006:	60fb      	str	r3, [r7, #12]

    //Check current input image process state
    if(imageIn->state != IMAGE_STATE_RECV_APP_CHECK)
 8023008:	68fb      	ldr	r3, [r7, #12]
 802300a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 802300e:	2b03      	cmp	r3, #3
 8023010:	d001      	beq.n	8023016 <imageProcessAppCheck+0x24>
        return CBOOT_ERROR_INVALID_STATE;
 8023012:	2316      	movs	r3, #22
 8023014:	e047      	b.n	80230a6 <imageProcessAppCheck+0xb4>

    //Is buffer full enough to contain image check data?
    //(could be integrity/authentication tag or signature)
    if (imageIn->checkDataLen + imageIn->bufferLen <= imageIn->checkDataSize)
 8023016:	68fb      	ldr	r3, [r7, #12]
 8023018:	f8d3 25ec 	ldr.w	r2, [r3, #1516]	@ 0x5ec
 802301c:	68fb      	ldr	r3, [r7, #12]
 802301e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8023022:	441a      	add	r2, r3
 8023024:	68fb      	ldr	r3, [r7, #12]
 8023026:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	@ 0x5f0
 802302a:	429a      	cmp	r2, r3
 802302c:	d838      	bhi.n	80230a0 <imageProcessAppCheck+0xae>
    {
        //Save image check data block
        memcpy(imageIn->checkDataPos, imageIn->buffer,
 802302e:	68fb      	ldr	r3, [r7, #12]
 8023030:	f8d3 05e8 	ldr.w	r0, [r3, #1512]	@ 0x5e8
 8023034:	68f9      	ldr	r1, [r7, #12]
 8023036:	68fb      	ldr	r3, [r7, #12]
 8023038:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802303c:	461a      	mov	r2, r3
 802303e:	f00d fa78 	bl	8030532 <memcpy>
               imageIn->bufferLen);
        imageIn->checkDataPos += imageIn->bufferLen;
 8023042:	68fb      	ldr	r3, [r7, #12]
 8023044:	f8d3 25e8 	ldr.w	r2, [r3, #1512]	@ 0x5e8
 8023048:	68fb      	ldr	r3, [r7, #12]
 802304a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802304e:	441a      	add	r2, r3
 8023050:	68fb      	ldr	r3, [r7, #12]
 8023052:	f8c3 25e8 	str.w	r2, [r3, #1512]	@ 0x5e8
        imageIn->checkDataLen += imageIn->bufferLen;
 8023056:	68fb      	ldr	r3, [r7, #12]
 8023058:	f8d3 25ec 	ldr.w	r2, [r3, #1516]	@ 0x5ec
 802305c:	68fb      	ldr	r3, [r7, #12]
 802305e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8023062:	441a      	add	r2, r3
 8023064:	68fb      	ldr	r3, [r7, #12]
 8023066:	f8c3 25ec 	str.w	r2, [r3, #1516]	@ 0x5ec

        //Reset buffer
        memset(imageIn->buffer, 0, sizeof(imageIn->buffer));
 802306a:	68fb      	ldr	r3, [r7, #12]
 802306c:	2280      	movs	r2, #128	@ 0x80
 802306e:	2100      	movs	r1, #0
 8023070:	4618      	mov	r0, r3
 8023072:	f00d f999 	bl	80303a8 <memset>
        imageIn->bufferPos = imageIn->buffer;
 8023076:	68fa      	ldr	r2, [r7, #12]
 8023078:	68fb      	ldr	r3, [r7, #12]
 802307a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        imageIn->bufferLen = 0;
 802307e:	68fb      	ldr	r3, [r7, #12]
 8023080:	2200      	movs	r2, #0
 8023082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        //Is image check data fully received?
        if (imageIn->checkDataLen == imageIn->checkDataSize)
 8023086:	68fb      	ldr	r3, [r7, #12]
 8023088:	f8d3 25ec 	ldr.w	r2, [r3, #1516]	@ 0x5ec
 802308c:	68fb      	ldr	r3, [r7, #12]
 802308e:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	@ 0x5f0
 8023092:	429a      	cmp	r2, r3
 8023094:	d106      	bne.n	80230a4 <imageProcessAppCheck+0xb2>
        {
            //Change image process state
            imageChangeState(imageIn, IMAGE_STATE_VALIDATE_APP);
 8023096:	2104      	movs	r1, #4
 8023098:	68f8      	ldr	r0, [r7, #12]
 802309a:	f000 f872 	bl	8023182 <imageChangeState>
 802309e:	e001      	b.n	80230a4 <imageProcessAppCheck+0xb2>
    }
    else
    {
        //Debug message
        TRACE_ERROR("Image check data is bigger than expected!\r\n");
        return CBOOT_ERROR_BUFFER_OVERFLOW;
 80230a0:	2317      	movs	r3, #23
 80230a2:	e000      	b.n	80230a6 <imageProcessAppCheck+0xb4>
    }

    //Successful process
    return CBOOT_NO_ERROR;
 80230a4:	2300      	movs	r3, #0
}
 80230a6:	4618      	mov	r0, r3
 80230a8:	3710      	adds	r7, #16
 80230aa:	46bd      	mov	sp, r7
 80230ac:	bd80      	pop	{r7, pc}

080230ae <imageProcessAppCipherIv>:
 * @param[in,out] context Pointer to the Image process context
 * @return Error code.
 **/

cboot_error_t imageProcessAppCipherIv(ImageProcessContext *context)
{
 80230ae:	b580      	push	{r7, lr}
 80230b0:	b086      	sub	sp, #24
 80230b2:	af00      	add	r7, sp, #0
 80230b4:	6078      	str	r0, [r7, #4]
   cboot_error_t cerror;
   Image *imageIn;
   uint_t n;

   //Check parameter validity
   if (context == NULL)
 80230b6:	687b      	ldr	r3, [r7, #4]
 80230b8:	2b00      	cmp	r3, #0
 80230ba:	d101      	bne.n	80230c0 <imageProcessAppCipherIv+0x12>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80230bc:	2304      	movs	r3, #4
 80230be:	e05c      	b.n	802317a <imageProcessAppCipherIv+0xcc>

    //Point to the input image inside image proccess context
   imageIn = (Image*)&context->inputImage;
 80230c0:	687b      	ldr	r3, [r7, #4]
 80230c2:	617b      	str	r3, [r7, #20]

   //Initialize variable
   n = 0;
 80230c4:	2300      	movs	r3, #0
 80230c6:	613b      	str	r3, [r7, #16]

   //Is buffer full enough to contains IAP image header?
   if (imageIn->bufferLen >= imageIn->cipherEngine.algo->blockSize)
 80230c8:	697b      	ldr	r3, [r7, #20]
 80230ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80230ce:	697b      	ldr	r3, [r7, #20]
 80230d0:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 80230d4:	68db      	ldr	r3, [r3, #12]
 80230d6:	429a      	cmp	r2, r3
 80230d8:	d34e      	bcc.n	8023178 <imageProcessAppCipherIv+0xca>
   {
      //Debug message
      TRACE_DEBUG("Processing firmware image cipher initialization vector...\r\n");

      //Save application cipher intialization vector
      cerror = cipherSetIv(&imageIn->cipherEngine, imageIn->buffer, imageIn->cipherEngine.ivLen);
 80230da:	697b      	ldr	r3, [r7, #20]
 80230dc:	f103 00a4 	add.w	r0, r3, #164	@ 0xa4
 80230e0:	6979      	ldr	r1, [r7, #20]
 80230e2:	697b      	ldr	r3, [r7, #20]
 80230e4:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 80230e8:	461a      	mov	r2, r3
 80230ea:	f000 fb75 	bl	80237d8 <cipherSetIv>
 80230ee:	4603      	mov	r3, r0
 80230f0:	73fb      	strb	r3, [r7, #15]
      //Is any error?
      if(cerror)
 80230f2:	7bfb      	ldrb	r3, [r7, #15]
 80230f4:	2b00      	cmp	r3, #0
 80230f6:	d001      	beq.n	80230fc <imageProcessAppCipherIv+0x4e>
         return cerror;
 80230f8:	7bfb      	ldrb	r3, [r7, #15]
 80230fa:	e03e      	b.n	802317a <imageProcessAppCipherIv+0xcc>

      //Set cipher iv as retrieved
      imageIn->ivRetrieved = TRUE;
 80230fc:	697b      	ldr	r3, [r7, #20]
 80230fe:	2201      	movs	r2, #1
 8023100:	f8c3 22ac 	str.w	r2, [r3, #684]	@ 0x2ac

      //Update application check computation tag (could be integrity tag or
      //authentification tag or hash signature tag)
      cerror = verifyProcess(&imageIn->verifyContext, imageIn->cipherEngine.iv, imageIn->cipherEngine.ivLen);
 8023104:	697b      	ldr	r3, [r7, #20]
 8023106:	f503 702e 	add.w	r0, r3, #696	@ 0x2b8
 802310a:	697b      	ldr	r3, [r7, #20]
 802310c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8023110:	697b      	ldr	r3, [r7, #20]
 8023112:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8023116:	461a      	mov	r2, r3
 8023118:	f000 fc56 	bl	80239c8 <verifyProcess>
 802311c:	4603      	mov	r3, r0
 802311e:	73fb      	strb	r3, [r7, #15]
      //Is any error?
      if(cerror)
 8023120:	7bfb      	ldrb	r3, [r7, #15]
 8023122:	2b00      	cmp	r3, #0
 8023124:	d001      	beq.n	802312a <imageProcessAppCipherIv+0x7c>
         return cerror;
 8023126:	7bfb      	ldrb	r3, [r7, #15]
 8023128:	e027      	b.n	802317a <imageProcessAppCipherIv+0xcc>

      //Remove processed data (cipher iv) from buffer
      n = imageIn->bufferLen - imageIn->cipherEngine.ivLen;
 802312a:	697b      	ldr	r3, [r7, #20]
 802312c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8023130:	697b      	ldr	r3, [r7, #20]
 8023132:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8023136:	1ad3      	subs	r3, r2, r3
 8023138:	613b      	str	r3, [r7, #16]
      memcpy(imageIn->buffer, imageIn->buffer + imageIn->cipherEngine.ivLen, n);
 802313a:	6978      	ldr	r0, [r7, #20]
 802313c:	697a      	ldr	r2, [r7, #20]
 802313e:	697b      	ldr	r3, [r7, #20]
 8023140:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8023144:	4413      	add	r3, r2
 8023146:	693a      	ldr	r2, [r7, #16]
 8023148:	4619      	mov	r1, r3
 802314a:	f00d f9f2 	bl	8030532 <memcpy>
      imageIn->bufferPos -= imageIn->cipherEngine.ivLen;
 802314e:	697b      	ldr	r3, [r7, #20]
 8023150:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8023154:	697b      	ldr	r3, [r7, #20]
 8023156:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 802315a:	425b      	negs	r3, r3
 802315c:	441a      	add	r2, r3
 802315e:	697b      	ldr	r3, [r7, #20]
 8023160:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      imageIn->bufferLen -= imageIn->cipherEngine.ivLen;
 8023164:	697b      	ldr	r3, [r7, #20]
 8023166:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 802316a:	697b      	ldr	r3, [r7, #20]
 802316c:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8023170:	1ad2      	subs	r2, r2, r3
 8023172:	697b      	ldr	r3, [r7, #20]
 8023174:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   }

   //Successful process
   return CBOOT_NO_ERROR;
 8023178:	2300      	movs	r3, #0
}
 802317a:	4618      	mov	r0, r3
 802317c:	3718      	adds	r7, #24
 802317e:	46bd      	mov	sp, r7
 8023180:	bd80      	pop	{r7, pc}

08023182 <imageChangeState>:
 * @param[in] context Pointer to the Image context
 * @param[in] newState New state to switch to
 **/

void imageChangeState(Image *image, ImageState newState)
{
 8023182:	b480      	push	{r7}
 8023184:	b083      	sub	sp, #12
 8023186:	af00      	add	r7, sp, #0
 8023188:	6078      	str	r0, [r7, #4]
 802318a:	460b      	mov	r3, r1
 802318c:	70fb      	strb	r3, [r7, #3]
    //Update Image state
    image->state = newState;
 802318e:	687b      	ldr	r3, [r7, #4]
 8023190:	78fa      	ldrb	r2, [r7, #3]
 8023192:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
}
 8023196:	bf00      	nop
 8023198:	370c      	adds	r7, #12
 802319a:	46bd      	mov	sp, r7
 802319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231a0:	4770      	bx	lr

080231a2 <memoryInit>:
/**
 * @brief Memory initialization function
 **/

cboot_error_t memoryInit(Memory* memories, size_t nbMemories)
{
 80231a2:	b580      	push	{r7, lr}
 80231a4:	b088      	sub	sp, #32
 80231a6:	af00      	add	r7, sp, #0
 80231a8:	6078      	str	r0, [r7, #4]
 80231aa:	6039      	str	r1, [r7, #0]
    MemoryType memoryType;
    MemoryRole memoryRole;
    Memory* memory;

    //Check parameters
    if(memories == NULL || nbMemories == 0 || nbMemories > NB_MEMORIES)
 80231ac:	687b      	ldr	r3, [r7, #4]
 80231ae:	2b00      	cmp	r3, #0
 80231b0:	d005      	beq.n	80231be <memoryInit+0x1c>
 80231b2:	683b      	ldr	r3, [r7, #0]
 80231b4:	2b00      	cmp	r3, #0
 80231b6:	d002      	beq.n	80231be <memoryInit+0x1c>
 80231b8:	683b      	ldr	r3, [r7, #0]
 80231ba:	2b02      	cmp	r3, #2
 80231bc:	d901      	bls.n	80231c2 <memoryInit+0x20>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 80231be:	2304      	movs	r3, #4
 80231c0:	e039      	b.n	8023236 <memoryInit+0x94>

    // Initialize memories
    for (i = 0; i < nbMemories; i++)
 80231c2:	2300      	movs	r3, #0
 80231c4:	61fb      	str	r3, [r7, #28]
 80231c6:	e031      	b.n	802322c <memoryInit+0x8a>
    {
        memory = &memories[i];
 80231c8:	69fb      	ldr	r3, [r7, #28]
 80231ca:	2234      	movs	r2, #52	@ 0x34
 80231cc:	fb02 f303 	mul.w	r3, r2, r3
 80231d0:	687a      	ldr	r2, [r7, #4]
 80231d2:	4413      	add	r3, r2
 80231d4:	61bb      	str	r3, [r7, #24]
        memoryDriver = memory->driver;
 80231d6:	69bb      	ldr	r3, [r7, #24]
 80231d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80231da:	617b      	str	r3, [r7, #20]
        memoryType = memory->memoryType;
 80231dc:	69bb      	ldr	r3, [r7, #24]
 80231de:	781b      	ldrb	r3, [r3, #0]
 80231e0:	74fb      	strb	r3, [r7, #19]
        memoryRole = memory->memoryRole;
 80231e2:	69bb      	ldr	r3, [r7, #24]
 80231e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80231e8:	74bb      	strb	r3, [r7, #18]

        //Check memory role
        if(memoryRole < MEMORY_ROLE_PRIMARY || memoryRole > MEMORY_ROLE_SECONDARY)
 80231ea:	7cbb      	ldrb	r3, [r7, #18]
 80231ec:	2b01      	cmp	r3, #1
 80231ee:	d901      	bls.n	80231f4 <memoryInit+0x52>
            return CBOOT_ERROR_UNKNOWN_MEMORY_ROLE;
 80231f0:	2327      	movs	r3, #39	@ 0x27
 80231f2:	e020      	b.n	8023236 <memoryInit+0x94>

        //Check memory type
        if (memoryType == MEMORY_TYPE_FLASH)
 80231f4:	7cfb      	ldrb	r3, [r7, #19]
 80231f6:	2b00      	cmp	r3, #0
 80231f8:	d109      	bne.n	802320e <memoryInit+0x6c>
        {
            //Initialize flash memory driver
            error = ((const FlashDriver*)memoryDriver)->init();
 80231fa:	697b      	ldr	r3, [r7, #20]
 80231fc:	681b      	ldr	r3, [r3, #0]
 80231fe:	4798      	blx	r3
 8023200:	4603      	mov	r3, r0
 8023202:	823b      	strh	r3, [r7, #16]
            if (error != NO_ERROR)
 8023204:	8a3b      	ldrh	r3, [r7, #16]
 8023206:	2b00      	cmp	r3, #0
 8023208:	d003      	beq.n	8023212 <memoryInit+0x70>
                return CBOOT_ERROR_MEMORY_DRIVER_INIT_FAILED;
 802320a:	231b      	movs	r3, #27
 802320c:	e013      	b.n	8023236 <memoryInit+0x94>
        }
#endif
        else
        {
            //Unknown memory type
            return CBOOT_ERROR_UNKNOWN_MEMORY_TYPE;
 802320e:	2326      	movs	r3, #38	@ 0x26
 8023210:	e011      	b.n	8023236 <memoryInit+0x94>
        }

        // Initialize slots
        cerror = slotsInit(memory);
 8023212:	69b8      	ldr	r0, [r7, #24]
 8023214:	f000 f9d8 	bl	80235c8 <slotsInit>
 8023218:	4603      	mov	r3, r0
 802321a:	73fb      	strb	r3, [r7, #15]
        //Is any error?
        if(cerror)
 802321c:	7bfb      	ldrb	r3, [r7, #15]
 802321e:	2b00      	cmp	r3, #0
 8023220:	d001      	beq.n	8023226 <memoryInit+0x84>
            return cerror;
 8023222:	7bfb      	ldrb	r3, [r7, #15]
 8023224:	e007      	b.n	8023236 <memoryInit+0x94>
    for (i = 0; i < nbMemories; i++)
 8023226:	69fb      	ldr	r3, [r7, #28]
 8023228:	3301      	adds	r3, #1
 802322a:	61fb      	str	r3, [r7, #28]
 802322c:	69fa      	ldr	r2, [r7, #28]
 802322e:	683b      	ldr	r3, [r7, #0]
 8023230:	429a      	cmp	r2, r3
 8023232:	d3c9      	bcc.n	80231c8 <memoryInit+0x26>
    }

    //Succesful process
    return CBOOT_NO_ERROR;
 8023234:	2300      	movs	r3, #0
}
 8023236:	4618      	mov	r0, r3
 8023238:	3720      	adds	r7, #32
 802323a:	46bd      	mov	sp, r7
 802323c:	bd80      	pop	{r7, pc}

0802323e <memoryGetInfo>:

/**
 * @brief Memory get driver information function
 **/
cboot_error_t memoryGetInfo(Memory *memory, MemoryInfo *info)
{
 802323e:	b580      	push	{r7, lr}
 8023240:	b084      	sub	sp, #16
 8023242:	af00      	add	r7, sp, #0
 8023244:	6078      	str	r0, [r7, #4]
 8023246:	6039      	str	r1, [r7, #0]
    error_t error;
    const void* mInfo;

    //Check parameters
    if(memory == NULL || info == NULL)
 8023248:	687b      	ldr	r3, [r7, #4]
 802324a:	2b00      	cmp	r3, #0
 802324c:	d002      	beq.n	8023254 <memoryGetInfo+0x16>
 802324e:	683b      	ldr	r3, [r7, #0]
 8023250:	2b00      	cmp	r3, #0
 8023252:	d101      	bne.n	8023258 <memoryGetInfo+0x1a>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 8023254:	2304      	movs	r3, #4
 8023256:	e030      	b.n	80232ba <memoryGetInfo+0x7c>

    //Is memory a flash?
    if(memory->memoryType == MEMORY_TYPE_FLASH)
 8023258:	687b      	ldr	r3, [r7, #4]
 802325a:	781b      	ldrb	r3, [r3, #0]
 802325c:	2b00      	cmp	r3, #0
 802325e:	d12b      	bne.n	80232b8 <memoryGetInfo+0x7a>
    {
        //Get flash memory info
        error = ((const FlashDriver*)memory->driver)->getInfo((const FlashInfo**)&mInfo);
 8023260:	687b      	ldr	r3, [r7, #4]
 8023262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023264:	689b      	ldr	r3, [r3, #8]
 8023266:	f107 0208 	add.w	r2, r7, #8
 802326a:	4610      	mov	r0, r2
 802326c:	4798      	blx	r3
 802326e:	4603      	mov	r3, r0
 8023270:	81fb      	strh	r3, [r7, #14]
        //Is any error?
        if(error)
 8023272:	89fb      	ldrh	r3, [r7, #14]
 8023274:	2b00      	cmp	r3, #0
 8023276:	d001      	beq.n	802327c <memoryGetInfo+0x3e>
            return CBOOT_ERROR_MEMORY_DRIVER_GET_INFO_FAILED;
 8023278:	2321      	movs	r3, #33	@ 0x21
 802327a:	e01e      	b.n	80232ba <memoryGetInfo+0x7c>

        //Format memory info
        info->addr = ((const FlashInfo*)mInfo)->flashAddr;
 802327c:	68bb      	ldr	r3, [r7, #8]
 802327e:	68da      	ldr	r2, [r3, #12]
 8023280:	683b      	ldr	r3, [r7, #0]
 8023282:	601a      	str	r2, [r3, #0]
        info->size = ((const FlashInfo*)mInfo)->flashSize;
 8023284:	68bb      	ldr	r3, [r7, #8]
 8023286:	691a      	ldr	r2, [r3, #16]
 8023288:	683b      	ldr	r3, [r7, #0]
 802328a:	605a      	str	r2, [r3, #4]
        info->bank1Addr = ((const FlashInfo*)mInfo)->bank1Addr;
 802328c:	68bb      	ldr	r3, [r7, #8]
 802328e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8023290:	683b      	ldr	r3, [r7, #0]
 8023292:	609a      	str	r2, [r3, #8]
        info->bank2Addr = ((const FlashInfo*)mInfo)->bank2Addr;
 8023294:	68bb      	ldr	r3, [r7, #8]
 8023296:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8023298:	683b      	ldr	r3, [r7, #0]
 802329a:	60da      	str	r2, [r3, #12]
        info->bankSize = ((const FlashInfo*)mInfo)->bankSize;
 802329c:	68bb      	ldr	r3, [r7, #8]
 802329e:	6a1a      	ldr	r2, [r3, #32]
 80232a0:	683b      	ldr	r3, [r7, #0]
 80232a2:	611a      	str	r2, [r3, #16]
        info->writeSize = ((const FlashInfo*)mInfo)->writeSize;
 80232a4:	68bb      	ldr	r3, [r7, #8]
 80232a6:	695a      	ldr	r2, [r3, #20]
 80232a8:	683b      	ldr	r3, [r7, #0]
 80232aa:	615a      	str	r2, [r3, #20]
        info->flags = ((const FlashInfo*)mInfo)->flags;
 80232ac:	68bb      	ldr	r3, [r7, #8]
 80232ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80232b0:	683b      	ldr	r3, [r7, #0]
 80232b2:	619a      	str	r2, [r3, #24]
        //Unknown memory type
        return CBOOT_ERROR_UNKNOWN_MEMORY_TYPE;
    }

    //Successful process
    return CBOOT_NO_ERROR;
 80232b4:	2300      	movs	r3, #0
 80232b6:	e000      	b.n	80232ba <memoryGetInfo+0x7c>
        return CBOOT_ERROR_UNKNOWN_MEMORY_TYPE;
 80232b8:	2326      	movs	r3, #38	@ 0x26
}
 80232ba:	4618      	mov	r0, r3
 80232bc:	3710      	adds	r7, #16
 80232be:	46bd      	mov	sp, r7
 80232c0:	bd80      	pop	{r7, pc}
	...

080232c4 <memoryWriteSlot>:
 * @brief Write Data into Memory function
 **/

cboot_error_t memoryWriteSlot(Slot *slot, uint32_t offset, uint8_t* buffer,
    size_t length, size_t *written, uint8_t flag)
{
 80232c4:	b580      	push	{r7, lr}
 80232c6:	b090      	sub	sp, #64	@ 0x40
 80232c8:	af00      	add	r7, sp, #0
 80232ca:	60f8      	str	r0, [r7, #12]
 80232cc:	60b9      	str	r1, [r7, #8]
 80232ce:	607a      	str	r2, [r7, #4]
 80232d0:	603b      	str	r3, [r7, #0]
    Memory *memory;
    MemoryInfo memoryInfo;
    const void* memoryDriver;

    //Check parameters validity
    if(slot == NULL || buffer == NULL || written == NULL)
 80232d2:	68fb      	ldr	r3, [r7, #12]
 80232d4:	2b00      	cmp	r3, #0
 80232d6:	d005      	beq.n	80232e4 <memoryWriteSlot+0x20>
 80232d8:	687b      	ldr	r3, [r7, #4]
 80232da:	2b00      	cmp	r3, #0
 80232dc:	d002      	beq.n	80232e4 <memoryWriteSlot+0x20>
 80232de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80232e0:	2b00      	cmp	r3, #0
 80232e2:	d101      	bne.n	80232e8 <memoryWriteSlot+0x24>
        return CBOOT_ERROR_INVALID_PARAMETERS;
 80232e4:	2304      	movs	r3, #4
 80232e6:	e0ad      	b.n	8023444 <memoryWriteSlot+0x180>

    //Get memory driver
    memory = (Memory*)slot->memParent;
 80232e8:	68fb      	ldr	r3, [r7, #12]
 80232ea:	685b      	ldr	r3, [r3, #4]
 80232ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    memoryDriver = memory->driver;
 80232ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80232f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80232f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    //Initialize variables
    cboot_error = CBOOT_NO_ERROR;
 80232f4:	2300      	movs	r3, #0
 80232f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    error = NO_ERROR;
 80232fa:	2300      	movs	r3, #0
 80232fc:	86bb      	strh	r3, [r7, #52]	@ 0x34
    *written = 0;
 80232fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023300:	2200      	movs	r2, #0
 8023302:	601a      	str	r2, [r3, #0]

    if(slot->type == SLOT_TYPE_DIRECT)
 8023304:	68fb      	ldr	r3, [r7, #12]
 8023306:	781b      	ldrb	r3, [r3, #0]
 8023308:	2b01      	cmp	r3, #1
 802330a:	f040 8098 	bne.w	802343e <memoryWriteSlot+0x17a>
    {
        //Get memory driver information
        cboot_error = memoryGetInfo(memory, &memoryInfo);
 802330e:	f107 0310 	add.w	r3, r7, #16
 8023312:	4619      	mov	r1, r3
 8023314:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8023316:	f7ff ff92 	bl	802323e <memoryGetInfo>
 802331a:	4603      	mov	r3, r0
 802331c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        //Is any error?
        if(cboot_error)
 8023320:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8023324:	2b00      	cmp	r3, #0
 8023326:	d002      	beq.n	802332e <memoryWriteSlot+0x6a>
            return cboot_error;
 8023328:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 802332c:	e08a      	b.n	8023444 <memoryWriteSlot+0x180>

        //Get memory driver write block size
        writeBlockSize = memoryInfo.writeSize;
 802332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023330:	633b      	str	r3, [r7, #48]	@ 0x30

        //Reset of memory write buffer required?
        if(flag == MEMORY_WRITE_RESET_FLAG)
 8023332:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8023336:	2b02      	cmp	r3, #2
 8023338:	d14b      	bne.n	80233d2 <memoryWriteSlot+0x10e>
        {
            memoryResetWriteBuffer();
 802333a:	f000 f9f7 	bl	802372c <memoryResetWriteBuffer>
        }

        //Process incoming data
        while(length > 0)
 802333e:	e048      	b.n	80233d2 <memoryWriteSlot+0x10e>
        {
            //Fill temporary buffer to reach allowed flash memory write block size
            n = MIN(length, writeBlockSize - memWriteBufferLen);
 8023340:	4b42      	ldr	r3, [pc, #264]	@ (802344c <memoryWriteSlot+0x188>)
 8023342:	681b      	ldr	r3, [r3, #0]
 8023344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023346:	1ad3      	subs	r3, r2, r3
 8023348:	683a      	ldr	r2, [r7, #0]
 802334a:	4293      	cmp	r3, r2
 802334c:	bf28      	it	cs
 802334e:	4613      	movcs	r3, r2
 8023350:	62fb      	str	r3, [r7, #44]	@ 0x2c

            //Fill buffer
            memcpy(memWriteBufferPos, buffer, n);
 8023352:	4b3f      	ldr	r3, [pc, #252]	@ (8023450 <memoryWriteSlot+0x18c>)
 8023354:	681b      	ldr	r3, [r3, #0]
 8023356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023358:	6879      	ldr	r1, [r7, #4]
 802335a:	4618      	mov	r0, r3
 802335c:	f00d f8e9 	bl	8030532 <memcpy>
            //Update temporary buffer position
            memWriteBufferPos += n;
 8023360:	4b3b      	ldr	r3, [pc, #236]	@ (8023450 <memoryWriteSlot+0x18c>)
 8023362:	681a      	ldr	r2, [r3, #0]
 8023364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023366:	4413      	add	r3, r2
 8023368:	4a39      	ldr	r2, [pc, #228]	@ (8023450 <memoryWriteSlot+0x18c>)
 802336a:	6013      	str	r3, [r2, #0]
            //Update temporary buffer length
            memWriteBufferLen += n;
 802336c:	4b37      	ldr	r3, [pc, #220]	@ (802344c <memoryWriteSlot+0x188>)
 802336e:	681a      	ldr	r2, [r3, #0]
 8023370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023372:	4413      	add	r3, r2
 8023374:	4a35      	ldr	r2, [pc, #212]	@ (802344c <memoryWriteSlot+0x188>)
 8023376:	6013      	str	r3, [r2, #0]
            //Advance data pointer
            buffer += n;
 8023378:	687a      	ldr	r2, [r7, #4]
 802337a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802337c:	4413      	add	r3, r2
 802337e:	607b      	str	r3, [r7, #4]
            //Remaining bytes to process
            length -= n;
 8023380:	683a      	ldr	r2, [r7, #0]
 8023382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023384:	1ad3      	subs	r3, r2, r3
 8023386:	603b      	str	r3, [r7, #0]

            //Enough data to write?
            if(memWriteBufferLen == writeBlockSize)
 8023388:	4b30      	ldr	r3, [pc, #192]	@ (802344c <memoryWriteSlot+0x188>)
 802338a:	681b      	ldr	r3, [r3, #0]
 802338c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802338e:	429a      	cmp	r2, r3
 8023390:	d11f      	bne.n	80233d2 <memoryWriteSlot+0x10e>
            {
                //Write image data into memory
                error = ((const FlashDriver*)memoryDriver)->write(
 8023392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023394:	691b      	ldr	r3, [r3, #16]
                    slot->addr + offset, (uint8_t*)memWriteBuffer, writeBlockSize);
 8023396:	68fa      	ldr	r2, [r7, #12]
 8023398:	6891      	ldr	r1, [r2, #8]
                error = ((const FlashDriver*)memoryDriver)->write(
 802339a:	68ba      	ldr	r2, [r7, #8]
 802339c:	1888      	adds	r0, r1, r2
 802339e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80233a0:	492c      	ldr	r1, [pc, #176]	@ (8023454 <memoryWriteSlot+0x190>)
 80233a2:	4798      	blx	r3
 80233a4:	4603      	mov	r3, r0
 80233a6:	86bb      	strh	r3, [r7, #52]	@ 0x34
                //Is any error?
                if(error)
 80233a8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80233aa:	2b00      	cmp	r3, #0
 80233ac:	d001      	beq.n	80233b2 <memoryWriteSlot+0xee>
                {
                    //Debug message
                    TRACE_ERROR("Failed to write image data into flash memory!\r\n");
                    return CBOOT_ERROR_FAILURE;
 80233ae:	2301      	movs	r3, #1
 80233b0:	e048      	b.n	8023444 <memoryWriteSlot+0x180>
                }

                //Update written bytes
                *written += writeBlockSize;
 80233b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80233b4:	681a      	ldr	r2, [r3, #0]
 80233b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80233b8:	441a      	add	r2, r3
 80233ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80233bc:	601a      	str	r2, [r3, #0]

                //Increase offset
                offset += writeBlockSize;
 80233be:	68ba      	ldr	r2, [r7, #8]
 80233c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80233c2:	4413      	add	r3, r2
 80233c4:	60bb      	str	r3, [r7, #8]

                //Reset temporary buffer position
                memWriteBufferPos = memWriteBuffer;
 80233c6:	4b22      	ldr	r3, [pc, #136]	@ (8023450 <memoryWriteSlot+0x18c>)
 80233c8:	4a22      	ldr	r2, [pc, #136]	@ (8023454 <memoryWriteSlot+0x190>)
 80233ca:	601a      	str	r2, [r3, #0]
                //Reset temporary buffer length
                memWriteBufferLen = 0;
 80233cc:	4b1f      	ldr	r3, [pc, #124]	@ (802344c <memoryWriteSlot+0x188>)
 80233ce:	2200      	movs	r2, #0
 80233d0:	601a      	str	r2, [r3, #0]
        while(length > 0)
 80233d2:	683b      	ldr	r3, [r7, #0]
 80233d4:	2b00      	cmp	r3, #0
 80233d6:	d1b3      	bne.n	8023340 <memoryWriteSlot+0x7c>
            }
        }

        //Force writting of memory write buffer required?
        if(memWriteBufferLen != 0 && flag == MEMORY_WRITE_FORCE_FLAG)
 80233d8:	4b1c      	ldr	r3, [pc, #112]	@ (802344c <memoryWriteSlot+0x188>)
 80233da:	681b      	ldr	r3, [r3, #0]
 80233dc:	2b00      	cmp	r3, #0
 80233de:	d030      	beq.n	8023442 <memoryWriteSlot+0x17e>
 80233e0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80233e4:	2b01      	cmp	r3, #1
 80233e6:	d12c      	bne.n	8023442 <memoryWriteSlot+0x17e>
        {
            //Complete buffer with padding to reach minimum allowed write block size
            memset(memWriteBufferPos, 0x00, writeBlockSize - memWriteBufferLen);
 80233e8:	4b19      	ldr	r3, [pc, #100]	@ (8023450 <memoryWriteSlot+0x18c>)
 80233ea:	6818      	ldr	r0, [r3, #0]
 80233ec:	4b17      	ldr	r3, [pc, #92]	@ (802344c <memoryWriteSlot+0x188>)
 80233ee:	681b      	ldr	r3, [r3, #0]
 80233f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80233f2:	1ad3      	subs	r3, r2, r3
 80233f4:	461a      	mov	r2, r3
 80233f6:	2100      	movs	r1, #0
 80233f8:	f00c ffd6 	bl	80303a8 <memset>

            //Write image data into external flash memory
            error = ((const FlashDriver*)memoryDriver)->write(
 80233fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80233fe:	691b      	ldr	r3, [r3, #16]
                slot->addr + offset, (uint8_t*)memWriteBuffer, writeBlockSize);
 8023400:	68fa      	ldr	r2, [r7, #12]
 8023402:	6891      	ldr	r1, [r2, #8]
            error = ((const FlashDriver*)memoryDriver)->write(
 8023404:	68ba      	ldr	r2, [r7, #8]
 8023406:	1888      	adds	r0, r1, r2
 8023408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802340a:	4912      	ldr	r1, [pc, #72]	@ (8023454 <memoryWriteSlot+0x190>)
 802340c:	4798      	blx	r3
 802340e:	4603      	mov	r3, r0
 8023410:	86bb      	strh	r3, [r7, #52]	@ 0x34
            //Is any error?
            if(error)
 8023412:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8023414:	2b00      	cmp	r3, #0
 8023416:	d001      	beq.n	802341c <memoryWriteSlot+0x158>
            {
                //Debug message
                TRACE_ERROR("Failed to write image data into memory!\r\n");
                return CBOOT_ERROR_FAILURE;
 8023418:	2301      	movs	r3, #1
 802341a:	e013      	b.n	8023444 <memoryWriteSlot+0x180>
            }

            //Update written bytes
            *written += writeBlockSize;
 802341c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802341e:	681a      	ldr	r2, [r3, #0]
 8023420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023422:	441a      	add	r2, r3
 8023424:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023426:	601a      	str	r2, [r3, #0]

            //Increase offset
            offset += writeBlockSize;
 8023428:	68ba      	ldr	r2, [r7, #8]
 802342a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802342c:	4413      	add	r3, r2
 802342e:	60bb      	str	r3, [r7, #8]

            //Reset temporary buffer position
            memWriteBufferPos = memWriteBuffer;
 8023430:	4b07      	ldr	r3, [pc, #28]	@ (8023450 <memoryWriteSlot+0x18c>)
 8023432:	4a08      	ldr	r2, [pc, #32]	@ (8023454 <memoryWriteSlot+0x190>)
 8023434:	601a      	str	r2, [r3, #0]
            //Reset temporary buffer length
            memWriteBufferLen = 0;
 8023436:	4b05      	ldr	r3, [pc, #20]	@ (802344c <memoryWriteSlot+0x188>)
 8023438:	2200      	movs	r2, #0
 802343a:	601a      	str	r2, [r3, #0]
 802343c:	e001      	b.n	8023442 <memoryWriteSlot+0x17e>
        }
    }
#endif
    else
    {
        return CBOOT_ERROR_UNKNOWN_SLOT_TYPE;
 802343e:	2315      	movs	r3, #21
 8023440:	e000      	b.n	8023444 <memoryWriteSlot+0x180>
    }

    //Successful process
    return CBOOT_NO_ERROR;
 8023442:	2300      	movs	r3, #0
}
 8023444:	4618      	mov	r0, r3
 8023446:	3740      	adds	r7, #64	@ 0x40
 8023448:	46bd      	mov	sp, r7
 802344a:	bd80      	pop	{r7, pc}
 802344c:	20000184 	.word	0x20000184
 8023450:	20000034 	.word	0x20000034
 8023454:	20000144 	.word	0x20000144

08023458 <memoryReadSlot>:
/**
 * @brief Read Data from Memory function
 **/

cboot_error_t memoryReadSlot(Slot *slot, uint32_t offset, uint8_t* buffer, size_t length)
{
 8023458:	b580      	push	{r7, lr}
 802345a:	b086      	sub	sp, #24
 802345c:	af00      	add	r7, sp, #0
 802345e:	60f8      	str	r0, [r7, #12]
 8023460:	60b9      	str	r1, [r7, #8]
 8023462:	607a      	str	r2, [r7, #4]
 8023464:	603b      	str	r3, [r7, #0]
   error_t error = NO_ERROR;
 8023466:	2300      	movs	r3, #0
 8023468:	82fb      	strh	r3, [r7, #22]

   const void* memoryDriver = ((const Memory*)slot->memParent)->driver;
 802346a:	68fb      	ldr	r3, [r7, #12]
 802346c:	685b      	ldr	r3, [r3, #4]
 802346e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023470:	613b      	str	r3, [r7, #16]

   if(slot->type == SLOT_TYPE_DIRECT)
 8023472:	68fb      	ldr	r3, [r7, #12]
 8023474:	781b      	ldrb	r3, [r3, #0]
 8023476:	2b01      	cmp	r3, #1
 8023478:	d112      	bne.n	80234a0 <memoryReadSlot+0x48>
   {
      error = ((const FlashDriver*)memoryDriver)->read(slot->addr + offset,buffer,length);
 802347a:	693b      	ldr	r3, [r7, #16]
 802347c:	695b      	ldr	r3, [r3, #20]
 802347e:	68fa      	ldr	r2, [r7, #12]
 8023480:	6891      	ldr	r1, [r2, #8]
 8023482:	68ba      	ldr	r2, [r7, #8]
 8023484:	1888      	adds	r0, r1, r2
 8023486:	683a      	ldr	r2, [r7, #0]
 8023488:	6879      	ldr	r1, [r7, #4]
 802348a:	4798      	blx	r3
 802348c:	4603      	mov	r3, r0
 802348e:	82fb      	strh	r3, [r7, #22]
      if(error) {
 8023490:	8afb      	ldrh	r3, [r7, #22]
 8023492:	2b00      	cmp	r3, #0
 8023494:	d006      	beq.n	80234a4 <memoryReadSlot+0x4c>
         cleanupSlotHandler(slot);
 8023496:	68f8      	ldr	r0, [r7, #12]
 8023498:	f000 f879 	bl	802358e <cleanupSlotHandler>
         return CBOOT_ERROR_MEMORY_DRIVER_READ_FAILED;
 802349c:	231e      	movs	r3, #30
 802349e:	e002      	b.n	80234a6 <memoryReadSlot+0x4e>
      }
   }
#endif
   else
   {
      return CBOOT_ERROR_UNKNOWN_SLOT_TYPE;
 80234a0:	2315      	movs	r3, #21
 80234a2:	e000      	b.n	80234a6 <memoryReadSlot+0x4e>
   }

   //Successful process
   return CBOOT_NO_ERROR;
 80234a4:	2300      	movs	r3, #0
}
 80234a6:	4618      	mov	r0, r3
 80234a8:	3718      	adds	r7, #24
 80234aa:	46bd      	mov	sp, r7
 80234ac:	bd80      	pop	{r7, pc}

080234ae <memoryEraseSlot>:
/**
 * @brief Erase Data from Memory function
 **/

cboot_error_t memoryEraseSlot(Slot *slot, uint32_t offset, size_t length)
{
 80234ae:	b580      	push	{r7, lr}
 80234b0:	b086      	sub	sp, #24
 80234b2:	af00      	add	r7, sp, #0
 80234b4:	60f8      	str	r0, [r7, #12]
 80234b6:	60b9      	str	r1, [r7, #8]
 80234b8:	607a      	str	r2, [r7, #4]
   error_t error = NO_ERROR;
 80234ba:	2300      	movs	r3, #0
 80234bc:	82fb      	strh	r3, [r7, #22]

   const void* memoryDriver = ((const Memory*)slot->memParent)->driver;
 80234be:	68fb      	ldr	r3, [r7, #12]
 80234c0:	685b      	ldr	r3, [r3, #4]
 80234c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80234c4:	613b      	str	r3, [r7, #16]

   if(slot->type == SLOT_TYPE_DIRECT)
 80234c6:	68fb      	ldr	r3, [r7, #12]
 80234c8:	781b      	ldrb	r3, [r3, #0]
 80234ca:	2b01      	cmp	r3, #1
 80234cc:	d112      	bne.n	80234f4 <memoryEraseSlot+0x46>
   {
      error = ((const FlashDriver*)memoryDriver)->erase(slot->addr + offset,length);
 80234ce:	693b      	ldr	r3, [r7, #16]
 80234d0:	699b      	ldr	r3, [r3, #24]
 80234d2:	68fa      	ldr	r2, [r7, #12]
 80234d4:	6891      	ldr	r1, [r2, #8]
 80234d6:	68ba      	ldr	r2, [r7, #8]
 80234d8:	440a      	add	r2, r1
 80234da:	6879      	ldr	r1, [r7, #4]
 80234dc:	4610      	mov	r0, r2
 80234de:	4798      	blx	r3
 80234e0:	4603      	mov	r3, r0
 80234e2:	82fb      	strh	r3, [r7, #22]
      if(error) {
 80234e4:	8afb      	ldrh	r3, [r7, #22]
 80234e6:	2b00      	cmp	r3, #0
 80234e8:	d006      	beq.n	80234f8 <memoryEraseSlot+0x4a>
         cleanupSlotHandler(slot);
 80234ea:	68f8      	ldr	r0, [r7, #12]
 80234ec:	f000 f84f 	bl	802358e <cleanupSlotHandler>
         return CBOOT_ERROR_MEMORY_DRIVER_ERASE_FAILED;
 80234f0:	231f      	movs	r3, #31
 80234f2:	e002      	b.n	80234fa <memoryEraseSlot+0x4c>
      }
   }
#endif
   else
   {
      return CBOOT_ERROR_UNKNOWN_SLOT_TYPE;
 80234f4:	2315      	movs	r3, #21
 80234f6:	e000      	b.n	80234fa <memoryEraseSlot+0x4c>
   }

   //Successful process
   return CBOOT_NO_ERROR;
 80234f8:	2300      	movs	r3, #0
}
 80234fa:	4618      	mov	r0, r3
 80234fc:	3718      	adds	r7, #24
 80234fe:	46bd      	mov	sp, r7
 8023500:	bd80      	pop	{r7, pc}

08023502 <isSlotsOverlap>:
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

bool_t isSlotsOverlap(Slot *slot1, Slot *slot2)
{
 8023502:	b480      	push	{r7}
 8023504:	b085      	sub	sp, #20
 8023506:	af00      	add	r7, sp, #0
 8023508:	6078      	str	r0, [r7, #4]
 802350a:	6039      	str	r1, [r7, #0]
   bool_t res;

   res = 0;
 802350c:	2300      	movs	r3, #0
 802350e:	60fb      	str	r3, [r7, #12]

	if(slot1 != NULL && slot2 != NULL && slot1->type == slot2->type)
 8023510:	687b      	ldr	r3, [r7, #4]
 8023512:	2b00      	cmp	r3, #0
 8023514:	d030      	beq.n	8023578 <isSlotsOverlap+0x76>
 8023516:	683b      	ldr	r3, [r7, #0]
 8023518:	2b00      	cmp	r3, #0
 802351a:	d02d      	beq.n	8023578 <isSlotsOverlap+0x76>
 802351c:	687b      	ldr	r3, [r7, #4]
 802351e:	781a      	ldrb	r2, [r3, #0]
 8023520:	683b      	ldr	r3, [r7, #0]
 8023522:	781b      	ldrb	r3, [r3, #0]
 8023524:	429a      	cmp	r2, r3
 8023526:	d127      	bne.n	8023578 <isSlotsOverlap+0x76>
	{
      if(slot1->type == SLOT_TYPE_DIRECT)
 8023528:	687b      	ldr	r3, [r7, #4]
 802352a:	781b      	ldrb	r3, [r3, #0]
 802352c:	2b01      	cmp	r3, #1
 802352e:	d120      	bne.n	8023572 <isSlotsOverlap+0x70>
      {
         //Are flash slots 1 & 2 overlapping?
         if(((slot1->addr >= slot2->addr) && (slot1->addr < (slot2->addr + slot2->size))) ||
 8023530:	687b      	ldr	r3, [r7, #4]
 8023532:	689a      	ldr	r2, [r3, #8]
 8023534:	683b      	ldr	r3, [r7, #0]
 8023536:	689b      	ldr	r3, [r3, #8]
 8023538:	429a      	cmp	r2, r3
 802353a:	d308      	bcc.n	802354e <isSlotsOverlap+0x4c>
 802353c:	687b      	ldr	r3, [r7, #4]
 802353e:	689a      	ldr	r2, [r3, #8]
 8023540:	683b      	ldr	r3, [r7, #0]
 8023542:	6899      	ldr	r1, [r3, #8]
 8023544:	683b      	ldr	r3, [r7, #0]
 8023546:	68db      	ldr	r3, [r3, #12]
 8023548:	440b      	add	r3, r1
 802354a:	429a      	cmp	r2, r3
 802354c:	d30e      	bcc.n	802356c <isSlotsOverlap+0x6a>
            ((slot2->addr >= slot1->addr) && (slot2->addr < (slot1->addr + slot1->size))))
 802354e:	683b      	ldr	r3, [r7, #0]
 8023550:	689a      	ldr	r2, [r3, #8]
 8023552:	687b      	ldr	r3, [r7, #4]
 8023554:	689b      	ldr	r3, [r3, #8]
         if(((slot1->addr >= slot2->addr) && (slot1->addr < (slot2->addr + slot2->size))) ||
 8023556:	429a      	cmp	r2, r3
 8023558:	d311      	bcc.n	802357e <isSlotsOverlap+0x7c>
            ((slot2->addr >= slot1->addr) && (slot2->addr < (slot1->addr + slot1->size))))
 802355a:	683b      	ldr	r3, [r7, #0]
 802355c:	689a      	ldr	r2, [r3, #8]
 802355e:	687b      	ldr	r3, [r7, #4]
 8023560:	6899      	ldr	r1, [r3, #8]
 8023562:	687b      	ldr	r3, [r7, #4]
 8023564:	68db      	ldr	r3, [r3, #12]
 8023566:	440b      	add	r3, r1
 8023568:	429a      	cmp	r2, r3
 802356a:	d208      	bcs.n	802357e <isSlotsOverlap+0x7c>
			{
				//Slots overlapping
				res = 1;
 802356c:	2301      	movs	r3, #1
 802356e:	60fb      	str	r3, [r7, #12]
      if(slot1->type == SLOT_TYPE_DIRECT)
 8023570:	e005      	b.n	802357e <isSlotsOverlap+0x7c>
		}
#endif
		else
		{
			//Unknown slot type
			res  = 1;
 8023572:	2301      	movs	r3, #1
 8023574:	60fb      	str	r3, [r7, #12]
      if(slot1->type == SLOT_TYPE_DIRECT)
 8023576:	e002      	b.n	802357e <isSlotsOverlap+0x7c>
		}
   }
   else
   {
      //Bad parameters
      res = 1;
 8023578:	2301      	movs	r3, #1
 802357a:	60fb      	str	r3, [r7, #12]
 802357c:	e000      	b.n	8023580 <isSlotsOverlap+0x7e>
      if(slot1->type == SLOT_TYPE_DIRECT)
 802357e:	bf00      	nop
   }

   //Return result
   return res;
 8023580:	68fb      	ldr	r3, [r7, #12]
}
 8023582:	4618      	mov	r0, r3
 8023584:	3714      	adds	r7, #20
 8023586:	46bd      	mov	sp, r7
 8023588:	f85d 7b04 	ldr.w	r7, [sp], #4
 802358c:	4770      	bx	lr

0802358e <cleanupSlotHandler>:

cboot_error_t cleanupSlotHandler(Slot *slot)
{
 802358e:	b580      	push	{r7, lr}
 8023590:	b086      	sub	sp, #24
 8023592:	af00      	add	r7, sp, #0
 8023594:	6078      	str	r0, [r7, #4]
   error_t error;
   Memory const *memory = (Memory  *)slot->memParent;
 8023596:	687b      	ldr	r3, [r7, #4]
 8023598:	685b      	ldr	r3, [r3, #4]
 802359a:	617b      	str	r3, [r7, #20]
      if(error)
         return CBOOT_ERROR_MEMORY_DRIVER_CLOSE_FAILED;
   }
#endif

   if(slot->type == SLOT_TYPE_DIRECT) {
 802359c:	687b      	ldr	r3, [r7, #4]
 802359e:	781b      	ldrb	r3, [r3, #0]
 80235a0:	2b01      	cmp	r3, #1
 80235a2:	d10c      	bne.n	80235be <cleanupSlotHandler+0x30>
      const FlashDriver *driver = memory->driver;
 80235a4:	697b      	ldr	r3, [r7, #20]
 80235a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80235a8:	613b      	str	r3, [r7, #16]
      error = driver->deInit();
 80235aa:	693b      	ldr	r3, [r7, #16]
 80235ac:	685b      	ldr	r3, [r3, #4]
 80235ae:	4798      	blx	r3
 80235b0:	4603      	mov	r3, r0
 80235b2:	81fb      	strh	r3, [r7, #14]
      if(error)
 80235b4:	89fb      	ldrh	r3, [r7, #14]
 80235b6:	2b00      	cmp	r3, #0
 80235b8:	d001      	beq.n	80235be <cleanupSlotHandler+0x30>
         return CBOOT_ERROR_MEMORY_DRIVER_DEINIT_FAILED;
 80235ba:	231c      	movs	r3, #28
 80235bc:	e000      	b.n	80235c0 <cleanupSlotHandler+0x32>
   }

   //Successful process
   return CBOOT_NO_ERROR;
 80235be:	2300      	movs	r3, #0
}
 80235c0:	4618      	mov	r0, r3
 80235c2:	3718      	adds	r7, #24
 80235c4:	46bd      	mov	sp, r7
 80235c6:	bd80      	pop	{r7, pc}

080235c8 <slotsInit>:


cboot_error_t slotsInit(Memory* memory) {
 80235c8:	b580      	push	{r7, lr}
 80235ca:	b086      	sub	sp, #24
 80235cc:	af00      	add	r7, sp, #0
 80235ce:	6078      	str	r0, [r7, #4]
   uint_t i;
   const void* memoryDriver;
   Slot *slot;

   //Check parameters
   if(memory == NULL)
 80235d0:	687b      	ldr	r3, [r7, #4]
 80235d2:	2b00      	cmp	r3, #0
 80235d4:	d101      	bne.n	80235da <slotsInit+0x12>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80235d6:	2304      	movs	r3, #4
 80235d8:	e04d      	b.n	8023676 <slotsInit+0xae>

   if(memory->nbSlots == 0 || memory->nbSlots > NB_MAX_MEMORY_SLOTS)
 80235da:	687b      	ldr	r3, [r7, #4]
 80235dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80235e0:	2b00      	cmp	r3, #0
 80235e2:	d004      	beq.n	80235ee <slotsInit+0x26>
 80235e4:	687b      	ldr	r3, [r7, #4]
 80235e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80235ea:	2b02      	cmp	r3, #2
 80235ec:	d901      	bls.n	80235f2 <slotsInit+0x2a>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80235ee:	2304      	movs	r3, #4
 80235f0:	e041      	b.n	8023676 <slotsInit+0xae>

   memoryDriver = memory->driver;
 80235f2:	687b      	ldr	r3, [r7, #4]
 80235f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80235f6:	613b      	str	r3, [r7, #16]

   //Loop through memory slots
   for(i = 0; i < memory->nbSlots; i++)
 80235f8:	2300      	movs	r3, #0
 80235fa:	617b      	str	r3, [r7, #20]
 80235fc:	e033      	b.n	8023666 <slotsInit+0x9e>
   {
      slot = &memory->slots[i];
 80235fe:	697b      	ldr	r3, [r7, #20]
 8023600:	011b      	lsls	r3, r3, #4
 8023602:	3308      	adds	r3, #8
 8023604:	687a      	ldr	r2, [r7, #4]
 8023606:	4413      	add	r3, r2
 8023608:	60fb      	str	r3, [r7, #12]

      //if(slot->cType == SLOT_CONTENT_NONE || slot->cType > SLOT_CONTENT_BOOT)

      //Set memory parent for each slot
      slot->memParent = (void*)memory;
 802360a:	68fb      	ldr	r3, [r7, #12]
 802360c:	687a      	ldr	r2, [r7, #4]
 802360e:	605a      	str	r2, [r3, #4]

      //Is it a direct slot? (flash slot)

      if(slot->type == SLOT_TYPE_DIRECT)
 8023610:	68fb      	ldr	r3, [r7, #12]
 8023612:	781b      	ldrb	r3, [r3, #0]
 8023614:	2b01      	cmp	r3, #1
 8023616:	d10a      	bne.n	802362e <slotsInit+0x66>
      {
			//Check slot start address matches a sector address
			if(!(((const FlashDriver*)memoryDriver)->isSectorAddr(slot->addr)))
 8023618:	693b      	ldr	r3, [r7, #16]
 802361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802361c:	68fa      	ldr	r2, [r7, #12]
 802361e:	6892      	ldr	r2, [r2, #8]
 8023620:	4610      	mov	r0, r2
 8023622:	4798      	blx	r3
 8023624:	4603      	mov	r3, r0
 8023626:	2b00      	cmp	r3, #0
 8023628:	d101      	bne.n	802362e <slotsInit+0x66>
				return CBOOT_ERROR_INVALID_ADDRESS;
 802362a:	2305      	movs	r3, #5
 802362c:	e023      	b.n	8023676 <slotsInit+0xae>
      }

      if(i < memory->nbSlots-1)
 802362e:	687b      	ldr	r3, [r7, #4]
 8023630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8023634:	3b01      	subs	r3, #1
 8023636:	461a      	mov	r2, r3
 8023638:	697b      	ldr	r3, [r7, #20]
 802363a:	4293      	cmp	r3, r2
 802363c:	d210      	bcs.n	8023660 <slotsInit+0x98>
      {
         //Check slots overlapping
         if(isSlotsOverlap(&memory->slots[0], &memory->slots[i+1]))
 802363e:	687b      	ldr	r3, [r7, #4]
 8023640:	f103 0008 	add.w	r0, r3, #8
 8023644:	697b      	ldr	r3, [r7, #20]
 8023646:	3301      	adds	r3, #1
 8023648:	011b      	lsls	r3, r3, #4
 802364a:	3308      	adds	r3, #8
 802364c:	687a      	ldr	r2, [r7, #4]
 802364e:	4413      	add	r3, r2
 8023650:	4619      	mov	r1, r3
 8023652:	f7ff ff56 	bl	8023502 <isSlotsOverlap>
 8023656:	4603      	mov	r3, r0
 8023658:	2b00      	cmp	r3, #0
 802365a:	d001      	beq.n	8023660 <slotsInit+0x98>
				return CBOOT_ERROR_SLOTS_OVERLAP;
 802365c:	2314      	movs	r3, #20
 802365e:	e00a      	b.n	8023676 <slotsInit+0xae>
   for(i = 0; i < memory->nbSlots; i++)
 8023660:	697b      	ldr	r3, [r7, #20]
 8023662:	3301      	adds	r3, #1
 8023664:	617b      	str	r3, [r7, #20]
 8023666:	687b      	ldr	r3, [r7, #4]
 8023668:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802366c:	461a      	mov	r2, r3
 802366e:	697b      	ldr	r3, [r7, #20]
 8023670:	4293      	cmp	r3, r2
 8023672:	d3c4      	bcc.n	80235fe <slotsInit+0x36>
      }
#endif
   }

   //Successful process
   return CBOOT_NO_ERROR;
 8023674:	2300      	movs	r3, #0
}
 8023676:	4618      	mov	r0, r3
 8023678:	3718      	adds	r7, #24
 802367a:	46bd      	mov	sp, r7
 802367c:	bd80      	pop	{r7, pc}

0802367e <memoryGetSlotByCType>:
 * @param slotCType Slot content type we are looking for
 * @param slot Pointer to the slot we are looking for
 * @return cboot_error_t
 **/
cboot_error_t memoryGetSlotByCType(Memory* memory, uint8_t slotCType, Slot **slot)
{
 802367e:	b480      	push	{r7}
 8023680:	b087      	sub	sp, #28
 8023682:	af00      	add	r7, sp, #0
 8023684:	60f8      	str	r0, [r7, #12]
 8023686:	460b      	mov	r3, r1
 8023688:	607a      	str	r2, [r7, #4]
 802368a:	72fb      	strb	r3, [r7, #11]
   uint_t i;

   if(memory == NULL || slotCType == 0 || slot == NULL)
 802368c:	68fb      	ldr	r3, [r7, #12]
 802368e:	2b00      	cmp	r3, #0
 8023690:	d005      	beq.n	802369e <memoryGetSlotByCType+0x20>
 8023692:	7afb      	ldrb	r3, [r7, #11]
 8023694:	2b00      	cmp	r3, #0
 8023696:	d002      	beq.n	802369e <memoryGetSlotByCType+0x20>
 8023698:	687b      	ldr	r3, [r7, #4]
 802369a:	2b00      	cmp	r3, #0
 802369c:	d101      	bne.n	80236a2 <memoryGetSlotByCType+0x24>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 802369e:	2304      	movs	r3, #4
 80236a0:	e027      	b.n	80236f2 <memoryGetSlotByCType+0x74>

   *slot = NULL;
 80236a2:	687b      	ldr	r3, [r7, #4]
 80236a4:	2200      	movs	r2, #0
 80236a6:	601a      	str	r2, [r3, #0]

   for(i = 0; i < memory->nbSlots; i++)
 80236a8:	2300      	movs	r3, #0
 80236aa:	617b      	str	r3, [r7, #20]
 80236ac:	e013      	b.n	80236d6 <memoryGetSlotByCType+0x58>
   {
      if(memory->slots[i].cType == slotCType)
 80236ae:	68fa      	ldr	r2, [r7, #12]
 80236b0:	697b      	ldr	r3, [r7, #20]
 80236b2:	011b      	lsls	r3, r3, #4
 80236b4:	4413      	add	r3, r2
 80236b6:	3309      	adds	r3, #9
 80236b8:	781b      	ldrb	r3, [r3, #0]
 80236ba:	7afa      	ldrb	r2, [r7, #11]
 80236bc:	429a      	cmp	r2, r3
 80236be:	d107      	bne.n	80236d0 <memoryGetSlotByCType+0x52>
      {
         *slot = &memory->slots[i];
 80236c0:	697b      	ldr	r3, [r7, #20]
 80236c2:	011b      	lsls	r3, r3, #4
 80236c4:	3308      	adds	r3, #8
 80236c6:	68fa      	ldr	r2, [r7, #12]
 80236c8:	441a      	add	r2, r3
 80236ca:	687b      	ldr	r3, [r7, #4]
 80236cc:	601a      	str	r2, [r3, #0]
         break;
 80236ce:	e009      	b.n	80236e4 <memoryGetSlotByCType+0x66>
   for(i = 0; i < memory->nbSlots; i++)
 80236d0:	697b      	ldr	r3, [r7, #20]
 80236d2:	3301      	adds	r3, #1
 80236d4:	617b      	str	r3, [r7, #20]
 80236d6:	68fb      	ldr	r3, [r7, #12]
 80236d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80236dc:	461a      	mov	r2, r3
 80236de:	697b      	ldr	r3, [r7, #20]
 80236e0:	4293      	cmp	r3, r2
 80236e2:	d3e4      	bcc.n	80236ae <memoryGetSlotByCType+0x30>
      }
   }

   if(*slot == NULL)
 80236e4:	687b      	ldr	r3, [r7, #4]
 80236e6:	681b      	ldr	r3, [r3, #0]
 80236e8:	2b00      	cmp	r3, #0
 80236ea:	d101      	bne.n	80236f0 <memoryGetSlotByCType+0x72>
      return CBOOT_ERROR_FAILURE;
 80236ec:	2301      	movs	r3, #1
 80236ee:	e000      	b.n	80236f2 <memoryGetSlotByCType+0x74>
   else
      return CBOOT_NO_ERROR;
 80236f0:	2300      	movs	r3, #0
}
 80236f2:	4618      	mov	r0, r3
 80236f4:	371c      	adds	r7, #28
 80236f6:	46bd      	mov	sp, r7
 80236f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236fc:	4770      	bx	lr
	...

08023700 <memoryInitWriteBuffer>:
/**
 * @brief Initialize memory write buffer
 **/

void memoryInitWriteBuffer(void)
{
 8023700:	b580      	push	{r7, lr}
 8023702:	af00      	add	r7, sp, #0
   memset(memWriteBuffer, 0, sizeof(memWriteBuffer));
 8023704:	2240      	movs	r2, #64	@ 0x40
 8023706:	2100      	movs	r1, #0
 8023708:	4805      	ldr	r0, [pc, #20]	@ (8023720 <memoryInitWriteBuffer+0x20>)
 802370a:	f00c fe4d 	bl	80303a8 <memset>
   memWriteBufferPos = memWriteBuffer;
 802370e:	4b05      	ldr	r3, [pc, #20]	@ (8023724 <memoryInitWriteBuffer+0x24>)
 8023710:	4a03      	ldr	r2, [pc, #12]	@ (8023720 <memoryInitWriteBuffer+0x20>)
 8023712:	601a      	str	r2, [r3, #0]
   memWriteBufferLen = 0;
 8023714:	4b04      	ldr	r3, [pc, #16]	@ (8023728 <memoryInitWriteBuffer+0x28>)
 8023716:	2200      	movs	r2, #0
 8023718:	601a      	str	r2, [r3, #0]
}
 802371a:	bf00      	nop
 802371c:	bd80      	pop	{r7, pc}
 802371e:	bf00      	nop
 8023720:	20000144 	.word	0x20000144
 8023724:	20000034 	.word	0x20000034
 8023728:	20000184 	.word	0x20000184

0802372c <memoryResetWriteBuffer>:
/**
 * @brief Reset memory write buffer
 **/

void memoryResetWriteBuffer(void)
{
 802372c:	b580      	push	{r7, lr}
 802372e:	af00      	add	r7, sp, #0
   memoryInitWriteBuffer();
 8023730:	f7ff ffe6 	bl	8023700 <memoryInitWriteBuffer>
}
 8023734:	bf00      	nop
 8023736:	bd80      	pop	{r7, pc}

08023738 <cipherInit>:

//cboot_error_t cipherInit(CipherEngine *engine, const CipherAlgo *algo,
//   CipherMode mode, const char_t *key, size_t keyLen)
cboot_error_t cipherInit(CipherEngine *engine, const CipherAlgo *algo,
   CipherMode mode, const uint8_t *key, size_t keyLen)
{
 8023738:	b580      	push	{r7, lr}
 802373a:	b086      	sub	sp, #24
 802373c:	af00      	add	r7, sp, #0
 802373e:	60f8      	str	r0, [r7, #12]
 8023740:	60b9      	str	r1, [r7, #8]
 8023742:	603b      	str	r3, [r7, #0]
 8023744:	4613      	mov	r3, r2
 8023746:	71fb      	strb	r3, [r7, #7]
   error_t error;

   //Check parameter validity
   if(engine == NULL)
 8023748:	68fb      	ldr	r3, [r7, #12]
 802374a:	2b00      	cmp	r3, #0
 802374c:	d101      	bne.n	8023752 <cipherInit+0x1a>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 802374e:	2304      	movs	r3, #4
 8023750:	e03e      	b.n	80237d0 <cipherInit+0x98>

   //Check cipher engine fields
   if(algo == NULL || mode == CIPHER_MODE_NULL || key == NULL || keyLen == 0)
 8023752:	68bb      	ldr	r3, [r7, #8]
 8023754:	2b00      	cmp	r3, #0
 8023756:	d008      	beq.n	802376a <cipherInit+0x32>
 8023758:	79fb      	ldrb	r3, [r7, #7]
 802375a:	2b00      	cmp	r3, #0
 802375c:	d005      	beq.n	802376a <cipherInit+0x32>
 802375e:	683b      	ldr	r3, [r7, #0]
 8023760:	2b00      	cmp	r3, #0
 8023762:	d002      	beq.n	802376a <cipherInit+0x32>
 8023764:	6a3b      	ldr	r3, [r7, #32]
 8023766:	2b00      	cmp	r3, #0
 8023768:	d101      	bne.n	802376e <cipherInit+0x36>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 802376a:	2304      	movs	r3, #4
 802376c:	e030      	b.n	80237d0 <cipherInit+0x98>

   //Reset cipher engine contents
   memset(engine, 0, sizeof(CipherEngine));
 802376e:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8023772:	2100      	movs	r1, #0
 8023774:	68f8      	ldr	r0, [r7, #12]
 8023776:	f00c fe17 	bl	80303a8 <memset>

   //Set cipher engine algorithm
   engine->algo = algo;
 802377a:	68fb      	ldr	r3, [r7, #12]
 802377c:	68ba      	ldr	r2, [r7, #8]
 802377e:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
   //Set cipher engine mode
   engine->mode = mode;
 8023782:	68fb      	ldr	r3, [r7, #12]
 8023784:	79fa      	ldrb	r2, [r7, #7]
 8023786:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
   //Set cipher engine key
   engine->key = key;
 802378a:	68fb      	ldr	r3, [r7, #12]
 802378c:	683a      	ldr	r2, [r7, #0]
 802378e:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
   //Set cipher engine key length
   engine->keyLen = keyLen;
 8023792:	68fb      	ldr	r3, [r7, #12]
 8023794:	6a3a      	ldr	r2, [r7, #32]
 8023796:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0

   //Initialize cipher engine context
   error = engine->algo->init((void *) &engine->context,
 802379a:	68fb      	ldr	r3, [r7, #12]
 802379c:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 80237a0:	691b      	ldr	r3, [r3, #16]
 80237a2:	68f8      	ldr	r0, [r7, #12]
 80237a4:	68fa      	ldr	r2, [r7, #12]
 80237a6:	f8d2 11ec 	ldr.w	r1, [r2, #492]	@ 0x1ec
 80237aa:	68fa      	ldr	r2, [r7, #12]
 80237ac:	f8d2 21f0 	ldr.w	r2, [r2, #496]	@ 0x1f0
 80237b0:	4798      	blx	r3
 80237b2:	4603      	mov	r3, r0
 80237b4:	82fb      	strh	r3, [r7, #22]
      (const uint8_t *) engine->key, engine->keyLen);
   //Is any error?
   if(error)
 80237b6:	8afb      	ldrh	r3, [r7, #22]
 80237b8:	2b00      	cmp	r3, #0
 80237ba:	d001      	beq.n	80237c0 <cipherInit+0x88>
      return CBOOT_ERROR_FAILURE;
 80237bc:	2301      	movs	r3, #1
 80237be:	e007      	b.n	80237d0 <cipherInit+0x98>

   //Set cipher iv length
   engine->ivLen = engine->algo->blockSize;
 80237c0:	68fb      	ldr	r3, [r7, #12]
 80237c2:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 80237c6:	68da      	ldr	r2, [r3, #12]
 80237c8:	68fb      	ldr	r3, [r7, #12]
 80237ca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

   //Return status code
   return CBOOT_NO_ERROR;
 80237ce:	2300      	movs	r3, #0
}
 80237d0:	4618      	mov	r0, r3
 80237d2:	3718      	adds	r7, #24
 80237d4:	46bd      	mov	sp, r7
 80237d6:	bd80      	pop	{r7, pc}

080237d8 <cipherSetIv>:
 * @param[in] ivLen Length of the cipher initialization vector
 * @return Error code
 **/

cboot_error_t cipherSetIv(CipherEngine *engine, uint8_t* iv, size_t ivLen)
{
 80237d8:	b580      	push	{r7, lr}
 80237da:	b084      	sub	sp, #16
 80237dc:	af00      	add	r7, sp, #0
 80237de:	60f8      	str	r0, [r7, #12]
 80237e0:	60b9      	str	r1, [r7, #8]
 80237e2:	607a      	str	r2, [r7, #4]
   //Check parameters
   if(engine == NULL || iv == NULL || ivLen == 0)
 80237e4:	68fb      	ldr	r3, [r7, #12]
 80237e6:	2b00      	cmp	r3, #0
 80237e8:	d005      	beq.n	80237f6 <cipherSetIv+0x1e>
 80237ea:	68bb      	ldr	r3, [r7, #8]
 80237ec:	2b00      	cmp	r3, #0
 80237ee:	d002      	beq.n	80237f6 <cipherSetIv+0x1e>
 80237f0:	687b      	ldr	r3, [r7, #4]
 80237f2:	2b00      	cmp	r3, #0
 80237f4:	d101      	bne.n	80237fa <cipherSetIv+0x22>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80237f6:	2304      	movs	r3, #4
 80237f8:	e008      	b.n	802380c <cipherSetIv+0x34>

   //Save cipher engine iv
   memcpy(engine->iv, iv, ivLen);
 80237fa:	68fb      	ldr	r3, [r7, #12]
 80237fc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8023800:	687a      	ldr	r2, [r7, #4]
 8023802:	68b9      	ldr	r1, [r7, #8]
 8023804:	4618      	mov	r0, r3
 8023806:	f00c fe94 	bl	8030532 <memcpy>

   //Successfull process
   return CBOOT_NO_ERROR;
 802380a:	2300      	movs	r3, #0
}
 802380c:	4618      	mov	r0, r3
 802380e:	3710      	adds	r7, #16
 8023810:	46bd      	mov	sp, r7
 8023812:	bd80      	pop	{r7, pc}

08023814 <cipherDecryptData>:
 * @param[in] length Length of the plaintext data buffer
 * @return Error code
 **/

cboot_error_t cipherDecryptData(CipherEngine *engine, uint8_t *data, size_t length)
{
 8023814:	b580      	push	{r7, lr}
 8023816:	b088      	sub	sp, #32
 8023818:	af02      	add	r7, sp, #8
 802381a:	60f8      	str	r0, [r7, #12]
 802381c:	60b9      	str	r1, [r7, #8]
 802381e:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check parameters validity
   if(engine == NULL || data == NULL || length == 0)
 8023820:	68fb      	ldr	r3, [r7, #12]
 8023822:	2b00      	cmp	r3, #0
 8023824:	d005      	beq.n	8023832 <cipherDecryptData+0x1e>
 8023826:	68bb      	ldr	r3, [r7, #8]
 8023828:	2b00      	cmp	r3, #0
 802382a:	d002      	beq.n	8023832 <cipherDecryptData+0x1e>
 802382c:	687b      	ldr	r3, [r7, #4]
 802382e:	2b00      	cmp	r3, #0
 8023830:	d101      	bne.n	8023836 <cipherDecryptData+0x22>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023832:	2304      	movs	r3, #4
 8023834:	e036      	b.n	80238a4 <cipherDecryptData+0x90>

   //Check cipher engine iv
   if(engine->ivLen == 0)
 8023836:	68fb      	ldr	r3, [r7, #12]
 8023838:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 802383c:	2b00      	cmp	r3, #0
 802383e:	d101      	bne.n	8023844 <cipherDecryptData+0x30>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023840:	2304      	movs	r3, #4
 8023842:	e02f      	b.n	80238a4 <cipherDecryptData+0x90>

   //Check cipher engine mode
   if(engine->mode == CIPHER_MODE_NULL)
 8023844:	68fb      	ldr	r3, [r7, #12]
 8023846:	f893 31e8 	ldrb.w	r3, [r3, #488]	@ 0x1e8
 802384a:	2b00      	cmp	r3, #0
 802384c:	d101      	bne.n	8023852 <cipherDecryptData+0x3e>
   {
      return CBOOT_ERROR_INVALID_PARAMETERS;
 802384e:	2304      	movs	r3, #4
 8023850:	e028      	b.n	80238a4 <cipherDecryptData+0x90>
   }
   else if(engine->mode == CIPHER_MODE_CBC)
 8023852:	68fb      	ldr	r3, [r7, #12]
 8023854:	f893 31e8 	ldrb.w	r3, [r3, #488]	@ 0x1e8
 8023858:	2b03      	cmp	r3, #3
 802385a:	d116      	bne.n	802388a <cipherDecryptData+0x76>
   {
      //Decrypt ciphertext data using CBC mode
      error = cbcDecrypt(engine->algo, (void *) &engine->context,
 802385c:	68fb      	ldr	r3, [r7, #12]
 802385e:	f8d3 01e4 	ldr.w	r0, [r3, #484]	@ 0x1e4
 8023862:	68f9      	ldr	r1, [r7, #12]
         engine->iv, data, data, length);
 8023864:	68fb      	ldr	r3, [r7, #12]
 8023866:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
      error = cbcDecrypt(engine->algo, (void *) &engine->context,
 802386a:	687b      	ldr	r3, [r7, #4]
 802386c:	9301      	str	r3, [sp, #4]
 802386e:	68bb      	ldr	r3, [r7, #8]
 8023870:	9300      	str	r3, [sp, #0]
 8023872:	68bb      	ldr	r3, [r7, #8]
 8023874:	f001 fd46 	bl	8025304 <cbcDecrypt>
 8023878:	4603      	mov	r3, r0
 802387a:	82fb      	strh	r3, [r7, #22]
      //Is any error?
      if(error)
 802387c:	8afb      	ldrh	r3, [r7, #22]
 802387e:	2b00      	cmp	r3, #0
 8023880:	d001      	beq.n	8023886 <cipherDecryptData+0x72>
         return CBOOT_ERROR_FAILURE;
 8023882:	2301      	movs	r3, #1
 8023884:	e00e      	b.n	80238a4 <cipherDecryptData+0x90>
      else
         return CBOOT_NO_ERROR;
 8023886:	2300      	movs	r3, #0
 8023888:	e00c      	b.n	80238a4 <cipherDecryptData+0x90>
   }
   else
   {
      //Debug message
      TRACE_ERROR("Cipher mode not supported!\r\n");
 802388a:	f7fd fd95 	bl	80213b8 <osSuspendAllTasks>
 802388e:	4b07      	ldr	r3, [pc, #28]	@ (80238ac <cipherDecryptData+0x98>)
 8023890:	681b      	ldr	r3, [r3, #0]
 8023892:	68db      	ldr	r3, [r3, #12]
 8023894:	221c      	movs	r2, #28
 8023896:	2101      	movs	r1, #1
 8023898:	4805      	ldr	r0, [pc, #20]	@ (80238b0 <cipherDecryptData+0x9c>)
 802389a:	f00c fc8f 	bl	80301bc <fwrite>
 802389e:	f7fd fd92 	bl	80213c6 <osResumeAllTasks>
      //Forward error;
      return CBOOT_ERROR_NOT_IMPLEMENTED;
 80238a2:	2302      	movs	r3, #2
   }
}
 80238a4:	4618      	mov	r0, r3
 80238a6:	3718      	adds	r7, #24
 80238a8:	46bd      	mov	sp, r7
 80238aa:	bd80      	pop	{r7, pc}
 80238ac:	2000008c 	.word	0x2000008c
 80238b0:	08031314 	.word	0x08031314

080238b4 <cipherCheckMagicNumberCrc>:
 * @param keyIsValid
 * @return cboot_error_t
 **/

cboot_error_t cipherCheckMagicNumberCrc(uint32_t magicNumberCrc, bool_t *magicNumberIsValid)
{
 80238b4:	b580      	push	{r7, lr}
 80238b6:	b084      	sub	sp, #16
 80238b8:	af00      	add	r7, sp, #0
 80238ba:	6078      	str	r0, [r7, #4]
 80238bc:	6039      	str	r1, [r7, #0]
   uint32_t computedMagicNumberCrc;

   //Check parameters
   if(magicNumberIsValid == NULL)
 80238be:	683b      	ldr	r3, [r7, #0]
 80238c0:	2b00      	cmp	r3, #0
 80238c2:	d101      	bne.n	80238c8 <cipherCheckMagicNumberCrc+0x14>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80238c4:	2304      	movs	r3, #4
 80238c6:	e01a      	b.n	80238fe <cipherCheckMagicNumberCrc+0x4a>

   //Set default magic number validity to FALSE
   *magicNumberIsValid = FALSE;
 80238c8:	683b      	ldr	r3, [r7, #0]
 80238ca:	2200      	movs	r2, #0
 80238cc:	601a      	str	r2, [r3, #0]

   //Compute CRC on the given magic number
   if(!CRC32_HASH_ALGO->compute(CIPHER_MAGIC_NUMBER, CIPHER_MAGIC_NUMBER_SIZE,
 80238ce:	4b0e      	ldr	r3, [pc, #56]	@ (8023908 <cipherCheckMagicNumberCrc+0x54>)
 80238d0:	6a1b      	ldr	r3, [r3, #32]
 80238d2:	f107 020c 	add.w	r2, r7, #12
 80238d6:	2110      	movs	r1, #16
 80238d8:	480c      	ldr	r0, [pc, #48]	@ (802390c <cipherCheckMagicNumberCrc+0x58>)
 80238da:	4798      	blx	r3
 80238dc:	4603      	mov	r3, r0
 80238de:	2b00      	cmp	r3, #0
 80238e0:	d10c      	bne.n	80238fc <cipherCheckMagicNumberCrc+0x48>
      (uint8_t*)&computedMagicNumberCrc))
   {
      //Check computed magic number crc against the given magic number crc
      if(memcmp((uint8_t*)&magicNumberCrc, (uint8_t*)&computedMagicNumberCrc, CRC32_DIGEST_SIZE) == 0)
 80238e2:	f107 010c 	add.w	r1, r7, #12
 80238e6:	1d3b      	adds	r3, r7, #4
 80238e8:	2204      	movs	r2, #4
 80238ea:	4618      	mov	r0, r3
 80238ec:	f00c fd4c 	bl	8030388 <memcmp>
 80238f0:	4603      	mov	r3, r0
 80238f2:	2b00      	cmp	r3, #0
 80238f4:	d102      	bne.n	80238fc <cipherCheckMagicNumberCrc+0x48>
      {
         //Magic number is valid
         *magicNumberIsValid = TRUE;
 80238f6:	683b      	ldr	r3, [r7, #0]
 80238f8:	2201      	movs	r2, #1
 80238fa:	601a      	str	r2, [r3, #0]
      }
   }

   //Successful process
   return CBOOT_NO_ERROR;
 80238fc:	2300      	movs	r3, #0
}
 80238fe:	4618      	mov	r0, r3
 8023900:	3710      	adds	r7, #16
 8023902:	46bd      	mov	sp, r7
 8023904:	bd80      	pop	{r7, pc}
 8023906:	bf00      	nop
 8023908:	080322f0 	.word	0x080322f0
 802390c:	08031334 	.word	0x08031334

08023910 <verifyInit>:
 * @param[in] settings Image Verification specific settings
 * @return
 **/

cboot_error_t verifyInit(VerifyContext *context, VerifySettings *settings)
{
 8023910:	b580      	push	{r7, lr}
 8023912:	b082      	sub	sp, #8
 8023914:	af00      	add	r7, sp, #0
 8023916:	6078      	str	r0, [r7, #4]
 8023918:	6039      	str	r1, [r7, #0]
   //Check parameters
   if (context == NULL || settings == NULL)
 802391a:	687b      	ldr	r3, [r7, #4]
 802391c:	2b00      	cmp	r3, #0
 802391e:	d002      	beq.n	8023926 <verifyInit+0x16>
 8023920:	683b      	ldr	r3, [r7, #0]
 8023922:	2b00      	cmp	r3, #0
 8023924:	d101      	bne.n	802392a <verifyInit+0x1a>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023926:	2304      	movs	r3, #4
 8023928:	e046      	b.n	80239b8 <verifyInit+0xa8>

   //Save verify settings
   memcpy(&context->verifySettings, settings, sizeof(VerifySettings));
 802392a:	687b      	ldr	r3, [r7, #4]
 802392c:	2218      	movs	r2, #24
 802392e:	6839      	ldr	r1, [r7, #0]
 8023930:	4618      	mov	r0, r3
 8023932:	f00c fdfe 	bl	8030532 <memcpy>

   //Save verification module user settings
   memcpy(&context->verifySettings, settings, sizeof(VerifySettings));
 8023936:	687b      	ldr	r3, [r7, #4]
 8023938:	2218      	movs	r2, #24
 802393a:	6839      	ldr	r1, [r7, #0]
 802393c:	4618      	mov	r0, r3
 802393e:	f00c fdf8 	bl	8030532 <memcpy>

   //Initialize verification context for integrity method
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 8023942:	687b      	ldr	r3, [r7, #4]
 8023944:	781b      	ldrb	r3, [r3, #0]
 8023946:	2b00      	cmp	r3, #0
 8023948:	d11a      	bne.n	8023980 <verifyInit+0x70>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 802394a:	687b      	ldr	r3, [r7, #4]
 802394c:	685b      	ldr	r3, [r3, #4]
 802394e:	2b00      	cmp	r3, #0
 8023950:	d014      	beq.n	802397c <verifyInit+0x6c>
      {
         //Initialize integrity algo context
         context->verifySettings.integrityAlgo->init(context->checkContext);
 8023952:	687b      	ldr	r3, [r7, #4]
 8023954:	685b      	ldr	r3, [r3, #4]
 8023956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023958:	687a      	ldr	r2, [r7, #4]
 802395a:	3218      	adds	r2, #24
 802395c:	4610      	mov	r0, r2
 802395e:	4798      	blx	r3

         //Set image check digest size
         context->imageCheckDigestSize = context->verifySettings.integrityAlgo->digestSize;
 8023960:	687b      	ldr	r3, [r7, #4]
 8023962:	685b      	ldr	r3, [r3, #4]
 8023964:	695a      	ldr	r2, [r3, #20]
 8023966:	687b      	ldr	r3, [r7, #4]
 8023968:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

         //Set check data (integrity tag) size
         context->checkDataSize = context->imageCheckDigestSize;
 802396c:	687b      	ldr	r3, [r7, #4]
 802396e:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 8023972:	687b      	ldr	r3, [r7, #4]
 8023974:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

         //Successful process
         return CBOOT_NO_ERROR;
 8023978:	2300      	movs	r3, #0
 802397a:	e01d      	b.n	80239b8 <verifyInit+0xa8>
      }
      else
      {
         return CBOOT_ERROR_INVALID_PARAMETERS;
 802397c:	2304      	movs	r3, #4
 802397e:	e01b      	b.n	80239b8 <verifyInit+0xa8>
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
#endif
   }
   //Initialize verification context for authentication method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 8023980:	687b      	ldr	r3, [r7, #4]
 8023982:	781b      	ldrb	r3, [r3, #0]
 8023984:	2b01      	cmp	r3, #1
 8023986:	d101      	bne.n	802398c <verifyInit+0x7c>
   {
#if (VERIFY_AUTHENTICATION_SUPPORT == ENABLED)
      //Initialize authentication algorithm
      return authInit(context);
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023988:	2304      	movs	r3, #4
 802398a:	e015      	b.n	80239b8 <verifyInit+0xa8>
#endif
   }
   //Initialize verification context for signature method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 802398c:	687b      	ldr	r3, [r7, #4]
 802398e:	781b      	ldrb	r3, [r3, #0]
 8023990:	2b02      	cmp	r3, #2
 8023992:	d104      	bne.n	802399e <verifyInit+0x8e>
   {
#if (VERIFY_SIGNATURE_SUPPORT == ENABLED)
      //Initialize signature algorithm
      return signInit(context);
 8023994:	6878      	ldr	r0, [r7, #4]
 8023996:	f000 f953 	bl	8023c40 <signInit>
 802399a:	4603      	mov	r3, r0
 802399c:	e00c      	b.n	80239b8 <verifyInit+0xa8>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Verification mode not supported!\r\n");
 802399e:	f7fd fd0b 	bl	80213b8 <osSuspendAllTasks>
 80239a2:	4b07      	ldr	r3, [pc, #28]	@ (80239c0 <verifyInit+0xb0>)
 80239a4:	681b      	ldr	r3, [r3, #0]
 80239a6:	68db      	ldr	r3, [r3, #12]
 80239a8:	2222      	movs	r2, #34	@ 0x22
 80239aa:	2101      	movs	r1, #1
 80239ac:	4805      	ldr	r0, [pc, #20]	@ (80239c4 <verifyInit+0xb4>)
 80239ae:	f00c fc05 	bl	80301bc <fwrite>
 80239b2:	f7fd fd08 	bl	80213c6 <osResumeAllTasks>
      return CBOOT_ERROR_NOT_IMPLEMENTED;
 80239b6:	2302      	movs	r3, #2
   }
}
 80239b8:	4618      	mov	r0, r3
 80239ba:	3708      	adds	r7, #8
 80239bc:	46bd      	mov	sp, r7
 80239be:	bd80      	pop	{r7, pc}
 80239c0:	2000008c 	.word	0x2000008c
 80239c4:	08031358 	.word	0x08031358

080239c8 <verifyProcess>:
 * @param[in] length Length og the image data block
 * @return Error code
 **/

cboot_error_t verifyProcess(VerifyContext *context, uint8_t *data, size_t length)
{
 80239c8:	b580      	push	{r7, lr}
 80239ca:	b084      	sub	sp, #16
 80239cc:	af00      	add	r7, sp, #0
 80239ce:	60f8      	str	r0, [r7, #12]
 80239d0:	60b9      	str	r1, [r7, #8]
 80239d2:	607a      	str	r2, [r7, #4]
   //Check parameters
   if (context == NULL || (data == NULL || length == 0))
 80239d4:	68fb      	ldr	r3, [r7, #12]
 80239d6:	2b00      	cmp	r3, #0
 80239d8:	d005      	beq.n	80239e6 <verifyProcess+0x1e>
 80239da:	68bb      	ldr	r3, [r7, #8]
 80239dc:	2b00      	cmp	r3, #0
 80239de:	d002      	beq.n	80239e6 <verifyProcess+0x1e>
 80239e0:	687b      	ldr	r3, [r7, #4]
 80239e2:	2b00      	cmp	r3, #0
 80239e4:	d101      	bne.n	80239ea <verifyProcess+0x22>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80239e6:	2304      	movs	r3, #4
 80239e8:	e03c      	b.n	8023a64 <verifyProcess+0x9c>

   //Process image data block integrity hash tag calculation
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 80239ea:	68fb      	ldr	r3, [r7, #12]
 80239ec:	781b      	ldrb	r3, [r3, #0]
 80239ee:	2b00      	cmp	r3, #0
 80239f0:	d10f      	bne.n	8023a12 <verifyProcess+0x4a>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 80239f2:	68fb      	ldr	r3, [r7, #12]
 80239f4:	685b      	ldr	r3, [r3, #4]
 80239f6:	2b00      	cmp	r3, #0
 80239f8:	d009      	beq.n	8023a0e <verifyProcess+0x46>
      {
         //Update integrity hash tag
         context->verifySettings.integrityAlgo->update(context->checkContext, data, length);
 80239fa:	68fb      	ldr	r3, [r7, #12]
 80239fc:	685b      	ldr	r3, [r3, #4]
 80239fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023a00:	68fa      	ldr	r2, [r7, #12]
 8023a02:	f102 0018 	add.w	r0, r2, #24
 8023a06:	687a      	ldr	r2, [r7, #4]
 8023a08:	68b9      	ldr	r1, [r7, #8]
 8023a0a:	4798      	blx	r3
 8023a0c:	e029      	b.n	8023a62 <verifyProcess+0x9a>
      }
      else
      {
         return CBOOT_ERROR_INVALID_PARAMETERS;
 8023a0e:	2304      	movs	r3, #4
 8023a10:	e028      	b.n	8023a64 <verifyProcess+0x9c>
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
#endif
   }
   //Process image data block authentication hash tag calculation
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 8023a12:	68fb      	ldr	r3, [r7, #12]
 8023a14:	781b      	ldrb	r3, [r3, #0]
 8023a16:	2b01      	cmp	r3, #1
 8023a18:	d101      	bne.n	8023a1e <verifyProcess+0x56>
   {
#if (VERIFY_AUTHENTICATION_SUPPORT == ENABLED)
      //Update authentication tag
      return authUpdateTag(context, data, length);
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023a1a:	2304      	movs	r3, #4
 8023a1c:	e022      	b.n	8023a64 <verifyProcess+0x9c>
#endif
   }
   //Process image data block signature hash tag calculation
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 8023a1e:	68fb      	ldr	r3, [r7, #12]
 8023a20:	781b      	ldrb	r3, [r3, #0]
 8023a22:	2b02      	cmp	r3, #2
 8023a24:	d10f      	bne.n	8023a46 <verifyProcess+0x7e>
   {
#if (VERIFY_SIGNATURE_SUPPORT == ENABLED)
      //Is user require signature check?
      if (context->verifySettings.signAlgo != VERIFY_SIGN_NONE)
 8023a26:	68fb      	ldr	r3, [r7, #12]
 8023a28:	7a1b      	ldrb	r3, [r3, #8]
 8023a2a:	2b00      	cmp	r3, #0
 8023a2c:	d009      	beq.n	8023a42 <verifyProcess+0x7a>
      {
         //Update signature hash tag
         context->verifySettings.signHashAlgo->update(context->checkContext, data, length);
 8023a2e:	68fb      	ldr	r3, [r7, #12]
 8023a30:	68db      	ldr	r3, [r3, #12]
 8023a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023a34:	68fa      	ldr	r2, [r7, #12]
 8023a36:	f102 0018 	add.w	r0, r2, #24
 8023a3a:	687a      	ldr	r2, [r7, #4]
 8023a3c:	68b9      	ldr	r1, [r7, #8]
 8023a3e:	4798      	blx	r3
 8023a40:	e00f      	b.n	8023a62 <verifyProcess+0x9a>
      }
      else
      {
         return CBOOT_ERROR_INVALID_PARAMETERS;
 8023a42:	2304      	movs	r3, #4
 8023a44:	e00e      	b.n	8023a64 <verifyProcess+0x9c>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Verification mode not supported!\r\n");
 8023a46:	f7fd fcb7 	bl	80213b8 <osSuspendAllTasks>
 8023a4a:	4b08      	ldr	r3, [pc, #32]	@ (8023a6c <verifyProcess+0xa4>)
 8023a4c:	681b      	ldr	r3, [r3, #0]
 8023a4e:	68db      	ldr	r3, [r3, #12]
 8023a50:	2222      	movs	r2, #34	@ 0x22
 8023a52:	2101      	movs	r1, #1
 8023a54:	4806      	ldr	r0, [pc, #24]	@ (8023a70 <verifyProcess+0xa8>)
 8023a56:	f00c fbb1 	bl	80301bc <fwrite>
 8023a5a:	f7fd fcb4 	bl	80213c6 <osResumeAllTasks>
      return CBOOT_ERROR_NOT_IMPLEMENTED;
 8023a5e:	2302      	movs	r3, #2
 8023a60:	e000      	b.n	8023a64 <verifyProcess+0x9c>
   }

   //Successful process
   return CBOOT_NO_ERROR;
 8023a62:	2300      	movs	r3, #0
}
 8023a64:	4618      	mov	r0, r3
 8023a66:	3710      	adds	r7, #16
 8023a68:	46bd      	mov	sp, r7
 8023a6a:	bd80      	pop	{r7, pc}
 8023a6c:	2000008c 	.word	0x2000008c
 8023a70:	08031358 	.word	0x08031358

08023a74 <verifyConfirm>:
 * @param[in] verifyDataLength Length of the image check data
 * @return Error code
 **/

cboot_error_t verifyConfirm(VerifyContext *context, uint8_t *verifyData, size_t verifyDataLength)
{
 8023a74:	b580      	push	{r7, lr}
 8023a76:	b086      	sub	sp, #24
 8023a78:	af00      	add	r7, sp, #0
 8023a7a:	60f8      	str	r0, [r7, #12]
 8023a7c:	60b9      	str	r1, [r7, #8]
 8023a7e:	607a      	str	r2, [r7, #4]
   cboot_error_t cerror;

   //Initialize error code
   cerror = CBOOT_NO_ERROR;
 8023a80:	2300      	movs	r3, #0
 8023a82:	75fb      	strb	r3, [r7, #23]

   //Check parameters
   if (context == NULL || verifyData == NULL || verifyDataLength == 0)
 8023a84:	68fb      	ldr	r3, [r7, #12]
 8023a86:	2b00      	cmp	r3, #0
 8023a88:	d005      	beq.n	8023a96 <verifyConfirm+0x22>
 8023a8a:	68bb      	ldr	r3, [r7, #8]
 8023a8c:	2b00      	cmp	r3, #0
 8023a8e:	d002      	beq.n	8023a96 <verifyConfirm+0x22>
 8023a90:	687b      	ldr	r3, [r7, #4]
 8023a92:	2b00      	cmp	r3, #0
 8023a94:	d101      	bne.n	8023a9a <verifyConfirm+0x26>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023a96:	2304      	movs	r3, #4
 8023a98:	e06f      	b.n	8023b7a <verifyConfirm+0x106>

   //Check image check data using integrity method
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 8023a9a:	68fb      	ldr	r3, [r7, #12]
 8023a9c:	781b      	ldrb	r3, [r3, #0]
 8023a9e:	2b00      	cmp	r3, #0
 8023aa0:	d12b      	bne.n	8023afa <verifyConfirm+0x86>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 8023aa2:	68fb      	ldr	r3, [r7, #12]
 8023aa4:	685b      	ldr	r3, [r3, #4]
 8023aa6:	2b00      	cmp	r3, #0
 8023aa8:	d025      	beq.n	8023af6 <verifyConfirm+0x82>
      {
         //Finalize interity tag computation
         context->verifySettings.integrityAlgo->final(context->checkContext, context->imageCheckDigest);
 8023aaa:	68fb      	ldr	r3, [r7, #12]
 8023aac:	685b      	ldr	r3, [r3, #4]
 8023aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023ab0:	68fa      	ldr	r2, [r7, #12]
 8023ab2:	f102 0018 	add.w	r0, r2, #24
 8023ab6:	68fa      	ldr	r2, [r7, #12]
 8023ab8:	32ec      	adds	r2, #236	@ 0xec
 8023aba:	4611      	mov	r1, r2
 8023abc:	4798      	blx	r3
         TRACE_DEBUG("Computed integrity tag (%d bytes)\r\n", context->imageCheckDigestSize);
         TRACE_DEBUG_ARRAY("  ", context->imageCheckDigest, context->imageCheckDigestSize);
         TRACE_DEBUG("\r\n");

         //Compare computed integrity digest with the one received in the image
         if (osMemcmp(verifyData, context->imageCheckDigest, context->imageCheckDigestSize) != 0)
 8023abe:	68fb      	ldr	r3, [r7, #12]
 8023ac0:	f103 01ec 	add.w	r1, r3, #236	@ 0xec
 8023ac4:	68fb      	ldr	r3, [r7, #12]
 8023ac6:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8023aca:	461a      	mov	r2, r3
 8023acc:	68b8      	ldr	r0, [r7, #8]
 8023ace:	f00c fc5b 	bl	8030388 <memcmp>
 8023ad2:	4603      	mov	r3, r0
 8023ad4:	2b00      	cmp	r3, #0
 8023ad6:	d04f      	beq.n	8023b78 <verifyConfirm+0x104>
         {
            //Debug message
            TRACE_INFO("Firmware integrity tag is not valid!\r\n");
 8023ad8:	f7fd fc6e 	bl	80213b8 <osSuspendAllTasks>
 8023adc:	4b29      	ldr	r3, [pc, #164]	@ (8023b84 <verifyConfirm+0x110>)
 8023ade:	681b      	ldr	r3, [r3, #0]
 8023ae0:	68db      	ldr	r3, [r3, #12]
 8023ae2:	2226      	movs	r2, #38	@ 0x26
 8023ae4:	2101      	movs	r1, #1
 8023ae6:	4828      	ldr	r0, [pc, #160]	@ (8023b88 <verifyConfirm+0x114>)
 8023ae8:	f00c fb68 	bl	80301bc <fwrite>
 8023aec:	f7fd fc6b 	bl	80213c6 <osResumeAllTasks>
            cerror = CBOOT_ERROR_ABORTED;
 8023af0:	2303      	movs	r3, #3
 8023af2:	75fb      	strb	r3, [r7, #23]
 8023af4:	e040      	b.n	8023b78 <verifyConfirm+0x104>
         }
      }
      else
      {
         return CBOOT_ERROR_INVALID_PARAMETERS;
 8023af6:	2304      	movs	r3, #4
 8023af8:	e03f      	b.n	8023b7a <verifyConfirm+0x106>
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
#endif
   }
   //Check image check data using authentification method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 8023afa:	68fb      	ldr	r3, [r7, #12]
 8023afc:	781b      	ldrb	r3, [r3, #0]
 8023afe:	2b01      	cmp	r3, #1
 8023b00:	d101      	bne.n	8023b06 <verifyConfirm+0x92>
      else
      {
         return CBOOT_ERROR_INVALID_PARAMETERS;
      }
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023b02:	2304      	movs	r3, #4
 8023b04:	e039      	b.n	8023b7a <verifyConfirm+0x106>
#endif
   }
   //Check image check data using signature method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 8023b06:	68fb      	ldr	r3, [r7, #12]
 8023b08:	781b      	ldrb	r3, [r3, #0]
 8023b0a:	2b02      	cmp	r3, #2
 8023b0c:	d126      	bne.n	8023b5c <verifyConfirm+0xe8>
   {
#if (VERIFY_SIGNATURE_SUPPORT == ENABLED)
      //Is user require signature check?
      if (context->verifySettings.signAlgo != VERIFY_SIGN_NONE)
 8023b0e:	68fb      	ldr	r3, [r7, #12]
 8023b10:	7a1b      	ldrb	r3, [r3, #8]
 8023b12:	2b00      	cmp	r3, #0
 8023b14:	d020      	beq.n	8023b58 <verifyConfirm+0xe4>
      {
         //Compute final integrity hash tag needed to check signature
         context->verifySettings.signHashAlgo->final(context->checkContext, context->imageCheckDigest);
 8023b16:	68fb      	ldr	r3, [r7, #12]
 8023b18:	68db      	ldr	r3, [r3, #12]
 8023b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023b1c:	68fa      	ldr	r2, [r7, #12]
 8023b1e:	f102 0018 	add.w	r0, r2, #24
 8023b22:	68fa      	ldr	r2, [r7, #12]
 8023b24:	32ec      	adds	r2, #236	@ 0xec
 8023b26:	4611      	mov	r1, r2
 8023b28:	4798      	blx	r3
         TRACE_DEBUG("Computed signature hash tag (%d bytes)\r\n", context->imageCheckDigestSize);
         TRACE_DEBUG_ARRAY("  ", context->imageCheckDigest, context->imageCheckDigestSize);
         TRACE_DEBUG("\r\n");

         //Verify receive signature
         cerror = signVerify(context, verifyData, verifyDataLength);
 8023b2a:	687a      	ldr	r2, [r7, #4]
 8023b2c:	68b9      	ldr	r1, [r7, #8]
 8023b2e:	68f8      	ldr	r0, [r7, #12]
 8023b30:	f000 f8f2 	bl	8023d18 <signVerify>
 8023b34:	4603      	mov	r3, r0
 8023b36:	75fb      	strb	r3, [r7, #23]
         //Is any error?
         if (cerror)
 8023b38:	7dfb      	ldrb	r3, [r7, #23]
 8023b3a:	2b00      	cmp	r3, #0
 8023b3c:	d01c      	beq.n	8023b78 <verifyConfirm+0x104>
         {
            //Debug message
            TRACE_INFO("Firmware signature is not valid!\r\n");
 8023b3e:	f7fd fc3b 	bl	80213b8 <osSuspendAllTasks>
 8023b42:	4b10      	ldr	r3, [pc, #64]	@ (8023b84 <verifyConfirm+0x110>)
 8023b44:	681b      	ldr	r3, [r3, #0]
 8023b46:	68db      	ldr	r3, [r3, #12]
 8023b48:	2222      	movs	r2, #34	@ 0x22
 8023b4a:	2101      	movs	r1, #1
 8023b4c:	480f      	ldr	r0, [pc, #60]	@ (8023b8c <verifyConfirm+0x118>)
 8023b4e:	f00c fb35 	bl	80301bc <fwrite>
 8023b52:	f7fd fc38 	bl	80213c6 <osResumeAllTasks>
 8023b56:	e00f      	b.n	8023b78 <verifyConfirm+0x104>
         }
      }
      else
      {
         return CBOOT_ERROR_INVALID_PARAMETERS;
 8023b58:	2304      	movs	r3, #4
 8023b5a:	e00e      	b.n	8023b7a <verifyConfirm+0x106>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Verification mode not supported!\r\n");
 8023b5c:	f7fd fc2c 	bl	80213b8 <osSuspendAllTasks>
 8023b60:	4b08      	ldr	r3, [pc, #32]	@ (8023b84 <verifyConfirm+0x110>)
 8023b62:	681b      	ldr	r3, [r3, #0]
 8023b64:	68db      	ldr	r3, [r3, #12]
 8023b66:	2222      	movs	r2, #34	@ 0x22
 8023b68:	2101      	movs	r1, #1
 8023b6a:	4809      	ldr	r0, [pc, #36]	@ (8023b90 <verifyConfirm+0x11c>)
 8023b6c:	f00c fb26 	bl	80301bc <fwrite>
 8023b70:	f7fd fc29 	bl	80213c6 <osResumeAllTasks>
      return CBOOT_ERROR_NOT_IMPLEMENTED;
 8023b74:	2302      	movs	r3, #2
 8023b76:	e000      	b.n	8023b7a <verifyConfirm+0x106>
   }

   //Successful process
   return cerror;
 8023b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8023b7a:	4618      	mov	r0, r3
 8023b7c:	3718      	adds	r7, #24
 8023b7e:	46bd      	mov	sp, r7
 8023b80:	bd80      	pop	{r7, pc}
 8023b82:	bf00      	nop
 8023b84:	2000008c 	.word	0x2000008c
 8023b88:	0803137c 	.word	0x0803137c
 8023b8c:	080313a4 	.word	0x080313a4
 8023b90:	08031358 	.word	0x08031358

08023b94 <verifyGenerateCheckData>:
 * @param[out] checkDataLength Length of the image check data buffer tag
 * @return Error code
 **/

cboot_error_t verifyGenerateCheckData(VerifyContext *context, uint8_t *checkData, size_t checkDataSize, size_t *checkDataLength)
{
 8023b94:	b580      	push	{r7, lr}
 8023b96:	b086      	sub	sp, #24
 8023b98:	af00      	add	r7, sp, #0
 8023b9a:	60f8      	str	r0, [r7, #12]
 8023b9c:	60b9      	str	r1, [r7, #8]
 8023b9e:	607a      	str	r2, [r7, #4]
 8023ba0:	603b      	str	r3, [r7, #0]
   VerifySettings *settings;

   //Check parameters
   if (context == NULL || checkData == NULL || checkDataLength == NULL)
 8023ba2:	68fb      	ldr	r3, [r7, #12]
 8023ba4:	2b00      	cmp	r3, #0
 8023ba6:	d005      	beq.n	8023bb4 <verifyGenerateCheckData+0x20>
 8023ba8:	68bb      	ldr	r3, [r7, #8]
 8023baa:	2b00      	cmp	r3, #0
 8023bac:	d002      	beq.n	8023bb4 <verifyGenerateCheckData+0x20>
 8023bae:	683b      	ldr	r3, [r7, #0]
 8023bb0:	2b00      	cmp	r3, #0
 8023bb2:	d101      	bne.n	8023bb8 <verifyGenerateCheckData+0x24>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023bb4:	2304      	movs	r3, #4
 8023bb6:	e03b      	b.n	8023c30 <verifyGenerateCheckData+0x9c>

   //Point to the verify settings
   settings = (VerifySettings *)&context->verifySettings;
 8023bb8:	68fb      	ldr	r3, [r7, #12]
 8023bba:	617b      	str	r3, [r7, #20]

   //Generate image check integrity tag
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 8023bbc:	68fb      	ldr	r3, [r7, #12]
 8023bbe:	781b      	ldrb	r3, [r3, #0]
 8023bc0:	2b00      	cmp	r3, #0
 8023bc2:	d128      	bne.n	8023c16 <verifyGenerateCheckData+0x82>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 8023bc4:	68fb      	ldr	r3, [r7, #12]
 8023bc6:	685b      	ldr	r3, [r3, #4]
 8023bc8:	2b00      	cmp	r3, #0
 8023bca:	d022      	beq.n	8023c12 <verifyGenerateCheckData+0x7e>
      {
         //Finalize interity tag check computation
         settings->integrityAlgo->final(context->checkContext, context->imageCheckDigest);
 8023bcc:	697b      	ldr	r3, [r7, #20]
 8023bce:	685b      	ldr	r3, [r3, #4]
 8023bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023bd2:	68fa      	ldr	r2, [r7, #12]
 8023bd4:	f102 0018 	add.w	r0, r2, #24
 8023bd8:	68fa      	ldr	r2, [r7, #12]
 8023bda:	32ec      	adds	r2, #236	@ 0xec
 8023bdc:	4611      	mov	r1, r2
 8023bde:	4798      	blx	r3

         if(checkDataSize >= context->imageCheckDigestSize)
 8023be0:	68fb      	ldr	r3, [r7, #12]
 8023be2:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8023be6:	687a      	ldr	r2, [r7, #4]
 8023be8:	429a      	cmp	r2, r3
 8023bea:	d310      	bcc.n	8023c0e <verifyGenerateCheckData+0x7a>
         {
            //Save interity tag check data length
            *checkDataLength = context->imageCheckDigestSize;
 8023bec:	68fb      	ldr	r3, [r7, #12]
 8023bee:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 8023bf2:	683b      	ldr	r3, [r7, #0]
 8023bf4:	601a      	str	r2, [r3, #0]
            //Save interity tag check data
            memcpy(checkData, context->imageCheckDigest, context->imageCheckDigestSize);
 8023bf6:	68fb      	ldr	r3, [r7, #12]
 8023bf8:	f103 01ec 	add.w	r1, r3, #236	@ 0xec
 8023bfc:	68fb      	ldr	r3, [r7, #12]
 8023bfe:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8023c02:	461a      	mov	r2, r3
 8023c04:	68b8      	ldr	r0, [r7, #8]
 8023c06:	f00c fc94 	bl	8030532 <memcpy>
      TRACE_ERROR("Check data generation method missing or unsupported!!!\r\n");
      return CBOOT_ERROR_ABORTED;
   }

   //Successfull process
   return CBOOT_NO_ERROR;
 8023c0a:	2300      	movs	r3, #0
 8023c0c:	e010      	b.n	8023c30 <verifyGenerateCheckData+0x9c>
            return CBOOT_ERROR_BUFFER_OVERFLOW;
 8023c0e:	2317      	movs	r3, #23
 8023c10:	e00e      	b.n	8023c30 <verifyGenerateCheckData+0x9c>
         return CBOOT_ERROR_INVALID_PARAMETERS;
 8023c12:	2304      	movs	r3, #4
 8023c14:	e00c      	b.n	8023c30 <verifyGenerateCheckData+0x9c>
      TRACE_ERROR("Check data generation method missing or unsupported!!!\r\n");
 8023c16:	f7fd fbcf 	bl	80213b8 <osSuspendAllTasks>
 8023c1a:	4b07      	ldr	r3, [pc, #28]	@ (8023c38 <verifyGenerateCheckData+0xa4>)
 8023c1c:	681b      	ldr	r3, [r3, #0]
 8023c1e:	68db      	ldr	r3, [r3, #12]
 8023c20:	2238      	movs	r2, #56	@ 0x38
 8023c22:	2101      	movs	r1, #1
 8023c24:	4805      	ldr	r0, [pc, #20]	@ (8023c3c <verifyGenerateCheckData+0xa8>)
 8023c26:	f00c fac9 	bl	80301bc <fwrite>
 8023c2a:	f7fd fbcc 	bl	80213c6 <osResumeAllTasks>
      return CBOOT_ERROR_ABORTED;
 8023c2e:	2303      	movs	r3, #3
}
 8023c30:	4618      	mov	r0, r3
 8023c32:	3718      	adds	r7, #24
 8023c34:	46bd      	mov	sp, r7
 8023c36:	bd80      	pop	{r7, pc}
 8023c38:	2000008c 	.word	0x2000008c
 8023c3c:	080313c8 	.word	0x080313c8

08023c40 <signInit>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code
 **/

cboot_error_t signInit(VerifyContext *context)
{
 8023c40:	b580      	push	{r7, lr}
 8023c42:	b08a      	sub	sp, #40	@ 0x28
 8023c44:	af00      	add	r7, sp, #0
 8023c46:	6078      	str	r0, [r7, #4]
#if (VERIFY_RSA_SUPPORT == ENABLED)
   RsaPublicKey publicKey;
#endif

   // Check parameter validity
   if (context == NULL)
 8023c48:	687b      	ldr	r3, [r7, #4]
 8023c4a:	2b00      	cmp	r3, #0
 8023c4c:	d101      	bne.n	8023c52 <signInit+0x12>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023c4e:	2304      	movs	r3, #4
 8023c50:	e059      	b.n	8023d06 <signInit+0xc6>

   // Point to the verify settings
   settings = (VerifySettings *)&context->verifySettings;
 8023c52:	687b      	ldr	r3, [r7, #4]
 8023c54:	627b      	str	r3, [r7, #36]	@ 0x24

   // Initialize status code
   error = NO_ERROR;
 8023c56:	2300      	movs	r3, #0
 8023c58:	847b      	strh	r3, [r7, #34]	@ 0x22

   // Check user settings
   if (settings->signAlgo == VERIFY_SIGN_NONE || settings->signHashAlgo == NULL ||
 8023c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023c5c:	7a1b      	ldrb	r3, [r3, #8]
 8023c5e:	2b00      	cmp	r3, #0
 8023c60:	d00b      	beq.n	8023c7a <signInit+0x3a>
 8023c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023c64:	68db      	ldr	r3, [r3, #12]
 8023c66:	2b00      	cmp	r3, #0
 8023c68:	d007      	beq.n	8023c7a <signInit+0x3a>
      settings->signKey == NULL || settings->signKeyLen == 0)
 8023c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023c6c:	691b      	ldr	r3, [r3, #16]
   if (settings->signAlgo == VERIFY_SIGN_NONE || settings->signHashAlgo == NULL ||
 8023c6e:	2b00      	cmp	r3, #0
 8023c70:	d003      	beq.n	8023c7a <signInit+0x3a>
      settings->signKey == NULL || settings->signKeyLen == 0)
 8023c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023c74:	695b      	ldr	r3, [r3, #20]
 8023c76:	2b00      	cmp	r3, #0
 8023c78:	d101      	bne.n	8023c7e <signInit+0x3e>
      return CBOOT_ERROR_INVALID_VALUE;
 8023c7a:	2306      	movs	r3, #6
 8023c7c:	e043      	b.n	8023d06 <signInit+0xc6>

   // Is signature RSA algorithm?
   if (settings->signAlgo == VERIFY_SIGN_RSA)
 8023c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023c80:	7a1b      	ldrb	r3, [r3, #8]
 8023c82:	2b01      	cmp	r3, #1
 8023c84:	d12a      	bne.n	8023cdc <signInit+0x9c>
   {
#if (VERIFY_RSA_SUPPORT == ENABLED)
      // Initialize signature algo context
      settings->signHashAlgo->init(context->checkContext);
 8023c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023c88:	68db      	ldr	r3, [r3, #12]
 8023c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023c8c:	687a      	ldr	r2, [r7, #4]
 8023c8e:	3218      	adds	r2, #24
 8023c90:	4610      	mov	r0, r2
 8023c92:	4798      	blx	r3

      // Set digest length
      context->imageCheckDigestSize = settings->signHashAlgo->digestSize;
 8023c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023c96:	68db      	ldr	r3, [r3, #12]
 8023c98:	695a      	ldr	r2, [r3, #20]
 8023c9a:	687b      	ldr	r3, [r7, #4]
 8023c9c:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

      // Initialize RSA public key
      rsaInitPublicKey(&publicKey);
 8023ca0:	f107 0308 	add.w	r3, r7, #8
 8023ca4:	4618      	mov	r0, r3
 8023ca6:	f003 fdf1 	bl	802788c <rsaInitPublicKey>

      // Decode pem key file into RSA public key
      error = pemImportRsaPublicKey(&publicKey, settings->signKey, settings->signKeyLen);
 8023caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023cac:	6919      	ldr	r1, [r3, #16]
 8023cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023cb0:	695a      	ldr	r2, [r3, #20]
 8023cb2:	f107 0308 	add.w	r3, r7, #8
 8023cb6:	4618      	mov	r0, r3
 8023cb8:	f004 fabc 	bl	8028234 <pemImportRsaPublicKey>
 8023cbc:	4603      	mov	r3, r0
 8023cbe:	847b      	strh	r3, [r7, #34]	@ 0x22

      // Check status code
      if (!error)
 8023cc0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8023cc2:	2b00      	cmp	r3, #0
 8023cc4:	d11e      	bne.n	8023d04 <signInit+0xc4>
      {
         // Set check data (signature) size
         context->checkDataSize = publicKey.n.size * sizeof(publicKey.n.size);
 8023cc6:	68fb      	ldr	r3, [r7, #12]
 8023cc8:	009a      	lsls	r2, r3, #2
 8023cca:	687b      	ldr	r3, [r7, #4]
 8023ccc:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

         // Free RSA public key
         rsaFreePublicKey(&publicKey);
 8023cd0:	f107 0308 	add.w	r3, r7, #8
 8023cd4:	4618      	mov	r0, r3
 8023cd6:	f003 fdea 	bl	80278ae <rsaFreePublicKey>
 8023cda:	e013      	b.n	8023d04 <signInit+0xc4>
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
#endif
   }
   // Is signature ECDSA algorithm?
   else if (settings->signAlgo == VERIFY_SIGN_ECDSA)
 8023cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023cde:	7a1b      	ldrb	r3, [r3, #8]
 8023ce0:	2b02      	cmp	r3, #2
 8023ce2:	d101      	bne.n	8023ce8 <signInit+0xa8>
      {
            // Set check data (signature) size
            context->checkDataSize = 64; //TODO: ECDSA_SIGNATURE_SIZE
      }
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023ce4:	2304      	movs	r3, #4
 8023ce6:	e00e      	b.n	8023d06 <signInit+0xc6>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Signature algorithm not supported!\r\n");
 8023ce8:	f7fd fb66 	bl	80213b8 <osSuspendAllTasks>
 8023cec:	4b08      	ldr	r3, [pc, #32]	@ (8023d10 <signInit+0xd0>)
 8023cee:	681b      	ldr	r3, [r3, #0]
 8023cf0:	68db      	ldr	r3, [r3, #12]
 8023cf2:	2224      	movs	r2, #36	@ 0x24
 8023cf4:	2101      	movs	r1, #1
 8023cf6:	4807      	ldr	r0, [pc, #28]	@ (8023d14 <signInit+0xd4>)
 8023cf8:	f00c fa60 	bl	80301bc <fwrite>
 8023cfc:	f7fd fb63 	bl	80213c6 <osResumeAllTasks>
      return CBOOT_ERROR_NOT_IMPLEMENTED;
 8023d00:	2302      	movs	r3, #2
 8023d02:	e000      	b.n	8023d06 <signInit+0xc6>
   }

   // Return status code
   return CBOOT_NO_ERROR;
 8023d04:	2300      	movs	r3, #0
}
 8023d06:	4618      	mov	r0, r3
 8023d08:	3728      	adds	r7, #40	@ 0x28
 8023d0a:	46bd      	mov	sp, r7
 8023d0c:	bd80      	pop	{r7, pc}
 8023d0e:	bf00      	nop
 8023d10:	2000008c 	.word	0x2000008c
 8023d14:	08031404 	.word	0x08031404

08023d18 <signVerify>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code
 **/

cboot_error_t signVerify(VerifyContext *context, uint8_t *verifyData, size_t verifyDataLength)
{
 8023d18:	b580      	push	{r7, lr}
 8023d1a:	b086      	sub	sp, #24
 8023d1c:	af00      	add	r7, sp, #0
 8023d1e:	60f8      	str	r0, [r7, #12]
 8023d20:	60b9      	str	r1, [r7, #8]
 8023d22:	607a      	str	r2, [r7, #4]
   cboot_error_t cerror;
   VerifySettings *settings;

   // Check parameters validity
   if (context == NULL || verifyData == NULL || verifyDataLength == 0)
 8023d24:	68fb      	ldr	r3, [r7, #12]
 8023d26:	2b00      	cmp	r3, #0
 8023d28:	d005      	beq.n	8023d36 <signVerify+0x1e>
 8023d2a:	68bb      	ldr	r3, [r7, #8]
 8023d2c:	2b00      	cmp	r3, #0
 8023d2e:	d002      	beq.n	8023d36 <signVerify+0x1e>
 8023d30:	687b      	ldr	r3, [r7, #4]
 8023d32:	2b00      	cmp	r3, #0
 8023d34:	d101      	bne.n	8023d3a <signVerify+0x22>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023d36:	2304      	movs	r3, #4
 8023d38:	e02a      	b.n	8023d90 <signVerify+0x78>

   // Point to the verify settings
   settings = (VerifySettings *)&context->verifySettings;
 8023d3a:	68fb      	ldr	r3, [r7, #12]
 8023d3c:	613b      	str	r3, [r7, #16]

   // Initialize status code
   cerror = CBOOT_NO_ERROR;
 8023d3e:	2300      	movs	r3, #0
 8023d40:	75fb      	strb	r3, [r7, #23]

   // Check authentification hash algo
   if (settings->signAlgo == VERIFY_SIGN_NONE)
 8023d42:	693b      	ldr	r3, [r7, #16]
 8023d44:	7a1b      	ldrb	r3, [r3, #8]
 8023d46:	2b00      	cmp	r3, #0
 8023d48:	d101      	bne.n	8023d4e <signVerify+0x36>
      return CBOOT_ERROR_INVALID_VALUE;
 8023d4a:	2306      	movs	r3, #6
 8023d4c:	e020      	b.n	8023d90 <signVerify+0x78>
   // Is user require RSA signature?
   if (settings->signAlgo == VERIFY_SIGN_RSA)
 8023d4e:	693b      	ldr	r3, [r7, #16]
 8023d50:	7a1b      	ldrb	r3, [r3, #8]
 8023d52:	2b01      	cmp	r3, #1
 8023d54:	d107      	bne.n	8023d66 <signVerify+0x4e>
   {
#if (VERIFY_RSA_SUPPORT == ENABLED)
      // Verify RSA signature
      cerror = signVerifyRsa(context, verifyData, verifyDataLength);
 8023d56:	687a      	ldr	r2, [r7, #4]
 8023d58:	68b9      	ldr	r1, [r7, #8]
 8023d5a:	68f8      	ldr	r0, [r7, #12]
 8023d5c:	f000 f820 	bl	8023da0 <signVerifyRsa>
 8023d60:	4603      	mov	r3, r0
 8023d62:	75fb      	strb	r3, [r7, #23]
 8023d64:	e013      	b.n	8023d8e <signVerify+0x76>
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
#endif
   }
   // Is user require ECDSA signature?
   else if(settings->signAlgo == VERIFY_SIGN_ECDSA)
 8023d66:	693b      	ldr	r3, [r7, #16]
 8023d68:	7a1b      	ldrb	r3, [r3, #8]
 8023d6a:	2b02      	cmp	r3, #2
 8023d6c:	d101      	bne.n	8023d72 <signVerify+0x5a>
   {
#if (VERIFY_ECDSA_SUPPORT == ENABLED)
      // Verify ECDSA signature
      cerror = signVerifyEcdsa(context, verifyData, verifyDataLength);
#else
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023d6e:	2304      	movs	r3, #4
 8023d70:	e00e      	b.n	8023d90 <signVerify+0x78>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Signature algorithm not supported!\r\n");
 8023d72:	f7fd fb21 	bl	80213b8 <osSuspendAllTasks>
 8023d76:	4b08      	ldr	r3, [pc, #32]	@ (8023d98 <signVerify+0x80>)
 8023d78:	681b      	ldr	r3, [r3, #0]
 8023d7a:	68db      	ldr	r3, [r3, #12]
 8023d7c:	2224      	movs	r2, #36	@ 0x24
 8023d7e:	2101      	movs	r1, #1
 8023d80:	4806      	ldr	r0, [pc, #24]	@ (8023d9c <signVerify+0x84>)
 8023d82:	f00c fa1b 	bl	80301bc <fwrite>
 8023d86:	f7fd fb1e 	bl	80213c6 <osResumeAllTasks>
      cerror = CBOOT_ERROR_NOT_IMPLEMENTED;
 8023d8a:	2302      	movs	r3, #2
 8023d8c:	75fb      	strb	r3, [r7, #23]
   }

   // Return status code
   return cerror;
 8023d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8023d90:	4618      	mov	r0, r3
 8023d92:	3718      	adds	r7, #24
 8023d94:	46bd      	mov	sp, r7
 8023d96:	bd80      	pop	{r7, pc}
 8023d98:	2000008c 	.word	0x2000008c
 8023d9c:	08031404 	.word	0x08031404

08023da0 <signVerifyRsa>:
 * @return Error code
 **/

#if (VERIFY_RSA_SUPPORT == ENABLED)
cboot_error_t signVerifyRsa(VerifyContext *context, uint8_t *verifyData, size_t verifyDataLength)
{
 8023da0:	b580      	push	{r7, lr}
 8023da2:	b08e      	sub	sp, #56	@ 0x38
 8023da4:	af02      	add	r7, sp, #8
 8023da6:	60f8      	str	r0, [r7, #12]
 8023da8:	60b9      	str	r1, [r7, #8]
 8023daa:	607a      	str	r2, [r7, #4]
   VerifySettings *settings;

   RsaPublicKey publicKey;

   // Check parameter validity
   if (context == NULL || verifyData == NULL || verifyDataLength == 0)
 8023dac:	68fb      	ldr	r3, [r7, #12]
 8023dae:	2b00      	cmp	r3, #0
 8023db0:	d005      	beq.n	8023dbe <signVerifyRsa+0x1e>
 8023db2:	68bb      	ldr	r3, [r7, #8]
 8023db4:	2b00      	cmp	r3, #0
 8023db6:	d002      	beq.n	8023dbe <signVerifyRsa+0x1e>
 8023db8:	687b      	ldr	r3, [r7, #4]
 8023dba:	2b00      	cmp	r3, #0
 8023dbc:	d101      	bne.n	8023dc2 <signVerifyRsa+0x22>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023dbe:	2304      	movs	r3, #4
 8023dc0:	e050      	b.n	8023e64 <signVerifyRsa+0xc4>

   // Point to the verify settings
   settings = (VerifySettings *)&context->verifySettings;
 8023dc2:	68fb      	ldr	r3, [r7, #12]
 8023dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

   // Check signature user settings
   if (settings->signHashAlgo == NULL || settings->signKey == NULL ||
 8023dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023dc8:	68db      	ldr	r3, [r3, #12]
 8023dca:	2b00      	cmp	r3, #0
 8023dcc:	d007      	beq.n	8023dde <signVerifyRsa+0x3e>
 8023dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023dd0:	691b      	ldr	r3, [r3, #16]
 8023dd2:	2b00      	cmp	r3, #0
 8023dd4:	d003      	beq.n	8023dde <signVerifyRsa+0x3e>
      settings->signKeyLen == 0)
 8023dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023dd8:	695b      	ldr	r3, [r3, #20]
   if (settings->signHashAlgo == NULL || settings->signKey == NULL ||
 8023dda:	2b00      	cmp	r3, #0
 8023ddc:	d101      	bne.n	8023de2 <signVerifyRsa+0x42>
      return CBOOT_ERROR_INVALID_VALUE;
 8023dde:	2306      	movs	r3, #6
 8023de0:	e040      	b.n	8023e64 <signVerifyRsa+0xc4>

   // Initialize RSA public key
   rsaInitPublicKey(&publicKey);
 8023de2:	f107 0310 	add.w	r3, r7, #16
 8023de6:	4618      	mov	r0, r3
 8023de8:	f003 fd50 	bl	802788c <rsaInitPublicKey>

   // Import PEM RSA public key
   error = pemImportRsaPublicKey(&publicKey, settings->signKey, settings->signKeyLen);
 8023dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023dee:	6919      	ldr	r1, [r3, #16]
 8023df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023df2:	695a      	ldr	r2, [r3, #20]
 8023df4:	f107 0310 	add.w	r3, r7, #16
 8023df8:	4618      	mov	r0, r3
 8023dfa:	f004 fa1b 	bl	8028234 <pemImportRsaPublicKey>
 8023dfe:	4603      	mov	r3, r0
 8023e00:	857b      	strh	r3, [r7, #42]	@ 0x2a
   // Is any error?
   if (error)
 8023e02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8023e04:	2b00      	cmp	r3, #0
 8023e06:	d00d      	beq.n	8023e24 <signVerifyRsa+0x84>
   {
      // Debug message
      TRACE_ERROR("RSA public key import failed!\r\n");
 8023e08:	f7fd fad6 	bl	80213b8 <osSuspendAllTasks>
 8023e0c:	4b17      	ldr	r3, [pc, #92]	@ (8023e6c <signVerifyRsa+0xcc>)
 8023e0e:	681b      	ldr	r3, [r3, #0]
 8023e10:	68db      	ldr	r3, [r3, #12]
 8023e12:	221f      	movs	r2, #31
 8023e14:	2101      	movs	r1, #1
 8023e16:	4816      	ldr	r0, [pc, #88]	@ (8023e70 <signVerifyRsa+0xd0>)
 8023e18:	f00c f9d0 	bl	80301bc <fwrite>
 8023e1c:	f7fd fad3 	bl	80213c6 <osResumeAllTasks>
      return CBOOT_ERROR_FAILURE;
 8023e20:	2301      	movs	r3, #1
 8023e22:	e01f      	b.n	8023e64 <signVerifyRsa+0xc4>
   }

   error = rsassaPkcs1v15Verify(&publicKey, settings->signHashAlgo,
 8023e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023e26:	68d9      	ldr	r1, [r3, #12]
                              context->imageCheckDigest, verifyData, verifyDataLength);
 8023e28:	68fb      	ldr	r3, [r7, #12]
 8023e2a:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
   error = rsassaPkcs1v15Verify(&publicKey, settings->signHashAlgo,
 8023e2e:	f107 0010 	add.w	r0, r7, #16
 8023e32:	687b      	ldr	r3, [r7, #4]
 8023e34:	9300      	str	r3, [sp, #0]
 8023e36:	68bb      	ldr	r3, [r7, #8]
 8023e38:	f003 fd4a 	bl	80278d0 <rsassaPkcs1v15Verify>
 8023e3c:	4603      	mov	r3, r0
 8023e3e:	857b      	strh	r3, [r7, #42]	@ 0x2a
   // Is any error?
   if (error)
 8023e40:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8023e42:	2b00      	cmp	r3, #0
 8023e44:	d00d      	beq.n	8023e62 <signVerifyRsa+0xc2>
   {
      // Debug message
      TRACE_ERROR("RSA signature verification failed!\r\n");
 8023e46:	f7fd fab7 	bl	80213b8 <osSuspendAllTasks>
 8023e4a:	4b08      	ldr	r3, [pc, #32]	@ (8023e6c <signVerifyRsa+0xcc>)
 8023e4c:	681b      	ldr	r3, [r3, #0]
 8023e4e:	68db      	ldr	r3, [r3, #12]
 8023e50:	2224      	movs	r2, #36	@ 0x24
 8023e52:	2101      	movs	r1, #1
 8023e54:	4807      	ldr	r0, [pc, #28]	@ (8023e74 <signVerifyRsa+0xd4>)
 8023e56:	f00c f9b1 	bl	80301bc <fwrite>
 8023e5a:	f7fd fab4 	bl	80213c6 <osResumeAllTasks>
      return CBOOT_ERROR_FAILURE;
 8023e5e:	2301      	movs	r3, #1
 8023e60:	e000      	b.n	8023e64 <signVerifyRsa+0xc4>
   }

   // Successful process
   return CBOOT_NO_ERROR;
 8023e62:	2300      	movs	r3, #0
}
 8023e64:	4618      	mov	r0, r3
 8023e66:	3730      	adds	r7, #48	@ 0x30
 8023e68:	46bd      	mov	sp, r7
 8023e6a:	bd80      	pop	{r7, pc}
 8023e6c:	2000008c 	.word	0x2000008c
 8023e70:	0803142c 	.word	0x0803142c
 8023e74:	0803144c 	.word	0x0803144c

08023e78 <updateInit>:
 * @param[in,out] context Pointer to the IAP Application context to be initialized
 * @return Status code
 **/

cboot_error_t updateInit(UpdateContext *context, UpdateSettings *settings)
{
 8023e78:	b5b0      	push	{r4, r5, r7, lr}
 8023e7a:	b084      	sub	sp, #16
 8023e7c:	af00      	add	r7, sp, #0
 8023e7e:	6078      	str	r0, [r7, #4]
 8023e80:	6039      	str	r1, [r7, #0]
#if ((UPDATE_SINGLE_BANK_SUPPORT == ENABLED))
   uint16_t newImgIdx;
#endif

   // Check Parameters validity
   if (context == NULL || settings == NULL)
 8023e82:	687b      	ldr	r3, [r7, #4]
 8023e84:	2b00      	cmp	r3, #0
 8023e86:	d002      	beq.n	8023e8e <updateInit+0x16>
 8023e88:	683b      	ldr	r3, [r7, #0]
 8023e8a:	2b00      	cmp	r3, #0
 8023e8c:	d101      	bne.n	8023e92 <updateInit+0x1a>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023e8e:	2304      	movs	r3, #4
 8023e90:	e09b      	b.n	8023fca <updateInit+0x152>

   // Debug message
   TRACE_INFO("Initializing IAP...\r\n");
 8023e92:	f7fd fa91 	bl	80213b8 <osSuspendAllTasks>
 8023e96:	4b4f      	ldr	r3, [pc, #316]	@ (8023fd4 <updateInit+0x15c>)
 8023e98:	681b      	ldr	r3, [r3, #0]
 8023e9a:	68db      	ldr	r3, [r3, #12]
 8023e9c:	2215      	movs	r2, #21
 8023e9e:	2101      	movs	r1, #1
 8023ea0:	484d      	ldr	r0, [pc, #308]	@ (8023fd8 <updateInit+0x160>)
 8023ea2:	f00c f98b 	bl	80301bc <fwrite>
 8023ea6:	f7fd fa8e 	bl	80213c6 <osResumeAllTasks>

   // Clear the Update context
   memset(context, 0, sizeof(UpdateContext));
 8023eaa:	f640 5214 	movw	r2, #3348	@ 0xd14
 8023eae:	2100      	movs	r1, #0
 8023eb0:	6878      	ldr	r0, [r7, #4]
 8023eb2:	f00c fa79 	bl	80303a8 <memset>

   // Save user settings
   context->settings = *settings;
 8023eb6:	687a      	ldr	r2, [r7, #4]
 8023eb8:	683b      	ldr	r3, [r7, #0]
 8023eba:	4610      	mov	r0, r2
 8023ebc:	4619      	mov	r1, r3
 8023ebe:	23b8      	movs	r3, #184	@ 0xb8
 8023ec0:	461a      	mov	r2, r3
 8023ec2:	f00c fb36 	bl	8030532 <memcpy>

   // Initialize memories
   cerror = memoryInit(context->settings.memories, NB_MEMORIES);
 8023ec6:	687b      	ldr	r3, [r7, #4]
 8023ec8:	3350      	adds	r3, #80	@ 0x50
 8023eca:	2102      	movs	r1, #2
 8023ecc:	4618      	mov	r0, r3
 8023ece:	f7ff f968 	bl	80231a2 <memoryInit>
 8023ed2:	4603      	mov	r3, r0
 8023ed4:	73fb      	strb	r3, [r7, #15]
   // Is any error?
   if (cerror)
 8023ed6:	7bfb      	ldrb	r3, [r7, #15]
 8023ed8:	2b00      	cmp	r3, #0
 8023eda:	d00d      	beq.n	8023ef8 <updateInit+0x80>
   {
      // Debug message
      TRACE_ERROR("Memory initialization failed!\r\n");
 8023edc:	f7fd fa6c 	bl	80213b8 <osSuspendAllTasks>
 8023ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8023fd4 <updateInit+0x15c>)
 8023ee2:	681b      	ldr	r3, [r3, #0]
 8023ee4:	68db      	ldr	r3, [r3, #12]
 8023ee6:	221f      	movs	r2, #31
 8023ee8:	2101      	movs	r1, #1
 8023eea:	483c      	ldr	r0, [pc, #240]	@ (8023fdc <updateInit+0x164>)
 8023eec:	f00c f966 	bl	80301bc <fwrite>
 8023ef0:	f7fd fa69 	bl	80213c6 <osResumeAllTasks>
      return cerror;
 8023ef4:	7bfb      	ldrb	r3, [r7, #15]
 8023ef6:	e068      	b.n	8023fca <updateInit+0x152>
   }

   context->memories[0] = settings->memories[0];
 8023ef8:	687a      	ldr	r2, [r7, #4]
 8023efa:	683b      	ldr	r3, [r7, #0]
 8023efc:	f102 04b8 	add.w	r4, r2, #184	@ 0xb8
 8023f00:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 8023f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023f10:	682b      	ldr	r3, [r5, #0]
 8023f12:	6023      	str	r3, [r4, #0]
#if (UPDATE_SINGLE_BANK_SUPPORT == ENABLED && EXTERNAL_MEMORY_SUPPORT == ENABLED)
   context->memories[1] = settings->memories[1];
 8023f14:	687a      	ldr	r2, [r7, #4]
 8023f16:	683b      	ldr	r3, [r7, #0]
 8023f18:	f102 04ec 	add.w	r4, r2, #236	@ 0xec
 8023f1c:	f103 0584 	add.w	r5, r3, #132	@ 0x84
 8023f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023f2c:	682b      	ldr	r3, [r5, #0]
 8023f2e:	6023      	str	r3, [r4, #0]
#endif

   // Link memories to the image process context
   // context->imageProcessCtx.memories = context->memories;
   context->imageProcessCtx.memories = context->settings.memories;
 8023f30:	687b      	ldr	r3, [r7, #4]
 8023f32:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8023f36:	687b      	ldr	r3, [r7, #4]
 8023f38:	f8c3 2d10 	str.w	r2, [r3, #3344]	@ 0xd10
   context->imageProcessCtx.imgAntiRollbackCallback = updateAcceptUpdateImageCallback;
   // Set current application version
   context->imageProcessCtx.currentAppVersion = settings->appVersion;
#else
   // Clear anti-rollback callback
   context->imageProcessCtx.imgAntiRollbackCallback = NULL;
 8023f3c:	687b      	ldr	r3, [r7, #4]
 8023f3e:	2200      	movs	r2, #0
 8023f40:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
#endif

   // Initialize image input context (will process receive update image)
   cerror = updateInitInputImage(&context->settings, context);
 8023f44:	687b      	ldr	r3, [r7, #4]
 8023f46:	6879      	ldr	r1, [r7, #4]
 8023f48:	4618      	mov	r0, r3
 8023f4a:	f000 fa05 	bl	8024358 <updateInitInputImage>
 8023f4e:	4603      	mov	r3, r0
 8023f50:	73fb      	strb	r3, [r7, #15]
   // Is any error?
   if (cerror)
 8023f52:	7bfb      	ldrb	r3, [r7, #15]
 8023f54:	2b00      	cmp	r3, #0
 8023f56:	d001      	beq.n	8023f5c <updateInit+0xe4>
      return cerror;
 8023f58:	7bfb      	ldrb	r3, [r7, #15]
 8023f5a:	e036      	b.n	8023fca <updateInit+0x152>

   // Initialize image output context (will process the output binary or image)
   cerror = updateInitOutputImage(&context->settings, context);
 8023f5c:	687b      	ldr	r3, [r7, #4]
 8023f5e:	6879      	ldr	r1, [r7, #4]
 8023f60:	4618      	mov	r0, r3
 8023f62:	f000 fab9 	bl	80244d8 <updateInitOutputImage>
 8023f66:	4603      	mov	r3, r0
 8023f68:	73fb      	strb	r3, [r7, #15]
   // Is any error?
   if (cerror)
 8023f6a:	7bfb      	ldrb	r3, [r7, #15]
 8023f6c:	2b00      	cmp	r3, #0
 8023f6e:	d001      	beq.n	8023f74 <updateInit+0xfc>
      return cerror;
 8023f70:	7bfb      	ldrb	r3, [r7, #15]
 8023f72:	e02a      	b.n	8023fca <updateInit+0x152>

#if (UPDATE_SINGLE_BANK_SUPPORT == ENABLED)
   // Set index of output image
   cerror = updateCalculateOutputImageIdx(context, &newImgIdx);
 8023f74:	f107 030c 	add.w	r3, r7, #12
 8023f78:	4619      	mov	r1, r3
 8023f7a:	6878      	ldr	r0, [r7, #4]
 8023f7c:	f000 f998 	bl	80242b0 <updateCalculateOutputImageIdx>
 8023f80:	4603      	mov	r3, r0
 8023f82:	73fb      	strb	r3, [r7, #15]
   // Is any error?
   if (cerror)
 8023f84:	7bfb      	ldrb	r3, [r7, #15]
 8023f86:	2b00      	cmp	r3, #0
 8023f88:	d001      	beq.n	8023f8e <updateInit+0x116>
      return CBOOT_ERROR_FAILURE;
 8023f8a:	2301      	movs	r3, #1
 8023f8c:	e01d      	b.n	8023fca <updateInit+0x152>

   // context->imageOutput.imgIdx = newImgIdx;
   context->imageProcessCtx.outputImage.newImageIdx = newImgIdx;
 8023f8e:	89ba      	ldrh	r2, [r7, #12]
 8023f90:	687b      	ldr	r3, [r7, #4]
 8023f92:	f8a3 27a0 	strh.w	r2, [r3, #1952]	@ 0x7a0
#endif

   // Get slot to store output update image
   cerror = updateGetUpdateSlot(context, &context->imageProcessCtx.outputImage.activeSlot);
 8023f96:	687b      	ldr	r3, [r7, #4]
 8023f98:	f203 739c 	addw	r3, r3, #1948	@ 0x79c
 8023f9c:	4619      	mov	r1, r3
 8023f9e:	6878      	ldr	r0, [r7, #4]
 8023fa0:	f000 f9c4 	bl	802432c <updateGetUpdateSlot>
 8023fa4:	4603      	mov	r3, r0
 8023fa6:	73fb      	strb	r3, [r7, #15]
   // Is any error?
   if (cerror)
 8023fa8:	7bfb      	ldrb	r3, [r7, #15]
 8023faa:	2b00      	cmp	r3, #0
 8023fac:	d001      	beq.n	8023fb2 <updateInit+0x13a>
      return CBOOT_ERROR_FAILURE;
 8023fae:	2301      	movs	r3, #1
 8023fb0:	e00b      	b.n	8023fca <updateInit+0x152>

#if (UPDATE_SINGLE_BANK_SUPPORT == ENABLED)
   // Make sure the output slot type isn't binary
   context->imageProcessCtx.outputImage.activeSlot->cType &= ~SLOT_CONTENT_BINARY;
 8023fb2:	687b      	ldr	r3, [r7, #4]
 8023fb4:	f8d3 379c 	ldr.w	r3, [r3, #1948]	@ 0x79c
 8023fb8:	785a      	ldrb	r2, [r3, #1]
 8023fba:	687b      	ldr	r3, [r7, #4]
 8023fbc:	f8d3 379c 	ldr.w	r3, [r3, #1948]	@ 0x79c
 8023fc0:	f022 0208 	bic.w	r2, r2, #8
 8023fc4:	b2d2      	uxtb	r2, r2
 8023fc6:	705a      	strb	r2, [r3, #1]
   // Make sure to specify output slot type as binary
   context->imageProcessCtx.outputImage.activeSlot->cType |= SLOT_CONTENT_BINARY;
#endif

   // Successful process
   return CBOOT_NO_ERROR;
 8023fc8:	2300      	movs	r3, #0
}
 8023fca:	4618      	mov	r0, r3
 8023fcc:	3710      	adds	r7, #16
 8023fce:	46bd      	mov	sp, r7
 8023fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8023fd2:	bf00      	nop
 8023fd4:	2000008c 	.word	0x2000008c
 8023fd8:	0803147c 	.word	0x0803147c
 8023fdc:	08031494 	.word	0x08031494

08023fe0 <updateProcess>:
 * @param[in] length Length of the firmware chunck of data to be written
 * @return Status code
 **/

cboot_error_t updateProcess(UpdateContext *context, const void *data, size_t length)
{
 8023fe0:	b580      	push	{r7, lr}
 8023fe2:	b088      	sub	sp, #32
 8023fe4:	af00      	add	r7, sp, #0
 8023fe6:	60f8      	str	r0, [r7, #12]
 8023fe8:	60b9      	str	r1, [r7, #8]
 8023fea:	607a      	str	r2, [r7, #4]
   uint_t n;
   uint8_t *pData;
   Image *inputImage;

   // Check parameters validity
   if (context == NULL || data == NULL || length == 0)
 8023fec:	68fb      	ldr	r3, [r7, #12]
 8023fee:	2b00      	cmp	r3, #0
 8023ff0:	d005      	beq.n	8023ffe <updateProcess+0x1e>
 8023ff2:	68bb      	ldr	r3, [r7, #8]
 8023ff4:	2b00      	cmp	r3, #0
 8023ff6:	d002      	beq.n	8023ffe <updateProcess+0x1e>
 8023ff8:	687b      	ldr	r3, [r7, #4]
 8023ffa:	2b00      	cmp	r3, #0
 8023ffc:	d101      	bne.n	8024002 <updateProcess+0x22>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8023ffe:	2304      	movs	r3, #4
 8024000:	e063      	b.n	80240ca <updateProcess+0xea>

   // Initialize variables
   n = 0;
 8024002:	2300      	movs	r3, #0
 8024004:	61bb      	str	r3, [r7, #24]

   // Point to input image handler
   inputImage = &context->imageProcessCtx.inputImage;
 8024006:	68fb      	ldr	r3, [r7, #12]
 8024008:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 802400c:	617b      	str	r3, [r7, #20]

   // Point to the beginning of the data
   pData = (uint8_t *)data;
 802400e:	68bb      	ldr	r3, [r7, #8]
 8024010:	61fb      	str	r3, [r7, #28]

   // Process the incoming data
   while (length > 0)
 8024012:	e056      	b.n	80240c2 <updateProcess+0xe2>
   {
      // Still room in buffer?
      if (inputImage->bufferLen < sizeof(inputImage->buffer))
 8024014:	697b      	ldr	r3, [r7, #20]
 8024016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802401a:	2b7f      	cmp	r3, #127	@ 0x7f
 802401c:	d843      	bhi.n	80240a6 <updateProcess+0xc6>
      {
         // Fill buffer with input data
         n = MIN(length, sizeof(inputImage->buffer) - inputImage->bufferLen);
 802401e:	697b      	ldr	r3, [r7, #20]
 8024020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8024024:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8024028:	687a      	ldr	r2, [r7, #4]
 802402a:	4293      	cmp	r3, r2
 802402c:	bf28      	it	cs
 802402e:	4613      	movcs	r3, r2
 8024030:	61bb      	str	r3, [r7, #24]
         memcpy(inputImage->bufferPos, pData, n);
 8024032:	697b      	ldr	r3, [r7, #20]
 8024034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024038:	69ba      	ldr	r2, [r7, #24]
 802403a:	69f9      	ldr	r1, [r7, #28]
 802403c:	4618      	mov	r0, r3
 802403e:	f00c fa78 	bl	8030532 <memcpy>

         // Update buffer position and length
         inputImage->bufferPos += n;
 8024042:	697b      	ldr	r3, [r7, #20]
 8024044:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8024048:	69bb      	ldr	r3, [r7, #24]
 802404a:	441a      	add	r2, r3
 802404c:	697b      	ldr	r3, [r7, #20]
 802404e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
         inputImage->bufferLen += n;
 8024052:	697b      	ldr	r3, [r7, #20]
 8024054:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8024058:	69bb      	ldr	r3, [r7, #24]
 802405a:	441a      	add	r2, r3
 802405c:	697b      	ldr	r3, [r7, #20]
 802405e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

         // Update input data position and length
         pData += n;
 8024062:	69fa      	ldr	r2, [r7, #28]
 8024064:	69bb      	ldr	r3, [r7, #24]
 8024066:	4413      	add	r3, r2
 8024068:	61fb      	str	r3, [r7, #28]
         length -= n;
 802406a:	687a      	ldr	r2, [r7, #4]
 802406c:	69bb      	ldr	r3, [r7, #24]
 802406e:	1ad3      	subs	r3, r2, r3
 8024070:	607b      	str	r3, [r7, #4]

         // Process received image input data
         cerror = imageProcessInputImage(&context->imageProcessCtx);
 8024072:	68fb      	ldr	r3, [r7, #12]
 8024074:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8024078:	4618      	mov	r0, r3
 802407a:	f7fe fad5 	bl	8022628 <imageProcessInputImage>
 802407e:	4603      	mov	r3, r0
 8024080:	74fb      	strb	r3, [r7, #19]
         // Is any error?
         if (cerror)
 8024082:	7cfb      	ldrb	r3, [r7, #19]
 8024084:	2b00      	cmp	r3, #0
 8024086:	d01c      	beq.n	80240c2 <updateProcess+0xe2>
#if (UPDATE_SINGLE_BANK_SUPPORT == ENABLED)
            // Erase output image slot first bytes to make sure bootloader doesn't
            // consider it as a new valid update image if a reboot occurs
            // context->secondaryMem.driver->erase(
            //    context->imageOutput.slotInfo->addr, sizeof(ImageHeader));
            cerror = memoryEraseSlot(context->imageProcessCtx.outputImage.activeSlot,
 8024088:	68fb      	ldr	r3, [r7, #12]
 802408a:	f8d3 379c 	ldr.w	r3, [r3, #1948]	@ 0x79c
 802408e:	2240      	movs	r2, #64	@ 0x40
 8024090:	2100      	movs	r1, #0
 8024092:	4618      	mov	r0, r3
 8024094:	f7ff fa0b 	bl	80234ae <memoryEraseSlot>
 8024098:	4603      	mov	r3, r0
 802409a:	74fb      	strb	r3, [r7, #19]
                                     0, sizeof(ImageHeader));
#endif
            // Is any error?
            if (cerror)
 802409c:	7cfb      	ldrb	r3, [r7, #19]
 802409e:	2b00      	cmp	r3, #0
 80240a0:	d00f      	beq.n	80240c2 <updateProcess+0xe2>
            {
               return cerror;
 80240a2:	7cfb      	ldrb	r3, [r7, #19]
 80240a4:	e011      	b.n	80240ca <updateProcess+0xea>
         }
      }
      else
      {
         // Debug message
         TRACE_ERROR("Buffer would overflow!\r\n");
 80240a6:	f7fd f987 	bl	80213b8 <osSuspendAllTasks>
 80240aa:	4b0a      	ldr	r3, [pc, #40]	@ (80240d4 <updateProcess+0xf4>)
 80240ac:	681b      	ldr	r3, [r3, #0]
 80240ae:	68db      	ldr	r3, [r3, #12]
 80240b0:	2218      	movs	r2, #24
 80240b2:	2101      	movs	r1, #1
 80240b4:	4808      	ldr	r0, [pc, #32]	@ (80240d8 <updateProcess+0xf8>)
 80240b6:	f00c f881 	bl	80301bc <fwrite>
 80240ba:	f7fd f984 	bl	80213c6 <osResumeAllTasks>
         return CBOOT_ERROR_BUFFER_OVERFLOW;
 80240be:	2317      	movs	r3, #23
 80240c0:	e003      	b.n	80240ca <updateProcess+0xea>
   while (length > 0)
 80240c2:	687b      	ldr	r3, [r7, #4]
 80240c4:	2b00      	cmp	r3, #0
 80240c6:	d1a5      	bne.n	8024014 <updateProcess+0x34>
      }
   }

   // Successful process
   return CBOOT_NO_ERROR;
 80240c8:	2300      	movs	r3, #0
}
 80240ca:	4618      	mov	r0, r3
 80240cc:	3720      	adds	r7, #32
 80240ce:	46bd      	mov	sp, r7
 80240d0:	bd80      	pop	{r7, pc}
 80240d2:	bf00      	nop
 80240d4:	2000008c 	.word	0x2000008c
 80240d8:	080314b4 	.word	0x080314b4

080240dc <updateFinalize>:
 * @param[in,out] context Pointer to the IAP application context
 * @return Error code
 **/

cboot_error_t updateFinalize(UpdateContext *context)
{
 80240dc:	b580      	push	{r7, lr}
 80240de:	b086      	sub	sp, #24
 80240e0:	af00      	add	r7, sp, #0
 80240e2:	6078      	str	r0, [r7, #4]
#if ((CIPHER_SUPPORT == ENABLED) && (IMAGE_INPUT_ENCRYPTED == ENABLED))
   bool_t magicNumberIsValid;
#endif

   // Check parameters validity
   if (context == NULL)
 80240e4:	687b      	ldr	r3, [r7, #4]
 80240e6:	2b00      	cmp	r3, #0
 80240e8:	d101      	bne.n	80240ee <updateFinalize+0x12>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80240ea:	2304      	movs	r3, #4
 80240ec:	e095      	b.n	802421a <updateFinalize+0x13e>

   // Debug message
   TRACE_INFO("Finalizing firmware update...\r\n");
 80240ee:	f7fd f963 	bl	80213b8 <osSuspendAllTasks>
 80240f2:	4b4c      	ldr	r3, [pc, #304]	@ (8024224 <updateFinalize+0x148>)
 80240f4:	681b      	ldr	r3, [r3, #0]
 80240f6:	68db      	ldr	r3, [r3, #12]
 80240f8:	221f      	movs	r2, #31
 80240fa:	2101      	movs	r1, #1
 80240fc:	484a      	ldr	r0, [pc, #296]	@ (8024228 <updateFinalize+0x14c>)
 80240fe:	f00c f85d 	bl	80301bc <fwrite>
 8024102:	f7fd f960 	bl	80213c6 <osResumeAllTasks>

   // Point to the image input context
   imageIn = (Image *)&context->imageProcessCtx.inputImage;
 8024106:	687b      	ldr	r3, [r7, #4]
 8024108:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 802410c:	617b      	str	r3, [r7, #20]
#if (UPDATE_SINGLE_BANK_SUPPORT == ENABLED)
   // Point to the image output context
   imageOut = (Image *)&context->imageProcessCtx.outputImage;
 802410e:	687b      	ldr	r3, [r7, #4]
 8024110:	f203 7314 	addw	r3, r3, #1812	@ 0x714
 8024114:	613b      	str	r3, [r7, #16]
#endif

   // Ready to verify firmware image validity?
   if (imageIn->state == IMAGE_STATE_VALIDATE_APP)
 8024116:	697b      	ldr	r3, [r7, #20]
 8024118:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 802411c:	2b04      	cmp	r3, #4
 802411e:	d167      	bne.n	80241f0 <updateFinalize+0x114>
   {
      // Verify firmware image validity (could integrity tag or
      // authentification tag or signature)
      cerror = verifyConfirm(&imageIn->verifyContext, imageIn->checkData, imageIn->checkDataLen);
 8024120:	697b      	ldr	r3, [r7, #20]
 8024122:	f503 702e 	add.w	r0, r3, #696	@ 0x2b8
 8024126:	697b      	ldr	r3, [r7, #20]
 8024128:	f503 717a 	add.w	r1, r3, #1000	@ 0x3e8
 802412c:	697b      	ldr	r3, [r7, #20]
 802412e:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	@ 0x5ec
 8024132:	461a      	mov	r2, r3
 8024134:	f7ff fc9e 	bl	8023a74 <verifyConfirm>
 8024138:	4603      	mov	r3, r0
 802413a:	73fb      	strb	r3, [r7, #15]
      // Is any error?
      if (cerror)
 802413c:	7bfb      	ldrb	r3, [r7, #15]
 802413e:	2b00      	cmp	r3, #0
 8024140:	d019      	beq.n	8024176 <updateFinalize+0x9a>
      {
         // Debug message
         TRACE_ERROR("Firmware image is invalid!\r\n");
 8024142:	f7fd f939 	bl	80213b8 <osSuspendAllTasks>
 8024146:	4b37      	ldr	r3, [pc, #220]	@ (8024224 <updateFinalize+0x148>)
 8024148:	681b      	ldr	r3, [r3, #0]
 802414a:	68db      	ldr	r3, [r3, #12]
 802414c:	221c      	movs	r2, #28
 802414e:	2101      	movs	r1, #1
 8024150:	4836      	ldr	r0, [pc, #216]	@ (802422c <updateFinalize+0x150>)
 8024152:	f00c f833 	bl	80301bc <fwrite>
 8024156:	f7fd f936 	bl	80213c6 <osResumeAllTasks>

#if (UPDATE_SINGLE_BANK_SUPPORT == ENABLED)
         // Erase output image slot first bytes to make sure bootloader doesn't
         // consider it as a new valid update image if a reboot occurs
         memoryEraseSlot(imageOut->activeSlot, 0, sizeof(ImageHeader));
 802415a:	693b      	ldr	r3, [r7, #16]
 802415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024160:	2240      	movs	r2, #64	@ 0x40
 8024162:	2100      	movs	r1, #0
 8024164:	4618      	mov	r0, r3
 8024166:	f7ff f9a2 	bl	80234ae <memoryEraseSlot>
#endif

         // Return to IAP idle state
         imageIn->state = IMAGE_STATE_IDLE;
 802416a:	697b      	ldr	r3, [r7, #20]
 802416c:	2200      	movs	r2, #0
 802416e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
         // Return error code
         return CBOOT_ERROR_INVALID_IMAGE_APP;
 8024172:	2311      	movs	r3, #17
 8024174:	e051      	b.n	802421a <updateFinalize+0x13e>
#if ((CIPHER_SUPPORT == ENABLED) && (IMAGE_INPUT_ENCRYPTED == ENABLED))
         //Check given magic number crc
         //- If it is valid it means that the cipher key provided by the user for decryption is the same as the one used to encrypt update image
         //- Else it means that the cipher key provided by the user doesn't match the one used to encrypt the update image and
         //  that the decrypted image data will be wrong. In that case the update MUST be invalidate.
         cerror = cipherCheckMagicNumberCrc(imageIn->magicNumberCrc, &magicNumberIsValid);
 8024176:	697b      	ldr	r3, [r7, #20]
 8024178:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 802417c:	f107 0208 	add.w	r2, r7, #8
 8024180:	4611      	mov	r1, r2
 8024182:	4618      	mov	r0, r3
 8024184:	f7ff fb96 	bl	80238b4 <cipherCheckMagicNumberCrc>
 8024188:	4603      	mov	r3, r0
 802418a:	73fb      	strb	r3, [r7, #15]
         if(cerror || !magicNumberIsValid)
 802418c:	7bfb      	ldrb	r3, [r7, #15]
 802418e:	2b00      	cmp	r3, #0
 8024190:	d102      	bne.n	8024198 <updateFinalize+0xbc>
 8024192:	68bb      	ldr	r3, [r7, #8]
 8024194:	2b00      	cmp	r3, #0
 8024196:	d119      	bne.n	80241cc <updateFinalize+0xf0>
         {
            // Debug message
            TRACE_ERROR("Firmware image is valid but cipher key used is invalid!\r\n");
 8024198:	f7fd f90e 	bl	80213b8 <osSuspendAllTasks>
 802419c:	4b21      	ldr	r3, [pc, #132]	@ (8024224 <updateFinalize+0x148>)
 802419e:	681b      	ldr	r3, [r3, #0]
 80241a0:	68db      	ldr	r3, [r3, #12]
 80241a2:	2239      	movs	r2, #57	@ 0x39
 80241a4:	2101      	movs	r1, #1
 80241a6:	4822      	ldr	r0, [pc, #136]	@ (8024230 <updateFinalize+0x154>)
 80241a8:	f00c f808 	bl	80301bc <fwrite>
 80241ac:	f7fd f90b 	bl	80213c6 <osResumeAllTasks>

#if (UPDATE_SINGLE_BANK_SUPPORT == ENABLED)
            // Erase output image slot first bytes to make sure bootloader doesn't
            // consider it as a new valid update image if a reboot occurs
            memoryEraseSlot(imageOut->activeSlot, 0, sizeof(ImageHeader));
 80241b0:	693b      	ldr	r3, [r7, #16]
 80241b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80241b6:	2240      	movs	r2, #64	@ 0x40
 80241b8:	2100      	movs	r1, #0
 80241ba:	4618      	mov	r0, r3
 80241bc:	f7ff f977 	bl	80234ae <memoryEraseSlot>
#endif

            // Return to IAP idle state
            imageIn->state = IMAGE_STATE_IDLE;
 80241c0:	697b      	ldr	r3, [r7, #20]
 80241c2:	2200      	movs	r2, #0
 80241c4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
            // Return error code
            return CBOOT_ERROR_INVALID_IMAGE_APP;
 80241c8:	2311      	movs	r3, #17
 80241ca:	e026      	b.n	802421a <updateFinalize+0x13e>
         }
         else
#endif
         {
            // Debug message
            TRACE_INFO("Firmware image is valid\r\n");
 80241cc:	f7fd f8f4 	bl	80213b8 <osSuspendAllTasks>
 80241d0:	4b14      	ldr	r3, [pc, #80]	@ (8024224 <updateFinalize+0x148>)
 80241d2:	681b      	ldr	r3, [r3, #0]
 80241d4:	68db      	ldr	r3, [r3, #12]
 80241d6:	2219      	movs	r2, #25
 80241d8:	2101      	movs	r1, #1
 80241da:	4816      	ldr	r0, [pc, #88]	@ (8024234 <updateFinalize+0x158>)
 80241dc:	f00b ffee 	bl	80301bc <fwrite>
 80241e0:	f7fd f8f1 	bl	80213c6 <osResumeAllTasks>
         if (cerror)
            return cerror;
      }
#endif
      // Change IAP state
      imageIn->state = IMAGE_STATE_APP_REBOOT;
 80241e4:	697b      	ldr	r3, [r7, #20]
 80241e6:	2205      	movs	r2, #5
 80241e8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      // Return error code
      return CBOOT_ERROR_IMAGE_NOT_READY;
   }

   // Successful process
   return CBOOT_NO_ERROR;
 80241ec:	2300      	movs	r3, #0
 80241ee:	e014      	b.n	802421a <updateFinalize+0x13e>
      TRACE_ERROR("Firmware image is not ready for verification!\r\n");
 80241f0:	f7fd f8e2 	bl	80213b8 <osSuspendAllTasks>
 80241f4:	4b0b      	ldr	r3, [pc, #44]	@ (8024224 <updateFinalize+0x148>)
 80241f6:	681b      	ldr	r3, [r3, #0]
 80241f8:	68db      	ldr	r3, [r3, #12]
 80241fa:	222f      	movs	r2, #47	@ 0x2f
 80241fc:	2101      	movs	r1, #1
 80241fe:	480e      	ldr	r0, [pc, #56]	@ (8024238 <updateFinalize+0x15c>)
 8024200:	f00b ffdc 	bl	80301bc <fwrite>
 8024204:	f7fd f8df 	bl	80213c6 <osResumeAllTasks>
      memoryEraseSlot(imageOut->activeSlot, 0, sizeof(ImageHeader));
 8024208:	693b      	ldr	r3, [r7, #16]
 802420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802420e:	2240      	movs	r2, #64	@ 0x40
 8024210:	2100      	movs	r1, #0
 8024212:	4618      	mov	r0, r3
 8024214:	f7ff f94b 	bl	80234ae <memoryEraseSlot>
      return CBOOT_ERROR_IMAGE_NOT_READY;
 8024218:	2313      	movs	r3, #19
}
 802421a:	4618      	mov	r0, r3
 802421c:	3718      	adds	r7, #24
 802421e:	46bd      	mov	sp, r7
 8024220:	bd80      	pop	{r7, pc}
 8024222:	bf00      	nop
 8024224:	2000008c 	.word	0x2000008c
 8024228:	080314d0 	.word	0x080314d0
 802422c:	080314f0 	.word	0x080314f0
 8024230:	08031510 	.word	0x08031510
 8024234:	0803154c 	.word	0x0803154c
 8024238:	08031568 	.word	0x08031568

0802423c <updateReboot>:
 * @param[in] context Pointer to the IAP context
 * @return Error code.
 **/

cboot_error_t updateReboot(UpdateContext *context)
{
 802423c:	b580      	push	{r7, lr}
 802423e:	b08c      	sub	sp, #48	@ 0x30
 8024240:	af00      	add	r7, sp, #0
 8024242:	6078      	str	r0, [r7, #4]
   cboot_error_t cerror;
   MemoryInfo memInfo;
   Memory *primaryMemory;

   // Debug message
   TRACE_INFO("Rebooting device to finalize update...\r\n");
 8024244:	f7fd f8b8 	bl	80213b8 <osSuspendAllTasks>
 8024248:	4b17      	ldr	r3, [pc, #92]	@ (80242a8 <updateReboot+0x6c>)
 802424a:	681b      	ldr	r3, [r3, #0]
 802424c:	68db      	ldr	r3, [r3, #12]
 802424e:	2228      	movs	r2, #40	@ 0x28
 8024250:	2101      	movs	r1, #1
 8024252:	4816      	ldr	r0, [pc, #88]	@ (80242ac <updateReboot+0x70>)
 8024254:	f00b ffb2 	bl	80301bc <fwrite>
 8024258:	f7fd f8b5 	bl	80213c6 <osResumeAllTasks>

   // Check parameter validity
   if (context == NULL)
 802425c:	687b      	ldr	r3, [r7, #4]
 802425e:	2b00      	cmp	r3, #0
 8024260:	d101      	bne.n	8024266 <updateReboot+0x2a>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8024262:	2304      	movs	r3, #4
 8024264:	e01c      	b.n	80242a0 <updateReboot+0x64>

   // Point to the primary memory
   primaryMemory = (Memory *)&context->memories[0];
 8024266:	687b      	ldr	r3, [r7, #4]
 8024268:	33b8      	adds	r3, #184	@ 0xb8
 802426a:	62fb      	str	r3, [r7, #44]	@ 0x2c

   if (context->imageProcessCtx.inputImage.state == IMAGE_STATE_APP_REBOOT)
 802426c:	687b      	ldr	r3, [r7, #4]
 802426e:	f893 31c0 	ldrb.w	r3, [r3, #448]	@ 0x1c0
 8024272:	2b05      	cmp	r3, #5
 8024274:	d113      	bne.n	802429e <updateReboot+0x62>
   {
      // Get flash info
      cerror = memoryGetInfo(primaryMemory, &memInfo);
 8024276:	f107 030c 	add.w	r3, r7, #12
 802427a:	4619      	mov	r1, r3
 802427c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 802427e:	f7fe ffde 	bl	802323e <memoryGetInfo>
 8024282:	4603      	mov	r3, r0
 8024284:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      // Is any error?
      if (cerror)
 8024288:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 802428c:	2b00      	cmp	r3, #0
 802428e:	d002      	beq.n	8024296 <updateReboot+0x5a>
         return cerror;
 8024290:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8024294:	e004      	b.n	80242a0 <updateReboot+0x64>

#if (UPDATE_SINGLE_BANK_SUPPORT == ENABLED)
      // Reboot system to complete firmware update procedure
      mcuSystemReset();
 8024296:	f7fd fa2d 	bl	80216f4 <mcuSystemReset>
      // Wrong state
      return CBOOT_ERROR_INVALID_STATE;
   }

   // Successful process
   return CBOOT_NO_ERROR;
 802429a:	2300      	movs	r3, #0
 802429c:	e000      	b.n	80242a0 <updateReboot+0x64>
      return CBOOT_ERROR_INVALID_STATE;
 802429e:	2316      	movs	r3, #22
}
 80242a0:	4618      	mov	r0, r3
 80242a2:	3730      	adds	r7, #48	@ 0x30
 80242a4:	46bd      	mov	sp, r7
 80242a6:	bd80      	pop	{r7, pc}
 80242a8:	2000008c 	.word	0x2000008c
 80242ac:	08031598 	.word	0x08031598

080242b0 <updateCalculateOutputImageIdx>:
 * @param[out] imgIdx Calculated value of the output image index.
 * @return Error code.
 **/

cboot_error_t updateCalculateOutputImageIdx(UpdateContext *context, uint16_t *imgIdx)
{
 80242b0:	b580      	push	{r7, lr}
 80242b2:	b096      	sub	sp, #88	@ 0x58
 80242b4:	af00      	add	r7, sp, #0
 80242b6:	6078      	str	r0, [r7, #4]
 80242b8:	6039      	str	r1, [r7, #0]
   ImageHeader imgHeader;
   Slot *appSlot;
   uint32_t curIdx;

   // Check paramter validity
   if (context == NULL || imgIdx == NULL)
 80242ba:	687b      	ldr	r3, [r7, #4]
 80242bc:	2b00      	cmp	r3, #0
 80242be:	d002      	beq.n	80242c6 <updateCalculateOutputImageIdx+0x16>
 80242c0:	683b      	ldr	r3, [r7, #0]
 80242c2:	2b00      	cmp	r3, #0
 80242c4:	d101      	bne.n	80242ca <updateCalculateOutputImageIdx+0x1a>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80242c6:	2304      	movs	r3, #4
 80242c8:	e02c      	b.n	8024324 <updateCalculateOutputImageIdx+0x74>

   // Get primary memory slot that holds app
   cerror = memoryGetSlotByCType(&context->memories[0], SLOT_CONTENT_APP, &appSlot);
 80242ca:	687b      	ldr	r3, [r7, #4]
 80242cc:	33b8      	adds	r3, #184	@ 0xb8
 80242ce:	f107 020c 	add.w	r2, r7, #12
 80242d2:	2101      	movs	r1, #1
 80242d4:	4618      	mov	r0, r3
 80242d6:	f7ff f9d2 	bl	802367e <memoryGetSlotByCType>
 80242da:	4603      	mov	r3, r0
 80242dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
   // Is any error?
   if (cerror)
 80242e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80242e4:	2b00      	cmp	r3, #0
 80242e6:	d002      	beq.n	80242ee <updateCalculateOutputImageIdx+0x3e>
      return cerror;
 80242e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80242ec:	e01a      	b.n	8024324 <updateCalculateOutputImageIdx+0x74>

   // Get image header from primary flash memory first slot
   cerror = updateGetImageHeaderFromSlot(appSlot, &imgHeader);
 80242ee:	68fb      	ldr	r3, [r7, #12]
 80242f0:	f107 0210 	add.w	r2, r7, #16
 80242f4:	4611      	mov	r1, r2
 80242f6:	4618      	mov	r0, r3
 80242f8:	f000 f936 	bl	8024568 <updateGetImageHeaderFromSlot>
 80242fc:	4603      	mov	r3, r0
 80242fe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
   // Is any error?
   if (cerror)
 8024302:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8024306:	2b00      	cmp	r3, #0
 8024308:	d002      	beq.n	8024310 <updateCalculateOutputImageIdx+0x60>
      return cerror;
 802430a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 802430e:	e009      	b.n	8024324 <updateCalculateOutputImageIdx+0x74>

   // Get image index from header
   curIdx = imgHeader.imgIndex;
 8024310:	697b      	ldr	r3, [r7, #20]
 8024312:	653b      	str	r3, [r7, #80]	@ 0x50
   // Save incremented image index
   *imgIdx = ++curIdx;
 8024314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8024316:	3301      	adds	r3, #1
 8024318:	653b      	str	r3, [r7, #80]	@ 0x50
 802431a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802431c:	b29a      	uxth	r2, r3
 802431e:	683b      	ldr	r3, [r7, #0]
 8024320:	801a      	strh	r2, [r3, #0]

   // Successful process
   return CBOOT_NO_ERROR;
 8024322:	2300      	movs	r3, #0
}
 8024324:	4618      	mov	r0, r3
 8024326:	3758      	adds	r7, #88	@ 0x58
 8024328:	46bd      	mov	sp, r7
 802432a:	bd80      	pop	{r7, pc}

0802432c <updateGetUpdateSlot>:
 * @param[out] slot Pointer to the slot that will be used to hold output image.
 * @return
 **/

cboot_error_t updateGetUpdateSlot(UpdateContext *context, Slot **slot)
{
 802432c:	b480      	push	{r7}
 802432e:	b083      	sub	sp, #12
 8024330:	af00      	add	r7, sp, #0
 8024332:	6078      	str	r0, [r7, #4]
 8024334:	6039      	str	r1, [r7, #0]
   Slot *tempSlot;
   ImageHeader header;
#endif

   // Check parameters validity
   if (context == NULL)
 8024336:	687b      	ldr	r3, [r7, #4]
 8024338:	2b00      	cmp	r3, #0
 802433a:	d101      	bne.n	8024340 <updateGetUpdateSlot+0x14>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 802433c:	2304      	movs	r3, #4
 802433e:	e005      	b.n	802434c <updateGetUpdateSlot+0x20>

// Fallback decativated
#if (UPDATE_FALLBACK_SUPPORT == DISABLED)
      // In single bank mode without fallback support only one
#if (EXTERNAL_MEMORY_SUPPORT == ENABLED)
   *slot = (Slot *)&context->settings.memories[1].slots[0];
 8024340:	687b      	ldr	r3, [r7, #4]
 8024342:	f103 028c 	add.w	r2, r3, #140	@ 0x8c
 8024346:	683b      	ldr	r3, [r7, #0]
 8024348:	601a      	str	r2, [r3, #0]
   }
#endif
#endif

   // Successful process
   return CBOOT_NO_ERROR;
 802434a:	2300      	movs	r3, #0
}
 802434c:	4618      	mov	r0, r3
 802434e:	370c      	adds	r7, #12
 8024350:	46bd      	mov	sp, r7
 8024352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024356:	4770      	bx	lr

08024358 <updateInitInputImage>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

cboot_error_t updateInitInputImage(UpdateSettings *settings, UpdateContext *context)
{
 8024358:	b590      	push	{r4, r7, lr}
 802435a:	b087      	sub	sp, #28
 802435c:	af02      	add	r7, sp, #8
 802435e:	6078      	str	r0, [r7, #4]
 8024360:	6039      	str	r1, [r7, #0]
   cboot_error_t cerror;
   Image *imageIn;

   //Initialize status code
   cerror = CBOOT_NO_ERROR;
 8024362:	2300      	movs	r3, #0
 8024364:	73fb      	strb	r3, [r7, #15]

   //Check parameters validity
   if(context == NULL || settings == NULL)
 8024366:	683b      	ldr	r3, [r7, #0]
 8024368:	2b00      	cmp	r3, #0
 802436a:	d002      	beq.n	8024372 <updateInitInputImage+0x1a>
 802436c:	687b      	ldr	r3, [r7, #4]
 802436e:	2b00      	cmp	r3, #0
 8024370:	d101      	bne.n	8024376 <updateInitInputImage+0x1e>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8024372:	2304      	movs	r3, #4
 8024374:	e0a5      	b.n	80244c2 <updateInitInputImage+0x16a>

   //Check image verification method settings
   if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 8024376:	687b      	ldr	r3, [r7, #4]
 8024378:	7c1b      	ldrb	r3, [r3, #16]
 802437a:	2b00      	cmp	r3, #0
 802437c:	d105      	bne.n	802438a <updateInitInputImage+0x32>
   {
#if VERIFY_INTEGRITY_SUPPORT == ENABLED
      //Check image integrity verification settings
      if(settings->imageInCrypto.verifySettings.integrityAlgo == NULL)
 802437e:	687b      	ldr	r3, [r7, #4]
 8024380:	695b      	ldr	r3, [r3, #20]
 8024382:	2b00      	cmp	r3, #0
 8024384:	d135      	bne.n	80243f2 <updateInitInputImage+0x9a>
         return CBOOT_ERROR_INVALID_PARAMETERS;
 8024386:	2304      	movs	r3, #4
 8024388:	e09b      	b.n	80244c2 <updateInitInputImage+0x16a>
#else
      //Image integrity verification support is not activated
      return CBOOT_ERROR_INVALID_PARAMETERS;
#endif
   }
   else if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 802438a:	687b      	ldr	r3, [r7, #4]
 802438c:	7c1b      	ldrb	r3, [r3, #16]
 802438e:	2b01      	cmp	r3, #1
 8024390:	d101      	bne.n	8024396 <updateInitInputImage+0x3e>
      //Force authentication algorythm to HMAC
      if(settings->imageInCrypto.verifySettings.authAlgo != VERIFY_AUTH_HMAC)
         return CBOOT_ERROR_UNSUPPORTED_AUTH_ALGO;
#else
      //Image authentication verification support is not activated
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8024392:	2304      	movs	r3, #4
 8024394:	e095      	b.n	80244c2 <updateInitInputImage+0x16a>
#endif
   }
   else if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 8024396:	687b      	ldr	r3, [r7, #4]
 8024398:	7c1b      	ldrb	r3, [r3, #16]
 802439a:	2b02      	cmp	r3, #2
 802439c:	d11b      	bne.n	80243d6 <updateInitInputImage+0x7e>
   {
#if VERIFY_SIGNATURE_SUPPORT == ENABLED
      //Check image signature verification settings
      if(settings->imageInCrypto.verifySettings.signAlgo == VERIFY_SIGN_NONE ||
 802439e:	687b      	ldr	r3, [r7, #4]
 80243a0:	7e1b      	ldrb	r3, [r3, #24]
 80243a2:	2b00      	cmp	r3, #0
 80243a4:	d00b      	beq.n	80243be <updateInitInputImage+0x66>
         settings->imageInCrypto.verifySettings.signHashAlgo == NULL ||
 80243a6:	687b      	ldr	r3, [r7, #4]
 80243a8:	69db      	ldr	r3, [r3, #28]
      if(settings->imageInCrypto.verifySettings.signAlgo == VERIFY_SIGN_NONE ||
 80243aa:	2b00      	cmp	r3, #0
 80243ac:	d007      	beq.n	80243be <updateInitInputImage+0x66>
         settings->imageInCrypto.verifySettings.signKey == NULL ||
 80243ae:	687b      	ldr	r3, [r7, #4]
 80243b0:	6a1b      	ldr	r3, [r3, #32]
         settings->imageInCrypto.verifySettings.signHashAlgo == NULL ||
 80243b2:	2b00      	cmp	r3, #0
 80243b4:	d003      	beq.n	80243be <updateInitInputImage+0x66>
         settings->imageInCrypto.verifySettings.signKeyLen == 0)
 80243b6:	687b      	ldr	r3, [r7, #4]
 80243b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
         settings->imageInCrypto.verifySettings.signKey == NULL ||
 80243ba:	2b00      	cmp	r3, #0
 80243bc:	d101      	bne.n	80243c2 <updateInitInputImage+0x6a>
         return CBOOT_ERROR_INVALID_PARAMETERS;
 80243be:	2304      	movs	r3, #4
 80243c0:	e07f      	b.n	80244c2 <updateInitInputImage+0x16a>

      //Check signature algorithm is supported
      if(settings->imageInCrypto.verifySettings.signAlgo != VERIFY_SIGN_RSA &&
 80243c2:	687b      	ldr	r3, [r7, #4]
 80243c4:	7e1b      	ldrb	r3, [r3, #24]
 80243c6:	2b01      	cmp	r3, #1
 80243c8:	d013      	beq.n	80243f2 <updateInitInputImage+0x9a>
         settings->imageInCrypto.verifySettings.signAlgo != VERIFY_SIGN_ECDSA)
 80243ca:	687b      	ldr	r3, [r7, #4]
 80243cc:	7e1b      	ldrb	r3, [r3, #24]
      if(settings->imageInCrypto.verifySettings.signAlgo != VERIFY_SIGN_RSA &&
 80243ce:	2b02      	cmp	r3, #2
 80243d0:	d00f      	beq.n	80243f2 <updateInitInputImage+0x9a>
         return CBOOT_ERROR_UNSUPPORTED_SIGNATURE_ALGO;
 80243d2:	2323      	movs	r3, #35	@ 0x23
 80243d4:	e075      	b.n	80244c2 <updateInitInputImage+0x16a>
#endif
   }
   else
   {
      //Debug message
      TRACE_ERROR("Image verification mode not supported!\r\n");
 80243d6:	f7fc ffef 	bl	80213b8 <osSuspendAllTasks>
 80243da:	4b3c      	ldr	r3, [pc, #240]	@ (80244cc <updateInitInputImage+0x174>)
 80243dc:	681b      	ldr	r3, [r3, #0]
 80243de:	68db      	ldr	r3, [r3, #12]
 80243e0:	2228      	movs	r2, #40	@ 0x28
 80243e2:	2101      	movs	r1, #1
 80243e4:	483a      	ldr	r0, [pc, #232]	@ (80244d0 <updateInitInputImage+0x178>)
 80243e6:	f00b fee9 	bl	80301bc <fwrite>
 80243ea:	f7fc ffec 	bl	80213c6 <osResumeAllTasks>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80243ee:	2304      	movs	r3, #4
 80243f0:	e067      	b.n	80244c2 <updateInitInputImage+0x16a>
   }

#if ((CIPHER_SUPPORT == ENABLED) && (IMAGE_INPUT_ENCRYPTED == ENABLED))
   //Check encryption settings
   if(settings->imageInCrypto.cipherAlgo == NULL || settings->imageInCrypto.cipherMode == CIPHER_MODE_NULL ||
 80243f2:	687b      	ldr	r3, [r7, #4]
 80243f4:	681b      	ldr	r3, [r3, #0]
 80243f6:	2b00      	cmp	r3, #0
 80243f8:	d00b      	beq.n	8024412 <updateInitInputImage+0xba>
 80243fa:	687b      	ldr	r3, [r7, #4]
 80243fc:	791b      	ldrb	r3, [r3, #4]
 80243fe:	2b00      	cmp	r3, #0
 8024400:	d007      	beq.n	8024412 <updateInitInputImage+0xba>
       settings->imageInCrypto.cipherKey == NULL || settings->imageInCrypto.cipherKeyLen == 0)
 8024402:	687b      	ldr	r3, [r7, #4]
 8024404:	689b      	ldr	r3, [r3, #8]
   if(settings->imageInCrypto.cipherAlgo == NULL || settings->imageInCrypto.cipherMode == CIPHER_MODE_NULL ||
 8024406:	2b00      	cmp	r3, #0
 8024408:	d003      	beq.n	8024412 <updateInitInputImage+0xba>
       settings->imageInCrypto.cipherKey == NULL || settings->imageInCrypto.cipherKeyLen == 0)
 802440a:	687b      	ldr	r3, [r7, #4]
 802440c:	68db      	ldr	r3, [r3, #12]
 802440e:	2b00      	cmp	r3, #0
 8024410:	d101      	bne.n	8024416 <updateInitInputImage+0xbe>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8024412:	2304      	movs	r3, #4
 8024414:	e055      	b.n	80244c2 <updateInitInputImage+0x16a>
   //Force cipher algo to AES
   if(settings->imageInCrypto.cipherAlgo != AES_CIPHER_ALGO)
 8024416:	687b      	ldr	r3, [r7, #4]
 8024418:	681b      	ldr	r3, [r3, #0]
 802441a:	4a2e      	ldr	r2, [pc, #184]	@ (80244d4 <updateInitInputImage+0x17c>)
 802441c:	4293      	cmp	r3, r2
 802441e:	d001      	beq.n	8024424 <updateInitInputImage+0xcc>
      return CBOOT_ERROR_UNSUPPORTED_CIPHER_ALGO;
 8024420:	2324      	movs	r3, #36	@ 0x24
 8024422:	e04e      	b.n	80244c2 <updateInitInputImage+0x16a>
   //Force cipher mode to CBC
   if(settings->imageInCrypto.cipherMode != CIPHER_MODE_CBC)
 8024424:	687b      	ldr	r3, [r7, #4]
 8024426:	791b      	ldrb	r3, [r3, #4]
 8024428:	2b03      	cmp	r3, #3
 802442a:	d001      	beq.n	8024430 <updateInitInputImage+0xd8>
      return CBOOT_ERROR_UNSUPPORTED_CIPHER_MODE;
 802442c:	2325      	movs	r3, #37	@ 0x25
 802442e:	e048      	b.n	80244c2 <updateInitInputImage+0x16a>
#endif

   //Point to the input image context
   imageIn = &context->imageProcessCtx.inputImage;
 8024430:	683b      	ldr	r3, [r7, #0]
 8024432:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8024436:	60bb      	str	r3, [r7, #8]

   //Clear input image context
   memset(imageIn, 0x00, sizeof(Image));
 8024438:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 802443c:	2100      	movs	r1, #0
 802443e:	68b8      	ldr	r0, [r7, #8]
 8024440:	f00b ffb2 	bl	80303a8 <memset>

   //Initialize buffer position to buffer start address
   imageIn->bufferPos = imageIn->buffer;
 8024444:	68ba      	ldr	r2, [r7, #8]
 8024446:	68bb      	ldr	r3, [r7, #8]
 8024448:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
   //Initialize check data position to check data start address
   imageIn->checkDataPos = imageIn->checkData;
 802444c:	68bb      	ldr	r3, [r7, #8]
 802444e:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8024452:	68bb      	ldr	r3, [r7, #8]
 8024454:	f8c3 25e8 	str.w	r2, [r3, #1512]	@ 0x5e8

   //Initialize image input process state
   imageIn->state = IMAGE_STATE_RECV_APP_HEADER;
 8024458:	68bb      	ldr	r3, [r7, #8]
 802445a:	2201      	movs	r2, #1
 802445c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

#if ((CIPHER_SUPPORT == ENABLED) && (IMAGE_INPUT_ENCRYPTED == ENABLED))
   //Is application encrypted?
   if (settings->imageInCrypto.cipherAlgo != NULL)
 8024460:	687b      	ldr	r3, [r7, #4]
 8024462:	681b      	ldr	r3, [r3, #0]
 8024464:	2b00      	cmp	r3, #0
 8024466:	d015      	beq.n	8024494 <updateInitInputImage+0x13c>
   {
      //Initialize cipher engine
      cerror = cipherInit(&imageIn->cipherEngine, settings->imageInCrypto.cipherAlgo,
 8024468:	68bb      	ldr	r3, [r7, #8]
 802446a:	f103 00a4 	add.w	r0, r3, #164	@ 0xa4
 802446e:	687b      	ldr	r3, [r7, #4]
 8024470:	6819      	ldr	r1, [r3, #0]
 8024472:	687b      	ldr	r3, [r7, #4]
 8024474:	791a      	ldrb	r2, [r3, #4]
 8024476:	687b      	ldr	r3, [r7, #4]
 8024478:	689c      	ldr	r4, [r3, #8]
 802447a:	687b      	ldr	r3, [r7, #4]
 802447c:	68db      	ldr	r3, [r3, #12]
 802447e:	9300      	str	r3, [sp, #0]
 8024480:	4623      	mov	r3, r4
 8024482:	f7ff f959 	bl	8023738 <cipherInit>
 8024486:	4603      	mov	r3, r0
 8024488:	73fb      	strb	r3, [r7, #15]
         settings->imageInCrypto.cipherMode, settings->imageInCrypto.cipherKey,
         settings->imageInCrypto.cipherKeyLen);

      //Is any error?
      if (cerror)
 802448a:	7bfb      	ldrb	r3, [r7, #15]
 802448c:	2b00      	cmp	r3, #0
 802448e:	d001      	beq.n	8024494 <updateInitInputImage+0x13c>
         return cerror;
 8024490:	7bfb      	ldrb	r3, [r7, #15]
 8024492:	e016      	b.n	80244c2 <updateInitInputImage+0x16a>
   }
#endif

   //Initialize verification module
   cerror = verifyInit(&imageIn->verifyContext, &settings->imageInCrypto.verifySettings);
 8024494:	68bb      	ldr	r3, [r7, #8]
 8024496:	f503 722e 	add.w	r2, r3, #696	@ 0x2b8
 802449a:	687b      	ldr	r3, [r7, #4]
 802449c:	3310      	adds	r3, #16
 802449e:	4619      	mov	r1, r3
 80244a0:	4610      	mov	r0, r2
 80244a2:	f7ff fa35 	bl	8023910 <verifyInit>
 80244a6:	4603      	mov	r3, r0
 80244a8:	73fb      	strb	r3, [r7, #15]
   //Is any error?
   if (cerror)
 80244aa:	7bfb      	ldrb	r3, [r7, #15]
 80244ac:	2b00      	cmp	r3, #0
 80244ae:	d001      	beq.n	80244b4 <updateInitInputImage+0x15c>
      return cerror;
 80244b0:	7bfb      	ldrb	r3, [r7, #15]
 80244b2:	e006      	b.n	80244c2 <updateInitInputImage+0x16a>

   //Get expecting image check data size
   imageIn->checkDataSize = imageIn->verifyContext.checkDataSize;
 80244b4:	68bb      	ldr	r3, [r7, #8]
 80244b6:	f8d3 23a0 	ldr.w	r2, [r3, #928]	@ 0x3a0
 80244ba:	68bb      	ldr	r3, [r7, #8]
 80244bc:	f8c3 25f0 	str.w	r2, [r3, #1520]	@ 0x5f0

   //Successful process
   return CBOOT_NO_ERROR;
 80244c0:	2300      	movs	r3, #0
}
 80244c2:	4618      	mov	r0, r3
 80244c4:	3714      	adds	r7, #20
 80244c6:	46bd      	mov	sp, r7
 80244c8:	bd90      	pop	{r4, r7, pc}
 80244ca:	bf00      	nop
 80244cc:	2000008c 	.word	0x2000008c
 80244d0:	080315c4 	.word	0x080315c4
 80244d4:	08032dfc 	.word	0x08032dfc

080244d8 <updateInitOutputImage>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

cboot_error_t updateInitOutputImage(UpdateSettings *settings, UpdateContext *context)
{
 80244d8:	b580      	push	{r7, lr}
 80244da:	b08a      	sub	sp, #40	@ 0x28
 80244dc:	af00      	add	r7, sp, #0
 80244de:	6078      	str	r0, [r7, #4]
 80244e0:	6039      	str	r1, [r7, #0]
   cboot_error_t cerror;
   Image *imageOut;
   VerifySettings verifySettings;

   //Initialize status code
   cerror = CBOOT_NO_ERROR;
 80244e2:	2300      	movs	r3, #0
 80244e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

   //Initialize verify settings structure
   memset(&verifySettings, 0, sizeof(VerifySettings));
 80244e8:	f107 0308 	add.w	r3, r7, #8
 80244ec:	2218      	movs	r2, #24
 80244ee:	2100      	movs	r1, #0
 80244f0:	4618      	mov	r0, r3
 80244f2:	f00b ff59 	bl	80303a8 <memset>

   //Check parameters validly
   if(context == NULL || settings == NULL)
 80244f6:	683b      	ldr	r3, [r7, #0]
 80244f8:	2b00      	cmp	r3, #0
 80244fa:	d002      	beq.n	8024502 <updateInitOutputImage+0x2a>
 80244fc:	687b      	ldr	r3, [r7, #4]
 80244fe:	2b00      	cmp	r3, #0
 8024500:	d101      	bne.n	8024506 <updateInitOutputImage+0x2e>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8024502:	2304      	movs	r3, #4
 8024504:	e02a      	b.n	802455c <updateInitOutputImage+0x84>

   //Point to the output image context
   imageOut = &context->imageProcessCtx.outputImage;
 8024506:	683b      	ldr	r3, [r7, #0]
 8024508:	f203 7314 	addw	r3, r3, #1812	@ 0x714
 802450c:	623b      	str	r3, [r7, #32]

   //Initialize buffer position to buffer start address
   imageOut->bufferPos = imageOut->buffer;
 802450e:	6a3a      	ldr	r2, [r7, #32]
 8024510:	6a3b      	ldr	r3, [r7, #32]
 8024512:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

   //Initialize image output process state
#if (UPDATE_SINGLE_BANK_SUPPORT == ENABLED)
   imageOut->state = IMAGE_STATE_WRITE_APP_HEADER;
 8024516:	6a3b      	ldr	r3, [r7, #32]
 8024518:	2207      	movs	r2, #7
 802451a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
   if (cerror)
      return cerror;
#endif

   //Initialize check data position to check data start address
   imageOut->checkDataPos = imageOut->checkData;
 802451e:	6a3b      	ldr	r3, [r7, #32]
 8024520:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8024524:	6a3b      	ldr	r3, [r7, #32]
 8024526:	f8c3 25e8 	str.w	r2, [r3, #1512]	@ 0x5e8

   //Set verification module settings
   verifySettings.verifyMethod = VERIFY_METHOD_INTEGRITY;
 802452a:	2300      	movs	r3, #0
 802452c:	723b      	strb	r3, [r7, #8]
   verifySettings.integrityAlgo = CRC32_HASH_ALGO;
 802452e:	4b0d      	ldr	r3, [pc, #52]	@ (8024564 <updateInitOutputImage+0x8c>)
 8024530:	60fb      	str	r3, [r7, #12]

   //Initialize verification module
   cerror = verifyInit(&imageOut->verifyContext, &verifySettings);
 8024532:	6a3b      	ldr	r3, [r7, #32]
 8024534:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8024538:	f107 0208 	add.w	r2, r7, #8
 802453c:	4611      	mov	r1, r2
 802453e:	4618      	mov	r0, r3
 8024540:	f7ff f9e6 	bl	8023910 <verifyInit>
 8024544:	4603      	mov	r3, r0
 8024546:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
   //Is any error ?
   if (cerror)
 802454a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802454e:	2b00      	cmp	r3, #0
 8024550:	d002      	beq.n	8024558 <updateInitOutputImage+0x80>
      return cerror;
 8024552:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8024556:	e001      	b.n	802455c <updateInitOutputImage+0x84>
#endif

   //Return status code
   return cerror;
 8024558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 802455c:	4618      	mov	r0, r3
 802455e:	3728      	adds	r7, #40	@ 0x28
 8024560:	46bd      	mov	sp, r7
 8024562:	bd80      	pop	{r7, pc}
 8024564:	080322f0 	.word	0x080322f0

08024568 <updateGetImageHeaderFromSlot>:
 * @param[out] header Pointer to store the extracted image header.
 * @return Error code.
 **/

cboot_error_t updateGetImageHeaderFromSlot(Slot *slot, ImageHeader *header)
{
 8024568:	b580      	push	{r7, lr}
 802456a:	b094      	sub	sp, #80	@ 0x50
 802456c:	af00      	add	r7, sp, #0
 802456e:	6078      	str	r0, [r7, #4]
 8024570:	6039      	str	r1, [r7, #0]
   cboot_error_t cerror;
   ImageHeader *imgHeader;
   uint8_t buffer[sizeof(ImageHeader)];

   //Check parameter validity
   if(slot == NULL || header == NULL)
 8024572:	687b      	ldr	r3, [r7, #4]
 8024574:	2b00      	cmp	r3, #0
 8024576:	d002      	beq.n	802457e <updateGetImageHeaderFromSlot+0x16>
 8024578:	683b      	ldr	r3, [r7, #0]
 802457a:	2b00      	cmp	r3, #0
 802457c:	d101      	bne.n	8024582 <updateGetImageHeaderFromSlot+0x1a>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 802457e:	2304      	movs	r3, #4
 8024580:	e028      	b.n	80245d4 <updateGetImageHeaderFromSlot+0x6c>

   ////Point to the slot memory driver
   ////Read first slot 64 bytes
   cerror = memoryReadSlot(slot, 0, buffer, sizeof(ImageHeader));
 8024582:	f107 0208 	add.w	r2, r7, #8
 8024586:	2340      	movs	r3, #64	@ 0x40
 8024588:	2100      	movs	r1, #0
 802458a:	6878      	ldr	r0, [r7, #4]
 802458c:	f7fe ff64 	bl	8023458 <memoryReadSlot>
 8024590:	4603      	mov	r3, r0
 8024592:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
   //Is any error?
   if(cerror)
 8024596:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 802459a:	2b00      	cmp	r3, #0
 802459c:	d002      	beq.n	80245a4 <updateGetImageHeaderFromSlot+0x3c>
      return cerror;
 802459e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80245a2:	e017      	b.n	80245d4 <updateGetImageHeaderFromSlot+0x6c>

   //Get image header from above buffer
   cerror = imageGetHeader(buffer, sizeof(ImageHeader), &imgHeader);
 80245a4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80245a8:	f107 0308 	add.w	r3, r7, #8
 80245ac:	2140      	movs	r1, #64	@ 0x40
 80245ae:	4618      	mov	r0, r3
 80245b0:	f7fd fff2 	bl	8022598 <imageGetHeader>
 80245b4:	4603      	mov	r3, r0
 80245b6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
   //Is any error?
   if(cerror)
 80245ba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80245be:	2b00      	cmp	r3, #0
 80245c0:	d001      	beq.n	80245c6 <updateGetImageHeaderFromSlot+0x5e>
      return CBOOT_ERROR_INVALID_IMAGE_HEADER;
 80245c2:	2307      	movs	r3, #7
 80245c4:	e006      	b.n	80245d4 <updateGetImageHeaderFromSlot+0x6c>

   //Save image header
   memcpy(header, imgHeader, sizeof(ImageHeader));
 80245c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80245c8:	2240      	movs	r2, #64	@ 0x40
 80245ca:	4619      	mov	r1, r3
 80245cc:	6838      	ldr	r0, [r7, #0]
 80245ce:	f00b ffb0 	bl	8030532 <memcpy>

   //Successful process
   return CBOOT_NO_ERROR;
 80245d2:	2300      	movs	r3, #0
}
 80245d4:	4618      	mov	r0, r3
 80245d6:	3750      	adds	r7, #80	@ 0x50
 80245d8:	46bd      	mov	sp, r7
 80245da:	bd80      	pop	{r7, pc}

080245dc <aesInit>:
 * @return Error code
 **/

__weak_func error_t aesInit(AesContext *context, const uint8_t *key,
   size_t keyLen)
{
 80245dc:	b480      	push	{r7}
 80245de:	b089      	sub	sp, #36	@ 0x24
 80245e0:	af00      	add	r7, sp, #0
 80245e2:	60f8      	str	r0, [r7, #12]
 80245e4:	60b9      	str	r1, [r7, #8]
 80245e6:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint32_t temp;
   size_t keyScheduleSize;

   //Check parameters
   if(context == NULL || key == NULL)
 80245e8:	68fb      	ldr	r3, [r7, #12]
 80245ea:	2b00      	cmp	r3, #0
 80245ec:	d002      	beq.n	80245f4 <aesInit+0x18>
 80245ee:	68bb      	ldr	r3, [r7, #8]
 80245f0:	2b00      	cmp	r3, #0
 80245f2:	d101      	bne.n	80245f8 <aesInit+0x1c>
      return ERROR_INVALID_PARAMETER;
 80245f4:	2302      	movs	r3, #2
 80245f6:	e1a9      	b.n	802494c <aesInit+0x370>

   //Check the length of the key
   if(keyLen == 16)
 80245f8:	687b      	ldr	r3, [r7, #4]
 80245fa:	2b10      	cmp	r3, #16
 80245fc:	d103      	bne.n	8024606 <aesInit+0x2a>
   {
      //10 rounds are required for 128-bit key
      context->nr = 10;
 80245fe:	68fb      	ldr	r3, [r7, #12]
 8024600:	220a      	movs	r2, #10
 8024602:	601a      	str	r2, [r3, #0]
 8024604:	e00f      	b.n	8024626 <aesInit+0x4a>
   }
   else if(keyLen == 24)
 8024606:	687b      	ldr	r3, [r7, #4]
 8024608:	2b18      	cmp	r3, #24
 802460a:	d103      	bne.n	8024614 <aesInit+0x38>
   {
      //12 rounds are required for 192-bit key
      context->nr = 12;
 802460c:	68fb      	ldr	r3, [r7, #12]
 802460e:	220c      	movs	r2, #12
 8024610:	601a      	str	r2, [r3, #0]
 8024612:	e008      	b.n	8024626 <aesInit+0x4a>
   }
   else if(keyLen == 32)
 8024614:	687b      	ldr	r3, [r7, #4]
 8024616:	2b20      	cmp	r3, #32
 8024618:	d103      	bne.n	8024622 <aesInit+0x46>
   {
      //14 rounds are required for 256-bit key
      context->nr = 14;
 802461a:	68fb      	ldr	r3, [r7, #12]
 802461c:	220e      	movs	r2, #14
 802461e:	601a      	str	r2, [r3, #0]
 8024620:	e001      	b.n	8024626 <aesInit+0x4a>
   }
   else
   {
      //Report an error
      return ERROR_INVALID_KEY_LENGTH;
 8024622:	23e8      	movs	r3, #232	@ 0xe8
 8024624:	e192      	b.n	802494c <aesInit+0x370>
   }

   //Determine the number of 32-bit words in the key
   keyLen /= 4;
 8024626:	687b      	ldr	r3, [r7, #4]
 8024628:	089b      	lsrs	r3, r3, #2
 802462a:	607b      	str	r3, [r7, #4]

   //Copy the original key
   for(i = 0; i < keyLen; i++)
 802462c:	2300      	movs	r3, #0
 802462e:	61fb      	str	r3, [r7, #28]
 8024630:	e026      	b.n	8024680 <aesInit+0xa4>
   {
      context->ek[i] = LOAD32LE(key + i * 4);
 8024632:	69fb      	ldr	r3, [r7, #28]
 8024634:	009b      	lsls	r3, r3, #2
 8024636:	68ba      	ldr	r2, [r7, #8]
 8024638:	4413      	add	r3, r2
 802463a:	781b      	ldrb	r3, [r3, #0]
 802463c:	4619      	mov	r1, r3
 802463e:	69fb      	ldr	r3, [r7, #28]
 8024640:	009b      	lsls	r3, r3, #2
 8024642:	3301      	adds	r3, #1
 8024644:	68ba      	ldr	r2, [r7, #8]
 8024646:	4413      	add	r3, r2
 8024648:	781b      	ldrb	r3, [r3, #0]
 802464a:	021b      	lsls	r3, r3, #8
 802464c:	ea41 0203 	orr.w	r2, r1, r3
 8024650:	69fb      	ldr	r3, [r7, #28]
 8024652:	009b      	lsls	r3, r3, #2
 8024654:	3302      	adds	r3, #2
 8024656:	68b9      	ldr	r1, [r7, #8]
 8024658:	440b      	add	r3, r1
 802465a:	781b      	ldrb	r3, [r3, #0]
 802465c:	041b      	lsls	r3, r3, #16
 802465e:	431a      	orrs	r2, r3
 8024660:	69fb      	ldr	r3, [r7, #28]
 8024662:	009b      	lsls	r3, r3, #2
 8024664:	3303      	adds	r3, #3
 8024666:	68b9      	ldr	r1, [r7, #8]
 8024668:	440b      	add	r3, r1
 802466a:	781b      	ldrb	r3, [r3, #0]
 802466c:	061b      	lsls	r3, r3, #24
 802466e:	431a      	orrs	r2, r3
 8024670:	68f9      	ldr	r1, [r7, #12]
 8024672:	69fb      	ldr	r3, [r7, #28]
 8024674:	009b      	lsls	r3, r3, #2
 8024676:	440b      	add	r3, r1
 8024678:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyLen; i++)
 802467a:	69fb      	ldr	r3, [r7, #28]
 802467c:	3301      	adds	r3, #1
 802467e:	61fb      	str	r3, [r7, #28]
 8024680:	69fa      	ldr	r2, [r7, #28]
 8024682:	687b      	ldr	r3, [r7, #4]
 8024684:	429a      	cmp	r2, r3
 8024686:	d3d4      	bcc.n	8024632 <aesInit+0x56>
   }

   //The size of the key schedule depends on the number of rounds
   keyScheduleSize = 4 * (context->nr + 1);
 8024688:	68fb      	ldr	r3, [r7, #12]
 802468a:	681b      	ldr	r3, [r3, #0]
 802468c:	3301      	adds	r3, #1
 802468e:	009b      	lsls	r3, r3, #2
 8024690:	61bb      	str	r3, [r7, #24]

   //Generate the key schedule (encryption)
   for(i = keyLen; i < keyScheduleSize; i++)
 8024692:	687b      	ldr	r3, [r7, #4]
 8024694:	61fb      	str	r3, [r7, #28]
 8024696:	e0c4      	b.n	8024822 <aesInit+0x246>
   {
      //Save previous word
      temp = context->ek[i - 1];
 8024698:	69fb      	ldr	r3, [r7, #28]
 802469a:	3b01      	subs	r3, #1
 802469c:	68fa      	ldr	r2, [r7, #12]
 802469e:	009b      	lsls	r3, r3, #2
 80246a0:	4413      	add	r3, r2
 80246a2:	685b      	ldr	r3, [r3, #4]
 80246a4:	617b      	str	r3, [r7, #20]

      //Apply transformation
      if((i % keyLen) == 0)
 80246a6:	69fb      	ldr	r3, [r7, #28]
 80246a8:	687a      	ldr	r2, [r7, #4]
 80246aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80246ae:	6879      	ldr	r1, [r7, #4]
 80246b0:	fb01 f202 	mul.w	r2, r1, r2
 80246b4:	1a9b      	subs	r3, r3, r2
 80246b6:	2b00      	cmp	r3, #0
 80246b8:	d14e      	bne.n	8024758 <aesInit+0x17c>
      {
         context->ek[i] = (uint32_t) sbox[(temp >> 8) & 0xFF];
 80246ba:	697b      	ldr	r3, [r7, #20]
 80246bc:	0a1b      	lsrs	r3, r3, #8
 80246be:	b2db      	uxtb	r3, r3
 80246c0:	4a66      	ldr	r2, [pc, #408]	@ (802485c <aesInit+0x280>)
 80246c2:	5cd3      	ldrb	r3, [r2, r3]
 80246c4:	4619      	mov	r1, r3
 80246c6:	68fa      	ldr	r2, [r7, #12]
 80246c8:	69fb      	ldr	r3, [r7, #28]
 80246ca:	009b      	lsls	r3, r3, #2
 80246cc:	4413      	add	r3, r2
 80246ce:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (uint32_t) sbox[(temp >> 16) & 0xFF] << 8;
 80246d0:	68fa      	ldr	r2, [r7, #12]
 80246d2:	69fb      	ldr	r3, [r7, #28]
 80246d4:	009b      	lsls	r3, r3, #2
 80246d6:	4413      	add	r3, r2
 80246d8:	685a      	ldr	r2, [r3, #4]
 80246da:	697b      	ldr	r3, [r7, #20]
 80246dc:	0c1b      	lsrs	r3, r3, #16
 80246de:	b2db      	uxtb	r3, r3
 80246e0:	495e      	ldr	r1, [pc, #376]	@ (802485c <aesInit+0x280>)
 80246e2:	5ccb      	ldrb	r3, [r1, r3]
 80246e4:	021b      	lsls	r3, r3, #8
 80246e6:	431a      	orrs	r2, r3
 80246e8:	68f9      	ldr	r1, [r7, #12]
 80246ea:	69fb      	ldr	r3, [r7, #28]
 80246ec:	009b      	lsls	r3, r3, #2
 80246ee:	440b      	add	r3, r1
 80246f0:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (uint32_t) sbox[(temp >> 24) & 0xFF] << 16;
 80246f2:	68fa      	ldr	r2, [r7, #12]
 80246f4:	69fb      	ldr	r3, [r7, #28]
 80246f6:	009b      	lsls	r3, r3, #2
 80246f8:	4413      	add	r3, r2
 80246fa:	685a      	ldr	r2, [r3, #4]
 80246fc:	697b      	ldr	r3, [r7, #20]
 80246fe:	0e1b      	lsrs	r3, r3, #24
 8024700:	4956      	ldr	r1, [pc, #344]	@ (802485c <aesInit+0x280>)
 8024702:	5ccb      	ldrb	r3, [r1, r3]
 8024704:	041b      	lsls	r3, r3, #16
 8024706:	431a      	orrs	r2, r3
 8024708:	68f9      	ldr	r1, [r7, #12]
 802470a:	69fb      	ldr	r3, [r7, #28]
 802470c:	009b      	lsls	r3, r3, #2
 802470e:	440b      	add	r3, r1
 8024710:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (uint32_t) sbox[temp & 0xFF] << 24;
 8024712:	68fa      	ldr	r2, [r7, #12]
 8024714:	69fb      	ldr	r3, [r7, #28]
 8024716:	009b      	lsls	r3, r3, #2
 8024718:	4413      	add	r3, r2
 802471a:	685a      	ldr	r2, [r3, #4]
 802471c:	697b      	ldr	r3, [r7, #20]
 802471e:	b2db      	uxtb	r3, r3
 8024720:	494e      	ldr	r1, [pc, #312]	@ (802485c <aesInit+0x280>)
 8024722:	5ccb      	ldrb	r3, [r1, r3]
 8024724:	061b      	lsls	r3, r3, #24
 8024726:	431a      	orrs	r2, r3
 8024728:	68f9      	ldr	r1, [r7, #12]
 802472a:	69fb      	ldr	r3, [r7, #28]
 802472c:	009b      	lsls	r3, r3, #2
 802472e:	440b      	add	r3, r1
 8024730:	605a      	str	r2, [r3, #4]
         context->ek[i] ^= rcon[i / keyLen];
 8024732:	68fa      	ldr	r2, [r7, #12]
 8024734:	69fb      	ldr	r3, [r7, #28]
 8024736:	009b      	lsls	r3, r3, #2
 8024738:	4413      	add	r3, r2
 802473a:	685a      	ldr	r2, [r3, #4]
 802473c:	69f9      	ldr	r1, [r7, #28]
 802473e:	687b      	ldr	r3, [r7, #4]
 8024740:	fbb1 f3f3 	udiv	r3, r1, r3
 8024744:	4946      	ldr	r1, [pc, #280]	@ (8024860 <aesInit+0x284>)
 8024746:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802474a:	405a      	eors	r2, r3
 802474c:	68f9      	ldr	r1, [r7, #12]
 802474e:	69fb      	ldr	r3, [r7, #28]
 8024750:	009b      	lsls	r3, r3, #2
 8024752:	440b      	add	r3, r1
 8024754:	605a      	str	r2, [r3, #4]
 8024756:	e04f      	b.n	80247f8 <aesInit+0x21c>
      }
      else if(keyLen > 6 && (i % keyLen) == 4)
 8024758:	687b      	ldr	r3, [r7, #4]
 802475a:	2b06      	cmp	r3, #6
 802475c:	d946      	bls.n	80247ec <aesInit+0x210>
 802475e:	69fb      	ldr	r3, [r7, #28]
 8024760:	687a      	ldr	r2, [r7, #4]
 8024762:	fbb3 f2f2 	udiv	r2, r3, r2
 8024766:	6879      	ldr	r1, [r7, #4]
 8024768:	fb01 f202 	mul.w	r2, r1, r2
 802476c:	1a9b      	subs	r3, r3, r2
 802476e:	2b04      	cmp	r3, #4
 8024770:	d13c      	bne.n	80247ec <aesInit+0x210>
      {
         context->ek[i] = (uint32_t) sbox[temp & 0xFF];
 8024772:	697b      	ldr	r3, [r7, #20]
 8024774:	b2db      	uxtb	r3, r3
 8024776:	4a39      	ldr	r2, [pc, #228]	@ (802485c <aesInit+0x280>)
 8024778:	5cd3      	ldrb	r3, [r2, r3]
 802477a:	4619      	mov	r1, r3
 802477c:	68fa      	ldr	r2, [r7, #12]
 802477e:	69fb      	ldr	r3, [r7, #28]
 8024780:	009b      	lsls	r3, r3, #2
 8024782:	4413      	add	r3, r2
 8024784:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (uint32_t) sbox[(temp >> 8) & 0xFF] << 8;
 8024786:	68fa      	ldr	r2, [r7, #12]
 8024788:	69fb      	ldr	r3, [r7, #28]
 802478a:	009b      	lsls	r3, r3, #2
 802478c:	4413      	add	r3, r2
 802478e:	685a      	ldr	r2, [r3, #4]
 8024790:	697b      	ldr	r3, [r7, #20]
 8024792:	0a1b      	lsrs	r3, r3, #8
 8024794:	b2db      	uxtb	r3, r3
 8024796:	4931      	ldr	r1, [pc, #196]	@ (802485c <aesInit+0x280>)
 8024798:	5ccb      	ldrb	r3, [r1, r3]
 802479a:	021b      	lsls	r3, r3, #8
 802479c:	431a      	orrs	r2, r3
 802479e:	68f9      	ldr	r1, [r7, #12]
 80247a0:	69fb      	ldr	r3, [r7, #28]
 80247a2:	009b      	lsls	r3, r3, #2
 80247a4:	440b      	add	r3, r1
 80247a6:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (uint32_t) sbox[(temp >> 16) & 0xFF] << 16;
 80247a8:	68fa      	ldr	r2, [r7, #12]
 80247aa:	69fb      	ldr	r3, [r7, #28]
 80247ac:	009b      	lsls	r3, r3, #2
 80247ae:	4413      	add	r3, r2
 80247b0:	685a      	ldr	r2, [r3, #4]
 80247b2:	697b      	ldr	r3, [r7, #20]
 80247b4:	0c1b      	lsrs	r3, r3, #16
 80247b6:	b2db      	uxtb	r3, r3
 80247b8:	4928      	ldr	r1, [pc, #160]	@ (802485c <aesInit+0x280>)
 80247ba:	5ccb      	ldrb	r3, [r1, r3]
 80247bc:	041b      	lsls	r3, r3, #16
 80247be:	431a      	orrs	r2, r3
 80247c0:	68f9      	ldr	r1, [r7, #12]
 80247c2:	69fb      	ldr	r3, [r7, #28]
 80247c4:	009b      	lsls	r3, r3, #2
 80247c6:	440b      	add	r3, r1
 80247c8:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (uint32_t) sbox[(temp >> 24) & 0xFF] << 24;
 80247ca:	68fa      	ldr	r2, [r7, #12]
 80247cc:	69fb      	ldr	r3, [r7, #28]
 80247ce:	009b      	lsls	r3, r3, #2
 80247d0:	4413      	add	r3, r2
 80247d2:	685a      	ldr	r2, [r3, #4]
 80247d4:	697b      	ldr	r3, [r7, #20]
 80247d6:	0e1b      	lsrs	r3, r3, #24
 80247d8:	4920      	ldr	r1, [pc, #128]	@ (802485c <aesInit+0x280>)
 80247da:	5ccb      	ldrb	r3, [r1, r3]
 80247dc:	061b      	lsls	r3, r3, #24
 80247de:	431a      	orrs	r2, r3
 80247e0:	68f9      	ldr	r1, [r7, #12]
 80247e2:	69fb      	ldr	r3, [r7, #28]
 80247e4:	009b      	lsls	r3, r3, #2
 80247e6:	440b      	add	r3, r1
 80247e8:	605a      	str	r2, [r3, #4]
 80247ea:	e005      	b.n	80247f8 <aesInit+0x21c>
      }
      else
      {
         context->ek[i] = temp;
 80247ec:	68fa      	ldr	r2, [r7, #12]
 80247ee:	69fb      	ldr	r3, [r7, #28]
 80247f0:	009b      	lsls	r3, r3, #2
 80247f2:	4413      	add	r3, r2
 80247f4:	697a      	ldr	r2, [r7, #20]
 80247f6:	605a      	str	r2, [r3, #4]
      }

      //Update the key schedule
      context->ek[i] ^= context->ek[i - keyLen];
 80247f8:	68fa      	ldr	r2, [r7, #12]
 80247fa:	69fb      	ldr	r3, [r7, #28]
 80247fc:	009b      	lsls	r3, r3, #2
 80247fe:	4413      	add	r3, r2
 8024800:	685a      	ldr	r2, [r3, #4]
 8024802:	69f9      	ldr	r1, [r7, #28]
 8024804:	687b      	ldr	r3, [r7, #4]
 8024806:	1acb      	subs	r3, r1, r3
 8024808:	68f9      	ldr	r1, [r7, #12]
 802480a:	009b      	lsls	r3, r3, #2
 802480c:	440b      	add	r3, r1
 802480e:	685b      	ldr	r3, [r3, #4]
 8024810:	405a      	eors	r2, r3
 8024812:	68f9      	ldr	r1, [r7, #12]
 8024814:	69fb      	ldr	r3, [r7, #28]
 8024816:	009b      	lsls	r3, r3, #2
 8024818:	440b      	add	r3, r1
 802481a:	605a      	str	r2, [r3, #4]
   for(i = keyLen; i < keyScheduleSize; i++)
 802481c:	69fb      	ldr	r3, [r7, #28]
 802481e:	3301      	adds	r3, #1
 8024820:	61fb      	str	r3, [r7, #28]
 8024822:	69fa      	ldr	r2, [r7, #28]
 8024824:	69bb      	ldr	r3, [r7, #24]
 8024826:	429a      	cmp	r2, r3
 8024828:	f4ff af36 	bcc.w	8024698 <aesInit+0xbc>
   }

   //Generate the key schedule (decryption)
   for(i = 0; i < keyScheduleSize; i++)
 802482c:	2300      	movs	r3, #0
 802482e:	61fb      	str	r3, [r7, #28]
 8024830:	e086      	b.n	8024940 <aesInit+0x364>
   {
      //Apply the InvMixColumns transformation to all round keys but the first
      //and the last
      if(i < 4 || i >= (keyScheduleSize - 4))
 8024832:	69fb      	ldr	r3, [r7, #28]
 8024834:	2b03      	cmp	r3, #3
 8024836:	d904      	bls.n	8024842 <aesInit+0x266>
 8024838:	69bb      	ldr	r3, [r7, #24]
 802483a:	3b04      	subs	r3, #4
 802483c:	69fa      	ldr	r2, [r7, #28]
 802483e:	429a      	cmp	r2, r3
 8024840:	d310      	bcc.n	8024864 <aesInit+0x288>
      {
         context->dk[i] = context->ek[i];
 8024842:	68fa      	ldr	r2, [r7, #12]
 8024844:	69fb      	ldr	r3, [r7, #28]
 8024846:	009b      	lsls	r3, r3, #2
 8024848:	4413      	add	r3, r2
 802484a:	685a      	ldr	r2, [r3, #4]
 802484c:	68f9      	ldr	r1, [r7, #12]
 802484e:	69fb      	ldr	r3, [r7, #28]
 8024850:	333c      	adds	r3, #60	@ 0x3c
 8024852:	009b      	lsls	r3, r3, #2
 8024854:	440b      	add	r3, r1
 8024856:	605a      	str	r2, [r3, #4]
 8024858:	e06f      	b.n	802493a <aesInit+0x35e>
 802485a:	bf00      	nop
 802485c:	080323d0 	.word	0x080323d0
 8024860:	08032dd0 	.word	0x08032dd0
      }
      else
      {
         context->dk[i] = td[sbox[context->ek[i] & 0xFF]];
 8024864:	68fa      	ldr	r2, [r7, #12]
 8024866:	69fb      	ldr	r3, [r7, #28]
 8024868:	009b      	lsls	r3, r3, #2
 802486a:	4413      	add	r3, r2
 802486c:	685b      	ldr	r3, [r3, #4]
 802486e:	b2db      	uxtb	r3, r3
 8024870:	4a39      	ldr	r2, [pc, #228]	@ (8024958 <aesInit+0x37c>)
 8024872:	5cd3      	ldrb	r3, [r2, r3]
 8024874:	461a      	mov	r2, r3
 8024876:	4b39      	ldr	r3, [pc, #228]	@ (802495c <aesInit+0x380>)
 8024878:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802487c:	68f9      	ldr	r1, [r7, #12]
 802487e:	69fb      	ldr	r3, [r7, #28]
 8024880:	333c      	adds	r3, #60	@ 0x3c
 8024882:	009b      	lsls	r3, r3, #2
 8024884:	440b      	add	r3, r1
 8024886:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 8) & 0xFF]];
 8024888:	68fa      	ldr	r2, [r7, #12]
 802488a:	69fb      	ldr	r3, [r7, #28]
 802488c:	009b      	lsls	r3, r3, #2
 802488e:	4413      	add	r3, r2
 8024890:	685b      	ldr	r3, [r3, #4]
 8024892:	0a1b      	lsrs	r3, r3, #8
 8024894:	b2db      	uxtb	r3, r3
 8024896:	4a30      	ldr	r2, [pc, #192]	@ (8024958 <aesInit+0x37c>)
 8024898:	5cd3      	ldrb	r3, [r2, r3]
 802489a:	461a      	mov	r2, r3
 802489c:	4b2f      	ldr	r3, [pc, #188]	@ (802495c <aesInit+0x380>)
 802489e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80248a2:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 8);
 80248a4:	68fa      	ldr	r2, [r7, #12]
 80248a6:	69fb      	ldr	r3, [r7, #28]
 80248a8:	333c      	adds	r3, #60	@ 0x3c
 80248aa:	009b      	lsls	r3, r3, #2
 80248ac:	4413      	add	r3, r2
 80248ae:	685a      	ldr	r2, [r3, #4]
 80248b0:	697b      	ldr	r3, [r7, #20]
 80248b2:	ea4f 6333 	mov.w	r3, r3, ror #24
 80248b6:	405a      	eors	r2, r3
 80248b8:	68f9      	ldr	r1, [r7, #12]
 80248ba:	69fb      	ldr	r3, [r7, #28]
 80248bc:	333c      	adds	r3, #60	@ 0x3c
 80248be:	009b      	lsls	r3, r3, #2
 80248c0:	440b      	add	r3, r1
 80248c2:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 16) & 0xFF]];
 80248c4:	68fa      	ldr	r2, [r7, #12]
 80248c6:	69fb      	ldr	r3, [r7, #28]
 80248c8:	009b      	lsls	r3, r3, #2
 80248ca:	4413      	add	r3, r2
 80248cc:	685b      	ldr	r3, [r3, #4]
 80248ce:	0c1b      	lsrs	r3, r3, #16
 80248d0:	b2db      	uxtb	r3, r3
 80248d2:	4a21      	ldr	r2, [pc, #132]	@ (8024958 <aesInit+0x37c>)
 80248d4:	5cd3      	ldrb	r3, [r2, r3]
 80248d6:	461a      	mov	r2, r3
 80248d8:	4b20      	ldr	r3, [pc, #128]	@ (802495c <aesInit+0x380>)
 80248da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80248de:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 16);
 80248e0:	68fa      	ldr	r2, [r7, #12]
 80248e2:	69fb      	ldr	r3, [r7, #28]
 80248e4:	333c      	adds	r3, #60	@ 0x3c
 80248e6:	009b      	lsls	r3, r3, #2
 80248e8:	4413      	add	r3, r2
 80248ea:	685a      	ldr	r2, [r3, #4]
 80248ec:	697b      	ldr	r3, [r7, #20]
 80248ee:	ea4f 4333 	mov.w	r3, r3, ror #16
 80248f2:	405a      	eors	r2, r3
 80248f4:	68f9      	ldr	r1, [r7, #12]
 80248f6:	69fb      	ldr	r3, [r7, #28]
 80248f8:	333c      	adds	r3, #60	@ 0x3c
 80248fa:	009b      	lsls	r3, r3, #2
 80248fc:	440b      	add	r3, r1
 80248fe:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 24) & 0xFF]];
 8024900:	68fa      	ldr	r2, [r7, #12]
 8024902:	69fb      	ldr	r3, [r7, #28]
 8024904:	009b      	lsls	r3, r3, #2
 8024906:	4413      	add	r3, r2
 8024908:	685b      	ldr	r3, [r3, #4]
 802490a:	0e1b      	lsrs	r3, r3, #24
 802490c:	4a12      	ldr	r2, [pc, #72]	@ (8024958 <aesInit+0x37c>)
 802490e:	5cd3      	ldrb	r3, [r2, r3]
 8024910:	461a      	mov	r2, r3
 8024912:	4b12      	ldr	r3, [pc, #72]	@ (802495c <aesInit+0x380>)
 8024914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024918:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 24);
 802491a:	68fa      	ldr	r2, [r7, #12]
 802491c:	69fb      	ldr	r3, [r7, #28]
 802491e:	333c      	adds	r3, #60	@ 0x3c
 8024920:	009b      	lsls	r3, r3, #2
 8024922:	4413      	add	r3, r2
 8024924:	685a      	ldr	r2, [r3, #4]
 8024926:	697b      	ldr	r3, [r7, #20]
 8024928:	ea4f 2333 	mov.w	r3, r3, ror #8
 802492c:	405a      	eors	r2, r3
 802492e:	68f9      	ldr	r1, [r7, #12]
 8024930:	69fb      	ldr	r3, [r7, #28]
 8024932:	333c      	adds	r3, #60	@ 0x3c
 8024934:	009b      	lsls	r3, r3, #2
 8024936:	440b      	add	r3, r1
 8024938:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyScheduleSize; i++)
 802493a:	69fb      	ldr	r3, [r7, #28]
 802493c:	3301      	adds	r3, #1
 802493e:	61fb      	str	r3, [r7, #28]
 8024940:	69fa      	ldr	r2, [r7, #28]
 8024942:	69bb      	ldr	r3, [r7, #24]
 8024944:	429a      	cmp	r2, r3
 8024946:	f4ff af74 	bcc.w	8024832 <aesInit+0x256>
      }
   }

   //Successful initialization
   return NO_ERROR;
 802494a:	2300      	movs	r3, #0
}
 802494c:	4618      	mov	r0, r3
 802494e:	3724      	adds	r7, #36	@ 0x24
 8024950:	46bd      	mov	sp, r7
 8024952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024956:	4770      	bx	lr
 8024958:	080323d0 	.word	0x080323d0
 802495c:	080329d0 	.word	0x080329d0

08024960 <aesEncryptBlock>:
 * @param[out] output Ciphertext block resulting from encryption
 **/

__weak_func void aesEncryptBlock(AesContext *context, const uint8_t *input,
   uint8_t *output)
{
 8024960:	b480      	push	{r7}
 8024962:	b08f      	sub	sp, #60	@ 0x3c
 8024964:	af00      	add	r7, sp, #0
 8024966:	60f8      	str	r0, [r7, #12]
 8024968:	60b9      	str	r1, [r7, #8]
 802496a:	607a      	str	r2, [r7, #4]
   uint32_t t2;
   uint32_t t3;
   uint32_t temp;

   //Copy the plaintext to the state array
   s0 = LOAD32LE(input);
 802496c:	68bb      	ldr	r3, [r7, #8]
 802496e:	781b      	ldrb	r3, [r3, #0]
 8024970:	461a      	mov	r2, r3
 8024972:	68bb      	ldr	r3, [r7, #8]
 8024974:	3301      	adds	r3, #1
 8024976:	781b      	ldrb	r3, [r3, #0]
 8024978:	021b      	lsls	r3, r3, #8
 802497a:	431a      	orrs	r2, r3
 802497c:	68bb      	ldr	r3, [r7, #8]
 802497e:	3302      	adds	r3, #2
 8024980:	781b      	ldrb	r3, [r3, #0]
 8024982:	041b      	lsls	r3, r3, #16
 8024984:	431a      	orrs	r2, r3
 8024986:	68bb      	ldr	r3, [r7, #8]
 8024988:	3303      	adds	r3, #3
 802498a:	781b      	ldrb	r3, [r3, #0]
 802498c:	061b      	lsls	r3, r3, #24
 802498e:	4313      	orrs	r3, r2
 8024990:	633b      	str	r3, [r7, #48]	@ 0x30
   s1 = LOAD32LE(input + 4);
 8024992:	68bb      	ldr	r3, [r7, #8]
 8024994:	3304      	adds	r3, #4
 8024996:	781b      	ldrb	r3, [r3, #0]
 8024998:	461a      	mov	r2, r3
 802499a:	68bb      	ldr	r3, [r7, #8]
 802499c:	3305      	adds	r3, #5
 802499e:	781b      	ldrb	r3, [r3, #0]
 80249a0:	021b      	lsls	r3, r3, #8
 80249a2:	431a      	orrs	r2, r3
 80249a4:	68bb      	ldr	r3, [r7, #8]
 80249a6:	3306      	adds	r3, #6
 80249a8:	781b      	ldrb	r3, [r3, #0]
 80249aa:	041b      	lsls	r3, r3, #16
 80249ac:	431a      	orrs	r2, r3
 80249ae:	68bb      	ldr	r3, [r7, #8]
 80249b0:	3307      	adds	r3, #7
 80249b2:	781b      	ldrb	r3, [r3, #0]
 80249b4:	061b      	lsls	r3, r3, #24
 80249b6:	4313      	orrs	r3, r2
 80249b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   s2 = LOAD32LE(input + 8);
 80249ba:	68bb      	ldr	r3, [r7, #8]
 80249bc:	3308      	adds	r3, #8
 80249be:	781b      	ldrb	r3, [r3, #0]
 80249c0:	461a      	mov	r2, r3
 80249c2:	68bb      	ldr	r3, [r7, #8]
 80249c4:	3309      	adds	r3, #9
 80249c6:	781b      	ldrb	r3, [r3, #0]
 80249c8:	021b      	lsls	r3, r3, #8
 80249ca:	431a      	orrs	r2, r3
 80249cc:	68bb      	ldr	r3, [r7, #8]
 80249ce:	330a      	adds	r3, #10
 80249d0:	781b      	ldrb	r3, [r3, #0]
 80249d2:	041b      	lsls	r3, r3, #16
 80249d4:	431a      	orrs	r2, r3
 80249d6:	68bb      	ldr	r3, [r7, #8]
 80249d8:	330b      	adds	r3, #11
 80249da:	781b      	ldrb	r3, [r3, #0]
 80249dc:	061b      	lsls	r3, r3, #24
 80249de:	4313      	orrs	r3, r2
 80249e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   s3 = LOAD32LE(input + 12);
 80249e2:	68bb      	ldr	r3, [r7, #8]
 80249e4:	330c      	adds	r3, #12
 80249e6:	781b      	ldrb	r3, [r3, #0]
 80249e8:	461a      	mov	r2, r3
 80249ea:	68bb      	ldr	r3, [r7, #8]
 80249ec:	330d      	adds	r3, #13
 80249ee:	781b      	ldrb	r3, [r3, #0]
 80249f0:	021b      	lsls	r3, r3, #8
 80249f2:	431a      	orrs	r2, r3
 80249f4:	68bb      	ldr	r3, [r7, #8]
 80249f6:	330e      	adds	r3, #14
 80249f8:	781b      	ldrb	r3, [r3, #0]
 80249fa:	041b      	lsls	r3, r3, #16
 80249fc:	431a      	orrs	r2, r3
 80249fe:	68bb      	ldr	r3, [r7, #8]
 8024a00:	330f      	adds	r3, #15
 8024a02:	781b      	ldrb	r3, [r3, #0]
 8024a04:	061b      	lsls	r3, r3, #24
 8024a06:	4313      	orrs	r3, r2
 8024a08:	627b      	str	r3, [r7, #36]	@ 0x24

   //Initial round key addition
   s0 ^= context->ek[0];
 8024a0a:	68fb      	ldr	r3, [r7, #12]
 8024a0c:	685b      	ldr	r3, [r3, #4]
 8024a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024a10:	4053      	eors	r3, r2
 8024a12:	633b      	str	r3, [r7, #48]	@ 0x30
   s1 ^= context->ek[1];
 8024a14:	68fb      	ldr	r3, [r7, #12]
 8024a16:	689b      	ldr	r3, [r3, #8]
 8024a18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8024a1a:	4053      	eors	r3, r2
 8024a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   s2 ^= context->ek[2];
 8024a1e:	68fb      	ldr	r3, [r7, #12]
 8024a20:	68db      	ldr	r3, [r3, #12]
 8024a22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8024a24:	4053      	eors	r3, r2
 8024a26:	62bb      	str	r3, [r7, #40]	@ 0x28
   s3 ^= context->ek[3];
 8024a28:	68fb      	ldr	r3, [r7, #12]
 8024a2a:	691b      	ldr	r3, [r3, #16]
 8024a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024a2e:	4053      	eors	r3, r2
 8024a30:	627b      	str	r3, [r7, #36]	@ 0x24

   //The number of rounds depends on the key length
   for(i = 1; i < context->nr; i++)
 8024a32:	2301      	movs	r3, #1
 8024a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8024a36:	e0d9      	b.n	8024bec <aesEncryptBlock+0x28c>
   {
      //Apply round function
      t0 = te[s0 & 0xFF];
 8024a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024a3a:	b2db      	uxtb	r3, r3
 8024a3c:	4a9e      	ldr	r2, [pc, #632]	@ (8024cb8 <aesEncryptBlock+0x358>)
 8024a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024a42:	623b      	str	r3, [r7, #32]
      temp = te[(s1 >> 8) & 0xFF];
 8024a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024a46:	0a1b      	lsrs	r3, r3, #8
 8024a48:	b2db      	uxtb	r3, r3
 8024a4a:	4a9b      	ldr	r2, [pc, #620]	@ (8024cb8 <aesEncryptBlock+0x358>)
 8024a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024a50:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 8);
 8024a52:	693b      	ldr	r3, [r7, #16]
 8024a54:	ea4f 6333 	mov.w	r3, r3, ror #24
 8024a58:	6a3a      	ldr	r2, [r7, #32]
 8024a5a:	4053      	eors	r3, r2
 8024a5c:	623b      	str	r3, [r7, #32]
      temp = te[(s2 >> 16) & 0xFF];
 8024a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024a60:	0c1b      	lsrs	r3, r3, #16
 8024a62:	b2db      	uxtb	r3, r3
 8024a64:	4a94      	ldr	r2, [pc, #592]	@ (8024cb8 <aesEncryptBlock+0x358>)
 8024a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024a6a:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 16);
 8024a6c:	693b      	ldr	r3, [r7, #16]
 8024a6e:	ea4f 4333 	mov.w	r3, r3, ror #16
 8024a72:	6a3a      	ldr	r2, [r7, #32]
 8024a74:	4053      	eors	r3, r2
 8024a76:	623b      	str	r3, [r7, #32]
      temp = te[(s3 >> 24) & 0xFF];
 8024a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024a7a:	0e1b      	lsrs	r3, r3, #24
 8024a7c:	4a8e      	ldr	r2, [pc, #568]	@ (8024cb8 <aesEncryptBlock+0x358>)
 8024a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024a82:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 24);
 8024a84:	693b      	ldr	r3, [r7, #16]
 8024a86:	ea4f 2333 	mov.w	r3, r3, ror #8
 8024a8a:	6a3a      	ldr	r2, [r7, #32]
 8024a8c:	4053      	eors	r3, r2
 8024a8e:	623b      	str	r3, [r7, #32]

      t1 = te[s1 & 0xFF];
 8024a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024a92:	b2db      	uxtb	r3, r3
 8024a94:	4a88      	ldr	r2, [pc, #544]	@ (8024cb8 <aesEncryptBlock+0x358>)
 8024a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024a9a:	61fb      	str	r3, [r7, #28]
      temp = te[(s2 >> 8) & 0xFF];
 8024a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024a9e:	0a1b      	lsrs	r3, r3, #8
 8024aa0:	b2db      	uxtb	r3, r3
 8024aa2:	4a85      	ldr	r2, [pc, #532]	@ (8024cb8 <aesEncryptBlock+0x358>)
 8024aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024aa8:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 8);
 8024aaa:	693b      	ldr	r3, [r7, #16]
 8024aac:	ea4f 6333 	mov.w	r3, r3, ror #24
 8024ab0:	69fa      	ldr	r2, [r7, #28]
 8024ab2:	4053      	eors	r3, r2
 8024ab4:	61fb      	str	r3, [r7, #28]
      temp = te[(s3 >> 16) & 0xFF];
 8024ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024ab8:	0c1b      	lsrs	r3, r3, #16
 8024aba:	b2db      	uxtb	r3, r3
 8024abc:	4a7e      	ldr	r2, [pc, #504]	@ (8024cb8 <aesEncryptBlock+0x358>)
 8024abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024ac2:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 16);
 8024ac4:	693b      	ldr	r3, [r7, #16]
 8024ac6:	ea4f 4333 	mov.w	r3, r3, ror #16
 8024aca:	69fa      	ldr	r2, [r7, #28]
 8024acc:	4053      	eors	r3, r2
 8024ace:	61fb      	str	r3, [r7, #28]
      temp = te[(s0 >> 24) & 0xFF];
 8024ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024ad2:	0e1b      	lsrs	r3, r3, #24
 8024ad4:	4a78      	ldr	r2, [pc, #480]	@ (8024cb8 <aesEncryptBlock+0x358>)
 8024ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024ada:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 24);
 8024adc:	693b      	ldr	r3, [r7, #16]
 8024ade:	ea4f 2333 	mov.w	r3, r3, ror #8
 8024ae2:	69fa      	ldr	r2, [r7, #28]
 8024ae4:	4053      	eors	r3, r2
 8024ae6:	61fb      	str	r3, [r7, #28]

      t2 = te[s2 & 0xFF];
 8024ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024aea:	b2db      	uxtb	r3, r3
 8024aec:	4a72      	ldr	r2, [pc, #456]	@ (8024cb8 <aesEncryptBlock+0x358>)
 8024aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024af2:	61bb      	str	r3, [r7, #24]
      temp = te[(s3 >> 8) & 0xFF];
 8024af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024af6:	0a1b      	lsrs	r3, r3, #8
 8024af8:	b2db      	uxtb	r3, r3
 8024afa:	4a6f      	ldr	r2, [pc, #444]	@ (8024cb8 <aesEncryptBlock+0x358>)
 8024afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024b00:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 8);
 8024b02:	693b      	ldr	r3, [r7, #16]
 8024b04:	ea4f 6333 	mov.w	r3, r3, ror #24
 8024b08:	69ba      	ldr	r2, [r7, #24]
 8024b0a:	4053      	eors	r3, r2
 8024b0c:	61bb      	str	r3, [r7, #24]
      temp = te[(s0 >> 16) & 0xFF];
 8024b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024b10:	0c1b      	lsrs	r3, r3, #16
 8024b12:	b2db      	uxtb	r3, r3
 8024b14:	4a68      	ldr	r2, [pc, #416]	@ (8024cb8 <aesEncryptBlock+0x358>)
 8024b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024b1a:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 16);
 8024b1c:	693b      	ldr	r3, [r7, #16]
 8024b1e:	ea4f 4333 	mov.w	r3, r3, ror #16
 8024b22:	69ba      	ldr	r2, [r7, #24]
 8024b24:	4053      	eors	r3, r2
 8024b26:	61bb      	str	r3, [r7, #24]
      temp = te[(s1 >> 24) & 0xFF];
 8024b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024b2a:	0e1b      	lsrs	r3, r3, #24
 8024b2c:	4a62      	ldr	r2, [pc, #392]	@ (8024cb8 <aesEncryptBlock+0x358>)
 8024b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024b32:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 24);
 8024b34:	693b      	ldr	r3, [r7, #16]
 8024b36:	ea4f 2333 	mov.w	r3, r3, ror #8
 8024b3a:	69ba      	ldr	r2, [r7, #24]
 8024b3c:	4053      	eors	r3, r2
 8024b3e:	61bb      	str	r3, [r7, #24]

      t3 = te[s3 & 0xFF];
 8024b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024b42:	b2db      	uxtb	r3, r3
 8024b44:	4a5c      	ldr	r2, [pc, #368]	@ (8024cb8 <aesEncryptBlock+0x358>)
 8024b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024b4a:	617b      	str	r3, [r7, #20]
      temp = te[(s0 >> 8) & 0xFF];
 8024b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024b4e:	0a1b      	lsrs	r3, r3, #8
 8024b50:	b2db      	uxtb	r3, r3
 8024b52:	4a59      	ldr	r2, [pc, #356]	@ (8024cb8 <aesEncryptBlock+0x358>)
 8024b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024b58:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 8);
 8024b5a:	693b      	ldr	r3, [r7, #16]
 8024b5c:	ea4f 6333 	mov.w	r3, r3, ror #24
 8024b60:	697a      	ldr	r2, [r7, #20]
 8024b62:	4053      	eors	r3, r2
 8024b64:	617b      	str	r3, [r7, #20]
      temp = te[(s1 >> 16) & 0xFF];
 8024b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024b68:	0c1b      	lsrs	r3, r3, #16
 8024b6a:	b2db      	uxtb	r3, r3
 8024b6c:	4a52      	ldr	r2, [pc, #328]	@ (8024cb8 <aesEncryptBlock+0x358>)
 8024b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024b72:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 16);
 8024b74:	693b      	ldr	r3, [r7, #16]
 8024b76:	ea4f 4333 	mov.w	r3, r3, ror #16
 8024b7a:	697a      	ldr	r2, [r7, #20]
 8024b7c:	4053      	eors	r3, r2
 8024b7e:	617b      	str	r3, [r7, #20]
      temp = te[(s2 >> 24) & 0xFF];
 8024b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024b82:	0e1b      	lsrs	r3, r3, #24
 8024b84:	4a4c      	ldr	r2, [pc, #304]	@ (8024cb8 <aesEncryptBlock+0x358>)
 8024b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024b8a:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 24);
 8024b8c:	693b      	ldr	r3, [r7, #16]
 8024b8e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8024b92:	697a      	ldr	r2, [r7, #20]
 8024b94:	4053      	eors	r3, r2
 8024b96:	617b      	str	r3, [r7, #20]

      //Round key addition
      s0 = t0 ^ context->ek[i * 4];
 8024b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024b9a:	009b      	lsls	r3, r3, #2
 8024b9c:	68fa      	ldr	r2, [r7, #12]
 8024b9e:	009b      	lsls	r3, r3, #2
 8024ba0:	4413      	add	r3, r2
 8024ba2:	685b      	ldr	r3, [r3, #4]
 8024ba4:	6a3a      	ldr	r2, [r7, #32]
 8024ba6:	4053      	eors	r3, r2
 8024ba8:	633b      	str	r3, [r7, #48]	@ 0x30
      s1 = t1 ^ context->ek[i * 4 + 1];
 8024baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024bac:	009b      	lsls	r3, r3, #2
 8024bae:	3301      	adds	r3, #1
 8024bb0:	68fa      	ldr	r2, [r7, #12]
 8024bb2:	009b      	lsls	r3, r3, #2
 8024bb4:	4413      	add	r3, r2
 8024bb6:	685b      	ldr	r3, [r3, #4]
 8024bb8:	69fa      	ldr	r2, [r7, #28]
 8024bba:	4053      	eors	r3, r2
 8024bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s2 = t2 ^ context->ek[i * 4 + 2];
 8024bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024bc0:	009b      	lsls	r3, r3, #2
 8024bc2:	3302      	adds	r3, #2
 8024bc4:	68fa      	ldr	r2, [r7, #12]
 8024bc6:	009b      	lsls	r3, r3, #2
 8024bc8:	4413      	add	r3, r2
 8024bca:	685b      	ldr	r3, [r3, #4]
 8024bcc:	69ba      	ldr	r2, [r7, #24]
 8024bce:	4053      	eors	r3, r2
 8024bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      s3 = t3 ^ context->ek[i * 4 + 3];
 8024bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024bd4:	009b      	lsls	r3, r3, #2
 8024bd6:	3303      	adds	r3, #3
 8024bd8:	68fa      	ldr	r2, [r7, #12]
 8024bda:	009b      	lsls	r3, r3, #2
 8024bdc:	4413      	add	r3, r2
 8024bde:	685b      	ldr	r3, [r3, #4]
 8024be0:	697a      	ldr	r2, [r7, #20]
 8024be2:	4053      	eors	r3, r2
 8024be4:	627b      	str	r3, [r7, #36]	@ 0x24
   for(i = 1; i < context->nr; i++)
 8024be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024be8:	3301      	adds	r3, #1
 8024bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8024bec:	68fb      	ldr	r3, [r7, #12]
 8024bee:	681b      	ldr	r3, [r3, #0]
 8024bf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8024bf2:	429a      	cmp	r2, r3
 8024bf4:	f4ff af20 	bcc.w	8024a38 <aesEncryptBlock+0xd8>
   }

   //The last round differs slightly from the first rounds
   t0 = (uint32_t) sbox[s0 & 0xFF];
 8024bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024bfa:	b2db      	uxtb	r3, r3
 8024bfc:	4a2f      	ldr	r2, [pc, #188]	@ (8024cbc <aesEncryptBlock+0x35c>)
 8024bfe:	5cd3      	ldrb	r3, [r2, r3]
 8024c00:	623b      	str	r3, [r7, #32]
   t0 |= (uint32_t) sbox[(s1 >> 8) & 0xFF] << 8;
 8024c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024c04:	0a1b      	lsrs	r3, r3, #8
 8024c06:	b2db      	uxtb	r3, r3
 8024c08:	4a2c      	ldr	r2, [pc, #176]	@ (8024cbc <aesEncryptBlock+0x35c>)
 8024c0a:	5cd3      	ldrb	r3, [r2, r3]
 8024c0c:	021b      	lsls	r3, r3, #8
 8024c0e:	6a3a      	ldr	r2, [r7, #32]
 8024c10:	4313      	orrs	r3, r2
 8024c12:	623b      	str	r3, [r7, #32]
   t0 |= (uint32_t) sbox[(s2 >> 16) & 0xFF] << 16;
 8024c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024c16:	0c1b      	lsrs	r3, r3, #16
 8024c18:	b2db      	uxtb	r3, r3
 8024c1a:	4a28      	ldr	r2, [pc, #160]	@ (8024cbc <aesEncryptBlock+0x35c>)
 8024c1c:	5cd3      	ldrb	r3, [r2, r3]
 8024c1e:	041b      	lsls	r3, r3, #16
 8024c20:	6a3a      	ldr	r2, [r7, #32]
 8024c22:	4313      	orrs	r3, r2
 8024c24:	623b      	str	r3, [r7, #32]
   t0 |= (uint32_t) sbox[(s3 >> 24) & 0xFF] << 24;
 8024c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024c28:	0e1b      	lsrs	r3, r3, #24
 8024c2a:	4a24      	ldr	r2, [pc, #144]	@ (8024cbc <aesEncryptBlock+0x35c>)
 8024c2c:	5cd3      	ldrb	r3, [r2, r3]
 8024c2e:	061b      	lsls	r3, r3, #24
 8024c30:	6a3a      	ldr	r2, [r7, #32]
 8024c32:	4313      	orrs	r3, r2
 8024c34:	623b      	str	r3, [r7, #32]

   t1 = (uint32_t) sbox[s1 & 0xFF];
 8024c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024c38:	b2db      	uxtb	r3, r3
 8024c3a:	4a20      	ldr	r2, [pc, #128]	@ (8024cbc <aesEncryptBlock+0x35c>)
 8024c3c:	5cd3      	ldrb	r3, [r2, r3]
 8024c3e:	61fb      	str	r3, [r7, #28]
   t1 |= (uint32_t) sbox[(s2 >> 8) & 0xFF] << 8;
 8024c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024c42:	0a1b      	lsrs	r3, r3, #8
 8024c44:	b2db      	uxtb	r3, r3
 8024c46:	4a1d      	ldr	r2, [pc, #116]	@ (8024cbc <aesEncryptBlock+0x35c>)
 8024c48:	5cd3      	ldrb	r3, [r2, r3]
 8024c4a:	021b      	lsls	r3, r3, #8
 8024c4c:	69fa      	ldr	r2, [r7, #28]
 8024c4e:	4313      	orrs	r3, r2
 8024c50:	61fb      	str	r3, [r7, #28]
   t1 |= (uint32_t) sbox[(s3 >> 16) & 0xFF] << 16;
 8024c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024c54:	0c1b      	lsrs	r3, r3, #16
 8024c56:	b2db      	uxtb	r3, r3
 8024c58:	4a18      	ldr	r2, [pc, #96]	@ (8024cbc <aesEncryptBlock+0x35c>)
 8024c5a:	5cd3      	ldrb	r3, [r2, r3]
 8024c5c:	041b      	lsls	r3, r3, #16
 8024c5e:	69fa      	ldr	r2, [r7, #28]
 8024c60:	4313      	orrs	r3, r2
 8024c62:	61fb      	str	r3, [r7, #28]
   t1 |= (uint32_t) sbox[(s0 >> 24) & 0xFF] << 24;
 8024c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024c66:	0e1b      	lsrs	r3, r3, #24
 8024c68:	4a14      	ldr	r2, [pc, #80]	@ (8024cbc <aesEncryptBlock+0x35c>)
 8024c6a:	5cd3      	ldrb	r3, [r2, r3]
 8024c6c:	061b      	lsls	r3, r3, #24
 8024c6e:	69fa      	ldr	r2, [r7, #28]
 8024c70:	4313      	orrs	r3, r2
 8024c72:	61fb      	str	r3, [r7, #28]

   t2 = (uint32_t) sbox[s2 & 0xFF];
 8024c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024c76:	b2db      	uxtb	r3, r3
 8024c78:	4a10      	ldr	r2, [pc, #64]	@ (8024cbc <aesEncryptBlock+0x35c>)
 8024c7a:	5cd3      	ldrb	r3, [r2, r3]
 8024c7c:	61bb      	str	r3, [r7, #24]
   t2 |= (uint32_t) sbox[(s3 >> 8) & 0xFF] << 8;
 8024c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024c80:	0a1b      	lsrs	r3, r3, #8
 8024c82:	b2db      	uxtb	r3, r3
 8024c84:	4a0d      	ldr	r2, [pc, #52]	@ (8024cbc <aesEncryptBlock+0x35c>)
 8024c86:	5cd3      	ldrb	r3, [r2, r3]
 8024c88:	021b      	lsls	r3, r3, #8
 8024c8a:	69ba      	ldr	r2, [r7, #24]
 8024c8c:	4313      	orrs	r3, r2
 8024c8e:	61bb      	str	r3, [r7, #24]
   t2 |= (uint32_t) sbox[(s0 >> 16) & 0xFF] << 16;
 8024c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024c92:	0c1b      	lsrs	r3, r3, #16
 8024c94:	b2db      	uxtb	r3, r3
 8024c96:	4a09      	ldr	r2, [pc, #36]	@ (8024cbc <aesEncryptBlock+0x35c>)
 8024c98:	5cd3      	ldrb	r3, [r2, r3]
 8024c9a:	041b      	lsls	r3, r3, #16
 8024c9c:	69ba      	ldr	r2, [r7, #24]
 8024c9e:	4313      	orrs	r3, r2
 8024ca0:	61bb      	str	r3, [r7, #24]
   t2 |= (uint32_t) sbox[(s1 >> 24) & 0xFF] << 24;
 8024ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024ca4:	0e1b      	lsrs	r3, r3, #24
 8024ca6:	4a05      	ldr	r2, [pc, #20]	@ (8024cbc <aesEncryptBlock+0x35c>)
 8024ca8:	5cd3      	ldrb	r3, [r2, r3]
 8024caa:	061b      	lsls	r3, r3, #24
 8024cac:	69ba      	ldr	r2, [r7, #24]
 8024cae:	4313      	orrs	r3, r2
 8024cb0:	61bb      	str	r3, [r7, #24]

   t3 = (uint32_t) sbox[s3 & 0xFF];
 8024cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024cb4:	b2db      	uxtb	r3, r3
 8024cb6:	e003      	b.n	8024cc0 <aesEncryptBlock+0x360>
 8024cb8:	080325d0 	.word	0x080325d0
 8024cbc:	080323d0 	.word	0x080323d0
 8024cc0:	4a54      	ldr	r2, [pc, #336]	@ (8024e14 <aesEncryptBlock+0x4b4>)
 8024cc2:	5cd3      	ldrb	r3, [r2, r3]
 8024cc4:	617b      	str	r3, [r7, #20]
   t3 |= (uint32_t) sbox[(s0 >> 8) & 0xFF] << 8;
 8024cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024cc8:	0a1b      	lsrs	r3, r3, #8
 8024cca:	b2db      	uxtb	r3, r3
 8024ccc:	4a51      	ldr	r2, [pc, #324]	@ (8024e14 <aesEncryptBlock+0x4b4>)
 8024cce:	5cd3      	ldrb	r3, [r2, r3]
 8024cd0:	021b      	lsls	r3, r3, #8
 8024cd2:	697a      	ldr	r2, [r7, #20]
 8024cd4:	4313      	orrs	r3, r2
 8024cd6:	617b      	str	r3, [r7, #20]
   t3 |= (uint32_t) sbox[(s1 >> 16) & 0xFF] << 16;
 8024cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024cda:	0c1b      	lsrs	r3, r3, #16
 8024cdc:	b2db      	uxtb	r3, r3
 8024cde:	4a4d      	ldr	r2, [pc, #308]	@ (8024e14 <aesEncryptBlock+0x4b4>)
 8024ce0:	5cd3      	ldrb	r3, [r2, r3]
 8024ce2:	041b      	lsls	r3, r3, #16
 8024ce4:	697a      	ldr	r2, [r7, #20]
 8024ce6:	4313      	orrs	r3, r2
 8024ce8:	617b      	str	r3, [r7, #20]
   t3 |= (uint32_t) sbox[(s2 >> 24) & 0xFF] << 24;
 8024cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024cec:	0e1b      	lsrs	r3, r3, #24
 8024cee:	4a49      	ldr	r2, [pc, #292]	@ (8024e14 <aesEncryptBlock+0x4b4>)
 8024cf0:	5cd3      	ldrb	r3, [r2, r3]
 8024cf2:	061b      	lsls	r3, r3, #24
 8024cf4:	697a      	ldr	r2, [r7, #20]
 8024cf6:	4313      	orrs	r3, r2
 8024cf8:	617b      	str	r3, [r7, #20]

   //Last round key addition
   s0 = t0 ^ context->ek[context->nr * 4];
 8024cfa:	68fb      	ldr	r3, [r7, #12]
 8024cfc:	681b      	ldr	r3, [r3, #0]
 8024cfe:	009b      	lsls	r3, r3, #2
 8024d00:	68fa      	ldr	r2, [r7, #12]
 8024d02:	009b      	lsls	r3, r3, #2
 8024d04:	4413      	add	r3, r2
 8024d06:	685b      	ldr	r3, [r3, #4]
 8024d08:	6a3a      	ldr	r2, [r7, #32]
 8024d0a:	4053      	eors	r3, r2
 8024d0c:	633b      	str	r3, [r7, #48]	@ 0x30
   s1 = t1 ^ context->ek[context->nr * 4 + 1];
 8024d0e:	68fb      	ldr	r3, [r7, #12]
 8024d10:	681b      	ldr	r3, [r3, #0]
 8024d12:	009b      	lsls	r3, r3, #2
 8024d14:	3301      	adds	r3, #1
 8024d16:	68fa      	ldr	r2, [r7, #12]
 8024d18:	009b      	lsls	r3, r3, #2
 8024d1a:	4413      	add	r3, r2
 8024d1c:	685b      	ldr	r3, [r3, #4]
 8024d1e:	69fa      	ldr	r2, [r7, #28]
 8024d20:	4053      	eors	r3, r2
 8024d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   s2 = t2 ^ context->ek[context->nr * 4 + 2];
 8024d24:	68fb      	ldr	r3, [r7, #12]
 8024d26:	681b      	ldr	r3, [r3, #0]
 8024d28:	009b      	lsls	r3, r3, #2
 8024d2a:	3302      	adds	r3, #2
 8024d2c:	68fa      	ldr	r2, [r7, #12]
 8024d2e:	009b      	lsls	r3, r3, #2
 8024d30:	4413      	add	r3, r2
 8024d32:	685b      	ldr	r3, [r3, #4]
 8024d34:	69ba      	ldr	r2, [r7, #24]
 8024d36:	4053      	eors	r3, r2
 8024d38:	62bb      	str	r3, [r7, #40]	@ 0x28
   s3 = t3 ^ context->ek[context->nr * 4 + 3];
 8024d3a:	68fb      	ldr	r3, [r7, #12]
 8024d3c:	681b      	ldr	r3, [r3, #0]
 8024d3e:	009b      	lsls	r3, r3, #2
 8024d40:	3303      	adds	r3, #3
 8024d42:	68fa      	ldr	r2, [r7, #12]
 8024d44:	009b      	lsls	r3, r3, #2
 8024d46:	4413      	add	r3, r2
 8024d48:	685b      	ldr	r3, [r3, #4]
 8024d4a:	697a      	ldr	r2, [r7, #20]
 8024d4c:	4053      	eors	r3, r2
 8024d4e:	627b      	str	r3, [r7, #36]	@ 0x24

   //The final state is then copied to the output
   STORE32LE(s0, output);
 8024d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024d52:	b2da      	uxtb	r2, r3
 8024d54:	687b      	ldr	r3, [r7, #4]
 8024d56:	701a      	strb	r2, [r3, #0]
 8024d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024d5a:	0a1a      	lsrs	r2, r3, #8
 8024d5c:	687b      	ldr	r3, [r7, #4]
 8024d5e:	3301      	adds	r3, #1
 8024d60:	b2d2      	uxtb	r2, r2
 8024d62:	701a      	strb	r2, [r3, #0]
 8024d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024d66:	0c1a      	lsrs	r2, r3, #16
 8024d68:	687b      	ldr	r3, [r7, #4]
 8024d6a:	3302      	adds	r3, #2
 8024d6c:	b2d2      	uxtb	r2, r2
 8024d6e:	701a      	strb	r2, [r3, #0]
 8024d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024d72:	0e1a      	lsrs	r2, r3, #24
 8024d74:	687b      	ldr	r3, [r7, #4]
 8024d76:	3303      	adds	r3, #3
 8024d78:	b2d2      	uxtb	r2, r2
 8024d7a:	701a      	strb	r2, [r3, #0]
   STORE32LE(s1, output + 4);
 8024d7c:	687b      	ldr	r3, [r7, #4]
 8024d7e:	3304      	adds	r3, #4
 8024d80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8024d82:	b2d2      	uxtb	r2, r2
 8024d84:	701a      	strb	r2, [r3, #0]
 8024d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024d88:	0a1a      	lsrs	r2, r3, #8
 8024d8a:	687b      	ldr	r3, [r7, #4]
 8024d8c:	3305      	adds	r3, #5
 8024d8e:	b2d2      	uxtb	r2, r2
 8024d90:	701a      	strb	r2, [r3, #0]
 8024d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024d94:	0c1a      	lsrs	r2, r3, #16
 8024d96:	687b      	ldr	r3, [r7, #4]
 8024d98:	3306      	adds	r3, #6
 8024d9a:	b2d2      	uxtb	r2, r2
 8024d9c:	701a      	strb	r2, [r3, #0]
 8024d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024da0:	0e1a      	lsrs	r2, r3, #24
 8024da2:	687b      	ldr	r3, [r7, #4]
 8024da4:	3307      	adds	r3, #7
 8024da6:	b2d2      	uxtb	r2, r2
 8024da8:	701a      	strb	r2, [r3, #0]
   STORE32LE(s2, output + 8);
 8024daa:	687b      	ldr	r3, [r7, #4]
 8024dac:	3308      	adds	r3, #8
 8024dae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8024db0:	b2d2      	uxtb	r2, r2
 8024db2:	701a      	strb	r2, [r3, #0]
 8024db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024db6:	0a1a      	lsrs	r2, r3, #8
 8024db8:	687b      	ldr	r3, [r7, #4]
 8024dba:	3309      	adds	r3, #9
 8024dbc:	b2d2      	uxtb	r2, r2
 8024dbe:	701a      	strb	r2, [r3, #0]
 8024dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024dc2:	0c1a      	lsrs	r2, r3, #16
 8024dc4:	687b      	ldr	r3, [r7, #4]
 8024dc6:	330a      	adds	r3, #10
 8024dc8:	b2d2      	uxtb	r2, r2
 8024dca:	701a      	strb	r2, [r3, #0]
 8024dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024dce:	0e1a      	lsrs	r2, r3, #24
 8024dd0:	687b      	ldr	r3, [r7, #4]
 8024dd2:	330b      	adds	r3, #11
 8024dd4:	b2d2      	uxtb	r2, r2
 8024dd6:	701a      	strb	r2, [r3, #0]
   STORE32LE(s3, output + 12);
 8024dd8:	687b      	ldr	r3, [r7, #4]
 8024dda:	330c      	adds	r3, #12
 8024ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024dde:	b2d2      	uxtb	r2, r2
 8024de0:	701a      	strb	r2, [r3, #0]
 8024de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024de4:	0a1a      	lsrs	r2, r3, #8
 8024de6:	687b      	ldr	r3, [r7, #4]
 8024de8:	330d      	adds	r3, #13
 8024dea:	b2d2      	uxtb	r2, r2
 8024dec:	701a      	strb	r2, [r3, #0]
 8024dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024df0:	0c1a      	lsrs	r2, r3, #16
 8024df2:	687b      	ldr	r3, [r7, #4]
 8024df4:	330e      	adds	r3, #14
 8024df6:	b2d2      	uxtb	r2, r2
 8024df8:	701a      	strb	r2, [r3, #0]
 8024dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024dfc:	0e1a      	lsrs	r2, r3, #24
 8024dfe:	687b      	ldr	r3, [r7, #4]
 8024e00:	330f      	adds	r3, #15
 8024e02:	b2d2      	uxtb	r2, r2
 8024e04:	701a      	strb	r2, [r3, #0]
}
 8024e06:	bf00      	nop
 8024e08:	373c      	adds	r7, #60	@ 0x3c
 8024e0a:	46bd      	mov	sp, r7
 8024e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e10:	4770      	bx	lr
 8024e12:	bf00      	nop
 8024e14:	080323d0 	.word	0x080323d0

08024e18 <aesDecryptBlock>:
 * @param[out] output Plaintext block resulting from decryption
 **/

__weak_func void aesDecryptBlock(AesContext *context, const uint8_t *input,
   uint8_t *output)
{
 8024e18:	b480      	push	{r7}
 8024e1a:	b08f      	sub	sp, #60	@ 0x3c
 8024e1c:	af00      	add	r7, sp, #0
 8024e1e:	60f8      	str	r0, [r7, #12]
 8024e20:	60b9      	str	r1, [r7, #8]
 8024e22:	607a      	str	r2, [r7, #4]
   uint32_t t2;
   uint32_t t3;
   uint32_t temp;

   //Copy the ciphertext to the state array
   s0 = LOAD32LE(input);
 8024e24:	68bb      	ldr	r3, [r7, #8]
 8024e26:	781b      	ldrb	r3, [r3, #0]
 8024e28:	461a      	mov	r2, r3
 8024e2a:	68bb      	ldr	r3, [r7, #8]
 8024e2c:	3301      	adds	r3, #1
 8024e2e:	781b      	ldrb	r3, [r3, #0]
 8024e30:	021b      	lsls	r3, r3, #8
 8024e32:	431a      	orrs	r2, r3
 8024e34:	68bb      	ldr	r3, [r7, #8]
 8024e36:	3302      	adds	r3, #2
 8024e38:	781b      	ldrb	r3, [r3, #0]
 8024e3a:	041b      	lsls	r3, r3, #16
 8024e3c:	431a      	orrs	r2, r3
 8024e3e:	68bb      	ldr	r3, [r7, #8]
 8024e40:	3303      	adds	r3, #3
 8024e42:	781b      	ldrb	r3, [r3, #0]
 8024e44:	061b      	lsls	r3, r3, #24
 8024e46:	4313      	orrs	r3, r2
 8024e48:	633b      	str	r3, [r7, #48]	@ 0x30
   s1 = LOAD32LE(input + 4);
 8024e4a:	68bb      	ldr	r3, [r7, #8]
 8024e4c:	3304      	adds	r3, #4
 8024e4e:	781b      	ldrb	r3, [r3, #0]
 8024e50:	461a      	mov	r2, r3
 8024e52:	68bb      	ldr	r3, [r7, #8]
 8024e54:	3305      	adds	r3, #5
 8024e56:	781b      	ldrb	r3, [r3, #0]
 8024e58:	021b      	lsls	r3, r3, #8
 8024e5a:	431a      	orrs	r2, r3
 8024e5c:	68bb      	ldr	r3, [r7, #8]
 8024e5e:	3306      	adds	r3, #6
 8024e60:	781b      	ldrb	r3, [r3, #0]
 8024e62:	041b      	lsls	r3, r3, #16
 8024e64:	431a      	orrs	r2, r3
 8024e66:	68bb      	ldr	r3, [r7, #8]
 8024e68:	3307      	adds	r3, #7
 8024e6a:	781b      	ldrb	r3, [r3, #0]
 8024e6c:	061b      	lsls	r3, r3, #24
 8024e6e:	4313      	orrs	r3, r2
 8024e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   s2 = LOAD32LE(input + 8);
 8024e72:	68bb      	ldr	r3, [r7, #8]
 8024e74:	3308      	adds	r3, #8
 8024e76:	781b      	ldrb	r3, [r3, #0]
 8024e78:	461a      	mov	r2, r3
 8024e7a:	68bb      	ldr	r3, [r7, #8]
 8024e7c:	3309      	adds	r3, #9
 8024e7e:	781b      	ldrb	r3, [r3, #0]
 8024e80:	021b      	lsls	r3, r3, #8
 8024e82:	431a      	orrs	r2, r3
 8024e84:	68bb      	ldr	r3, [r7, #8]
 8024e86:	330a      	adds	r3, #10
 8024e88:	781b      	ldrb	r3, [r3, #0]
 8024e8a:	041b      	lsls	r3, r3, #16
 8024e8c:	431a      	orrs	r2, r3
 8024e8e:	68bb      	ldr	r3, [r7, #8]
 8024e90:	330b      	adds	r3, #11
 8024e92:	781b      	ldrb	r3, [r3, #0]
 8024e94:	061b      	lsls	r3, r3, #24
 8024e96:	4313      	orrs	r3, r2
 8024e98:	62bb      	str	r3, [r7, #40]	@ 0x28
   s3 = LOAD32LE(input + 12);
 8024e9a:	68bb      	ldr	r3, [r7, #8]
 8024e9c:	330c      	adds	r3, #12
 8024e9e:	781b      	ldrb	r3, [r3, #0]
 8024ea0:	461a      	mov	r2, r3
 8024ea2:	68bb      	ldr	r3, [r7, #8]
 8024ea4:	330d      	adds	r3, #13
 8024ea6:	781b      	ldrb	r3, [r3, #0]
 8024ea8:	021b      	lsls	r3, r3, #8
 8024eaa:	431a      	orrs	r2, r3
 8024eac:	68bb      	ldr	r3, [r7, #8]
 8024eae:	330e      	adds	r3, #14
 8024eb0:	781b      	ldrb	r3, [r3, #0]
 8024eb2:	041b      	lsls	r3, r3, #16
 8024eb4:	431a      	orrs	r2, r3
 8024eb6:	68bb      	ldr	r3, [r7, #8]
 8024eb8:	330f      	adds	r3, #15
 8024eba:	781b      	ldrb	r3, [r3, #0]
 8024ebc:	061b      	lsls	r3, r3, #24
 8024ebe:	4313      	orrs	r3, r2
 8024ec0:	627b      	str	r3, [r7, #36]	@ 0x24

   //Initial round key addition
   s0 ^= context->dk[context->nr * 4];
 8024ec2:	68fb      	ldr	r3, [r7, #12]
 8024ec4:	681b      	ldr	r3, [r3, #0]
 8024ec6:	009b      	lsls	r3, r3, #2
 8024ec8:	68fa      	ldr	r2, [r7, #12]
 8024eca:	333c      	adds	r3, #60	@ 0x3c
 8024ecc:	009b      	lsls	r3, r3, #2
 8024ece:	4413      	add	r3, r2
 8024ed0:	685b      	ldr	r3, [r3, #4]
 8024ed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024ed4:	4053      	eors	r3, r2
 8024ed6:	633b      	str	r3, [r7, #48]	@ 0x30
   s1 ^= context->dk[context->nr * 4 + 1];
 8024ed8:	68fb      	ldr	r3, [r7, #12]
 8024eda:	681b      	ldr	r3, [r3, #0]
 8024edc:	009b      	lsls	r3, r3, #2
 8024ede:	3301      	adds	r3, #1
 8024ee0:	68fa      	ldr	r2, [r7, #12]
 8024ee2:	333c      	adds	r3, #60	@ 0x3c
 8024ee4:	009b      	lsls	r3, r3, #2
 8024ee6:	4413      	add	r3, r2
 8024ee8:	685b      	ldr	r3, [r3, #4]
 8024eea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8024eec:	4053      	eors	r3, r2
 8024eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   s2 ^= context->dk[context->nr * 4 + 2];
 8024ef0:	68fb      	ldr	r3, [r7, #12]
 8024ef2:	681b      	ldr	r3, [r3, #0]
 8024ef4:	009b      	lsls	r3, r3, #2
 8024ef6:	3302      	adds	r3, #2
 8024ef8:	68fa      	ldr	r2, [r7, #12]
 8024efa:	333c      	adds	r3, #60	@ 0x3c
 8024efc:	009b      	lsls	r3, r3, #2
 8024efe:	4413      	add	r3, r2
 8024f00:	685b      	ldr	r3, [r3, #4]
 8024f02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8024f04:	4053      	eors	r3, r2
 8024f06:	62bb      	str	r3, [r7, #40]	@ 0x28
   s3 ^= context->dk[context->nr * 4 + 3];
 8024f08:	68fb      	ldr	r3, [r7, #12]
 8024f0a:	681b      	ldr	r3, [r3, #0]
 8024f0c:	009b      	lsls	r3, r3, #2
 8024f0e:	3303      	adds	r3, #3
 8024f10:	68fa      	ldr	r2, [r7, #12]
 8024f12:	333c      	adds	r3, #60	@ 0x3c
 8024f14:	009b      	lsls	r3, r3, #2
 8024f16:	4413      	add	r3, r2
 8024f18:	685b      	ldr	r3, [r3, #4]
 8024f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024f1c:	4053      	eors	r3, r2
 8024f1e:	627b      	str	r3, [r7, #36]	@ 0x24

   //The number of rounds depends on the key length
   for(i = context->nr - 1; i >= 1; i--)
 8024f20:	68fb      	ldr	r3, [r7, #12]
 8024f22:	681b      	ldr	r3, [r3, #0]
 8024f24:	3b01      	subs	r3, #1
 8024f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8024f28:	e0dd      	b.n	80250e6 <aesDecryptBlock+0x2ce>
   {
      //Apply round function
      t0 = td[s0 & 0xFF];
 8024f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024f2c:	b2db      	uxtb	r3, r3
 8024f2e:	4aa0      	ldr	r2, [pc, #640]	@ (80251b0 <aesDecryptBlock+0x398>)
 8024f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024f34:	623b      	str	r3, [r7, #32]
      temp = td[(s3 >> 8) & 0xFF];
 8024f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024f38:	0a1b      	lsrs	r3, r3, #8
 8024f3a:	b2db      	uxtb	r3, r3
 8024f3c:	4a9c      	ldr	r2, [pc, #624]	@ (80251b0 <aesDecryptBlock+0x398>)
 8024f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024f42:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 8);
 8024f44:	693b      	ldr	r3, [r7, #16]
 8024f46:	ea4f 6333 	mov.w	r3, r3, ror #24
 8024f4a:	6a3a      	ldr	r2, [r7, #32]
 8024f4c:	4053      	eors	r3, r2
 8024f4e:	623b      	str	r3, [r7, #32]
      temp = td[(s2 >> 16) & 0xFF];
 8024f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024f52:	0c1b      	lsrs	r3, r3, #16
 8024f54:	b2db      	uxtb	r3, r3
 8024f56:	4a96      	ldr	r2, [pc, #600]	@ (80251b0 <aesDecryptBlock+0x398>)
 8024f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024f5c:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 16);
 8024f5e:	693b      	ldr	r3, [r7, #16]
 8024f60:	ea4f 4333 	mov.w	r3, r3, ror #16
 8024f64:	6a3a      	ldr	r2, [r7, #32]
 8024f66:	4053      	eors	r3, r2
 8024f68:	623b      	str	r3, [r7, #32]
      temp = td[(s1 >> 24) & 0xFF];
 8024f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024f6c:	0e1b      	lsrs	r3, r3, #24
 8024f6e:	4a90      	ldr	r2, [pc, #576]	@ (80251b0 <aesDecryptBlock+0x398>)
 8024f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024f74:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 24);
 8024f76:	693b      	ldr	r3, [r7, #16]
 8024f78:	ea4f 2333 	mov.w	r3, r3, ror #8
 8024f7c:	6a3a      	ldr	r2, [r7, #32]
 8024f7e:	4053      	eors	r3, r2
 8024f80:	623b      	str	r3, [r7, #32]

      t1 = td[s1 & 0xFF];
 8024f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024f84:	b2db      	uxtb	r3, r3
 8024f86:	4a8a      	ldr	r2, [pc, #552]	@ (80251b0 <aesDecryptBlock+0x398>)
 8024f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024f8c:	61fb      	str	r3, [r7, #28]
      temp = td[(s0 >> 8) & 0xFF];
 8024f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024f90:	0a1b      	lsrs	r3, r3, #8
 8024f92:	b2db      	uxtb	r3, r3
 8024f94:	4a86      	ldr	r2, [pc, #536]	@ (80251b0 <aesDecryptBlock+0x398>)
 8024f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024f9a:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 8);
 8024f9c:	693b      	ldr	r3, [r7, #16]
 8024f9e:	ea4f 6333 	mov.w	r3, r3, ror #24
 8024fa2:	69fa      	ldr	r2, [r7, #28]
 8024fa4:	4053      	eors	r3, r2
 8024fa6:	61fb      	str	r3, [r7, #28]
      temp = td[(s3 >> 16) & 0xFF];
 8024fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024faa:	0c1b      	lsrs	r3, r3, #16
 8024fac:	b2db      	uxtb	r3, r3
 8024fae:	4a80      	ldr	r2, [pc, #512]	@ (80251b0 <aesDecryptBlock+0x398>)
 8024fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024fb4:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 16);
 8024fb6:	693b      	ldr	r3, [r7, #16]
 8024fb8:	ea4f 4333 	mov.w	r3, r3, ror #16
 8024fbc:	69fa      	ldr	r2, [r7, #28]
 8024fbe:	4053      	eors	r3, r2
 8024fc0:	61fb      	str	r3, [r7, #28]
      temp = td[(s2 >> 24) & 0xFF];
 8024fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024fc4:	0e1b      	lsrs	r3, r3, #24
 8024fc6:	4a7a      	ldr	r2, [pc, #488]	@ (80251b0 <aesDecryptBlock+0x398>)
 8024fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024fcc:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 24);
 8024fce:	693b      	ldr	r3, [r7, #16]
 8024fd0:	ea4f 2333 	mov.w	r3, r3, ror #8
 8024fd4:	69fa      	ldr	r2, [r7, #28]
 8024fd6:	4053      	eors	r3, r2
 8024fd8:	61fb      	str	r3, [r7, #28]

      t2 = td[s2 & 0xFF];
 8024fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024fdc:	b2db      	uxtb	r3, r3
 8024fde:	4a74      	ldr	r2, [pc, #464]	@ (80251b0 <aesDecryptBlock+0x398>)
 8024fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024fe4:	61bb      	str	r3, [r7, #24]
      temp = td[(s1 >> 8) & 0xFF];
 8024fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024fe8:	0a1b      	lsrs	r3, r3, #8
 8024fea:	b2db      	uxtb	r3, r3
 8024fec:	4a70      	ldr	r2, [pc, #448]	@ (80251b0 <aesDecryptBlock+0x398>)
 8024fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024ff2:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 8);
 8024ff4:	693b      	ldr	r3, [r7, #16]
 8024ff6:	ea4f 6333 	mov.w	r3, r3, ror #24
 8024ffa:	69ba      	ldr	r2, [r7, #24]
 8024ffc:	4053      	eors	r3, r2
 8024ffe:	61bb      	str	r3, [r7, #24]
      temp = td[(s0 >> 16) & 0xFF];
 8025000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025002:	0c1b      	lsrs	r3, r3, #16
 8025004:	b2db      	uxtb	r3, r3
 8025006:	4a6a      	ldr	r2, [pc, #424]	@ (80251b0 <aesDecryptBlock+0x398>)
 8025008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802500c:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 16);
 802500e:	693b      	ldr	r3, [r7, #16]
 8025010:	ea4f 4333 	mov.w	r3, r3, ror #16
 8025014:	69ba      	ldr	r2, [r7, #24]
 8025016:	4053      	eors	r3, r2
 8025018:	61bb      	str	r3, [r7, #24]
      temp = td[(s3 >> 24) & 0xFF];
 802501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802501c:	0e1b      	lsrs	r3, r3, #24
 802501e:	4a64      	ldr	r2, [pc, #400]	@ (80251b0 <aesDecryptBlock+0x398>)
 8025020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025024:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 24);
 8025026:	693b      	ldr	r3, [r7, #16]
 8025028:	ea4f 2333 	mov.w	r3, r3, ror #8
 802502c:	69ba      	ldr	r2, [r7, #24]
 802502e:	4053      	eors	r3, r2
 8025030:	61bb      	str	r3, [r7, #24]

      t3 = td[s3 & 0xFF];
 8025032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025034:	b2db      	uxtb	r3, r3
 8025036:	4a5e      	ldr	r2, [pc, #376]	@ (80251b0 <aesDecryptBlock+0x398>)
 8025038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802503c:	617b      	str	r3, [r7, #20]
      temp = td[(s2 >> 8) & 0xFF];
 802503e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025040:	0a1b      	lsrs	r3, r3, #8
 8025042:	b2db      	uxtb	r3, r3
 8025044:	4a5a      	ldr	r2, [pc, #360]	@ (80251b0 <aesDecryptBlock+0x398>)
 8025046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802504a:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 8);
 802504c:	693b      	ldr	r3, [r7, #16]
 802504e:	ea4f 6333 	mov.w	r3, r3, ror #24
 8025052:	697a      	ldr	r2, [r7, #20]
 8025054:	4053      	eors	r3, r2
 8025056:	617b      	str	r3, [r7, #20]
      temp = td[(s1 >> 16) & 0xFF];
 8025058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802505a:	0c1b      	lsrs	r3, r3, #16
 802505c:	b2db      	uxtb	r3, r3
 802505e:	4a54      	ldr	r2, [pc, #336]	@ (80251b0 <aesDecryptBlock+0x398>)
 8025060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025064:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 16);
 8025066:	693b      	ldr	r3, [r7, #16]
 8025068:	ea4f 4333 	mov.w	r3, r3, ror #16
 802506c:	697a      	ldr	r2, [r7, #20]
 802506e:	4053      	eors	r3, r2
 8025070:	617b      	str	r3, [r7, #20]
      temp = td[(s0 >> 24) & 0xFF];
 8025072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025074:	0e1b      	lsrs	r3, r3, #24
 8025076:	4a4e      	ldr	r2, [pc, #312]	@ (80251b0 <aesDecryptBlock+0x398>)
 8025078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802507c:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 24);
 802507e:	693b      	ldr	r3, [r7, #16]
 8025080:	ea4f 2333 	mov.w	r3, r3, ror #8
 8025084:	697a      	ldr	r2, [r7, #20]
 8025086:	4053      	eors	r3, r2
 8025088:	617b      	str	r3, [r7, #20]

      //Round key addition
      s0 = t0 ^ context->dk[i * 4];
 802508a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802508c:	009b      	lsls	r3, r3, #2
 802508e:	68fa      	ldr	r2, [r7, #12]
 8025090:	333c      	adds	r3, #60	@ 0x3c
 8025092:	009b      	lsls	r3, r3, #2
 8025094:	4413      	add	r3, r2
 8025096:	685b      	ldr	r3, [r3, #4]
 8025098:	6a3a      	ldr	r2, [r7, #32]
 802509a:	4053      	eors	r3, r2
 802509c:	633b      	str	r3, [r7, #48]	@ 0x30
      s1 = t1 ^ context->dk[i * 4 + 1];
 802509e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80250a0:	009b      	lsls	r3, r3, #2
 80250a2:	3301      	adds	r3, #1
 80250a4:	68fa      	ldr	r2, [r7, #12]
 80250a6:	333c      	adds	r3, #60	@ 0x3c
 80250a8:	009b      	lsls	r3, r3, #2
 80250aa:	4413      	add	r3, r2
 80250ac:	685b      	ldr	r3, [r3, #4]
 80250ae:	69fa      	ldr	r2, [r7, #28]
 80250b0:	4053      	eors	r3, r2
 80250b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s2 = t2 ^ context->dk[i * 4 + 2];
 80250b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80250b6:	009b      	lsls	r3, r3, #2
 80250b8:	3302      	adds	r3, #2
 80250ba:	68fa      	ldr	r2, [r7, #12]
 80250bc:	333c      	adds	r3, #60	@ 0x3c
 80250be:	009b      	lsls	r3, r3, #2
 80250c0:	4413      	add	r3, r2
 80250c2:	685b      	ldr	r3, [r3, #4]
 80250c4:	69ba      	ldr	r2, [r7, #24]
 80250c6:	4053      	eors	r3, r2
 80250c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      s3 = t3 ^ context->dk[i * 4 + 3];
 80250ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80250cc:	009b      	lsls	r3, r3, #2
 80250ce:	3303      	adds	r3, #3
 80250d0:	68fa      	ldr	r2, [r7, #12]
 80250d2:	333c      	adds	r3, #60	@ 0x3c
 80250d4:	009b      	lsls	r3, r3, #2
 80250d6:	4413      	add	r3, r2
 80250d8:	685b      	ldr	r3, [r3, #4]
 80250da:	697a      	ldr	r2, [r7, #20]
 80250dc:	4053      	eors	r3, r2
 80250de:	627b      	str	r3, [r7, #36]	@ 0x24
   for(i = context->nr - 1; i >= 1; i--)
 80250e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80250e2:	3b01      	subs	r3, #1
 80250e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80250e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80250e8:	2b00      	cmp	r3, #0
 80250ea:	f47f af1e 	bne.w	8024f2a <aesDecryptBlock+0x112>
   }

   //The last round differs slightly from the first rounds
   t0 = (uint32_t) isbox[s0 & 0xFF];
 80250ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80250f0:	b2db      	uxtb	r3, r3
 80250f2:	4a30      	ldr	r2, [pc, #192]	@ (80251b4 <aesDecryptBlock+0x39c>)
 80250f4:	5cd3      	ldrb	r3, [r2, r3]
 80250f6:	623b      	str	r3, [r7, #32]
   t0 |= (uint32_t) isbox[(s3 >> 8) & 0xFF] << 8;
 80250f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80250fa:	0a1b      	lsrs	r3, r3, #8
 80250fc:	b2db      	uxtb	r3, r3
 80250fe:	4a2d      	ldr	r2, [pc, #180]	@ (80251b4 <aesDecryptBlock+0x39c>)
 8025100:	5cd3      	ldrb	r3, [r2, r3]
 8025102:	021b      	lsls	r3, r3, #8
 8025104:	6a3a      	ldr	r2, [r7, #32]
 8025106:	4313      	orrs	r3, r2
 8025108:	623b      	str	r3, [r7, #32]
   t0 |= (uint32_t) isbox[(s2 >> 16) & 0xFF] << 16;
 802510a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802510c:	0c1b      	lsrs	r3, r3, #16
 802510e:	b2db      	uxtb	r3, r3
 8025110:	4a28      	ldr	r2, [pc, #160]	@ (80251b4 <aesDecryptBlock+0x39c>)
 8025112:	5cd3      	ldrb	r3, [r2, r3]
 8025114:	041b      	lsls	r3, r3, #16
 8025116:	6a3a      	ldr	r2, [r7, #32]
 8025118:	4313      	orrs	r3, r2
 802511a:	623b      	str	r3, [r7, #32]
   t0 |= (uint32_t) isbox[(s1 >> 24) & 0xFF] << 24;
 802511c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802511e:	0e1b      	lsrs	r3, r3, #24
 8025120:	4a24      	ldr	r2, [pc, #144]	@ (80251b4 <aesDecryptBlock+0x39c>)
 8025122:	5cd3      	ldrb	r3, [r2, r3]
 8025124:	061b      	lsls	r3, r3, #24
 8025126:	6a3a      	ldr	r2, [r7, #32]
 8025128:	4313      	orrs	r3, r2
 802512a:	623b      	str	r3, [r7, #32]

   t1 = (uint32_t) isbox[s1 & 0xFF];
 802512c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802512e:	b2db      	uxtb	r3, r3
 8025130:	4a20      	ldr	r2, [pc, #128]	@ (80251b4 <aesDecryptBlock+0x39c>)
 8025132:	5cd3      	ldrb	r3, [r2, r3]
 8025134:	61fb      	str	r3, [r7, #28]
   t1 |= (uint32_t) isbox[(s0 >> 8) & 0xFF] << 8;
 8025136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025138:	0a1b      	lsrs	r3, r3, #8
 802513a:	b2db      	uxtb	r3, r3
 802513c:	4a1d      	ldr	r2, [pc, #116]	@ (80251b4 <aesDecryptBlock+0x39c>)
 802513e:	5cd3      	ldrb	r3, [r2, r3]
 8025140:	021b      	lsls	r3, r3, #8
 8025142:	69fa      	ldr	r2, [r7, #28]
 8025144:	4313      	orrs	r3, r2
 8025146:	61fb      	str	r3, [r7, #28]
   t1 |= (uint32_t) isbox[(s3 >> 16) & 0xFF] << 16;
 8025148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802514a:	0c1b      	lsrs	r3, r3, #16
 802514c:	b2db      	uxtb	r3, r3
 802514e:	4a19      	ldr	r2, [pc, #100]	@ (80251b4 <aesDecryptBlock+0x39c>)
 8025150:	5cd3      	ldrb	r3, [r2, r3]
 8025152:	041b      	lsls	r3, r3, #16
 8025154:	69fa      	ldr	r2, [r7, #28]
 8025156:	4313      	orrs	r3, r2
 8025158:	61fb      	str	r3, [r7, #28]
   t1 |= (uint32_t) isbox[(s2 >> 24) & 0xFF] << 24;
 802515a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802515c:	0e1b      	lsrs	r3, r3, #24
 802515e:	4a15      	ldr	r2, [pc, #84]	@ (80251b4 <aesDecryptBlock+0x39c>)
 8025160:	5cd3      	ldrb	r3, [r2, r3]
 8025162:	061b      	lsls	r3, r3, #24
 8025164:	69fa      	ldr	r2, [r7, #28]
 8025166:	4313      	orrs	r3, r2
 8025168:	61fb      	str	r3, [r7, #28]

   t2 = (uint32_t) isbox[s2 & 0xFF];
 802516a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802516c:	b2db      	uxtb	r3, r3
 802516e:	4a11      	ldr	r2, [pc, #68]	@ (80251b4 <aesDecryptBlock+0x39c>)
 8025170:	5cd3      	ldrb	r3, [r2, r3]
 8025172:	61bb      	str	r3, [r7, #24]
   t2 |= (uint32_t) isbox[(s1 >> 8) & 0xFF] << 8;
 8025174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025176:	0a1b      	lsrs	r3, r3, #8
 8025178:	b2db      	uxtb	r3, r3
 802517a:	4a0e      	ldr	r2, [pc, #56]	@ (80251b4 <aesDecryptBlock+0x39c>)
 802517c:	5cd3      	ldrb	r3, [r2, r3]
 802517e:	021b      	lsls	r3, r3, #8
 8025180:	69ba      	ldr	r2, [r7, #24]
 8025182:	4313      	orrs	r3, r2
 8025184:	61bb      	str	r3, [r7, #24]
   t2 |= (uint32_t) isbox[(s0 >> 16) & 0xFF] << 16;
 8025186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025188:	0c1b      	lsrs	r3, r3, #16
 802518a:	b2db      	uxtb	r3, r3
 802518c:	4a09      	ldr	r2, [pc, #36]	@ (80251b4 <aesDecryptBlock+0x39c>)
 802518e:	5cd3      	ldrb	r3, [r2, r3]
 8025190:	041b      	lsls	r3, r3, #16
 8025192:	69ba      	ldr	r2, [r7, #24]
 8025194:	4313      	orrs	r3, r2
 8025196:	61bb      	str	r3, [r7, #24]
   t2 |= (uint32_t) isbox[(s3 >> 24) & 0xFF] << 24;
 8025198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802519a:	0e1b      	lsrs	r3, r3, #24
 802519c:	4a05      	ldr	r2, [pc, #20]	@ (80251b4 <aesDecryptBlock+0x39c>)
 802519e:	5cd3      	ldrb	r3, [r2, r3]
 80251a0:	061b      	lsls	r3, r3, #24
 80251a2:	69ba      	ldr	r2, [r7, #24]
 80251a4:	4313      	orrs	r3, r2
 80251a6:	61bb      	str	r3, [r7, #24]

   t3 = (uint32_t) isbox[s3 & 0xFF];
 80251a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80251aa:	b2db      	uxtb	r3, r3
 80251ac:	e004      	b.n	80251b8 <aesDecryptBlock+0x3a0>
 80251ae:	bf00      	nop
 80251b0:	080329d0 	.word	0x080329d0
 80251b4:	080324d0 	.word	0x080324d0
 80251b8:	4a4a      	ldr	r2, [pc, #296]	@ (80252e4 <aesDecryptBlock+0x4cc>)
 80251ba:	5cd3      	ldrb	r3, [r2, r3]
 80251bc:	617b      	str	r3, [r7, #20]
   t3 |= (uint32_t) isbox[(s2 >> 8) & 0xFF] << 8;
 80251be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80251c0:	0a1b      	lsrs	r3, r3, #8
 80251c2:	b2db      	uxtb	r3, r3
 80251c4:	4a47      	ldr	r2, [pc, #284]	@ (80252e4 <aesDecryptBlock+0x4cc>)
 80251c6:	5cd3      	ldrb	r3, [r2, r3]
 80251c8:	021b      	lsls	r3, r3, #8
 80251ca:	697a      	ldr	r2, [r7, #20]
 80251cc:	4313      	orrs	r3, r2
 80251ce:	617b      	str	r3, [r7, #20]
   t3 |= (uint32_t) isbox[(s1 >> 16) & 0xFF] << 16;
 80251d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80251d2:	0c1b      	lsrs	r3, r3, #16
 80251d4:	b2db      	uxtb	r3, r3
 80251d6:	4a43      	ldr	r2, [pc, #268]	@ (80252e4 <aesDecryptBlock+0x4cc>)
 80251d8:	5cd3      	ldrb	r3, [r2, r3]
 80251da:	041b      	lsls	r3, r3, #16
 80251dc:	697a      	ldr	r2, [r7, #20]
 80251de:	4313      	orrs	r3, r2
 80251e0:	617b      	str	r3, [r7, #20]
   t3 |= (uint32_t) isbox[(s0 >> 24) & 0xFF] << 24;
 80251e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80251e4:	0e1b      	lsrs	r3, r3, #24
 80251e6:	4a3f      	ldr	r2, [pc, #252]	@ (80252e4 <aesDecryptBlock+0x4cc>)
 80251e8:	5cd3      	ldrb	r3, [r2, r3]
 80251ea:	061b      	lsls	r3, r3, #24
 80251ec:	697a      	ldr	r2, [r7, #20]
 80251ee:	4313      	orrs	r3, r2
 80251f0:	617b      	str	r3, [r7, #20]

   //Last round key addition
   s0 = t0 ^ context->dk[0];
 80251f2:	68fb      	ldr	r3, [r7, #12]
 80251f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80251f8:	6a3a      	ldr	r2, [r7, #32]
 80251fa:	4053      	eors	r3, r2
 80251fc:	633b      	str	r3, [r7, #48]	@ 0x30
   s1 = t1 ^ context->dk[1];
 80251fe:	68fb      	ldr	r3, [r7, #12]
 8025200:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8025204:	69fa      	ldr	r2, [r7, #28]
 8025206:	4053      	eors	r3, r2
 8025208:	62fb      	str	r3, [r7, #44]	@ 0x2c
   s2 = t2 ^ context->dk[2];
 802520a:	68fb      	ldr	r3, [r7, #12]
 802520c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8025210:	69ba      	ldr	r2, [r7, #24]
 8025212:	4053      	eors	r3, r2
 8025214:	62bb      	str	r3, [r7, #40]	@ 0x28
   s3 = t3 ^ context->dk[3];
 8025216:	68fb      	ldr	r3, [r7, #12]
 8025218:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 802521c:	697a      	ldr	r2, [r7, #20]
 802521e:	4053      	eors	r3, r2
 8025220:	627b      	str	r3, [r7, #36]	@ 0x24

   //The final state is then copied to the output
   STORE32LE(s0, output);
 8025222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025224:	b2da      	uxtb	r2, r3
 8025226:	687b      	ldr	r3, [r7, #4]
 8025228:	701a      	strb	r2, [r3, #0]
 802522a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802522c:	0a1a      	lsrs	r2, r3, #8
 802522e:	687b      	ldr	r3, [r7, #4]
 8025230:	3301      	adds	r3, #1
 8025232:	b2d2      	uxtb	r2, r2
 8025234:	701a      	strb	r2, [r3, #0]
 8025236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025238:	0c1a      	lsrs	r2, r3, #16
 802523a:	687b      	ldr	r3, [r7, #4]
 802523c:	3302      	adds	r3, #2
 802523e:	b2d2      	uxtb	r2, r2
 8025240:	701a      	strb	r2, [r3, #0]
 8025242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025244:	0e1a      	lsrs	r2, r3, #24
 8025246:	687b      	ldr	r3, [r7, #4]
 8025248:	3303      	adds	r3, #3
 802524a:	b2d2      	uxtb	r2, r2
 802524c:	701a      	strb	r2, [r3, #0]
   STORE32LE(s1, output + 4);
 802524e:	687b      	ldr	r3, [r7, #4]
 8025250:	3304      	adds	r3, #4
 8025252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025254:	b2d2      	uxtb	r2, r2
 8025256:	701a      	strb	r2, [r3, #0]
 8025258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802525a:	0a1a      	lsrs	r2, r3, #8
 802525c:	687b      	ldr	r3, [r7, #4]
 802525e:	3305      	adds	r3, #5
 8025260:	b2d2      	uxtb	r2, r2
 8025262:	701a      	strb	r2, [r3, #0]
 8025264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025266:	0c1a      	lsrs	r2, r3, #16
 8025268:	687b      	ldr	r3, [r7, #4]
 802526a:	3306      	adds	r3, #6
 802526c:	b2d2      	uxtb	r2, r2
 802526e:	701a      	strb	r2, [r3, #0]
 8025270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025272:	0e1a      	lsrs	r2, r3, #24
 8025274:	687b      	ldr	r3, [r7, #4]
 8025276:	3307      	adds	r3, #7
 8025278:	b2d2      	uxtb	r2, r2
 802527a:	701a      	strb	r2, [r3, #0]
   STORE32LE(s2, output + 8);
 802527c:	687b      	ldr	r3, [r7, #4]
 802527e:	3308      	adds	r3, #8
 8025280:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8025282:	b2d2      	uxtb	r2, r2
 8025284:	701a      	strb	r2, [r3, #0]
 8025286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025288:	0a1a      	lsrs	r2, r3, #8
 802528a:	687b      	ldr	r3, [r7, #4]
 802528c:	3309      	adds	r3, #9
 802528e:	b2d2      	uxtb	r2, r2
 8025290:	701a      	strb	r2, [r3, #0]
 8025292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025294:	0c1a      	lsrs	r2, r3, #16
 8025296:	687b      	ldr	r3, [r7, #4]
 8025298:	330a      	adds	r3, #10
 802529a:	b2d2      	uxtb	r2, r2
 802529c:	701a      	strb	r2, [r3, #0]
 802529e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80252a0:	0e1a      	lsrs	r2, r3, #24
 80252a2:	687b      	ldr	r3, [r7, #4]
 80252a4:	330b      	adds	r3, #11
 80252a6:	b2d2      	uxtb	r2, r2
 80252a8:	701a      	strb	r2, [r3, #0]
   STORE32LE(s3, output + 12);
 80252aa:	687b      	ldr	r3, [r7, #4]
 80252ac:	330c      	adds	r3, #12
 80252ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80252b0:	b2d2      	uxtb	r2, r2
 80252b2:	701a      	strb	r2, [r3, #0]
 80252b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80252b6:	0a1a      	lsrs	r2, r3, #8
 80252b8:	687b      	ldr	r3, [r7, #4]
 80252ba:	330d      	adds	r3, #13
 80252bc:	b2d2      	uxtb	r2, r2
 80252be:	701a      	strb	r2, [r3, #0]
 80252c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80252c2:	0c1a      	lsrs	r2, r3, #16
 80252c4:	687b      	ldr	r3, [r7, #4]
 80252c6:	330e      	adds	r3, #14
 80252c8:	b2d2      	uxtb	r2, r2
 80252ca:	701a      	strb	r2, [r3, #0]
 80252cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80252ce:	0e1a      	lsrs	r2, r3, #24
 80252d0:	687b      	ldr	r3, [r7, #4]
 80252d2:	330f      	adds	r3, #15
 80252d4:	b2d2      	uxtb	r2, r2
 80252d6:	701a      	strb	r2, [r3, #0]
}
 80252d8:	bf00      	nop
 80252da:	373c      	adds	r7, #60	@ 0x3c
 80252dc:	46bd      	mov	sp, r7
 80252de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252e2:	4770      	bx	lr
 80252e4:	080324d0 	.word	0x080324d0

080252e8 <aesDeinit>:
 * @brief Release AES context
 * @param[in] context Pointer to the AES context
 **/

__weak_func void aesDeinit(AesContext *context)
{
 80252e8:	b580      	push	{r7, lr}
 80252ea:	b082      	sub	sp, #8
 80252ec:	af00      	add	r7, sp, #0
 80252ee:	6078      	str	r0, [r7, #4]
   //Clear AES context
   osMemset(context, 0, sizeof(AesContext));
 80252f0:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80252f4:	2100      	movs	r1, #0
 80252f6:	6878      	ldr	r0, [r7, #4]
 80252f8:	f00b f856 	bl	80303a8 <memset>
}
 80252fc:	bf00      	nop
 80252fe:	3708      	adds	r7, #8
 8025300:	46bd      	mov	sp, r7
 8025302:	bd80      	pop	{r7, pc}

08025304 <cbcDecrypt>:
 * @return Error code
 **/

__weak_func error_t cbcDecrypt(const CipherAlgo *cipher, void *context,
   uint8_t *iv, const uint8_t *c, uint8_t *p, size_t length)
{
 8025304:	b580      	push	{r7, lr}
 8025306:	b08a      	sub	sp, #40	@ 0x28
 8025308:	af00      	add	r7, sp, #0
 802530a:	60f8      	str	r0, [r7, #12]
 802530c:	60b9      	str	r1, [r7, #8]
 802530e:	607a      	str	r2, [r7, #4]
 8025310:	603b      	str	r3, [r7, #0]
   size_t i;
   uint8_t t[16];

   //CBC mode operates in a block-by-block fashion
   while(length >= cipher->blockSize)
 8025312:	e03d      	b.n	8025390 <cbcDecrypt+0x8c>
   {
      //Save input block
      osMemcpy(t, c, cipher->blockSize);
 8025314:	68fb      	ldr	r3, [r7, #12]
 8025316:	68da      	ldr	r2, [r3, #12]
 8025318:	f107 0314 	add.w	r3, r7, #20
 802531c:	6839      	ldr	r1, [r7, #0]
 802531e:	4618      	mov	r0, r3
 8025320:	f00b f907 	bl	8030532 <memcpy>

      //Decrypt the current block
      cipher->decryptBlock(context, c, p);
 8025324:	68fb      	ldr	r3, [r7, #12]
 8025326:	6a1b      	ldr	r3, [r3, #32]
 8025328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802532a:	6839      	ldr	r1, [r7, #0]
 802532c:	68b8      	ldr	r0, [r7, #8]
 802532e:	4798      	blx	r3

      //XOR output block with IV contents
      for(i = 0; i < cipher->blockSize; i++)
 8025330:	2300      	movs	r3, #0
 8025332:	627b      	str	r3, [r7, #36]	@ 0x24
 8025334:	e010      	b.n	8025358 <cbcDecrypt+0x54>
      {
         p[i] ^= iv[i];
 8025336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8025338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802533a:	4413      	add	r3, r2
 802533c:	7819      	ldrb	r1, [r3, #0]
 802533e:	687a      	ldr	r2, [r7, #4]
 8025340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025342:	4413      	add	r3, r2
 8025344:	781a      	ldrb	r2, [r3, #0]
 8025346:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8025348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802534a:	4403      	add	r3, r0
 802534c:	404a      	eors	r2, r1
 802534e:	b2d2      	uxtb	r2, r2
 8025350:	701a      	strb	r2, [r3, #0]
      for(i = 0; i < cipher->blockSize; i++)
 8025352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025354:	3301      	adds	r3, #1
 8025356:	627b      	str	r3, [r7, #36]	@ 0x24
 8025358:	68fb      	ldr	r3, [r7, #12]
 802535a:	68db      	ldr	r3, [r3, #12]
 802535c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802535e:	429a      	cmp	r2, r3
 8025360:	d3e9      	bcc.n	8025336 <cbcDecrypt+0x32>
      }

      //Update IV with input block contents
      osMemcpy(iv, t, cipher->blockSize);
 8025362:	68fb      	ldr	r3, [r7, #12]
 8025364:	68da      	ldr	r2, [r3, #12]
 8025366:	f107 0314 	add.w	r3, r7, #20
 802536a:	4619      	mov	r1, r3
 802536c:	6878      	ldr	r0, [r7, #4]
 802536e:	f00b f8e0 	bl	8030532 <memcpy>

      //Next block
      c += cipher->blockSize;
 8025372:	68fb      	ldr	r3, [r7, #12]
 8025374:	68db      	ldr	r3, [r3, #12]
 8025376:	683a      	ldr	r2, [r7, #0]
 8025378:	4413      	add	r3, r2
 802537a:	603b      	str	r3, [r7, #0]
      p += cipher->blockSize;
 802537c:	68fb      	ldr	r3, [r7, #12]
 802537e:	68db      	ldr	r3, [r3, #12]
 8025380:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8025382:	4413      	add	r3, r2
 8025384:	633b      	str	r3, [r7, #48]	@ 0x30
      length -= cipher->blockSize;
 8025386:	68fb      	ldr	r3, [r7, #12]
 8025388:	68db      	ldr	r3, [r3, #12]
 802538a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802538c:	1ad3      	subs	r3, r2, r3
 802538e:	637b      	str	r3, [r7, #52]	@ 0x34
   while(length >= cipher->blockSize)
 8025390:	68fb      	ldr	r3, [r7, #12]
 8025392:	68db      	ldr	r3, [r3, #12]
 8025394:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8025396:	429a      	cmp	r2, r3
 8025398:	d2bc      	bcs.n	8025314 <cbcDecrypt+0x10>
   }

   //The ciphertext must be a multiple of the block size
   if(length != 0)
 802539a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802539c:	2b00      	cmp	r3, #0
 802539e:	d001      	beq.n	80253a4 <cbcDecrypt+0xa0>
      return ERROR_INVALID_LENGTH;
 80253a0:	23ec      	movs	r3, #236	@ 0xec
 80253a2:	e000      	b.n	80253a6 <cbcDecrypt+0xa2>

   //Successful encryption
   return NO_ERROR;
 80253a4:	2300      	movs	r3, #0
}
 80253a6:	4618      	mov	r0, r3
 80253a8:	3728      	adds	r7, #40	@ 0x28
 80253aa:	46bd      	mov	sp, r7
 80253ac:	bd80      	pop	{r7, pc}

080253ae <asn1ReadTag>:
 * @param[out] tag Structure describing the ASN.1 tag
 * @return Error code
 **/

error_t asn1ReadTag(const uint8_t *data, size_t length, Asn1Tag *tag)
{
 80253ae:	b480      	push	{r7}
 80253b0:	b087      	sub	sp, #28
 80253b2:	af00      	add	r7, sp, #0
 80253b4:	60f8      	str	r0, [r7, #12]
 80253b6:	60b9      	str	r1, [r7, #8]
 80253b8:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint_t n;

   //Make sure the identifier octet is present
   if(length == 0)
 80253ba:	68bb      	ldr	r3, [r7, #8]
 80253bc:	2b00      	cmp	r3, #0
 80253be:	d101      	bne.n	80253c4 <asn1ReadTag+0x16>
      return ERROR_INVALID_TAG;
 80253c0:	23ef      	movs	r3, #239	@ 0xef
 80253c2:	e0af      	b.n	8025524 <asn1ReadTag+0x176>

   //Save the class of the ASN.1 tag
   tag->objClass = data[0] & ASN1_CLASS_MASK;
 80253c4:	68fb      	ldr	r3, [r7, #12]
 80253c6:	781b      	ldrb	r3, [r3, #0]
 80253c8:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 80253cc:	687b      	ldr	r3, [r7, #4]
 80253ce:	605a      	str	r2, [r3, #4]
   //Primitive or constructed encoding?
   tag->constructed = (data[0] & ASN1_ENCODING_CONSTRUCTED) ? TRUE : FALSE;
 80253d0:	68fb      	ldr	r3, [r7, #12]
 80253d2:	781b      	ldrb	r3, [r3, #0]
 80253d4:	115b      	asrs	r3, r3, #5
 80253d6:	f003 0201 	and.w	r2, r3, #1
 80253da:	687b      	ldr	r3, [r7, #4]
 80253dc:	601a      	str	r2, [r3, #0]

   //Check the tag number
   if((data[0] & ASN1_TAG_NUMBER_MASK) < 31)
 80253de:	68fb      	ldr	r3, [r7, #12]
 80253e0:	781b      	ldrb	r3, [r3, #0]
 80253e2:	f003 031f 	and.w	r3, r3, #31
 80253e6:	2b1e      	cmp	r3, #30
 80253e8:	dc08      	bgt.n	80253fc <asn1ReadTag+0x4e>
   {
      //Tag number is in the range 0 to 30
      tag->objType = data[0] & ASN1_TAG_NUMBER_MASK;
 80253ea:	68fb      	ldr	r3, [r7, #12]
 80253ec:	781b      	ldrb	r3, [r3, #0]
 80253ee:	f003 021f 	and.w	r2, r3, #31
 80253f2:	687b      	ldr	r3, [r7, #4]
 80253f4:	609a      	str	r2, [r3, #8]
      //Point to the tag length field
      i = 1;
 80253f6:	2301      	movs	r3, #1
 80253f8:	617b      	str	r3, [r7, #20]
 80253fa:	e02a      	b.n	8025452 <asn1ReadTag+0xa4>
   }
   else
   {
      //If the tag number is greater than or equal to 31,
      //the subsequent octets will encode the tag number
      tag->objType = 0;
 80253fc:	687b      	ldr	r3, [r7, #4]
 80253fe:	2200      	movs	r2, #0
 8025400:	609a      	str	r2, [r3, #8]

      //Decode the tag number
      for(i = 1; ; i++)
 8025402:	2301      	movs	r3, #1
 8025404:	617b      	str	r3, [r7, #20]
      {
         //The field cannot exceed 5 bytes
         if(i > (sizeof(tag->objType) + 1))
 8025406:	697b      	ldr	r3, [r7, #20]
 8025408:	2b05      	cmp	r3, #5
 802540a:	d901      	bls.n	8025410 <asn1ReadTag+0x62>
            return ERROR_INVALID_TAG;
 802540c:	23ef      	movs	r3, #239	@ 0xef
 802540e:	e089      	b.n	8025524 <asn1ReadTag+0x176>
         //Insufficient number of bytes to decode the tag number?
         if(!(length - i))
 8025410:	68ba      	ldr	r2, [r7, #8]
 8025412:	697b      	ldr	r3, [r7, #20]
 8025414:	429a      	cmp	r2, r3
 8025416:	d101      	bne.n	802541c <asn1ReadTag+0x6e>
            return ERROR_INVALID_TAG;
 8025418:	23ef      	movs	r3, #239	@ 0xef
 802541a:	e083      	b.n	8025524 <asn1ReadTag+0x176>

         //Update the tag number with bits 7 to 1
         tag->objType = (tag->objType << 7) | (data[i] & 0x7F);
 802541c:	687b      	ldr	r3, [r7, #4]
 802541e:	689b      	ldr	r3, [r3, #8]
 8025420:	01da      	lsls	r2, r3, #7
 8025422:	68f9      	ldr	r1, [r7, #12]
 8025424:	697b      	ldr	r3, [r7, #20]
 8025426:	440b      	add	r3, r1
 8025428:	781b      	ldrb	r3, [r3, #0]
 802542a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802542e:	431a      	orrs	r2, r3
 8025430:	687b      	ldr	r3, [r7, #4]
 8025432:	609a      	str	r2, [r3, #8]

         //Bit 8 shall be set unless it is the last octet
         if(!(data[i] & 0x80))
 8025434:	68fa      	ldr	r2, [r7, #12]
 8025436:	697b      	ldr	r3, [r7, #20]
 8025438:	4413      	add	r3, r2
 802543a:	781b      	ldrb	r3, [r3, #0]
 802543c:	b25b      	sxtb	r3, r3
 802543e:	2b00      	cmp	r3, #0
 8025440:	da03      	bge.n	802544a <asn1ReadTag+0x9c>
      for(i = 1; ; i++)
 8025442:	697b      	ldr	r3, [r7, #20]
 8025444:	3301      	adds	r3, #1
 8025446:	617b      	str	r3, [r7, #20]
         if(i > (sizeof(tag->objType) + 1))
 8025448:	e7dd      	b.n	8025406 <asn1ReadTag+0x58>
            break;
 802544a:	bf00      	nop
      }
      //Point to the tag length field
      i++;
 802544c:	697b      	ldr	r3, [r7, #20]
 802544e:	3301      	adds	r3, #1
 8025450:	617b      	str	r3, [r7, #20]
   }

   //Insufficient number of bytes to decode the tag length?
   if(!(length - i))
 8025452:	68ba      	ldr	r2, [r7, #8]
 8025454:	697b      	ldr	r3, [r7, #20]
 8025456:	429a      	cmp	r2, r3
 8025458:	d101      	bne.n	802545e <asn1ReadTag+0xb0>
      return ERROR_INVALID_TAG;
 802545a:	23ef      	movs	r3, #239	@ 0xef
 802545c:	e062      	b.n	8025524 <asn1ReadTag+0x176>

   //Short form is used?
   if(data[i] < 128)
 802545e:	68fa      	ldr	r2, [r7, #12]
 8025460:	697b      	ldr	r3, [r7, #20]
 8025462:	4413      	add	r3, r2
 8025464:	781b      	ldrb	r3, [r3, #0]
 8025466:	b25b      	sxtb	r3, r3
 8025468:	2b00      	cmp	r3, #0
 802546a:	db0a      	blt.n	8025482 <asn1ReadTag+0xd4>
   {
      //Bits 7 to 1 encode the number of bytes in the contents
      tag->length = data[i];
 802546c:	68fa      	ldr	r2, [r7, #12]
 802546e:	697b      	ldr	r3, [r7, #20]
 8025470:	4413      	add	r3, r2
 8025472:	781b      	ldrb	r3, [r3, #0]
 8025474:	461a      	mov	r2, r3
 8025476:	687b      	ldr	r3, [r7, #4]
 8025478:	60da      	str	r2, [r3, #12]
      //Point to the contents of the tag
      i++;
 802547a:	697b      	ldr	r3, [r7, #20]
 802547c:	3301      	adds	r3, #1
 802547e:	617b      	str	r3, [r7, #20]
 8025480:	e03b      	b.n	80254fa <asn1ReadTag+0x14c>
   }
   //Long form is used?
   else if(data[i] > 128 && data[i] < 255)
 8025482:	68fa      	ldr	r2, [r7, #12]
 8025484:	697b      	ldr	r3, [r7, #20]
 8025486:	4413      	add	r3, r2
 8025488:	781b      	ldrb	r3, [r3, #0]
 802548a:	2b80      	cmp	r3, #128	@ 0x80
 802548c:	d933      	bls.n	80254f6 <asn1ReadTag+0x148>
 802548e:	68fa      	ldr	r2, [r7, #12]
 8025490:	697b      	ldr	r3, [r7, #20]
 8025492:	4413      	add	r3, r2
 8025494:	781b      	ldrb	r3, [r3, #0]
 8025496:	2bff      	cmp	r3, #255	@ 0xff
 8025498:	d02d      	beq.n	80254f6 <asn1ReadTag+0x148>
   {
      //Bits 7 to 1 encode the number of octets in the length field
      n = data[i] & 0x7F;
 802549a:	68fa      	ldr	r2, [r7, #12]
 802549c:	697b      	ldr	r3, [r7, #20]
 802549e:	4413      	add	r3, r2
 80254a0:	781b      	ldrb	r3, [r3, #0]
 80254a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80254a6:	613b      	str	r3, [r7, #16]

      //The field cannot exceed 4 bytes
      if(n > sizeof(tag->length))
 80254a8:	693b      	ldr	r3, [r7, #16]
 80254aa:	2b04      	cmp	r3, #4
 80254ac:	d901      	bls.n	80254b2 <asn1ReadTag+0x104>
         return ERROR_INVALID_TAG;
 80254ae:	23ef      	movs	r3, #239	@ 0xef
 80254b0:	e038      	b.n	8025524 <asn1ReadTag+0x176>
      //Insufficient number of bytes to decode the tag length?
      if((length - i) < n)
 80254b2:	68ba      	ldr	r2, [r7, #8]
 80254b4:	697b      	ldr	r3, [r7, #20]
 80254b6:	1ad3      	subs	r3, r2, r3
 80254b8:	693a      	ldr	r2, [r7, #16]
 80254ba:	429a      	cmp	r2, r3
 80254bc:	d901      	bls.n	80254c2 <asn1ReadTag+0x114>
         return ERROR_INVALID_TAG;
 80254be:	23ef      	movs	r3, #239	@ 0xef
 80254c0:	e030      	b.n	8025524 <asn1ReadTag+0x176>

      //Clear the tag length
      tag->length = 0;
 80254c2:	687b      	ldr	r3, [r7, #4]
 80254c4:	2200      	movs	r2, #0
 80254c6:	60da      	str	r2, [r3, #12]

      //Read the subsequent octets
      for(i++; n > 0; n--)
 80254c8:	697b      	ldr	r3, [r7, #20]
 80254ca:	3301      	adds	r3, #1
 80254cc:	617b      	str	r3, [r7, #20]
 80254ce:	e00e      	b.n	80254ee <asn1ReadTag+0x140>
      {
         tag->length = (tag->length << 8) | data[i++];
 80254d0:	687b      	ldr	r3, [r7, #4]
 80254d2:	68db      	ldr	r3, [r3, #12]
 80254d4:	021a      	lsls	r2, r3, #8
 80254d6:	697b      	ldr	r3, [r7, #20]
 80254d8:	1c59      	adds	r1, r3, #1
 80254da:	6179      	str	r1, [r7, #20]
 80254dc:	68f9      	ldr	r1, [r7, #12]
 80254de:	440b      	add	r3, r1
 80254e0:	781b      	ldrb	r3, [r3, #0]
 80254e2:	431a      	orrs	r2, r3
 80254e4:	687b      	ldr	r3, [r7, #4]
 80254e6:	60da      	str	r2, [r3, #12]
      for(i++; n > 0; n--)
 80254e8:	693b      	ldr	r3, [r7, #16]
 80254ea:	3b01      	subs	r3, #1
 80254ec:	613b      	str	r3, [r7, #16]
 80254ee:	693b      	ldr	r3, [r7, #16]
 80254f0:	2b00      	cmp	r3, #0
 80254f2:	d1ed      	bne.n	80254d0 <asn1ReadTag+0x122>
   else if(data[i] > 128 && data[i] < 255)
 80254f4:	e001      	b.n	80254fa <asn1ReadTag+0x14c>
   }
   //Indefinite form is used?
   else
   {
      //Indefinite form is not supported
      return ERROR_INVALID_TAG;
 80254f6:	23ef      	movs	r3, #239	@ 0xef
 80254f8:	e014      	b.n	8025524 <asn1ReadTag+0x176>
   }

   //Save the pointer to the tag contents
   tag->value = data + i;
 80254fa:	68fa      	ldr	r2, [r7, #12]
 80254fc:	697b      	ldr	r3, [r7, #20]
 80254fe:	441a      	add	r2, r3
 8025500:	687b      	ldr	r3, [r7, #4]
 8025502:	611a      	str	r2, [r3, #16]
   //Check the length of tag
   if((length - i) < tag->length)
 8025504:	68ba      	ldr	r2, [r7, #8]
 8025506:	697b      	ldr	r3, [r7, #20]
 8025508:	1ad2      	subs	r2, r2, r3
 802550a:	687b      	ldr	r3, [r7, #4]
 802550c:	68db      	ldr	r3, [r3, #12]
 802550e:	429a      	cmp	r2, r3
 8025510:	d201      	bcs.n	8025516 <asn1ReadTag+0x168>
      return ERROR_INVALID_TAG;
 8025512:	23ef      	movs	r3, #239	@ 0xef
 8025514:	e006      	b.n	8025524 <asn1ReadTag+0x176>

   //Total length occupied by the ASN.1 tag in the input stream
   tag->totalLength = i + tag->length;
 8025516:	687b      	ldr	r3, [r7, #4]
 8025518:	68da      	ldr	r2, [r3, #12]
 802551a:	697b      	ldr	r3, [r7, #20]
 802551c:	441a      	add	r2, r3
 802551e:	687b      	ldr	r3, [r7, #4]
 8025520:	615a      	str	r2, [r3, #20]
   //ASN.1 tag successfully decoded
   return NO_ERROR;
 8025522:	2300      	movs	r3, #0
}
 8025524:	4618      	mov	r0, r3
 8025526:	371c      	adds	r7, #28
 8025528:	46bd      	mov	sp, r7
 802552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802552e:	4770      	bx	lr

08025530 <asn1ReadSequence>:
 * @param[out] tag Structure describing the ASN.1 tag
 * @return Error code
 **/

error_t asn1ReadSequence(const uint8_t *data, size_t length, Asn1Tag *tag)
{
 8025530:	b580      	push	{r7, lr}
 8025532:	b086      	sub	sp, #24
 8025534:	af00      	add	r7, sp, #0
 8025536:	60f8      	str	r0, [r7, #12]
 8025538:	60b9      	str	r1, [r7, #8]
 802553a:	607a      	str	r2, [r7, #4]
   error_t error;

   //Read ASN.1 tag
   error = asn1ReadTag(data, length, tag);
 802553c:	687a      	ldr	r2, [r7, #4]
 802553e:	68b9      	ldr	r1, [r7, #8]
 8025540:	68f8      	ldr	r0, [r7, #12]
 8025542:	f7ff ff34 	bl	80253ae <asn1ReadTag>
 8025546:	4603      	mov	r3, r0
 8025548:	82fb      	strh	r3, [r7, #22]

   //Check status code
   if(!error)
 802554a:	8afb      	ldrh	r3, [r7, #22]
 802554c:	2b00      	cmp	r3, #0
 802554e:	d107      	bne.n	8025560 <asn1ReadSequence+0x30>
   {
      //Enforce encoding, class and type
      error = asn1CheckTag(tag, TRUE, ASN1_CLASS_UNIVERSAL, ASN1_TYPE_SEQUENCE);
 8025550:	2310      	movs	r3, #16
 8025552:	2200      	movs	r2, #0
 8025554:	2101      	movs	r1, #1
 8025556:	6878      	ldr	r0, [r7, #4]
 8025558:	f000 f824 	bl	80255a4 <asn1CheckTag>
 802555c:	4603      	mov	r3, r0
 802555e:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8025560:	8afb      	ldrh	r3, [r7, #22]
}
 8025562:	4618      	mov	r0, r3
 8025564:	3718      	adds	r7, #24
 8025566:	46bd      	mov	sp, r7
 8025568:	bd80      	pop	{r7, pc}

0802556a <asn1ReadOid>:
 * @param[out] tag Structure describing the ASN.1 tag
 * @return Error code
 **/

error_t asn1ReadOid(const uint8_t *data, size_t length, Asn1Tag *tag)
{
 802556a:	b580      	push	{r7, lr}
 802556c:	b086      	sub	sp, #24
 802556e:	af00      	add	r7, sp, #0
 8025570:	60f8      	str	r0, [r7, #12]
 8025572:	60b9      	str	r1, [r7, #8]
 8025574:	607a      	str	r2, [r7, #4]
   error_t error;

   //Read ASN.1 tag
   error = asn1ReadTag(data, length, tag);
 8025576:	687a      	ldr	r2, [r7, #4]
 8025578:	68b9      	ldr	r1, [r7, #8]
 802557a:	68f8      	ldr	r0, [r7, #12]
 802557c:	f7ff ff17 	bl	80253ae <asn1ReadTag>
 8025580:	4603      	mov	r3, r0
 8025582:	82fb      	strh	r3, [r7, #22]

   //Check status code
   if(!error)
 8025584:	8afb      	ldrh	r3, [r7, #22]
 8025586:	2b00      	cmp	r3, #0
 8025588:	d107      	bne.n	802559a <asn1ReadOid+0x30>
   {
      //Enforce encoding, class and type
      error = asn1CheckTag(tag, FALSE, ASN1_CLASS_UNIVERSAL,
 802558a:	2306      	movs	r3, #6
 802558c:	2200      	movs	r2, #0
 802558e:	2100      	movs	r1, #0
 8025590:	6878      	ldr	r0, [r7, #4]
 8025592:	f000 f807 	bl	80255a4 <asn1CheckTag>
 8025596:	4603      	mov	r3, r0
 8025598:	82fb      	strh	r3, [r7, #22]
         ASN1_TYPE_OBJECT_IDENTIFIER);
   }

   //Return status code
   return error;
 802559a:	8afb      	ldrh	r3, [r7, #22]
}
 802559c:	4618      	mov	r0, r3
 802559e:	3718      	adds	r7, #24
 80255a0:	46bd      	mov	sp, r7
 80255a2:	bd80      	pop	{r7, pc}

080255a4 <asn1CheckTag>:
 * @return Error code
 **/

error_t asn1CheckTag(const Asn1Tag *tag, bool_t constructed, uint_t objClass,
   uint_t objType)
{
 80255a4:	b480      	push	{r7}
 80255a6:	b085      	sub	sp, #20
 80255a8:	af00      	add	r7, sp, #0
 80255aa:	60f8      	str	r0, [r7, #12]
 80255ac:	60b9      	str	r1, [r7, #8]
 80255ae:	607a      	str	r2, [r7, #4]
 80255b0:	603b      	str	r3, [r7, #0]
   //Check encoding
   if(tag->constructed != constructed)
 80255b2:	68fb      	ldr	r3, [r7, #12]
 80255b4:	681b      	ldr	r3, [r3, #0]
 80255b6:	68ba      	ldr	r2, [r7, #8]
 80255b8:	429a      	cmp	r2, r3
 80255ba:	d001      	beq.n	80255c0 <asn1CheckTag+0x1c>
      return ERROR_WRONG_ENCODING;
 80255bc:	23f7      	movs	r3, #247	@ 0xf7
 80255be:	e00e      	b.n	80255de <asn1CheckTag+0x3a>
   //Enforce class
   if(tag->objClass != objClass)
 80255c0:	68fb      	ldr	r3, [r7, #12]
 80255c2:	685b      	ldr	r3, [r3, #4]
 80255c4:	687a      	ldr	r2, [r7, #4]
 80255c6:	429a      	cmp	r2, r3
 80255c8:	d001      	beq.n	80255ce <asn1CheckTag+0x2a>
      return ERROR_INVALID_CLASS;
 80255ca:	23f2      	movs	r3, #242	@ 0xf2
 80255cc:	e007      	b.n	80255de <asn1CheckTag+0x3a>
   //Enforce type
   if(tag->objType != objType)
 80255ce:	68fb      	ldr	r3, [r7, #12]
 80255d0:	689b      	ldr	r3, [r3, #8]
 80255d2:	683a      	ldr	r2, [r7, #0]
 80255d4:	429a      	cmp	r2, r3
 80255d6:	d001      	beq.n	80255dc <asn1CheckTag+0x38>
      return ERROR_INVALID_TYPE;
 80255d8:	23f0      	movs	r3, #240	@ 0xf0
 80255da:	e000      	b.n	80255de <asn1CheckTag+0x3a>

   //The tag matches all the criteria
   return NO_ERROR;
 80255dc:	2300      	movs	r3, #0
}
 80255de:	4618      	mov	r0, r3
 80255e0:	3714      	adds	r7, #20
 80255e2:	46bd      	mov	sp, r7
 80255e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255e8:	4770      	bx	lr

080255ea <asn1CheckOid>:
 * @param[in] length Length of the OID
 * @return Error code
 **/

error_t asn1CheckOid(const Asn1Tag *tag, const uint8_t *oid, size_t length)
{
 80255ea:	b580      	push	{r7, lr}
 80255ec:	b086      	sub	sp, #24
 80255ee:	af00      	add	r7, sp, #0
 80255f0:	60f8      	str	r0, [r7, #12]
 80255f2:	60b9      	str	r1, [r7, #8]
 80255f4:	607a      	str	r2, [r7, #4]
   error_t error;

   //Enforce encoding, class and type
   error = asn1CheckTag(tag, FALSE, ASN1_CLASS_UNIVERSAL, ASN1_TYPE_OBJECT_IDENTIFIER);
 80255f6:	2306      	movs	r3, #6
 80255f8:	2200      	movs	r2, #0
 80255fa:	2100      	movs	r1, #0
 80255fc:	68f8      	ldr	r0, [r7, #12]
 80255fe:	f7ff ffd1 	bl	80255a4 <asn1CheckTag>
 8025602:	4603      	mov	r3, r0
 8025604:	82fb      	strh	r3, [r7, #22]
   //Any error to report?
   if(error)
 8025606:	8afb      	ldrh	r3, [r7, #22]
 8025608:	2b00      	cmp	r3, #0
 802560a:	d001      	beq.n	8025610 <asn1CheckOid+0x26>
      return error;
 802560c:	8afb      	ldrh	r3, [r7, #22]
 802560e:	e00d      	b.n	802562c <asn1CheckOid+0x42>

   //Compare OID against the specified value
   if(oidComp(tag->value, tag->length, oid, length))
 8025610:	68fb      	ldr	r3, [r7, #12]
 8025612:	6918      	ldr	r0, [r3, #16]
 8025614:	68fb      	ldr	r3, [r7, #12]
 8025616:	68d9      	ldr	r1, [r3, #12]
 8025618:	687b      	ldr	r3, [r7, #4]
 802561a:	68ba      	ldr	r2, [r7, #8]
 802561c:	f000 f8d0 	bl	80257c0 <oidComp>
 8025620:	4603      	mov	r3, r0
 8025622:	2b00      	cmp	r3, #0
 8025624:	d001      	beq.n	802562a <asn1CheckOid+0x40>
      return ERROR_WRONG_IDENTIFIER;
 8025626:	23d6      	movs	r3, #214	@ 0xd6
 8025628:	e000      	b.n	802562c <asn1CheckOid+0x42>

   //The tag matches all the criteria
   return NO_ERROR;
 802562a:	2300      	movs	r3, #0
}
 802562c:	4618      	mov	r0, r3
 802562e:	3718      	adds	r7, #24
 8025630:	46bd      	mov	sp, r7
 8025632:	bd80      	pop	{r7, pc}

08025634 <base64Decode>:
 * @return Error code
 **/

error_t base64Decode(const char_t *input, size_t inputLen, void *output,
   size_t *outputLen)
{
 8025634:	b480      	push	{r7}
 8025636:	b08d      	sub	sp, #52	@ 0x34
 8025638:	af00      	add	r7, sp, #0
 802563a:	60f8      	str	r0, [r7, #12]
 802563c:	60b9      	str	r1, [r7, #8]
 802563e:	607a      	str	r2, [r7, #4]
 8025640:	603b      	str	r3, [r7, #0]
   size_t n;
   size_t padLen;
   uint8_t *p;

   //Check parameters
   if(input == NULL && inputLen != 0)
 8025642:	68fb      	ldr	r3, [r7, #12]
 8025644:	2b00      	cmp	r3, #0
 8025646:	d104      	bne.n	8025652 <base64Decode+0x1e>
 8025648:	68bb      	ldr	r3, [r7, #8]
 802564a:	2b00      	cmp	r3, #0
 802564c:	d001      	beq.n	8025652 <base64Decode+0x1e>
      return ERROR_INVALID_PARAMETER;
 802564e:	2302      	movs	r3, #2
 8025650:	e0ae      	b.n	80257b0 <base64Decode+0x17c>
   if(outputLen == NULL)
 8025652:	683b      	ldr	r3, [r7, #0]
 8025654:	2b00      	cmp	r3, #0
 8025656:	d101      	bne.n	802565c <base64Decode+0x28>
      return ERROR_INVALID_PARAMETER;
 8025658:	2302      	movs	r3, #2
 802565a:	e0a9      	b.n	80257b0 <base64Decode+0x17c>

   //Initialize status code
   error = NO_ERROR;
 802565c:	2300      	movs	r3, #0
 802565e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

   //Point to the buffer where to write the decoded data
   p = (uint8_t *) output;
 8025660:	687b      	ldr	r3, [r7, #4]
 8025662:	617b      	str	r3, [r7, #20]

   //Initialize variables
   j = 0;
 8025664:	2300      	movs	r3, #0
 8025666:	623b      	str	r3, [r7, #32]
   n = 0;
 8025668:	2300      	movs	r3, #0
 802566a:	61fb      	str	r3, [r7, #28]
   value = 0;
 802566c:	2300      	movs	r3, #0
 802566e:	62bb      	str	r3, [r7, #40]	@ 0x28
   padLen = 0;
 8025670:	2300      	movs	r3, #0
 8025672:	61bb      	str	r3, [r7, #24]

   //Process the Base64-encoded string
   for(i = 0; i < inputLen && !error; i++)
 8025674:	2300      	movs	r3, #0
 8025676:	627b      	str	r3, [r7, #36]	@ 0x24
 8025678:	e051      	b.n	802571e <base64Decode+0xea>
   {
      //Get current character
      c = (uint_t) input[i];
 802567a:	68fa      	ldr	r2, [r7, #12]
 802567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802567e:	4413      	add	r3, r2
 8025680:	781b      	ldrb	r3, [r3, #0]
 8025682:	613b      	str	r3, [r7, #16]

      //Check the value of the current character
      if(c == '\r' || c == '\n')
 8025684:	693b      	ldr	r3, [r7, #16]
 8025686:	2b0d      	cmp	r3, #13
 8025688:	d046      	beq.n	8025718 <base64Decode+0xe4>
 802568a:	693b      	ldr	r3, [r7, #16]
 802568c:	2b0a      	cmp	r3, #10
 802568e:	d043      	beq.n	8025718 <base64Decode+0xe4>
      {
         //CR and LF characters should be ignored
      }
      else if(c == '=')
 8025690:	693b      	ldr	r3, [r7, #16]
 8025692:	2b3d      	cmp	r3, #61	@ 0x3d
 8025694:	d103      	bne.n	802569e <base64Decode+0x6a>
      {
         //Increment the number of pad characters
         padLen++;
 8025696:	69bb      	ldr	r3, [r7, #24]
 8025698:	3301      	adds	r3, #1
 802569a:	61bb      	str	r3, [r7, #24]
 802569c:	e03c      	b.n	8025718 <base64Decode+0xe4>
      }
      else if(c < 128 && base64DecTable[c] < 64 && padLen == 0)
 802569e:	693b      	ldr	r3, [r7, #16]
 80256a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80256a2:	d837      	bhi.n	8025714 <base64Decode+0xe0>
 80256a4:	4a45      	ldr	r2, [pc, #276]	@ (80257bc <base64Decode+0x188>)
 80256a6:	693b      	ldr	r3, [r7, #16]
 80256a8:	4413      	add	r3, r2
 80256aa:	781b      	ldrb	r3, [r3, #0]
 80256ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80256ae:	d831      	bhi.n	8025714 <base64Decode+0xe0>
 80256b0:	69bb      	ldr	r3, [r7, #24]
 80256b2:	2b00      	cmp	r3, #0
 80256b4:	d12e      	bne.n	8025714 <base64Decode+0xe0>
      {
         //Decode the current character
         value = (value << 6) | base64DecTable[c];
 80256b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80256b8:	019b      	lsls	r3, r3, #6
 80256ba:	4940      	ldr	r1, [pc, #256]	@ (80257bc <base64Decode+0x188>)
 80256bc:	693a      	ldr	r2, [r7, #16]
 80256be:	440a      	add	r2, r1
 80256c0:	7812      	ldrb	r2, [r2, #0]
 80256c2:	4313      	orrs	r3, r2
 80256c4:	62bb      	str	r3, [r7, #40]	@ 0x28

         //Divide the input stream into blocks of 4 characters
         if(++j == 4)
 80256c6:	6a3b      	ldr	r3, [r7, #32]
 80256c8:	3301      	adds	r3, #1
 80256ca:	623b      	str	r3, [r7, #32]
 80256cc:	6a3b      	ldr	r3, [r7, #32]
 80256ce:	2b04      	cmp	r3, #4
 80256d0:	d122      	bne.n	8025718 <base64Decode+0xe4>
         {
            //Map each 4-character block to 3 bytes
            if(p != NULL)
 80256d2:	697b      	ldr	r3, [r7, #20]
 80256d4:	2b00      	cmp	r3, #0
 80256d6:	d015      	beq.n	8025704 <base64Decode+0xd0>
            {
               p[n] = (value >> 16) & 0xFF;
 80256d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80256da:	0c19      	lsrs	r1, r3, #16
 80256dc:	697a      	ldr	r2, [r7, #20]
 80256de:	69fb      	ldr	r3, [r7, #28]
 80256e0:	4413      	add	r3, r2
 80256e2:	b2ca      	uxtb	r2, r1
 80256e4:	701a      	strb	r2, [r3, #0]
               p[n + 1] = (value >> 8) & 0xFF;
 80256e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80256e8:	0a19      	lsrs	r1, r3, #8
 80256ea:	69fb      	ldr	r3, [r7, #28]
 80256ec:	3301      	adds	r3, #1
 80256ee:	697a      	ldr	r2, [r7, #20]
 80256f0:	4413      	add	r3, r2
 80256f2:	b2ca      	uxtb	r2, r1
 80256f4:	701a      	strb	r2, [r3, #0]
               p[n + 2] = value & 0xFF;
 80256f6:	69fb      	ldr	r3, [r7, #28]
 80256f8:	3302      	adds	r3, #2
 80256fa:	697a      	ldr	r2, [r7, #20]
 80256fc:	4413      	add	r3, r2
 80256fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8025700:	b2d2      	uxtb	r2, r2
 8025702:	701a      	strb	r2, [r3, #0]
            }

            //Adjust the length of the decoded data
            n += 3;
 8025704:	69fb      	ldr	r3, [r7, #28]
 8025706:	3303      	adds	r3, #3
 8025708:	61fb      	str	r3, [r7, #28]

            //Decode next block
            j = 0;
 802570a:	2300      	movs	r3, #0
 802570c:	623b      	str	r3, [r7, #32]
            value = 0;
 802570e:	2300      	movs	r3, #0
 8025710:	62bb      	str	r3, [r7, #40]	@ 0x28
         if(++j == 4)
 8025712:	e001      	b.n	8025718 <base64Decode+0xe4>
      else
      {
         //Implementations must reject the encoded data if it contains
         //characters outside the base alphabet (refer to RFC 4648,
         //section 3.3)
         error = ERROR_INVALID_CHARACTER;
 8025714:	23eb      	movs	r3, #235	@ 0xeb
 8025716:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   for(i = 0; i < inputLen && !error; i++)
 8025718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802571a:	3301      	adds	r3, #1
 802571c:	627b      	str	r3, [r7, #36]	@ 0x24
 802571e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025720:	68bb      	ldr	r3, [r7, #8]
 8025722:	429a      	cmp	r2, r3
 8025724:	d202      	bcs.n	802572c <base64Decode+0xf8>
 8025726:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8025728:	2b00      	cmp	r3, #0
 802572a:	d0a6      	beq.n	802567a <base64Decode+0x46>
      }
   }

   //Check status code
   if(!error)
 802572c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 802572e:	2b00      	cmp	r3, #0
 8025730:	d13a      	bne.n	80257a8 <base64Decode+0x174>
   {
      //Check the number of pad characters
      if(padLen == 0 && j == 0)
 8025732:	69bb      	ldr	r3, [r7, #24]
 8025734:	2b00      	cmp	r3, #0
 8025736:	d102      	bne.n	802573e <base64Decode+0x10a>
 8025738:	6a3b      	ldr	r3, [r7, #32]
 802573a:	2b00      	cmp	r3, #0
 802573c:	d034      	beq.n	80257a8 <base64Decode+0x174>
      {
         //No pad characters in this case
      }
      else if(padLen == 1 && j == 3)
 802573e:	69bb      	ldr	r3, [r7, #24]
 8025740:	2b01      	cmp	r3, #1
 8025742:	d118      	bne.n	8025776 <base64Decode+0x142>
 8025744:	6a3b      	ldr	r3, [r7, #32]
 8025746:	2b03      	cmp	r3, #3
 8025748:	d115      	bne.n	8025776 <base64Decode+0x142>
      {
         //The "=" sequence indicates that the last block contains only 2 bytes
         if(p != NULL)
 802574a:	697b      	ldr	r3, [r7, #20]
 802574c:	2b00      	cmp	r3, #0
 802574e:	d00e      	beq.n	802576e <base64Decode+0x13a>
         {
            //Decode the last two bytes
            p[n] = (value >> 10) & 0xFF;
 8025750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025752:	0a99      	lsrs	r1, r3, #10
 8025754:	697a      	ldr	r2, [r7, #20]
 8025756:	69fb      	ldr	r3, [r7, #28]
 8025758:	4413      	add	r3, r2
 802575a:	b2ca      	uxtb	r2, r1
 802575c:	701a      	strb	r2, [r3, #0]
            p[n + 1] = (value >> 2) & 0xFF;
 802575e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025760:	0899      	lsrs	r1, r3, #2
 8025762:	69fb      	ldr	r3, [r7, #28]
 8025764:	3301      	adds	r3, #1
 8025766:	697a      	ldr	r2, [r7, #20]
 8025768:	4413      	add	r3, r2
 802576a:	b2ca      	uxtb	r2, r1
 802576c:	701a      	strb	r2, [r3, #0]
         }

         //Adjust the length of the decoded data
         n += 2;
 802576e:	69fb      	ldr	r3, [r7, #28]
 8025770:	3302      	adds	r3, #2
 8025772:	61fb      	str	r3, [r7, #28]
 8025774:	e018      	b.n	80257a8 <base64Decode+0x174>
      }
      else if(padLen == 2 && j == 2)
 8025776:	69bb      	ldr	r3, [r7, #24]
 8025778:	2b02      	cmp	r3, #2
 802577a:	d113      	bne.n	80257a4 <base64Decode+0x170>
 802577c:	6a3b      	ldr	r3, [r7, #32]
 802577e:	2b02      	cmp	r3, #2
 8025780:	d110      	bne.n	80257a4 <base64Decode+0x170>
      {
         //The "==" sequence indicates that the last block contains only 1 byte
         if(p != NULL)
 8025782:	697b      	ldr	r3, [r7, #20]
 8025784:	2b00      	cmp	r3, #0
 8025786:	d006      	beq.n	8025796 <base64Decode+0x162>
         {
            //Decode the last byte
            p[n] = (value >> 4) & 0xFF;
 8025788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802578a:	0919      	lsrs	r1, r3, #4
 802578c:	697a      	ldr	r2, [r7, #20]
 802578e:	69fb      	ldr	r3, [r7, #28]
 8025790:	4413      	add	r3, r2
 8025792:	b2ca      	uxtb	r2, r1
 8025794:	701a      	strb	r2, [r3, #0]
         }

         //Adjust the length of the decoded data
         n++;
 8025796:	69fb      	ldr	r3, [r7, #28]
 8025798:	3301      	adds	r3, #1
 802579a:	61fb      	str	r3, [r7, #28]
         //Skip trailing pad characters
         i++;
 802579c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802579e:	3301      	adds	r3, #1
 80257a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80257a2:	e001      	b.n	80257a8 <base64Decode+0x174>
      }
      else
      {
         //The length of the input string must be a multiple of 4
         error = ERROR_INVALID_LENGTH;
 80257a4:	23ec      	movs	r3, #236	@ 0xec
 80257a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      }
   }

   //Total number of bytes that have been written
   *outputLen = n;
 80257a8:	683b      	ldr	r3, [r7, #0]
 80257aa:	69fa      	ldr	r2, [r7, #28]
 80257ac:	601a      	str	r2, [r3, #0]

   //Return status code
   return error;
 80257ae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 80257b0:	4618      	mov	r0, r3
 80257b2:	3734      	adds	r7, #52	@ 0x34
 80257b4:	46bd      	mov	sp, r7
 80257b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257ba:	4770      	bx	lr
 80257bc:	08032e2c 	.word	0x08032e2c

080257c0 <oidComp>:
 * @retval 1 The second OID lexicographically precedes the first OID
 **/

int_t oidComp(const uint8_t *oid1, size_t oidLen1, const uint8_t *oid2,
   size_t oidLen2)
{
 80257c0:	b580      	push	{r7, lr}
 80257c2:	b08c      	sub	sp, #48	@ 0x30
 80257c4:	af00      	add	r7, sp, #0
 80257c6:	60f8      	str	r0, [r7, #12]
 80257c8:	60b9      	str	r1, [r7, #8]
 80257ca:	607a      	str	r2, [r7, #4]
 80257cc:	603b      	str	r3, [r7, #0]
   size_t pos2;
   bool_t more1;
   bool_t more2;

   //Initialize variables
   res = 0;
 80257ce:	2300      	movs	r3, #0
 80257d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   n1 = 0;
 80257d2:	2300      	movs	r3, #0
 80257d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   n2 = 0;
 80257d6:	2300      	movs	r3, #0
 80257d8:	627b      	str	r3, [r7, #36]	@ 0x24
   pos1 = 0;
 80257da:	2300      	movs	r3, #0
 80257dc:	623b      	str	r3, [r7, #32]
   pos2 = 0;
 80257de:	2300      	movs	r3, #0
 80257e0:	61fb      	str	r3, [r7, #28]
   more1 = TRUE;
 80257e2:	2301      	movs	r3, #1
 80257e4:	61bb      	str	r3, [r7, #24]
   more2 = TRUE;
 80257e6:	2301      	movs	r3, #1
 80257e8:	617b      	str	r3, [r7, #20]

   //Perform lexicographical comparison
   while(res == 0)
 80257ea:	e0b3      	b.n	8025954 <oidComp+0x194>
   {
      //Extract sub-identifier from first OID
      if(more1)
 80257ec:	69bb      	ldr	r3, [r7, #24]
 80257ee:	2b00      	cmp	r3, #0
 80257f0:	d035      	beq.n	802585e <oidComp+0x9e>
      {
         if(pos1 >= oidLen1)
 80257f2:	6a3a      	ldr	r2, [r7, #32]
 80257f4:	68bb      	ldr	r3, [r7, #8]
 80257f6:	429a      	cmp	r2, r3
 80257f8:	d302      	bcc.n	8025800 <oidComp+0x40>
         {
            more1 = FALSE;
 80257fa:	2300      	movs	r3, #0
 80257fc:	61bb      	str	r3, [r7, #24]
 80257fe:	e02e      	b.n	802585e <oidComp+0x9e>
         }
         else if(pos1 == 0)
 8025800:	6a3b      	ldr	r3, [r7, #32]
 8025802:	2b00      	cmp	r3, #0
 8025804:	d108      	bne.n	8025818 <oidComp+0x58>
         {
            pos1++;
 8025806:	6a3b      	ldr	r3, [r7, #32]
 8025808:	3301      	adds	r3, #1
 802580a:	623b      	str	r3, [r7, #32]
            n1++;
 802580c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802580e:	3301      	adds	r3, #1
 8025810:	62bb      	str	r3, [r7, #40]	@ 0x28
            more1 = FALSE;
 8025812:	2300      	movs	r3, #0
 8025814:	61bb      	str	r3, [r7, #24]
 8025816:	e022      	b.n	802585e <oidComp+0x9e>
         }
         else if(n1 == 0 && oid1[pos1] == OID_MORE_FLAG)
 8025818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802581a:	2b00      	cmp	r3, #0
 802581c:	d109      	bne.n	8025832 <oidComp+0x72>
 802581e:	68fa      	ldr	r2, [r7, #12]
 8025820:	6a3b      	ldr	r3, [r7, #32]
 8025822:	4413      	add	r3, r2
 8025824:	781b      	ldrb	r3, [r3, #0]
 8025826:	2b80      	cmp	r3, #128	@ 0x80
 8025828:	d103      	bne.n	8025832 <oidComp+0x72>
         {
            pos1++;
 802582a:	6a3b      	ldr	r3, [r7, #32]
 802582c:	3301      	adds	r3, #1
 802582e:	623b      	str	r3, [r7, #32]
 8025830:	e015      	b.n	802585e <oidComp+0x9e>
         }
         else if((oid1[pos1] & OID_MORE_FLAG) != 0)
 8025832:	68fa      	ldr	r2, [r7, #12]
 8025834:	6a3b      	ldr	r3, [r7, #32]
 8025836:	4413      	add	r3, r2
 8025838:	781b      	ldrb	r3, [r3, #0]
 802583a:	b25b      	sxtb	r3, r3
 802583c:	2b00      	cmp	r3, #0
 802583e:	da06      	bge.n	802584e <oidComp+0x8e>
         {
            pos1++;
 8025840:	6a3b      	ldr	r3, [r7, #32]
 8025842:	3301      	adds	r3, #1
 8025844:	623b      	str	r3, [r7, #32]
            n1++;
 8025846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025848:	3301      	adds	r3, #1
 802584a:	62bb      	str	r3, [r7, #40]	@ 0x28
 802584c:	e007      	b.n	802585e <oidComp+0x9e>
         }
         else
         {
            pos1++;
 802584e:	6a3b      	ldr	r3, [r7, #32]
 8025850:	3301      	adds	r3, #1
 8025852:	623b      	str	r3, [r7, #32]
            n1++;
 8025854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025856:	3301      	adds	r3, #1
 8025858:	62bb      	str	r3, [r7, #40]	@ 0x28
            more1 = FALSE;
 802585a:	2300      	movs	r3, #0
 802585c:	61bb      	str	r3, [r7, #24]
         }
      }

      //Extract sub-identifier from second OID
      if(more2)
 802585e:	697b      	ldr	r3, [r7, #20]
 8025860:	2b00      	cmp	r3, #0
 8025862:	d035      	beq.n	80258d0 <oidComp+0x110>
      {
         if(pos2 >= oidLen2)
 8025864:	69fa      	ldr	r2, [r7, #28]
 8025866:	683b      	ldr	r3, [r7, #0]
 8025868:	429a      	cmp	r2, r3
 802586a:	d302      	bcc.n	8025872 <oidComp+0xb2>
         {
            more2 = FALSE;
 802586c:	2300      	movs	r3, #0
 802586e:	617b      	str	r3, [r7, #20]
 8025870:	e02e      	b.n	80258d0 <oidComp+0x110>
         }
         else if(pos2 == 0)
 8025872:	69fb      	ldr	r3, [r7, #28]
 8025874:	2b00      	cmp	r3, #0
 8025876:	d108      	bne.n	802588a <oidComp+0xca>
         {
            pos2++;
 8025878:	69fb      	ldr	r3, [r7, #28]
 802587a:	3301      	adds	r3, #1
 802587c:	61fb      	str	r3, [r7, #28]
            n2++;
 802587e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025880:	3301      	adds	r3, #1
 8025882:	627b      	str	r3, [r7, #36]	@ 0x24
            more2 = FALSE;
 8025884:	2300      	movs	r3, #0
 8025886:	617b      	str	r3, [r7, #20]
 8025888:	e022      	b.n	80258d0 <oidComp+0x110>
         }
         else if(n2 == 0 && oid2[pos2] == OID_MORE_FLAG)
 802588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802588c:	2b00      	cmp	r3, #0
 802588e:	d109      	bne.n	80258a4 <oidComp+0xe4>
 8025890:	687a      	ldr	r2, [r7, #4]
 8025892:	69fb      	ldr	r3, [r7, #28]
 8025894:	4413      	add	r3, r2
 8025896:	781b      	ldrb	r3, [r3, #0]
 8025898:	2b80      	cmp	r3, #128	@ 0x80
 802589a:	d103      	bne.n	80258a4 <oidComp+0xe4>
         {
            pos2++;
 802589c:	69fb      	ldr	r3, [r7, #28]
 802589e:	3301      	adds	r3, #1
 80258a0:	61fb      	str	r3, [r7, #28]
 80258a2:	e015      	b.n	80258d0 <oidComp+0x110>
         }
         else if((oid2[pos2] & OID_MORE_FLAG) != 0)
 80258a4:	687a      	ldr	r2, [r7, #4]
 80258a6:	69fb      	ldr	r3, [r7, #28]
 80258a8:	4413      	add	r3, r2
 80258aa:	781b      	ldrb	r3, [r3, #0]
 80258ac:	b25b      	sxtb	r3, r3
 80258ae:	2b00      	cmp	r3, #0
 80258b0:	da06      	bge.n	80258c0 <oidComp+0x100>
         {
            pos2++;
 80258b2:	69fb      	ldr	r3, [r7, #28]
 80258b4:	3301      	adds	r3, #1
 80258b6:	61fb      	str	r3, [r7, #28]
            n2++;
 80258b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80258ba:	3301      	adds	r3, #1
 80258bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80258be:	e007      	b.n	80258d0 <oidComp+0x110>
         }
         else
         {
            pos2++;
 80258c0:	69fb      	ldr	r3, [r7, #28]
 80258c2:	3301      	adds	r3, #1
 80258c4:	61fb      	str	r3, [r7, #28]
            n2++;
 80258c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80258c8:	3301      	adds	r3, #1
 80258ca:	627b      	str	r3, [r7, #36]	@ 0x24
            more2 = FALSE;
 80258cc:	2300      	movs	r3, #0
 80258ce:	617b      	str	r3, [r7, #20]
         }
      }

      //Compare sub-identifiers
      if(!more1 && !more2)
 80258d0:	69bb      	ldr	r3, [r7, #24]
 80258d2:	2b00      	cmp	r3, #0
 80258d4:	d13e      	bne.n	8025954 <oidComp+0x194>
 80258d6:	697b      	ldr	r3, [r7, #20]
 80258d8:	2b00      	cmp	r3, #0
 80258da:	d13b      	bne.n	8025954 <oidComp+0x194>
      {
         //Check the length of the sub-identifiers
         if(n1 == 0 && n2 == 0)
 80258dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80258de:	2b00      	cmp	r3, #0
 80258e0:	d105      	bne.n	80258ee <oidComp+0x12e>
 80258e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80258e4:	2b00      	cmp	r3, #0
 80258e6:	d102      	bne.n	80258ee <oidComp+0x12e>
         {
            res = 0;
 80258e8:	2300      	movs	r3, #0
 80258ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80258ec:	e036      	b.n	802595c <oidComp+0x19c>
         }
         else if(n1 < n2)
 80258ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80258f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80258f2:	429a      	cmp	r2, r3
 80258f4:	d203      	bcs.n	80258fe <oidComp+0x13e>
         {
            res = -1;
 80258f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80258fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80258fc:	e02a      	b.n	8025954 <oidComp+0x194>
         }
         else if(n1 > n2)
 80258fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8025900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025902:	429a      	cmp	r2, r3
 8025904:	d902      	bls.n	802590c <oidComp+0x14c>
         {
            res = 1;
 8025906:	2301      	movs	r3, #1
 8025908:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802590a:	e023      	b.n	8025954 <oidComp+0x194>
         }
         else
         {
            //Compare sub-identifier values
            res = osMemcmp(oid1 + pos1 - n1, oid2 + pos2 - n2, n1);
 802590c:	6a3a      	ldr	r2, [r7, #32]
 802590e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025910:	1ad3      	subs	r3, r2, r3
 8025912:	68fa      	ldr	r2, [r7, #12]
 8025914:	18d0      	adds	r0, r2, r3
 8025916:	69fa      	ldr	r2, [r7, #28]
 8025918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802591a:	1ad3      	subs	r3, r2, r3
 802591c:	687a      	ldr	r2, [r7, #4]
 802591e:	4413      	add	r3, r2
 8025920:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8025922:	4619      	mov	r1, r3
 8025924:	f00a fd30 	bl	8030388 <memcmp>
 8025928:	62f8      	str	r0, [r7, #44]	@ 0x2c

            //Check comparison result
            if(res < 0)
 802592a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802592c:	2b00      	cmp	r3, #0
 802592e:	da03      	bge.n	8025938 <oidComp+0x178>
            {
               res = -1;
 8025930:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8025936:	e00d      	b.n	8025954 <oidComp+0x194>
            }
            else if(res > 0)
 8025938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802593a:	2b00      	cmp	r3, #0
 802593c:	dd02      	ble.n	8025944 <oidComp+0x184>
            {
               res = 1;
 802593e:	2301      	movs	r3, #1
 8025940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8025942:	e007      	b.n	8025954 <oidComp+0x194>
            }
            else
            {
               //Decode next sub-identifiers
               n1 = 0;
 8025944:	2300      	movs	r3, #0
 8025946:	62bb      	str	r3, [r7, #40]	@ 0x28
               n2 = 0;
 8025948:	2300      	movs	r3, #0
 802594a:	627b      	str	r3, [r7, #36]	@ 0x24
               more1 = TRUE;
 802594c:	2301      	movs	r3, #1
 802594e:	61bb      	str	r3, [r7, #24]
               more2 = TRUE;
 8025950:	2301      	movs	r3, #1
 8025952:	617b      	str	r3, [r7, #20]
   while(res == 0)
 8025954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025956:	2b00      	cmp	r3, #0
 8025958:	f43f af48 	beq.w	80257ec <oidComp+0x2c>
         }
      }
   }

   //Return comparison result
   return res;
 802595c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 802595e:	4618      	mov	r0, r3
 8025960:	3730      	adds	r7, #48	@ 0x30
 8025962:	46bd      	mov	sp, r7
 8025964:	bd80      	pop	{r7, pc}
	...

08025968 <stm32f4xxCryptoInit>:
 * @brief Initialize hardware cryptographic accelerator
 * @return Error code
 **/

error_t stm32f4xxCryptoInit(void)
{
 8025968:	b580      	push	{r7, lr}
 802596a:	b082      	sub	sp, #8
 802596c:	af00      	add	r7, sp, #0
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 802596e:	2300      	movs	r3, #0
 8025970:	80fb      	strh	r3, [r7, #6]

   //Create a mutex to prevent simultaneous access to the hardware
   //cryptographic accelerator
   if(!osCreateMutex(&stm32f4xxCryptoMutex))
 8025972:	480a      	ldr	r0, [pc, #40]	@ (802599c <stm32f4xxCryptoInit+0x34>)
 8025974:	f7fb fd2e 	bl	80213d4 <osCreateMutex>
 8025978:	4603      	mov	r3, r0
 802597a:	2b00      	cmp	r3, #0
 802597c:	d101      	bne.n	8025982 <stm32f4xxCryptoInit+0x1a>
   {
      //Failed to create mutex
      error = ERROR_OUT_OF_RESOURCES;
 802597e:	2365      	movs	r3, #101	@ 0x65
 8025980:	80fb      	strh	r3, [r7, #6]
   }

#if (STM32F4XX_CRYPTO_TRNG_SUPPORT == ENABLED)
   //Check status code
   if(!error)
 8025982:	88fb      	ldrh	r3, [r7, #6]
 8025984:	2b00      	cmp	r3, #0
 8025986:	d103      	bne.n	8025990 <stm32f4xxCryptoInit+0x28>
   {
      //Initialize TRNG module
      error = trngInit();
 8025988:	f000 f80a 	bl	80259a0 <trngInit>
 802598c:	4603      	mov	r3, r0
 802598e:	80fb      	strh	r3, [r7, #6]
      error = crypInit();
   }
#endif

   //Return status code
   return error;
 8025990:	88fb      	ldrh	r3, [r7, #6]
}
 8025992:	4618      	mov	r0, r3
 8025994:	3708      	adds	r7, #8
 8025996:	46bd      	mov	sp, r7
 8025998:	bd80      	pop	{r7, pc}
 802599a:	bf00      	nop
 802599c:	20000188 	.word	0x20000188

080259a0 <trngInit>:
 * @brief TRNG module initialization
 * @return Error code
 **/

error_t trngInit(void)
{
 80259a0:	b580      	push	{r7, lr}
 80259a2:	b082      	sub	sp, #8
 80259a4:	af00      	add	r7, sp, #0
   HAL_StatusTypeDef status;

   //Enable RNG peripheral clock
   __HAL_RCC_RNG_CLK_ENABLE();
 80259a6:	2300      	movs	r3, #0
 80259a8:	603b      	str	r3, [r7, #0]
 80259aa:	4b13      	ldr	r3, [pc, #76]	@ (80259f8 <trngInit+0x58>)
 80259ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80259ae:	4a12      	ldr	r2, [pc, #72]	@ (80259f8 <trngInit+0x58>)
 80259b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80259b4:	6353      	str	r3, [r2, #52]	@ 0x34
 80259b6:	4b10      	ldr	r3, [pc, #64]	@ (80259f8 <trngInit+0x58>)
 80259b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80259ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80259be:	603b      	str	r3, [r7, #0]
 80259c0:	683b      	ldr	r3, [r7, #0]

   //Set instance
   RNG_Handle.Instance = RNG;
 80259c2:	4b0e      	ldr	r3, [pc, #56]	@ (80259fc <trngInit+0x5c>)
 80259c4:	4a0e      	ldr	r2, [pc, #56]	@ (8025a00 <trngInit+0x60>)
 80259c6:	601a      	str	r2, [r3, #0]

   //Reset RNG module
   status = HAL_RNG_DeInit(&RNG_Handle);
 80259c8:	480c      	ldr	r0, [pc, #48]	@ (80259fc <trngInit+0x5c>)
 80259ca:	f008 fb6f 	bl	802e0ac <HAL_RNG_DeInit>
 80259ce:	4603      	mov	r3, r0
 80259d0:	71fb      	strb	r3, [r7, #7]

   //Check status code
   if(status == HAL_OK)
 80259d2:	79fb      	ldrb	r3, [r7, #7]
 80259d4:	2b00      	cmp	r3, #0
 80259d6:	d104      	bne.n	80259e2 <trngInit+0x42>
   {
      //Initialize RNG module
      status = HAL_RNG_Init(&RNG_Handle);
 80259d8:	4808      	ldr	r0, [pc, #32]	@ (80259fc <trngInit+0x5c>)
 80259da:	f008 fb3d 	bl	802e058 <HAL_RNG_Init>
 80259de:	4603      	mov	r3, r0
 80259e0:	71fb      	strb	r3, [r7, #7]
   }

   //Return status code
   return (status == HAL_OK) ? NO_ERROR : ERROR_FAILURE;
 80259e2:	79fb      	ldrb	r3, [r7, #7]
 80259e4:	2b00      	cmp	r3, #0
 80259e6:	bf14      	ite	ne
 80259e8:	2301      	movne	r3, #1
 80259ea:	2300      	moveq	r3, #0
 80259ec:	b2db      	uxtb	r3, r3
}
 80259ee:	4618      	mov	r0, r3
 80259f0:	3708      	adds	r7, #8
 80259f2:	46bd      	mov	sp, r7
 80259f4:	bd80      	pop	{r7, pc}
 80259f6:	bf00      	nop
 80259f8:	40023800 	.word	0x40023800
 80259fc:	2000018c 	.word	0x2000018c
 8025a00:	50060800 	.word	0x50060800

08025a04 <sha256Compute>:
 * @param[out] digest Pointer to the calculated digest
 * @return Error code
 **/

__weak_func error_t sha256Compute(const void *data, size_t length, uint8_t *digest)
{
 8025a04:	b580      	push	{r7, lr}
 8025a06:	b086      	sub	sp, #24
 8025a08:	af00      	add	r7, sp, #0
 8025a0a:	60f8      	str	r0, [r7, #12]
 8025a0c:	60b9      	str	r1, [r7, #8]
 8025a0e:	607a      	str	r2, [r7, #4]
#else
   Sha256Context context[1];
#endif

   //Check parameters
   if(data == NULL && length != 0)
 8025a10:	68fb      	ldr	r3, [r7, #12]
 8025a12:	2b00      	cmp	r3, #0
 8025a14:	d104      	bne.n	8025a20 <sha256Compute+0x1c>
 8025a16:	68bb      	ldr	r3, [r7, #8]
 8025a18:	2b00      	cmp	r3, #0
 8025a1a:	d001      	beq.n	8025a20 <sha256Compute+0x1c>
      return ERROR_INVALID_PARAMETER;
 8025a1c:	2302      	movs	r3, #2
 8025a1e:	e01d      	b.n	8025a5c <sha256Compute+0x58>

   if(digest == NULL)
 8025a20:	687b      	ldr	r3, [r7, #4]
 8025a22:	2b00      	cmp	r3, #0
 8025a24:	d101      	bne.n	8025a2a <sha256Compute+0x26>
      return ERROR_INVALID_PARAMETER;
 8025a26:	2302      	movs	r3, #2
 8025a28:	e018      	b.n	8025a5c <sha256Compute+0x58>

#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   //Allocate a memory buffer to hold the SHA-256 context
   context = cryptoAllocMem(sizeof(Sha256Context));
 8025a2a:	2070      	movs	r0, #112	@ 0x70
 8025a2c:	f7fb fcdd 	bl	80213ea <osAllocMem>
 8025a30:	6178      	str	r0, [r7, #20]
   //Failed to allocate memory?
   if(context == NULL)
 8025a32:	697b      	ldr	r3, [r7, #20]
 8025a34:	2b00      	cmp	r3, #0
 8025a36:	d101      	bne.n	8025a3c <sha256Compute+0x38>
      return ERROR_OUT_OF_MEMORY;
 8025a38:	2364      	movs	r3, #100	@ 0x64
 8025a3a:	e00f      	b.n	8025a5c <sha256Compute+0x58>
#endif

   //Initialize the SHA-256 context
   sha256Init(context);
 8025a3c:	6978      	ldr	r0, [r7, #20]
 8025a3e:	f000 f811 	bl	8025a64 <sha256Init>
   //Digest the message
   sha256Update(context, data, length);
 8025a42:	68ba      	ldr	r2, [r7, #8]
 8025a44:	68f9      	ldr	r1, [r7, #12]
 8025a46:	6978      	ldr	r0, [r7, #20]
 8025a48:	f000 f848 	bl	8025adc <sha256Update>
   //Finalize the SHA-256 message digest
   sha256Final(context, digest);
 8025a4c:	6879      	ldr	r1, [r7, #4]
 8025a4e:	6978      	ldr	r0, [r7, #20]
 8025a50:	f000 f890 	bl	8025b74 <sha256Final>

#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   //Free previously allocated memory
   cryptoFreeMem(context);
 8025a54:	6978      	ldr	r0, [r7, #20]
 8025a56:	f7fb fcd6 	bl	8021406 <osFreeMem>
#endif

   //Successful processing
   return NO_ERROR;
 8025a5a:	2300      	movs	r3, #0
}
 8025a5c:	4618      	mov	r0, r3
 8025a5e:	3718      	adds	r7, #24
 8025a60:	46bd      	mov	sp, r7
 8025a62:	bd80      	pop	{r7, pc}

08025a64 <sha256Init>:
 * @brief Initialize SHA-256 message digest context
 * @param[in] context Pointer to the SHA-256 context to initialize
 **/

__weak_func void sha256Init(Sha256Context *context)
{
 8025a64:	b480      	push	{r7}
 8025a66:	b083      	sub	sp, #12
 8025a68:	af00      	add	r7, sp, #0
 8025a6a:	6078      	str	r0, [r7, #4]
   //Set initial hash value
   context->h[0] = 0x6A09E667;
 8025a6c:	687b      	ldr	r3, [r7, #4]
 8025a6e:	4a13      	ldr	r2, [pc, #76]	@ (8025abc <sha256Init+0x58>)
 8025a70:	601a      	str	r2, [r3, #0]
   context->h[1] = 0xBB67AE85;
 8025a72:	687b      	ldr	r3, [r7, #4]
 8025a74:	4a12      	ldr	r2, [pc, #72]	@ (8025ac0 <sha256Init+0x5c>)
 8025a76:	605a      	str	r2, [r3, #4]
   context->h[2] = 0x3C6EF372;
 8025a78:	687b      	ldr	r3, [r7, #4]
 8025a7a:	4a12      	ldr	r2, [pc, #72]	@ (8025ac4 <sha256Init+0x60>)
 8025a7c:	609a      	str	r2, [r3, #8]
   context->h[3] = 0xA54FF53A;
 8025a7e:	687b      	ldr	r3, [r7, #4]
 8025a80:	4a11      	ldr	r2, [pc, #68]	@ (8025ac8 <sha256Init+0x64>)
 8025a82:	60da      	str	r2, [r3, #12]
   context->h[4] = 0x510E527F;
 8025a84:	687b      	ldr	r3, [r7, #4]
 8025a86:	4a11      	ldr	r2, [pc, #68]	@ (8025acc <sha256Init+0x68>)
 8025a88:	611a      	str	r2, [r3, #16]
   context->h[5] = 0x9B05688C;
 8025a8a:	687b      	ldr	r3, [r7, #4]
 8025a8c:	4a10      	ldr	r2, [pc, #64]	@ (8025ad0 <sha256Init+0x6c>)
 8025a8e:	615a      	str	r2, [r3, #20]
   context->h[6] = 0x1F83D9AB;
 8025a90:	687b      	ldr	r3, [r7, #4]
 8025a92:	4a10      	ldr	r2, [pc, #64]	@ (8025ad4 <sha256Init+0x70>)
 8025a94:	619a      	str	r2, [r3, #24]
   context->h[7] = 0x5BE0CD19;
 8025a96:	687b      	ldr	r3, [r7, #4]
 8025a98:	4a0f      	ldr	r2, [pc, #60]	@ (8025ad8 <sha256Init+0x74>)
 8025a9a:	61da      	str	r2, [r3, #28]

   //Number of bytes in the buffer
   context->size = 0;
 8025a9c:	687b      	ldr	r3, [r7, #4]
 8025a9e:	2200      	movs	r2, #0
 8025aa0:	661a      	str	r2, [r3, #96]	@ 0x60
   //Total length of the message
   context->totalSize = 0;
 8025aa2:	6879      	ldr	r1, [r7, #4]
 8025aa4:	f04f 0200 	mov.w	r2, #0
 8025aa8:	f04f 0300 	mov.w	r3, #0
 8025aac:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
}
 8025ab0:	bf00      	nop
 8025ab2:	370c      	adds	r7, #12
 8025ab4:	46bd      	mov	sp, r7
 8025ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025aba:	4770      	bx	lr
 8025abc:	6a09e667 	.word	0x6a09e667
 8025ac0:	bb67ae85 	.word	0xbb67ae85
 8025ac4:	3c6ef372 	.word	0x3c6ef372
 8025ac8:	a54ff53a 	.word	0xa54ff53a
 8025acc:	510e527f 	.word	0x510e527f
 8025ad0:	9b05688c 	.word	0x9b05688c
 8025ad4:	1f83d9ab 	.word	0x1f83d9ab
 8025ad8:	5be0cd19 	.word	0x5be0cd19

08025adc <sha256Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

__weak_func void sha256Update(Sha256Context *context, const void *data, size_t length)
{
 8025adc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8025ae0:	b086      	sub	sp, #24
 8025ae2:	af00      	add	r7, sp, #0
 8025ae4:	60f8      	str	r0, [r7, #12]
 8025ae6:	60b9      	str	r1, [r7, #8]
 8025ae8:	607a      	str	r2, [r7, #4]
   size_t n;

   //Process the incoming data
   while(length > 0)
 8025aea:	e039      	b.n	8025b60 <sha256Update+0x84>
   {
      //The buffer can hold at most 64 bytes
      n = MIN(length, 64 - context->size);
 8025aec:	68fb      	ldr	r3, [r7, #12]
 8025aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8025af0:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8025af4:	687a      	ldr	r2, [r7, #4]
 8025af6:	4293      	cmp	r3, r2
 8025af8:	bf28      	it	cs
 8025afa:	4613      	movcs	r3, r2
 8025afc:	617b      	str	r3, [r7, #20]

      //Copy the data to the buffer
      osMemcpy(context->buffer + context->size, data, n);
 8025afe:	68fb      	ldr	r3, [r7, #12]
 8025b00:	f103 0220 	add.w	r2, r3, #32
 8025b04:	68fb      	ldr	r3, [r7, #12]
 8025b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8025b08:	4413      	add	r3, r2
 8025b0a:	697a      	ldr	r2, [r7, #20]
 8025b0c:	68b9      	ldr	r1, [r7, #8]
 8025b0e:	4618      	mov	r0, r3
 8025b10:	f00a fd0f 	bl	8030532 <memcpy>

      //Update the SHA-256 context
      context->size += n;
 8025b14:	68fb      	ldr	r3, [r7, #12]
 8025b16:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8025b18:	697b      	ldr	r3, [r7, #20]
 8025b1a:	441a      	add	r2, r3
 8025b1c:	68fb      	ldr	r3, [r7, #12]
 8025b1e:	661a      	str	r2, [r3, #96]	@ 0x60
      context->totalSize += n;
 8025b20:	68fb      	ldr	r3, [r7, #12]
 8025b22:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8025b26:	6979      	ldr	r1, [r7, #20]
 8025b28:	2000      	movs	r0, #0
 8025b2a:	460c      	mov	r4, r1
 8025b2c:	4605      	mov	r5, r0
 8025b2e:	eb12 0804 	adds.w	r8, r2, r4
 8025b32:	eb43 0905 	adc.w	r9, r3, r5
 8025b36:	68fb      	ldr	r3, [r7, #12]
 8025b38:	e9c3 891a 	strd	r8, r9, [r3, #104]	@ 0x68
      //Advance the data pointer
      data = (uint8_t *) data + n;
 8025b3c:	68ba      	ldr	r2, [r7, #8]
 8025b3e:	697b      	ldr	r3, [r7, #20]
 8025b40:	4413      	add	r3, r2
 8025b42:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 8025b44:	687a      	ldr	r2, [r7, #4]
 8025b46:	697b      	ldr	r3, [r7, #20]
 8025b48:	1ad3      	subs	r3, r2, r3
 8025b4a:	607b      	str	r3, [r7, #4]

      //Process message in 16-word blocks
      if(context->size == 64)
 8025b4c:	68fb      	ldr	r3, [r7, #12]
 8025b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8025b50:	2b40      	cmp	r3, #64	@ 0x40
 8025b52:	d105      	bne.n	8025b60 <sha256Update+0x84>
      {
         //Transform the 16-word block
         sha256ProcessBlock(context);
 8025b54:	68f8      	ldr	r0, [r7, #12]
 8025b56:	f000 f8d7 	bl	8025d08 <sha256ProcessBlock>
         //Empty the buffer
         context->size = 0;
 8025b5a:	68fb      	ldr	r3, [r7, #12]
 8025b5c:	2200      	movs	r2, #0
 8025b5e:	661a      	str	r2, [r3, #96]	@ 0x60
   while(length > 0)
 8025b60:	687b      	ldr	r3, [r7, #4]
 8025b62:	2b00      	cmp	r3, #0
 8025b64:	d1c2      	bne.n	8025aec <sha256Update+0x10>
      }
   }
}
 8025b66:	bf00      	nop
 8025b68:	bf00      	nop
 8025b6a:	3718      	adds	r7, #24
 8025b6c:	46bd      	mov	sp, r7
 8025b6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08025b74 <sha256Final>:
 * @param[in] context Pointer to the SHA-256 context
 * @param[out] digest Calculated digest
 **/

__weak_func void sha256Final(Sha256Context *context, uint8_t *digest)
{
 8025b74:	b580      	push	{r7, lr}
 8025b76:	b086      	sub	sp, #24
 8025b78:	af00      	add	r7, sp, #0
 8025b7a:	6078      	str	r0, [r7, #4]
 8025b7c:	6039      	str	r1, [r7, #0]
   uint_t i;
   size_t paddingSize;
   uint64_t totalSize;

   //Length of the original message (before padding)
   totalSize = context->totalSize * 8;
 8025b7e:	687b      	ldr	r3, [r7, #4]
 8025b80:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8025b84:	f04f 0200 	mov.w	r2, #0
 8025b88:	f04f 0300 	mov.w	r3, #0
 8025b8c:	00cb      	lsls	r3, r1, #3
 8025b8e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8025b92:	00c2      	lsls	r2, r0, #3
 8025b94:	e9c7 2302 	strd	r2, r3, [r7, #8]

   //Pad the message so that its length is congruent to 56 modulo 64
   if(context->size < 56)
 8025b98:	687b      	ldr	r3, [r7, #4]
 8025b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8025b9c:	2b37      	cmp	r3, #55	@ 0x37
 8025b9e:	d805      	bhi.n	8025bac <sha256Final+0x38>
   {
      paddingSize = 56 - context->size;
 8025ba0:	687b      	ldr	r3, [r7, #4]
 8025ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8025ba4:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8025ba8:	613b      	str	r3, [r7, #16]
 8025baa:	e004      	b.n	8025bb6 <sha256Final+0x42>
   }
   else
   {
      paddingSize = 64 + 56 - context->size;
 8025bac:	687b      	ldr	r3, [r7, #4]
 8025bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8025bb0:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8025bb4:	613b      	str	r3, [r7, #16]
   }

   //Append padding
   sha256Update(context, padding, paddingSize);
 8025bb6:	693a      	ldr	r2, [r7, #16]
 8025bb8:	4930      	ldr	r1, [pc, #192]	@ (8025c7c <sha256Final+0x108>)
 8025bba:	6878      	ldr	r0, [r7, #4]
 8025bbc:	f7ff ff8e 	bl	8025adc <sha256Update>

   //Append the length of the original message
   for(i = 0; i < 8; i++)
 8025bc0:	2300      	movs	r3, #0
 8025bc2:	617b      	str	r3, [r7, #20]
 8025bc4:	e017      	b.n	8025bf6 <sha256Final+0x82>
   {
      context->buffer[63 - i] = totalSize & 0xFF;
 8025bc6:	697b      	ldr	r3, [r7, #20]
 8025bc8:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8025bcc:	7a39      	ldrb	r1, [r7, #8]
 8025bce:	687a      	ldr	r2, [r7, #4]
 8025bd0:	4413      	add	r3, r2
 8025bd2:	460a      	mov	r2, r1
 8025bd4:	f883 2020 	strb.w	r2, [r3, #32]
      totalSize >>= 8;
 8025bd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025bdc:	f04f 0200 	mov.w	r2, #0
 8025be0:	f04f 0300 	mov.w	r3, #0
 8025be4:	0a02      	lsrs	r2, r0, #8
 8025be6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8025bea:	0a0b      	lsrs	r3, r1, #8
 8025bec:	e9c7 2302 	strd	r2, r3, [r7, #8]
   for(i = 0; i < 8; i++)
 8025bf0:	697b      	ldr	r3, [r7, #20]
 8025bf2:	3301      	adds	r3, #1
 8025bf4:	617b      	str	r3, [r7, #20]
 8025bf6:	697b      	ldr	r3, [r7, #20]
 8025bf8:	2b07      	cmp	r3, #7
 8025bfa:	d9e4      	bls.n	8025bc6 <sha256Final+0x52>
   }

   //Calculate the message digest
   sha256ProcessBlock(context);
 8025bfc:	6878      	ldr	r0, [r7, #4]
 8025bfe:	f000 f883 	bl	8025d08 <sha256ProcessBlock>

   //Copy the resulting digest
   for(i = 0; i < (SHA256_DIGEST_SIZE / 4); i++)
 8025c02:	2300      	movs	r3, #0
 8025c04:	617b      	str	r3, [r7, #20]
 8025c06:	e030      	b.n	8025c6a <sha256Final+0xf6>
   {
      STORE32BE(context->h[i], digest + i * 4);
 8025c08:	687b      	ldr	r3, [r7, #4]
 8025c0a:	697a      	ldr	r2, [r7, #20]
 8025c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025c10:	0e19      	lsrs	r1, r3, #24
 8025c12:	697b      	ldr	r3, [r7, #20]
 8025c14:	009b      	lsls	r3, r3, #2
 8025c16:	683a      	ldr	r2, [r7, #0]
 8025c18:	4413      	add	r3, r2
 8025c1a:	b2ca      	uxtb	r2, r1
 8025c1c:	701a      	strb	r2, [r3, #0]
 8025c1e:	687b      	ldr	r3, [r7, #4]
 8025c20:	697a      	ldr	r2, [r7, #20]
 8025c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025c26:	0c19      	lsrs	r1, r3, #16
 8025c28:	697b      	ldr	r3, [r7, #20]
 8025c2a:	009b      	lsls	r3, r3, #2
 8025c2c:	3301      	adds	r3, #1
 8025c2e:	683a      	ldr	r2, [r7, #0]
 8025c30:	4413      	add	r3, r2
 8025c32:	b2ca      	uxtb	r2, r1
 8025c34:	701a      	strb	r2, [r3, #0]
 8025c36:	687b      	ldr	r3, [r7, #4]
 8025c38:	697a      	ldr	r2, [r7, #20]
 8025c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025c3e:	0a19      	lsrs	r1, r3, #8
 8025c40:	697b      	ldr	r3, [r7, #20]
 8025c42:	009b      	lsls	r3, r3, #2
 8025c44:	3302      	adds	r3, #2
 8025c46:	683a      	ldr	r2, [r7, #0]
 8025c48:	4413      	add	r3, r2
 8025c4a:	b2ca      	uxtb	r2, r1
 8025c4c:	701a      	strb	r2, [r3, #0]
 8025c4e:	687b      	ldr	r3, [r7, #4]
 8025c50:	697a      	ldr	r2, [r7, #20]
 8025c52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025c56:	697b      	ldr	r3, [r7, #20]
 8025c58:	009b      	lsls	r3, r3, #2
 8025c5a:	3303      	adds	r3, #3
 8025c5c:	683a      	ldr	r2, [r7, #0]
 8025c5e:	4413      	add	r3, r2
 8025c60:	b2ca      	uxtb	r2, r1
 8025c62:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < (SHA256_DIGEST_SIZE / 4); i++)
 8025c64:	697b      	ldr	r3, [r7, #20]
 8025c66:	3301      	adds	r3, #1
 8025c68:	617b      	str	r3, [r7, #20]
 8025c6a:	697b      	ldr	r3, [r7, #20]
 8025c6c:	2b07      	cmp	r3, #7
 8025c6e:	d9cb      	bls.n	8025c08 <sha256Final+0x94>
   }
}
 8025c70:	bf00      	nop
 8025c72:	bf00      	nop
 8025c74:	3718      	adds	r7, #24
 8025c76:	46bd      	mov	sp, r7
 8025c78:	bd80      	pop	{r7, pc}
 8025c7a:	bf00      	nop
 8025c7c:	08032eac 	.word	0x08032eac

08025c80 <sha256FinalRaw>:
 * @param[in] context Pointer to the SHA-256 context
 * @param[out] digest Calculated digest
 **/

__weak_func void sha256FinalRaw(Sha256Context *context, uint8_t *digest)
{
 8025c80:	b480      	push	{r7}
 8025c82:	b085      	sub	sp, #20
 8025c84:	af00      	add	r7, sp, #0
 8025c86:	6078      	str	r0, [r7, #4]
 8025c88:	6039      	str	r1, [r7, #0]
   uint_t i;

   //Copy the resulting digest
   for(i = 0; i < (SHA256_DIGEST_SIZE / 4); i++)
 8025c8a:	2300      	movs	r3, #0
 8025c8c:	60fb      	str	r3, [r7, #12]
 8025c8e:	e030      	b.n	8025cf2 <sha256FinalRaw+0x72>
   {
      STORE32BE(context->h[i], digest + i * 4);
 8025c90:	687b      	ldr	r3, [r7, #4]
 8025c92:	68fa      	ldr	r2, [r7, #12]
 8025c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025c98:	0e19      	lsrs	r1, r3, #24
 8025c9a:	68fb      	ldr	r3, [r7, #12]
 8025c9c:	009b      	lsls	r3, r3, #2
 8025c9e:	683a      	ldr	r2, [r7, #0]
 8025ca0:	4413      	add	r3, r2
 8025ca2:	b2ca      	uxtb	r2, r1
 8025ca4:	701a      	strb	r2, [r3, #0]
 8025ca6:	687b      	ldr	r3, [r7, #4]
 8025ca8:	68fa      	ldr	r2, [r7, #12]
 8025caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025cae:	0c19      	lsrs	r1, r3, #16
 8025cb0:	68fb      	ldr	r3, [r7, #12]
 8025cb2:	009b      	lsls	r3, r3, #2
 8025cb4:	3301      	adds	r3, #1
 8025cb6:	683a      	ldr	r2, [r7, #0]
 8025cb8:	4413      	add	r3, r2
 8025cba:	b2ca      	uxtb	r2, r1
 8025cbc:	701a      	strb	r2, [r3, #0]
 8025cbe:	687b      	ldr	r3, [r7, #4]
 8025cc0:	68fa      	ldr	r2, [r7, #12]
 8025cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025cc6:	0a19      	lsrs	r1, r3, #8
 8025cc8:	68fb      	ldr	r3, [r7, #12]
 8025cca:	009b      	lsls	r3, r3, #2
 8025ccc:	3302      	adds	r3, #2
 8025cce:	683a      	ldr	r2, [r7, #0]
 8025cd0:	4413      	add	r3, r2
 8025cd2:	b2ca      	uxtb	r2, r1
 8025cd4:	701a      	strb	r2, [r3, #0]
 8025cd6:	687b      	ldr	r3, [r7, #4]
 8025cd8:	68fa      	ldr	r2, [r7, #12]
 8025cda:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025cde:	68fb      	ldr	r3, [r7, #12]
 8025ce0:	009b      	lsls	r3, r3, #2
 8025ce2:	3303      	adds	r3, #3
 8025ce4:	683a      	ldr	r2, [r7, #0]
 8025ce6:	4413      	add	r3, r2
 8025ce8:	b2ca      	uxtb	r2, r1
 8025cea:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < (SHA256_DIGEST_SIZE / 4); i++)
 8025cec:	68fb      	ldr	r3, [r7, #12]
 8025cee:	3301      	adds	r3, #1
 8025cf0:	60fb      	str	r3, [r7, #12]
 8025cf2:	68fb      	ldr	r3, [r7, #12]
 8025cf4:	2b07      	cmp	r3, #7
 8025cf6:	d9cb      	bls.n	8025c90 <sha256FinalRaw+0x10>
   }
}
 8025cf8:	bf00      	nop
 8025cfa:	bf00      	nop
 8025cfc:	3714      	adds	r7, #20
 8025cfe:	46bd      	mov	sp, r7
 8025d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d04:	4770      	bx	lr
	...

08025d08 <sha256ProcessBlock>:
 * @brief Process message in 16-word blocks
 * @param[in] context Pointer to the SHA-256 context
 **/

__weak_func void sha256ProcessBlock(Sha256Context *context)
{
 8025d08:	b490      	push	{r4, r7}
 8025d0a:	b08e      	sub	sp, #56	@ 0x38
 8025d0c:	af00      	add	r7, sp, #0
 8025d0e:	6078      	str	r0, [r7, #4]
   uint_t i;
   uint32_t temp1;
   uint32_t temp2;

   //Initialize the 8 working registers
   uint32_t a = context->h[0];
 8025d10:	687b      	ldr	r3, [r7, #4]
 8025d12:	681b      	ldr	r3, [r3, #0]
 8025d14:	633b      	str	r3, [r7, #48]	@ 0x30
   uint32_t b = context->h[1];
 8025d16:	687b      	ldr	r3, [r7, #4]
 8025d18:	685b      	ldr	r3, [r3, #4]
 8025d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   uint32_t c = context->h[2];
 8025d1c:	687b      	ldr	r3, [r7, #4]
 8025d1e:	689b      	ldr	r3, [r3, #8]
 8025d20:	62bb      	str	r3, [r7, #40]	@ 0x28
   uint32_t d = context->h[3];
 8025d22:	687b      	ldr	r3, [r7, #4]
 8025d24:	68db      	ldr	r3, [r3, #12]
 8025d26:	627b      	str	r3, [r7, #36]	@ 0x24
   uint32_t e = context->h[4];
 8025d28:	687b      	ldr	r3, [r7, #4]
 8025d2a:	691b      	ldr	r3, [r3, #16]
 8025d2c:	623b      	str	r3, [r7, #32]
   uint32_t f = context->h[5];
 8025d2e:	687b      	ldr	r3, [r7, #4]
 8025d30:	695b      	ldr	r3, [r3, #20]
 8025d32:	61fb      	str	r3, [r7, #28]
   uint32_t g = context->h[6];
 8025d34:	687b      	ldr	r3, [r7, #4]
 8025d36:	699b      	ldr	r3, [r3, #24]
 8025d38:	61bb      	str	r3, [r7, #24]
   uint32_t h = context->h[7];
 8025d3a:	687b      	ldr	r3, [r7, #4]
 8025d3c:	69db      	ldr	r3, [r3, #28]
 8025d3e:	617b      	str	r3, [r7, #20]

   //Process message in 16-word blocks
   uint32_t *w = context->w;
 8025d40:	687b      	ldr	r3, [r7, #4]
 8025d42:	3320      	adds	r3, #32
 8025d44:	613b      	str	r3, [r7, #16]

   //Convert from big-endian byte order to host byte order
   for(i = 0; i < 16; i++)
 8025d46:	2300      	movs	r3, #0
 8025d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8025d4a:	e02d      	b.n	8025da8 <sha256ProcessBlock+0xa0>
   {
      w[i] = LOAD32BE(context->buffer + i * 4);
 8025d4c:	687b      	ldr	r3, [r7, #4]
 8025d4e:	f103 0220 	add.w	r2, r3, #32
 8025d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025d54:	009b      	lsls	r3, r3, #2
 8025d56:	4413      	add	r3, r2
 8025d58:	781b      	ldrb	r3, [r3, #0]
 8025d5a:	061a      	lsls	r2, r3, #24
 8025d5c:	687b      	ldr	r3, [r7, #4]
 8025d5e:	f103 0120 	add.w	r1, r3, #32
 8025d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025d64:	009b      	lsls	r3, r3, #2
 8025d66:	3301      	adds	r3, #1
 8025d68:	440b      	add	r3, r1
 8025d6a:	781b      	ldrb	r3, [r3, #0]
 8025d6c:	041b      	lsls	r3, r3, #16
 8025d6e:	431a      	orrs	r2, r3
 8025d70:	687b      	ldr	r3, [r7, #4]
 8025d72:	f103 0120 	add.w	r1, r3, #32
 8025d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025d78:	009b      	lsls	r3, r3, #2
 8025d7a:	3302      	adds	r3, #2
 8025d7c:	440b      	add	r3, r1
 8025d7e:	781b      	ldrb	r3, [r3, #0]
 8025d80:	021b      	lsls	r3, r3, #8
 8025d82:	431a      	orrs	r2, r3
 8025d84:	687b      	ldr	r3, [r7, #4]
 8025d86:	f103 0120 	add.w	r1, r3, #32
 8025d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025d8c:	009b      	lsls	r3, r3, #2
 8025d8e:	3303      	adds	r3, #3
 8025d90:	440b      	add	r3, r1
 8025d92:	781b      	ldrb	r3, [r3, #0]
 8025d94:	4618      	mov	r0, r3
 8025d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025d98:	009b      	lsls	r3, r3, #2
 8025d9a:	6939      	ldr	r1, [r7, #16]
 8025d9c:	440b      	add	r3, r1
 8025d9e:	4302      	orrs	r2, r0
 8025da0:	601a      	str	r2, [r3, #0]
   for(i = 0; i < 16; i++)
 8025da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025da4:	3301      	adds	r3, #1
 8025da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8025da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025daa:	2b0f      	cmp	r3, #15
 8025dac:	d9ce      	bls.n	8025d4c <sha256ProcessBlock+0x44>
   }

   //SHA-256 hash computation (alternate method)
   for(i = 0; i < 64; i++)
 8025dae:	2300      	movs	r3, #0
 8025db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8025db2:	e0aa      	b.n	8025f0a <sha256ProcessBlock+0x202>
   {
      //Prepare the message schedule
      if(i >= 16)
 8025db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025db6:	2b0f      	cmp	r3, #15
 8025db8:	d956      	bls.n	8025e68 <sha256ProcessBlock+0x160>
      {
         W(i) += SIGMA4(W(i + 14)) + W(i + 9) + SIGMA3(W(i + 1));
 8025dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025dbc:	f003 030f 	and.w	r3, r3, #15
 8025dc0:	009b      	lsls	r3, r3, #2
 8025dc2:	693a      	ldr	r2, [r7, #16]
 8025dc4:	4413      	add	r3, r2
 8025dc6:	6819      	ldr	r1, [r3, #0]
 8025dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025dca:	330e      	adds	r3, #14
 8025dcc:	f003 030f 	and.w	r3, r3, #15
 8025dd0:	009b      	lsls	r3, r3, #2
 8025dd2:	693a      	ldr	r2, [r7, #16]
 8025dd4:	4413      	add	r3, r2
 8025dd6:	681b      	ldr	r3, [r3, #0]
 8025dd8:	ea4f 4273 	mov.w	r2, r3, ror #17
 8025ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025dde:	330e      	adds	r3, #14
 8025de0:	f003 030f 	and.w	r3, r3, #15
 8025de4:	009b      	lsls	r3, r3, #2
 8025de6:	6938      	ldr	r0, [r7, #16]
 8025de8:	4403      	add	r3, r0
 8025dea:	681b      	ldr	r3, [r3, #0]
 8025dec:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8025df0:	405a      	eors	r2, r3
 8025df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025df4:	330e      	adds	r3, #14
 8025df6:	f003 030f 	and.w	r3, r3, #15
 8025dfa:	009b      	lsls	r3, r3, #2
 8025dfc:	6938      	ldr	r0, [r7, #16]
 8025dfe:	4403      	add	r3, r0
 8025e00:	681b      	ldr	r3, [r3, #0]
 8025e02:	0a9b      	lsrs	r3, r3, #10
 8025e04:	405a      	eors	r2, r3
 8025e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025e08:	3309      	adds	r3, #9
 8025e0a:	f003 030f 	and.w	r3, r3, #15
 8025e0e:	009b      	lsls	r3, r3, #2
 8025e10:	6938      	ldr	r0, [r7, #16]
 8025e12:	4403      	add	r3, r0
 8025e14:	681b      	ldr	r3, [r3, #0]
 8025e16:	441a      	add	r2, r3
 8025e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025e1a:	3301      	adds	r3, #1
 8025e1c:	f003 030f 	and.w	r3, r3, #15
 8025e20:	009b      	lsls	r3, r3, #2
 8025e22:	6938      	ldr	r0, [r7, #16]
 8025e24:	4403      	add	r3, r0
 8025e26:	681b      	ldr	r3, [r3, #0]
 8025e28:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8025e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025e2e:	3301      	adds	r3, #1
 8025e30:	f003 030f 	and.w	r3, r3, #15
 8025e34:	009b      	lsls	r3, r3, #2
 8025e36:	693c      	ldr	r4, [r7, #16]
 8025e38:	4423      	add	r3, r4
 8025e3a:	681b      	ldr	r3, [r3, #0]
 8025e3c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8025e40:	4058      	eors	r0, r3
 8025e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025e44:	3301      	adds	r3, #1
 8025e46:	f003 030f 	and.w	r3, r3, #15
 8025e4a:	009b      	lsls	r3, r3, #2
 8025e4c:	693c      	ldr	r4, [r7, #16]
 8025e4e:	4423      	add	r3, r4
 8025e50:	681b      	ldr	r3, [r3, #0]
 8025e52:	08db      	lsrs	r3, r3, #3
 8025e54:	4043      	eors	r3, r0
 8025e56:	441a      	add	r2, r3
 8025e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025e5a:	f003 030f 	and.w	r3, r3, #15
 8025e5e:	009b      	lsls	r3, r3, #2
 8025e60:	6938      	ldr	r0, [r7, #16]
 8025e62:	4403      	add	r3, r0
 8025e64:	440a      	add	r2, r1
 8025e66:	601a      	str	r2, [r3, #0]
      }

      //Calculate T1 and T2
      temp1 = h + SIGMA2(e) + CH(e, f, g) + k[i] + W(i);
 8025e68:	6a3b      	ldr	r3, [r7, #32]
 8025e6a:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8025e6e:	6a3b      	ldr	r3, [r7, #32]
 8025e70:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8025e74:	405a      	eors	r2, r3
 8025e76:	6a3b      	ldr	r3, [r7, #32]
 8025e78:	ea4f 6373 	mov.w	r3, r3, ror #25
 8025e7c:	405a      	eors	r2, r3
 8025e7e:	697b      	ldr	r3, [r7, #20]
 8025e80:	441a      	add	r2, r3
 8025e82:	6a39      	ldr	r1, [r7, #32]
 8025e84:	69fb      	ldr	r3, [r7, #28]
 8025e86:	4019      	ands	r1, r3
 8025e88:	6a3b      	ldr	r3, [r7, #32]
 8025e8a:	43d8      	mvns	r0, r3
 8025e8c:	69bb      	ldr	r3, [r7, #24]
 8025e8e:	4003      	ands	r3, r0
 8025e90:	430b      	orrs	r3, r1
 8025e92:	441a      	add	r2, r3
 8025e94:	4939      	ldr	r1, [pc, #228]	@ (8025f7c <sha256ProcessBlock+0x274>)
 8025e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025e98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8025e9c:	441a      	add	r2, r3
 8025e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025ea0:	f003 030f 	and.w	r3, r3, #15
 8025ea4:	009b      	lsls	r3, r3, #2
 8025ea6:	6939      	ldr	r1, [r7, #16]
 8025ea8:	440b      	add	r3, r1
 8025eaa:	681b      	ldr	r3, [r3, #0]
 8025eac:	4413      	add	r3, r2
 8025eae:	60fb      	str	r3, [r7, #12]
      temp2 = SIGMA1(a) + MAJ(a, b, c);
 8025eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025eb2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8025eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025eb8:	ea4f 3373 	mov.w	r3, r3, ror #13
 8025ebc:	405a      	eors	r2, r3
 8025ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025ec0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8025ec4:	405a      	eors	r2, r3
 8025ec6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8025ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025eca:	4319      	orrs	r1, r3
 8025ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025ece:	4019      	ands	r1, r3
 8025ed0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8025ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025ed4:	4003      	ands	r3, r0
 8025ed6:	430b      	orrs	r3, r1
 8025ed8:	4413      	add	r3, r2
 8025eda:	60bb      	str	r3, [r7, #8]

      //Update working registers
      h = g;
 8025edc:	69bb      	ldr	r3, [r7, #24]
 8025ede:	617b      	str	r3, [r7, #20]
      g = f;
 8025ee0:	69fb      	ldr	r3, [r7, #28]
 8025ee2:	61bb      	str	r3, [r7, #24]
      f = e;
 8025ee4:	6a3b      	ldr	r3, [r7, #32]
 8025ee6:	61fb      	str	r3, [r7, #28]
      e = d + temp1;
 8025ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025eea:	68fb      	ldr	r3, [r7, #12]
 8025eec:	4413      	add	r3, r2
 8025eee:	623b      	str	r3, [r7, #32]
      d = c;
 8025ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025ef2:	627b      	str	r3, [r7, #36]	@ 0x24
      c = b;
 8025ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
      b = a;
 8025ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      a = temp1 + temp2;
 8025efc:	68fa      	ldr	r2, [r7, #12]
 8025efe:	68bb      	ldr	r3, [r7, #8]
 8025f00:	4413      	add	r3, r2
 8025f02:	633b      	str	r3, [r7, #48]	@ 0x30
   for(i = 0; i < 64; i++)
 8025f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025f06:	3301      	adds	r3, #1
 8025f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8025f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025f0c:	2b3f      	cmp	r3, #63	@ 0x3f
 8025f0e:	f67f af51 	bls.w	8025db4 <sha256ProcessBlock+0xac>
   }

   //Update the hash value
   context->h[0] += a;
 8025f12:	687b      	ldr	r3, [r7, #4]
 8025f14:	681a      	ldr	r2, [r3, #0]
 8025f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025f18:	441a      	add	r2, r3
 8025f1a:	687b      	ldr	r3, [r7, #4]
 8025f1c:	601a      	str	r2, [r3, #0]
   context->h[1] += b;
 8025f1e:	687b      	ldr	r3, [r7, #4]
 8025f20:	685a      	ldr	r2, [r3, #4]
 8025f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025f24:	441a      	add	r2, r3
 8025f26:	687b      	ldr	r3, [r7, #4]
 8025f28:	605a      	str	r2, [r3, #4]
   context->h[2] += c;
 8025f2a:	687b      	ldr	r3, [r7, #4]
 8025f2c:	689a      	ldr	r2, [r3, #8]
 8025f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025f30:	441a      	add	r2, r3
 8025f32:	687b      	ldr	r3, [r7, #4]
 8025f34:	609a      	str	r2, [r3, #8]
   context->h[3] += d;
 8025f36:	687b      	ldr	r3, [r7, #4]
 8025f38:	68da      	ldr	r2, [r3, #12]
 8025f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025f3c:	441a      	add	r2, r3
 8025f3e:	687b      	ldr	r3, [r7, #4]
 8025f40:	60da      	str	r2, [r3, #12]
   context->h[4] += e;
 8025f42:	687b      	ldr	r3, [r7, #4]
 8025f44:	691a      	ldr	r2, [r3, #16]
 8025f46:	6a3b      	ldr	r3, [r7, #32]
 8025f48:	441a      	add	r2, r3
 8025f4a:	687b      	ldr	r3, [r7, #4]
 8025f4c:	611a      	str	r2, [r3, #16]
   context->h[5] += f;
 8025f4e:	687b      	ldr	r3, [r7, #4]
 8025f50:	695a      	ldr	r2, [r3, #20]
 8025f52:	69fb      	ldr	r3, [r7, #28]
 8025f54:	441a      	add	r2, r3
 8025f56:	687b      	ldr	r3, [r7, #4]
 8025f58:	615a      	str	r2, [r3, #20]
   context->h[6] += g;
 8025f5a:	687b      	ldr	r3, [r7, #4]
 8025f5c:	699a      	ldr	r2, [r3, #24]
 8025f5e:	69bb      	ldr	r3, [r7, #24]
 8025f60:	441a      	add	r2, r3
 8025f62:	687b      	ldr	r3, [r7, #4]
 8025f64:	619a      	str	r2, [r3, #24]
   context->h[7] += h;
 8025f66:	687b      	ldr	r3, [r7, #4]
 8025f68:	69da      	ldr	r2, [r3, #28]
 8025f6a:	697b      	ldr	r3, [r7, #20]
 8025f6c:	441a      	add	r2, r3
 8025f6e:	687b      	ldr	r3, [r7, #4]
 8025f70:	61da      	str	r2, [r3, #28]
}
 8025f72:	bf00      	nop
 8025f74:	3738      	adds	r7, #56	@ 0x38
 8025f76:	46bd      	mov	sp, r7
 8025f78:	bc90      	pop	{r4, r7}
 8025f7a:	4770      	bx	lr
 8025f7c:	08032eec 	.word	0x08032eec

08025f80 <mpiInit>:
 * @brief Initialize a multiple precision integer
 * @param[in,out] r Pointer to the multiple precision integer to be initialized
 **/

void mpiInit(Mpi *r)
{
 8025f80:	b480      	push	{r7}
 8025f82:	b083      	sub	sp, #12
 8025f84:	af00      	add	r7, sp, #0
 8025f86:	6078      	str	r0, [r7, #4]
   //Initialize structure
   r->sign = 1;
 8025f88:	687b      	ldr	r3, [r7, #4]
 8025f8a:	2201      	movs	r2, #1
 8025f8c:	601a      	str	r2, [r3, #0]
   r->size = 0;
 8025f8e:	687b      	ldr	r3, [r7, #4]
 8025f90:	2200      	movs	r2, #0
 8025f92:	605a      	str	r2, [r3, #4]
#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   r->data = NULL;
 8025f94:	687b      	ldr	r3, [r7, #4]
 8025f96:	2200      	movs	r2, #0
 8025f98:	609a      	str	r2, [r3, #8]
#endif
}
 8025f9a:	bf00      	nop
 8025f9c:	370c      	adds	r7, #12
 8025f9e:	46bd      	mov	sp, r7
 8025fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fa4:	4770      	bx	lr

08025fa6 <mpiFree>:
 * @brief Release a multiple precision integer
 * @param[in,out] r Pointer to the multiple precision integer to be freed
 **/

void mpiFree(Mpi *r)
{
 8025fa6:	b580      	push	{r7, lr}
 8025fa8:	b084      	sub	sp, #16
 8025faa:	af00      	add	r7, sp, #0
 8025fac:	6078      	str	r0, [r7, #4]
   uint_t i;

#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   //Any memory previously allocated?
   if(r->data != NULL)
 8025fae:	687b      	ldr	r3, [r7, #4]
 8025fb0:	689b      	ldr	r3, [r3, #8]
 8025fb2:	2b00      	cmp	r3, #0
 8025fb4:	d019      	beq.n	8025fea <mpiFree+0x44>
   {
      //Erase contents
      for(i = 0; i < r->size; i++)
 8025fb6:	2300      	movs	r3, #0
 8025fb8:	60fb      	str	r3, [r7, #12]
 8025fba:	e009      	b.n	8025fd0 <mpiFree+0x2a>
      {
         r->data[i] = 0;
 8025fbc:	687b      	ldr	r3, [r7, #4]
 8025fbe:	689a      	ldr	r2, [r3, #8]
 8025fc0:	68fb      	ldr	r3, [r7, #12]
 8025fc2:	009b      	lsls	r3, r3, #2
 8025fc4:	4413      	add	r3, r2
 8025fc6:	2200      	movs	r2, #0
 8025fc8:	601a      	str	r2, [r3, #0]
      for(i = 0; i < r->size; i++)
 8025fca:	68fb      	ldr	r3, [r7, #12]
 8025fcc:	3301      	adds	r3, #1
 8025fce:	60fb      	str	r3, [r7, #12]
 8025fd0:	687b      	ldr	r3, [r7, #4]
 8025fd2:	685b      	ldr	r3, [r3, #4]
 8025fd4:	68fa      	ldr	r2, [r7, #12]
 8025fd6:	429a      	cmp	r2, r3
 8025fd8:	d3f0      	bcc.n	8025fbc <mpiFree+0x16>
      }

      //Release memory buffer
      cryptoFreeMem(r->data);
 8025fda:	687b      	ldr	r3, [r7, #4]
 8025fdc:	689b      	ldr	r3, [r3, #8]
 8025fde:	4618      	mov	r0, r3
 8025fe0:	f7fb fa11 	bl	8021406 <osFreeMem>
      r->data = NULL;
 8025fe4:	687b      	ldr	r3, [r7, #4]
 8025fe6:	2200      	movs	r2, #0
 8025fe8:	609a      	str	r2, [r3, #8]
      r->data[i] = 0;
   }
#endif

   //Reset size to zero
   r->size = 0;
 8025fea:	687b      	ldr	r3, [r7, #4]
 8025fec:	2200      	movs	r2, #0
 8025fee:	605a      	str	r2, [r3, #4]
}
 8025ff0:	bf00      	nop
 8025ff2:	3710      	adds	r7, #16
 8025ff4:	46bd      	mov	sp, r7
 8025ff6:	bd80      	pop	{r7, pc}

08025ff8 <mpiGrow>:
 * @param[in] size Desired size in words
 * @return Error code
 **/

error_t mpiGrow(Mpi *r, uint_t size)
{
 8025ff8:	b580      	push	{r7, lr}
 8025ffa:	b086      	sub	sp, #24
 8025ffc:	af00      	add	r7, sp, #0
 8025ffe:	6078      	str	r0, [r7, #4]
 8026000:	6039      	str	r1, [r7, #0]
#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   uint_t *data;
#endif

   //Initialize status code
   error = NO_ERROR;
 8026002:	2300      	movs	r3, #0
 8026004:	82fb      	strh	r3, [r7, #22]

   //Ensure the parameter is valid
   size = MAX(size, 1);
 8026006:	683b      	ldr	r3, [r7, #0]
 8026008:	2b01      	cmp	r3, #1
 802600a:	bf38      	it	cc
 802600c:	2301      	movcc	r3, #1
 802600e:	603b      	str	r3, [r7, #0]

   //Check whether the size of the multiple precision integer must be increased
   if(size > r->size)
 8026010:	687b      	ldr	r3, [r7, #4]
 8026012:	685b      	ldr	r3, [r3, #4]
 8026014:	683a      	ldr	r2, [r7, #0]
 8026016:	429a      	cmp	r2, r3
 8026018:	d948      	bls.n	80260ac <mpiGrow+0xb4>
   {
#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
      //Allocate a new memory buffer
      data = cryptoAllocMem(size * sizeof(uint_t));
 802601a:	683b      	ldr	r3, [r7, #0]
 802601c:	009b      	lsls	r3, r3, #2
 802601e:	4618      	mov	r0, r3
 8026020:	f7fb f9e3 	bl	80213ea <osAllocMem>
 8026024:	60f8      	str	r0, [r7, #12]

      //Successful memory allocation?
      if(data != NULL)
 8026026:	68fb      	ldr	r3, [r7, #12]
 8026028:	2b00      	cmp	r3, #0
 802602a:	d03d      	beq.n	80260a8 <mpiGrow+0xb0>
      {
         //Any data to copy?
         if(r->size > 0)
 802602c:	687b      	ldr	r3, [r7, #4]
 802602e:	685b      	ldr	r3, [r3, #4]
 8026030:	2b00      	cmp	r3, #0
 8026032:	d021      	beq.n	8026078 <mpiGrow+0x80>
         {
            //Copy original data
            for(i = 0; i < r->size; i++)
 8026034:	2300      	movs	r3, #0
 8026036:	613b      	str	r3, [r7, #16]
 8026038:	e014      	b.n	8026064 <mpiGrow+0x6c>
            {
               data[i] = r->data[i];
 802603a:	687b      	ldr	r3, [r7, #4]
 802603c:	689a      	ldr	r2, [r3, #8]
 802603e:	693b      	ldr	r3, [r7, #16]
 8026040:	009b      	lsls	r3, r3, #2
 8026042:	441a      	add	r2, r3
 8026044:	693b      	ldr	r3, [r7, #16]
 8026046:	009b      	lsls	r3, r3, #2
 8026048:	68f9      	ldr	r1, [r7, #12]
 802604a:	440b      	add	r3, r1
 802604c:	6812      	ldr	r2, [r2, #0]
 802604e:	601a      	str	r2, [r3, #0]
               r->data[i] = 0;
 8026050:	687b      	ldr	r3, [r7, #4]
 8026052:	689a      	ldr	r2, [r3, #8]
 8026054:	693b      	ldr	r3, [r7, #16]
 8026056:	009b      	lsls	r3, r3, #2
 8026058:	4413      	add	r3, r2
 802605a:	2200      	movs	r2, #0
 802605c:	601a      	str	r2, [r3, #0]
            for(i = 0; i < r->size; i++)
 802605e:	693b      	ldr	r3, [r7, #16]
 8026060:	3301      	adds	r3, #1
 8026062:	613b      	str	r3, [r7, #16]
 8026064:	687b      	ldr	r3, [r7, #4]
 8026066:	685b      	ldr	r3, [r3, #4]
 8026068:	693a      	ldr	r2, [r7, #16]
 802606a:	429a      	cmp	r2, r3
 802606c:	d3e5      	bcc.n	802603a <mpiGrow+0x42>
            }

            //Release old memory buffer
            cryptoFreeMem(r->data);
 802606e:	687b      	ldr	r3, [r7, #4]
 8026070:	689b      	ldr	r3, [r3, #8]
 8026072:	4618      	mov	r0, r3
 8026074:	f7fb f9c7 	bl	8021406 <osFreeMem>
         }

         //Clear upper words
         for(i = r->size; i < size; i++)
 8026078:	687b      	ldr	r3, [r7, #4]
 802607a:	685b      	ldr	r3, [r3, #4]
 802607c:	613b      	str	r3, [r7, #16]
 802607e:	e008      	b.n	8026092 <mpiGrow+0x9a>
         {
            data[i] = 0;
 8026080:	693b      	ldr	r3, [r7, #16]
 8026082:	009b      	lsls	r3, r3, #2
 8026084:	68fa      	ldr	r2, [r7, #12]
 8026086:	4413      	add	r3, r2
 8026088:	2200      	movs	r2, #0
 802608a:	601a      	str	r2, [r3, #0]
         for(i = r->size; i < size; i++)
 802608c:	693b      	ldr	r3, [r7, #16]
 802608e:	3301      	adds	r3, #1
 8026090:	613b      	str	r3, [r7, #16]
 8026092:	693a      	ldr	r2, [r7, #16]
 8026094:	683b      	ldr	r3, [r7, #0]
 8026096:	429a      	cmp	r2, r3
 8026098:	d3f2      	bcc.n	8026080 <mpiGrow+0x88>
         }

         //Attach new memory buffer
         r->data = data;
 802609a:	687b      	ldr	r3, [r7, #4]
 802609c:	68fa      	ldr	r2, [r7, #12]
 802609e:	609a      	str	r2, [r3, #8]
         //Update the size of the multiple precision integer
         r->size = size;
 80260a0:	687b      	ldr	r3, [r7, #4]
 80260a2:	683a      	ldr	r2, [r7, #0]
 80260a4:	605a      	str	r2, [r3, #4]
 80260a6:	e001      	b.n	80260ac <mpiGrow+0xb4>
      }
      else
      {
         //Failed to allocate memory
         error = ERROR_OUT_OF_MEMORY;
 80260a8:	2364      	movs	r3, #100	@ 0x64
 80260aa:	82fb      	strh	r3, [r7, #22]
      }
#endif
   }

   //Return status code
   return error;
 80260ac:	8afb      	ldrh	r3, [r7, #22]
}
 80260ae:	4618      	mov	r0, r3
 80260b0:	3718      	adds	r7, #24
 80260b2:	46bd      	mov	sp, r7
 80260b4:	bd80      	pop	{r7, pc}

080260b6 <mpiGetLength>:
 * @param[in] a Pointer to a multiple precision integer
 * @return The actual length in words
 **/

uint_t mpiGetLength(const Mpi *a)
{
 80260b6:	b480      	push	{r7}
 80260b8:	b085      	sub	sp, #20
 80260ba:	af00      	add	r7, sp, #0
 80260bc:	6078      	str	r0, [r7, #4]
   int_t i;

   //Check whether the specified multiple precision integer is empty
   if(a->size == 0)
 80260be:	687b      	ldr	r3, [r7, #4]
 80260c0:	685b      	ldr	r3, [r3, #4]
 80260c2:	2b00      	cmp	r3, #0
 80260c4:	d101      	bne.n	80260ca <mpiGetLength+0x14>
      return 0;
 80260c6:	2300      	movs	r3, #0
 80260c8:	e016      	b.n	80260f8 <mpiGetLength+0x42>

   //Start from the most significant word
   for(i = a->size - 1; i >= 0; i--)
 80260ca:	687b      	ldr	r3, [r7, #4]
 80260cc:	685b      	ldr	r3, [r3, #4]
 80260ce:	3b01      	subs	r3, #1
 80260d0:	60fb      	str	r3, [r7, #12]
 80260d2:	e00a      	b.n	80260ea <mpiGetLength+0x34>
   {
      //Loop as long as the current word is zero
      if(a->data[i] != 0)
 80260d4:	687b      	ldr	r3, [r7, #4]
 80260d6:	689a      	ldr	r2, [r3, #8]
 80260d8:	68fb      	ldr	r3, [r7, #12]
 80260da:	009b      	lsls	r3, r3, #2
 80260dc:	4413      	add	r3, r2
 80260de:	681b      	ldr	r3, [r3, #0]
 80260e0:	2b00      	cmp	r3, #0
 80260e2:	d106      	bne.n	80260f2 <mpiGetLength+0x3c>
   for(i = a->size - 1; i >= 0; i--)
 80260e4:	68fb      	ldr	r3, [r7, #12]
 80260e6:	3b01      	subs	r3, #1
 80260e8:	60fb      	str	r3, [r7, #12]
 80260ea:	68fb      	ldr	r3, [r7, #12]
 80260ec:	2b00      	cmp	r3, #0
 80260ee:	daf1      	bge.n	80260d4 <mpiGetLength+0x1e>
 80260f0:	e000      	b.n	80260f4 <mpiGetLength+0x3e>
         break;
 80260f2:	bf00      	nop
   }

   //Return the actual length
   return i + 1;
 80260f4:	68fb      	ldr	r3, [r7, #12]
 80260f6:	3301      	adds	r3, #1
}
 80260f8:	4618      	mov	r0, r3
 80260fa:	3714      	adds	r7, #20
 80260fc:	46bd      	mov	sp, r7
 80260fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026102:	4770      	bx	lr

08026104 <mpiGetByteLength>:
 * @param[in] a Pointer to a multiple precision integer
 * @return The actual byte count
 **/

uint_t mpiGetByteLength(const Mpi *a)
{
 8026104:	b480      	push	{r7}
 8026106:	b085      	sub	sp, #20
 8026108:	af00      	add	r7, sp, #0
 802610a:	6078      	str	r0, [r7, #4]
   uint_t n;
   uint32_t m;

   //Check whether the specified multiple precision integer is empty
   if(a->size == 0)
 802610c:	687b      	ldr	r3, [r7, #4]
 802610e:	685b      	ldr	r3, [r3, #4]
 8026110:	2b00      	cmp	r3, #0
 8026112:	d101      	bne.n	8026118 <mpiGetByteLength+0x14>
      return 0;
 8026114:	2300      	movs	r3, #0
 8026116:	e029      	b.n	802616c <mpiGetByteLength+0x68>

   //Start from the most significant word
   for(n = a->size - 1; n > 0; n--)
 8026118:	687b      	ldr	r3, [r7, #4]
 802611a:	685b      	ldr	r3, [r3, #4]
 802611c:	3b01      	subs	r3, #1
 802611e:	60fb      	str	r3, [r7, #12]
 8026120:	e00a      	b.n	8026138 <mpiGetByteLength+0x34>
   {
      //Loop as long as the current word is zero
      if(a->data[n] != 0)
 8026122:	687b      	ldr	r3, [r7, #4]
 8026124:	689a      	ldr	r2, [r3, #8]
 8026126:	68fb      	ldr	r3, [r7, #12]
 8026128:	009b      	lsls	r3, r3, #2
 802612a:	4413      	add	r3, r2
 802612c:	681b      	ldr	r3, [r3, #0]
 802612e:	2b00      	cmp	r3, #0
 8026130:	d106      	bne.n	8026140 <mpiGetByteLength+0x3c>
   for(n = a->size - 1; n > 0; n--)
 8026132:	68fb      	ldr	r3, [r7, #12]
 8026134:	3b01      	subs	r3, #1
 8026136:	60fb      	str	r3, [r7, #12]
 8026138:	68fb      	ldr	r3, [r7, #12]
 802613a:	2b00      	cmp	r3, #0
 802613c:	d1f1      	bne.n	8026122 <mpiGetByteLength+0x1e>
 802613e:	e000      	b.n	8026142 <mpiGetByteLength+0x3e>
         break;
 8026140:	bf00      	nop
   }

   //Get the current word
   m = a->data[n];
 8026142:	687b      	ldr	r3, [r7, #4]
 8026144:	689a      	ldr	r2, [r3, #8]
 8026146:	68fb      	ldr	r3, [r7, #12]
 8026148:	009b      	lsls	r3, r3, #2
 802614a:	4413      	add	r3, r2
 802614c:	681b      	ldr	r3, [r3, #0]
 802614e:	60bb      	str	r3, [r7, #8]
   //Convert the length to a byte count
   n *= MPI_INT_SIZE;
 8026150:	68fb      	ldr	r3, [r7, #12]
 8026152:	009b      	lsls	r3, r3, #2
 8026154:	60fb      	str	r3, [r7, #12]

   //Adjust the byte count
   for(; m != 0; m >>= 8)
 8026156:	e005      	b.n	8026164 <mpiGetByteLength+0x60>
   {
      n++;
 8026158:	68fb      	ldr	r3, [r7, #12]
 802615a:	3301      	adds	r3, #1
 802615c:	60fb      	str	r3, [r7, #12]
   for(; m != 0; m >>= 8)
 802615e:	68bb      	ldr	r3, [r7, #8]
 8026160:	0a1b      	lsrs	r3, r3, #8
 8026162:	60bb      	str	r3, [r7, #8]
 8026164:	68bb      	ldr	r3, [r7, #8]
 8026166:	2b00      	cmp	r3, #0
 8026168:	d1f6      	bne.n	8026158 <mpiGetByteLength+0x54>
   }

   //Return the actual length in bytes
   return n;
 802616a:	68fb      	ldr	r3, [r7, #12]
}
 802616c:	4618      	mov	r0, r3
 802616e:	3714      	adds	r7, #20
 8026170:	46bd      	mov	sp, r7
 8026172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026176:	4770      	bx	lr

08026178 <mpiGetBitLength>:
 * @param[in] a Pointer to a multiple precision integer
 * @return The actual bit count
 **/

uint_t mpiGetBitLength(const Mpi *a)
{
 8026178:	b480      	push	{r7}
 802617a:	b085      	sub	sp, #20
 802617c:	af00      	add	r7, sp, #0
 802617e:	6078      	str	r0, [r7, #4]
   uint_t n;
   uint32_t m;

   //Check whether the specified multiple precision integer is empty
   if(a->size == 0)
 8026180:	687b      	ldr	r3, [r7, #4]
 8026182:	685b      	ldr	r3, [r3, #4]
 8026184:	2b00      	cmp	r3, #0
 8026186:	d101      	bne.n	802618c <mpiGetBitLength+0x14>
      return 0;
 8026188:	2300      	movs	r3, #0
 802618a:	e029      	b.n	80261e0 <mpiGetBitLength+0x68>

   //Start from the most significant word
   for(n = a->size - 1; n > 0; n--)
 802618c:	687b      	ldr	r3, [r7, #4]
 802618e:	685b      	ldr	r3, [r3, #4]
 8026190:	3b01      	subs	r3, #1
 8026192:	60fb      	str	r3, [r7, #12]
 8026194:	e00a      	b.n	80261ac <mpiGetBitLength+0x34>
   {
      //Loop as long as the current word is zero
      if(a->data[n] != 0)
 8026196:	687b      	ldr	r3, [r7, #4]
 8026198:	689a      	ldr	r2, [r3, #8]
 802619a:	68fb      	ldr	r3, [r7, #12]
 802619c:	009b      	lsls	r3, r3, #2
 802619e:	4413      	add	r3, r2
 80261a0:	681b      	ldr	r3, [r3, #0]
 80261a2:	2b00      	cmp	r3, #0
 80261a4:	d106      	bne.n	80261b4 <mpiGetBitLength+0x3c>
   for(n = a->size - 1; n > 0; n--)
 80261a6:	68fb      	ldr	r3, [r7, #12]
 80261a8:	3b01      	subs	r3, #1
 80261aa:	60fb      	str	r3, [r7, #12]
 80261ac:	68fb      	ldr	r3, [r7, #12]
 80261ae:	2b00      	cmp	r3, #0
 80261b0:	d1f1      	bne.n	8026196 <mpiGetBitLength+0x1e>
 80261b2:	e000      	b.n	80261b6 <mpiGetBitLength+0x3e>
         break;
 80261b4:	bf00      	nop
   }

   //Get the current word
   m = a->data[n];
 80261b6:	687b      	ldr	r3, [r7, #4]
 80261b8:	689a      	ldr	r2, [r3, #8]
 80261ba:	68fb      	ldr	r3, [r7, #12]
 80261bc:	009b      	lsls	r3, r3, #2
 80261be:	4413      	add	r3, r2
 80261c0:	681b      	ldr	r3, [r3, #0]
 80261c2:	60bb      	str	r3, [r7, #8]
   //Convert the length to a bit count
   n *= MPI_INT_SIZE * 8;
 80261c4:	68fb      	ldr	r3, [r7, #12]
 80261c6:	015b      	lsls	r3, r3, #5
 80261c8:	60fb      	str	r3, [r7, #12]

   //Adjust the bit count
   for(; m != 0; m >>= 1)
 80261ca:	e005      	b.n	80261d8 <mpiGetBitLength+0x60>
   {
      n++;
 80261cc:	68fb      	ldr	r3, [r7, #12]
 80261ce:	3301      	adds	r3, #1
 80261d0:	60fb      	str	r3, [r7, #12]
   for(; m != 0; m >>= 1)
 80261d2:	68bb      	ldr	r3, [r7, #8]
 80261d4:	085b      	lsrs	r3, r3, #1
 80261d6:	60bb      	str	r3, [r7, #8]
 80261d8:	68bb      	ldr	r3, [r7, #8]
 80261da:	2b00      	cmp	r3, #0
 80261dc:	d1f6      	bne.n	80261cc <mpiGetBitLength+0x54>
   }

   //Return the actual length in bits
   return n;
 80261de:	68fb      	ldr	r3, [r7, #12]
}
 80261e0:	4618      	mov	r0, r3
 80261e2:	3714      	adds	r7, #20
 80261e4:	46bd      	mov	sp, r7
 80261e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261ea:	4770      	bx	lr

080261ec <mpiGetBitValue>:
 * @param[in] index Position where to read the bit
 * @return The actual bit value
 **/

uint_t mpiGetBitValue(const Mpi *a, uint_t index)
{
 80261ec:	b480      	push	{r7}
 80261ee:	b085      	sub	sp, #20
 80261f0:	af00      	add	r7, sp, #0
 80261f2:	6078      	str	r0, [r7, #4]
 80261f4:	6039      	str	r1, [r7, #0]
   uint_t n1;
   uint_t n2;

   //Retrieve the position of the bit to be read
   n1 = index / (MPI_INT_SIZE * 8);
 80261f6:	683b      	ldr	r3, [r7, #0]
 80261f8:	095b      	lsrs	r3, r3, #5
 80261fa:	60fb      	str	r3, [r7, #12]
   n2 = index % (MPI_INT_SIZE * 8);
 80261fc:	683b      	ldr	r3, [r7, #0]
 80261fe:	f003 031f 	and.w	r3, r3, #31
 8026202:	60bb      	str	r3, [r7, #8]

   //Index out of range?
   if(n1 >= a->size)
 8026204:	687b      	ldr	r3, [r7, #4]
 8026206:	685b      	ldr	r3, [r3, #4]
 8026208:	68fa      	ldr	r2, [r7, #12]
 802620a:	429a      	cmp	r2, r3
 802620c:	d301      	bcc.n	8026212 <mpiGetBitValue+0x26>
      return 0;
 802620e:	2300      	movs	r3, #0
 8026210:	e00a      	b.n	8026228 <mpiGetBitValue+0x3c>

   //Return the actual bit value
   return (a->data[n1] >> n2) & 0x01;
 8026212:	687b      	ldr	r3, [r7, #4]
 8026214:	689a      	ldr	r2, [r3, #8]
 8026216:	68fb      	ldr	r3, [r7, #12]
 8026218:	009b      	lsls	r3, r3, #2
 802621a:	4413      	add	r3, r2
 802621c:	681a      	ldr	r2, [r3, #0]
 802621e:	68bb      	ldr	r3, [r7, #8]
 8026220:	fa22 f303 	lsr.w	r3, r2, r3
 8026224:	f003 0301 	and.w	r3, r3, #1
}
 8026228:	4618      	mov	r0, r3
 802622a:	3714      	adds	r7, #20
 802622c:	46bd      	mov	sp, r7
 802622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026232:	4770      	bx	lr

08026234 <mpiComp>:
 * @param[in] b The second multiple precision integer to be compared
 * @return Comparison result
 **/

int_t mpiComp(const Mpi *a, const Mpi *b)
{
 8026234:	b580      	push	{r7, lr}
 8026236:	b084      	sub	sp, #16
 8026238:	af00      	add	r7, sp, #0
 802623a:	6078      	str	r0, [r7, #4]
 802623c:	6039      	str	r1, [r7, #0]
   uint_t m;
   uint_t n;

   //Determine the actual length of A and B
   m = mpiGetLength(a);
 802623e:	6878      	ldr	r0, [r7, #4]
 8026240:	f7ff ff39 	bl	80260b6 <mpiGetLength>
 8026244:	60b8      	str	r0, [r7, #8]
   n = mpiGetLength(b);
 8026246:	6838      	ldr	r0, [r7, #0]
 8026248:	f7ff ff35 	bl	80260b6 <mpiGetLength>
 802624c:	60f8      	str	r0, [r7, #12]

   //Compare lengths
   if(!m && !n)
 802624e:	68bb      	ldr	r3, [r7, #8]
 8026250:	2b00      	cmp	r3, #0
 8026252:	d104      	bne.n	802625e <mpiComp+0x2a>
 8026254:	68fb      	ldr	r3, [r7, #12]
 8026256:	2b00      	cmp	r3, #0
 8026258:	d101      	bne.n	802625e <mpiComp+0x2a>
      return 0;
 802625a:	2300      	movs	r3, #0
 802625c:	e04c      	b.n	80262f8 <mpiComp+0xc4>
   else if(m > n)
 802625e:	68ba      	ldr	r2, [r7, #8]
 8026260:	68fb      	ldr	r3, [r7, #12]
 8026262:	429a      	cmp	r2, r3
 8026264:	d902      	bls.n	802626c <mpiComp+0x38>
      return a->sign;
 8026266:	687b      	ldr	r3, [r7, #4]
 8026268:	681b      	ldr	r3, [r3, #0]
 802626a:	e045      	b.n	80262f8 <mpiComp+0xc4>
   else if(m < n)
 802626c:	68ba      	ldr	r2, [r7, #8]
 802626e:	68fb      	ldr	r3, [r7, #12]
 8026270:	429a      	cmp	r2, r3
 8026272:	d203      	bcs.n	802627c <mpiComp+0x48>
      return -b->sign;
 8026274:	683b      	ldr	r3, [r7, #0]
 8026276:	681b      	ldr	r3, [r3, #0]
 8026278:	425b      	negs	r3, r3
 802627a:	e03d      	b.n	80262f8 <mpiComp+0xc4>

   //Compare signs
   if(a->sign > 0 && b->sign < 0)
 802627c:	687b      	ldr	r3, [r7, #4]
 802627e:	681b      	ldr	r3, [r3, #0]
 8026280:	2b00      	cmp	r3, #0
 8026282:	dd05      	ble.n	8026290 <mpiComp+0x5c>
 8026284:	683b      	ldr	r3, [r7, #0]
 8026286:	681b      	ldr	r3, [r3, #0]
 8026288:	2b00      	cmp	r3, #0
 802628a:	da01      	bge.n	8026290 <mpiComp+0x5c>
      return 1;
 802628c:	2301      	movs	r3, #1
 802628e:	e033      	b.n	80262f8 <mpiComp+0xc4>
   else if(a->sign < 0 && b->sign > 0)
 8026290:	687b      	ldr	r3, [r7, #4]
 8026292:	681b      	ldr	r3, [r3, #0]
 8026294:	2b00      	cmp	r3, #0
 8026296:	da29      	bge.n	80262ec <mpiComp+0xb8>
 8026298:	683b      	ldr	r3, [r7, #0]
 802629a:	681b      	ldr	r3, [r3, #0]
 802629c:	2b00      	cmp	r3, #0
 802629e:	dd25      	ble.n	80262ec <mpiComp+0xb8>
      return -1;
 80262a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80262a4:	e028      	b.n	80262f8 <mpiComp+0xc4>

   //Then compare values
   while(n--)
   {
      if(a->data[n] > b->data[n])
 80262a6:	687b      	ldr	r3, [r7, #4]
 80262a8:	689a      	ldr	r2, [r3, #8]
 80262aa:	68fb      	ldr	r3, [r7, #12]
 80262ac:	009b      	lsls	r3, r3, #2
 80262ae:	4413      	add	r3, r2
 80262b0:	681a      	ldr	r2, [r3, #0]
 80262b2:	683b      	ldr	r3, [r7, #0]
 80262b4:	6899      	ldr	r1, [r3, #8]
 80262b6:	68fb      	ldr	r3, [r7, #12]
 80262b8:	009b      	lsls	r3, r3, #2
 80262ba:	440b      	add	r3, r1
 80262bc:	681b      	ldr	r3, [r3, #0]
 80262be:	429a      	cmp	r2, r3
 80262c0:	d902      	bls.n	80262c8 <mpiComp+0x94>
         return a->sign;
 80262c2:	687b      	ldr	r3, [r7, #4]
 80262c4:	681b      	ldr	r3, [r3, #0]
 80262c6:	e017      	b.n	80262f8 <mpiComp+0xc4>
      else if(a->data[n] < b->data[n])
 80262c8:	687b      	ldr	r3, [r7, #4]
 80262ca:	689a      	ldr	r2, [r3, #8]
 80262cc:	68fb      	ldr	r3, [r7, #12]
 80262ce:	009b      	lsls	r3, r3, #2
 80262d0:	4413      	add	r3, r2
 80262d2:	681a      	ldr	r2, [r3, #0]
 80262d4:	683b      	ldr	r3, [r7, #0]
 80262d6:	6899      	ldr	r1, [r3, #8]
 80262d8:	68fb      	ldr	r3, [r7, #12]
 80262da:	009b      	lsls	r3, r3, #2
 80262dc:	440b      	add	r3, r1
 80262de:	681b      	ldr	r3, [r3, #0]
 80262e0:	429a      	cmp	r2, r3
 80262e2:	d203      	bcs.n	80262ec <mpiComp+0xb8>
         return -a->sign;
 80262e4:	687b      	ldr	r3, [r7, #4]
 80262e6:	681b      	ldr	r3, [r3, #0]
 80262e8:	425b      	negs	r3, r3
 80262ea:	e005      	b.n	80262f8 <mpiComp+0xc4>
   while(n--)
 80262ec:	68fb      	ldr	r3, [r7, #12]
 80262ee:	1e5a      	subs	r2, r3, #1
 80262f0:	60fa      	str	r2, [r7, #12]
 80262f2:	2b00      	cmp	r3, #0
 80262f4:	d1d7      	bne.n	80262a6 <mpiComp+0x72>
   }

   //Multiple precision integers are equals
   return 0;
 80262f6:	2300      	movs	r3, #0
}
 80262f8:	4618      	mov	r0, r3
 80262fa:	3710      	adds	r7, #16
 80262fc:	46bd      	mov	sp, r7
 80262fe:	bd80      	pop	{r7, pc}

08026300 <mpiCompInt>:
 * @param[in] b Integer to be compared
 * @return Comparison result
 **/

int_t mpiCompInt(const Mpi *a, int_t b)
{
 8026300:	b580      	push	{r7, lr}
 8026302:	b086      	sub	sp, #24
 8026304:	af00      	add	r7, sp, #0
 8026306:	6078      	str	r0, [r7, #4]
 8026308:	6039      	str	r1, [r7, #0]
   uint_t value;
   Mpi t;

   //Initialize a temporary multiple precision integer
   value = (b >= 0) ? b : -b;
 802630a:	683b      	ldr	r3, [r7, #0]
 802630c:	2b00      	cmp	r3, #0
 802630e:	bfb8      	it	lt
 8026310:	425b      	neglt	r3, r3
 8026312:	617b      	str	r3, [r7, #20]
   t.sign = (b >= 0) ? 1 : -1;
 8026314:	683b      	ldr	r3, [r7, #0]
 8026316:	2b00      	cmp	r3, #0
 8026318:	db01      	blt.n	802631e <mpiCompInt+0x1e>
 802631a:	2301      	movs	r3, #1
 802631c:	e001      	b.n	8026322 <mpiCompInt+0x22>
 802631e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8026322:	60bb      	str	r3, [r7, #8]
   t.size = 1;
 8026324:	2301      	movs	r3, #1
 8026326:	60fb      	str	r3, [r7, #12]
#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   t.data = &value;
 8026328:	f107 0314 	add.w	r3, r7, #20
 802632c:	613b      	str	r3, [r7, #16]
#else
   t.data[0] = value;
#endif

   //Return comparison result
   return mpiComp(a, &t);
 802632e:	f107 0308 	add.w	r3, r7, #8
 8026332:	4619      	mov	r1, r3
 8026334:	6878      	ldr	r0, [r7, #4]
 8026336:	f7ff ff7d 	bl	8026234 <mpiComp>
 802633a:	4603      	mov	r3, r0
}
 802633c:	4618      	mov	r0, r3
 802633e:	3718      	adds	r7, #24
 8026340:	46bd      	mov	sp, r7
 8026342:	bd80      	pop	{r7, pc}

08026344 <mpiCompAbs>:
 * @param[in] b The second multiple precision integer to be compared
 * @return Comparison result
 **/

int_t mpiCompAbs(const Mpi *a, const Mpi *b)
{
 8026344:	b580      	push	{r7, lr}
 8026346:	b084      	sub	sp, #16
 8026348:	af00      	add	r7, sp, #0
 802634a:	6078      	str	r0, [r7, #4]
 802634c:	6039      	str	r1, [r7, #0]
   uint_t m;
   uint_t n;

   //Determine the actual length of A and B
   m = mpiGetLength(a);
 802634e:	6878      	ldr	r0, [r7, #4]
 8026350:	f7ff feb1 	bl	80260b6 <mpiGetLength>
 8026354:	60b8      	str	r0, [r7, #8]
   n = mpiGetLength(b);
 8026356:	6838      	ldr	r0, [r7, #0]
 8026358:	f7ff fead 	bl	80260b6 <mpiGetLength>
 802635c:	60f8      	str	r0, [r7, #12]

   //Compare lengths
   if(!m && !n)
 802635e:	68bb      	ldr	r3, [r7, #8]
 8026360:	2b00      	cmp	r3, #0
 8026362:	d104      	bne.n	802636e <mpiCompAbs+0x2a>
 8026364:	68fb      	ldr	r3, [r7, #12]
 8026366:	2b00      	cmp	r3, #0
 8026368:	d101      	bne.n	802636e <mpiCompAbs+0x2a>
      return 0;
 802636a:	2300      	movs	r3, #0
 802636c:	e033      	b.n	80263d6 <mpiCompAbs+0x92>
   else if(m > n)
 802636e:	68ba      	ldr	r2, [r7, #8]
 8026370:	68fb      	ldr	r3, [r7, #12]
 8026372:	429a      	cmp	r2, r3
 8026374:	d901      	bls.n	802637a <mpiCompAbs+0x36>
      return 1;
 8026376:	2301      	movs	r3, #1
 8026378:	e02d      	b.n	80263d6 <mpiCompAbs+0x92>
   else if(m < n)
 802637a:	68ba      	ldr	r2, [r7, #8]
 802637c:	68fb      	ldr	r3, [r7, #12]
 802637e:	429a      	cmp	r2, r3
 8026380:	d223      	bcs.n	80263ca <mpiCompAbs+0x86>
      return -1;
 8026382:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8026386:	e026      	b.n	80263d6 <mpiCompAbs+0x92>

   //Then compare values
   while(n--)
   {
      if(a->data[n] > b->data[n])
 8026388:	687b      	ldr	r3, [r7, #4]
 802638a:	689a      	ldr	r2, [r3, #8]
 802638c:	68fb      	ldr	r3, [r7, #12]
 802638e:	009b      	lsls	r3, r3, #2
 8026390:	4413      	add	r3, r2
 8026392:	681a      	ldr	r2, [r3, #0]
 8026394:	683b      	ldr	r3, [r7, #0]
 8026396:	6899      	ldr	r1, [r3, #8]
 8026398:	68fb      	ldr	r3, [r7, #12]
 802639a:	009b      	lsls	r3, r3, #2
 802639c:	440b      	add	r3, r1
 802639e:	681b      	ldr	r3, [r3, #0]
 80263a0:	429a      	cmp	r2, r3
 80263a2:	d901      	bls.n	80263a8 <mpiCompAbs+0x64>
         return 1;
 80263a4:	2301      	movs	r3, #1
 80263a6:	e016      	b.n	80263d6 <mpiCompAbs+0x92>
      else if(a->data[n] < b->data[n])
 80263a8:	687b      	ldr	r3, [r7, #4]
 80263aa:	689a      	ldr	r2, [r3, #8]
 80263ac:	68fb      	ldr	r3, [r7, #12]
 80263ae:	009b      	lsls	r3, r3, #2
 80263b0:	4413      	add	r3, r2
 80263b2:	681a      	ldr	r2, [r3, #0]
 80263b4:	683b      	ldr	r3, [r7, #0]
 80263b6:	6899      	ldr	r1, [r3, #8]
 80263b8:	68fb      	ldr	r3, [r7, #12]
 80263ba:	009b      	lsls	r3, r3, #2
 80263bc:	440b      	add	r3, r1
 80263be:	681b      	ldr	r3, [r3, #0]
 80263c0:	429a      	cmp	r2, r3
 80263c2:	d202      	bcs.n	80263ca <mpiCompAbs+0x86>
         return -1;
 80263c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80263c8:	e005      	b.n	80263d6 <mpiCompAbs+0x92>
   while(n--)
 80263ca:	68fb      	ldr	r3, [r7, #12]
 80263cc:	1e5a      	subs	r2, r3, #1
 80263ce:	60fa      	str	r2, [r7, #12]
 80263d0:	2b00      	cmp	r3, #0
 80263d2:	d1d9      	bne.n	8026388 <mpiCompAbs+0x44>
   }

   //Operands are equals
   return 0;
 80263d4:	2300      	movs	r3, #0
}
 80263d6:	4618      	mov	r0, r3
 80263d8:	3710      	adds	r7, #16
 80263da:	46bd      	mov	sp, r7
 80263dc:	bd80      	pop	{r7, pc}

080263de <mpiCopy>:
 * @param[in] a Pointer to a multiple precision integer (source)
 * @return Error code
 **/

error_t mpiCopy(Mpi *r, const Mpi *a)
{
 80263de:	b580      	push	{r7, lr}
 80263e0:	b086      	sub	sp, #24
 80263e2:	af00      	add	r7, sp, #0
 80263e4:	6078      	str	r0, [r7, #4]
 80263e6:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t i;
   uint_t n;

   //R and A are the same instance?
   if(r == a)
 80263e8:	687a      	ldr	r2, [r7, #4]
 80263ea:	683b      	ldr	r3, [r7, #0]
 80263ec:	429a      	cmp	r2, r3
 80263ee:	d101      	bne.n	80263f4 <mpiCopy+0x16>
      return NO_ERROR;
 80263f0:	2300      	movs	r3, #0
 80263f2:	e039      	b.n	8026468 <mpiCopy+0x8a>

   //Determine the actual length of A
   n = mpiGetLength(a);
 80263f4:	6838      	ldr	r0, [r7, #0]
 80263f6:	f7ff fe5e 	bl	80260b6 <mpiGetLength>
 80263fa:	6138      	str	r0, [r7, #16]

   //Ajust the size of the destination operand
   error = mpiGrow(r, n);
 80263fc:	6939      	ldr	r1, [r7, #16]
 80263fe:	6878      	ldr	r0, [r7, #4]
 8026400:	f7ff fdfa 	bl	8025ff8 <mpiGrow>
 8026404:	4603      	mov	r3, r0
 8026406:	81fb      	strh	r3, [r7, #14]
   //Any error to report?
   if(error)
 8026408:	89fb      	ldrh	r3, [r7, #14]
 802640a:	2b00      	cmp	r3, #0
 802640c:	d001      	beq.n	8026412 <mpiCopy+0x34>
      return error;
 802640e:	89fb      	ldrh	r3, [r7, #14]
 8026410:	e02a      	b.n	8026468 <mpiCopy+0x8a>

   //Set the sign of R
   r->sign = a->sign;
 8026412:	683b      	ldr	r3, [r7, #0]
 8026414:	681a      	ldr	r2, [r3, #0]
 8026416:	687b      	ldr	r3, [r7, #4]
 8026418:	601a      	str	r2, [r3, #0]

   //Let R = A
   for(i = 0; i < n; i++)
 802641a:	2300      	movs	r3, #0
 802641c:	617b      	str	r3, [r7, #20]
 802641e:	e00e      	b.n	802643e <mpiCopy+0x60>
   {
      r->data[i] = a->data[i];
 8026420:	683b      	ldr	r3, [r7, #0]
 8026422:	689a      	ldr	r2, [r3, #8]
 8026424:	697b      	ldr	r3, [r7, #20]
 8026426:	009b      	lsls	r3, r3, #2
 8026428:	441a      	add	r2, r3
 802642a:	687b      	ldr	r3, [r7, #4]
 802642c:	6899      	ldr	r1, [r3, #8]
 802642e:	697b      	ldr	r3, [r7, #20]
 8026430:	009b      	lsls	r3, r3, #2
 8026432:	440b      	add	r3, r1
 8026434:	6812      	ldr	r2, [r2, #0]
 8026436:	601a      	str	r2, [r3, #0]
   for(i = 0; i < n; i++)
 8026438:	697b      	ldr	r3, [r7, #20]
 802643a:	3301      	adds	r3, #1
 802643c:	617b      	str	r3, [r7, #20]
 802643e:	697a      	ldr	r2, [r7, #20]
 8026440:	693b      	ldr	r3, [r7, #16]
 8026442:	429a      	cmp	r2, r3
 8026444:	d3ec      	bcc.n	8026420 <mpiCopy+0x42>
   }

   //Clear upper words
   for(; i < r->size; i++)
 8026446:	e009      	b.n	802645c <mpiCopy+0x7e>
   {
      r->data[i] = 0;
 8026448:	687b      	ldr	r3, [r7, #4]
 802644a:	689a      	ldr	r2, [r3, #8]
 802644c:	697b      	ldr	r3, [r7, #20]
 802644e:	009b      	lsls	r3, r3, #2
 8026450:	4413      	add	r3, r2
 8026452:	2200      	movs	r2, #0
 8026454:	601a      	str	r2, [r3, #0]
   for(; i < r->size; i++)
 8026456:	697b      	ldr	r3, [r7, #20]
 8026458:	3301      	adds	r3, #1
 802645a:	617b      	str	r3, [r7, #20]
 802645c:	687b      	ldr	r3, [r7, #4]
 802645e:	685b      	ldr	r3, [r3, #4]
 8026460:	697a      	ldr	r2, [r7, #20]
 8026462:	429a      	cmp	r2, r3
 8026464:	d3f0      	bcc.n	8026448 <mpiCopy+0x6a>
   }

   //Successful operation
   return NO_ERROR;
 8026466:	2300      	movs	r3, #0
}
 8026468:	4618      	mov	r0, r3
 802646a:	3718      	adds	r7, #24
 802646c:	46bd      	mov	sp, r7
 802646e:	bd80      	pop	{r7, pc}

08026470 <mpiSetValue>:
 * @param[in] a Value to be assigned to the multiple precision integer
 * @return Error code
 **/

error_t mpiSetValue(Mpi *r, int_t a)
{
 8026470:	b580      	push	{r7, lr}
 8026472:	b084      	sub	sp, #16
 8026474:	af00      	add	r7, sp, #0
 8026476:	6078      	str	r0, [r7, #4]
 8026478:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t i;

   //Ajust the size of the destination operand
   error = mpiGrow(r, 1);
 802647a:	2101      	movs	r1, #1
 802647c:	6878      	ldr	r0, [r7, #4]
 802647e:	f7ff fdbb 	bl	8025ff8 <mpiGrow>
 8026482:	4603      	mov	r3, r0
 8026484:	817b      	strh	r3, [r7, #10]
   //Failed to adjust the size?
   if(error)
 8026486:	897b      	ldrh	r3, [r7, #10]
 8026488:	2b00      	cmp	r3, #0
 802648a:	d001      	beq.n	8026490 <mpiSetValue+0x20>
      return error;
 802648c:	897b      	ldrh	r3, [r7, #10]
 802648e:	e023      	b.n	80264d8 <mpiSetValue+0x68>

   //Clear the contents of the multiple precision integer
   for(i = 0; i < r->size; i++)
 8026490:	2300      	movs	r3, #0
 8026492:	60fb      	str	r3, [r7, #12]
 8026494:	e009      	b.n	80264aa <mpiSetValue+0x3a>
   {
      r->data[i] = 0;
 8026496:	687b      	ldr	r3, [r7, #4]
 8026498:	689a      	ldr	r2, [r3, #8]
 802649a:	68fb      	ldr	r3, [r7, #12]
 802649c:	009b      	lsls	r3, r3, #2
 802649e:	4413      	add	r3, r2
 80264a0:	2200      	movs	r2, #0
 80264a2:	601a      	str	r2, [r3, #0]
   for(i = 0; i < r->size; i++)
 80264a4:	68fb      	ldr	r3, [r7, #12]
 80264a6:	3301      	adds	r3, #1
 80264a8:	60fb      	str	r3, [r7, #12]
 80264aa:	687b      	ldr	r3, [r7, #4]
 80264ac:	685b      	ldr	r3, [r3, #4]
 80264ae:	68fa      	ldr	r2, [r7, #12]
 80264b0:	429a      	cmp	r2, r3
 80264b2:	d3f0      	bcc.n	8026496 <mpiSetValue+0x26>
   }

   //Set the value or R
   r->data[0] = (a >= 0) ? a : -a;
 80264b4:	683b      	ldr	r3, [r7, #0]
 80264b6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80264ba:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80264be:	687b      	ldr	r3, [r7, #4]
 80264c0:	689b      	ldr	r3, [r3, #8]
 80264c2:	601a      	str	r2, [r3, #0]
   //Set the sign of R
   r->sign = (a >= 0) ? 1 : -1;
 80264c4:	683b      	ldr	r3, [r7, #0]
 80264c6:	2b00      	cmp	r3, #0
 80264c8:	db01      	blt.n	80264ce <mpiSetValue+0x5e>
 80264ca:	2201      	movs	r2, #1
 80264cc:	e001      	b.n	80264d2 <mpiSetValue+0x62>
 80264ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80264d2:	687b      	ldr	r3, [r7, #4]
 80264d4:	601a      	str	r2, [r3, #0]

   //Successful operation
   return NO_ERROR;
 80264d6:	2300      	movs	r3, #0
}
 80264d8:	4618      	mov	r0, r3
 80264da:	3710      	adds	r7, #16
 80264dc:	46bd      	mov	sp, r7
 80264de:	bd80      	pop	{r7, pc}

080264e0 <mpiImport>:
 * @param[in] format Input format
 * @return Error code
 **/

error_t mpiImport(Mpi *r, const uint8_t *data, uint_t length, MpiFormat format)
{
 80264e0:	b580      	push	{r7, lr}
 80264e2:	b086      	sub	sp, #24
 80264e4:	af00      	add	r7, sp, #0
 80264e6:	60f8      	str	r0, [r7, #12]
 80264e8:	60b9      	str	r1, [r7, #8]
 80264ea:	607a      	str	r2, [r7, #4]
 80264ec:	70fb      	strb	r3, [r7, #3]
   error_t error;
   uint_t i;

   //Check input format
   if(format == MPI_FORMAT_LITTLE_ENDIAN)
 80264ee:	78fb      	ldrb	r3, [r7, #3]
 80264f0:	2b00      	cmp	r3, #0
 80264f2:	d156      	bne.n	80265a2 <mpiImport+0xc2>
   {
      //Skip trailing zeroes
      while(length > 0 && data[length - 1] == 0)
 80264f4:	e002      	b.n	80264fc <mpiImport+0x1c>
      {
         length--;
 80264f6:	687b      	ldr	r3, [r7, #4]
 80264f8:	3b01      	subs	r3, #1
 80264fa:	607b      	str	r3, [r7, #4]
      while(length > 0 && data[length - 1] == 0)
 80264fc:	687b      	ldr	r3, [r7, #4]
 80264fe:	2b00      	cmp	r3, #0
 8026500:	d006      	beq.n	8026510 <mpiImport+0x30>
 8026502:	687b      	ldr	r3, [r7, #4]
 8026504:	3b01      	subs	r3, #1
 8026506:	68ba      	ldr	r2, [r7, #8]
 8026508:	4413      	add	r3, r2
 802650a:	781b      	ldrb	r3, [r3, #0]
 802650c:	2b00      	cmp	r3, #0
 802650e:	d0f2      	beq.n	80264f6 <mpiImport+0x16>
      }

      //Ajust the size of the multiple precision integer
      error = mpiGrow(r, (length + MPI_INT_SIZE - 1) / MPI_INT_SIZE);
 8026510:	687b      	ldr	r3, [r7, #4]
 8026512:	3303      	adds	r3, #3
 8026514:	089b      	lsrs	r3, r3, #2
 8026516:	4619      	mov	r1, r3
 8026518:	68f8      	ldr	r0, [r7, #12]
 802651a:	f7ff fd6d 	bl	8025ff8 <mpiGrow>
 802651e:	4603      	mov	r3, r0
 8026520:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 8026522:	8afb      	ldrh	r3, [r7, #22]
 8026524:	2b00      	cmp	r3, #0
 8026526:	f040 809c 	bne.w	8026662 <mpiImport+0x182>
      {
         //Clear the contents of the multiple precision integer
         for(i = 0; i < r->size; i++)
 802652a:	2300      	movs	r3, #0
 802652c:	613b      	str	r3, [r7, #16]
 802652e:	e009      	b.n	8026544 <mpiImport+0x64>
         {
            r->data[i] = 0;
 8026530:	68fb      	ldr	r3, [r7, #12]
 8026532:	689a      	ldr	r2, [r3, #8]
 8026534:	693b      	ldr	r3, [r7, #16]
 8026536:	009b      	lsls	r3, r3, #2
 8026538:	4413      	add	r3, r2
 802653a:	2200      	movs	r2, #0
 802653c:	601a      	str	r2, [r3, #0]
         for(i = 0; i < r->size; i++)
 802653e:	693b      	ldr	r3, [r7, #16]
 8026540:	3301      	adds	r3, #1
 8026542:	613b      	str	r3, [r7, #16]
 8026544:	68fb      	ldr	r3, [r7, #12]
 8026546:	685b      	ldr	r3, [r3, #4]
 8026548:	693a      	ldr	r2, [r7, #16]
 802654a:	429a      	cmp	r2, r3
 802654c:	d3f0      	bcc.n	8026530 <mpiImport+0x50>
         }

         //Set sign
         r->sign = 1;
 802654e:	68fb      	ldr	r3, [r7, #12]
 8026550:	2201      	movs	r2, #1
 8026552:	601a      	str	r2, [r3, #0]

         //Import data
         for(i = 0; i < length; i++, data++)
 8026554:	2300      	movs	r3, #0
 8026556:	613b      	str	r3, [r7, #16]
 8026558:	e01e      	b.n	8026598 <mpiImport+0xb8>
         {
            r->data[i / MPI_INT_SIZE] |= *data << ((i % MPI_INT_SIZE) * 8);
 802655a:	68fb      	ldr	r3, [r7, #12]
 802655c:	689a      	ldr	r2, [r3, #8]
 802655e:	693b      	ldr	r3, [r7, #16]
 8026560:	f023 0303 	bic.w	r3, r3, #3
 8026564:	4413      	add	r3, r2
 8026566:	681a      	ldr	r2, [r3, #0]
 8026568:	68bb      	ldr	r3, [r7, #8]
 802656a:	781b      	ldrb	r3, [r3, #0]
 802656c:	4619      	mov	r1, r3
 802656e:	693b      	ldr	r3, [r7, #16]
 8026570:	f003 0303 	and.w	r3, r3, #3
 8026574:	00db      	lsls	r3, r3, #3
 8026576:	fa01 f303 	lsl.w	r3, r1, r3
 802657a:	4618      	mov	r0, r3
 802657c:	68fb      	ldr	r3, [r7, #12]
 802657e:	6899      	ldr	r1, [r3, #8]
 8026580:	693b      	ldr	r3, [r7, #16]
 8026582:	f023 0303 	bic.w	r3, r3, #3
 8026586:	440b      	add	r3, r1
 8026588:	4302      	orrs	r2, r0
 802658a:	601a      	str	r2, [r3, #0]
         for(i = 0; i < length; i++, data++)
 802658c:	693b      	ldr	r3, [r7, #16]
 802658e:	3301      	adds	r3, #1
 8026590:	613b      	str	r3, [r7, #16]
 8026592:	68bb      	ldr	r3, [r7, #8]
 8026594:	3301      	adds	r3, #1
 8026596:	60bb      	str	r3, [r7, #8]
 8026598:	693a      	ldr	r2, [r7, #16]
 802659a:	687b      	ldr	r3, [r7, #4]
 802659c:	429a      	cmp	r2, r3
 802659e:	d3dc      	bcc.n	802655a <mpiImport+0x7a>
 80265a0:	e05f      	b.n	8026662 <mpiImport+0x182>
         }
      }
   }
   else if(format == MPI_FORMAT_BIG_ENDIAN)
 80265a2:	78fb      	ldrb	r3, [r7, #3]
 80265a4:	2b01      	cmp	r3, #1
 80265a6:	d15a      	bne.n	802665e <mpiImport+0x17e>
   {
      //Skip leading zeroes
      while(length > 1 && *data == 0)
 80265a8:	e005      	b.n	80265b6 <mpiImport+0xd6>
      {
         data++;
 80265aa:	68bb      	ldr	r3, [r7, #8]
 80265ac:	3301      	adds	r3, #1
 80265ae:	60bb      	str	r3, [r7, #8]
         length--;
 80265b0:	687b      	ldr	r3, [r7, #4]
 80265b2:	3b01      	subs	r3, #1
 80265b4:	607b      	str	r3, [r7, #4]
      while(length > 1 && *data == 0)
 80265b6:	687b      	ldr	r3, [r7, #4]
 80265b8:	2b01      	cmp	r3, #1
 80265ba:	d903      	bls.n	80265c4 <mpiImport+0xe4>
 80265bc:	68bb      	ldr	r3, [r7, #8]
 80265be:	781b      	ldrb	r3, [r3, #0]
 80265c0:	2b00      	cmp	r3, #0
 80265c2:	d0f2      	beq.n	80265aa <mpiImport+0xca>
      }

      //Ajust the size of the multiple precision integer
      error = mpiGrow(r, (length + MPI_INT_SIZE - 1) / MPI_INT_SIZE);
 80265c4:	687b      	ldr	r3, [r7, #4]
 80265c6:	3303      	adds	r3, #3
 80265c8:	089b      	lsrs	r3, r3, #2
 80265ca:	4619      	mov	r1, r3
 80265cc:	68f8      	ldr	r0, [r7, #12]
 80265ce:	f7ff fd13 	bl	8025ff8 <mpiGrow>
 80265d2:	4603      	mov	r3, r0
 80265d4:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 80265d6:	8afb      	ldrh	r3, [r7, #22]
 80265d8:	2b00      	cmp	r3, #0
 80265da:	d142      	bne.n	8026662 <mpiImport+0x182>
      {
         //Clear the contents of the multiple precision integer
         for(i = 0; i < r->size; i++)
 80265dc:	2300      	movs	r3, #0
 80265de:	613b      	str	r3, [r7, #16]
 80265e0:	e009      	b.n	80265f6 <mpiImport+0x116>
         {
            r->data[i] = 0;
 80265e2:	68fb      	ldr	r3, [r7, #12]
 80265e4:	689a      	ldr	r2, [r3, #8]
 80265e6:	693b      	ldr	r3, [r7, #16]
 80265e8:	009b      	lsls	r3, r3, #2
 80265ea:	4413      	add	r3, r2
 80265ec:	2200      	movs	r2, #0
 80265ee:	601a      	str	r2, [r3, #0]
         for(i = 0; i < r->size; i++)
 80265f0:	693b      	ldr	r3, [r7, #16]
 80265f2:	3301      	adds	r3, #1
 80265f4:	613b      	str	r3, [r7, #16]
 80265f6:	68fb      	ldr	r3, [r7, #12]
 80265f8:	685b      	ldr	r3, [r3, #4]
 80265fa:	693a      	ldr	r2, [r7, #16]
 80265fc:	429a      	cmp	r2, r3
 80265fe:	d3f0      	bcc.n	80265e2 <mpiImport+0x102>
         }

         //Set sign
         r->sign = 1;
 8026600:	68fb      	ldr	r3, [r7, #12]
 8026602:	2201      	movs	r2, #1
 8026604:	601a      	str	r2, [r3, #0]

         //Start from the least significant byte
         data += length - 1;
 8026606:	687b      	ldr	r3, [r7, #4]
 8026608:	3b01      	subs	r3, #1
 802660a:	68ba      	ldr	r2, [r7, #8]
 802660c:	4413      	add	r3, r2
 802660e:	60bb      	str	r3, [r7, #8]

         //Import data
         for(i = 0; i < length; i++, data--)
 8026610:	2300      	movs	r3, #0
 8026612:	613b      	str	r3, [r7, #16]
 8026614:	e01e      	b.n	8026654 <mpiImport+0x174>
         {
            r->data[i / MPI_INT_SIZE] |= *data << ((i % MPI_INT_SIZE) * 8);
 8026616:	68fb      	ldr	r3, [r7, #12]
 8026618:	689a      	ldr	r2, [r3, #8]
 802661a:	693b      	ldr	r3, [r7, #16]
 802661c:	f023 0303 	bic.w	r3, r3, #3
 8026620:	4413      	add	r3, r2
 8026622:	681a      	ldr	r2, [r3, #0]
 8026624:	68bb      	ldr	r3, [r7, #8]
 8026626:	781b      	ldrb	r3, [r3, #0]
 8026628:	4619      	mov	r1, r3
 802662a:	693b      	ldr	r3, [r7, #16]
 802662c:	f003 0303 	and.w	r3, r3, #3
 8026630:	00db      	lsls	r3, r3, #3
 8026632:	fa01 f303 	lsl.w	r3, r1, r3
 8026636:	4618      	mov	r0, r3
 8026638:	68fb      	ldr	r3, [r7, #12]
 802663a:	6899      	ldr	r1, [r3, #8]
 802663c:	693b      	ldr	r3, [r7, #16]
 802663e:	f023 0303 	bic.w	r3, r3, #3
 8026642:	440b      	add	r3, r1
 8026644:	4302      	orrs	r2, r0
 8026646:	601a      	str	r2, [r3, #0]
         for(i = 0; i < length; i++, data--)
 8026648:	693b      	ldr	r3, [r7, #16]
 802664a:	3301      	adds	r3, #1
 802664c:	613b      	str	r3, [r7, #16]
 802664e:	68bb      	ldr	r3, [r7, #8]
 8026650:	3b01      	subs	r3, #1
 8026652:	60bb      	str	r3, [r7, #8]
 8026654:	693a      	ldr	r2, [r7, #16]
 8026656:	687b      	ldr	r3, [r7, #4]
 8026658:	429a      	cmp	r2, r3
 802665a:	d3dc      	bcc.n	8026616 <mpiImport+0x136>
 802665c:	e001      	b.n	8026662 <mpiImport+0x182>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 802665e:	2302      	movs	r3, #2
 8026660:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8026662:	8afb      	ldrh	r3, [r7, #22]
}
 8026664:	4618      	mov	r0, r3
 8026666:	3718      	adds	r7, #24
 8026668:	46bd      	mov	sp, r7
 802666a:	bd80      	pop	{r7, pc}

0802666c <mpiExport>:
 * @param[in] format Output format
 * @return Error code
 **/

error_t mpiExport(const Mpi *a, uint8_t *data, uint_t length, MpiFormat format)
{
 802666c:	b580      	push	{r7, lr}
 802666e:	b088      	sub	sp, #32
 8026670:	af00      	add	r7, sp, #0
 8026672:	60f8      	str	r0, [r7, #12]
 8026674:	60b9      	str	r1, [r7, #8]
 8026676:	607a      	str	r2, [r7, #4]
 8026678:	70fb      	strb	r3, [r7, #3]
   uint_t i;
   uint_t n;
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 802667a:	2300      	movs	r3, #0
 802667c:	837b      	strh	r3, [r7, #26]

   //Check input format
   if(format == MPI_FORMAT_LITTLE_ENDIAN)
 802667e:	78fb      	ldrb	r3, [r7, #3]
 8026680:	2b00      	cmp	r3, #0
 8026682:	d12d      	bne.n	80266e0 <mpiExport+0x74>
   {
      //Get the actual length in bytes
      n = mpiGetByteLength(a);
 8026684:	68f8      	ldr	r0, [r7, #12]
 8026686:	f7ff fd3d 	bl	8026104 <mpiGetByteLength>
 802668a:	6178      	str	r0, [r7, #20]

      //Make sure the output buffer is large enough
      if(n <= length)
 802668c:	697a      	ldr	r2, [r7, #20]
 802668e:	687b      	ldr	r3, [r7, #4]
 8026690:	429a      	cmp	r2, r3
 8026692:	d822      	bhi.n	80266da <mpiExport+0x6e>
      {
         //Clear output buffer
         osMemset(data, 0, length);
 8026694:	687a      	ldr	r2, [r7, #4]
 8026696:	2100      	movs	r1, #0
 8026698:	68b8      	ldr	r0, [r7, #8]
 802669a:	f009 fe85 	bl	80303a8 <memset>

         //Export data
         for(i = 0; i < n; i++, data++)
 802669e:	2300      	movs	r3, #0
 80266a0:	61fb      	str	r3, [r7, #28]
 80266a2:	e015      	b.n	80266d0 <mpiExport+0x64>
         {
            *data = a->data[i / MPI_INT_SIZE] >> ((i % MPI_INT_SIZE) * 8);
 80266a4:	68fb      	ldr	r3, [r7, #12]
 80266a6:	689a      	ldr	r2, [r3, #8]
 80266a8:	69fb      	ldr	r3, [r7, #28]
 80266aa:	f023 0303 	bic.w	r3, r3, #3
 80266ae:	4413      	add	r3, r2
 80266b0:	681a      	ldr	r2, [r3, #0]
 80266b2:	69fb      	ldr	r3, [r7, #28]
 80266b4:	f003 0303 	and.w	r3, r3, #3
 80266b8:	00db      	lsls	r3, r3, #3
 80266ba:	fa22 f303 	lsr.w	r3, r2, r3
 80266be:	b2da      	uxtb	r2, r3
 80266c0:	68bb      	ldr	r3, [r7, #8]
 80266c2:	701a      	strb	r2, [r3, #0]
         for(i = 0; i < n; i++, data++)
 80266c4:	69fb      	ldr	r3, [r7, #28]
 80266c6:	3301      	adds	r3, #1
 80266c8:	61fb      	str	r3, [r7, #28]
 80266ca:	68bb      	ldr	r3, [r7, #8]
 80266cc:	3301      	adds	r3, #1
 80266ce:	60bb      	str	r3, [r7, #8]
 80266d0:	69fa      	ldr	r2, [r7, #28]
 80266d2:	697b      	ldr	r3, [r7, #20]
 80266d4:	429a      	cmp	r2, r3
 80266d6:	d3e5      	bcc.n	80266a4 <mpiExport+0x38>
 80266d8:	e03a      	b.n	8026750 <mpiExport+0xe4>
         }
      }
      else
      {
         //Report an error
         error = ERROR_INVALID_LENGTH;
 80266da:	23ec      	movs	r3, #236	@ 0xec
 80266dc:	837b      	strh	r3, [r7, #26]
 80266de:	e037      	b.n	8026750 <mpiExport+0xe4>
      }
   }
   else if(format == MPI_FORMAT_BIG_ENDIAN)
 80266e0:	78fb      	ldrb	r3, [r7, #3]
 80266e2:	2b01      	cmp	r3, #1
 80266e4:	d132      	bne.n	802674c <mpiExport+0xe0>
   {
      //Get the actual length in bytes
      n = mpiGetByteLength(a);
 80266e6:	68f8      	ldr	r0, [r7, #12]
 80266e8:	f7ff fd0c 	bl	8026104 <mpiGetByteLength>
 80266ec:	6178      	str	r0, [r7, #20]

      //Make sure the output buffer is large enough
      if(n <= length)
 80266ee:	697a      	ldr	r2, [r7, #20]
 80266f0:	687b      	ldr	r3, [r7, #4]
 80266f2:	429a      	cmp	r2, r3
 80266f4:	d827      	bhi.n	8026746 <mpiExport+0xda>
      {
         //Clear output buffer
         osMemset(data, 0, length);
 80266f6:	687a      	ldr	r2, [r7, #4]
 80266f8:	2100      	movs	r1, #0
 80266fa:	68b8      	ldr	r0, [r7, #8]
 80266fc:	f009 fe54 	bl	80303a8 <memset>

         //Point to the least significant word
         data += length - 1;
 8026700:	687b      	ldr	r3, [r7, #4]
 8026702:	3b01      	subs	r3, #1
 8026704:	68ba      	ldr	r2, [r7, #8]
 8026706:	4413      	add	r3, r2
 8026708:	60bb      	str	r3, [r7, #8]

         //Export data
         for(i = 0; i < n; i++, data--)
 802670a:	2300      	movs	r3, #0
 802670c:	61fb      	str	r3, [r7, #28]
 802670e:	e015      	b.n	802673c <mpiExport+0xd0>
         {
            *data = a->data[i / MPI_INT_SIZE] >> ((i % MPI_INT_SIZE) * 8);
 8026710:	68fb      	ldr	r3, [r7, #12]
 8026712:	689a      	ldr	r2, [r3, #8]
 8026714:	69fb      	ldr	r3, [r7, #28]
 8026716:	f023 0303 	bic.w	r3, r3, #3
 802671a:	4413      	add	r3, r2
 802671c:	681a      	ldr	r2, [r3, #0]
 802671e:	69fb      	ldr	r3, [r7, #28]
 8026720:	f003 0303 	and.w	r3, r3, #3
 8026724:	00db      	lsls	r3, r3, #3
 8026726:	fa22 f303 	lsr.w	r3, r2, r3
 802672a:	b2da      	uxtb	r2, r3
 802672c:	68bb      	ldr	r3, [r7, #8]
 802672e:	701a      	strb	r2, [r3, #0]
         for(i = 0; i < n; i++, data--)
 8026730:	69fb      	ldr	r3, [r7, #28]
 8026732:	3301      	adds	r3, #1
 8026734:	61fb      	str	r3, [r7, #28]
 8026736:	68bb      	ldr	r3, [r7, #8]
 8026738:	3b01      	subs	r3, #1
 802673a:	60bb      	str	r3, [r7, #8]
 802673c:	69fa      	ldr	r2, [r7, #28]
 802673e:	697b      	ldr	r3, [r7, #20]
 8026740:	429a      	cmp	r2, r3
 8026742:	d3e5      	bcc.n	8026710 <mpiExport+0xa4>
 8026744:	e004      	b.n	8026750 <mpiExport+0xe4>
         }
      }
      else
      {
         //Report an error
         error = ERROR_INVALID_LENGTH;
 8026746:	23ec      	movs	r3, #236	@ 0xec
 8026748:	837b      	strh	r3, [r7, #26]
 802674a:	e001      	b.n	8026750 <mpiExport+0xe4>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 802674c:	2302      	movs	r3, #2
 802674e:	837b      	strh	r3, [r7, #26]
   }

   //Return status code
   return error;
 8026750:	8b7b      	ldrh	r3, [r7, #26]
}
 8026752:	4618      	mov	r0, r3
 8026754:	3720      	adds	r7, #32
 8026756:	46bd      	mov	sp, r7
 8026758:	bd80      	pop	{r7, pc}

0802675a <mpiSub>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiSub(Mpi *r, const Mpi *a, const Mpi *b)
{
 802675a:	b580      	push	{r7, lr}
 802675c:	b086      	sub	sp, #24
 802675e:	af00      	add	r7, sp, #0
 8026760:	60f8      	str	r0, [r7, #12]
 8026762:	60b9      	str	r1, [r7, #8]
 8026764:	607a      	str	r2, [r7, #4]
   error_t error;
   int_t sign;

   //Retrieve the sign of A
   sign = a->sign;
 8026766:	68bb      	ldr	r3, [r7, #8]
 8026768:	681b      	ldr	r3, [r3, #0]
 802676a:	613b      	str	r3, [r7, #16]

   //Both operands have the same sign?
   if(a->sign == b->sign)
 802676c:	68bb      	ldr	r3, [r7, #8]
 802676e:	681a      	ldr	r2, [r3, #0]
 8026770:	687b      	ldr	r3, [r7, #4]
 8026772:	681b      	ldr	r3, [r3, #0]
 8026774:	429a      	cmp	r2, r3
 8026776:	d11d      	bne.n	80267b4 <mpiSub+0x5a>
   {
      //Compare the absolute value of A and B
      if(mpiCompAbs(a, b) >= 0)
 8026778:	6879      	ldr	r1, [r7, #4]
 802677a:	68b8      	ldr	r0, [r7, #8]
 802677c:	f7ff fde2 	bl	8026344 <mpiCompAbs>
 8026780:	4603      	mov	r3, r0
 8026782:	2b00      	cmp	r3, #0
 8026784:	db0a      	blt.n	802679c <mpiSub+0x42>
      {
         //Perform subtraction
         error = mpiSubAbs(r, a, b);
 8026786:	687a      	ldr	r2, [r7, #4]
 8026788:	68b9      	ldr	r1, [r7, #8]
 802678a:	68f8      	ldr	r0, [r7, #12]
 802678c:	f000 f8cc 	bl	8026928 <mpiSubAbs>
 8026790:	4603      	mov	r3, r0
 8026792:	82fb      	strh	r3, [r7, #22]
         //Set the sign of the resulting number
         r->sign = sign;
 8026794:	68fb      	ldr	r3, [r7, #12]
 8026796:	693a      	ldr	r2, [r7, #16]
 8026798:	601a      	str	r2, [r3, #0]
 802679a:	e015      	b.n	80267c8 <mpiSub+0x6e>
      }
      else
      {
         //Perform subtraction
         error = mpiSubAbs(r, b, a);
 802679c:	68ba      	ldr	r2, [r7, #8]
 802679e:	6879      	ldr	r1, [r7, #4]
 80267a0:	68f8      	ldr	r0, [r7, #12]
 80267a2:	f000 f8c1 	bl	8026928 <mpiSubAbs>
 80267a6:	4603      	mov	r3, r0
 80267a8:	82fb      	strh	r3, [r7, #22]
         //Set the sign of the resulting number
         r->sign = -sign;
 80267aa:	693b      	ldr	r3, [r7, #16]
 80267ac:	425a      	negs	r2, r3
 80267ae:	68fb      	ldr	r3, [r7, #12]
 80267b0:	601a      	str	r2, [r3, #0]
 80267b2:	e009      	b.n	80267c8 <mpiSub+0x6e>
   }
   //Operands have different signs?
   else
   {
      //Perform addition
      error = mpiAddAbs(r, a, b);
 80267b4:	687a      	ldr	r2, [r7, #4]
 80267b6:	68b9      	ldr	r1, [r7, #8]
 80267b8:	68f8      	ldr	r0, [r7, #12]
 80267ba:	f000 f80a 	bl	80267d2 <mpiAddAbs>
 80267be:	4603      	mov	r3, r0
 80267c0:	82fb      	strh	r3, [r7, #22]
      //Set the sign of the resulting number
      r->sign = sign;
 80267c2:	68fb      	ldr	r3, [r7, #12]
 80267c4:	693a      	ldr	r2, [r7, #16]
 80267c6:	601a      	str	r2, [r3, #0]
   }

   //Return status code
   return error;
 80267c8:	8afb      	ldrh	r3, [r7, #22]
}
 80267ca:	4618      	mov	r0, r3
 80267cc:	3718      	adds	r7, #24
 80267ce:	46bd      	mov	sp, r7
 80267d0:	bd80      	pop	{r7, pc}

080267d2 <mpiAddAbs>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiAddAbs(Mpi *r, const Mpi *a, const Mpi *b)
{
 80267d2:	b580      	push	{r7, lr}
 80267d4:	b08a      	sub	sp, #40	@ 0x28
 80267d6:	af00      	add	r7, sp, #0
 80267d8:	60f8      	str	r0, [r7, #12]
 80267da:	60b9      	str	r1, [r7, #8]
 80267dc:	607a      	str	r2, [r7, #4]
   uint_t n;
   uint_t c;
   uint_t d;

   //R and B are the same instance?
   if(r == b)
 80267de:	68fa      	ldr	r2, [r7, #12]
 80267e0:	687b      	ldr	r3, [r7, #4]
 80267e2:	429a      	cmp	r2, r3
 80267e4:	d106      	bne.n	80267f4 <mpiAddAbs+0x22>
   {
      //Swap A and B
      const Mpi *t = a;
 80267e6:	68bb      	ldr	r3, [r7, #8]
 80267e8:	61bb      	str	r3, [r7, #24]
      a = b;
 80267ea:	687b      	ldr	r3, [r7, #4]
 80267ec:	60bb      	str	r3, [r7, #8]
      b = t;
 80267ee:	69bb      	ldr	r3, [r7, #24]
 80267f0:	607b      	str	r3, [r7, #4]
 80267f2:	e00d      	b.n	8026810 <mpiAddAbs+0x3e>
   }
   //R is neither A nor B?
   else if(r != a)
 80267f4:	68fa      	ldr	r2, [r7, #12]
 80267f6:	68bb      	ldr	r3, [r7, #8]
 80267f8:	429a      	cmp	r2, r3
 80267fa:	d009      	beq.n	8026810 <mpiAddAbs+0x3e>
   {
      //Copy the first operand to R
      MPI_CHECK(mpiCopy(r, a));
 80267fc:	68b9      	ldr	r1, [r7, #8]
 80267fe:	68f8      	ldr	r0, [r7, #12]
 8026800:	f7ff fded 	bl	80263de <mpiCopy>
 8026804:	4603      	mov	r3, r0
 8026806:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8026808:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802680a:	2b00      	cmp	r3, #0
 802680c:	f040 8087 	bne.w	802691e <mpiAddAbs+0x14c>
   }

   //Determine the actual length of B
   n = mpiGetLength(b);
 8026810:	6878      	ldr	r0, [r7, #4]
 8026812:	f7ff fc50 	bl	80260b6 <mpiGetLength>
 8026816:	6178      	str	r0, [r7, #20]
   //Extend the size of the destination register as needed
   MPI_CHECK(mpiGrow(r, n));
 8026818:	6979      	ldr	r1, [r7, #20]
 802681a:	68f8      	ldr	r0, [r7, #12]
 802681c:	f7ff fbec 	bl	8025ff8 <mpiGrow>
 8026820:	4603      	mov	r3, r0
 8026822:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8026824:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8026826:	2b00      	cmp	r3, #0
 8026828:	d179      	bne.n	802691e <mpiAddAbs+0x14c>

   //The result is always positive
   r->sign = 1;
 802682a:	68fb      	ldr	r3, [r7, #12]
 802682c:	2201      	movs	r2, #1
 802682e:	601a      	str	r2, [r3, #0]
   //Clear carry bit
   c = 0;
 8026830:	2300      	movs	r3, #0
 8026832:	61fb      	str	r3, [r7, #28]

   //Add operands
   for(i = 0; i < n; i++)
 8026834:	2300      	movs	r3, #0
 8026836:	623b      	str	r3, [r7, #32]
 8026838:	e02b      	b.n	8026892 <mpiAddAbs+0xc0>
   {
      //Add carry bit
      d = r->data[i] + c;
 802683a:	68fb      	ldr	r3, [r7, #12]
 802683c:	689a      	ldr	r2, [r3, #8]
 802683e:	6a3b      	ldr	r3, [r7, #32]
 8026840:	009b      	lsls	r3, r3, #2
 8026842:	4413      	add	r3, r2
 8026844:	681b      	ldr	r3, [r3, #0]
 8026846:	69fa      	ldr	r2, [r7, #28]
 8026848:	4413      	add	r3, r2
 802684a:	613b      	str	r3, [r7, #16]
      //Update carry bit
      if(d != 0) c = 0;
 802684c:	693b      	ldr	r3, [r7, #16]
 802684e:	2b00      	cmp	r3, #0
 8026850:	d001      	beq.n	8026856 <mpiAddAbs+0x84>
 8026852:	2300      	movs	r3, #0
 8026854:	61fb      	str	r3, [r7, #28]
      //Perform addition
      d += b->data[i];
 8026856:	687b      	ldr	r3, [r7, #4]
 8026858:	689a      	ldr	r2, [r3, #8]
 802685a:	6a3b      	ldr	r3, [r7, #32]
 802685c:	009b      	lsls	r3, r3, #2
 802685e:	4413      	add	r3, r2
 8026860:	681b      	ldr	r3, [r3, #0]
 8026862:	693a      	ldr	r2, [r7, #16]
 8026864:	4413      	add	r3, r2
 8026866:	613b      	str	r3, [r7, #16]
      //Update carry bit
      if(d < b->data[i]) c = 1;
 8026868:	687b      	ldr	r3, [r7, #4]
 802686a:	689a      	ldr	r2, [r3, #8]
 802686c:	6a3b      	ldr	r3, [r7, #32]
 802686e:	009b      	lsls	r3, r3, #2
 8026870:	4413      	add	r3, r2
 8026872:	681b      	ldr	r3, [r3, #0]
 8026874:	693a      	ldr	r2, [r7, #16]
 8026876:	429a      	cmp	r2, r3
 8026878:	d201      	bcs.n	802687e <mpiAddAbs+0xac>
 802687a:	2301      	movs	r3, #1
 802687c:	61fb      	str	r3, [r7, #28]
      //Save result
      r->data[i] = d;
 802687e:	68fb      	ldr	r3, [r7, #12]
 8026880:	689a      	ldr	r2, [r3, #8]
 8026882:	6a3b      	ldr	r3, [r7, #32]
 8026884:	009b      	lsls	r3, r3, #2
 8026886:	4413      	add	r3, r2
 8026888:	693a      	ldr	r2, [r7, #16]
 802688a:	601a      	str	r2, [r3, #0]
   for(i = 0; i < n; i++)
 802688c:	6a3b      	ldr	r3, [r7, #32]
 802688e:	3301      	adds	r3, #1
 8026890:	623b      	str	r3, [r7, #32]
 8026892:	6a3a      	ldr	r2, [r7, #32]
 8026894:	697b      	ldr	r3, [r7, #20]
 8026896:	429a      	cmp	r2, r3
 8026898:	d3cf      	bcc.n	802683a <mpiAddAbs+0x68>
   }

   //Loop as long as the carry bit is set
   for(i = n; c && i < r->size; i++)
 802689a:	697b      	ldr	r3, [r7, #20]
 802689c:	623b      	str	r3, [r7, #32]
 802689e:	e01a      	b.n	80268d6 <mpiAddAbs+0x104>
   {
      //Add carry bit
      r->data[i] += c;
 80268a0:	68fb      	ldr	r3, [r7, #12]
 80268a2:	689a      	ldr	r2, [r3, #8]
 80268a4:	6a3b      	ldr	r3, [r7, #32]
 80268a6:	009b      	lsls	r3, r3, #2
 80268a8:	4413      	add	r3, r2
 80268aa:	6819      	ldr	r1, [r3, #0]
 80268ac:	68fb      	ldr	r3, [r7, #12]
 80268ae:	689a      	ldr	r2, [r3, #8]
 80268b0:	6a3b      	ldr	r3, [r7, #32]
 80268b2:	009b      	lsls	r3, r3, #2
 80268b4:	4413      	add	r3, r2
 80268b6:	69fa      	ldr	r2, [r7, #28]
 80268b8:	440a      	add	r2, r1
 80268ba:	601a      	str	r2, [r3, #0]
      //Update carry bit
      if(r->data[i] != 0) c = 0;
 80268bc:	68fb      	ldr	r3, [r7, #12]
 80268be:	689a      	ldr	r2, [r3, #8]
 80268c0:	6a3b      	ldr	r3, [r7, #32]
 80268c2:	009b      	lsls	r3, r3, #2
 80268c4:	4413      	add	r3, r2
 80268c6:	681b      	ldr	r3, [r3, #0]
 80268c8:	2b00      	cmp	r3, #0
 80268ca:	d001      	beq.n	80268d0 <mpiAddAbs+0xfe>
 80268cc:	2300      	movs	r3, #0
 80268ce:	61fb      	str	r3, [r7, #28]
   for(i = n; c && i < r->size; i++)
 80268d0:	6a3b      	ldr	r3, [r7, #32]
 80268d2:	3301      	adds	r3, #1
 80268d4:	623b      	str	r3, [r7, #32]
 80268d6:	69fb      	ldr	r3, [r7, #28]
 80268d8:	2b00      	cmp	r3, #0
 80268da:	d004      	beq.n	80268e6 <mpiAddAbs+0x114>
 80268dc:	68fb      	ldr	r3, [r7, #12]
 80268de:	685b      	ldr	r3, [r3, #4]
 80268e0:	6a3a      	ldr	r2, [r7, #32]
 80268e2:	429a      	cmp	r2, r3
 80268e4:	d3dc      	bcc.n	80268a0 <mpiAddAbs+0xce>
   }

   //Check the final carry bit
   if(c && n >= r->size)
 80268e6:	69fb      	ldr	r3, [r7, #28]
 80268e8:	2b00      	cmp	r3, #0
 80268ea:	d017      	beq.n	802691c <mpiAddAbs+0x14a>
 80268ec:	68fb      	ldr	r3, [r7, #12]
 80268ee:	685b      	ldr	r3, [r3, #4]
 80268f0:	697a      	ldr	r2, [r7, #20]
 80268f2:	429a      	cmp	r2, r3
 80268f4:	d312      	bcc.n	802691c <mpiAddAbs+0x14a>
   {
      //Extend the size of the destination register
      MPI_CHECK(mpiGrow(r, n + 1));
 80268f6:	697b      	ldr	r3, [r7, #20]
 80268f8:	3301      	adds	r3, #1
 80268fa:	4619      	mov	r1, r3
 80268fc:	68f8      	ldr	r0, [r7, #12]
 80268fe:	f7ff fb7b 	bl	8025ff8 <mpiGrow>
 8026902:	4603      	mov	r3, r0
 8026904:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8026906:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8026908:	2b00      	cmp	r3, #0
 802690a:	d108      	bne.n	802691e <mpiAddAbs+0x14c>
      //Add carry bit
      r->data[n] = 1;
 802690c:	68fb      	ldr	r3, [r7, #12]
 802690e:	689a      	ldr	r2, [r3, #8]
 8026910:	697b      	ldr	r3, [r7, #20]
 8026912:	009b      	lsls	r3, r3, #2
 8026914:	4413      	add	r3, r2
 8026916:	2201      	movs	r2, #1
 8026918:	601a      	str	r2, [r3, #0]
 802691a:	e000      	b.n	802691e <mpiAddAbs+0x14c>
   }

end:
 802691c:	bf00      	nop
   //Return status code
   return error;
 802691e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8026920:	4618      	mov	r0, r3
 8026922:	3728      	adds	r7, #40	@ 0x28
 8026924:	46bd      	mov	sp, r7
 8026926:	bd80      	pop	{r7, pc}

08026928 <mpiSubAbs>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiSubAbs(Mpi *r, const Mpi *a, const Mpi *b)
{
 8026928:	b580      	push	{r7, lr}
 802692a:	b08c      	sub	sp, #48	@ 0x30
 802692c:	af00      	add	r7, sp, #0
 802692e:	60f8      	str	r0, [r7, #12]
 8026930:	60b9      	str	r1, [r7, #8]
 8026932:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint_t m;
   uint_t n;

   //Check input parameters
   if(mpiCompAbs(a, b) < 0)
 8026934:	6879      	ldr	r1, [r7, #4]
 8026936:	68b8      	ldr	r0, [r7, #8]
 8026938:	f7ff fd04 	bl	8026344 <mpiCompAbs>
 802693c:	4603      	mov	r3, r0
 802693e:	2b00      	cmp	r3, #0
 8026940:	da05      	bge.n	802694e <mpiSubAbs+0x26>
   {
      //Swap A and B if necessary
      const Mpi *t = a;
 8026942:	68bb      	ldr	r3, [r7, #8]
 8026944:	623b      	str	r3, [r7, #32]
      a = b;
 8026946:	687b      	ldr	r3, [r7, #4]
 8026948:	60bb      	str	r3, [r7, #8]
      b = t;
 802694a:	6a3b      	ldr	r3, [r7, #32]
 802694c:	607b      	str	r3, [r7, #4]
   }

   //Determine the actual length of A
   m = mpiGetLength(a);
 802694e:	68b8      	ldr	r0, [r7, #8]
 8026950:	f7ff fbb1 	bl	80260b6 <mpiGetLength>
 8026954:	61f8      	str	r0, [r7, #28]
   //Determine the actual length of B
   n = mpiGetLength(b);
 8026956:	6878      	ldr	r0, [r7, #4]
 8026958:	f7ff fbad 	bl	80260b6 <mpiGetLength>
 802695c:	61b8      	str	r0, [r7, #24]

   //Extend the size of the destination register as needed
   MPI_CHECK(mpiGrow(r, m));
 802695e:	69f9      	ldr	r1, [r7, #28]
 8026960:	68f8      	ldr	r0, [r7, #12]
 8026962:	f7ff fb49 	bl	8025ff8 <mpiGrow>
 8026966:	4603      	mov	r3, r0
 8026968:	82fb      	strh	r3, [r7, #22]
 802696a:	8afb      	ldrh	r3, [r7, #22]
 802696c:	2b00      	cmp	r3, #0
 802696e:	f040 8087 	bne.w	8026a80 <mpiSubAbs+0x158>

   //The result is always positive
   r->sign = 1;
 8026972:	68fb      	ldr	r3, [r7, #12]
 8026974:	2201      	movs	r2, #1
 8026976:	601a      	str	r2, [r3, #0]
   //Clear carry bit
   c = 0;
 8026978:	2300      	movs	r3, #0
 802697a:	62fb      	str	r3, [r7, #44]	@ 0x2c

   //Subtract operands
   for(i = 0; i < n; i++)
 802697c:	2300      	movs	r3, #0
 802697e:	627b      	str	r3, [r7, #36]	@ 0x24
 8026980:	e02d      	b.n	80269de <mpiSubAbs+0xb6>
   {
      //Read first operand
      d = a->data[i];
 8026982:	68bb      	ldr	r3, [r7, #8]
 8026984:	689a      	ldr	r2, [r3, #8]
 8026986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026988:	009b      	lsls	r3, r3, #2
 802698a:	4413      	add	r3, r2
 802698c:	681b      	ldr	r3, [r3, #0]
 802698e:	62bb      	str	r3, [r7, #40]	@ 0x28

      //Check the carry bit
      if(c)
 8026990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026992:	2b00      	cmp	r3, #0
 8026994:	d007      	beq.n	80269a6 <mpiSubAbs+0x7e>
      {
         //Update carry bit
         if(d != 0) c = 0;
 8026996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026998:	2b00      	cmp	r3, #0
 802699a:	d001      	beq.n	80269a0 <mpiSubAbs+0x78>
 802699c:	2300      	movs	r3, #0
 802699e:	62fb      	str	r3, [r7, #44]	@ 0x2c
         //Propagate carry bit
         d -= 1;
 80269a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80269a2:	3b01      	subs	r3, #1
 80269a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      //Update carry bit
      if(d < b->data[i]) c = 1;
 80269a6:	687b      	ldr	r3, [r7, #4]
 80269a8:	689a      	ldr	r2, [r3, #8]
 80269aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80269ac:	009b      	lsls	r3, r3, #2
 80269ae:	4413      	add	r3, r2
 80269b0:	681b      	ldr	r3, [r3, #0]
 80269b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80269b4:	429a      	cmp	r2, r3
 80269b6:	d201      	bcs.n	80269bc <mpiSubAbs+0x94>
 80269b8:	2301      	movs	r3, #1
 80269ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      //Perform subtraction
      r->data[i] = d - b->data[i];
 80269bc:	687b      	ldr	r3, [r7, #4]
 80269be:	689a      	ldr	r2, [r3, #8]
 80269c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80269c2:	009b      	lsls	r3, r3, #2
 80269c4:	4413      	add	r3, r2
 80269c6:	681a      	ldr	r2, [r3, #0]
 80269c8:	68fb      	ldr	r3, [r7, #12]
 80269ca:	6899      	ldr	r1, [r3, #8]
 80269cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80269ce:	009b      	lsls	r3, r3, #2
 80269d0:	440b      	add	r3, r1
 80269d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80269d4:	1a8a      	subs	r2, r1, r2
 80269d6:	601a      	str	r2, [r3, #0]
   for(i = 0; i < n; i++)
 80269d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80269da:	3301      	adds	r3, #1
 80269dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80269de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80269e0:	69bb      	ldr	r3, [r7, #24]
 80269e2:	429a      	cmp	r2, r3
 80269e4:	d3cd      	bcc.n	8026982 <mpiSubAbs+0x5a>
   }

   //Loop as long as the carry bit is set
   for(i = n; c && i < m; i++)
 80269e6:	69bb      	ldr	r3, [r7, #24]
 80269e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80269ea:	e019      	b.n	8026a20 <mpiSubAbs+0xf8>
   {
      //Update carry bit
      if(a->data[i] != 0) c = 0;
 80269ec:	68bb      	ldr	r3, [r7, #8]
 80269ee:	689a      	ldr	r2, [r3, #8]
 80269f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80269f2:	009b      	lsls	r3, r3, #2
 80269f4:	4413      	add	r3, r2
 80269f6:	681b      	ldr	r3, [r3, #0]
 80269f8:	2b00      	cmp	r3, #0
 80269fa:	d001      	beq.n	8026a00 <mpiSubAbs+0xd8>
 80269fc:	2300      	movs	r3, #0
 80269fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      //Propagate carry bit
      r->data[i] = a->data[i] - 1;
 8026a00:	68bb      	ldr	r3, [r7, #8]
 8026a02:	689a      	ldr	r2, [r3, #8]
 8026a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026a06:	009b      	lsls	r3, r3, #2
 8026a08:	4413      	add	r3, r2
 8026a0a:	681a      	ldr	r2, [r3, #0]
 8026a0c:	68fb      	ldr	r3, [r7, #12]
 8026a0e:	6899      	ldr	r1, [r3, #8]
 8026a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026a12:	009b      	lsls	r3, r3, #2
 8026a14:	440b      	add	r3, r1
 8026a16:	3a01      	subs	r2, #1
 8026a18:	601a      	str	r2, [r3, #0]
   for(i = n; c && i < m; i++)
 8026a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026a1c:	3301      	adds	r3, #1
 8026a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8026a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026a22:	2b00      	cmp	r3, #0
 8026a24:	d003      	beq.n	8026a2e <mpiSubAbs+0x106>
 8026a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026a28:	69fb      	ldr	r3, [r7, #28]
 8026a2a:	429a      	cmp	r2, r3
 8026a2c:	d3de      	bcc.n	80269ec <mpiSubAbs+0xc4>
   }

   //R and A are not the same instance?
   if(r != a)
 8026a2e:	68fa      	ldr	r2, [r7, #12]
 8026a30:	68bb      	ldr	r3, [r7, #8]
 8026a32:	429a      	cmp	r2, r3
 8026a34:	d023      	beq.n	8026a7e <mpiSubAbs+0x156>
   {
      //Copy the remaining words
      for(; i < m; i++)
 8026a36:	e00e      	b.n	8026a56 <mpiSubAbs+0x12e>
      {
         r->data[i] = a->data[i];
 8026a38:	68bb      	ldr	r3, [r7, #8]
 8026a3a:	689a      	ldr	r2, [r3, #8]
 8026a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026a3e:	009b      	lsls	r3, r3, #2
 8026a40:	441a      	add	r2, r3
 8026a42:	68fb      	ldr	r3, [r7, #12]
 8026a44:	6899      	ldr	r1, [r3, #8]
 8026a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026a48:	009b      	lsls	r3, r3, #2
 8026a4a:	440b      	add	r3, r1
 8026a4c:	6812      	ldr	r2, [r2, #0]
 8026a4e:	601a      	str	r2, [r3, #0]
      for(; i < m; i++)
 8026a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026a52:	3301      	adds	r3, #1
 8026a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8026a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026a58:	69fb      	ldr	r3, [r7, #28]
 8026a5a:	429a      	cmp	r2, r3
 8026a5c:	d3ec      	bcc.n	8026a38 <mpiSubAbs+0x110>
      }

      //Zero the upper part
      for(; i < r->size; i++)
 8026a5e:	e009      	b.n	8026a74 <mpiSubAbs+0x14c>
      {
         r->data[i] = 0;
 8026a60:	68fb      	ldr	r3, [r7, #12]
 8026a62:	689a      	ldr	r2, [r3, #8]
 8026a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026a66:	009b      	lsls	r3, r3, #2
 8026a68:	4413      	add	r3, r2
 8026a6a:	2200      	movs	r2, #0
 8026a6c:	601a      	str	r2, [r3, #0]
      for(; i < r->size; i++)
 8026a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026a70:	3301      	adds	r3, #1
 8026a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8026a74:	68fb      	ldr	r3, [r7, #12]
 8026a76:	685b      	ldr	r3, [r3, #4]
 8026a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026a7a:	429a      	cmp	r2, r3
 8026a7c:	d3f0      	bcc.n	8026a60 <mpiSubAbs+0x138>
      }
   }

end:
 8026a7e:	bf00      	nop
   //Return status code
   return error;
 8026a80:	8afb      	ldrh	r3, [r7, #22]
}
 8026a82:	4618      	mov	r0, r3
 8026a84:	3730      	adds	r7, #48	@ 0x30
 8026a86:	46bd      	mov	sp, r7
 8026a88:	bd80      	pop	{r7, pc}

08026a8a <mpiShiftLeft>:
 * @param[in] n The number of bits to shift
 * @return Error code
 **/

error_t mpiShiftLeft(Mpi *r, uint_t n)
{
 8026a8a:	b580      	push	{r7, lr}
 8026a8c:	b088      	sub	sp, #32
 8026a8e:	af00      	add	r7, sp, #0
 8026a90:	6078      	str	r0, [r7, #4]
 8026a92:	6039      	str	r1, [r7, #0]
   uint_t k;
   uint_t n1;
   uint_t n2;

   //Check parameters
   if(r->size == 0 || n == 0)
 8026a94:	687b      	ldr	r3, [r7, #4]
 8026a96:	685b      	ldr	r3, [r3, #4]
 8026a98:	2b00      	cmp	r3, #0
 8026a9a:	d002      	beq.n	8026aa2 <mpiShiftLeft+0x18>
 8026a9c:	683b      	ldr	r3, [r7, #0]
 8026a9e:	2b00      	cmp	r3, #0
 8026aa0:	d101      	bne.n	8026aa6 <mpiShiftLeft+0x1c>
      return NO_ERROR;
 8026aa2:	2300      	movs	r3, #0
 8026aa4:	e07d      	b.n	8026ba2 <mpiShiftLeft+0x118>

   //Determine the actual length of r
   k = mpiGetBitLength(r);
 8026aa6:	6878      	ldr	r0, [r7, #4]
 8026aa8:	f7ff fb66 	bl	8026178 <mpiGetBitLength>
 8026aac:	61b8      	str	r0, [r7, #24]

   //Number of 32-bit words to shift
   n1 = n / (MPI_INT_SIZE * 8);
 8026aae:	683b      	ldr	r3, [r7, #0]
 8026ab0:	095b      	lsrs	r3, r3, #5
 8026ab2:	617b      	str	r3, [r7, #20]
   //Number of bits to shift
   n2 = n % (MPI_INT_SIZE * 8);
 8026ab4:	683b      	ldr	r3, [r7, #0]
 8026ab6:	f003 031f 	and.w	r3, r3, #31
 8026aba:	613b      	str	r3, [r7, #16]

   //Increase the size of the multiple-precision number
   error = mpiGrow(r, (k + n + 31) / 32);
 8026abc:	69ba      	ldr	r2, [r7, #24]
 8026abe:	683b      	ldr	r3, [r7, #0]
 8026ac0:	4413      	add	r3, r2
 8026ac2:	331f      	adds	r3, #31
 8026ac4:	095b      	lsrs	r3, r3, #5
 8026ac6:	4619      	mov	r1, r3
 8026ac8:	6878      	ldr	r0, [r7, #4]
 8026aca:	f7ff fa95 	bl	8025ff8 <mpiGrow>
 8026ace:	4603      	mov	r3, r0
 8026ad0:	81fb      	strh	r3, [r7, #14]
   //Check return code
   if(error)
 8026ad2:	89fb      	ldrh	r3, [r7, #14]
 8026ad4:	2b00      	cmp	r3, #0
 8026ad6:	d001      	beq.n	8026adc <mpiShiftLeft+0x52>
      return error;
 8026ad8:	89fb      	ldrh	r3, [r7, #14]
 8026ada:	e062      	b.n	8026ba2 <mpiShiftLeft+0x118>

   //First, shift words
   if(n1 > 0)
 8026adc:	697b      	ldr	r3, [r7, #20]
 8026ade:	2b00      	cmp	r3, #0
 8026ae0:	d02a      	beq.n	8026b38 <mpiShiftLeft+0xae>
   {
      //Process the most significant words
      for(i = r->size - 1; i >= n1; i--)
 8026ae2:	687b      	ldr	r3, [r7, #4]
 8026ae4:	685b      	ldr	r3, [r3, #4]
 8026ae6:	3b01      	subs	r3, #1
 8026ae8:	61fb      	str	r3, [r7, #28]
 8026aea:	e010      	b.n	8026b0e <mpiShiftLeft+0x84>
      {
         r->data[i] = r->data[i - n1];
 8026aec:	687b      	ldr	r3, [r7, #4]
 8026aee:	689a      	ldr	r2, [r3, #8]
 8026af0:	69f9      	ldr	r1, [r7, #28]
 8026af2:	697b      	ldr	r3, [r7, #20]
 8026af4:	1acb      	subs	r3, r1, r3
 8026af6:	009b      	lsls	r3, r3, #2
 8026af8:	441a      	add	r2, r3
 8026afa:	687b      	ldr	r3, [r7, #4]
 8026afc:	6899      	ldr	r1, [r3, #8]
 8026afe:	69fb      	ldr	r3, [r7, #28]
 8026b00:	009b      	lsls	r3, r3, #2
 8026b02:	440b      	add	r3, r1
 8026b04:	6812      	ldr	r2, [r2, #0]
 8026b06:	601a      	str	r2, [r3, #0]
      for(i = r->size - 1; i >= n1; i--)
 8026b08:	69fb      	ldr	r3, [r7, #28]
 8026b0a:	3b01      	subs	r3, #1
 8026b0c:	61fb      	str	r3, [r7, #28]
 8026b0e:	69fa      	ldr	r2, [r7, #28]
 8026b10:	697b      	ldr	r3, [r7, #20]
 8026b12:	429a      	cmp	r2, r3
 8026b14:	d2ea      	bcs.n	8026aec <mpiShiftLeft+0x62>
      }

      //Fill the rest with zeroes
      for(i = 0; i < n1; i++)
 8026b16:	2300      	movs	r3, #0
 8026b18:	61fb      	str	r3, [r7, #28]
 8026b1a:	e009      	b.n	8026b30 <mpiShiftLeft+0xa6>
      {
         r->data[i] = 0;
 8026b1c:	687b      	ldr	r3, [r7, #4]
 8026b1e:	689a      	ldr	r2, [r3, #8]
 8026b20:	69fb      	ldr	r3, [r7, #28]
 8026b22:	009b      	lsls	r3, r3, #2
 8026b24:	4413      	add	r3, r2
 8026b26:	2200      	movs	r2, #0
 8026b28:	601a      	str	r2, [r3, #0]
      for(i = 0; i < n1; i++)
 8026b2a:	69fb      	ldr	r3, [r7, #28]
 8026b2c:	3301      	adds	r3, #1
 8026b2e:	61fb      	str	r3, [r7, #28]
 8026b30:	69fa      	ldr	r2, [r7, #28]
 8026b32:	697b      	ldr	r3, [r7, #20]
 8026b34:	429a      	cmp	r2, r3
 8026b36:	d3f1      	bcc.n	8026b1c <mpiShiftLeft+0x92>
      }
   }

   //Then shift bits
   if(n2 > 0)
 8026b38:	693b      	ldr	r3, [r7, #16]
 8026b3a:	2b00      	cmp	r3, #0
 8026b3c:	d030      	beq.n	8026ba0 <mpiShiftLeft+0x116>
   {
      //Process the most significant words
      for(i = r->size - 1; i >= 1; i--)
 8026b3e:	687b      	ldr	r3, [r7, #4]
 8026b40:	685b      	ldr	r3, [r3, #4]
 8026b42:	3b01      	subs	r3, #1
 8026b44:	61fb      	str	r3, [r7, #28]
 8026b46:	e01f      	b.n	8026b88 <mpiShiftLeft+0xfe>
      {
         r->data[i] = (r->data[i] << n2) | (r->data[i - 1] >> (32 - n2));
 8026b48:	687b      	ldr	r3, [r7, #4]
 8026b4a:	689a      	ldr	r2, [r3, #8]
 8026b4c:	69fb      	ldr	r3, [r7, #28]
 8026b4e:	009b      	lsls	r3, r3, #2
 8026b50:	4413      	add	r3, r2
 8026b52:	681a      	ldr	r2, [r3, #0]
 8026b54:	693b      	ldr	r3, [r7, #16]
 8026b56:	fa02 f103 	lsl.w	r1, r2, r3
 8026b5a:	687b      	ldr	r3, [r7, #4]
 8026b5c:	689a      	ldr	r2, [r3, #8]
 8026b5e:	69fb      	ldr	r3, [r7, #28]
 8026b60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8026b64:	3b01      	subs	r3, #1
 8026b66:	009b      	lsls	r3, r3, #2
 8026b68:	4413      	add	r3, r2
 8026b6a:	681a      	ldr	r2, [r3, #0]
 8026b6c:	693b      	ldr	r3, [r7, #16]
 8026b6e:	f1c3 0320 	rsb	r3, r3, #32
 8026b72:	40da      	lsrs	r2, r3
 8026b74:	687b      	ldr	r3, [r7, #4]
 8026b76:	6898      	ldr	r0, [r3, #8]
 8026b78:	69fb      	ldr	r3, [r7, #28]
 8026b7a:	009b      	lsls	r3, r3, #2
 8026b7c:	4403      	add	r3, r0
 8026b7e:	430a      	orrs	r2, r1
 8026b80:	601a      	str	r2, [r3, #0]
      for(i = r->size - 1; i >= 1; i--)
 8026b82:	69fb      	ldr	r3, [r7, #28]
 8026b84:	3b01      	subs	r3, #1
 8026b86:	61fb      	str	r3, [r7, #28]
 8026b88:	69fb      	ldr	r3, [r7, #28]
 8026b8a:	2b00      	cmp	r3, #0
 8026b8c:	d1dc      	bne.n	8026b48 <mpiShiftLeft+0xbe>
      }

      //The least significant word requires a special handling
      r->data[0] <<= n2;
 8026b8e:	687b      	ldr	r3, [r7, #4]
 8026b90:	689b      	ldr	r3, [r3, #8]
 8026b92:	6819      	ldr	r1, [r3, #0]
 8026b94:	687b      	ldr	r3, [r7, #4]
 8026b96:	689b      	ldr	r3, [r3, #8]
 8026b98:	693a      	ldr	r2, [r7, #16]
 8026b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8026b9e:	601a      	str	r2, [r3, #0]
   }

   //Shift operation is complete
   return NO_ERROR;
 8026ba0:	2300      	movs	r3, #0
}
 8026ba2:	4618      	mov	r0, r3
 8026ba4:	3720      	adds	r7, #32
 8026ba6:	46bd      	mov	sp, r7
 8026ba8:	bd80      	pop	{r7, pc}

08026baa <mpiShiftRight>:
 * @param[in] n The number of bits to shift
 * @return Error code
 **/

error_t mpiShiftRight(Mpi *r, uint_t n)
{
 8026baa:	b480      	push	{r7}
 8026bac:	b087      	sub	sp, #28
 8026bae:	af00      	add	r7, sp, #0
 8026bb0:	6078      	str	r0, [r7, #4]
 8026bb2:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t m;

   //Number of 32-bit words to shift
   uint_t n1 = n / (MPI_INT_SIZE * 8);
 8026bb4:	683b      	ldr	r3, [r7, #0]
 8026bb6:	095b      	lsrs	r3, r3, #5
 8026bb8:	613b      	str	r3, [r7, #16]
   //Number of bits to shift
   uint_t n2 = n % (MPI_INT_SIZE * 8);
 8026bba:	683b      	ldr	r3, [r7, #0]
 8026bbc:	f003 031f 	and.w	r3, r3, #31
 8026bc0:	60fb      	str	r3, [r7, #12]

   //Check parameters
   if(n1 >= r->size)
 8026bc2:	687b      	ldr	r3, [r7, #4]
 8026bc4:	685b      	ldr	r3, [r3, #4]
 8026bc6:	693a      	ldr	r2, [r7, #16]
 8026bc8:	429a      	cmp	r2, r3
 8026bca:	d313      	bcc.n	8026bf4 <mpiShiftRight+0x4a>
   {
      //Clear the contents of the multiple precision integer
      for(i = 0; i < r->size; i++)
 8026bcc:	2300      	movs	r3, #0
 8026bce:	617b      	str	r3, [r7, #20]
 8026bd0:	e009      	b.n	8026be6 <mpiShiftRight+0x3c>
      {
         r->data[i] = 0;
 8026bd2:	687b      	ldr	r3, [r7, #4]
 8026bd4:	689a      	ldr	r2, [r3, #8]
 8026bd6:	697b      	ldr	r3, [r7, #20]
 8026bd8:	009b      	lsls	r3, r3, #2
 8026bda:	4413      	add	r3, r2
 8026bdc:	2200      	movs	r2, #0
 8026bde:	601a      	str	r2, [r3, #0]
      for(i = 0; i < r->size; i++)
 8026be0:	697b      	ldr	r3, [r7, #20]
 8026be2:	3301      	adds	r3, #1
 8026be4:	617b      	str	r3, [r7, #20]
 8026be6:	687b      	ldr	r3, [r7, #4]
 8026be8:	685b      	ldr	r3, [r3, #4]
 8026bea:	697a      	ldr	r2, [r7, #20]
 8026bec:	429a      	cmp	r2, r3
 8026bee:	d3f0      	bcc.n	8026bd2 <mpiShiftRight+0x28>
      }

      //We are done
      return NO_ERROR;
 8026bf0:	2300      	movs	r3, #0
 8026bf2:	e06f      	b.n	8026cd4 <mpiShiftRight+0x12a>
   }

   //First, shift words
   if(n1 > 0)
 8026bf4:	693b      	ldr	r3, [r7, #16]
 8026bf6:	2b00      	cmp	r3, #0
 8026bf8:	d02e      	beq.n	8026c58 <mpiShiftRight+0xae>
   {
      //Process the least significant words
      for(m = r->size - n1, i = 0; i < m; i++)
 8026bfa:	687b      	ldr	r3, [r7, #4]
 8026bfc:	685a      	ldr	r2, [r3, #4]
 8026bfe:	693b      	ldr	r3, [r7, #16]
 8026c00:	1ad3      	subs	r3, r2, r3
 8026c02:	60bb      	str	r3, [r7, #8]
 8026c04:	2300      	movs	r3, #0
 8026c06:	617b      	str	r3, [r7, #20]
 8026c08:	e010      	b.n	8026c2c <mpiShiftRight+0x82>
      {
         r->data[i] = r->data[i + n1];
 8026c0a:	687b      	ldr	r3, [r7, #4]
 8026c0c:	689a      	ldr	r2, [r3, #8]
 8026c0e:	6979      	ldr	r1, [r7, #20]
 8026c10:	693b      	ldr	r3, [r7, #16]
 8026c12:	440b      	add	r3, r1
 8026c14:	009b      	lsls	r3, r3, #2
 8026c16:	441a      	add	r2, r3
 8026c18:	687b      	ldr	r3, [r7, #4]
 8026c1a:	6899      	ldr	r1, [r3, #8]
 8026c1c:	697b      	ldr	r3, [r7, #20]
 8026c1e:	009b      	lsls	r3, r3, #2
 8026c20:	440b      	add	r3, r1
 8026c22:	6812      	ldr	r2, [r2, #0]
 8026c24:	601a      	str	r2, [r3, #0]
      for(m = r->size - n1, i = 0; i < m; i++)
 8026c26:	697b      	ldr	r3, [r7, #20]
 8026c28:	3301      	adds	r3, #1
 8026c2a:	617b      	str	r3, [r7, #20]
 8026c2c:	697a      	ldr	r2, [r7, #20]
 8026c2e:	68bb      	ldr	r3, [r7, #8]
 8026c30:	429a      	cmp	r2, r3
 8026c32:	d3ea      	bcc.n	8026c0a <mpiShiftRight+0x60>
      }

      //Fill the rest with zeroes
      for(i = m; i < r->size; i++)
 8026c34:	68bb      	ldr	r3, [r7, #8]
 8026c36:	617b      	str	r3, [r7, #20]
 8026c38:	e009      	b.n	8026c4e <mpiShiftRight+0xa4>
      {
         r->data[i] = 0;
 8026c3a:	687b      	ldr	r3, [r7, #4]
 8026c3c:	689a      	ldr	r2, [r3, #8]
 8026c3e:	697b      	ldr	r3, [r7, #20]
 8026c40:	009b      	lsls	r3, r3, #2
 8026c42:	4413      	add	r3, r2
 8026c44:	2200      	movs	r2, #0
 8026c46:	601a      	str	r2, [r3, #0]
      for(i = m; i < r->size; i++)
 8026c48:	697b      	ldr	r3, [r7, #20]
 8026c4a:	3301      	adds	r3, #1
 8026c4c:	617b      	str	r3, [r7, #20]
 8026c4e:	687b      	ldr	r3, [r7, #4]
 8026c50:	685b      	ldr	r3, [r3, #4]
 8026c52:	697a      	ldr	r2, [r7, #20]
 8026c54:	429a      	cmp	r2, r3
 8026c56:	d3f0      	bcc.n	8026c3a <mpiShiftRight+0x90>
      }
   }

   //Then shift bits
   if(n2 > 0)
 8026c58:	68fb      	ldr	r3, [r7, #12]
 8026c5a:	2b00      	cmp	r3, #0
 8026c5c:	d039      	beq.n	8026cd2 <mpiShiftRight+0x128>
   {
      //Process the least significant words
      for(m = r->size - n1 - 1, i = 0; i < m; i++)
 8026c5e:	687b      	ldr	r3, [r7, #4]
 8026c60:	685a      	ldr	r2, [r3, #4]
 8026c62:	693b      	ldr	r3, [r7, #16]
 8026c64:	1ad3      	subs	r3, r2, r3
 8026c66:	3b01      	subs	r3, #1
 8026c68:	60bb      	str	r3, [r7, #8]
 8026c6a:	2300      	movs	r3, #0
 8026c6c:	617b      	str	r3, [r7, #20]
 8026c6e:	e01d      	b.n	8026cac <mpiShiftRight+0x102>
      {
         r->data[i] = (r->data[i] >> n2) | (r->data[i + 1] << (32 - n2));
 8026c70:	687b      	ldr	r3, [r7, #4]
 8026c72:	689a      	ldr	r2, [r3, #8]
 8026c74:	697b      	ldr	r3, [r7, #20]
 8026c76:	009b      	lsls	r3, r3, #2
 8026c78:	4413      	add	r3, r2
 8026c7a:	681a      	ldr	r2, [r3, #0]
 8026c7c:	68fb      	ldr	r3, [r7, #12]
 8026c7e:	fa22 f103 	lsr.w	r1, r2, r3
 8026c82:	687b      	ldr	r3, [r7, #4]
 8026c84:	689a      	ldr	r2, [r3, #8]
 8026c86:	697b      	ldr	r3, [r7, #20]
 8026c88:	3301      	adds	r3, #1
 8026c8a:	009b      	lsls	r3, r3, #2
 8026c8c:	4413      	add	r3, r2
 8026c8e:	681a      	ldr	r2, [r3, #0]
 8026c90:	68fb      	ldr	r3, [r7, #12]
 8026c92:	f1c3 0320 	rsb	r3, r3, #32
 8026c96:	409a      	lsls	r2, r3
 8026c98:	687b      	ldr	r3, [r7, #4]
 8026c9a:	6898      	ldr	r0, [r3, #8]
 8026c9c:	697b      	ldr	r3, [r7, #20]
 8026c9e:	009b      	lsls	r3, r3, #2
 8026ca0:	4403      	add	r3, r0
 8026ca2:	430a      	orrs	r2, r1
 8026ca4:	601a      	str	r2, [r3, #0]
      for(m = r->size - n1 - 1, i = 0; i < m; i++)
 8026ca6:	697b      	ldr	r3, [r7, #20]
 8026ca8:	3301      	adds	r3, #1
 8026caa:	617b      	str	r3, [r7, #20]
 8026cac:	697a      	ldr	r2, [r7, #20]
 8026cae:	68bb      	ldr	r3, [r7, #8]
 8026cb0:	429a      	cmp	r2, r3
 8026cb2:	d3dd      	bcc.n	8026c70 <mpiShiftRight+0xc6>
      }

      //The most significant word requires a special handling
      r->data[m] >>= n2;
 8026cb4:	687b      	ldr	r3, [r7, #4]
 8026cb6:	689a      	ldr	r2, [r3, #8]
 8026cb8:	68bb      	ldr	r3, [r7, #8]
 8026cba:	009b      	lsls	r3, r3, #2
 8026cbc:	4413      	add	r3, r2
 8026cbe:	6819      	ldr	r1, [r3, #0]
 8026cc0:	687b      	ldr	r3, [r7, #4]
 8026cc2:	689a      	ldr	r2, [r3, #8]
 8026cc4:	68bb      	ldr	r3, [r7, #8]
 8026cc6:	009b      	lsls	r3, r3, #2
 8026cc8:	4413      	add	r3, r2
 8026cca:	68fa      	ldr	r2, [r7, #12]
 8026ccc:	fa21 f202 	lsr.w	r2, r1, r2
 8026cd0:	601a      	str	r2, [r3, #0]
   }

   //Shift operation is complete
   return NO_ERROR;
 8026cd2:	2300      	movs	r3, #0
}
 8026cd4:	4618      	mov	r0, r3
 8026cd6:	371c      	adds	r7, #28
 8026cd8:	46bd      	mov	sp, r7
 8026cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cde:	4770      	bx	lr

08026ce0 <mpiMul>:
 * @param[in] b Second operand B
 * @return Error code
 **/

__weak_func error_t mpiMul(Mpi *r, const Mpi *a, const Mpi *b)
{
 8026ce0:	b590      	push	{r4, r7, lr}
 8026ce2:	b08f      	sub	sp, #60	@ 0x3c
 8026ce4:	af00      	add	r7, sp, #0
 8026ce6:	60f8      	str	r0, [r7, #12]
 8026ce8:	60b9      	str	r1, [r7, #8]
 8026cea:	607a      	str	r2, [r7, #4]
   uint_t n;
   Mpi ta;
   Mpi tb;

   //Initialize multiple precision integers
   mpiInit(&ta);
 8026cec:	f107 031c 	add.w	r3, r7, #28
 8026cf0:	4618      	mov	r0, r3
 8026cf2:	f7ff f945 	bl	8025f80 <mpiInit>
   mpiInit(&tb);
 8026cf6:	f107 0310 	add.w	r3, r7, #16
 8026cfa:	4618      	mov	r0, r3
 8026cfc:	f7ff f940 	bl	8025f80 <mpiInit>

   //R and A are the same instance?
   if(r == a)
 8026d00:	68fa      	ldr	r2, [r7, #12]
 8026d02:	68bb      	ldr	r3, [r7, #8]
 8026d04:	429a      	cmp	r2, r3
 8026d06:	d10e      	bne.n	8026d26 <mpiMul+0x46>
   {
      //Copy A to TA
      MPI_CHECK(mpiCopy(&ta, a));
 8026d08:	f107 031c 	add.w	r3, r7, #28
 8026d0c:	68b9      	ldr	r1, [r7, #8]
 8026d0e:	4618      	mov	r0, r3
 8026d10:	f7ff fb65 	bl	80263de <mpiCopy>
 8026d14:	4603      	mov	r3, r0
 8026d16:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8026d18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8026d1a:	2b00      	cmp	r3, #0
 8026d1c:	f040 8083 	bne.w	8026e26 <mpiMul+0x146>
      //Use TA instead of A
      a = &ta;
 8026d20:	f107 031c 	add.w	r3, r7, #28
 8026d24:	60bb      	str	r3, [r7, #8]
   }

   //R and B are the same instance?
   if(r == b)
 8026d26:	68fa      	ldr	r2, [r7, #12]
 8026d28:	687b      	ldr	r3, [r7, #4]
 8026d2a:	429a      	cmp	r2, r3
 8026d2c:	d10d      	bne.n	8026d4a <mpiMul+0x6a>
   {
      //Copy B to TB
      MPI_CHECK(mpiCopy(&tb, b));
 8026d2e:	f107 0310 	add.w	r3, r7, #16
 8026d32:	6879      	ldr	r1, [r7, #4]
 8026d34:	4618      	mov	r0, r3
 8026d36:	f7ff fb52 	bl	80263de <mpiCopy>
 8026d3a:	4603      	mov	r3, r0
 8026d3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8026d3e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8026d40:	2b00      	cmp	r3, #0
 8026d42:	d170      	bne.n	8026e26 <mpiMul+0x146>
      //Use TB instead of B
      b = &tb;
 8026d44:	f107 0310 	add.w	r3, r7, #16
 8026d48:	607b      	str	r3, [r7, #4]
   }

   //Determine the actual length of A and B
   m = mpiGetLength(a);
 8026d4a:	68b8      	ldr	r0, [r7, #8]
 8026d4c:	f7ff f9b3 	bl	80260b6 <mpiGetLength>
 8026d50:	62f8      	str	r0, [r7, #44]	@ 0x2c
   n = mpiGetLength(b);
 8026d52:	6878      	ldr	r0, [r7, #4]
 8026d54:	f7ff f9af 	bl	80260b6 <mpiGetLength>
 8026d58:	62b8      	str	r0, [r7, #40]	@ 0x28

   //Adjust the size of R
   MPI_CHECK(mpiGrow(r, m + n));
 8026d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8026d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026d5e:	4413      	add	r3, r2
 8026d60:	4619      	mov	r1, r3
 8026d62:	68f8      	ldr	r0, [r7, #12]
 8026d64:	f7ff f948 	bl	8025ff8 <mpiGrow>
 8026d68:	4603      	mov	r3, r0
 8026d6a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8026d6c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8026d6e:	2b00      	cmp	r3, #0
 8026d70:	d159      	bne.n	8026e26 <mpiMul+0x146>
   //Set the sign of R
   r->sign = (a->sign == b->sign) ? 1 : -1;
 8026d72:	68bb      	ldr	r3, [r7, #8]
 8026d74:	681a      	ldr	r2, [r3, #0]
 8026d76:	687b      	ldr	r3, [r7, #4]
 8026d78:	681b      	ldr	r3, [r3, #0]
 8026d7a:	429a      	cmp	r2, r3
 8026d7c:	d101      	bne.n	8026d82 <mpiMul+0xa2>
 8026d7e:	2201      	movs	r2, #1
 8026d80:	e001      	b.n	8026d86 <mpiMul+0xa6>
 8026d82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8026d86:	68fb      	ldr	r3, [r7, #12]
 8026d88:	601a      	str	r2, [r3, #0]

   //Clear the contents of the destination integer
   for(i = 0; i < r->size; i++)
 8026d8a:	2300      	movs	r3, #0
 8026d8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8026d8e:	e009      	b.n	8026da4 <mpiMul+0xc4>
   {
      r->data[i] = 0;
 8026d90:	68fb      	ldr	r3, [r7, #12]
 8026d92:	689a      	ldr	r2, [r3, #8]
 8026d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026d96:	009b      	lsls	r3, r3, #2
 8026d98:	4413      	add	r3, r2
 8026d9a:	2200      	movs	r2, #0
 8026d9c:	601a      	str	r2, [r3, #0]
   for(i = 0; i < r->size; i++)
 8026d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026da0:	3301      	adds	r3, #1
 8026da2:	633b      	str	r3, [r7, #48]	@ 0x30
 8026da4:	68fb      	ldr	r3, [r7, #12]
 8026da6:	685b      	ldr	r3, [r3, #4]
 8026da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8026daa:	429a      	cmp	r2, r3
 8026dac:	d3f0      	bcc.n	8026d90 <mpiMul+0xb0>
   }

   //Perform multiplication
   if(m < n)
 8026dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8026db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026db2:	429a      	cmp	r2, r3
 8026db4:	d21b      	bcs.n	8026dee <mpiMul+0x10e>
   {
      for(i = 0; i < m; i++)
 8026db6:	2300      	movs	r3, #0
 8026db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8026dba:	e013      	b.n	8026de4 <mpiMul+0x104>
      {
         mpiMulAccCore(&r->data[i], b->data, n, a->data[i]);
 8026dbc:	68fb      	ldr	r3, [r7, #12]
 8026dbe:	689a      	ldr	r2, [r3, #8]
 8026dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026dc2:	009b      	lsls	r3, r3, #2
 8026dc4:	18d0      	adds	r0, r2, r3
 8026dc6:	687b      	ldr	r3, [r7, #4]
 8026dc8:	6899      	ldr	r1, [r3, #8]
 8026dca:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8026dcc:	68bb      	ldr	r3, [r7, #8]
 8026dce:	689a      	ldr	r2, [r3, #8]
 8026dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026dd2:	009b      	lsls	r3, r3, #2
 8026dd4:	4413      	add	r3, r2
 8026dd6:	681b      	ldr	r3, [r3, #0]
 8026dd8:	4622      	mov	r2, r4
 8026dda:	f000 fcce 	bl	802777a <mpiMulAccCore>
      for(i = 0; i < m; i++)
 8026dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026de0:	3301      	adds	r3, #1
 8026de2:	633b      	str	r3, [r7, #48]	@ 0x30
 8026de4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8026de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026de8:	429a      	cmp	r2, r3
 8026dea:	d3e7      	bcc.n	8026dbc <mpiMul+0xdc>
 8026dec:	e01b      	b.n	8026e26 <mpiMul+0x146>
      }
   }
   else
   {
      for(i = 0; i < n; i++)
 8026dee:	2300      	movs	r3, #0
 8026df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8026df2:	e013      	b.n	8026e1c <mpiMul+0x13c>
      {
         mpiMulAccCore(&r->data[i], a->data, m, b->data[i]);
 8026df4:	68fb      	ldr	r3, [r7, #12]
 8026df6:	689a      	ldr	r2, [r3, #8]
 8026df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026dfa:	009b      	lsls	r3, r3, #2
 8026dfc:	18d0      	adds	r0, r2, r3
 8026dfe:	68bb      	ldr	r3, [r7, #8]
 8026e00:	6899      	ldr	r1, [r3, #8]
 8026e02:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8026e04:	687b      	ldr	r3, [r7, #4]
 8026e06:	689a      	ldr	r2, [r3, #8]
 8026e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026e0a:	009b      	lsls	r3, r3, #2
 8026e0c:	4413      	add	r3, r2
 8026e0e:	681b      	ldr	r3, [r3, #0]
 8026e10:	4622      	mov	r2, r4
 8026e12:	f000 fcb2 	bl	802777a <mpiMulAccCore>
      for(i = 0; i < n; i++)
 8026e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026e18:	3301      	adds	r3, #1
 8026e1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8026e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8026e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026e20:	429a      	cmp	r2, r3
 8026e22:	d3e7      	bcc.n	8026df4 <mpiMul+0x114>
      }
   }

end:
 8026e24:	bf00      	nop
   //Release multiple precision integers
   mpiFree(&ta);
 8026e26:	f107 031c 	add.w	r3, r7, #28
 8026e2a:	4618      	mov	r0, r3
 8026e2c:	f7ff f8bb 	bl	8025fa6 <mpiFree>
   mpiFree(&tb);
 8026e30:	f107 0310 	add.w	r3, r7, #16
 8026e34:	4618      	mov	r0, r3
 8026e36:	f7ff f8b6 	bl	8025fa6 <mpiFree>

   //Return status code
   return error;
 8026e3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8026e3c:	4618      	mov	r0, r3
 8026e3e:	373c      	adds	r7, #60	@ 0x3c
 8026e40:	46bd      	mov	sp, r7
 8026e42:	bd90      	pop	{r4, r7, pc}

08026e44 <mpiMod>:
 * @param[in] p The modulus P
 * @return Error code
 **/

error_t mpiMod(Mpi *r, const Mpi *a, const Mpi *p)
{
 8026e44:	b580      	push	{r7, lr}
 8026e46:	b08c      	sub	sp, #48	@ 0x30
 8026e48:	af00      	add	r7, sp, #0
 8026e4a:	60f8      	str	r0, [r7, #12]
 8026e4c:	60b9      	str	r1, [r7, #8]
 8026e4e:	607a      	str	r2, [r7, #4]
   uint_t m;
   uint_t n;
   Mpi c;

   //Make sure the modulus is positive
   if(mpiCompInt(p, 0) <= 0)
 8026e50:	2100      	movs	r1, #0
 8026e52:	6878      	ldr	r0, [r7, #4]
 8026e54:	f7ff fa54 	bl	8026300 <mpiCompInt>
 8026e58:	4603      	mov	r3, r0
 8026e5a:	2b00      	cmp	r3, #0
 8026e5c:	dc01      	bgt.n	8026e62 <mpiMod+0x1e>
      return ERROR_INVALID_PARAMETER;
 8026e5e:	2302      	movs	r3, #2
 8026e60:	e070      	b.n	8026f44 <mpiMod+0x100>

   //Initialize multiple precision integer
   mpiInit(&c);
 8026e62:	f107 0314 	add.w	r3, r7, #20
 8026e66:	4618      	mov	r0, r3
 8026e68:	f7ff f88a 	bl	8025f80 <mpiInit>

   //Save the sign of A
   sign = a->sign;
 8026e6c:	68bb      	ldr	r3, [r7, #8]
 8026e6e:	681b      	ldr	r3, [r3, #0]
 8026e70:	62bb      	str	r3, [r7, #40]	@ 0x28
   //Determine the actual length of A
   m = mpiGetBitLength(a);
 8026e72:	68b8      	ldr	r0, [r7, #8]
 8026e74:	f7ff f980 	bl	8026178 <mpiGetBitLength>
 8026e78:	6278      	str	r0, [r7, #36]	@ 0x24
   //Determine the actual length of P
   n = mpiGetBitLength(p);
 8026e7a:	6878      	ldr	r0, [r7, #4]
 8026e7c:	f7ff f97c 	bl	8026178 <mpiGetBitLength>
 8026e80:	6238      	str	r0, [r7, #32]

   //Let R = A
   MPI_CHECK(mpiCopy(r, a));
 8026e82:	68b9      	ldr	r1, [r7, #8]
 8026e84:	68f8      	ldr	r0, [r7, #12]
 8026e86:	f7ff faaa 	bl	80263de <mpiCopy>
 8026e8a:	4603      	mov	r3, r0
 8026e8c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8026e8e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8026e90:	2b00      	cmp	r3, #0
 8026e92:	d151      	bne.n	8026f38 <mpiMod+0xf4>

   if(m >= n)
 8026e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026e96:	6a3b      	ldr	r3, [r7, #32]
 8026e98:	429a      	cmp	r2, r3
 8026e9a:	d340      	bcc.n	8026f1e <mpiMod+0xda>
   {
      MPI_CHECK(mpiCopy(&c, p));
 8026e9c:	f107 0314 	add.w	r3, r7, #20
 8026ea0:	6879      	ldr	r1, [r7, #4]
 8026ea2:	4618      	mov	r0, r3
 8026ea4:	f7ff fa9b 	bl	80263de <mpiCopy>
 8026ea8:	4603      	mov	r3, r0
 8026eaa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8026eac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8026eae:	2b00      	cmp	r3, #0
 8026eb0:	d142      	bne.n	8026f38 <mpiMod+0xf4>
      MPI_CHECK(mpiShiftLeft(&c, m - n));
 8026eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026eb4:	6a3b      	ldr	r3, [r7, #32]
 8026eb6:	1ad2      	subs	r2, r2, r3
 8026eb8:	f107 0314 	add.w	r3, r7, #20
 8026ebc:	4611      	mov	r1, r2
 8026ebe:	4618      	mov	r0, r3
 8026ec0:	f7ff fde3 	bl	8026a8a <mpiShiftLeft>
 8026ec4:	4603      	mov	r3, r0
 8026ec6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8026ec8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8026eca:	2b00      	cmp	r3, #0
 8026ecc:	d134      	bne.n	8026f38 <mpiMod+0xf4>

      while(mpiCompAbs(r, p) >= 0)
 8026ece:	e01f      	b.n	8026f10 <mpiMod+0xcc>
      {
         if(mpiCompAbs(r, &c) >= 0)
 8026ed0:	f107 0314 	add.w	r3, r7, #20
 8026ed4:	4619      	mov	r1, r3
 8026ed6:	68f8      	ldr	r0, [r7, #12]
 8026ed8:	f7ff fa34 	bl	8026344 <mpiCompAbs>
 8026edc:	4603      	mov	r3, r0
 8026ede:	2b00      	cmp	r3, #0
 8026ee0:	db0b      	blt.n	8026efa <mpiMod+0xb6>
         {
            MPI_CHECK(mpiSubAbs(r, r, &c));
 8026ee2:	f107 0314 	add.w	r3, r7, #20
 8026ee6:	461a      	mov	r2, r3
 8026ee8:	68f9      	ldr	r1, [r7, #12]
 8026eea:	68f8      	ldr	r0, [r7, #12]
 8026eec:	f7ff fd1c 	bl	8026928 <mpiSubAbs>
 8026ef0:	4603      	mov	r3, r0
 8026ef2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8026ef4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8026ef6:	2b00      	cmp	r3, #0
 8026ef8:	d11e      	bne.n	8026f38 <mpiMod+0xf4>
         }

         MPI_CHECK(mpiShiftRight(&c, 1));
 8026efa:	f107 0314 	add.w	r3, r7, #20
 8026efe:	2101      	movs	r1, #1
 8026f00:	4618      	mov	r0, r3
 8026f02:	f7ff fe52 	bl	8026baa <mpiShiftRight>
 8026f06:	4603      	mov	r3, r0
 8026f08:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8026f0a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8026f0c:	2b00      	cmp	r3, #0
 8026f0e:	d113      	bne.n	8026f38 <mpiMod+0xf4>
      while(mpiCompAbs(r, p) >= 0)
 8026f10:	6879      	ldr	r1, [r7, #4]
 8026f12:	68f8      	ldr	r0, [r7, #12]
 8026f14:	f7ff fa16 	bl	8026344 <mpiCompAbs>
 8026f18:	4603      	mov	r3, r0
 8026f1a:	2b00      	cmp	r3, #0
 8026f1c:	dad8      	bge.n	8026ed0 <mpiMod+0x8c>
      }
   }

   if(sign < 0)
 8026f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026f20:	2b00      	cmp	r3, #0
 8026f22:	da08      	bge.n	8026f36 <mpiMod+0xf2>
   {
      MPI_CHECK(mpiSubAbs(r, p, r));
 8026f24:	68fa      	ldr	r2, [r7, #12]
 8026f26:	6879      	ldr	r1, [r7, #4]
 8026f28:	68f8      	ldr	r0, [r7, #12]
 8026f2a:	f7ff fcfd 	bl	8026928 <mpiSubAbs>
 8026f2e:	4603      	mov	r3, r0
 8026f30:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8026f32:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8026f34:	2b00      	cmp	r3, #0
   }

end:
 8026f36:	bf00      	nop
   //Release previously allocated memory
   mpiFree(&c);
 8026f38:	f107 0314 	add.w	r3, r7, #20
 8026f3c:	4618      	mov	r0, r3
 8026f3e:	f7ff f832 	bl	8025fa6 <mpiFree>

   //Return status code
   return error;
 8026f42:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 8026f44:	4618      	mov	r0, r3
 8026f46:	3730      	adds	r7, #48	@ 0x30
 8026f48:	46bd      	mov	sp, r7
 8026f4a:	bd80      	pop	{r7, pc}

08026f4c <mpiMulMod>:
 * @param[in] p The modulus P
 * @return Error code
 **/

__weak_func error_t mpiMulMod(Mpi *r, const Mpi *a, const Mpi *b, const Mpi *p)
{
 8026f4c:	b580      	push	{r7, lr}
 8026f4e:	b086      	sub	sp, #24
 8026f50:	af00      	add	r7, sp, #0
 8026f52:	60f8      	str	r0, [r7, #12]
 8026f54:	60b9      	str	r1, [r7, #8]
 8026f56:	607a      	str	r2, [r7, #4]
 8026f58:	603b      	str	r3, [r7, #0]
   error_t error;

   //Perform modular multiplication
   MPI_CHECK(mpiMul(r, a, b));
 8026f5a:	687a      	ldr	r2, [r7, #4]
 8026f5c:	68b9      	ldr	r1, [r7, #8]
 8026f5e:	68f8      	ldr	r0, [r7, #12]
 8026f60:	f7ff febe 	bl	8026ce0 <mpiMul>
 8026f64:	4603      	mov	r3, r0
 8026f66:	82fb      	strh	r3, [r7, #22]
 8026f68:	8afb      	ldrh	r3, [r7, #22]
 8026f6a:	2b00      	cmp	r3, #0
 8026f6c:	d109      	bne.n	8026f82 <mpiMulMod+0x36>
   MPI_CHECK(mpiMod(r, r, p));
 8026f6e:	683a      	ldr	r2, [r7, #0]
 8026f70:	68f9      	ldr	r1, [r7, #12]
 8026f72:	68f8      	ldr	r0, [r7, #12]
 8026f74:	f7ff ff66 	bl	8026e44 <mpiMod>
 8026f78:	4603      	mov	r3, r0
 8026f7a:	82fb      	strh	r3, [r7, #22]
 8026f7c:	8afb      	ldrh	r3, [r7, #22]
 8026f7e:	2b00      	cmp	r3, #0

end:
 8026f80:	bf00      	nop
   //Return status code
   return error;
 8026f82:	8afb      	ldrh	r3, [r7, #22]
}
 8026f84:	4618      	mov	r0, r3
 8026f86:	3718      	adds	r7, #24
 8026f88:	46bd      	mov	sp, r7
 8026f8a:	bd80      	pop	{r7, pc}

08026f8c <mpiExpMod>:
 * @param[in] p Modulus
 * @return Error code
 **/

__weak_func error_t mpiExpMod(Mpi *r, const Mpi *a, const Mpi *e, const Mpi *p)
{
 8026f8c:	b590      	push	{r4, r7, lr}
 8026f8e:	b0af      	sub	sp, #188	@ 0xbc
 8026f90:	af02      	add	r7, sp, #8
 8026f92:	60f8      	str	r0, [r7, #12]
 8026f94:	60b9      	str	r1, [r7, #8]
 8026f96:	607a      	str	r2, [r7, #4]
 8026f98:	603b      	str	r3, [r7, #0]
   Mpi c2;
   Mpi t;
   Mpi s[8];

   //Initialize multiple precision integers
   mpiInit(&b);
 8026f9a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8026f9e:	4618      	mov	r0, r3
 8026fa0:	f7fe ffee 	bl	8025f80 <mpiInit>
   mpiInit(&c2);
 8026fa4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8026fa8:	4618      	mov	r0, r3
 8026faa:	f7fe ffe9 	bl	8025f80 <mpiInit>
   mpiInit(&t);
 8026fae:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8026fb2:	4618      	mov	r0, r3
 8026fb4:	f7fe ffe4 	bl	8025f80 <mpiInit>

   //Initialize precomputed values
   for(i = 0; (uint_t) i < arraysize(s); i++)
 8026fb8:	2300      	movs	r3, #0
 8026fba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8026fbe:	e010      	b.n	8026fe2 <mpiExpMod+0x56>
   {
      mpiInit(&s[i]);
 8026fc0:	f107 0110 	add.w	r1, r7, #16
 8026fc4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8026fc8:	4613      	mov	r3, r2
 8026fca:	005b      	lsls	r3, r3, #1
 8026fcc:	4413      	add	r3, r2
 8026fce:	009b      	lsls	r3, r3, #2
 8026fd0:	440b      	add	r3, r1
 8026fd2:	4618      	mov	r0, r3
 8026fd4:	f7fe ffd4 	bl	8025f80 <mpiInit>
   for(i = 0; (uint_t) i < arraysize(s); i++)
 8026fd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8026fdc:	3301      	adds	r3, #1
 8026fde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8026fe2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8026fe6:	2b07      	cmp	r3, #7
 8026fe8:	d9ea      	bls.n	8026fc0 <mpiExpMod+0x34>
   }

   //Very small exponents are often selected with low Hamming weight.
   //The sliding window mechanism should be disabled in that case
   d = (mpiGetBitLength(e) <= 32) ? 1 : 4;
 8026fea:	6878      	ldr	r0, [r7, #4]
 8026fec:	f7ff f8c4 	bl	8026178 <mpiGetBitLength>
 8026ff0:	4603      	mov	r3, r0
 8026ff2:	2b20      	cmp	r3, #32
 8026ff4:	d801      	bhi.n	8026ffa <mpiExpMod+0x6e>
 8026ff6:	2301      	movs	r3, #1
 8026ff8:	e000      	b.n	8026ffc <mpiExpMod+0x70>
 8026ffa:	2304      	movs	r3, #4
 8026ffc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

   //Even modulus?
   if(mpiIsEven(p))
 8027000:	2100      	movs	r1, #0
 8027002:	6838      	ldr	r0, [r7, #0]
 8027004:	f7ff f8f2 	bl	80261ec <mpiGetBitValue>
 8027008:	4603      	mov	r3, r0
 802700a:	2b00      	cmp	r3, #0
 802700c:	f040 80f5 	bne.w	80271fa <mpiExpMod+0x26e>
   {
      //Let S[0] = A
      MPI_CHECK(mpiMod(&s[0], a, p));
 8027010:	f107 0310 	add.w	r3, r7, #16
 8027014:	683a      	ldr	r2, [r7, #0]
 8027016:	68b9      	ldr	r1, [r7, #8]
 8027018:	4618      	mov	r0, r3
 802701a:	f7ff ff13 	bl	8026e44 <mpiMod>
 802701e:	4603      	mov	r3, r0
 8027020:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8027024:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8027028:	2b00      	cmp	r3, #0
 802702a:	f040 8291 	bne.w	8027550 <mpiExpMod+0x5c4>
      //Let B = A^2
      MPI_CHECK(mpiMulMod(&b, &s[0], &s[0], p));
 802702e:	f107 0210 	add.w	r2, r7, #16
 8027032:	f107 0110 	add.w	r1, r7, #16
 8027036:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 802703a:	683b      	ldr	r3, [r7, #0]
 802703c:	f7ff ff86 	bl	8026f4c <mpiMulMod>
 8027040:	4603      	mov	r3, r0
 8027042:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8027046:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 802704a:	2b00      	cmp	r3, #0
 802704c:	f040 8280 	bne.w	8027550 <mpiExpMod+0x5c4>

      //Precompute S[i] = A^(2 * i + 1)
      for(i = 1; i < (1 << (d - 1)); i++)
 8027050:	2301      	movs	r3, #1
 8027052:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8027056:	e024      	b.n	80270a2 <mpiExpMod+0x116>
      {
         MPI_CHECK(mpiMulMod(&s[i], &s[i - 1], &b, p));
 8027058:	f107 0110 	add.w	r1, r7, #16
 802705c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8027060:	4613      	mov	r3, r2
 8027062:	005b      	lsls	r3, r3, #1
 8027064:	4413      	add	r3, r2
 8027066:	009b      	lsls	r3, r3, #2
 8027068:	18c8      	adds	r0, r1, r3
 802706a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 802706e:	1e5a      	subs	r2, r3, #1
 8027070:	f107 0110 	add.w	r1, r7, #16
 8027074:	4613      	mov	r3, r2
 8027076:	005b      	lsls	r3, r3, #1
 8027078:	4413      	add	r3, r2
 802707a:	009b      	lsls	r3, r3, #2
 802707c:	4419      	add	r1, r3
 802707e:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8027082:	683b      	ldr	r3, [r7, #0]
 8027084:	f7ff ff62 	bl	8026f4c <mpiMulMod>
 8027088:	4603      	mov	r3, r0
 802708a:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 802708e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8027092:	2b00      	cmp	r3, #0
 8027094:	f040 825c 	bne.w	8027550 <mpiExpMod+0x5c4>
      for(i = 1; i < (1 << (d - 1)); i++)
 8027098:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 802709c:	3301      	adds	r3, #1
 802709e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80270a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80270a6:	3b01      	subs	r3, #1
 80270a8:	2201      	movs	r2, #1
 80270aa:	fa02 f303 	lsl.w	r3, r2, r3
 80270ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80270b2:	429a      	cmp	r2, r3
 80270b4:	dbd0      	blt.n	8027058 <mpiExpMod+0xcc>
      }

      //Let R = 1
      MPI_CHECK(mpiSetValue(r, 1));
 80270b6:	2101      	movs	r1, #1
 80270b8:	68f8      	ldr	r0, [r7, #12]
 80270ba:	f7ff f9d9 	bl	8026470 <mpiSetValue>
 80270be:	4603      	mov	r3, r0
 80270c0:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80270c4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80270c8:	2b00      	cmp	r3, #0
 80270ca:	f040 8241 	bne.w	8027550 <mpiExpMod+0x5c4>

      //The exponent is processed in a left-to-right fashion
      i = mpiGetBitLength(e) - 1;
 80270ce:	6878      	ldr	r0, [r7, #4]
 80270d0:	f7ff f852 	bl	8026178 <mpiGetBitLength>
 80270d4:	4603      	mov	r3, r0
 80270d6:	3b01      	subs	r3, #1
 80270d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      //Perform sliding window exponentiation
      while(i >= 0)
 80270dc:	e087      	b.n	80271ee <mpiExpMod+0x262>
      {
         //The sliding window exponentiation algorithm decomposes E
         //into zero and nonzero windows
         if(!mpiGetBitValue(e, i))
 80270de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80270e2:	4619      	mov	r1, r3
 80270e4:	6878      	ldr	r0, [r7, #4]
 80270e6:	f7ff f881 	bl	80261ec <mpiGetBitValue>
 80270ea:	4603      	mov	r3, r0
 80270ec:	2b00      	cmp	r3, #0
 80270ee:	d113      	bne.n	8027118 <mpiExpMod+0x18c>
         {
            //Compute R = R^2
            MPI_CHECK(mpiMulMod(r, r, r, p));
 80270f0:	683b      	ldr	r3, [r7, #0]
 80270f2:	68fa      	ldr	r2, [r7, #12]
 80270f4:	68f9      	ldr	r1, [r7, #12]
 80270f6:	68f8      	ldr	r0, [r7, #12]
 80270f8:	f7ff ff28 	bl	8026f4c <mpiMulMod>
 80270fc:	4603      	mov	r3, r0
 80270fe:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8027102:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8027106:	2b00      	cmp	r3, #0
 8027108:	f040 8222 	bne.w	8027550 <mpiExpMod+0x5c4>
            //Next bit to be processed
            i--;
 802710c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8027110:	3b01      	subs	r3, #1
 8027112:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8027116:	e06a      	b.n	80271ee <mpiExpMod+0x262>
         }
         else
         {
            //Find the longest window
            n = MAX(i - d + 1, 0);
 8027118:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 802711c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8027120:	1ad3      	subs	r3, r2, r3
 8027122:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8027126:	d006      	beq.n	8027136 <mpiExpMod+0x1aa>
 8027128:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 802712c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8027130:	1ad3      	subs	r3, r2, r3
 8027132:	3301      	adds	r3, #1
 8027134:	e000      	b.n	8027138 <mpiExpMod+0x1ac>
 8027136:	2300      	movs	r3, #0
 8027138:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            //The least significant bit of the window must be equal to 1
            while(!mpiGetBitValue(e, n)) n++;
 802713c:	e004      	b.n	8027148 <mpiExpMod+0x1bc>
 802713e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8027142:	3301      	adds	r3, #1
 8027144:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8027148:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802714c:	4619      	mov	r1, r3
 802714e:	6878      	ldr	r0, [r7, #4]
 8027150:	f7ff f84c 	bl	80261ec <mpiGetBitValue>
 8027154:	4603      	mov	r3, r0
 8027156:	2b00      	cmp	r3, #0
 8027158:	d0f1      	beq.n	802713e <mpiExpMod+0x1b2>

            //The algorithm processes more than one bit per iteration
            for(u = 0, j = i; j >= n; j--)
 802715a:	2300      	movs	r3, #0
 802715c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8027160:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8027164:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8027168:	e01f      	b.n	80271aa <mpiExpMod+0x21e>
            {
               //Compute R = R^2
               MPI_CHECK(mpiMulMod(r, r, r, p));
 802716a:	683b      	ldr	r3, [r7, #0]
 802716c:	68fa      	ldr	r2, [r7, #12]
 802716e:	68f9      	ldr	r1, [r7, #12]
 8027170:	68f8      	ldr	r0, [r7, #12]
 8027172:	f7ff feeb 	bl	8026f4c <mpiMulMod>
 8027176:	4603      	mov	r3, r0
 8027178:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 802717c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8027180:	2b00      	cmp	r3, #0
 8027182:	f040 81e5 	bne.w	8027550 <mpiExpMod+0x5c4>
               //Compute the relevant index to be used in the precomputed table
               u = (u << 1) | mpiGetBitValue(e, j);
 8027186:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 802718a:	005c      	lsls	r4, r3, #1
 802718c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8027190:	4619      	mov	r1, r3
 8027192:	6878      	ldr	r0, [r7, #4]
 8027194:	f7ff f82a 	bl	80261ec <mpiGetBitValue>
 8027198:	4603      	mov	r3, r0
 802719a:	4323      	orrs	r3, r4
 802719c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            for(u = 0, j = i; j >= n; j--)
 80271a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80271a4:	3b01      	subs	r3, #1
 80271a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80271aa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80271ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80271b2:	429a      	cmp	r2, r3
 80271b4:	dad9      	bge.n	802716a <mpiExpMod+0x1de>
            }

            //Perform a single multiplication per iteration
            MPI_CHECK(mpiMulMod(r, r, &s[u >> 1], p));
 80271b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80271ba:	085a      	lsrs	r2, r3, #1
 80271bc:	f107 0110 	add.w	r1, r7, #16
 80271c0:	4613      	mov	r3, r2
 80271c2:	005b      	lsls	r3, r3, #1
 80271c4:	4413      	add	r3, r2
 80271c6:	009b      	lsls	r3, r3, #2
 80271c8:	18ca      	adds	r2, r1, r3
 80271ca:	683b      	ldr	r3, [r7, #0]
 80271cc:	68f9      	ldr	r1, [r7, #12]
 80271ce:	68f8      	ldr	r0, [r7, #12]
 80271d0:	f7ff febc 	bl	8026f4c <mpiMulMod>
 80271d4:	4603      	mov	r3, r0
 80271d6:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80271da:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80271de:	2b00      	cmp	r3, #0
 80271e0:	f040 81b6 	bne.w	8027550 <mpiExpMod+0x5c4>
            //Next bit to be processed
            i = n - 1;
 80271e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80271e8:	3b01      	subs	r3, #1
 80271ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      while(i >= 0)
 80271ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80271f2:	2b00      	cmp	r3, #0
 80271f4:	f6bf af73 	bge.w	80270de <mpiExpMod+0x152>
 80271f8:	e1aa      	b.n	8027550 <mpiExpMod+0x5c4>
      }
   }
   else
   {
      //Compute the smaller C = (2^32)^k such as C > P
      k = mpiGetLength(p);
 80271fa:	6838      	ldr	r0, [r7, #0]
 80271fc:	f7fe ff5b 	bl	80260b6 <mpiGetLength>
 8027200:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

      //Compute C^2 mod P
      MPI_CHECK(mpiSetValue(&c2, 1));
 8027204:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8027208:	2101      	movs	r1, #1
 802720a:	4618      	mov	r0, r3
 802720c:	f7ff f930 	bl	8026470 <mpiSetValue>
 8027210:	4603      	mov	r3, r0
 8027212:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8027216:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 802721a:	2b00      	cmp	r3, #0
 802721c:	f040 8198 	bne.w	8027550 <mpiExpMod+0x5c4>
      MPI_CHECK(mpiShiftLeft(&c2, 2 * k * (MPI_INT_SIZE * 8)));
 8027220:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8027224:	019a      	lsls	r2, r3, #6
 8027226:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 802722a:	4611      	mov	r1, r2
 802722c:	4618      	mov	r0, r3
 802722e:	f7ff fc2c 	bl	8026a8a <mpiShiftLeft>
 8027232:	4603      	mov	r3, r0
 8027234:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8027238:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 802723c:	2b00      	cmp	r3, #0
 802723e:	f040 8187 	bne.w	8027550 <mpiExpMod+0x5c4>
      MPI_CHECK(mpiMod(&c2, &c2, p));
 8027242:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8027246:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 802724a:	683a      	ldr	r2, [r7, #0]
 802724c:	4618      	mov	r0, r3
 802724e:	f7ff fdf9 	bl	8026e44 <mpiMod>
 8027252:	4603      	mov	r3, r0
 8027254:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8027258:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 802725c:	2b00      	cmp	r3, #0
 802725e:	f040 8177 	bne.w	8027550 <mpiExpMod+0x5c4>

      //Let B = A * C mod P
      if(mpiComp(a, p) >= 0)
 8027262:	6839      	ldr	r1, [r7, #0]
 8027264:	68b8      	ldr	r0, [r7, #8]
 8027266:	f7fe ffe5 	bl	8026234 <mpiComp>
 802726a:	4603      	mov	r3, r0
 802726c:	2b00      	cmp	r3, #0
 802726e:	db25      	blt.n	80272bc <mpiExpMod+0x330>
      {
         MPI_CHECK(mpiMod(&b, a, p));
 8027270:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8027274:	683a      	ldr	r2, [r7, #0]
 8027276:	68b9      	ldr	r1, [r7, #8]
 8027278:	4618      	mov	r0, r3
 802727a:	f7ff fde3 	bl	8026e44 <mpiMod>
 802727e:	4603      	mov	r3, r0
 8027280:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8027284:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8027288:	2b00      	cmp	r3, #0
 802728a:	f040 8161 	bne.w	8027550 <mpiExpMod+0x5c4>
         MPI_CHECK(mpiMontgomeryMul(&b, &b, &c2, k, p, &t));
 802728e:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8027292:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8027296:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 802729a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 802729e:	9301      	str	r3, [sp, #4]
 80272a0:	683b      	ldr	r3, [r7, #0]
 80272a2:	9300      	str	r3, [sp, #0]
 80272a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80272a8:	f000 f992 	bl	80275d0 <mpiMontgomeryMul>
 80272ac:	4603      	mov	r3, r0
 80272ae:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80272b2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80272b6:	2b00      	cmp	r3, #0
 80272b8:	d016      	beq.n	80272e8 <mpiExpMod+0x35c>
 80272ba:	e149      	b.n	8027550 <mpiExpMod+0x5c4>
      }
      else
      {
         MPI_CHECK(mpiMontgomeryMul(&b, a, &c2, k, p, &t));
 80272bc:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80272c0:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 80272c4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80272c8:	9301      	str	r3, [sp, #4]
 80272ca:	683b      	ldr	r3, [r7, #0]
 80272cc:	9300      	str	r3, [sp, #0]
 80272ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80272d2:	68b9      	ldr	r1, [r7, #8]
 80272d4:	f000 f97c 	bl	80275d0 <mpiMontgomeryMul>
 80272d8:	4603      	mov	r3, r0
 80272da:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80272de:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80272e2:	2b00      	cmp	r3, #0
 80272e4:	f040 8134 	bne.w	8027550 <mpiExpMod+0x5c4>
      }

      //Let R = B^2 * C^-1 mod P
      MPI_CHECK(mpiMontgomeryMul(r, &b, &b, k, p, &t));
 80272e8:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80272ec:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80272f0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80272f4:	9301      	str	r3, [sp, #4]
 80272f6:	683b      	ldr	r3, [r7, #0]
 80272f8:	9300      	str	r3, [sp, #0]
 80272fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80272fe:	68f8      	ldr	r0, [r7, #12]
 8027300:	f000 f966 	bl	80275d0 <mpiMontgomeryMul>
 8027304:	4603      	mov	r3, r0
 8027306:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 802730a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 802730e:	2b00      	cmp	r3, #0
 8027310:	f040 811e 	bne.w	8027550 <mpiExpMod+0x5c4>
      //Let S[0] = B
      MPI_CHECK(mpiCopy(&s[0], &b));
 8027314:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8027318:	f107 0310 	add.w	r3, r7, #16
 802731c:	4611      	mov	r1, r2
 802731e:	4618      	mov	r0, r3
 8027320:	f7ff f85d 	bl	80263de <mpiCopy>
 8027324:	4603      	mov	r3, r0
 8027326:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 802732a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 802732e:	2b00      	cmp	r3, #0
 8027330:	f040 810e 	bne.w	8027550 <mpiExpMod+0x5c4>

      //Precompute S[i] = B^(2 * i + 1) * C^-1 mod P
      for(i = 1; i < (1 << (d - 1)); i++)
 8027334:	2301      	movs	r3, #1
 8027336:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 802733a:	e029      	b.n	8027390 <mpiExpMod+0x404>
      {
         MPI_CHECK(mpiMontgomeryMul(&s[i], &s[i - 1], r, k, p, &t));
 802733c:	f107 0110 	add.w	r1, r7, #16
 8027340:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8027344:	4613      	mov	r3, r2
 8027346:	005b      	lsls	r3, r3, #1
 8027348:	4413      	add	r3, r2
 802734a:	009b      	lsls	r3, r3, #2
 802734c:	18c8      	adds	r0, r1, r3
 802734e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8027352:	1e5a      	subs	r2, r3, #1
 8027354:	f107 0110 	add.w	r1, r7, #16
 8027358:	4613      	mov	r3, r2
 802735a:	005b      	lsls	r3, r3, #1
 802735c:	4413      	add	r3, r2
 802735e:	009b      	lsls	r3, r3, #2
 8027360:	4419      	add	r1, r3
 8027362:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8027366:	9301      	str	r3, [sp, #4]
 8027368:	683b      	ldr	r3, [r7, #0]
 802736a:	9300      	str	r3, [sp, #0]
 802736c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8027370:	68fa      	ldr	r2, [r7, #12]
 8027372:	f000 f92d 	bl	80275d0 <mpiMontgomeryMul>
 8027376:	4603      	mov	r3, r0
 8027378:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 802737c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8027380:	2b00      	cmp	r3, #0
 8027382:	f040 80e5 	bne.w	8027550 <mpiExpMod+0x5c4>
      for(i = 1; i < (1 << (d - 1)); i++)
 8027386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 802738a:	3301      	adds	r3, #1
 802738c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8027390:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8027394:	3b01      	subs	r3, #1
 8027396:	2201      	movs	r2, #1
 8027398:	fa02 f303 	lsl.w	r3, r2, r3
 802739c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80273a0:	429a      	cmp	r2, r3
 80273a2:	dbcb      	blt.n	802733c <mpiExpMod+0x3b0>
      }

      //Let R = C mod P
      MPI_CHECK(mpiCopy(r, &c2));
 80273a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80273a8:	4619      	mov	r1, r3
 80273aa:	68f8      	ldr	r0, [r7, #12]
 80273ac:	f7ff f817 	bl	80263de <mpiCopy>
 80273b0:	4603      	mov	r3, r0
 80273b2:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80273b6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80273ba:	2b00      	cmp	r3, #0
 80273bc:	f040 80c8 	bne.w	8027550 <mpiExpMod+0x5c4>
      MPI_CHECK(mpiMontgomeryRed(r, r, k, p, &t));
 80273c0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80273c4:	9300      	str	r3, [sp, #0]
 80273c6:	683b      	ldr	r3, [r7, #0]
 80273c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80273cc:	68f9      	ldr	r1, [r7, #12]
 80273ce:	68f8      	ldr	r0, [r7, #12]
 80273d0:	f000 f9b3 	bl	802773a <mpiMontgomeryRed>
 80273d4:	4603      	mov	r3, r0
 80273d6:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80273da:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80273de:	2b00      	cmp	r3, #0
 80273e0:	f040 80b6 	bne.w	8027550 <mpiExpMod+0x5c4>

      //The exponent is processed in a left-to-right fashion
      i = mpiGetBitLength(e) - 1;
 80273e4:	6878      	ldr	r0, [r7, #4]
 80273e6:	f7fe fec7 	bl	8026178 <mpiGetBitLength>
 80273ea:	4603      	mov	r3, r0
 80273ec:	3b01      	subs	r3, #1
 80273ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      //Perform sliding window exponentiation
      while(i >= 0)
 80273f2:	e097      	b.n	8027524 <mpiExpMod+0x598>
      {
         //The sliding window exponentiation algorithm decomposes E
         //into zero and nonzero windows
         if(!mpiGetBitValue(e, i))
 80273f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80273f8:	4619      	mov	r1, r3
 80273fa:	6878      	ldr	r0, [r7, #4]
 80273fc:	f7fe fef6 	bl	80261ec <mpiGetBitValue>
 8027400:	4603      	mov	r3, r0
 8027402:	2b00      	cmp	r3, #0
 8027404:	d119      	bne.n	802743a <mpiExpMod+0x4ae>
         {
            //Compute R = R^2 * C^-1 mod P
            MPI_CHECK(mpiMontgomeryMul(r, r, r, k, p, &t));
 8027406:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 802740a:	9301      	str	r3, [sp, #4]
 802740c:	683b      	ldr	r3, [r7, #0]
 802740e:	9300      	str	r3, [sp, #0]
 8027410:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8027414:	68fa      	ldr	r2, [r7, #12]
 8027416:	68f9      	ldr	r1, [r7, #12]
 8027418:	68f8      	ldr	r0, [r7, #12]
 802741a:	f000 f8d9 	bl	80275d0 <mpiMontgomeryMul>
 802741e:	4603      	mov	r3, r0
 8027420:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8027424:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8027428:	2b00      	cmp	r3, #0
 802742a:	f040 8091 	bne.w	8027550 <mpiExpMod+0x5c4>
            //Next bit to be processed
            i--;
 802742e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8027432:	3b01      	subs	r3, #1
 8027434:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8027438:	e074      	b.n	8027524 <mpiExpMod+0x598>
         }
         else
         {
            //Find the longest window
            n = MAX(i - d + 1, 0);
 802743a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 802743e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8027442:	1ad3      	subs	r3, r2, r3
 8027444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8027448:	d006      	beq.n	8027458 <mpiExpMod+0x4cc>
 802744a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 802744e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8027452:	1ad3      	subs	r3, r2, r3
 8027454:	3301      	adds	r3, #1
 8027456:	e000      	b.n	802745a <mpiExpMod+0x4ce>
 8027458:	2300      	movs	r3, #0
 802745a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            //The least significant bit of the window must be equal to 1
            while(!mpiGetBitValue(e, n)) n++;
 802745e:	e004      	b.n	802746a <mpiExpMod+0x4de>
 8027460:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8027464:	3301      	adds	r3, #1
 8027466:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 802746a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802746e:	4619      	mov	r1, r3
 8027470:	6878      	ldr	r0, [r7, #4]
 8027472:	f7fe febb 	bl	80261ec <mpiGetBitValue>
 8027476:	4603      	mov	r3, r0
 8027478:	2b00      	cmp	r3, #0
 802747a:	d0f1      	beq.n	8027460 <mpiExpMod+0x4d4>

            //The algorithm processes more than one bit per iteration
            for(u = 0, j = i; j >= n; j--)
 802747c:	2300      	movs	r3, #0
 802747e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8027482:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8027486:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 802748a:	e024      	b.n	80274d6 <mpiExpMod+0x54a>
            {
               //Compute R = R^2 * C^-1 mod P
               MPI_CHECK(mpiMontgomeryMul(r, r, r, k, p, &t));
 802748c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8027490:	9301      	str	r3, [sp, #4]
 8027492:	683b      	ldr	r3, [r7, #0]
 8027494:	9300      	str	r3, [sp, #0]
 8027496:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 802749a:	68fa      	ldr	r2, [r7, #12]
 802749c:	68f9      	ldr	r1, [r7, #12]
 802749e:	68f8      	ldr	r0, [r7, #12]
 80274a0:	f000 f896 	bl	80275d0 <mpiMontgomeryMul>
 80274a4:	4603      	mov	r3, r0
 80274a6:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80274aa:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80274ae:	2b00      	cmp	r3, #0
 80274b0:	d14e      	bne.n	8027550 <mpiExpMod+0x5c4>
               //Compute the relevant index to be used in the precomputed table
               u = (u << 1) | mpiGetBitValue(e, j);
 80274b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80274b6:	005c      	lsls	r4, r3, #1
 80274b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80274bc:	4619      	mov	r1, r3
 80274be:	6878      	ldr	r0, [r7, #4]
 80274c0:	f7fe fe94 	bl	80261ec <mpiGetBitValue>
 80274c4:	4603      	mov	r3, r0
 80274c6:	4323      	orrs	r3, r4
 80274c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            for(u = 0, j = i; j >= n; j--)
 80274cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80274d0:	3b01      	subs	r3, #1
 80274d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80274d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80274da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80274de:	429a      	cmp	r2, r3
 80274e0:	dad4      	bge.n	802748c <mpiExpMod+0x500>
            }

            //Compute R = R * T[u/2] * C^-1 mod P
            MPI_CHECK(mpiMontgomeryMul(r, r, &s[u >> 1], k, p, &t));
 80274e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80274e6:	085a      	lsrs	r2, r3, #1
 80274e8:	f107 0110 	add.w	r1, r7, #16
 80274ec:	4613      	mov	r3, r2
 80274ee:	005b      	lsls	r3, r3, #1
 80274f0:	4413      	add	r3, r2
 80274f2:	009b      	lsls	r3, r3, #2
 80274f4:	18ca      	adds	r2, r1, r3
 80274f6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80274fa:	9301      	str	r3, [sp, #4]
 80274fc:	683b      	ldr	r3, [r7, #0]
 80274fe:	9300      	str	r3, [sp, #0]
 8027500:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8027504:	68f9      	ldr	r1, [r7, #12]
 8027506:	68f8      	ldr	r0, [r7, #12]
 8027508:	f000 f862 	bl	80275d0 <mpiMontgomeryMul>
 802750c:	4603      	mov	r3, r0
 802750e:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8027512:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8027516:	2b00      	cmp	r3, #0
 8027518:	d11a      	bne.n	8027550 <mpiExpMod+0x5c4>
            //Next bit to be processed
            i = n - 1;
 802751a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802751e:	3b01      	subs	r3, #1
 8027520:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      while(i >= 0)
 8027524:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8027528:	2b00      	cmp	r3, #0
 802752a:	f6bf af63 	bge.w	80273f4 <mpiExpMod+0x468>
         }
      }

      //Compute R = R * C^-1 mod P
      MPI_CHECK(mpiMontgomeryRed(r, r, k, p, &t));
 802752e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8027532:	9300      	str	r3, [sp, #0]
 8027534:	683b      	ldr	r3, [r7, #0]
 8027536:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 802753a:	68f9      	ldr	r1, [r7, #12]
 802753c:	68f8      	ldr	r0, [r7, #12]
 802753e:	f000 f8fc 	bl	802773a <mpiMontgomeryRed>
 8027542:	4603      	mov	r3, r0
 8027544:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8027548:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 802754c:	2b00      	cmp	r3, #0
   }

end:
 802754e:	bf00      	nop
   //Release multiple precision integers
   mpiFree(&b);
 8027550:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8027554:	4618      	mov	r0, r3
 8027556:	f7fe fd26 	bl	8025fa6 <mpiFree>
   mpiFree(&c2);
 802755a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 802755e:	4618      	mov	r0, r3
 8027560:	f7fe fd21 	bl	8025fa6 <mpiFree>
   mpiFree(&t);
 8027564:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8027568:	4618      	mov	r0, r3
 802756a:	f7fe fd1c 	bl	8025fa6 <mpiFree>

   //Release precomputed values
   for(i = 0; (uint_t) i < arraysize(s); i++)
 802756e:	2300      	movs	r3, #0
 8027570:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8027574:	e010      	b.n	8027598 <mpiExpMod+0x60c>
   {
      mpiFree(&s[i]);
 8027576:	f107 0110 	add.w	r1, r7, #16
 802757a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 802757e:	4613      	mov	r3, r2
 8027580:	005b      	lsls	r3, r3, #1
 8027582:	4413      	add	r3, r2
 8027584:	009b      	lsls	r3, r3, #2
 8027586:	440b      	add	r3, r1
 8027588:	4618      	mov	r0, r3
 802758a:	f7fe fd0c 	bl	8025fa6 <mpiFree>
   for(i = 0; (uint_t) i < arraysize(s); i++)
 802758e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8027592:	3301      	adds	r3, #1
 8027594:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8027598:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 802759c:	2b07      	cmp	r3, #7
 802759e:	d9ea      	bls.n	8027576 <mpiExpMod+0x5ea>
   }

   //Return status code
   return error;
 80275a0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
}
 80275a4:	4618      	mov	r0, r3
 80275a6:	37b4      	adds	r7, #180	@ 0xb4
 80275a8:	46bd      	mov	sp, r7
 80275aa:	bd90      	pop	{r4, r7, pc}

080275ac <mpiExpModFast>:
 * @param[in] p Modulus
 * @return Error code
 **/

__weak_func error_t mpiExpModFast(Mpi *r, const Mpi *a, const Mpi *e, const Mpi *p)
{
 80275ac:	b580      	push	{r7, lr}
 80275ae:	b084      	sub	sp, #16
 80275b0:	af00      	add	r7, sp, #0
 80275b2:	60f8      	str	r0, [r7, #12]
 80275b4:	60b9      	str	r1, [r7, #8]
 80275b6:	607a      	str	r2, [r7, #4]
 80275b8:	603b      	str	r3, [r7, #0]
   //Perform modular exponentiation
   return mpiExpMod(r, a, e, p);
 80275ba:	683b      	ldr	r3, [r7, #0]
 80275bc:	687a      	ldr	r2, [r7, #4]
 80275be:	68b9      	ldr	r1, [r7, #8]
 80275c0:	68f8      	ldr	r0, [r7, #12]
 80275c2:	f7ff fce3 	bl	8026f8c <mpiExpMod>
 80275c6:	4603      	mov	r3, r0
}
 80275c8:	4618      	mov	r0, r3
 80275ca:	3710      	adds	r7, #16
 80275cc:	46bd      	mov	sp, r7
 80275ce:	bd80      	pop	{r7, pc}

080275d0 <mpiMontgomeryMul>:
 * @return Error code
 **/

error_t mpiMontgomeryMul(Mpi *r, const Mpi *a, const Mpi *b, uint_t k,
   const Mpi *p, Mpi *t)
{
 80275d0:	b590      	push	{r4, r7, lr}
 80275d2:	b08b      	sub	sp, #44	@ 0x2c
 80275d4:	af00      	add	r7, sp, #0
 80275d6:	60f8      	str	r0, [r7, #12]
 80275d8:	60b9      	str	r1, [r7, #8]
 80275da:	607a      	str	r2, [r7, #4]
 80275dc:	603b      	str	r3, [r7, #0]
   uint_t m;
   uint_t n;
   uint_t q;

   //Use Newton's method to compute the inverse of P[0] mod 2^32
   for(m = p->data[0], i = 0; i < 4; i++)
 80275de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80275e0:	689b      	ldr	r3, [r3, #8]
 80275e2:	681b      	ldr	r3, [r3, #0]
 80275e4:	61fb      	str	r3, [r7, #28]
 80275e6:	2300      	movs	r3, #0
 80275e8:	623b      	str	r3, [r7, #32]
 80275ea:	e00e      	b.n	802760a <mpiMontgomeryMul+0x3a>
   {
      m = m * (2U - m * p->data[0]);
 80275ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80275ee:	689b      	ldr	r3, [r3, #8]
 80275f0:	681b      	ldr	r3, [r3, #0]
 80275f2:	69fa      	ldr	r2, [r7, #28]
 80275f4:	fb02 f303 	mul.w	r3, r2, r3
 80275f8:	f1c3 0202 	rsb	r2, r3, #2
 80275fc:	69fb      	ldr	r3, [r7, #28]
 80275fe:	fb02 f303 	mul.w	r3, r2, r3
 8027602:	61fb      	str	r3, [r7, #28]
   for(m = p->data[0], i = 0; i < 4; i++)
 8027604:	6a3b      	ldr	r3, [r7, #32]
 8027606:	3301      	adds	r3, #1
 8027608:	623b      	str	r3, [r7, #32]
 802760a:	6a3b      	ldr	r3, [r7, #32]
 802760c:	2b03      	cmp	r3, #3
 802760e:	d9ed      	bls.n	80275ec <mpiMontgomeryMul+0x1c>
   }

   //Precompute -1/P[0] mod 2^32;
   m = ~m + 1U;
 8027610:	69fb      	ldr	r3, [r7, #28]
 8027612:	425b      	negs	r3, r3
 8027614:	61fb      	str	r3, [r7, #28]

   //We assume that B is always less than 2^k
   n = MIN(b->size, k);
 8027616:	687b      	ldr	r3, [r7, #4]
 8027618:	685b      	ldr	r3, [r3, #4]
 802761a:	683a      	ldr	r2, [r7, #0]
 802761c:	4293      	cmp	r3, r2
 802761e:	bf28      	it	cs
 8027620:	4613      	movcs	r3, r2
 8027622:	617b      	str	r3, [r7, #20]

   //Make sure T is large enough
   MPI_CHECK(mpiGrow(t, 2 * k + 1));
 8027624:	683b      	ldr	r3, [r7, #0]
 8027626:	005b      	lsls	r3, r3, #1
 8027628:	3301      	adds	r3, #1
 802762a:	4619      	mov	r1, r3
 802762c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 802762e:	f7fe fce3 	bl	8025ff8 <mpiGrow>
 8027632:	4603      	mov	r3, r0
 8027634:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8027636:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8027638:	2b00      	cmp	r3, #0
 802763a:	d179      	bne.n	8027730 <mpiMontgomeryMul+0x160>
   //Let T = 0
   MPI_CHECK(mpiSetValue(t, 0));
 802763c:	2100      	movs	r1, #0
 802763e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8027640:	f7fe ff16 	bl	8026470 <mpiSetValue>
 8027644:	4603      	mov	r3, r0
 8027646:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8027648:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802764a:	2b00      	cmp	r3, #0
 802764c:	d170      	bne.n	8027730 <mpiMontgomeryMul+0x160>

   //Perform Montgomery multiplication
   for(i = 0; i < k; i++)
 802764e:	2300      	movs	r3, #0
 8027650:	623b      	str	r3, [r7, #32]
 8027652:	e044      	b.n	80276de <mpiMontgomeryMul+0x10e>
   {
      //Check current index
      if(i < a->size)
 8027654:	68bb      	ldr	r3, [r7, #8]
 8027656:	685b      	ldr	r3, [r3, #4]
 8027658:	6a3a      	ldr	r2, [r7, #32]
 802765a:	429a      	cmp	r2, r3
 802765c:	d227      	bcs.n	80276ae <mpiMontgomeryMul+0xde>
      {
         //Compute q = ((T[i] + A[i] * B[0]) * m) mod 2^32
         q = (t->data[i] + a->data[i] * b->data[0]) * m;
 802765e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8027660:	689a      	ldr	r2, [r3, #8]
 8027662:	6a3b      	ldr	r3, [r7, #32]
 8027664:	009b      	lsls	r3, r3, #2
 8027666:	4413      	add	r3, r2
 8027668:	681a      	ldr	r2, [r3, #0]
 802766a:	68bb      	ldr	r3, [r7, #8]
 802766c:	6899      	ldr	r1, [r3, #8]
 802766e:	6a3b      	ldr	r3, [r7, #32]
 8027670:	009b      	lsls	r3, r3, #2
 8027672:	440b      	add	r3, r1
 8027674:	681b      	ldr	r3, [r3, #0]
 8027676:	6879      	ldr	r1, [r7, #4]
 8027678:	6889      	ldr	r1, [r1, #8]
 802767a:	6809      	ldr	r1, [r1, #0]
 802767c:	fb01 f303 	mul.w	r3, r1, r3
 8027680:	441a      	add	r2, r3
 8027682:	69fb      	ldr	r3, [r7, #28]
 8027684:	fb02 f303 	mul.w	r3, r2, r3
 8027688:	61bb      	str	r3, [r7, #24]
         //Compute T = T + A[i] * B
         mpiMulAccCore(t->data + i, b->data, n, a->data[i]);
 802768a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802768c:	689a      	ldr	r2, [r3, #8]
 802768e:	6a3b      	ldr	r3, [r7, #32]
 8027690:	009b      	lsls	r3, r3, #2
 8027692:	18d0      	adds	r0, r2, r3
 8027694:	687b      	ldr	r3, [r7, #4]
 8027696:	6899      	ldr	r1, [r3, #8]
 8027698:	697c      	ldr	r4, [r7, #20]
 802769a:	68bb      	ldr	r3, [r7, #8]
 802769c:	689a      	ldr	r2, [r3, #8]
 802769e:	6a3b      	ldr	r3, [r7, #32]
 80276a0:	009b      	lsls	r3, r3, #2
 80276a2:	4413      	add	r3, r2
 80276a4:	681b      	ldr	r3, [r3, #0]
 80276a6:	4622      	mov	r2, r4
 80276a8:	f000 f867 	bl	802777a <mpiMulAccCore>
 80276ac:	e009      	b.n	80276c2 <mpiMontgomeryMul+0xf2>
      }
      else
      {
         //Compute q = (T[i] * m) mod 2^32
         q = t->data[i] * m;
 80276ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80276b0:	689a      	ldr	r2, [r3, #8]
 80276b2:	6a3b      	ldr	r3, [r7, #32]
 80276b4:	009b      	lsls	r3, r3, #2
 80276b6:	4413      	add	r3, r2
 80276b8:	681a      	ldr	r2, [r3, #0]
 80276ba:	69fb      	ldr	r3, [r7, #28]
 80276bc:	fb02 f303 	mul.w	r3, r2, r3
 80276c0:	61bb      	str	r3, [r7, #24]
      }

      //Compute T = T + q * P
      mpiMulAccCore(t->data + i, p->data, k, q);
 80276c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80276c4:	689a      	ldr	r2, [r3, #8]
 80276c6:	6a3b      	ldr	r3, [r7, #32]
 80276c8:	009b      	lsls	r3, r3, #2
 80276ca:	18d0      	adds	r0, r2, r3
 80276cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80276ce:	6899      	ldr	r1, [r3, #8]
 80276d0:	683a      	ldr	r2, [r7, #0]
 80276d2:	69bb      	ldr	r3, [r7, #24]
 80276d4:	f000 f851 	bl	802777a <mpiMulAccCore>
   for(i = 0; i < k; i++)
 80276d8:	6a3b      	ldr	r3, [r7, #32]
 80276da:	3301      	adds	r3, #1
 80276dc:	623b      	str	r3, [r7, #32]
 80276de:	6a3a      	ldr	r2, [r7, #32]
 80276e0:	683b      	ldr	r3, [r7, #0]
 80276e2:	429a      	cmp	r2, r3
 80276e4:	d3b6      	bcc.n	8027654 <mpiMontgomeryMul+0x84>
   }

   //Compute R = T / 2^(32 * k)
   MPI_CHECK(mpiShiftRight(t, k * (MPI_INT_SIZE * 8)));
 80276e6:	683b      	ldr	r3, [r7, #0]
 80276e8:	015b      	lsls	r3, r3, #5
 80276ea:	4619      	mov	r1, r3
 80276ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80276ee:	f7ff fa5c 	bl	8026baa <mpiShiftRight>
 80276f2:	4603      	mov	r3, r0
 80276f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80276f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80276f8:	2b00      	cmp	r3, #0
 80276fa:	d119      	bne.n	8027730 <mpiMontgomeryMul+0x160>
   MPI_CHECK(mpiCopy(r, t));
 80276fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80276fe:	68f8      	ldr	r0, [r7, #12]
 8027700:	f7fe fe6d 	bl	80263de <mpiCopy>
 8027704:	4603      	mov	r3, r0
 8027706:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8027708:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802770a:	2b00      	cmp	r3, #0
 802770c:	d110      	bne.n	8027730 <mpiMontgomeryMul+0x160>

   //A final subtraction is required
   if(mpiComp(r, p) >= 0)
 802770e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8027710:	68f8      	ldr	r0, [r7, #12]
 8027712:	f7fe fd8f 	bl	8026234 <mpiComp>
 8027716:	4603      	mov	r3, r0
 8027718:	2b00      	cmp	r3, #0
 802771a:	db08      	blt.n	802772e <mpiMontgomeryMul+0x15e>
   {
      MPI_CHECK(mpiSub(r, r, p));
 802771c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802771e:	68f9      	ldr	r1, [r7, #12]
 8027720:	68f8      	ldr	r0, [r7, #12]
 8027722:	f7ff f81a 	bl	802675a <mpiSub>
 8027726:	4603      	mov	r3, r0
 8027728:	84fb      	strh	r3, [r7, #38]	@ 0x26
 802772a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802772c:	2b00      	cmp	r3, #0
   }

end:
 802772e:	bf00      	nop
   //Return status code
   return error;
 8027730:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8027732:	4618      	mov	r0, r3
 8027734:	372c      	adds	r7, #44	@ 0x2c
 8027736:	46bd      	mov	sp, r7
 8027738:	bd90      	pop	{r4, r7, pc}

0802773a <mpiMontgomeryRed>:
 * @param[in] t An preallocated integer T (for internal operation)
 * @return Error code
 **/

error_t mpiMontgomeryRed(Mpi *r, const Mpi *a, uint_t k, const Mpi *p, Mpi *t)
{
 802773a:	b580      	push	{r7, lr}
 802773c:	b08a      	sub	sp, #40	@ 0x28
 802773e:	af02      	add	r7, sp, #8
 8027740:	60f8      	str	r0, [r7, #12]
 8027742:	60b9      	str	r1, [r7, #8]
 8027744:	607a      	str	r2, [r7, #4]
 8027746:	603b      	str	r3, [r7, #0]
   uint_t value;
   Mpi b;

   //Let B = 1
   value = 1;
 8027748:	2301      	movs	r3, #1
 802774a:	61fb      	str	r3, [r7, #28]
   b.sign = 1;
 802774c:	2301      	movs	r3, #1
 802774e:	613b      	str	r3, [r7, #16]
   b.size = 1;
 8027750:	2301      	movs	r3, #1
 8027752:	617b      	str	r3, [r7, #20]
#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   b.data = &value;
 8027754:	f107 031c 	add.w	r3, r7, #28
 8027758:	61bb      	str	r3, [r7, #24]
#else
   b.data[0] = value;
#endif

   //Compute R = A / 2^k mod P
   return mpiMontgomeryMul(r, a, &b, k, p, t);
 802775a:	f107 0210 	add.w	r2, r7, #16
 802775e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027760:	9301      	str	r3, [sp, #4]
 8027762:	683b      	ldr	r3, [r7, #0]
 8027764:	9300      	str	r3, [sp, #0]
 8027766:	687b      	ldr	r3, [r7, #4]
 8027768:	68b9      	ldr	r1, [r7, #8]
 802776a:	68f8      	ldr	r0, [r7, #12]
 802776c:	f7ff ff30 	bl	80275d0 <mpiMontgomeryMul>
 8027770:	4603      	mov	r3, r0
}
 8027772:	4618      	mov	r0, r3
 8027774:	3720      	adds	r7, #32
 8027776:	46bd      	mov	sp, r7
 8027778:	bd80      	pop	{r7, pc}

0802777a <mpiMulAccCore>:
 * @param[in] m Size of A in words
 * @param[in] b Second operand B
 **/

void mpiMulAccCore(uint_t *r, const uint_t *a, int_t m, const uint_t b)
{
 802777a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 802777e:	b08b      	sub	sp, #44	@ 0x2c
 8027780:	af00      	add	r7, sp, #0
 8027782:	60f8      	str	r0, [r7, #12]
 8027784:	60b9      	str	r1, [r7, #8]
 8027786:	607a      	str	r2, [r7, #4]
 8027788:	603b      	str	r3, [r7, #0]
   uint32_t u;
   uint32_t v;
   uint64_t p;

   //Clear variables
   c = 0;
 802778a:	2300      	movs	r3, #0
 802778c:	623b      	str	r3, [r7, #32]
   u = 0;
 802778e:	2300      	movs	r3, #0
 8027790:	61bb      	str	r3, [r7, #24]
   v = 0;
 8027792:	2300      	movs	r3, #0
 8027794:	61fb      	str	r3, [r7, #28]

   //Perform multiplication
   for(i = 0; i < m; i++)
 8027796:	2300      	movs	r3, #0
 8027798:	627b      	str	r3, [r7, #36]	@ 0x24
 802779a:	e04d      	b.n	8027838 <mpiMulAccCore+0xbe>
   {
      p = (uint64_t) a[i] * b;
 802779c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802779e:	009b      	lsls	r3, r3, #2
 80277a0:	68ba      	ldr	r2, [r7, #8]
 80277a2:	4413      	add	r3, r2
 80277a4:	681b      	ldr	r3, [r3, #0]
 80277a6:	2200      	movs	r2, #0
 80277a8:	4698      	mov	r8, r3
 80277aa:	4691      	mov	r9, r2
 80277ac:	683b      	ldr	r3, [r7, #0]
 80277ae:	2200      	movs	r2, #0
 80277b0:	469a      	mov	sl, r3
 80277b2:	4693      	mov	fp, r2
 80277b4:	fb0a f209 	mul.w	r2, sl, r9
 80277b8:	fb08 f30b 	mul.w	r3, r8, fp
 80277bc:	4413      	add	r3, r2
 80277be:	fba8 450a 	umull	r4, r5, r8, sl
 80277c2:	442b      	add	r3, r5
 80277c4:	461d      	mov	r5, r3
 80277c6:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80277ca:	e9c7 4504 	strd	r4, r5, [r7, #16]
      u = (uint32_t) p;
 80277ce:	693b      	ldr	r3, [r7, #16]
 80277d0:	61bb      	str	r3, [r7, #24]
      v = (uint32_t) (p >> 32);
 80277d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80277d6:	f04f 0200 	mov.w	r2, #0
 80277da:	f04f 0300 	mov.w	r3, #0
 80277de:	000a      	movs	r2, r1
 80277e0:	2300      	movs	r3, #0
 80277e2:	4613      	mov	r3, r2
 80277e4:	61fb      	str	r3, [r7, #28]

      u += c;
 80277e6:	69ba      	ldr	r2, [r7, #24]
 80277e8:	6a3b      	ldr	r3, [r7, #32]
 80277ea:	4413      	add	r3, r2
 80277ec:	61bb      	str	r3, [r7, #24]
      if(u < c) v++;
 80277ee:	69ba      	ldr	r2, [r7, #24]
 80277f0:	6a3b      	ldr	r3, [r7, #32]
 80277f2:	429a      	cmp	r2, r3
 80277f4:	d202      	bcs.n	80277fc <mpiMulAccCore+0x82>
 80277f6:	69fb      	ldr	r3, [r7, #28]
 80277f8:	3301      	adds	r3, #1
 80277fa:	61fb      	str	r3, [r7, #28]

      u += r[i];
 80277fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80277fe:	009b      	lsls	r3, r3, #2
 8027800:	68fa      	ldr	r2, [r7, #12]
 8027802:	4413      	add	r3, r2
 8027804:	681b      	ldr	r3, [r3, #0]
 8027806:	69ba      	ldr	r2, [r7, #24]
 8027808:	4413      	add	r3, r2
 802780a:	61bb      	str	r3, [r7, #24]
      if(u < r[i]) v++;
 802780c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802780e:	009b      	lsls	r3, r3, #2
 8027810:	68fa      	ldr	r2, [r7, #12]
 8027812:	4413      	add	r3, r2
 8027814:	681b      	ldr	r3, [r3, #0]
 8027816:	69ba      	ldr	r2, [r7, #24]
 8027818:	429a      	cmp	r2, r3
 802781a:	d202      	bcs.n	8027822 <mpiMulAccCore+0xa8>
 802781c:	69fb      	ldr	r3, [r7, #28]
 802781e:	3301      	adds	r3, #1
 8027820:	61fb      	str	r3, [r7, #28]

      r[i] = u;
 8027822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027824:	009b      	lsls	r3, r3, #2
 8027826:	68fa      	ldr	r2, [r7, #12]
 8027828:	4413      	add	r3, r2
 802782a:	69ba      	ldr	r2, [r7, #24]
 802782c:	601a      	str	r2, [r3, #0]
      c = v;
 802782e:	69fb      	ldr	r3, [r7, #28]
 8027830:	623b      	str	r3, [r7, #32]
   for(i = 0; i < m; i++)
 8027832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027834:	3301      	adds	r3, #1
 8027836:	627b      	str	r3, [r7, #36]	@ 0x24
 8027838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802783a:	687b      	ldr	r3, [r7, #4]
 802783c:	429a      	cmp	r2, r3
 802783e:	dbad      	blt.n	802779c <mpiMulAccCore+0x22>
   }

   //Propagate carry
   for(; c != 0; i++)
 8027840:	e01a      	b.n	8027878 <mpiMulAccCore+0xfe>
   {
      r[i] += c;
 8027842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027844:	009b      	lsls	r3, r3, #2
 8027846:	68fa      	ldr	r2, [r7, #12]
 8027848:	4413      	add	r3, r2
 802784a:	6819      	ldr	r1, [r3, #0]
 802784c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802784e:	009b      	lsls	r3, r3, #2
 8027850:	68fa      	ldr	r2, [r7, #12]
 8027852:	4413      	add	r3, r2
 8027854:	6a3a      	ldr	r2, [r7, #32]
 8027856:	440a      	add	r2, r1
 8027858:	601a      	str	r2, [r3, #0]
      c = (r[i] < c);
 802785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802785c:	009b      	lsls	r3, r3, #2
 802785e:	68fa      	ldr	r2, [r7, #12]
 8027860:	4413      	add	r3, r2
 8027862:	681b      	ldr	r3, [r3, #0]
 8027864:	6a3a      	ldr	r2, [r7, #32]
 8027866:	429a      	cmp	r2, r3
 8027868:	bf8c      	ite	hi
 802786a:	2301      	movhi	r3, #1
 802786c:	2300      	movls	r3, #0
 802786e:	b2db      	uxtb	r3, r3
 8027870:	623b      	str	r3, [r7, #32]
   for(; c != 0; i++)
 8027872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027874:	3301      	adds	r3, #1
 8027876:	627b      	str	r3, [r7, #36]	@ 0x24
 8027878:	6a3b      	ldr	r3, [r7, #32]
 802787a:	2b00      	cmp	r3, #0
 802787c:	d1e1      	bne.n	8027842 <mpiMulAccCore+0xc8>
   }
}
 802787e:	bf00      	nop
 8027880:	bf00      	nop
 8027882:	372c      	adds	r7, #44	@ 0x2c
 8027884:	46bd      	mov	sp, r7
 8027886:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 802788a:	4770      	bx	lr

0802788c <rsaInitPublicKey>:
 * @brief Initialize an RSA public key
 * @param[in] key Pointer to the RSA public key to initialize
 **/

void rsaInitPublicKey(RsaPublicKey *key)
{
 802788c:	b580      	push	{r7, lr}
 802788e:	b082      	sub	sp, #8
 8027890:	af00      	add	r7, sp, #0
 8027892:	6078      	str	r0, [r7, #4]
   //Initialize multiple precision integers
   mpiInit(&key->n);
 8027894:	687b      	ldr	r3, [r7, #4]
 8027896:	4618      	mov	r0, r3
 8027898:	f7fe fb72 	bl	8025f80 <mpiInit>
   mpiInit(&key->e);
 802789c:	687b      	ldr	r3, [r7, #4]
 802789e:	330c      	adds	r3, #12
 80278a0:	4618      	mov	r0, r3
 80278a2:	f7fe fb6d 	bl	8025f80 <mpiInit>
}
 80278a6:	bf00      	nop
 80278a8:	3708      	adds	r7, #8
 80278aa:	46bd      	mov	sp, r7
 80278ac:	bd80      	pop	{r7, pc}

080278ae <rsaFreePublicKey>:
 * @brief Release an RSA public key
 * @param[in] key Pointer to the RSA public key to free
 **/

void rsaFreePublicKey(RsaPublicKey *key)
{
 80278ae:	b580      	push	{r7, lr}
 80278b0:	b082      	sub	sp, #8
 80278b2:	af00      	add	r7, sp, #0
 80278b4:	6078      	str	r0, [r7, #4]
   //Free multiple precision integers
   mpiFree(&key->n);
 80278b6:	687b      	ldr	r3, [r7, #4]
 80278b8:	4618      	mov	r0, r3
 80278ba:	f7fe fb74 	bl	8025fa6 <mpiFree>
   mpiFree(&key->e);
 80278be:	687b      	ldr	r3, [r7, #4]
 80278c0:	330c      	adds	r3, #12
 80278c2:	4618      	mov	r0, r3
 80278c4:	f7fe fb6f 	bl	8025fa6 <mpiFree>
}
 80278c8:	bf00      	nop
 80278ca:	3708      	adds	r7, #8
 80278cc:	46bd      	mov	sp, r7
 80278ce:	bd80      	pop	{r7, pc}

080278d0 <rsassaPkcs1v15Verify>:
 * @return Error code
 **/

error_t rsassaPkcs1v15Verify(const RsaPublicKey *key, const HashAlgo *hash,
   const uint8_t *digest, const uint8_t *signature, size_t signatureLen)
{
 80278d0:	b580      	push	{r7, lr}
 80278d2:	b08e      	sub	sp, #56	@ 0x38
 80278d4:	af00      	add	r7, sp, #0
 80278d6:	60f8      	str	r0, [r7, #12]
 80278d8:	60b9      	str	r1, [r7, #8]
 80278da:	607a      	str	r2, [r7, #4]
 80278dc:	603b      	str	r3, [r7, #0]
#else
   uint8_t em[RSA_MAX_MODULUS_SIZE / 8];
#endif

   //Check parameters
   if(key == NULL || hash == NULL || digest == NULL || signature == NULL)
 80278de:	68fb      	ldr	r3, [r7, #12]
 80278e0:	2b00      	cmp	r3, #0
 80278e2:	d008      	beq.n	80278f6 <rsassaPkcs1v15Verify+0x26>
 80278e4:	68bb      	ldr	r3, [r7, #8]
 80278e6:	2b00      	cmp	r3, #0
 80278e8:	d005      	beq.n	80278f6 <rsassaPkcs1v15Verify+0x26>
 80278ea:	687b      	ldr	r3, [r7, #4]
 80278ec:	2b00      	cmp	r3, #0
 80278ee:	d002      	beq.n	80278f6 <rsassaPkcs1v15Verify+0x26>
 80278f0:	683b      	ldr	r3, [r7, #0]
 80278f2:	2b00      	cmp	r3, #0
 80278f4:	d101      	bne.n	80278fa <rsassaPkcs1v15Verify+0x2a>
      return ERROR_INVALID_PARAMETER;
 80278f6:	2302      	movs	r3, #2
 80278f8:	e06a      	b.n	80279d0 <rsassaPkcs1v15Verify+0x100>
   TRACE_DEBUG_ARRAY("    ", digest, hash->digestSize);
   TRACE_DEBUG("  Signature:\r\n");
   TRACE_DEBUG_ARRAY("    ", signature, signatureLen);

   //Initialize multiple-precision integers
   mpiInit(&s);
 80278fa:	f107 0320 	add.w	r3, r7, #32
 80278fe:	4618      	mov	r0, r3
 8027900:	f7fe fb3e 	bl	8025f80 <mpiInit>
   mpiInit(&m);
 8027904:	f107 0314 	add.w	r3, r7, #20
 8027908:	4618      	mov	r0, r3
 802790a:	f7fe fb39 	bl	8025f80 <mpiInit>

   //Get the length in octets of the modulus n
   k = mpiGetByteLength(&key->n);
 802790e:	68fb      	ldr	r3, [r7, #12]
 8027910:	4618      	mov	r0, r3
 8027912:	f7fe fbf7 	bl	8026104 <mpiGetByteLength>
 8027916:	6338      	str	r0, [r7, #48]	@ 0x30

   //Make sure the modulus is valid
   if(k == 0)
 8027918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802791a:	2b00      	cmp	r3, #0
 802791c:	d101      	bne.n	8027922 <rsassaPkcs1v15Verify+0x52>
      return ERROR_INVALID_PARAMETER;
 802791e:	2302      	movs	r3, #2
 8027920:	e056      	b.n	80279d0 <rsassaPkcs1v15Verify+0x100>

   //Check the length of the signature
   if(signatureLen != k)
 8027922:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8027924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027926:	429a      	cmp	r2, r3
 8027928:	d002      	beq.n	8027930 <rsassaPkcs1v15Verify+0x60>
      return ERROR_INVALID_SIGNATURE;
 802792a:	f240 230e 	movw	r3, #526	@ 0x20e
 802792e:	e04f      	b.n	80279d0 <rsassaPkcs1v15Verify+0x100>

#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   //Allocate a buffer to store the encoded message EM
   em = cryptoAllocMem(k);
 8027930:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8027932:	f7f9 fd5a 	bl	80213ea <osAllocMem>
 8027936:	62f8      	str	r0, [r7, #44]	@ 0x2c
   //Failed to allocate memory?
   if(em == NULL)
 8027938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802793a:	2b00      	cmp	r3, #0
 802793c:	d101      	bne.n	8027942 <rsassaPkcs1v15Verify+0x72>
      return ERROR_OUT_OF_MEMORY;
 802793e:	2364      	movs	r3, #100	@ 0x64
 8027940:	e046      	b.n	80279d0 <rsassaPkcs1v15Verify+0x100>

   //Start of exception handling block
   do
   {
      //Convert the signature to an integer signature representative s
      error = mpiImport(&s, signature, signatureLen, MPI_FORMAT_BIG_ENDIAN);
 8027942:	f107 0020 	add.w	r0, r7, #32
 8027946:	2301      	movs	r3, #1
 8027948:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802794a:	6839      	ldr	r1, [r7, #0]
 802794c:	f7fe fdc8 	bl	80264e0 <mpiImport>
 8027950:	4603      	mov	r3, r0
 8027952:	86fb      	strh	r3, [r7, #54]	@ 0x36
      //Conversion failed?
      if(error)
 8027954:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8027956:	2b00      	cmp	r3, #0
 8027958:	d127      	bne.n	80279aa <rsassaPkcs1v15Verify+0xda>
         break;

      //Apply the RSAVP1 verification primitive
      error = rsavp1(key, &s, &m);
 802795a:	f107 0214 	add.w	r2, r7, #20
 802795e:	f107 0320 	add.w	r3, r7, #32
 8027962:	4619      	mov	r1, r3
 8027964:	68f8      	ldr	r0, [r7, #12]
 8027966:	f000 f866 	bl	8027a36 <rsavp1>
 802796a:	4603      	mov	r3, r0
 802796c:	86fb      	strh	r3, [r7, #54]	@ 0x36
      //Any error to report?
      if(error)
 802796e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8027970:	2b00      	cmp	r3, #0
 8027972:	d11c      	bne.n	80279ae <rsassaPkcs1v15Verify+0xde>
         break;

      //Convert the message representative m to an encoded message EM of
      //length k octets
      error = mpiExport(&m, em, k, MPI_FORMAT_BIG_ENDIAN);
 8027974:	f107 0014 	add.w	r0, r7, #20
 8027978:	2301      	movs	r3, #1
 802797a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802797c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802797e:	f7fe fe75 	bl	802666c <mpiExport>
 8027982:	4603      	mov	r3, r0
 8027984:	86fb      	strh	r3, [r7, #54]	@ 0x36
      //Conversion failed?
      if(error)
 8027986:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8027988:	2b00      	cmp	r3, #0
 802798a:	d112      	bne.n	80279b2 <rsassaPkcs1v15Verify+0xe2>
      //Debug message
      TRACE_DEBUG("  Encoded message:\r\n");
      TRACE_DEBUG_ARRAY("    ", em, k);

      //Verify the encoded message EM
      error = emsaPkcs1v15Verify(hash, digest, em, k);
 802798c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802798e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8027990:	6879      	ldr	r1, [r7, #4]
 8027992:	68b8      	ldr	r0, [r7, #8]
 8027994:	f000 f85f 	bl	8027a56 <emsaPkcs1v15Verify>
 8027998:	4603      	mov	r3, r0
 802799a:	86fb      	strh	r3, [r7, #54]	@ 0x36
      //Any error to report?
      if(error)
 802799c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 802799e:	2b00      	cmp	r3, #0
 80279a0:	d008      	beq.n	80279b4 <rsassaPkcs1v15Verify+0xe4>
      {
         //The signature is not valid
         error = ERROR_INVALID_SIGNATURE;
 80279a2:	f240 230e 	movw	r3, #526	@ 0x20e
 80279a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
         break;
 80279a8:	e004      	b.n	80279b4 <rsassaPkcs1v15Verify+0xe4>
         break;
 80279aa:	bf00      	nop
 80279ac:	e002      	b.n	80279b4 <rsassaPkcs1v15Verify+0xe4>
         break;
 80279ae:	bf00      	nop
 80279b0:	e000      	b.n	80279b4 <rsassaPkcs1v15Verify+0xe4>
         break;
 80279b2:	bf00      	nop
      //End of exception handling block
   } while(0);

#if (CRYPTO_STATIC_MEM_SUPPORT == DISABLED)
   //Release the encoded message
   cryptoFreeMem(em);
 80279b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80279b6:	f7f9 fd26 	bl	8021406 <osFreeMem>
#endif

   //Release multiple precision integers
   mpiFree(&s);
 80279ba:	f107 0320 	add.w	r3, r7, #32
 80279be:	4618      	mov	r0, r3
 80279c0:	f7fe faf1 	bl	8025fa6 <mpiFree>
   mpiFree(&m);
 80279c4:	f107 0314 	add.w	r3, r7, #20
 80279c8:	4618      	mov	r0, r3
 80279ca:	f7fe faec 	bl	8025fa6 <mpiFree>

   //Return status code
   return error;
 80279ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 80279d0:	4618      	mov	r0, r3
 80279d2:	3738      	adds	r7, #56	@ 0x38
 80279d4:	46bd      	mov	sp, r7
 80279d6:	bd80      	pop	{r7, pc}

080279d8 <rsaep>:
 * @param[out] c Ciphertext representative
 * @return Error code
 **/

__weak_func error_t rsaep(const RsaPublicKey *key, const Mpi *m, Mpi *c)
{
 80279d8:	b580      	push	{r7, lr}
 80279da:	b084      	sub	sp, #16
 80279dc:	af00      	add	r7, sp, #0
 80279de:	60f8      	str	r0, [r7, #12]
 80279e0:	60b9      	str	r1, [r7, #8]
 80279e2:	607a      	str	r2, [r7, #4]
   //Ensure the RSA public key is valid
   if(!key->n.size || !key->e.size)
 80279e4:	68fb      	ldr	r3, [r7, #12]
 80279e6:	685b      	ldr	r3, [r3, #4]
 80279e8:	2b00      	cmp	r3, #0
 80279ea:	d003      	beq.n	80279f4 <rsaep+0x1c>
 80279ec:	68fb      	ldr	r3, [r7, #12]
 80279ee:	691b      	ldr	r3, [r3, #16]
 80279f0:	2b00      	cmp	r3, #0
 80279f2:	d101      	bne.n	80279f8 <rsaep+0x20>
      return ERROR_INVALID_PARAMETER;
 80279f4:	2302      	movs	r3, #2
 80279f6:	e01a      	b.n	8027a2e <rsaep+0x56>

   //The message representative m shall be between 0 and n - 1
   if(mpiCompInt(m, 0) < 0 || mpiComp(m, &key->n) >= 0)
 80279f8:	2100      	movs	r1, #0
 80279fa:	68b8      	ldr	r0, [r7, #8]
 80279fc:	f7fe fc80 	bl	8026300 <mpiCompInt>
 8027a00:	4603      	mov	r3, r0
 8027a02:	2b00      	cmp	r3, #0
 8027a04:	db07      	blt.n	8027a16 <rsaep+0x3e>
 8027a06:	68fb      	ldr	r3, [r7, #12]
 8027a08:	4619      	mov	r1, r3
 8027a0a:	68b8      	ldr	r0, [r7, #8]
 8027a0c:	f7fe fc12 	bl	8026234 <mpiComp>
 8027a10:	4603      	mov	r3, r0
 8027a12:	2b00      	cmp	r3, #0
 8027a14:	db02      	blt.n	8027a1c <rsaep+0x44>
      return ERROR_OUT_OF_RANGE;
 8027a16:	f240 1307 	movw	r3, #263	@ 0x107
 8027a1a:	e008      	b.n	8027a2e <rsaep+0x56>

   //Perform modular exponentiation (c = m ^ e mod n)
   return mpiExpModFast(c, m, &key->e, &key->n);
 8027a1c:	68fb      	ldr	r3, [r7, #12]
 8027a1e:	f103 020c 	add.w	r2, r3, #12
 8027a22:	68fb      	ldr	r3, [r7, #12]
 8027a24:	68b9      	ldr	r1, [r7, #8]
 8027a26:	6878      	ldr	r0, [r7, #4]
 8027a28:	f7ff fdc0 	bl	80275ac <mpiExpModFast>
 8027a2c:	4603      	mov	r3, r0
}
 8027a2e:	4618      	mov	r0, r3
 8027a30:	3710      	adds	r7, #16
 8027a32:	46bd      	mov	sp, r7
 8027a34:	bd80      	pop	{r7, pc}

08027a36 <rsavp1>:
 * @param[out] m Message representative
 * @return Error code
 **/

error_t rsavp1(const RsaPublicKey *key, const Mpi *s, Mpi *m)
{
 8027a36:	b580      	push	{r7, lr}
 8027a38:	b084      	sub	sp, #16
 8027a3a:	af00      	add	r7, sp, #0
 8027a3c:	60f8      	str	r0, [r7, #12]
 8027a3e:	60b9      	str	r1, [r7, #8]
 8027a40:	607a      	str	r2, [r7, #4]
   //RSAVP1 primitive is the same as RSAEP except for the names of its input
   //and output arguments. They are distinguished as they are intended for
   //different purposes
   return rsaep(key, s, m);
 8027a42:	687a      	ldr	r2, [r7, #4]
 8027a44:	68b9      	ldr	r1, [r7, #8]
 8027a46:	68f8      	ldr	r0, [r7, #12]
 8027a48:	f7ff ffc6 	bl	80279d8 <rsaep>
 8027a4c:	4603      	mov	r3, r0
}
 8027a4e:	4618      	mov	r0, r3
 8027a50:	3710      	adds	r7, #16
 8027a52:	46bd      	mov	sp, r7
 8027a54:	bd80      	pop	{r7, pc}

08027a56 <emsaPkcs1v15Verify>:
 * @return Error code
 **/

error_t emsaPkcs1v15Verify(const HashAlgo *hash, const uint8_t *digest,
   const uint8_t *em, size_t emLen)
{
 8027a56:	b480      	push	{r7}
 8027a58:	b089      	sub	sp, #36	@ 0x24
 8027a5a:	af00      	add	r7, sp, #0
 8027a5c:	60f8      	str	r0, [r7, #12]
 8027a5e:	60b9      	str	r1, [r7, #8]
 8027a60:	607a      	str	r2, [r7, #4]
 8027a62:	603b      	str	r3, [r7, #0]
   size_t j;
   size_t n;
   uint8_t bad;

   //Check the length of the encoded message
   if(emLen < (hash->oidSize + hash->digestSize + 21))
 8027a64:	68fb      	ldr	r3, [r7, #12]
 8027a66:	689a      	ldr	r2, [r3, #8]
 8027a68:	68fb      	ldr	r3, [r7, #12]
 8027a6a:	695b      	ldr	r3, [r3, #20]
 8027a6c:	4413      	add	r3, r2
 8027a6e:	3315      	adds	r3, #21
 8027a70:	683a      	ldr	r2, [r7, #0]
 8027a72:	429a      	cmp	r2, r3
 8027a74:	d201      	bcs.n	8027a7a <emsaPkcs1v15Verify+0x24>
      return ERROR_INVALID_LENGTH;
 8027a76:	23ec      	movs	r3, #236	@ 0xec
 8027a78:	e123      	b.n	8027cc2 <emsaPkcs1v15Verify+0x26c>

   //Point to the first byte of the encoded message
   i = 0;
 8027a7a:	2300      	movs	r3, #0
 8027a7c:	61fb      	str	r3, [r7, #28]

   //The first octet of EM must have hexadecimal value 0x00
   bad = em[i++];
 8027a7e:	69fb      	ldr	r3, [r7, #28]
 8027a80:	1c5a      	adds	r2, r3, #1
 8027a82:	61fa      	str	r2, [r7, #28]
 8027a84:	687a      	ldr	r2, [r7, #4]
 8027a86:	4413      	add	r3, r2
 8027a88:	781b      	ldrb	r3, [r3, #0]
 8027a8a:	75fb      	strb	r3, [r7, #23]
   //The second octet of EM must have hexadecimal value 0x01
   bad |= em[i++] ^ 0x01;
 8027a8c:	69fb      	ldr	r3, [r7, #28]
 8027a8e:	1c5a      	adds	r2, r3, #1
 8027a90:	61fa      	str	r2, [r7, #28]
 8027a92:	687a      	ldr	r2, [r7, #4]
 8027a94:	4413      	add	r3, r2
 8027a96:	781b      	ldrb	r3, [r3, #0]
 8027a98:	f083 0301 	eor.w	r3, r3, #1
 8027a9c:	b2db      	uxtb	r3, r3
 8027a9e:	b25a      	sxtb	r2, r3
 8027aa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8027aa4:	4313      	orrs	r3, r2
 8027aa6:	b25b      	sxtb	r3, r3
 8027aa8:	75fb      	strb	r3, [r7, #23]

   //Determine the length of the padding string PS
   n = emLen - hash->oidSize - hash->digestSize - 13;
 8027aaa:	68fb      	ldr	r3, [r7, #12]
 8027aac:	689b      	ldr	r3, [r3, #8]
 8027aae:	683a      	ldr	r2, [r7, #0]
 8027ab0:	1ad2      	subs	r2, r2, r3
 8027ab2:	68fb      	ldr	r3, [r7, #12]
 8027ab4:	695b      	ldr	r3, [r3, #20]
 8027ab6:	1ad3      	subs	r3, r2, r3
 8027ab8:	3b0d      	subs	r3, #13
 8027aba:	613b      	str	r3, [r7, #16]

   //Each byte of PS must be set to 0xFF when the block type is 0x01
   for(j = 0; j < n; j++)
 8027abc:	2300      	movs	r3, #0
 8027abe:	61bb      	str	r3, [r7, #24]
 8027ac0:	e010      	b.n	8027ae4 <emsaPkcs1v15Verify+0x8e>
   {
      bad |= em[i++] ^ 0xFF;
 8027ac2:	69fb      	ldr	r3, [r7, #28]
 8027ac4:	1c5a      	adds	r2, r3, #1
 8027ac6:	61fa      	str	r2, [r7, #28]
 8027ac8:	687a      	ldr	r2, [r7, #4]
 8027aca:	4413      	add	r3, r2
 8027acc:	781b      	ldrb	r3, [r3, #0]
 8027ace:	43db      	mvns	r3, r3
 8027ad0:	b2db      	uxtb	r3, r3
 8027ad2:	b25a      	sxtb	r2, r3
 8027ad4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8027ad8:	4313      	orrs	r3, r2
 8027ada:	b25b      	sxtb	r3, r3
 8027adc:	75fb      	strb	r3, [r7, #23]
   for(j = 0; j < n; j++)
 8027ade:	69bb      	ldr	r3, [r7, #24]
 8027ae0:	3301      	adds	r3, #1
 8027ae2:	61bb      	str	r3, [r7, #24]
 8027ae4:	69ba      	ldr	r2, [r7, #24]
 8027ae6:	693b      	ldr	r3, [r7, #16]
 8027ae8:	429a      	cmp	r2, r3
 8027aea:	d3ea      	bcc.n	8027ac2 <emsaPkcs1v15Verify+0x6c>
   }

   //The padding string must be followed by a 0x00 octet
   bad |= em[i++];
 8027aec:	69fb      	ldr	r3, [r7, #28]
 8027aee:	1c5a      	adds	r2, r3, #1
 8027af0:	61fa      	str	r2, [r7, #28]
 8027af2:	687a      	ldr	r2, [r7, #4]
 8027af4:	4413      	add	r3, r2
 8027af6:	781a      	ldrb	r2, [r3, #0]
 8027af8:	7dfb      	ldrb	r3, [r7, #23]
 8027afa:	4313      	orrs	r3, r2
 8027afc:	75fb      	strb	r3, [r7, #23]

   //Check the ASN.1 syntax of the DigestInfo structure
   bad |= em[i++] ^ (uint8_t) (ASN1_ENCODING_CONSTRUCTED | ASN1_TYPE_SEQUENCE);
 8027afe:	69fb      	ldr	r3, [r7, #28]
 8027b00:	1c5a      	adds	r2, r3, #1
 8027b02:	61fa      	str	r2, [r7, #28]
 8027b04:	687a      	ldr	r2, [r7, #4]
 8027b06:	4413      	add	r3, r2
 8027b08:	781b      	ldrb	r3, [r3, #0]
 8027b0a:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8027b0e:	b2db      	uxtb	r3, r3
 8027b10:	b25a      	sxtb	r2, r3
 8027b12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8027b16:	4313      	orrs	r3, r2
 8027b18:	b25b      	sxtb	r3, r3
 8027b1a:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) (hash->oidSize + hash->digestSize + 8);
 8027b1c:	69fb      	ldr	r3, [r7, #28]
 8027b1e:	1c5a      	adds	r2, r3, #1
 8027b20:	61fa      	str	r2, [r7, #28]
 8027b22:	687a      	ldr	r2, [r7, #4]
 8027b24:	4413      	add	r3, r2
 8027b26:	781a      	ldrb	r2, [r3, #0]
 8027b28:	68fb      	ldr	r3, [r7, #12]
 8027b2a:	689b      	ldr	r3, [r3, #8]
 8027b2c:	b2d9      	uxtb	r1, r3
 8027b2e:	68fb      	ldr	r3, [r7, #12]
 8027b30:	695b      	ldr	r3, [r3, #20]
 8027b32:	b2db      	uxtb	r3, r3
 8027b34:	440b      	add	r3, r1
 8027b36:	b2db      	uxtb	r3, r3
 8027b38:	3308      	adds	r3, #8
 8027b3a:	b2db      	uxtb	r3, r3
 8027b3c:	4053      	eors	r3, r2
 8027b3e:	b2db      	uxtb	r3, r3
 8027b40:	b25a      	sxtb	r2, r3
 8027b42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8027b46:	4313      	orrs	r3, r2
 8027b48:	b25b      	sxtb	r3, r3
 8027b4a:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) (ASN1_ENCODING_CONSTRUCTED | ASN1_TYPE_SEQUENCE);
 8027b4c:	69fb      	ldr	r3, [r7, #28]
 8027b4e:	1c5a      	adds	r2, r3, #1
 8027b50:	61fa      	str	r2, [r7, #28]
 8027b52:	687a      	ldr	r2, [r7, #4]
 8027b54:	4413      	add	r3, r2
 8027b56:	781b      	ldrb	r3, [r3, #0]
 8027b58:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8027b5c:	b2db      	uxtb	r3, r3
 8027b5e:	b25a      	sxtb	r2, r3
 8027b60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8027b64:	4313      	orrs	r3, r2
 8027b66:	b25b      	sxtb	r3, r3
 8027b68:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) (hash->oidSize + 4);
 8027b6a:	69fb      	ldr	r3, [r7, #28]
 8027b6c:	1c5a      	adds	r2, r3, #1
 8027b6e:	61fa      	str	r2, [r7, #28]
 8027b70:	687a      	ldr	r2, [r7, #4]
 8027b72:	4413      	add	r3, r2
 8027b74:	781a      	ldrb	r2, [r3, #0]
 8027b76:	68fb      	ldr	r3, [r7, #12]
 8027b78:	689b      	ldr	r3, [r3, #8]
 8027b7a:	b2db      	uxtb	r3, r3
 8027b7c:	3304      	adds	r3, #4
 8027b7e:	b2db      	uxtb	r3, r3
 8027b80:	4053      	eors	r3, r2
 8027b82:	b2db      	uxtb	r3, r3
 8027b84:	b25a      	sxtb	r2, r3
 8027b86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8027b8a:	4313      	orrs	r3, r2
 8027b8c:	b25b      	sxtb	r3, r3
 8027b8e:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) ASN1_TYPE_OBJECT_IDENTIFIER;
 8027b90:	69fb      	ldr	r3, [r7, #28]
 8027b92:	1c5a      	adds	r2, r3, #1
 8027b94:	61fa      	str	r2, [r7, #28]
 8027b96:	687a      	ldr	r2, [r7, #4]
 8027b98:	4413      	add	r3, r2
 8027b9a:	781b      	ldrb	r3, [r3, #0]
 8027b9c:	f083 0306 	eor.w	r3, r3, #6
 8027ba0:	b2db      	uxtb	r3, r3
 8027ba2:	b25a      	sxtb	r2, r3
 8027ba4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8027ba8:	4313      	orrs	r3, r2
 8027baa:	b25b      	sxtb	r3, r3
 8027bac:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) hash->oidSize;
 8027bae:	69fb      	ldr	r3, [r7, #28]
 8027bb0:	1c5a      	adds	r2, r3, #1
 8027bb2:	61fa      	str	r2, [r7, #28]
 8027bb4:	687a      	ldr	r2, [r7, #4]
 8027bb6:	4413      	add	r3, r2
 8027bb8:	781a      	ldrb	r2, [r3, #0]
 8027bba:	68fb      	ldr	r3, [r7, #12]
 8027bbc:	689b      	ldr	r3, [r3, #8]
 8027bbe:	b2db      	uxtb	r3, r3
 8027bc0:	4053      	eors	r3, r2
 8027bc2:	b2db      	uxtb	r3, r3
 8027bc4:	b25a      	sxtb	r2, r3
 8027bc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8027bca:	4313      	orrs	r3, r2
 8027bcc:	b25b      	sxtb	r3, r3
 8027bce:	75fb      	strb	r3, [r7, #23]

   //Verify the hash algorithm OID
   for(j = 0; j < hash->oidSize; j++)
 8027bd0:	2300      	movs	r3, #0
 8027bd2:	61bb      	str	r3, [r7, #24]
 8027bd4:	e015      	b.n	8027c02 <emsaPkcs1v15Verify+0x1ac>
   {
      bad |= em[i++] ^ hash->oid[j];
 8027bd6:	69fb      	ldr	r3, [r7, #28]
 8027bd8:	1c5a      	adds	r2, r3, #1
 8027bda:	61fa      	str	r2, [r7, #28]
 8027bdc:	687a      	ldr	r2, [r7, #4]
 8027bde:	4413      	add	r3, r2
 8027be0:	781a      	ldrb	r2, [r3, #0]
 8027be2:	68fb      	ldr	r3, [r7, #12]
 8027be4:	6859      	ldr	r1, [r3, #4]
 8027be6:	69bb      	ldr	r3, [r7, #24]
 8027be8:	440b      	add	r3, r1
 8027bea:	781b      	ldrb	r3, [r3, #0]
 8027bec:	4053      	eors	r3, r2
 8027bee:	b2db      	uxtb	r3, r3
 8027bf0:	b25a      	sxtb	r2, r3
 8027bf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8027bf6:	4313      	orrs	r3, r2
 8027bf8:	b25b      	sxtb	r3, r3
 8027bfa:	75fb      	strb	r3, [r7, #23]
   for(j = 0; j < hash->oidSize; j++)
 8027bfc:	69bb      	ldr	r3, [r7, #24]
 8027bfe:	3301      	adds	r3, #1
 8027c00:	61bb      	str	r3, [r7, #24]
 8027c02:	68fb      	ldr	r3, [r7, #12]
 8027c04:	689b      	ldr	r3, [r3, #8]
 8027c06:	69ba      	ldr	r2, [r7, #24]
 8027c08:	429a      	cmp	r2, r3
 8027c0a:	d3e4      	bcc.n	8027bd6 <emsaPkcs1v15Verify+0x180>
   }

   //Check the rest of the ASN.1 structure
   bad |= em[i++] ^ (uint8_t) ASN1_TYPE_NULL;
 8027c0c:	69fb      	ldr	r3, [r7, #28]
 8027c0e:	1c5a      	adds	r2, r3, #1
 8027c10:	61fa      	str	r2, [r7, #28]
 8027c12:	687a      	ldr	r2, [r7, #4]
 8027c14:	4413      	add	r3, r2
 8027c16:	781b      	ldrb	r3, [r3, #0]
 8027c18:	f083 0305 	eor.w	r3, r3, #5
 8027c1c:	b2db      	uxtb	r3, r3
 8027c1e:	b25a      	sxtb	r2, r3
 8027c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8027c24:	4313      	orrs	r3, r2
 8027c26:	b25b      	sxtb	r3, r3
 8027c28:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++];
 8027c2a:	69fb      	ldr	r3, [r7, #28]
 8027c2c:	1c5a      	adds	r2, r3, #1
 8027c2e:	61fa      	str	r2, [r7, #28]
 8027c30:	687a      	ldr	r2, [r7, #4]
 8027c32:	4413      	add	r3, r2
 8027c34:	781a      	ldrb	r2, [r3, #0]
 8027c36:	7dfb      	ldrb	r3, [r7, #23]
 8027c38:	4313      	orrs	r3, r2
 8027c3a:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) ASN1_TYPE_OCTET_STRING;
 8027c3c:	69fb      	ldr	r3, [r7, #28]
 8027c3e:	1c5a      	adds	r2, r3, #1
 8027c40:	61fa      	str	r2, [r7, #28]
 8027c42:	687a      	ldr	r2, [r7, #4]
 8027c44:	4413      	add	r3, r2
 8027c46:	781b      	ldrb	r3, [r3, #0]
 8027c48:	f083 0304 	eor.w	r3, r3, #4
 8027c4c:	b2db      	uxtb	r3, r3
 8027c4e:	b25a      	sxtb	r2, r3
 8027c50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8027c54:	4313      	orrs	r3, r2
 8027c56:	b25b      	sxtb	r3, r3
 8027c58:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) hash->digestSize;
 8027c5a:	69fb      	ldr	r3, [r7, #28]
 8027c5c:	1c5a      	adds	r2, r3, #1
 8027c5e:	61fa      	str	r2, [r7, #28]
 8027c60:	687a      	ldr	r2, [r7, #4]
 8027c62:	4413      	add	r3, r2
 8027c64:	781a      	ldrb	r2, [r3, #0]
 8027c66:	68fb      	ldr	r3, [r7, #12]
 8027c68:	695b      	ldr	r3, [r3, #20]
 8027c6a:	b2db      	uxtb	r3, r3
 8027c6c:	4053      	eors	r3, r2
 8027c6e:	b2db      	uxtb	r3, r3
 8027c70:	b25a      	sxtb	r2, r3
 8027c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8027c76:	4313      	orrs	r3, r2
 8027c78:	b25b      	sxtb	r3, r3
 8027c7a:	75fb      	strb	r3, [r7, #23]

   //Recover the underlying hash value, and then compare it to the newly
   //computed hash value
   for(j = 0; j < hash->digestSize; j++)
 8027c7c:	2300      	movs	r3, #0
 8027c7e:	61bb      	str	r3, [r7, #24]
 8027c80:	e014      	b.n	8027cac <emsaPkcs1v15Verify+0x256>
   {
      bad |= em[i++] ^ digest[j];
 8027c82:	69fb      	ldr	r3, [r7, #28]
 8027c84:	1c5a      	adds	r2, r3, #1
 8027c86:	61fa      	str	r2, [r7, #28]
 8027c88:	687a      	ldr	r2, [r7, #4]
 8027c8a:	4413      	add	r3, r2
 8027c8c:	781a      	ldrb	r2, [r3, #0]
 8027c8e:	68b9      	ldr	r1, [r7, #8]
 8027c90:	69bb      	ldr	r3, [r7, #24]
 8027c92:	440b      	add	r3, r1
 8027c94:	781b      	ldrb	r3, [r3, #0]
 8027c96:	4053      	eors	r3, r2
 8027c98:	b2db      	uxtb	r3, r3
 8027c9a:	b25a      	sxtb	r2, r3
 8027c9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8027ca0:	4313      	orrs	r3, r2
 8027ca2:	b25b      	sxtb	r3, r3
 8027ca4:	75fb      	strb	r3, [r7, #23]
   for(j = 0; j < hash->digestSize; j++)
 8027ca6:	69bb      	ldr	r3, [r7, #24]
 8027ca8:	3301      	adds	r3, #1
 8027caa:	61bb      	str	r3, [r7, #24]
 8027cac:	68fb      	ldr	r3, [r7, #12]
 8027cae:	695b      	ldr	r3, [r3, #20]
 8027cb0:	69ba      	ldr	r2, [r7, #24]
 8027cb2:	429a      	cmp	r2, r3
 8027cb4:	d3e5      	bcc.n	8027c82 <emsaPkcs1v15Verify+0x22c>
   }

   //Verification result
   return (bad != 0) ? ERROR_INCONSISTENT_VALUE : NO_ERROR;
 8027cb6:	7dfb      	ldrb	r3, [r7, #23]
 8027cb8:	2b00      	cmp	r3, #0
 8027cba:	d001      	beq.n	8027cc0 <emsaPkcs1v15Verify+0x26a>
 8027cbc:	23f9      	movs	r3, #249	@ 0xf9
 8027cbe:	e000      	b.n	8027cc2 <emsaPkcs1v15Verify+0x26c>
 8027cc0:	2300      	movs	r3, #0
}
 8027cc2:	4618      	mov	r0, r3
 8027cc4:	3724      	adds	r7, #36	@ 0x24
 8027cc6:	46bd      	mov	sp, r7
 8027cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ccc:	4770      	bx	lr
	...

08027cd0 <pemDecodeFile>:
 *   (optional parameter)
 **/

error_t pemDecodeFile(const char_t *input, size_t inputLen, const char_t *label,
   uint8_t *output, size_t *outputLen, PemHeader *header, size_t *consumed)
{
 8027cd0:	b590      	push	{r4, r7, lr}
 8027cd2:	b08b      	sub	sp, #44	@ 0x2c
 8027cd4:	af02      	add	r7, sp, #8
 8027cd6:	60f8      	str	r0, [r7, #12]
 8027cd8:	60b9      	str	r1, [r7, #8]
 8027cda:	607a      	str	r2, [r7, #4]
 8027cdc:	603b      	str	r3, [r7, #0]
   int_t i;
   int_t j;
   size_t n;

   //Check parameters
   if(input == NULL || label == NULL || outputLen == NULL)
 8027cde:	68fb      	ldr	r3, [r7, #12]
 8027ce0:	2b00      	cmp	r3, #0
 8027ce2:	d005      	beq.n	8027cf0 <pemDecodeFile+0x20>
 8027ce4:	687b      	ldr	r3, [r7, #4]
 8027ce6:	2b00      	cmp	r3, #0
 8027ce8:	d002      	beq.n	8027cf0 <pemDecodeFile+0x20>
 8027cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027cec:	2b00      	cmp	r3, #0
 8027cee:	d101      	bne.n	8027cf4 <pemDecodeFile+0x24>
      return ERROR_INVALID_PARAMETER;
 8027cf0:	2302      	movs	r3, #2
 8027cf2:	e062      	b.n	8027dba <pemDecodeFile+0xea>

   //The PEM container begins with a "-----BEGIN " line
   i = pemFindTag(input, inputLen, "-----BEGIN ", label, "-----");
 8027cf4:	4b33      	ldr	r3, [pc, #204]	@ (8027dc4 <pemDecodeFile+0xf4>)
 8027cf6:	9300      	str	r3, [sp, #0]
 8027cf8:	687b      	ldr	r3, [r7, #4]
 8027cfa:	4a33      	ldr	r2, [pc, #204]	@ (8027dc8 <pemDecodeFile+0xf8>)
 8027cfc:	68b9      	ldr	r1, [r7, #8]
 8027cfe:	68f8      	ldr	r0, [r7, #12]
 8027d00:	f000 f94e 	bl	8027fa0 <pemFindTag>
 8027d04:	61f8      	str	r0, [r7, #28]
   //Pre-encapsulation boundary not found?
   if(i < 0)
 8027d06:	69fb      	ldr	r3, [r7, #28]
 8027d08:	2b00      	cmp	r3, #0
 8027d0a:	da02      	bge.n	8027d12 <pemDecodeFile+0x42>
      return ERROR_END_OF_FILE;
 8027d0c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8027d10:	e053      	b.n	8027dba <pemDecodeFile+0xea>

   //Skip the pre-encapsulation boundary
   i += osStrlen("-----BEGIN -----") + osStrlen(label);
 8027d12:	6878      	ldr	r0, [r7, #4]
 8027d14:	f7f8 fcac 	bl	8020670 <strlen>
 8027d18:	4602      	mov	r2, r0
 8027d1a:	69fb      	ldr	r3, [r7, #28]
 8027d1c:	4413      	add	r3, r2
 8027d1e:	3310      	adds	r3, #16
 8027d20:	61fb      	str	r3, [r7, #28]

   //The PEM container ends with a "-----END " line
   j = pemFindTag(input + i, inputLen - i, "-----END ", label, "-----");
 8027d22:	69fb      	ldr	r3, [r7, #28]
 8027d24:	68fa      	ldr	r2, [r7, #12]
 8027d26:	18d0      	adds	r0, r2, r3
 8027d28:	69fb      	ldr	r3, [r7, #28]
 8027d2a:	68ba      	ldr	r2, [r7, #8]
 8027d2c:	1ad1      	subs	r1, r2, r3
 8027d2e:	4b25      	ldr	r3, [pc, #148]	@ (8027dc4 <pemDecodeFile+0xf4>)
 8027d30:	9300      	str	r3, [sp, #0]
 8027d32:	687b      	ldr	r3, [r7, #4]
 8027d34:	4a25      	ldr	r2, [pc, #148]	@ (8027dcc <pemDecodeFile+0xfc>)
 8027d36:	f000 f933 	bl	8027fa0 <pemFindTag>
 8027d3a:	61b8      	str	r0, [r7, #24]
   //Post-encapsulation boundary not found?
   if(j < 0)
 8027d3c:	69bb      	ldr	r3, [r7, #24]
 8027d3e:	2b00      	cmp	r3, #0
 8027d40:	da01      	bge.n	8027d46 <pemDecodeFile+0x76>
      return ERROR_INVALID_SYNTAX;
 8027d42:	2369      	movs	r3, #105	@ 0x69
 8027d44:	e039      	b.n	8027dba <pemDecodeFile+0xea>

   //Parse PEM encapsulated header
   error = pemParseHeader(input + i, j, header, &n);
 8027d46:	69fb      	ldr	r3, [r7, #28]
 8027d48:	68fa      	ldr	r2, [r7, #12]
 8027d4a:	18d0      	adds	r0, r2, r3
 8027d4c:	69b9      	ldr	r1, [r7, #24]
 8027d4e:	f107 0310 	add.w	r3, r7, #16
 8027d52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8027d54:	f000 f83c 	bl	8027dd0 <pemParseHeader>
 8027d58:	4603      	mov	r3, r0
 8027d5a:	82fb      	strh	r3, [r7, #22]
   //Any error to report?
   if(error)
 8027d5c:	8afb      	ldrh	r3, [r7, #22]
 8027d5e:	2b00      	cmp	r3, #0
 8027d60:	d001      	beq.n	8027d66 <pemDecodeFile+0x96>
      return error;
 8027d62:	8afb      	ldrh	r3, [r7, #22]
 8027d64:	e029      	b.n	8027dba <pemDecodeFile+0xea>

   //The contents of the PEM file is Base64-encoded
   error = base64Decode(input + i + n, j - n, output, outputLen);
 8027d66:	69fa      	ldr	r2, [r7, #28]
 8027d68:	693b      	ldr	r3, [r7, #16]
 8027d6a:	4413      	add	r3, r2
 8027d6c:	68fa      	ldr	r2, [r7, #12]
 8027d6e:	18d0      	adds	r0, r2, r3
 8027d70:	69ba      	ldr	r2, [r7, #24]
 8027d72:	693b      	ldr	r3, [r7, #16]
 8027d74:	1ad1      	subs	r1, r2, r3
 8027d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027d78:	683a      	ldr	r2, [r7, #0]
 8027d7a:	f7fd fc5b 	bl	8025634 <base64Decode>
 8027d7e:	4603      	mov	r3, r0
 8027d80:	82fb      	strh	r3, [r7, #22]
   //Failed to decode the file?
   if(error)
 8027d82:	8afb      	ldrh	r3, [r7, #22]
 8027d84:	2b00      	cmp	r3, #0
 8027d86:	d001      	beq.n	8027d8c <pemDecodeFile+0xbc>
      return error;
 8027d88:	8afb      	ldrh	r3, [r7, #22]
 8027d8a:	e016      	b.n	8027dba <pemDecodeFile+0xea>

   //Sanity check
   if(*outputLen == 0)
 8027d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027d8e:	681b      	ldr	r3, [r3, #0]
 8027d90:	2b00      	cmp	r3, #0
 8027d92:	d101      	bne.n	8027d98 <pemDecodeFile+0xc8>
      return ERROR_INVALID_SYNTAX;
 8027d94:	2369      	movs	r3, #105	@ 0x69
 8027d96:	e010      	b.n	8027dba <pemDecodeFile+0xea>

   //The last parameter is optional
   if(consumed != NULL)
 8027d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d9a:	2b00      	cmp	r3, #0
 8027d9c:	d00c      	beq.n	8027db8 <pemDecodeFile+0xe8>
   {
      //Total number of characters that have been consumed
      *consumed = i + j + osStrlen("-----END -----") + osStrlen(label);
 8027d9e:	69fa      	ldr	r2, [r7, #28]
 8027da0:	69bb      	ldr	r3, [r7, #24]
 8027da2:	4413      	add	r3, r2
 8027da4:	461c      	mov	r4, r3
 8027da6:	6878      	ldr	r0, [r7, #4]
 8027da8:	f7f8 fc62 	bl	8020670 <strlen>
 8027dac:	4603      	mov	r3, r0
 8027dae:	4423      	add	r3, r4
 8027db0:	f103 020e 	add.w	r2, r3, #14
 8027db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027db6:	601a      	str	r2, [r3, #0]
   }

   //Successful processing
   return NO_ERROR;
 8027db8:	2300      	movs	r3, #0
}
 8027dba:	4618      	mov	r0, r3
 8027dbc:	3724      	adds	r7, #36	@ 0x24
 8027dbe:	46bd      	mov	sp, r7
 8027dc0:	bd90      	pop	{r4, r7, pc}
 8027dc2:	bf00      	nop
 8027dc4:	08031608 	.word	0x08031608
 8027dc8:	080315fc 	.word	0x080315fc
 8027dcc:	08031610 	.word	0x08031610

08027dd0 <pemParseHeader>:
 * @return Error code
 **/

error_t pemParseHeader(const char_t *input, size_t inputLen,
   PemHeader *header, size_t *consumed)
{
 8027dd0:	b580      	push	{r7, lr}
 8027dd2:	b088      	sub	sp, #32
 8027dd4:	af00      	add	r7, sp, #0
 8027dd6:	60f8      	str	r0, [r7, #12]
 8027dd8:	60b9      	str	r1, [r7, #8]
 8027dda:	607a      	str	r2, [r7, #4]
 8027ddc:	603b      	str	r3, [r7, #0]
   size_t n;
   const char_t *end;
   PemString line;

   //The header parameter is optional
   if(header != NULL)
 8027dde:	687b      	ldr	r3, [r7, #4]
 8027de0:	2b00      	cmp	r3, #0
 8027de2:	d004      	beq.n	8027dee <pemParseHeader+0x1e>
   {
      //Clear header fields
      osMemset(header, 0, sizeof(PemHeader));
 8027de4:	2220      	movs	r2, #32
 8027de6:	2100      	movs	r1, #0
 8027de8:	6878      	ldr	r0, [r7, #4]
 8027dea:	f008 fadd 	bl	80303a8 <memset>
   }

   //Total number of bytes that have been consumed
   *consumed = 0;
 8027dee:	683b      	ldr	r3, [r7, #0]
 8027df0:	2200      	movs	r2, #0
 8027df2:	601a      	str	r2, [r3, #0]

   //Parse PEM encapsulated header
   while(1)
   {
      //Extract a line from the PEM message body
      end = osMemchr(input, '\n', inputLen);
 8027df4:	68ba      	ldr	r2, [r7, #8]
 8027df6:	210a      	movs	r1, #10
 8027df8:	68f8      	ldr	r0, [r7, #12]
 8027dfa:	f7f8 fbe9 	bl	80205d0 <memchr>
 8027dfe:	61f8      	str	r0, [r7, #28]
      //No end of line character detected?
      if(end == NULL)
 8027e00:	69fb      	ldr	r3, [r7, #28]
 8027e02:	2b00      	cmp	r3, #0
 8027e04:	d034      	beq.n	8027e70 <pemParseHeader+0xa0>
         break;

      //Calculate the length of the line
      n = end - input + 1;
 8027e06:	69fa      	ldr	r2, [r7, #28]
 8027e08:	68fb      	ldr	r3, [r7, #12]
 8027e0a:	1ad3      	subs	r3, r2, r3
 8027e0c:	3301      	adds	r3, #1
 8027e0e:	61bb      	str	r3, [r7, #24]

      //Point to the current line
      line.value = input;
 8027e10:	68fb      	ldr	r3, [r7, #12]
 8027e12:	613b      	str	r3, [r7, #16]
      line.length = n;
 8027e14:	69bb      	ldr	r3, [r7, #24]
 8027e16:	617b      	str	r3, [r7, #20]

      //Removes all leading and trailing whitespace from a string
      pemTrimWhitespace(&line);
 8027e18:	f107 0310 	add.w	r3, r7, #16
 8027e1c:	4618      	mov	r0, r3
 8027e1e:	f000 f9c9 	bl	80281b4 <pemTrimWhitespace>

      //Discard empty lines
      if(!pemCompareString(&line, ""))
 8027e22:	f107 0310 	add.w	r3, r7, #16
 8027e26:	4916      	ldr	r1, [pc, #88]	@ (8027e80 <pemParseHeader+0xb0>)
 8027e28:	4618      	mov	r0, r3
 8027e2a:	f000 f955 	bl	80280d8 <pemCompareString>
 8027e2e:	4603      	mov	r3, r0
 8027e30:	2b00      	cmp	r3, #0
 8027e32:	d10e      	bne.n	8027e52 <pemParseHeader+0x82>
      {
         //Each header field consists of a field name followed by a colon,
         //optional leading whitespace, and the field value
         if(pemFindChar(&line, ':') >= 0)
 8027e34:	f107 0310 	add.w	r3, r7, #16
 8027e38:	213a      	movs	r1, #58	@ 0x3a
 8027e3a:	4618      	mov	r0, r3
 8027e3c:	f000 f92c 	bl	8028098 <pemFindChar>
 8027e40:	4603      	mov	r3, r0
 8027e42:	2b00      	cmp	r3, #0
 8027e44:	db16      	blt.n	8027e74 <pemParseHeader+0xa4>
         {
            //Parse header field
            pemParseHeaderField(&line, header);
 8027e46:	f107 0310 	add.w	r3, r7, #16
 8027e4a:	6879      	ldr	r1, [r7, #4]
 8027e4c:	4618      	mov	r0, r3
 8027e4e:	f000 f819 	bl	8027e84 <pemParseHeaderField>
            break;
         }
      }

      //Point to the next line
      input += n;
 8027e52:	68fa      	ldr	r2, [r7, #12]
 8027e54:	69bb      	ldr	r3, [r7, #24]
 8027e56:	4413      	add	r3, r2
 8027e58:	60fb      	str	r3, [r7, #12]
      inputLen -= n;
 8027e5a:	68ba      	ldr	r2, [r7, #8]
 8027e5c:	69bb      	ldr	r3, [r7, #24]
 8027e5e:	1ad3      	subs	r3, r2, r3
 8027e60:	60bb      	str	r3, [r7, #8]
      *consumed += n;
 8027e62:	683b      	ldr	r3, [r7, #0]
 8027e64:	681a      	ldr	r2, [r3, #0]
 8027e66:	69bb      	ldr	r3, [r7, #24]
 8027e68:	441a      	add	r2, r3
 8027e6a:	683b      	ldr	r3, [r7, #0]
 8027e6c:	601a      	str	r2, [r3, #0]
      end = osMemchr(input, '\n', inputLen);
 8027e6e:	e7c1      	b.n	8027df4 <pemParseHeader+0x24>
         break;
 8027e70:	bf00      	nop
 8027e72:	e000      	b.n	8027e76 <pemParseHeader+0xa6>
            break;
 8027e74:	bf00      	nop
   }

   //Sucessful processing
   return NO_ERROR;
 8027e76:	2300      	movs	r3, #0
}
 8027e78:	4618      	mov	r0, r3
 8027e7a:	3720      	adds	r7, #32
 8027e7c:	46bd      	mov	sp, r7
 8027e7e:	bd80      	pop	{r7, pc}
 8027e80:	08031630 	.word	0x08031630

08027e84 <pemParseHeaderField>:
 * @param[in] line Header field
 * @param[in] header PEM encapsulated header (optional parameter)
 **/

void pemParseHeaderField(PemString *line, PemHeader *header)
{
 8027e84:	b580      	push	{r7, lr}
 8027e86:	b088      	sub	sp, #32
 8027e88:	af00      	add	r7, sp, #0
 8027e8a:	6078      	str	r0, [r7, #4]
 8027e8c:	6039      	str	r1, [r7, #0]
   PemString arg1;
   PemString arg2;

   //Each header field consists of a field name followed by a colon,
   //optional leading whitespace, and the field value
   pemTokenizeString(line, ':', &name);
 8027e8e:	f107 0318 	add.w	r3, r7, #24
 8027e92:	461a      	mov	r2, r3
 8027e94:	213a      	movs	r1, #58	@ 0x3a
 8027e96:	6878      	ldr	r0, [r7, #4]
 8027e98:	f000 f946 	bl	8028128 <pemTokenizeString>

   //Removes all leading and trailing whitespace from the name
   pemTrimWhitespace(&name);
 8027e9c:	f107 0318 	add.w	r3, r7, #24
 8027ea0:	4618      	mov	r0, r3
 8027ea2:	f000 f987 	bl	80281b4 <pemTrimWhitespace>

   //Check header field name
   if(pemCompareString(&name, "Proc-Type"))
 8027ea6:	f107 0318 	add.w	r3, r7, #24
 8027eaa:	493b      	ldr	r1, [pc, #236]	@ (8027f98 <pemParseHeaderField+0x114>)
 8027eac:	4618      	mov	r0, r3
 8027eae:	f000 f913 	bl	80280d8 <pemCompareString>
 8027eb2:	4603      	mov	r3, r0
 8027eb4:	2b00      	cmp	r3, #0
 8027eb6:	d031      	beq.n	8027f1c <pemParseHeaderField+0x98>
   {
      //The "Proc-Type" encapsulated header field, required for all PEM
      //messages, identifies the type of processing performed on the
      //transmitted message (refer to RFC 1421, section 4.6.1.1)
      if(pemTokenizeString(line, ',', &arg1) &&
 8027eb8:	f107 0310 	add.w	r3, r7, #16
 8027ebc:	461a      	mov	r2, r3
 8027ebe:	212c      	movs	r1, #44	@ 0x2c
 8027ec0:	6878      	ldr	r0, [r7, #4]
 8027ec2:	f000 f931 	bl	8028128 <pemTokenizeString>
 8027ec6:	4603      	mov	r3, r0
 8027ec8:	2b00      	cmp	r3, #0
 8027eca:	d061      	beq.n	8027f90 <pemParseHeaderField+0x10c>
         pemTokenizeString(line, ',', &arg2))
 8027ecc:	f107 0308 	add.w	r3, r7, #8
 8027ed0:	461a      	mov	r2, r3
 8027ed2:	212c      	movs	r1, #44	@ 0x2c
 8027ed4:	6878      	ldr	r0, [r7, #4]
 8027ed6:	f000 f927 	bl	8028128 <pemTokenizeString>
 8027eda:	4603      	mov	r3, r0
      if(pemTokenizeString(line, ',', &arg1) &&
 8027edc:	2b00      	cmp	r3, #0
 8027ede:	d057      	beq.n	8027f90 <pemParseHeaderField+0x10c>
      {
         //Removes all leading and trailing whitespace characters
         pemTrimWhitespace(&arg1);
 8027ee0:	f107 0310 	add.w	r3, r7, #16
 8027ee4:	4618      	mov	r0, r3
 8027ee6:	f000 f965 	bl	80281b4 <pemTrimWhitespace>
         pemTrimWhitespace(&arg2);
 8027eea:	f107 0308 	add.w	r3, r7, #8
 8027eee:	4618      	mov	r0, r3
 8027ef0:	f000 f960 	bl	80281b4 <pemTrimWhitespace>

         //Save arguments
         if(header != NULL)
 8027ef4:	683b      	ldr	r3, [r7, #0]
 8027ef6:	2b00      	cmp	r3, #0
 8027ef8:	d04a      	beq.n	8027f90 <pemParseHeaderField+0x10c>
         {
            header->procType.version = arg1;
 8027efa:	683b      	ldr	r3, [r7, #0]
 8027efc:	461a      	mov	r2, r3
 8027efe:	f107 0310 	add.w	r3, r7, #16
 8027f02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8027f06:	e882 0003 	stmia.w	r2, {r0, r1}
            header->procType.type = arg2;
 8027f0a:	683b      	ldr	r3, [r7, #0]
 8027f0c:	3308      	adds	r3, #8
 8027f0e:	f107 0208 	add.w	r2, r7, #8
 8027f12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8027f16:	e883 0003 	stmia.w	r3, {r0, r1}
   }
   else
   {
      //Unknown header field name
   }
}
 8027f1a:	e039      	b.n	8027f90 <pemParseHeaderField+0x10c>
   else if(pemCompareString(&name, "DEK-Info"))
 8027f1c:	f107 0318 	add.w	r3, r7, #24
 8027f20:	491e      	ldr	r1, [pc, #120]	@ (8027f9c <pemParseHeaderField+0x118>)
 8027f22:	4618      	mov	r0, r3
 8027f24:	f000 f8d8 	bl	80280d8 <pemCompareString>
 8027f28:	4603      	mov	r3, r0
 8027f2a:	2b00      	cmp	r3, #0
 8027f2c:	d030      	beq.n	8027f90 <pemParseHeaderField+0x10c>
      if(pemTokenizeString(line, ',', &arg1) &&
 8027f2e:	f107 0310 	add.w	r3, r7, #16
 8027f32:	461a      	mov	r2, r3
 8027f34:	212c      	movs	r1, #44	@ 0x2c
 8027f36:	6878      	ldr	r0, [r7, #4]
 8027f38:	f000 f8f6 	bl	8028128 <pemTokenizeString>
 8027f3c:	4603      	mov	r3, r0
 8027f3e:	2b00      	cmp	r3, #0
 8027f40:	d026      	beq.n	8027f90 <pemParseHeaderField+0x10c>
         pemTokenizeString(line, ',', &arg2))
 8027f42:	f107 0308 	add.w	r3, r7, #8
 8027f46:	461a      	mov	r2, r3
 8027f48:	212c      	movs	r1, #44	@ 0x2c
 8027f4a:	6878      	ldr	r0, [r7, #4]
 8027f4c:	f000 f8ec 	bl	8028128 <pemTokenizeString>
 8027f50:	4603      	mov	r3, r0
      if(pemTokenizeString(line, ',', &arg1) &&
 8027f52:	2b00      	cmp	r3, #0
 8027f54:	d01c      	beq.n	8027f90 <pemParseHeaderField+0x10c>
         pemTrimWhitespace(&arg1);
 8027f56:	f107 0310 	add.w	r3, r7, #16
 8027f5a:	4618      	mov	r0, r3
 8027f5c:	f000 f92a 	bl	80281b4 <pemTrimWhitespace>
         pemTrimWhitespace(&arg2);
 8027f60:	f107 0308 	add.w	r3, r7, #8
 8027f64:	4618      	mov	r0, r3
 8027f66:	f000 f925 	bl	80281b4 <pemTrimWhitespace>
         if(header != NULL)
 8027f6a:	683b      	ldr	r3, [r7, #0]
 8027f6c:	2b00      	cmp	r3, #0
 8027f6e:	d00f      	beq.n	8027f90 <pemParseHeaderField+0x10c>
            header->dekInfo.algo = arg1;
 8027f70:	683b      	ldr	r3, [r7, #0]
 8027f72:	3310      	adds	r3, #16
 8027f74:	f107 0210 	add.w	r2, r7, #16
 8027f78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8027f7c:	e883 0003 	stmia.w	r3, {r0, r1}
            header->dekInfo.iv = arg2;
 8027f80:	683b      	ldr	r3, [r7, #0]
 8027f82:	3318      	adds	r3, #24
 8027f84:	f107 0208 	add.w	r2, r7, #8
 8027f88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8027f8c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8027f90:	bf00      	nop
 8027f92:	3720      	adds	r7, #32
 8027f94:	46bd      	mov	sp, r7
 8027f96:	bd80      	pop	{r7, pc}
 8027f98:	08031634 	.word	0x08031634
 8027f9c:	08031640 	.word	0x08031640

08027fa0 <pemFindTag>:
 *   or -1 if the tag does not appear in the string
 **/

int_t pemFindTag(const char_t *input, size_t inputLen, const char_t *tag1,
   const char_t *tag2, const char_t *tag3)
{
 8027fa0:	b580      	push	{r7, lr}
 8027fa2:	b08a      	sub	sp, #40	@ 0x28
 8027fa4:	af00      	add	r7, sp, #0
 8027fa6:	60f8      	str	r0, [r7, #12]
 8027fa8:	60b9      	str	r1, [r7, #8]
 8027faa:	607a      	str	r2, [r7, #4]
 8027fac:	603b      	str	r3, [r7, #0]
   size_t n2;
   size_t n3;
   int_t index;

   //Initialize index
   index = -1;
 8027fae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027fb2:	61fb      	str	r3, [r7, #28]

   //Calculate the length of the tag
   n1 = osStrlen(tag1);
 8027fb4:	6878      	ldr	r0, [r7, #4]
 8027fb6:	f7f8 fb5b 	bl	8020670 <strlen>
 8027fba:	61b8      	str	r0, [r7, #24]
   n2 = osStrlen(tag2);
 8027fbc:	6838      	ldr	r0, [r7, #0]
 8027fbe:	f7f8 fb57 	bl	8020670 <strlen>
 8027fc2:	6178      	str	r0, [r7, #20]
   n3 = osStrlen(tag3);
 8027fc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8027fc6:	f7f8 fb53 	bl	8020670 <strlen>
 8027fca:	6138      	str	r0, [r7, #16]

   //Parse input string
   for(i = 0; (i + n1 + n2 + n3) <= inputLen; i++)
 8027fcc:	2300      	movs	r3, #0
 8027fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8027fd0:	e053      	b.n	802807a <pemFindTag+0xda>
   {
      //Compare current substring with the given tag
      for(j = 0; j < (n1 + n2 + n3); j++)
 8027fd2:	2300      	movs	r3, #0
 8027fd4:	623b      	str	r3, [r7, #32]
 8027fd6:	e038      	b.n	802804a <pemFindTag+0xaa>
      {
         if(j < n1)
 8027fd8:	6a3a      	ldr	r2, [r7, #32]
 8027fda:	69bb      	ldr	r3, [r7, #24]
 8027fdc:	429a      	cmp	r2, r3
 8027fde:	d20c      	bcs.n	8027ffa <pemFindTag+0x5a>
         {
            if(input[i + j] != tag1[j])
 8027fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8027fe2:	6a3b      	ldr	r3, [r7, #32]
 8027fe4:	4413      	add	r3, r2
 8027fe6:	68fa      	ldr	r2, [r7, #12]
 8027fe8:	4413      	add	r3, r2
 8027fea:	781a      	ldrb	r2, [r3, #0]
 8027fec:	6879      	ldr	r1, [r7, #4]
 8027fee:	6a3b      	ldr	r3, [r7, #32]
 8027ff0:	440b      	add	r3, r1
 8027ff2:	781b      	ldrb	r3, [r3, #0]
 8027ff4:	429a      	cmp	r2, r3
 8027ff6:	d025      	beq.n	8028044 <pemFindTag+0xa4>
               break;
 8027ff8:	e031      	b.n	802805e <pemFindTag+0xbe>
         }
         else if(j < (n1 + n2))
 8027ffa:	69ba      	ldr	r2, [r7, #24]
 8027ffc:	697b      	ldr	r3, [r7, #20]
 8027ffe:	4413      	add	r3, r2
 8028000:	6a3a      	ldr	r2, [r7, #32]
 8028002:	429a      	cmp	r2, r3
 8028004:	d20e      	bcs.n	8028024 <pemFindTag+0x84>
         {
            if(input[i + j] != tag2[j - n1])
 8028006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8028008:	6a3b      	ldr	r3, [r7, #32]
 802800a:	4413      	add	r3, r2
 802800c:	68fa      	ldr	r2, [r7, #12]
 802800e:	4413      	add	r3, r2
 8028010:	781a      	ldrb	r2, [r3, #0]
 8028012:	6a39      	ldr	r1, [r7, #32]
 8028014:	69bb      	ldr	r3, [r7, #24]
 8028016:	1acb      	subs	r3, r1, r3
 8028018:	6839      	ldr	r1, [r7, #0]
 802801a:	440b      	add	r3, r1
 802801c:	781b      	ldrb	r3, [r3, #0]
 802801e:	429a      	cmp	r2, r3
 8028020:	d010      	beq.n	8028044 <pemFindTag+0xa4>
               break;
 8028022:	e01c      	b.n	802805e <pemFindTag+0xbe>
         }
         else
         {
            if(input[i + j] != tag3[j - n1 - n2])
 8028024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8028026:	6a3b      	ldr	r3, [r7, #32]
 8028028:	4413      	add	r3, r2
 802802a:	68fa      	ldr	r2, [r7, #12]
 802802c:	4413      	add	r3, r2
 802802e:	781a      	ldrb	r2, [r3, #0]
 8028030:	6a39      	ldr	r1, [r7, #32]
 8028032:	69bb      	ldr	r3, [r7, #24]
 8028034:	1ac9      	subs	r1, r1, r3
 8028036:	697b      	ldr	r3, [r7, #20]
 8028038:	1acb      	subs	r3, r1, r3
 802803a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 802803c:	440b      	add	r3, r1
 802803e:	781b      	ldrb	r3, [r3, #0]
 8028040:	429a      	cmp	r2, r3
 8028042:	d10b      	bne.n	802805c <pemFindTag+0xbc>
      for(j = 0; j < (n1 + n2 + n3); j++)
 8028044:	6a3b      	ldr	r3, [r7, #32]
 8028046:	3301      	adds	r3, #1
 8028048:	623b      	str	r3, [r7, #32]
 802804a:	69ba      	ldr	r2, [r7, #24]
 802804c:	697b      	ldr	r3, [r7, #20]
 802804e:	441a      	add	r2, r3
 8028050:	693b      	ldr	r3, [r7, #16]
 8028052:	4413      	add	r3, r2
 8028054:	6a3a      	ldr	r2, [r7, #32]
 8028056:	429a      	cmp	r2, r3
 8028058:	d3be      	bcc.n	8027fd8 <pemFindTag+0x38>
 802805a:	e000      	b.n	802805e <pemFindTag+0xbe>
               break;
 802805c:	bf00      	nop
         }
      }

      //Check whether the tag has been found
      if(j == (n1 + n2 + n3))
 802805e:	69ba      	ldr	r2, [r7, #24]
 8028060:	697b      	ldr	r3, [r7, #20]
 8028062:	441a      	add	r2, r3
 8028064:	693b      	ldr	r3, [r7, #16]
 8028066:	4413      	add	r3, r2
 8028068:	6a3a      	ldr	r2, [r7, #32]
 802806a:	429a      	cmp	r2, r3
 802806c:	d102      	bne.n	8028074 <pemFindTag+0xd4>
      {
         index = i;
 802806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028070:	61fb      	str	r3, [r7, #28]
         break;
 8028072:	e00c      	b.n	802808e <pemFindTag+0xee>
   for(i = 0; (i + n1 + n2 + n3) <= inputLen; i++)
 8028074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028076:	3301      	adds	r3, #1
 8028078:	627b      	str	r3, [r7, #36]	@ 0x24
 802807a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802807c:	69bb      	ldr	r3, [r7, #24]
 802807e:	441a      	add	r2, r3
 8028080:	697b      	ldr	r3, [r7, #20]
 8028082:	441a      	add	r2, r3
 8028084:	693b      	ldr	r3, [r7, #16]
 8028086:	4413      	add	r3, r2
 8028088:	68ba      	ldr	r2, [r7, #8]
 802808a:	429a      	cmp	r2, r3
 802808c:	d2a1      	bcs.n	8027fd2 <pemFindTag+0x32>
      }
   }

   //Return the index of the first occurrence of the tag in the string
   return index;
 802808e:	69fb      	ldr	r3, [r7, #28]
}
 8028090:	4618      	mov	r0, r3
 8028092:	3728      	adds	r7, #40	@ 0x28
 8028094:	46bd      	mov	sp, r7
 8028096:	bd80      	pop	{r7, pc}

08028098 <pemFindChar>:
 * @param[in] c Character to be searched
 * @return Index of the first occurrence of the character
 **/

int_t pemFindChar(const PemString *s, char_t c)
{
 8028098:	b580      	push	{r7, lr}
 802809a:	b084      	sub	sp, #16
 802809c:	af00      	add	r7, sp, #0
 802809e:	6078      	str	r0, [r7, #4]
 80280a0:	460b      	mov	r3, r1
 80280a2:	70fb      	strb	r3, [r7, #3]
   int_t index;
   char_t *p;

   //Search the string for the specified character
   p = osMemchr(s->value, c, s->length);
 80280a4:	687b      	ldr	r3, [r7, #4]
 80280a6:	6818      	ldr	r0, [r3, #0]
 80280a8:	78f9      	ldrb	r1, [r7, #3]
 80280aa:	687b      	ldr	r3, [r7, #4]
 80280ac:	685b      	ldr	r3, [r3, #4]
 80280ae:	461a      	mov	r2, r3
 80280b0:	f7f8 fa8e 	bl	80205d0 <memchr>
 80280b4:	60b8      	str	r0, [r7, #8]

   //Character found?
   if(p != NULL)
 80280b6:	68bb      	ldr	r3, [r7, #8]
 80280b8:	2b00      	cmp	r3, #0
 80280ba:	d005      	beq.n	80280c8 <pemFindChar+0x30>
   {
      index = p - s->value;
 80280bc:	687b      	ldr	r3, [r7, #4]
 80280be:	681b      	ldr	r3, [r3, #0]
 80280c0:	68ba      	ldr	r2, [r7, #8]
 80280c2:	1ad3      	subs	r3, r2, r3
 80280c4:	60fb      	str	r3, [r7, #12]
 80280c6:	e002      	b.n	80280ce <pemFindChar+0x36>
   }
   else
   {
      index = -1;
 80280c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80280cc:	60fb      	str	r3, [r7, #12]
   }

   //Return the index of the first occurrence of the character
   return index;
 80280ce:	68fb      	ldr	r3, [r7, #12]
}
 80280d0:	4618      	mov	r0, r3
 80280d2:	3710      	adds	r7, #16
 80280d4:	46bd      	mov	sp, r7
 80280d6:	bd80      	pop	{r7, pc}

080280d8 <pemCompareString>:
 * @param[in] value NULL-terminated string
 * @return Comparison result
 **/

bool_t pemCompareString(const PemString *string, const char_t *value)
{
 80280d8:	b580      	push	{r7, lr}
 80280da:	b084      	sub	sp, #16
 80280dc:	af00      	add	r7, sp, #0
 80280de:	6078      	str	r0, [r7, #4]
 80280e0:	6039      	str	r1, [r7, #0]
   bool_t res;
   size_t n;

   //Initialize flag
   res = FALSE;
 80280e2:	2300      	movs	r3, #0
 80280e4:	60fb      	str	r3, [r7, #12]

   //Valid NULL-terminated string?
   if(value != NULL)
 80280e6:	683b      	ldr	r3, [r7, #0]
 80280e8:	2b00      	cmp	r3, #0
 80280ea:	d018      	beq.n	802811e <pemCompareString+0x46>
   {
      //Determine the length of the string
      n = osStrlen(value);
 80280ec:	6838      	ldr	r0, [r7, #0]
 80280ee:	f7f8 fabf 	bl	8020670 <strlen>
 80280f2:	60b8      	str	r0, [r7, #8]

      //Check the length of the string
      if(string->value != NULL && string->length == n)
 80280f4:	687b      	ldr	r3, [r7, #4]
 80280f6:	681b      	ldr	r3, [r3, #0]
 80280f8:	2b00      	cmp	r3, #0
 80280fa:	d010      	beq.n	802811e <pemCompareString+0x46>
 80280fc:	687b      	ldr	r3, [r7, #4]
 80280fe:	685b      	ldr	r3, [r3, #4]
 8028100:	68ba      	ldr	r2, [r7, #8]
 8028102:	429a      	cmp	r2, r3
 8028104:	d10b      	bne.n	802811e <pemCompareString+0x46>
      {
         //Perform string comparison
         if(osStrncmp(string->value, value, n) == 0)
 8028106:	687b      	ldr	r3, [r7, #4]
 8028108:	681b      	ldr	r3, [r3, #0]
 802810a:	68ba      	ldr	r2, [r7, #8]
 802810c:	6839      	ldr	r1, [r7, #0]
 802810e:	4618      	mov	r0, r3
 8028110:	f008 f972 	bl	80303f8 <strncmp>
 8028114:	4603      	mov	r3, r0
 8028116:	2b00      	cmp	r3, #0
 8028118:	d101      	bne.n	802811e <pemCompareString+0x46>
         {
            res = TRUE;
 802811a:	2301      	movs	r3, #1
 802811c:	60fb      	str	r3, [r7, #12]
         }
      }
   }

   //Return comparison result
   return res;
 802811e:	68fb      	ldr	r3, [r7, #12]
}
 8028120:	4618      	mov	r0, r3
 8028122:	3710      	adds	r7, #16
 8028124:	46bd      	mov	sp, r7
 8028126:	bd80      	pop	{r7, pc}

08028128 <pemTokenizeString>:
 * @param[out] token Resulting token
 * @return TRUE if a token has been found, else FALSE
 **/

bool_t pemTokenizeString(PemString *s, char_t c, PemString *token)
{
 8028128:	b580      	push	{r7, lr}
 802812a:	b088      	sub	sp, #32
 802812c:	af00      	add	r7, sp, #0
 802812e:	60f8      	str	r0, [r7, #12]
 8028130:	460b      	mov	r3, r1
 8028132:	607a      	str	r2, [r7, #4]
 8028134:	72fb      	strb	r3, [r7, #11]
   char_t *p;
   size_t n;
   bool_t found;

   //Search the string for the specified delimiter character
   p = osMemchr(s->value, c, s->length);
 8028136:	68fb      	ldr	r3, [r7, #12]
 8028138:	6818      	ldr	r0, [r3, #0]
 802813a:	7af9      	ldrb	r1, [r7, #11]
 802813c:	68fb      	ldr	r3, [r7, #12]
 802813e:	685b      	ldr	r3, [r3, #4]
 8028140:	461a      	mov	r2, r3
 8028142:	f7f8 fa45 	bl	80205d0 <memchr>
 8028146:	61b8      	str	r0, [r7, #24]

   //Delimiter character found?
   if(p != NULL)
 8028148:	69bb      	ldr	r3, [r7, #24]
 802814a:	2b00      	cmp	r3, #0
 802814c:	d01c      	beq.n	8028188 <pemTokenizeString+0x60>
   {
      //Retrieve the length of the token
      n = p - s->value;
 802814e:	68fb      	ldr	r3, [r7, #12]
 8028150:	681b      	ldr	r3, [r3, #0]
 8028152:	69ba      	ldr	r2, [r7, #24]
 8028154:	1ad3      	subs	r3, r2, r3
 8028156:	617b      	str	r3, [r7, #20]

      //Extract the token from the string
      token->value = s->value;
 8028158:	68fb      	ldr	r3, [r7, #12]
 802815a:	681a      	ldr	r2, [r3, #0]
 802815c:	687b      	ldr	r3, [r7, #4]
 802815e:	601a      	str	r2, [r3, #0]
      token->length = n;
 8028160:	687b      	ldr	r3, [r7, #4]
 8028162:	697a      	ldr	r2, [r7, #20]
 8028164:	605a      	str	r2, [r3, #4]

      //Point to the next token
      s->value += n + 1;
 8028166:	68fb      	ldr	r3, [r7, #12]
 8028168:	681a      	ldr	r2, [r3, #0]
 802816a:	697b      	ldr	r3, [r7, #20]
 802816c:	3301      	adds	r3, #1
 802816e:	441a      	add	r2, r3
 8028170:	68fb      	ldr	r3, [r7, #12]
 8028172:	601a      	str	r2, [r3, #0]
      s->length -= n + 1;
 8028174:	68fb      	ldr	r3, [r7, #12]
 8028176:	685a      	ldr	r2, [r3, #4]
 8028178:	697b      	ldr	r3, [r7, #20]
 802817a:	1ad3      	subs	r3, r2, r3
 802817c:	1e5a      	subs	r2, r3, #1
 802817e:	68fb      	ldr	r3, [r7, #12]
 8028180:	605a      	str	r2, [r3, #4]

      //A token has been found
      found = TRUE;
 8028182:	2301      	movs	r3, #1
 8028184:	61fb      	str	r3, [r7, #28]
 8028186:	e010      	b.n	80281aa <pemTokenizeString+0x82>
   }
   else if(s->length > 0)
 8028188:	68fb      	ldr	r3, [r7, #12]
 802818a:	685b      	ldr	r3, [r3, #4]
 802818c:	2b00      	cmp	r3, #0
 802818e:	d00a      	beq.n	80281a6 <pemTokenizeString+0x7e>
   {
      //This is the last token
      token->value = s->value;
 8028190:	68fb      	ldr	r3, [r7, #12]
 8028192:	681a      	ldr	r2, [r3, #0]
 8028194:	687b      	ldr	r3, [r7, #4]
 8028196:	601a      	str	r2, [r3, #0]
      token->length = s->length;
 8028198:	68fb      	ldr	r3, [r7, #12]
 802819a:	685a      	ldr	r2, [r3, #4]
 802819c:	687b      	ldr	r3, [r7, #4]
 802819e:	605a      	str	r2, [r3, #4]

      //A token has been found
      found = TRUE;
 80281a0:	2301      	movs	r3, #1
 80281a2:	61fb      	str	r3, [r7, #28]
 80281a4:	e001      	b.n	80281aa <pemTokenizeString+0x82>
   }
   else
   {
      //The end of the string has been reached
      found = FALSE;
 80281a6:	2300      	movs	r3, #0
 80281a8:	61fb      	str	r3, [r7, #28]
   }

   //Return TRUE if a token has been found, else FALSE
   return found;
 80281aa:	69fb      	ldr	r3, [r7, #28]
}
 80281ac:	4618      	mov	r0, r3
 80281ae:	3720      	adds	r7, #32
 80281b0:	46bd      	mov	sp, r7
 80281b2:	bd80      	pop	{r7, pc}

080281b4 <pemTrimWhitespace>:
 * @brief Removes all leading and trailing whitespace from a string
 * @param[in] s String to be trimmed
 **/

void pemTrimWhitespace(PemString *s)
{
 80281b4:	b480      	push	{r7}
 80281b6:	b083      	sub	sp, #12
 80281b8:	af00      	add	r7, sp, #0
 80281ba:	6078      	str	r0, [r7, #4]
   //Trim whitespace from the beginning
   while(s->length > 0 && osIsspace(s->value[0]))
 80281bc:	e009      	b.n	80281d2 <pemTrimWhitespace+0x1e>
   {
      s->value++;
 80281be:	687b      	ldr	r3, [r7, #4]
 80281c0:	681b      	ldr	r3, [r3, #0]
 80281c2:	1c5a      	adds	r2, r3, #1
 80281c4:	687b      	ldr	r3, [r7, #4]
 80281c6:	601a      	str	r2, [r3, #0]
      s->length--;
 80281c8:	687b      	ldr	r3, [r7, #4]
 80281ca:	685b      	ldr	r3, [r3, #4]
 80281cc:	1e5a      	subs	r2, r3, #1
 80281ce:	687b      	ldr	r3, [r7, #4]
 80281d0:	605a      	str	r2, [r3, #4]
   while(s->length > 0 && osIsspace(s->value[0]))
 80281d2:	687b      	ldr	r3, [r7, #4]
 80281d4:	685b      	ldr	r3, [r3, #4]
 80281d6:	2b00      	cmp	r3, #0
 80281d8:	d010      	beq.n	80281fc <pemTrimWhitespace+0x48>
 80281da:	687b      	ldr	r3, [r7, #4]
 80281dc:	681b      	ldr	r3, [r3, #0]
 80281de:	781b      	ldrb	r3, [r3, #0]
 80281e0:	3301      	adds	r3, #1
 80281e2:	4a13      	ldr	r2, [pc, #76]	@ (8028230 <pemTrimWhitespace+0x7c>)
 80281e4:	4413      	add	r3, r2
 80281e6:	781b      	ldrb	r3, [r3, #0]
 80281e8:	f003 0308 	and.w	r3, r3, #8
 80281ec:	2b00      	cmp	r3, #0
 80281ee:	d1e6      	bne.n	80281be <pemTrimWhitespace+0xa>
   }

   //Trim whitespace from the end
   while(s->length > 0 && osIsspace(s->value[s->length - 1]))
 80281f0:	e004      	b.n	80281fc <pemTrimWhitespace+0x48>
   {
      s->length--;
 80281f2:	687b      	ldr	r3, [r7, #4]
 80281f4:	685b      	ldr	r3, [r3, #4]
 80281f6:	1e5a      	subs	r2, r3, #1
 80281f8:	687b      	ldr	r3, [r7, #4]
 80281fa:	605a      	str	r2, [r3, #4]
   while(s->length > 0 && osIsspace(s->value[s->length - 1]))
 80281fc:	687b      	ldr	r3, [r7, #4]
 80281fe:	685b      	ldr	r3, [r3, #4]
 8028200:	2b00      	cmp	r3, #0
 8028202:	d00e      	beq.n	8028222 <pemTrimWhitespace+0x6e>
 8028204:	687b      	ldr	r3, [r7, #4]
 8028206:	681a      	ldr	r2, [r3, #0]
 8028208:	687b      	ldr	r3, [r7, #4]
 802820a:	685b      	ldr	r3, [r3, #4]
 802820c:	3b01      	subs	r3, #1
 802820e:	4413      	add	r3, r2
 8028210:	781b      	ldrb	r3, [r3, #0]
 8028212:	3301      	adds	r3, #1
 8028214:	4a06      	ldr	r2, [pc, #24]	@ (8028230 <pemTrimWhitespace+0x7c>)
 8028216:	4413      	add	r3, r2
 8028218:	781b      	ldrb	r3, [r3, #0]
 802821a:	f003 0308 	and.w	r3, r3, #8
 802821e:	2b00      	cmp	r3, #0
 8028220:	d1e7      	bne.n	80281f2 <pemTrimWhitespace+0x3e>
   }
}
 8028222:	bf00      	nop
 8028224:	370c      	adds	r7, #12
 8028226:	46bd      	mov	sp, r7
 8028228:	f85d 7b04 	ldr.w	r7, [sp], #4
 802822c:	4770      	bx	lr
 802822e:	bf00      	nop
 8028230:	08033100 	.word	0x08033100

08028234 <pemImportRsaPublicKey>:
 * @return Error code
 **/

error_t pemImportRsaPublicKey(RsaPublicKey *publicKey, const char_t *input,
   size_t length)
{
 8028234:	b580      	push	{r7, lr}
 8028236:	b09a      	sub	sp, #104	@ 0x68
 8028238:	af04      	add	r7, sp, #16
 802823a:	60f8      	str	r0, [r7, #12]
 802823c:	60b9      	str	r1, [r7, #8]
 802823e:	607a      	str	r2, [r7, #4]
   size_t n;
   uint8_t *buffer;
   X509SubjectPublicKeyInfo publicKeyInfo;

   //Check parameters
   if(publicKey == NULL || input == NULL)
 8028240:	68fb      	ldr	r3, [r7, #12]
 8028242:	2b00      	cmp	r3, #0
 8028244:	d002      	beq.n	802824c <pemImportRsaPublicKey+0x18>
 8028246:	68bb      	ldr	r3, [r7, #8]
 8028248:	2b00      	cmp	r3, #0
 802824a:	d101      	bne.n	8028250 <pemImportRsaPublicKey+0x1c>
      return ERROR_INVALID_PARAMETER;
 802824c:	2302      	movs	r3, #2
 802824e:	e0af      	b.n	80283b0 <pemImportRsaPublicKey+0x17c>

   //Clear the SubjectPublicKeyInfo structure
   osMemset(&publicKeyInfo, 0, sizeof(X509SubjectPublicKeyInfo));
 8028250:	f107 0314 	add.w	r3, r7, #20
 8028254:	2238      	movs	r2, #56	@ 0x38
 8028256:	2100      	movs	r1, #0
 8028258:	4618      	mov	r0, r3
 802825a:	f008 f8a5 	bl	80303a8 <memset>

   //The type of data encoded is labeled depending on the type label in
   //the "-----BEGIN " line (refer to RFC 7468, section 2)
   if(pemDecodeFile(input, length, "RSA PUBLIC KEY", NULL, &n, NULL,
 802825e:	2300      	movs	r3, #0
 8028260:	9302      	str	r3, [sp, #8]
 8028262:	2300      	movs	r3, #0
 8028264:	9301      	str	r3, [sp, #4]
 8028266:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 802826a:	9300      	str	r3, [sp, #0]
 802826c:	2300      	movs	r3, #0
 802826e:	4a52      	ldr	r2, [pc, #328]	@ (80283b8 <pemImportRsaPublicKey+0x184>)
 8028270:	6879      	ldr	r1, [r7, #4]
 8028272:	68b8      	ldr	r0, [r7, #8]
 8028274:	f7ff fd2c 	bl	8027cd0 <pemDecodeFile>
 8028278:	4603      	mov	r3, r0
 802827a:	2b00      	cmp	r3, #0
 802827c:	d13f      	bne.n	80282fe <pemImportRsaPublicKey+0xca>
      NULL) == NO_ERROR)
   {
      //Allocate a memory buffer to hold the ASN.1 data
      buffer = cryptoAllocMem(n);
 802827e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8028280:	4618      	mov	r0, r3
 8028282:	f7f9 f8b2 	bl	80213ea <osAllocMem>
 8028286:	6538      	str	r0, [r7, #80]	@ 0x50

      //Successful memory allocation?
      if(buffer != NULL)
 8028288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802828a:	2b00      	cmp	r3, #0
 802828c:	d033      	beq.n	80282f6 <pemImportRsaPublicKey+0xc2>
      {
         //Decode the content of the PEM container
         error = pemDecodeFile(input, length, "RSA PUBLIC KEY", buffer, &n,
 802828e:	2300      	movs	r3, #0
 8028290:	9302      	str	r3, [sp, #8]
 8028292:	2300      	movs	r3, #0
 8028294:	9301      	str	r3, [sp, #4]
 8028296:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 802829a:	9300      	str	r3, [sp, #0]
 802829c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802829e:	4a46      	ldr	r2, [pc, #280]	@ (80283b8 <pemImportRsaPublicKey+0x184>)
 80282a0:	6879      	ldr	r1, [r7, #4]
 80282a2:	68b8      	ldr	r0, [r7, #8]
 80282a4:	f7ff fd14 	bl	8027cd0 <pemDecodeFile>
 80282a8:	4603      	mov	r3, r0
 80282aa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
            NULL, NULL);

         //Check status code
         if(!error)
 80282ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80282b2:	2b00      	cmp	r3, #0
 80282b4:	d10a      	bne.n	80282cc <pemImportRsaPublicKey+0x98>
         {
            //Read RSAPublicKey structure
            error = x509ParseRsaPublicKey(buffer, n, &publicKeyInfo.rsaPublicKey);
 80282b6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80282b8:	f107 0314 	add.w	r3, r7, #20
 80282bc:	3318      	adds	r3, #24
 80282be:	461a      	mov	r2, r3
 80282c0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80282c2:	f000 f9a3 	bl	802860c <x509ParseRsaPublicKey>
 80282c6:	4603      	mov	r3, r0
 80282c8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
         }

         //Check status code
         if(!error)
 80282cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80282d0:	2b00      	cmp	r3, #0
 80282d2:	d10c      	bne.n	80282ee <pemImportRsaPublicKey+0xba>
         {
            //Set public key algorithm identifier
            publicKeyInfo.oid.value = RSA_ENCRYPTION_OID;
 80282d4:	4b39      	ldr	r3, [pc, #228]	@ (80283bc <pemImportRsaPublicKey+0x188>)
 80282d6:	61fb      	str	r3, [r7, #28]
            publicKeyInfo.oid.length = sizeof(RSA_ENCRYPTION_OID);
 80282d8:	2309      	movs	r3, #9
 80282da:	623b      	str	r3, [r7, #32]

            //Import the RSA public key
            error = x509ImportRsaPublicKey(publicKey, &publicKeyInfo);
 80282dc:	f107 0314 	add.w	r3, r7, #20
 80282e0:	4619      	mov	r1, r3
 80282e2:	68f8      	ldr	r0, [r7, #12]
 80282e4:	f000 fa34 	bl	8028750 <x509ImportRsaPublicKey>
 80282e8:	4603      	mov	r3, r0
 80282ea:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
         }

         //Release previously allocated memory
         cryptoFreeMem(buffer);
 80282ee:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80282f0:	f7f9 f889 	bl	8021406 <osFreeMem>
 80282f4:	e053      	b.n	802839e <pemImportRsaPublicKey+0x16a>
      }
      else
      {
         //Failed to allocate memory
         error = ERROR_OUT_OF_MEMORY;
 80282f6:	2364      	movs	r3, #100	@ 0x64
 80282f8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80282fc:	e04f      	b.n	802839e <pemImportRsaPublicKey+0x16a>
      }
   }
   else if(pemDecodeFile(input, length, "PUBLIC KEY", NULL, &n, NULL,
 80282fe:	2300      	movs	r3, #0
 8028300:	9302      	str	r3, [sp, #8]
 8028302:	2300      	movs	r3, #0
 8028304:	9301      	str	r3, [sp, #4]
 8028306:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 802830a:	9300      	str	r3, [sp, #0]
 802830c:	2300      	movs	r3, #0
 802830e:	4a2c      	ldr	r2, [pc, #176]	@ (80283c0 <pemImportRsaPublicKey+0x18c>)
 8028310:	6879      	ldr	r1, [r7, #4]
 8028312:	68b8      	ldr	r0, [r7, #8]
 8028314:	f7ff fcdc 	bl	8027cd0 <pemDecodeFile>
 8028318:	4603      	mov	r3, r0
 802831a:	2b00      	cmp	r3, #0
 802831c:	d13b      	bne.n	8028396 <pemImportRsaPublicKey+0x162>
      NULL) == NO_ERROR)
   {
      //Allocate a memory buffer to hold the ASN.1 data
      buffer = cryptoAllocMem(n);
 802831e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8028320:	4618      	mov	r0, r3
 8028322:	f7f9 f862 	bl	80213ea <osAllocMem>
 8028326:	6538      	str	r0, [r7, #80]	@ 0x50

      //Successful memory allocation?
      if(buffer != NULL)
 8028328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802832a:	2b00      	cmp	r3, #0
 802832c:	d02f      	beq.n	802838e <pemImportRsaPublicKey+0x15a>
      {
         //Decode the content of the PEM container
         error = pemDecodeFile(input, length, "PUBLIC KEY", buffer, &n,
 802832e:	2300      	movs	r3, #0
 8028330:	9302      	str	r3, [sp, #8]
 8028332:	2300      	movs	r3, #0
 8028334:	9301      	str	r3, [sp, #4]
 8028336:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 802833a:	9300      	str	r3, [sp, #0]
 802833c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802833e:	4a20      	ldr	r2, [pc, #128]	@ (80283c0 <pemImportRsaPublicKey+0x18c>)
 8028340:	6879      	ldr	r1, [r7, #4]
 8028342:	68b8      	ldr	r0, [r7, #8]
 8028344:	f7ff fcc4 	bl	8027cd0 <pemDecodeFile>
 8028348:	4603      	mov	r3, r0
 802834a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
            NULL, NULL);

         //Check status code
         if(!error)
 802834e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8028352:	2b00      	cmp	r3, #0
 8028354:	d10a      	bne.n	802836c <pemImportRsaPublicKey+0x138>
         {
            //The ASN.1 encoded data of the public key is the SubjectPublicKeyInfo
            //structure (refer to RFC 7468, section 13)
            error = x509ParseSubjectPublicKeyInfo(buffer, n, &n, &publicKeyInfo);
 8028356:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8028358:	f107 0314 	add.w	r3, r7, #20
 802835c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8028360:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8028362:	f000 f82f 	bl	80283c4 <x509ParseSubjectPublicKeyInfo>
 8028366:	4603      	mov	r3, r0
 8028368:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
         }

         //Check status code
         if(!error)
 802836c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8028370:	2b00      	cmp	r3, #0
 8028372:	d108      	bne.n	8028386 <pemImportRsaPublicKey+0x152>
         {
            //Import the RSA public key
            error = x509ImportRsaPublicKey(publicKey, &publicKeyInfo);
 8028374:	f107 0314 	add.w	r3, r7, #20
 8028378:	4619      	mov	r1, r3
 802837a:	68f8      	ldr	r0, [r7, #12]
 802837c:	f000 f9e8 	bl	8028750 <x509ImportRsaPublicKey>
 8028380:	4603      	mov	r3, r0
 8028382:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
         }

         //Release previously allocated memory
         cryptoFreeMem(buffer);
 8028386:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8028388:	f7f9 f83d 	bl	8021406 <osFreeMem>
 802838c:	e007      	b.n	802839e <pemImportRsaPublicKey+0x16a>
      }
      else
      {
         //Failed to allocate memory
         error = ERROR_OUT_OF_MEMORY;
 802838e:	2364      	movs	r3, #100	@ 0x64
 8028390:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8028394:	e003      	b.n	802839e <pemImportRsaPublicKey+0x16a>
      }
   }
   else
   {
      //The PEM file does not contain a valid public key
      error = ERROR_END_OF_FILE;
 8028396:	f44f 7398 	mov.w	r3, #304	@ 0x130
 802839a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
   }

   //Any error to report?
   if(error)
 802839e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80283a2:	2b00      	cmp	r3, #0
 80283a4:	d002      	beq.n	80283ac <pemImportRsaPublicKey+0x178>
   {
      //Clean up side effects
      rsaFreePublicKey(publicKey);
 80283a6:	68f8      	ldr	r0, [r7, #12]
 80283a8:	f7ff fa81 	bl	80278ae <rsaFreePublicKey>
   }

   //Return status code
   return error;
 80283ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
#else
   //Not implemented
   return ERROR_NOT_IMPLEMENTED;
#endif
}
 80283b0:	4618      	mov	r0, r3
 80283b2:	3758      	adds	r7, #88	@ 0x58
 80283b4:	46bd      	mov	sp, r7
 80283b6:	bd80      	pop	{r7, pc}
 80283b8:	0803169c 	.word	0x0803169c
 80283bc:	0803302c 	.word	0x0803302c
 80283c0:	080316ac 	.word	0x080316ac

080283c4 <x509ParseSubjectPublicKeyInfo>:
 * @return Error code
 **/

error_t x509ParseSubjectPublicKeyInfo(const uint8_t *data, size_t length,
   size_t *totalLength, X509SubjectPublicKeyInfo *publicKeyInfo)
{
 80283c4:	b580      	push	{r7, lr}
 80283c6:	b08e      	sub	sp, #56	@ 0x38
 80283c8:	af00      	add	r7, sp, #0
 80283ca:	60f8      	str	r0, [r7, #12]
 80283cc:	60b9      	str	r1, [r7, #8]
 80283ce:	607a      	str	r2, [r7, #4]
 80283d0:	603b      	str	r3, [r7, #0]

   //Debug message
   TRACE_DEBUG("    Parsing SubjectPublicKeyInfo...\r\n");

   //Clear the SubjectPublicKeyInfo structure
   osMemset(publicKeyInfo, 0, sizeof(X509SubjectPublicKeyInfo));
 80283d2:	2238      	movs	r2, #56	@ 0x38
 80283d4:	2100      	movs	r1, #0
 80283d6:	6838      	ldr	r0, [r7, #0]
 80283d8:	f007 ffe6 	bl	80303a8 <memset>

   //The public key information is encapsulated within a sequence
   error = asn1ReadSequence(data, length, &tag);
 80283dc:	f107 0310 	add.w	r3, r7, #16
 80283e0:	461a      	mov	r2, r3
 80283e2:	68b9      	ldr	r1, [r7, #8]
 80283e4:	68f8      	ldr	r0, [r7, #12]
 80283e6:	f7fd f8a3 	bl	8025530 <asn1ReadSequence>
 80283ea:	4603      	mov	r3, r0
 80283ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
   //Failed to decode ASN.1 tag?
   if(error)
 80283ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80283f0:	2b00      	cmp	r3, #0
 80283f2:	d001      	beq.n	80283f8 <x509ParseSubjectPublicKeyInfo+0x34>
      return error;
 80283f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80283f6:	e08b      	b.n	8028510 <x509ParseSubjectPublicKeyInfo+0x14c>

   //Save the total length of the field
   *totalLength = tag.totalLength;
 80283f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80283fa:	687b      	ldr	r3, [r7, #4]
 80283fc:	601a      	str	r2, [r3, #0]

   //Raw contents of the ASN.1 sequence
   publicKeyInfo->raw.value = data;
 80283fe:	683b      	ldr	r3, [r7, #0]
 8028400:	68fa      	ldr	r2, [r7, #12]
 8028402:	601a      	str	r2, [r3, #0]
   publicKeyInfo->raw.length = tag.totalLength;
 8028404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8028406:	683b      	ldr	r3, [r7, #0]
 8028408:	605a      	str	r2, [r3, #4]

   //Point to the first field of the sequence
   data = tag.value;
 802840a:	6a3b      	ldr	r3, [r7, #32]
 802840c:	60fb      	str	r3, [r7, #12]
   length = tag.length;
 802840e:	69fb      	ldr	r3, [r7, #28]
 8028410:	60bb      	str	r3, [r7, #8]

   //Read AlgorithmIdentifier field
   error = x509ParseAlgoId(data, length, &n, publicKeyInfo);
 8028412:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8028416:	683b      	ldr	r3, [r7, #0]
 8028418:	68b9      	ldr	r1, [r7, #8]
 802841a:	68f8      	ldr	r0, [r7, #12]
 802841c:	f000 f882 	bl	8028524 <x509ParseAlgoId>
 8028420:	4603      	mov	r3, r0
 8028422:	86fb      	strh	r3, [r7, #54]	@ 0x36
   //Any error to report?
   if(error)
 8028424:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8028426:	2b00      	cmp	r3, #0
 8028428:	d001      	beq.n	802842e <x509ParseSubjectPublicKeyInfo+0x6a>
      return error;
 802842a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 802842c:	e070      	b.n	8028510 <x509ParseSubjectPublicKeyInfo+0x14c>

   //Point to the next field
   data += n;
 802842e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8028430:	68fa      	ldr	r2, [r7, #12]
 8028432:	4413      	add	r3, r2
 8028434:	60fb      	str	r3, [r7, #12]
   length -= n;
 8028436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8028438:	68ba      	ldr	r2, [r7, #8]
 802843a:	1ad3      	subs	r3, r2, r3
 802843c:	60bb      	str	r3, [r7, #8]

   //The SubjectPublicKey is encapsulated within a bit string
   error = asn1ReadTag(data, length, &tag);
 802843e:	f107 0310 	add.w	r3, r7, #16
 8028442:	461a      	mov	r2, r3
 8028444:	68b9      	ldr	r1, [r7, #8]
 8028446:	68f8      	ldr	r0, [r7, #12]
 8028448:	f7fc ffb1 	bl	80253ae <asn1ReadTag>
 802844c:	4603      	mov	r3, r0
 802844e:	86fb      	strh	r3, [r7, #54]	@ 0x36
   //Failed to decode ASN.1 tag?
   if(error)
 8028450:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8028452:	2b00      	cmp	r3, #0
 8028454:	d001      	beq.n	802845a <x509ParseSubjectPublicKeyInfo+0x96>
      return error;
 8028456:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8028458:	e05a      	b.n	8028510 <x509ParseSubjectPublicKeyInfo+0x14c>

   //Enforce encoding, class and type
   error = asn1CheckTag(&tag, FALSE, ASN1_CLASS_UNIVERSAL,
 802845a:	f107 0010 	add.w	r0, r7, #16
 802845e:	2303      	movs	r3, #3
 8028460:	2200      	movs	r2, #0
 8028462:	2100      	movs	r1, #0
 8028464:	f7fd f89e 	bl	80255a4 <asn1CheckTag>
 8028468:	4603      	mov	r3, r0
 802846a:	86fb      	strh	r3, [r7, #54]	@ 0x36
      ASN1_TYPE_BIT_STRING);
   //Invalid tag?
   if(error)
 802846c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 802846e:	2b00      	cmp	r3, #0
 8028470:	d001      	beq.n	8028476 <x509ParseSubjectPublicKeyInfo+0xb2>
      return error;
 8028472:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8028474:	e04c      	b.n	8028510 <x509ParseSubjectPublicKeyInfo+0x14c>

   //The bit string shall contain an initial octet which encodes the number
   //of unused bits in the final subsequent octet
   if(tag.length < 1 || tag.value[0] != 0x00)
 8028476:	69fb      	ldr	r3, [r7, #28]
 8028478:	2b00      	cmp	r3, #0
 802847a:	d003      	beq.n	8028484 <x509ParseSubjectPublicKeyInfo+0xc0>
 802847c:	6a3b      	ldr	r3, [r7, #32]
 802847e:	781b      	ldrb	r3, [r3, #0]
 8028480:	2b00      	cmp	r3, #0
 8028482:	d001      	beq.n	8028488 <x509ParseSubjectPublicKeyInfo+0xc4>
      return ERROR_FAILURE;
 8028484:	2301      	movs	r3, #1
 8028486:	e043      	b.n	8028510 <x509ParseSubjectPublicKeyInfo+0x14c>

   //Point to the public key
   data = tag.value + 1;
 8028488:	6a3b      	ldr	r3, [r7, #32]
 802848a:	3301      	adds	r3, #1
 802848c:	60fb      	str	r3, [r7, #12]
   length = tag.length - 1;
 802848e:	69fb      	ldr	r3, [r7, #28]
 8028490:	3b01      	subs	r3, #1
 8028492:	60bb      	str	r3, [r7, #8]

   //Raw contents of the SubjectPublicKey (excluding the tag, length, and
   //number of unused bits)
   publicKeyInfo->rawSubjectPublicKey.value = data;
 8028494:	683b      	ldr	r3, [r7, #0]
 8028496:	68fa      	ldr	r2, [r7, #12]
 8028498:	611a      	str	r2, [r3, #16]
   publicKeyInfo->rawSubjectPublicKey.length = length;
 802849a:	683b      	ldr	r3, [r7, #0]
 802849c:	68ba      	ldr	r2, [r7, #8]
 802849e:	615a      	str	r2, [r3, #20]

   //Get the public key algorithm identifier
   oid = publicKeyInfo->oid.value;
 80284a0:	683b      	ldr	r3, [r7, #0]
 80284a2:	689b      	ldr	r3, [r3, #8]
 80284a4:	633b      	str	r3, [r7, #48]	@ 0x30
   oidLen = publicKeyInfo->oid.length;
 80284a6:	683b      	ldr	r3, [r7, #0]
 80284a8:	68db      	ldr	r3, [r3, #12]
 80284aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (RSA_SUPPORT == ENABLED)
   //RSA or RSA-PSS algorithm identifier?
   if(OID_COMP(oid, oidLen, RSA_ENCRYPTION_OID) == 0 ||
 80284ac:	2309      	movs	r3, #9
 80284ae:	4a1a      	ldr	r2, [pc, #104]	@ (8028518 <x509ParseSubjectPublicKeyInfo+0x154>)
 80284b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80284b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80284b4:	f7fd f984 	bl	80257c0 <oidComp>
 80284b8:	4603      	mov	r3, r0
 80284ba:	2b00      	cmp	r3, #0
 80284bc:	d008      	beq.n	80284d0 <x509ParseSubjectPublicKeyInfo+0x10c>
      OID_COMP(oid, oidLen, RSASSA_PSS_OID) == 0)
 80284be:	2309      	movs	r3, #9
 80284c0:	4a16      	ldr	r2, [pc, #88]	@ (802851c <x509ParseSubjectPublicKeyInfo+0x158>)
 80284c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80284c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80284c6:	f7fd f97b 	bl	80257c0 <oidComp>
 80284ca:	4603      	mov	r3, r0
   if(OID_COMP(oid, oidLen, RSA_ENCRYPTION_OID) == 0 ||
 80284cc:	2b00      	cmp	r3, #0
 80284ce:	d109      	bne.n	80284e4 <x509ParseSubjectPublicKeyInfo+0x120>
   {
      //Read RSAPublicKey structure
      error = x509ParseRsaPublicKey(data, length, &publicKeyInfo->rsaPublicKey);
 80284d0:	683b      	ldr	r3, [r7, #0]
 80284d2:	3318      	adds	r3, #24
 80284d4:	461a      	mov	r2, r3
 80284d6:	68b9      	ldr	r1, [r7, #8]
 80284d8:	68f8      	ldr	r0, [r7, #12]
 80284da:	f000 f897 	bl	802860c <x509ParseRsaPublicKey>
 80284de:	4603      	mov	r3, r0
 80284e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80284e2:	e014      	b.n	802850e <x509ParseSubjectPublicKeyInfo+0x14a>
   }
   else
#endif
#if (EC_SUPPORT == ENABLED)
   //EC public key identifier?
   if(OID_COMP(oid, oidLen, EC_PUBLIC_KEY_OID) == 0)
 80284e4:	2307      	movs	r3, #7
 80284e6:	4a0e      	ldr	r2, [pc, #56]	@ (8028520 <x509ParseSubjectPublicKeyInfo+0x15c>)
 80284e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80284ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80284ec:	f7fd f968 	bl	80257c0 <oidComp>
 80284f0:	4603      	mov	r3, r0
 80284f2:	2b00      	cmp	r3, #0
 80284f4:	d109      	bne.n	802850a <x509ParseSubjectPublicKeyInfo+0x146>
   {
      //Read ECPublicKey structure
      error = x509ParseEcPublicKey(data, length, &publicKeyInfo->ecPublicKey);
 80284f6:	683b      	ldr	r3, [r7, #0]
 80284f8:	3330      	adds	r3, #48	@ 0x30
 80284fa:	461a      	mov	r2, r3
 80284fc:	68b9      	ldr	r1, [r7, #8]
 80284fe:	68f8      	ldr	r0, [r7, #12]
 8028500:	f000 f8ed 	bl	80286de <x509ParseEcPublicKey>
 8028504:	4603      	mov	r3, r0
 8028506:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8028508:	e001      	b.n	802850e <x509ParseSubjectPublicKeyInfo+0x14a>
   else
#endif
   //Unknown algorithm identifier?
   {
      //Report an error
      error = ERROR_WRONG_IDENTIFIER;
 802850a:	23d6      	movs	r3, #214	@ 0xd6
 802850c:	86fb      	strh	r3, [r7, #54]	@ 0x36
   }

   //Return status code
   return error;
 802850e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8028510:	4618      	mov	r0, r3
 8028512:	3738      	adds	r7, #56	@ 0x38
 8028514:	46bd      	mov	sp, r7
 8028516:	bd80      	pop	{r7, pc}
 8028518:	0803302c 	.word	0x0803302c
 802851c:	08033038 	.word	0x08033038
 8028520:	08032e24 	.word	0x08032e24

08028524 <x509ParseAlgoId>:
 * @return Error code
 **/

error_t x509ParseAlgoId(const uint8_t *data, size_t length,
   size_t *totalLength, X509SubjectPublicKeyInfo *publicKeyInfo)
{
 8028524:	b580      	push	{r7, lr}
 8028526:	b08c      	sub	sp, #48	@ 0x30
 8028528:	af00      	add	r7, sp, #0
 802852a:	60f8      	str	r0, [r7, #12]
 802852c:	60b9      	str	r1, [r7, #8]
 802852e:	607a      	str	r2, [r7, #4]
 8028530:	603b      	str	r3, [r7, #0]

   //Debug message
   TRACE_DEBUG("      Parsing AlgorithmIdentifier...\r\n");

   //Read AlgorithmIdentifier field
   error = asn1ReadSequence(data, length, &tag);
 8028532:	f107 0314 	add.w	r3, r7, #20
 8028536:	461a      	mov	r2, r3
 8028538:	68b9      	ldr	r1, [r7, #8]
 802853a:	68f8      	ldr	r0, [r7, #12]
 802853c:	f7fc fff8 	bl	8025530 <asn1ReadSequence>
 8028540:	4603      	mov	r3, r0
 8028542:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   //Failed to decode ASN.1 tag?
   if(error)
 8028544:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8028546:	2b00      	cmp	r3, #0
 8028548:	d001      	beq.n	802854e <x509ParseAlgoId+0x2a>
      return error;
 802854a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 802854c:	e053      	b.n	80285f6 <x509ParseAlgoId+0xd2>

   //Save the total length of the field
   *totalLength = tag.totalLength;
 802854e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8028550:	687b      	ldr	r3, [r7, #4]
 8028552:	601a      	str	r2, [r3, #0]

   //Point to the first field
   data = tag.value;
 8028554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028556:	60fb      	str	r3, [r7, #12]
   length = tag.length;
 8028558:	6a3b      	ldr	r3, [r7, #32]
 802855a:	60bb      	str	r3, [r7, #8]

   //Read algorithm identifier (OID)
   error = asn1ReadOid(data, length, &tag);
 802855c:	f107 0314 	add.w	r3, r7, #20
 8028560:	461a      	mov	r2, r3
 8028562:	68b9      	ldr	r1, [r7, #8]
 8028564:	68f8      	ldr	r0, [r7, #12]
 8028566:	f7fd f800 	bl	802556a <asn1ReadOid>
 802856a:	4603      	mov	r3, r0
 802856c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   //Failed to decode ASN.1 tag?
   if(error)
 802856e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8028570:	2b00      	cmp	r3, #0
 8028572:	d001      	beq.n	8028578 <x509ParseAlgoId+0x54>
      return error;
 8028574:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8028576:	e03e      	b.n	80285f6 <x509ParseAlgoId+0xd2>

   //Save the algorithm identifier
   publicKeyInfo->oid.value = tag.value;
 8028578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802857a:	683b      	ldr	r3, [r7, #0]
 802857c:	609a      	str	r2, [r3, #8]
   publicKeyInfo->oid.length = tag.length;
 802857e:	6a3a      	ldr	r2, [r7, #32]
 8028580:	683b      	ldr	r3, [r7, #0]
 8028582:	60da      	str	r2, [r3, #12]

   //Point to the next field (if any)
   data += tag.totalLength;
 8028584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8028586:	68fa      	ldr	r2, [r7, #12]
 8028588:	4413      	add	r3, r2
 802858a:	60fb      	str	r3, [r7, #12]
   length -= tag.totalLength;
 802858c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802858e:	68ba      	ldr	r2, [r7, #8]
 8028590:	1ad3      	subs	r3, r2, r3
 8028592:	60bb      	str	r3, [r7, #8]

#if (RSA_SUPPORT == ENABLED)
   //RSA algorithm identifier?
   if(!asn1CheckOid(&tag, RSA_ENCRYPTION_OID, sizeof(RSA_ENCRYPTION_OID)))
 8028594:	f107 0314 	add.w	r3, r7, #20
 8028598:	2209      	movs	r2, #9
 802859a:	4919      	ldr	r1, [pc, #100]	@ (8028600 <x509ParseAlgoId+0xdc>)
 802859c:	4618      	mov	r0, r3
 802859e:	f7fd f824 	bl	80255ea <asn1CheckOid>
 80285a2:	4603      	mov	r3, r0
 80285a4:	2b00      	cmp	r3, #0
 80285a6:	d102      	bne.n	80285ae <x509ParseAlgoId+0x8a>
   {
      //The parameters field must have ASN.1 type NULL for this algorithm
      //identifier (refer to RFC 3279, section 2.3.1)
      error = NO_ERROR;
 80285a8:	2300      	movs	r3, #0
 80285aa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80285ac:	e022      	b.n	80285f4 <x509ParseAlgoId+0xd0>
   }
   //RSA-PSS algorithm identifier?
   else if(!asn1CheckOid(&tag, RSASSA_PSS_OID, sizeof(RSASSA_PSS_OID)))
 80285ae:	f107 0314 	add.w	r3, r7, #20
 80285b2:	2209      	movs	r2, #9
 80285b4:	4913      	ldr	r1, [pc, #76]	@ (8028604 <x509ParseAlgoId+0xe0>)
 80285b6:	4618      	mov	r0, r3
 80285b8:	f7fd f817 	bl	80255ea <asn1CheckOid>
 80285bc:	4603      	mov	r3, r0
 80285be:	2b00      	cmp	r3, #0
 80285c0:	d102      	bne.n	80285c8 <x509ParseAlgoId+0xa4>
   {
      //The parameters may be either absent or present when used as subject
      //public key information (refer to RFC 4055, section 3.1)
      error = NO_ERROR;
 80285c2:	2300      	movs	r3, #0
 80285c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80285c6:	e015      	b.n	80285f4 <x509ParseAlgoId+0xd0>
   }
   else
#endif
#if (EC_SUPPORT == ENABLED)
   //EC public key identifier?
   if(!asn1CheckOid(&tag, EC_PUBLIC_KEY_OID, sizeof(EC_PUBLIC_KEY_OID)))
 80285c8:	f107 0314 	add.w	r3, r7, #20
 80285cc:	2207      	movs	r2, #7
 80285ce:	490e      	ldr	r1, [pc, #56]	@ (8028608 <x509ParseAlgoId+0xe4>)
 80285d0:	4618      	mov	r0, r3
 80285d2:	f7fd f80a 	bl	80255ea <asn1CheckOid>
 80285d6:	4603      	mov	r3, r0
 80285d8:	2b00      	cmp	r3, #0
 80285da:	d109      	bne.n	80285f0 <x509ParseAlgoId+0xcc>
   {
      //Read ECParameters structure
      error = x509ParseEcParameters(data, length, &publicKeyInfo->ecParams);
 80285dc:	683b      	ldr	r3, [r7, #0]
 80285de:	3328      	adds	r3, #40	@ 0x28
 80285e0:	461a      	mov	r2, r3
 80285e2:	68b9      	ldr	r1, [r7, #8]
 80285e4:	68f8      	ldr	r0, [r7, #12]
 80285e6:	f000 f893 	bl	8028710 <x509ParseEcParameters>
 80285ea:	4603      	mov	r3, r0
 80285ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80285ee:	e001      	b.n	80285f4 <x509ParseAlgoId+0xd0>
   else
#endif
   //Unknown algorithm identifier?
   {
      //Report an error
      error = ERROR_WRONG_IDENTIFIER;
 80285f0:	23d6      	movs	r3, #214	@ 0xd6
 80285f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   }

   //Return status code
   return error;
 80285f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 80285f6:	4618      	mov	r0, r3
 80285f8:	3730      	adds	r7, #48	@ 0x30
 80285fa:	46bd      	mov	sp, r7
 80285fc:	bd80      	pop	{r7, pc}
 80285fe:	bf00      	nop
 8028600:	0803302c 	.word	0x0803302c
 8028604:	08033038 	.word	0x08033038
 8028608:	08032e24 	.word	0x08032e24

0802860c <x509ParseRsaPublicKey>:
 * @return Error code
 **/

error_t x509ParseRsaPublicKey(const uint8_t *data, size_t length,
   X509RsaPublicKey *rsaPublicKey)
{
 802860c:	b580      	push	{r7, lr}
 802860e:	b08c      	sub	sp, #48	@ 0x30
 8028610:	af00      	add	r7, sp, #0
 8028612:	60f8      	str	r0, [r7, #12]
 8028614:	60b9      	str	r1, [r7, #8]
 8028616:	607a      	str	r2, [r7, #4]

   //Debug message
   TRACE_DEBUG("      Parsing RSAPublicKey...\r\n");

   //Read RSAPublicKey structure
   error = asn1ReadSequence(data, length, &tag);
 8028618:	f107 0314 	add.w	r3, r7, #20
 802861c:	461a      	mov	r2, r3
 802861e:	68b9      	ldr	r1, [r7, #8]
 8028620:	68f8      	ldr	r0, [r7, #12]
 8028622:	f7fc ff85 	bl	8025530 <asn1ReadSequence>
 8028626:	4603      	mov	r3, r0
 8028628:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   //Failed to decode ASN.1 tag?
   if(error)
 802862a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 802862c:	2b00      	cmp	r3, #0
 802862e:	d001      	beq.n	8028634 <x509ParseRsaPublicKey+0x28>
      return error;
 8028630:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8028632:	e050      	b.n	80286d6 <x509ParseRsaPublicKey+0xca>

   //Point to the first field
   data = tag.value;
 8028634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028636:	60fb      	str	r3, [r7, #12]
   length = tag.length;
 8028638:	6a3b      	ldr	r3, [r7, #32]
 802863a:	60bb      	str	r3, [r7, #8]

   //Read Modulus field
   error = asn1ReadTag(data, length, &tag);
 802863c:	f107 0314 	add.w	r3, r7, #20
 8028640:	461a      	mov	r2, r3
 8028642:	68b9      	ldr	r1, [r7, #8]
 8028644:	68f8      	ldr	r0, [r7, #12]
 8028646:	f7fc feb2 	bl	80253ae <asn1ReadTag>
 802864a:	4603      	mov	r3, r0
 802864c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   //Failed to decode ASN.1 tag?
   if(error)
 802864e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8028650:	2b00      	cmp	r3, #0
 8028652:	d001      	beq.n	8028658 <x509ParseRsaPublicKey+0x4c>
      return error;
 8028654:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8028656:	e03e      	b.n	80286d6 <x509ParseRsaPublicKey+0xca>

   //Enforce encoding, class and type
   error = asn1CheckTag(&tag, FALSE, ASN1_CLASS_UNIVERSAL, ASN1_TYPE_INTEGER);
 8028658:	f107 0014 	add.w	r0, r7, #20
 802865c:	2302      	movs	r3, #2
 802865e:	2200      	movs	r2, #0
 8028660:	2100      	movs	r1, #0
 8028662:	f7fc ff9f 	bl	80255a4 <asn1CheckTag>
 8028666:	4603      	mov	r3, r0
 8028668:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   //Invalid tag?
   if(error)
 802866a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 802866c:	2b00      	cmp	r3, #0
 802866e:	d001      	beq.n	8028674 <x509ParseRsaPublicKey+0x68>
      return error;
 8028670:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8028672:	e030      	b.n	80286d6 <x509ParseRsaPublicKey+0xca>

   //Save the modulus
   rsaPublicKey->n.value = tag.value;
 8028674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8028676:	687b      	ldr	r3, [r7, #4]
 8028678:	601a      	str	r2, [r3, #0]
   rsaPublicKey->n.length = tag.length;
 802867a:	6a3a      	ldr	r2, [r7, #32]
 802867c:	687b      	ldr	r3, [r7, #4]
 802867e:	605a      	str	r2, [r3, #4]

   //Point to the next field
   data += tag.totalLength;
 8028680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8028682:	68fa      	ldr	r2, [r7, #12]
 8028684:	4413      	add	r3, r2
 8028686:	60fb      	str	r3, [r7, #12]
   length -= tag.totalLength;
 8028688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802868a:	68ba      	ldr	r2, [r7, #8]
 802868c:	1ad3      	subs	r3, r2, r3
 802868e:	60bb      	str	r3, [r7, #8]

   //Read PublicExponent field
   error = asn1ReadTag(data, length, &tag);
 8028690:	f107 0314 	add.w	r3, r7, #20
 8028694:	461a      	mov	r2, r3
 8028696:	68b9      	ldr	r1, [r7, #8]
 8028698:	68f8      	ldr	r0, [r7, #12]
 802869a:	f7fc fe88 	bl	80253ae <asn1ReadTag>
 802869e:	4603      	mov	r3, r0
 80286a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   //Failed to decode ASN.1 tag?
   if(error)
 80286a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80286a4:	2b00      	cmp	r3, #0
 80286a6:	d001      	beq.n	80286ac <x509ParseRsaPublicKey+0xa0>
      return error;
 80286a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80286aa:	e014      	b.n	80286d6 <x509ParseRsaPublicKey+0xca>

   //Enforce encoding, class and type
   error = asn1CheckTag(&tag, FALSE, ASN1_CLASS_UNIVERSAL, ASN1_TYPE_INTEGER);
 80286ac:	f107 0014 	add.w	r0, r7, #20
 80286b0:	2302      	movs	r3, #2
 80286b2:	2200      	movs	r2, #0
 80286b4:	2100      	movs	r1, #0
 80286b6:	f7fc ff75 	bl	80255a4 <asn1CheckTag>
 80286ba:	4603      	mov	r3, r0
 80286bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   //Invalid tag?
   if(error)
 80286be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80286c0:	2b00      	cmp	r3, #0
 80286c2:	d001      	beq.n	80286c8 <x509ParseRsaPublicKey+0xbc>
      return error;
 80286c4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80286c6:	e006      	b.n	80286d6 <x509ParseRsaPublicKey+0xca>

   //Save the public exponent
   rsaPublicKey->e.value = tag.value;
 80286c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80286ca:	687b      	ldr	r3, [r7, #4]
 80286cc:	609a      	str	r2, [r3, #8]
   rsaPublicKey->e.length = tag.length;
 80286ce:	6a3a      	ldr	r2, [r7, #32]
 80286d0:	687b      	ldr	r3, [r7, #4]
 80286d2:	60da      	str	r2, [r3, #12]

   //Successful processing
   return NO_ERROR;
 80286d4:	2300      	movs	r3, #0
}
 80286d6:	4618      	mov	r0, r3
 80286d8:	3730      	adds	r7, #48	@ 0x30
 80286da:	46bd      	mov	sp, r7
 80286dc:	bd80      	pop	{r7, pc}

080286de <x509ParseEcPublicKey>:
 * @return Error code
 **/

error_t x509ParseEcPublicKey(const uint8_t *data, size_t length,
   X509EcPublicKey *ecPublicKey)
{
 80286de:	b480      	push	{r7}
 80286e0:	b085      	sub	sp, #20
 80286e2:	af00      	add	r7, sp, #0
 80286e4:	60f8      	str	r0, [r7, #12]
 80286e6:	60b9      	str	r1, [r7, #8]
 80286e8:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("      Parsing ECPublicKey...\r\n");

   //Make sure the EC public key is valid
   if(length == 0)
 80286ea:	68bb      	ldr	r3, [r7, #8]
 80286ec:	2b00      	cmp	r3, #0
 80286ee:	d102      	bne.n	80286f6 <x509ParseEcPublicKey+0x18>
      return ERROR_BAD_CERTIFICATE;
 80286f0:	f240 2315 	movw	r3, #533	@ 0x215
 80286f4:	e006      	b.n	8028704 <x509ParseEcPublicKey+0x26>

   //Save the EC public key
   ecPublicKey->q.value = data;
 80286f6:	687b      	ldr	r3, [r7, #4]
 80286f8:	68fa      	ldr	r2, [r7, #12]
 80286fa:	601a      	str	r2, [r3, #0]
   ecPublicKey->q.length = length;
 80286fc:	687b      	ldr	r3, [r7, #4]
 80286fe:	68ba      	ldr	r2, [r7, #8]
 8028700:	605a      	str	r2, [r3, #4]

   //Successful processing
   return NO_ERROR;
 8028702:	2300      	movs	r3, #0
}
 8028704:	4618      	mov	r0, r3
 8028706:	3714      	adds	r7, #20
 8028708:	46bd      	mov	sp, r7
 802870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802870e:	4770      	bx	lr

08028710 <x509ParseEcParameters>:
 * @return Error code
 **/

error_t x509ParseEcParameters(const uint8_t *data, size_t length,
   X509EcParameters *ecParams)
{
 8028710:	b580      	push	{r7, lr}
 8028712:	b08c      	sub	sp, #48	@ 0x30
 8028714:	af00      	add	r7, sp, #0
 8028716:	60f8      	str	r0, [r7, #12]
 8028718:	60b9      	str	r1, [r7, #8]
 802871a:	607a      	str	r2, [r7, #4]

   //Debug message
   TRACE_DEBUG("        Parsing ECParameters...\r\n");

   //Read namedCurve field
   error = asn1ReadOid(data, length, &tag);
 802871c:	f107 0314 	add.w	r3, r7, #20
 8028720:	461a      	mov	r2, r3
 8028722:	68b9      	ldr	r1, [r7, #8]
 8028724:	68f8      	ldr	r0, [r7, #12]
 8028726:	f7fc ff20 	bl	802556a <asn1ReadOid>
 802872a:	4603      	mov	r3, r0
 802872c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   //Failed to decode ASN.1 tag?
   if(error)
 802872e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8028730:	2b00      	cmp	r3, #0
 8028732:	d001      	beq.n	8028738 <x509ParseEcParameters+0x28>
      return error;
 8028734:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8028736:	e006      	b.n	8028746 <x509ParseEcParameters+0x36>

   //The namedCurve field identifies all the required values for a particular
   //set of elliptic curve domain parameters to be represented by an object
   //identifier
   ecParams->namedCurve.value = tag.value;
 8028738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802873a:	687b      	ldr	r3, [r7, #4]
 802873c:	601a      	str	r2, [r3, #0]
   ecParams->namedCurve.length = tag.length;
 802873e:	6a3a      	ldr	r2, [r7, #32]
 8028740:	687b      	ldr	r3, [r7, #4]
 8028742:	605a      	str	r2, [r3, #4]

   //Successful processing
   return NO_ERROR;
 8028744:	2300      	movs	r3, #0
}
 8028746:	4618      	mov	r0, r3
 8028748:	3730      	adds	r7, #48	@ 0x30
 802874a:	46bd      	mov	sp, r7
 802874c:	bd80      	pop	{r7, pc}
	...

08028750 <x509ImportRsaPublicKey>:
 * @return Error code
 **/

error_t x509ImportRsaPublicKey(RsaPublicKey *publicKey,
   const X509SubjectPublicKeyInfo *publicKeyInfo)
{
 8028750:	b580      	push	{r7, lr}
 8028752:	b086      	sub	sp, #24
 8028754:	af00      	add	r7, sp, #0
 8028756:	6078      	str	r0, [r7, #4]
 8028758:	6039      	str	r1, [r7, #0]
#if (RSA_SUPPORT == ENABLED)
   const uint8_t *oid;
   size_t oidLen;

   //Get the public key algorithm identifier
   oid = publicKeyInfo->oid.value;
 802875a:	683b      	ldr	r3, [r7, #0]
 802875c:	689b      	ldr	r3, [r3, #8]
 802875e:	613b      	str	r3, [r7, #16]
   oidLen = publicKeyInfo->oid.length;
 8028760:	683b      	ldr	r3, [r7, #0]
 8028762:	68db      	ldr	r3, [r3, #12]
 8028764:	60fb      	str	r3, [r7, #12]

   //RSA algorithm identifier?
   if(OID_COMP(oid, oidLen, RSA_ENCRYPTION_OID) == 0 ||
 8028766:	2309      	movs	r3, #9
 8028768:	4a1f      	ldr	r2, [pc, #124]	@ (80287e8 <x509ImportRsaPublicKey+0x98>)
 802876a:	68f9      	ldr	r1, [r7, #12]
 802876c:	6938      	ldr	r0, [r7, #16]
 802876e:	f7fd f827 	bl	80257c0 <oidComp>
 8028772:	4603      	mov	r3, r0
 8028774:	2b00      	cmp	r3, #0
 8028776:	d008      	beq.n	802878a <x509ImportRsaPublicKey+0x3a>
      OID_COMP(oid, oidLen, RSASSA_PSS_OID) == 0)
 8028778:	2309      	movs	r3, #9
 802877a:	4a1c      	ldr	r2, [pc, #112]	@ (80287ec <x509ImportRsaPublicKey+0x9c>)
 802877c:	68f9      	ldr	r1, [r7, #12]
 802877e:	6938      	ldr	r0, [r7, #16]
 8028780:	f7fd f81e 	bl	80257c0 <oidComp>
 8028784:	4603      	mov	r3, r0
   if(OID_COMP(oid, oidLen, RSA_ENCRYPTION_OID) == 0 ||
 8028786:	2b00      	cmp	r3, #0
 8028788:	d126      	bne.n	80287d8 <x509ImportRsaPublicKey+0x88>
   {
      //Sanity check
      if(publicKeyInfo->rsaPublicKey.n.value != NULL &&
 802878a:	683b      	ldr	r3, [r7, #0]
 802878c:	699b      	ldr	r3, [r3, #24]
 802878e:	2b00      	cmp	r3, #0
 8028790:	d01d      	beq.n	80287ce <x509ImportRsaPublicKey+0x7e>
         publicKeyInfo->rsaPublicKey.e.value != NULL)
 8028792:	683b      	ldr	r3, [r7, #0]
 8028794:	6a1b      	ldr	r3, [r3, #32]
      if(publicKeyInfo->rsaPublicKey.n.value != NULL &&
 8028796:	2b00      	cmp	r3, #0
 8028798:	d019      	beq.n	80287ce <x509ImportRsaPublicKey+0x7e>
      {
         //Read modulus
         error = mpiImport(&publicKey->n, publicKeyInfo->rsaPublicKey.n.value,
 802879a:	6878      	ldr	r0, [r7, #4]
 802879c:	683b      	ldr	r3, [r7, #0]
 802879e:	6999      	ldr	r1, [r3, #24]
            publicKeyInfo->rsaPublicKey.n.length, MPI_FORMAT_BIG_ENDIAN);
 80287a0:	683b      	ldr	r3, [r7, #0]
 80287a2:	69da      	ldr	r2, [r3, #28]
         error = mpiImport(&publicKey->n, publicKeyInfo->rsaPublicKey.n.value,
 80287a4:	2301      	movs	r3, #1
 80287a6:	f7fd fe9b 	bl	80264e0 <mpiImport>
 80287aa:	4603      	mov	r3, r0
 80287ac:	82fb      	strh	r3, [r7, #22]

         //Check status code
         if(!error)
 80287ae:	8afb      	ldrh	r3, [r7, #22]
 80287b0:	2b00      	cmp	r3, #0
 80287b2:	d10f      	bne.n	80287d4 <x509ImportRsaPublicKey+0x84>
         {
            //Read public exponent
            error = mpiImport(&publicKey->e, publicKeyInfo->rsaPublicKey.e.value,
 80287b4:	687b      	ldr	r3, [r7, #4]
 80287b6:	f103 000c 	add.w	r0, r3, #12
 80287ba:	683b      	ldr	r3, [r7, #0]
 80287bc:	6a19      	ldr	r1, [r3, #32]
               publicKeyInfo->rsaPublicKey.e.length, MPI_FORMAT_BIG_ENDIAN);
 80287be:	683b      	ldr	r3, [r7, #0]
 80287c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            error = mpiImport(&publicKey->e, publicKeyInfo->rsaPublicKey.e.value,
 80287c2:	2301      	movs	r3, #1
 80287c4:	f7fd fe8c 	bl	80264e0 <mpiImport>
 80287c8:	4603      	mov	r3, r0
 80287ca:	82fb      	strh	r3, [r7, #22]
         }

         //Check status code
         if(!error)
 80287cc:	e002      	b.n	80287d4 <x509ImportRsaPublicKey+0x84>
         }
      }
      else
      {
         //The public key is not valid
         error = ERROR_INVALID_KEY;
 80287ce:	23e7      	movs	r3, #231	@ 0xe7
 80287d0:	82fb      	strh	r3, [r7, #22]
      if(publicKeyInfo->rsaPublicKey.n.value != NULL &&
 80287d2:	e003      	b.n	80287dc <x509ImportRsaPublicKey+0x8c>
         if(!error)
 80287d4:	bf00      	nop
      if(publicKeyInfo->rsaPublicKey.n.value != NULL &&
 80287d6:	e001      	b.n	80287dc <x509ImportRsaPublicKey+0x8c>
   else
#endif
   //Invalid algorithm identifier?
   {
      //Report an error
      error = ERROR_WRONG_IDENTIFIER;
 80287d8:	23d6      	movs	r3, #214	@ 0xd6
 80287da:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 80287dc:	8afb      	ldrh	r3, [r7, #22]
}
 80287de:	4618      	mov	r0, r3
 80287e0:	3718      	adds	r7, #24
 80287e2:	46bd      	mov	sp, r7
 80287e4:	bd80      	pop	{r7, pc}
 80287e6:	bf00      	nop
 80287e8:	0803302c 	.word	0x0803302c
 80287ec:	08033038 	.word	0x08033038

080287f0 <prv_out_fn_print>:
 * \param[in]       ptr: LwPRINTF internal instance
 * \param[in]       chr: Character to print
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_fn_print(lwprintf_int_t* lwi, const char chr) {
 80287f0:	b580      	push	{r7, lr}
 80287f2:	b082      	sub	sp, #8
 80287f4:	af00      	add	r7, sp, #0
 80287f6:	6078      	str	r0, [r7, #4]
 80287f8:	460b      	mov	r3, r1
 80287fa:	70fb      	strb	r3, [r7, #3]
    if (lwi->is_print_cancelled) {
 80287fc:	687b      	ldr	r3, [r7, #4]
 80287fe:	7e1b      	ldrb	r3, [r3, #24]
 8028800:	2b00      	cmp	r3, #0
 8028802:	d001      	beq.n	8028808 <prv_out_fn_print+0x18>
        return 0;
 8028804:	2300      	movs	r3, #0
 8028806:	e01a      	b.n	802883e <prv_out_fn_print+0x4e>
    }

    /* Send character to output */
    if (!lwi->lwobj->out_fn(chr, lwi->lwobj)) {
 8028808:	687b      	ldr	r3, [r7, #4]
 802880a:	681b      	ldr	r3, [r3, #0]
 802880c:	681b      	ldr	r3, [r3, #0]
 802880e:	78f8      	ldrb	r0, [r7, #3]
 8028810:	687a      	ldr	r2, [r7, #4]
 8028812:	6812      	ldr	r2, [r2, #0]
 8028814:	4611      	mov	r1, r2
 8028816:	4798      	blx	r3
 8028818:	4603      	mov	r3, r0
 802881a:	2b00      	cmp	r3, #0
 802881c:	d102      	bne.n	8028824 <prv_out_fn_print+0x34>
        lwi->is_print_cancelled = 1;
 802881e:	687b      	ldr	r3, [r7, #4]
 8028820:	2201      	movs	r2, #1
 8028822:	761a      	strb	r2, [r3, #24]
    }
    if (chr != '\0' && !lwi->is_print_cancelled) {
 8028824:	78fb      	ldrb	r3, [r7, #3]
 8028826:	2b00      	cmp	r3, #0
 8028828:	d008      	beq.n	802883c <prv_out_fn_print+0x4c>
 802882a:	687b      	ldr	r3, [r7, #4]
 802882c:	7e1b      	ldrb	r3, [r3, #24]
 802882e:	2b00      	cmp	r3, #0
 8028830:	d104      	bne.n	802883c <prv_out_fn_print+0x4c>
        ++lwi->n_len;
 8028832:	687b      	ldr	r3, [r7, #4]
 8028834:	691b      	ldr	r3, [r3, #16]
 8028836:	1c5a      	adds	r2, r3, #1
 8028838:	687b      	ldr	r3, [r7, #4]
 802883a:	611a      	str	r2, [r3, #16]
    }
    return 1;
 802883c:	2301      	movs	r3, #1
}
 802883e:	4618      	mov	r0, r3
 8028840:	3708      	adds	r7, #8
 8028842:	46bd      	mov	sp, r7
 8028844:	bd80      	pop	{r7, pc}

08028846 <prv_parse_num>:
 * \brief           Parse number from input string
 * \param[in,out]   format: Input text to process
 * \return          Parsed number
 */
static int
prv_parse_num(const char** format) {
 8028846:	b480      	push	{r7}
 8028848:	b085      	sub	sp, #20
 802884a:	af00      	add	r7, sp, #0
 802884c:	6078      	str	r0, [r7, #4]
    int num = 0;
 802884e:	2300      	movs	r3, #0
 8028850:	60fb      	str	r3, [r7, #12]

    for (; CHARISNUM(**format); ++(*format)) {
 8028852:	e010      	b.n	8028876 <prv_parse_num+0x30>
        num = (int)10 * num + CHARTONUM(**format);
 8028854:	68fa      	ldr	r2, [r7, #12]
 8028856:	4613      	mov	r3, r2
 8028858:	009b      	lsls	r3, r3, #2
 802885a:	4413      	add	r3, r2
 802885c:	005b      	lsls	r3, r3, #1
 802885e:	461a      	mov	r2, r3
 8028860:	687b      	ldr	r3, [r7, #4]
 8028862:	681b      	ldr	r3, [r3, #0]
 8028864:	781b      	ldrb	r3, [r3, #0]
 8028866:	3b30      	subs	r3, #48	@ 0x30
 8028868:	4413      	add	r3, r2
 802886a:	60fb      	str	r3, [r7, #12]
    for (; CHARISNUM(**format); ++(*format)) {
 802886c:	687b      	ldr	r3, [r7, #4]
 802886e:	681b      	ldr	r3, [r3, #0]
 8028870:	1c5a      	adds	r2, r3, #1
 8028872:	687b      	ldr	r3, [r7, #4]
 8028874:	601a      	str	r2, [r3, #0]
 8028876:	687b      	ldr	r3, [r7, #4]
 8028878:	681b      	ldr	r3, [r3, #0]
 802887a:	781b      	ldrb	r3, [r3, #0]
 802887c:	2b2f      	cmp	r3, #47	@ 0x2f
 802887e:	d904      	bls.n	802888a <prv_parse_num+0x44>
 8028880:	687b      	ldr	r3, [r7, #4]
 8028882:	681b      	ldr	r3, [r3, #0]
 8028884:	781b      	ldrb	r3, [r3, #0]
 8028886:	2b39      	cmp	r3, #57	@ 0x39
 8028888:	d9e4      	bls.n	8028854 <prv_parse_num+0xe>
    }
    return num;
 802888a:	68fb      	ldr	r3, [r7, #12]
}
 802888c:	4618      	mov	r0, r3
 802888e:	3714      	adds	r7, #20
 8028890:	46bd      	mov	sp, r7
 8028892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028896:	4770      	bx	lr

08028898 <prv_out_str_before>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_before(lwprintf_int_t* lwi, size_t buff_size) {
 8028898:	b580      	push	{r7, lr}
 802889a:	b084      	sub	sp, #16
 802889c:	af00      	add	r7, sp, #0
 802889e:	6078      	str	r0, [r7, #4]
 80288a0:	6039      	str	r1, [r7, #0]
    /* Check for width */
    if (lwi->m.width > 0
 80288a2:	687b      	ldr	r3, [r7, #4]
 80288a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80288a6:	2b00      	cmp	r3, #0
 80288a8:	dd12      	ble.n	80288d0 <prv_out_str_before+0x38>
        /* If number is negative, add negative sign or if positive and has plus sign forced */
        && (lwi->m.flags.is_negative || lwi->m.flags.plus)) {
 80288aa:	687b      	ldr	r3, [r7, #4]
 80288ac:	7f5b      	ldrb	r3, [r3, #29]
 80288ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80288b2:	b2db      	uxtb	r3, r3
 80288b4:	2b00      	cmp	r3, #0
 80288b6:	d106      	bne.n	80288c6 <prv_out_str_before+0x2e>
 80288b8:	687b      	ldr	r3, [r7, #4]
 80288ba:	7f1b      	ldrb	r3, [r3, #28]
 80288bc:	f003 0302 	and.w	r3, r3, #2
 80288c0:	b2db      	uxtb	r3, r3
 80288c2:	2b00      	cmp	r3, #0
 80288c4:	d004      	beq.n	80288d0 <prv_out_str_before+0x38>
        --lwi->m.width;
 80288c6:	687b      	ldr	r3, [r7, #4]
 80288c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80288ca:	1e5a      	subs	r2, r3, #1
 80288cc:	687b      	ldr	r3, [r7, #4]
 80288ce:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Check for alternate mode */
    if (lwi->m.flags.alt && !lwi->m.flags.is_num_zero) {
 80288d0:	687b      	ldr	r3, [r7, #4]
 80288d2:	7f1b      	ldrb	r3, [r3, #28]
 80288d4:	f003 0320 	and.w	r3, r3, #32
 80288d8:	b2db      	uxtb	r3, r3
 80288da:	2b00      	cmp	r3, #0
 80288dc:	d02c      	beq.n	8028938 <prv_out_str_before+0xa0>
 80288de:	687b      	ldr	r3, [r7, #4]
 80288e0:	7f9b      	ldrb	r3, [r3, #30]
 80288e2:	f003 0301 	and.w	r3, r3, #1
 80288e6:	b2db      	uxtb	r3, r3
 80288e8:	2b00      	cmp	r3, #0
 80288ea:	d125      	bne.n	8028938 <prv_out_str_before+0xa0>
        if (lwi->m.base == 8) {
 80288ec:	687b      	ldr	r3, [r7, #4]
 80288ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80288f2:	2b08      	cmp	r3, #8
 80288f4:	d109      	bne.n	802890a <prv_out_str_before+0x72>
            if (lwi->m.width > 0) {
 80288f6:	687b      	ldr	r3, [r7, #4]
 80288f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80288fa:	2b00      	cmp	r3, #0
 80288fc:	dd1c      	ble.n	8028938 <prv_out_str_before+0xa0>
                --lwi->m.width;
 80288fe:	687b      	ldr	r3, [r7, #4]
 8028900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028902:	1e5a      	subs	r2, r3, #1
 8028904:	687b      	ldr	r3, [r7, #4]
 8028906:	625a      	str	r2, [r3, #36]	@ 0x24
 8028908:	e016      	b.n	8028938 <prv_out_str_before+0xa0>
            }
        } else if (lwi->m.base == 16 || lwi->m.base == 2) {
 802890a:	687b      	ldr	r3, [r7, #4]
 802890c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8028910:	2b10      	cmp	r3, #16
 8028912:	d004      	beq.n	802891e <prv_out_str_before+0x86>
 8028914:	687b      	ldr	r3, [r7, #4]
 8028916:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802891a:	2b02      	cmp	r3, #2
 802891c:	d10c      	bne.n	8028938 <prv_out_str_before+0xa0>
            if (lwi->m.width >= 2) {
 802891e:	687b      	ldr	r3, [r7, #4]
 8028920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028922:	2b01      	cmp	r3, #1
 8028924:	dd05      	ble.n	8028932 <prv_out_str_before+0x9a>
                lwi->m.width -= 2;
 8028926:	687b      	ldr	r3, [r7, #4]
 8028928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802892a:	1e9a      	subs	r2, r3, #2
 802892c:	687b      	ldr	r3, [r7, #4]
 802892e:	625a      	str	r2, [r3, #36]	@ 0x24
 8028930:	e002      	b.n	8028938 <prv_out_str_before+0xa0>
            } else {
                lwi->m.width = 0;
 8028932:	687b      	ldr	r3, [r7, #4]
 8028934:	2200      	movs	r2, #0
 8028936:	625a      	str	r2, [r3, #36]	@ 0x24
            }
        }
    }

    /* Add negative sign (or positive in case of + flag or space in case of space flag) before when zeros are used to fill width */
    if (lwi->m.flags.zero) {
 8028938:	687b      	ldr	r3, [r7, #4]
 802893a:	7f1b      	ldrb	r3, [r3, #28]
 802893c:	f003 0308 	and.w	r3, r3, #8
 8028940:	b2db      	uxtb	r3, r3
 8028942:	2b00      	cmp	r3, #0
 8028944:	d025      	beq.n	8028992 <prv_out_str_before+0xfa>
        if (lwi->m.flags.is_negative) {
 8028946:	687b      	ldr	r3, [r7, #4]
 8028948:	7f5b      	ldrb	r3, [r3, #29]
 802894a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 802894e:	b2db      	uxtb	r3, r3
 8028950:	2b00      	cmp	r3, #0
 8028952:	d005      	beq.n	8028960 <prv_out_str_before+0xc8>
            lwi->out_fn(lwi, '-');
 8028954:	687b      	ldr	r3, [r7, #4]
 8028956:	695b      	ldr	r3, [r3, #20]
 8028958:	212d      	movs	r1, #45	@ 0x2d
 802895a:	6878      	ldr	r0, [r7, #4]
 802895c:	4798      	blx	r3
 802895e:	e018      	b.n	8028992 <prv_out_str_before+0xfa>
        } else if (lwi->m.flags.plus) {
 8028960:	687b      	ldr	r3, [r7, #4]
 8028962:	7f1b      	ldrb	r3, [r3, #28]
 8028964:	f003 0302 	and.w	r3, r3, #2
 8028968:	b2db      	uxtb	r3, r3
 802896a:	2b00      	cmp	r3, #0
 802896c:	d005      	beq.n	802897a <prv_out_str_before+0xe2>
            lwi->out_fn(lwi, '+');
 802896e:	687b      	ldr	r3, [r7, #4]
 8028970:	695b      	ldr	r3, [r3, #20]
 8028972:	212b      	movs	r1, #43	@ 0x2b
 8028974:	6878      	ldr	r0, [r7, #4]
 8028976:	4798      	blx	r3
 8028978:	e00b      	b.n	8028992 <prv_out_str_before+0xfa>
        } else if (lwi->m.flags.space) {
 802897a:	687b      	ldr	r3, [r7, #4]
 802897c:	7f1b      	ldrb	r3, [r3, #28]
 802897e:	f003 0304 	and.w	r3, r3, #4
 8028982:	b2db      	uxtb	r3, r3
 8028984:	2b00      	cmp	r3, #0
 8028986:	d004      	beq.n	8028992 <prv_out_str_before+0xfa>
            lwi->out_fn(lwi, ' ');
 8028988:	687b      	ldr	r3, [r7, #4]
 802898a:	695b      	ldr	r3, [r3, #20]
 802898c:	2120      	movs	r1, #32
 802898e:	6878      	ldr	r0, [r7, #4]
 8028990:	4798      	blx	r3
        }
    }

    /* Check for flags output */
    if (lwi->m.flags.alt && !lwi->m.flags.is_num_zero) {
 8028992:	687b      	ldr	r3, [r7, #4]
 8028994:	7f1b      	ldrb	r3, [r3, #28]
 8028996:	f003 0320 	and.w	r3, r3, #32
 802899a:	b2db      	uxtb	r3, r3
 802899c:	2b00      	cmp	r3, #0
 802899e:	d044      	beq.n	8028a2a <prv_out_str_before+0x192>
 80289a0:	687b      	ldr	r3, [r7, #4]
 80289a2:	7f9b      	ldrb	r3, [r3, #30]
 80289a4:	f003 0301 	and.w	r3, r3, #1
 80289a8:	b2db      	uxtb	r3, r3
 80289aa:	2b00      	cmp	r3, #0
 80289ac:	d13d      	bne.n	8028a2a <prv_out_str_before+0x192>
        if (lwi->m.base == 8) {
 80289ae:	687b      	ldr	r3, [r7, #4]
 80289b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80289b4:	2b08      	cmp	r3, #8
 80289b6:	d105      	bne.n	80289c4 <prv_out_str_before+0x12c>
            lwi->out_fn(lwi, '0');
 80289b8:	687b      	ldr	r3, [r7, #4]
 80289ba:	695b      	ldr	r3, [r3, #20]
 80289bc:	2130      	movs	r1, #48	@ 0x30
 80289be:	6878      	ldr	r0, [r7, #4]
 80289c0:	4798      	blx	r3
 80289c2:	e032      	b.n	8028a2a <prv_out_str_before+0x192>
        } else if (lwi->m.base == 16) {
 80289c4:	687b      	ldr	r3, [r7, #4]
 80289c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80289ca:	2b10      	cmp	r3, #16
 80289cc:	d114      	bne.n	80289f8 <prv_out_str_before+0x160>
            lwi->out_fn(lwi, '0');
 80289ce:	687b      	ldr	r3, [r7, #4]
 80289d0:	695b      	ldr	r3, [r3, #20]
 80289d2:	2130      	movs	r1, #48	@ 0x30
 80289d4:	6878      	ldr	r0, [r7, #4]
 80289d6:	4798      	blx	r3
            lwi->out_fn(lwi, lwi->m.flags.uc ? 'X' : 'x');
 80289d8:	687b      	ldr	r3, [r7, #4]
 80289da:	695b      	ldr	r3, [r3, #20]
 80289dc:	687a      	ldr	r2, [r7, #4]
 80289de:	7f52      	ldrb	r2, [r2, #29]
 80289e0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80289e4:	b2d2      	uxtb	r2, r2
 80289e6:	2a00      	cmp	r2, #0
 80289e8:	d001      	beq.n	80289ee <prv_out_str_before+0x156>
 80289ea:	2258      	movs	r2, #88	@ 0x58
 80289ec:	e000      	b.n	80289f0 <prv_out_str_before+0x158>
 80289ee:	2278      	movs	r2, #120	@ 0x78
 80289f0:	4611      	mov	r1, r2
 80289f2:	6878      	ldr	r0, [r7, #4]
 80289f4:	4798      	blx	r3
 80289f6:	e018      	b.n	8028a2a <prv_out_str_before+0x192>
        } else if (lwi->m.base == 2) {
 80289f8:	687b      	ldr	r3, [r7, #4]
 80289fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80289fe:	2b02      	cmp	r3, #2
 8028a00:	d113      	bne.n	8028a2a <prv_out_str_before+0x192>
            lwi->out_fn(lwi, '0');
 8028a02:	687b      	ldr	r3, [r7, #4]
 8028a04:	695b      	ldr	r3, [r3, #20]
 8028a06:	2130      	movs	r1, #48	@ 0x30
 8028a08:	6878      	ldr	r0, [r7, #4]
 8028a0a:	4798      	blx	r3
            lwi->out_fn(lwi, lwi->m.flags.uc ? 'B' : 'b');
 8028a0c:	687b      	ldr	r3, [r7, #4]
 8028a0e:	695b      	ldr	r3, [r3, #20]
 8028a10:	687a      	ldr	r2, [r7, #4]
 8028a12:	7f52      	ldrb	r2, [r2, #29]
 8028a14:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8028a18:	b2d2      	uxtb	r2, r2
 8028a1a:	2a00      	cmp	r2, #0
 8028a1c:	d001      	beq.n	8028a22 <prv_out_str_before+0x18a>
 8028a1e:	2242      	movs	r2, #66	@ 0x42
 8028a20:	e000      	b.n	8028a24 <prv_out_str_before+0x18c>
 8028a22:	2262      	movs	r2, #98	@ 0x62
 8028a24:	4611      	mov	r1, r2
 8028a26:	6878      	ldr	r0, [r7, #4]
 8028a28:	4798      	blx	r3
        }
    }

    /* Right alignment, spaces or zeros */
    if (!lwi->m.flags.left_align && lwi->m.width > 0) {
 8028a2a:	687b      	ldr	r3, [r7, #4]
 8028a2c:	7f1b      	ldrb	r3, [r3, #28]
 8028a2e:	f003 0301 	and.w	r3, r3, #1
 8028a32:	b2db      	uxtb	r3, r3
 8028a34:	2b00      	cmp	r3, #0
 8028a36:	d125      	bne.n	8028a84 <prv_out_str_before+0x1ec>
 8028a38:	687b      	ldr	r3, [r7, #4]
 8028a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028a3c:	2b00      	cmp	r3, #0
 8028a3e:	dd21      	ble.n	8028a84 <prv_out_str_before+0x1ec>
        for (size_t idx = buff_size; !lwi->m.flags.left_align && idx < (size_t)lwi->m.width; ++idx) {
 8028a40:	683b      	ldr	r3, [r7, #0]
 8028a42:	60fb      	str	r3, [r7, #12]
 8028a44:	e011      	b.n	8028a6a <prv_out_str_before+0x1d2>
            lwi->out_fn(lwi, lwi->m.flags.zero ? '0' : ' ');
 8028a46:	687b      	ldr	r3, [r7, #4]
 8028a48:	695b      	ldr	r3, [r3, #20]
 8028a4a:	687a      	ldr	r2, [r7, #4]
 8028a4c:	7f12      	ldrb	r2, [r2, #28]
 8028a4e:	f002 0208 	and.w	r2, r2, #8
 8028a52:	b2d2      	uxtb	r2, r2
 8028a54:	2a00      	cmp	r2, #0
 8028a56:	d001      	beq.n	8028a5c <prv_out_str_before+0x1c4>
 8028a58:	2230      	movs	r2, #48	@ 0x30
 8028a5a:	e000      	b.n	8028a5e <prv_out_str_before+0x1c6>
 8028a5c:	2220      	movs	r2, #32
 8028a5e:	4611      	mov	r1, r2
 8028a60:	6878      	ldr	r0, [r7, #4]
 8028a62:	4798      	blx	r3
        for (size_t idx = buff_size; !lwi->m.flags.left_align && idx < (size_t)lwi->m.width; ++idx) {
 8028a64:	68fb      	ldr	r3, [r7, #12]
 8028a66:	3301      	adds	r3, #1
 8028a68:	60fb      	str	r3, [r7, #12]
 8028a6a:	687b      	ldr	r3, [r7, #4]
 8028a6c:	7f1b      	ldrb	r3, [r3, #28]
 8028a6e:	f003 0301 	and.w	r3, r3, #1
 8028a72:	b2db      	uxtb	r3, r3
 8028a74:	2b00      	cmp	r3, #0
 8028a76:	d105      	bne.n	8028a84 <prv_out_str_before+0x1ec>
 8028a78:	687b      	ldr	r3, [r7, #4]
 8028a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028a7c:	461a      	mov	r2, r3
 8028a7e:	68fb      	ldr	r3, [r7, #12]
 8028a80:	4293      	cmp	r3, r2
 8028a82:	d3e0      	bcc.n	8028a46 <prv_out_str_before+0x1ae>
        }
    }

    /* Add negative sign here when spaces are used for width */
    if (!lwi->m.flags.zero) {
 8028a84:	687b      	ldr	r3, [r7, #4]
 8028a86:	7f1b      	ldrb	r3, [r3, #28]
 8028a88:	f003 0308 	and.w	r3, r3, #8
 8028a8c:	b2db      	uxtb	r3, r3
 8028a8e:	2b00      	cmp	r3, #0
 8028a90:	d12b      	bne.n	8028aea <prv_out_str_before+0x252>
        if (lwi->m.flags.is_negative) {
 8028a92:	687b      	ldr	r3, [r7, #4]
 8028a94:	7f5b      	ldrb	r3, [r3, #29]
 8028a96:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8028a9a:	b2db      	uxtb	r3, r3
 8028a9c:	2b00      	cmp	r3, #0
 8028a9e:	d005      	beq.n	8028aac <prv_out_str_before+0x214>
            lwi->out_fn(lwi, '-');
 8028aa0:	687b      	ldr	r3, [r7, #4]
 8028aa2:	695b      	ldr	r3, [r3, #20]
 8028aa4:	212d      	movs	r1, #45	@ 0x2d
 8028aa6:	6878      	ldr	r0, [r7, #4]
 8028aa8:	4798      	blx	r3
 8028aaa:	e01e      	b.n	8028aea <prv_out_str_before+0x252>
        } else if (lwi->m.flags.plus) {
 8028aac:	687b      	ldr	r3, [r7, #4]
 8028aae:	7f1b      	ldrb	r3, [r3, #28]
 8028ab0:	f003 0302 	and.w	r3, r3, #2
 8028ab4:	b2db      	uxtb	r3, r3
 8028ab6:	2b00      	cmp	r3, #0
 8028ab8:	d005      	beq.n	8028ac6 <prv_out_str_before+0x22e>
            lwi->out_fn(lwi, '+');
 8028aba:	687b      	ldr	r3, [r7, #4]
 8028abc:	695b      	ldr	r3, [r3, #20]
 8028abe:	212b      	movs	r1, #43	@ 0x2b
 8028ac0:	6878      	ldr	r0, [r7, #4]
 8028ac2:	4798      	blx	r3
 8028ac4:	e011      	b.n	8028aea <prv_out_str_before+0x252>
        } else if (lwi->m.flags.space && buff_size >= (size_t)lwi->m.width) {
 8028ac6:	687b      	ldr	r3, [r7, #4]
 8028ac8:	7f1b      	ldrb	r3, [r3, #28]
 8028aca:	f003 0304 	and.w	r3, r3, #4
 8028ace:	b2db      	uxtb	r3, r3
 8028ad0:	2b00      	cmp	r3, #0
 8028ad2:	d00a      	beq.n	8028aea <prv_out_str_before+0x252>
 8028ad4:	687b      	ldr	r3, [r7, #4]
 8028ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028ad8:	461a      	mov	r2, r3
 8028ada:	683b      	ldr	r3, [r7, #0]
 8028adc:	4293      	cmp	r3, r2
 8028ade:	d304      	bcc.n	8028aea <prv_out_str_before+0x252>
            lwi->out_fn(lwi, ' ');
 8028ae0:	687b      	ldr	r3, [r7, #4]
 8028ae2:	695b      	ldr	r3, [r3, #20]
 8028ae4:	2120      	movs	r1, #32
 8028ae6:	6878      	ldr	r0, [r7, #4]
 8028ae8:	4798      	blx	r3
        }
    }

    return 1;
 8028aea:	2301      	movs	r3, #1
}
 8028aec:	4618      	mov	r0, r3
 8028aee:	3710      	adds	r7, #16
 8028af0:	46bd      	mov	sp, r7
 8028af2:	bd80      	pop	{r7, pc}

08028af4 <prv_out_str_after>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_after(lwprintf_int_t* lwi, size_t buff_size) {
 8028af4:	b580      	push	{r7, lr}
 8028af6:	b084      	sub	sp, #16
 8028af8:	af00      	add	r7, sp, #0
 8028afa:	6078      	str	r0, [r7, #4]
 8028afc:	6039      	str	r1, [r7, #0]
    /* Left alignment, but only with spaces */
    if (lwi->m.flags.left_align) {
 8028afe:	687b      	ldr	r3, [r7, #4]
 8028b00:	7f1b      	ldrb	r3, [r3, #28]
 8028b02:	f003 0301 	and.w	r3, r3, #1
 8028b06:	b2db      	uxtb	r3, r3
 8028b08:	2b00      	cmp	r3, #0
 8028b0a:	d010      	beq.n	8028b2e <prv_out_str_after+0x3a>
        for (size_t idx = buff_size; idx < (size_t)lwi->m.width; ++idx) {
 8028b0c:	683b      	ldr	r3, [r7, #0]
 8028b0e:	60fb      	str	r3, [r7, #12]
 8028b10:	e007      	b.n	8028b22 <prv_out_str_after+0x2e>
            lwi->out_fn(lwi, ' ');
 8028b12:	687b      	ldr	r3, [r7, #4]
 8028b14:	695b      	ldr	r3, [r3, #20]
 8028b16:	2120      	movs	r1, #32
 8028b18:	6878      	ldr	r0, [r7, #4]
 8028b1a:	4798      	blx	r3
        for (size_t idx = buff_size; idx < (size_t)lwi->m.width; ++idx) {
 8028b1c:	68fb      	ldr	r3, [r7, #12]
 8028b1e:	3301      	adds	r3, #1
 8028b20:	60fb      	str	r3, [r7, #12]
 8028b22:	687b      	ldr	r3, [r7, #4]
 8028b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028b26:	461a      	mov	r2, r3
 8028b28:	68fb      	ldr	r3, [r7, #12]
 8028b2a:	4293      	cmp	r3, r2
 8028b2c:	d3f1      	bcc.n	8028b12 <prv_out_str_after+0x1e>
        }
    }
    return 1;
 8028b2e:	2301      	movs	r3, #1
}
 8028b30:	4618      	mov	r0, r3
 8028b32:	3710      	adds	r7, #16
 8028b34:	46bd      	mov	sp, r7
 8028b36:	bd80      	pop	{r7, pc}

08028b38 <prv_out_str_raw>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_raw(lwprintf_int_t* lwi, const char* buff, size_t buff_size) {
 8028b38:	b580      	push	{r7, lr}
 8028b3a:	b086      	sub	sp, #24
 8028b3c:	af00      	add	r7, sp, #0
 8028b3e:	60f8      	str	r0, [r7, #12]
 8028b40:	60b9      	str	r1, [r7, #8]
 8028b42:	607a      	str	r2, [r7, #4]
    for (size_t idx = 0; idx < buff_size; ++idx) {
 8028b44:	2300      	movs	r3, #0
 8028b46:	617b      	str	r3, [r7, #20]
 8028b48:	e00b      	b.n	8028b62 <prv_out_str_raw+0x2a>
        lwi->out_fn(lwi, buff[idx]);
 8028b4a:	68fb      	ldr	r3, [r7, #12]
 8028b4c:	695b      	ldr	r3, [r3, #20]
 8028b4e:	68b9      	ldr	r1, [r7, #8]
 8028b50:	697a      	ldr	r2, [r7, #20]
 8028b52:	440a      	add	r2, r1
 8028b54:	7812      	ldrb	r2, [r2, #0]
 8028b56:	4611      	mov	r1, r2
 8028b58:	68f8      	ldr	r0, [r7, #12]
 8028b5a:	4798      	blx	r3
    for (size_t idx = 0; idx < buff_size; ++idx) {
 8028b5c:	697b      	ldr	r3, [r7, #20]
 8028b5e:	3301      	adds	r3, #1
 8028b60:	617b      	str	r3, [r7, #20]
 8028b62:	697a      	ldr	r2, [r7, #20]
 8028b64:	687b      	ldr	r3, [r7, #4]
 8028b66:	429a      	cmp	r2, r3
 8028b68:	d3ef      	bcc.n	8028b4a <prv_out_str_raw+0x12>
    }
    return 1;
 8028b6a:	2301      	movs	r3, #1
}
 8028b6c:	4618      	mov	r0, r3
 8028b6e:	3718      	adds	r7, #24
 8028b70:	46bd      	mov	sp, r7
 8028b72:	bd80      	pop	{r7, pc}

08028b74 <prv_out_str>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str(lwprintf_int_t* lwi, const char* buff, size_t buff_size) {
 8028b74:	b580      	push	{r7, lr}
 8028b76:	b084      	sub	sp, #16
 8028b78:	af00      	add	r7, sp, #0
 8028b7a:	60f8      	str	r0, [r7, #12]
 8028b7c:	60b9      	str	r1, [r7, #8]
 8028b7e:	607a      	str	r2, [r7, #4]
    prv_out_str_before(lwi, buff_size);    /* Implement pre-format */
 8028b80:	6879      	ldr	r1, [r7, #4]
 8028b82:	68f8      	ldr	r0, [r7, #12]
 8028b84:	f7ff fe88 	bl	8028898 <prv_out_str_before>
    prv_out_str_raw(lwi, buff, buff_size); /* Print actual string */
 8028b88:	687a      	ldr	r2, [r7, #4]
 8028b8a:	68b9      	ldr	r1, [r7, #8]
 8028b8c:	68f8      	ldr	r0, [r7, #12]
 8028b8e:	f7ff ffd3 	bl	8028b38 <prv_out_str_raw>
    prv_out_str_after(lwi, buff_size);     /* Implement post-format */
 8028b92:	6879      	ldr	r1, [r7, #4]
 8028b94:	68f8      	ldr	r0, [r7, #12]
 8028b96:	f7ff ffad 	bl	8028af4 <prv_out_str_after>

    return 1;
 8028b9a:	2301      	movs	r3, #1
}
 8028b9c:	4618      	mov	r0, r3
 8028b9e:	3710      	adds	r7, #16
 8028ba0:	46bd      	mov	sp, r7
 8028ba2:	bd80      	pop	{r7, pc}

08028ba4 <prv_longest_unsigned_int_to_str>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_longest_unsigned_int_to_str(lwprintf_int_t* lwi, uint_maxtype_t num) {
 8028ba4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8028ba8:	b092      	sub	sp, #72	@ 0x48
 8028baa:	af00      	add	r7, sp, #0
 8028bac:	60f8      	str	r0, [r7, #12]
 8028bae:	e9c7 2300 	strd	r2, r3, [r7]
    /* Start with digits length, support binary with int, that is 32-bits maximum width */
    char num_buf[33], *num_buf_ptr = &num_buf[sizeof(num_buf)];
 8028bb2:	f107 0314 	add.w	r3, r7, #20
 8028bb6:	3321      	adds	r3, #33	@ 0x21
 8028bb8:	647b      	str	r3, [r7, #68]	@ 0x44
    char adder_ch = (lwi->m.flags.uc ? 'A' : 'a') - 10;
 8028bba:	68fb      	ldr	r3, [r7, #12]
 8028bbc:	7f5b      	ldrb	r3, [r3, #29]
 8028bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8028bc2:	b2db      	uxtb	r3, r3
 8028bc4:	2b00      	cmp	r3, #0
 8028bc6:	d001      	beq.n	8028bcc <prv_longest_unsigned_int_to_str+0x28>
 8028bc8:	2337      	movs	r3, #55	@ 0x37
 8028bca:	e000      	b.n	8028bce <prv_longest_unsigned_int_to_str+0x2a>
 8028bcc:	2357      	movs	r3, #87	@ 0x57
 8028bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    size_t len = 0;
 8028bd2:	2300      	movs	r3, #0
 8028bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check if number is zero */
    lwi->m.flags.is_num_zero = num == 0;
 8028bd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8028bda:	4313      	orrs	r3, r2
 8028bdc:	bf0c      	ite	eq
 8028bde:	2301      	moveq	r3, #1
 8028be0:	2300      	movne	r3, #0
 8028be2:	b2d9      	uxtb	r1, r3
 8028be4:	68fa      	ldr	r2, [r7, #12]
 8028be6:	7f93      	ldrb	r3, [r2, #30]
 8028be8:	f361 0300 	bfi	r3, r1, #0, #1
 8028bec:	7793      	strb	r3, [r2, #30]

    /* Fill the buffer backward */
    *--num_buf_ptr = '\0';
 8028bee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8028bf0:	3b01      	subs	r3, #1
 8028bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8028bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8028bf6:	2200      	movs	r2, #0
 8028bf8:	701a      	strb	r2, [r3, #0]
    do {
        int digit = num % lwi->m.base;
 8028bfa:	68fb      	ldr	r3, [r7, #12]
 8028bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8028c00:	b2db      	uxtb	r3, r3
 8028c02:	2200      	movs	r2, #0
 8028c04:	461c      	mov	r4, r3
 8028c06:	4615      	mov	r5, r2
 8028c08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8028c0c:	4622      	mov	r2, r4
 8028c0e:	462b      	mov	r3, r5
 8028c10:	f7f8 f9dc 	bl	8020fcc <__aeabi_uldivmod>
 8028c14:	4613      	mov	r3, r2
 8028c16:	63bb      	str	r3, [r7, #56]	@ 0x38
        num /= lwi->m.base;
 8028c18:	68fb      	ldr	r3, [r7, #12]
 8028c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8028c1e:	b2db      	uxtb	r3, r3
 8028c20:	2200      	movs	r2, #0
 8028c22:	4698      	mov	r8, r3
 8028c24:	4691      	mov	r9, r2
 8028c26:	4642      	mov	r2, r8
 8028c28:	464b      	mov	r3, r9
 8028c2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8028c2e:	f7f8 f9cd 	bl	8020fcc <__aeabi_uldivmod>
 8028c32:	4602      	mov	r2, r0
 8028c34:	460b      	mov	r3, r1
 8028c36:	e9c7 2300 	strd	r2, r3, [r7]
        *--num_buf_ptr = (char)digit + (char)(digit >= 10 ? adder_ch : '0');
 8028c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028c3c:	b2da      	uxtb	r2, r3
 8028c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028c40:	2b09      	cmp	r3, #9
 8028c42:	dd02      	ble.n	8028c4a <prv_longest_unsigned_int_to_str+0xa6>
 8028c44:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8028c48:	e000      	b.n	8028c4c <prv_longest_unsigned_int_to_str+0xa8>
 8028c4a:	2330      	movs	r3, #48	@ 0x30
 8028c4c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8028c4e:	3901      	subs	r1, #1
 8028c50:	6479      	str	r1, [r7, #68]	@ 0x44
 8028c52:	4413      	add	r3, r2
 8028c54:	b2da      	uxtb	r2, r3
 8028c56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8028c58:	701a      	strb	r2, [r3, #0]
    } while (num > 0);
 8028c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8028c5e:	4313      	orrs	r3, r2
 8028c60:	d1cb      	bne.n	8028bfa <prv_longest_unsigned_int_to_str+0x56>

    /* Calculate and generate the output */
    len = sizeof(num_buf) - (size_t)((uintptr_t)num_buf_ptr - (uintptr_t)num_buf) - 1;
 8028c62:	f107 0214 	add.w	r2, r7, #20
 8028c66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8028c68:	1ad3      	subs	r3, r2, r3
 8028c6a:	3320      	adds	r3, #32
 8028c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    prv_out_str_before(lwi, len);
 8028c6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8028c70:	68f8      	ldr	r0, [r7, #12]
 8028c72:	f7ff fe11 	bl	8028898 <prv_out_str_before>
    for (; *num_buf_ptr;) {
 8028c76:	e008      	b.n	8028c8a <prv_longest_unsigned_int_to_str+0xe6>
        lwi->out_fn(lwi, *num_buf_ptr++);
 8028c78:	68fb      	ldr	r3, [r7, #12]
 8028c7a:	695a      	ldr	r2, [r3, #20]
 8028c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8028c7e:	1c59      	adds	r1, r3, #1
 8028c80:	6479      	str	r1, [r7, #68]	@ 0x44
 8028c82:	781b      	ldrb	r3, [r3, #0]
 8028c84:	4619      	mov	r1, r3
 8028c86:	68f8      	ldr	r0, [r7, #12]
 8028c88:	4790      	blx	r2
    for (; *num_buf_ptr;) {
 8028c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8028c8c:	781b      	ldrb	r3, [r3, #0]
 8028c8e:	2b00      	cmp	r3, #0
 8028c90:	d1f2      	bne.n	8028c78 <prv_longest_unsigned_int_to_str+0xd4>
    }
    prv_out_str_after(lwi, len);
 8028c92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8028c94:	68f8      	ldr	r0, [r7, #12]
 8028c96:	f7ff ff2d 	bl	8028af4 <prv_out_str_after>
    return 1;
 8028c9a:	2301      	movs	r3, #1
}
 8028c9c:	4618      	mov	r0, r3
 8028c9e:	3748      	adds	r7, #72	@ 0x48
 8028ca0:	46bd      	mov	sp, r7
 8028ca2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08028ca6 <prv_longest_signed_int_to_str>:
 * \param[in,out]   lwi: LwPRINTF instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_longest_signed_int_to_str(lwprintf_int_t* lwi, int_maxtype_t num) {
 8028ca6:	b5b0      	push	{r4, r5, r7, lr}
 8028ca8:	b084      	sub	sp, #16
 8028caa:	af00      	add	r7, sp, #0
 8028cac:	60f8      	str	r0, [r7, #12]
 8028cae:	e9c7 2300 	strd	r2, r3, [r7]
    SIGNED_CHECK_NEGATIVE(lwi, num);
 8028cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8028cb6:	2b00      	cmp	r3, #0
 8028cb8:	da0c      	bge.n	8028cd4 <prv_longest_signed_int_to_str+0x2e>
 8028cba:	68fa      	ldr	r2, [r7, #12]
 8028cbc:	7f53      	ldrb	r3, [r2, #29]
 8028cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8028cc2:	7753      	strb	r3, [r2, #29]
 8028cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8028cc8:	2100      	movs	r1, #0
 8028cca:	4254      	negs	r4, r2
 8028ccc:	eb61 0503 	sbc.w	r5, r1, r3
 8028cd0:	e9c7 4500 	strd	r4, r5, [r7]
    return prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)num);
 8028cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8028cd8:	68f8      	ldr	r0, [r7, #12]
 8028cda:	f7ff ff63 	bl	8028ba4 <prv_longest_unsigned_int_to_str>
 8028cde:	4603      	mov	r3, r0
}
 8028ce0:	4618      	mov	r0, r3
 8028ce2:	3710      	adds	r7, #16
 8028ce4:	46bd      	mov	sp, r7
 8028ce6:	bdb0      	pop	{r4, r5, r7, pc}

08028ce8 <prv_strnlen>:
 * \param           str: String to calculate
 * \param           max_n: Max number of bytes at which length is cut
 * \return          String length in bytes
 */
size_t
prv_strnlen(const char* str, size_t max_n) {
 8028ce8:	b480      	push	{r7}
 8028cea:	b085      	sub	sp, #20
 8028cec:	af00      	add	r7, sp, #0
 8028cee:	6078      	str	r0, [r7, #4]
 8028cf0:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8028cf2:	2300      	movs	r3, #0
 8028cf4:	60fb      	str	r3, [r7, #12]

    for (; *str != '\0' && length < max_n; ++length, ++str) {}
 8028cf6:	e005      	b.n	8028d04 <prv_strnlen+0x1c>
 8028cf8:	68fb      	ldr	r3, [r7, #12]
 8028cfa:	3301      	adds	r3, #1
 8028cfc:	60fb      	str	r3, [r7, #12]
 8028cfe:	687b      	ldr	r3, [r7, #4]
 8028d00:	3301      	adds	r3, #1
 8028d02:	607b      	str	r3, [r7, #4]
 8028d04:	687b      	ldr	r3, [r7, #4]
 8028d06:	781b      	ldrb	r3, [r3, #0]
 8028d08:	2b00      	cmp	r3, #0
 8028d0a:	d003      	beq.n	8028d14 <prv_strnlen+0x2c>
 8028d0c:	68fa      	ldr	r2, [r7, #12]
 8028d0e:	683b      	ldr	r3, [r7, #0]
 8028d10:	429a      	cmp	r2, r3
 8028d12:	d3f1      	bcc.n	8028cf8 <prv_strnlen+0x10>
    return length;
 8028d14:	68fb      	ldr	r3, [r7, #12]
}
 8028d16:	4618      	mov	r0, r3
 8028d18:	3714      	adds	r7, #20
 8028d1a:	46bd      	mov	sp, r7
 8028d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d20:	4770      	bx	lr
 8028d22:	0000      	movs	r0, r0
 8028d24:	0000      	movs	r0, r0
	...

08028d28 <prv_calculate_dbl_num_data>:
 * \param[in]       n: Float number instance
 * \param[in]       num: Input number
 * \param[in]       type: Format type
 */
static void
prv_calculate_dbl_num_data(lwprintf_int_t* lwi, float_num_t* n, double num, const char type) {
 8028d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8028d2c:	b090      	sub	sp, #64	@ 0x40
 8028d2e:	af00      	add	r7, sp, #0
 8028d30:	6278      	str	r0, [r7, #36]	@ 0x24
 8028d32:	6239      	str	r1, [r7, #32]
 8028d34:	ed87 0b06 	vstr	d0, [r7, #24]
 8028d38:	4613      	mov	r3, r2
 8028d3a:	75fb      	strb	r3, [r7, #23]
    memset(n, 0x00, sizeof(*n));
 8028d3c:	2228      	movs	r2, #40	@ 0x28
 8028d3e:	2100      	movs	r1, #0
 8028d40:	6a38      	ldr	r0, [r7, #32]
 8028d42:	f007 fb31 	bl	80303a8 <memset>

    if (lwi->m.precision >= (int)LWPRINTF_ARRAYSIZE(powers_of_10)) {
 8028d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028d48:	6a1b      	ldr	r3, [r3, #32]
 8028d4a:	2b12      	cmp	r3, #18
 8028d4c:	dd02      	ble.n	8028d54 <prv_calculate_dbl_num_data+0x2c>
        lwi->m.precision = (int)LWPRINTF_ARRAYSIZE(powers_of_10) - 1;
 8028d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028d50:	2212      	movs	r2, #18
 8028d52:	621a      	str	r2, [r3, #32]
     * decimal_part_dbl = 3456.78   -> Decimal part multiplied by 10^precision, keeping it in double format
     * decimal_part = 3456          -> Integer part of decimal number
     * diff = 0.78                  -> Difference between actual decimal and integer part of decimal
     *                                  This is used for rounding of last digit (if necessary)
     */
    num += 0.000000000000005;
 8028d54:	a3a2      	add	r3, pc, #648	@ (adr r3, 8028fe0 <prv_calculate_dbl_num_data+0x2b8>)
 8028d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028d5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8028d5e:	f7f7 fc95 	bl	802068c <__adddf3>
 8028d62:	4602      	mov	r2, r0
 8028d64:	460b      	mov	r3, r1
 8028d66:	e9c7 2306 	strd	r2, r3, [r7, #24]
    n->integer_part = (float_long_t)num;
 8028d6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8028d6e:	f7f8 f945 	bl	8020ffc <__aeabi_d2lz>
 8028d72:	4602      	mov	r2, r0
 8028d74:	460b      	mov	r3, r1
 8028d76:	6a39      	ldr	r1, [r7, #32]
 8028d78:	e9c1 2300 	strd	r2, r3, [r1]
    n->decimal_part_dbl = (num - (double)n->integer_part) * (double)powers_of_10[lwi->m.precision];
 8028d7c:	6a3b      	ldr	r3, [r7, #32]
 8028d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028d82:	4610      	mov	r0, r2
 8028d84:	4619      	mov	r1, r3
 8028d86:	f7f7 fe09 	bl	802099c <__aeabi_l2d>
 8028d8a:	4602      	mov	r2, r0
 8028d8c:	460b      	mov	r3, r1
 8028d8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8028d92:	f7f7 fc79 	bl	8020688 <__aeabi_dsub>
 8028d96:	4602      	mov	r2, r0
 8028d98:	460b      	mov	r3, r1
 8028d9a:	4614      	mov	r4, r2
 8028d9c:	461d      	mov	r5, r3
 8028d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028da0:	6a1b      	ldr	r3, [r3, #32]
 8028da2:	4a8d      	ldr	r2, [pc, #564]	@ (8028fd8 <prv_calculate_dbl_num_data+0x2b0>)
 8028da4:	00db      	lsls	r3, r3, #3
 8028da6:	4413      	add	r3, r2
 8028da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028dac:	4610      	mov	r0, r2
 8028dae:	4619      	mov	r1, r3
 8028db0:	f7f7 fdf4 	bl	802099c <__aeabi_l2d>
 8028db4:	4602      	mov	r2, r0
 8028db6:	460b      	mov	r3, r1
 8028db8:	4620      	mov	r0, r4
 8028dba:	4629      	mov	r1, r5
 8028dbc:	f7f7 fe1c 	bl	80209f8 <__aeabi_dmul>
 8028dc0:	4602      	mov	r2, r0
 8028dc2:	460b      	mov	r3, r1
 8028dc4:	6a39      	ldr	r1, [r7, #32]
 8028dc6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    n->decimal_part = (float_long_t)n->decimal_part_dbl;
 8028dca:	6a3b      	ldr	r3, [r7, #32]
 8028dcc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8028dd0:	4610      	mov	r0, r2
 8028dd2:	4619      	mov	r1, r3
 8028dd4:	f7f8 f912 	bl	8020ffc <__aeabi_d2lz>
 8028dd8:	4602      	mov	r2, r0
 8028dda:	460b      	mov	r3, r1
 8028ddc:	6a39      	ldr	r1, [r7, #32]
 8028dde:	e9c1 2304 	strd	r2, r3, [r1, #16]
    n->diff = n->decimal_part_dbl - (double)((float_long_t)n->decimal_part);
 8028de2:	6a3b      	ldr	r3, [r7, #32]
 8028de4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8028de8:	6a3b      	ldr	r3, [r7, #32]
 8028dea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8028dee:	4610      	mov	r0, r2
 8028df0:	4619      	mov	r1, r3
 8028df2:	f7f7 fdd3 	bl	802099c <__aeabi_l2d>
 8028df6:	4602      	mov	r2, r0
 8028df8:	460b      	mov	r3, r1
 8028dfa:	4620      	mov	r0, r4
 8028dfc:	4629      	mov	r1, r5
 8028dfe:	f7f7 fc43 	bl	8020688 <__aeabi_dsub>
 8028e02:	4602      	mov	r2, r0
 8028e04:	460b      	mov	r3, r1
 8028e06:	6a39      	ldr	r1, [r7, #32]
 8028e08:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* Rounding check of last digit */
    if (n->diff > 0.5) {
 8028e0c:	6a3b      	ldr	r3, [r7, #32]
 8028e0e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8028e12:	f04f 0200 	mov.w	r2, #0
 8028e16:	4b71      	ldr	r3, [pc, #452]	@ (8028fdc <prv_calculate_dbl_num_data+0x2b4>)
 8028e18:	f7f8 f87e 	bl	8020f18 <__aeabi_dcmpgt>
 8028e1c:	4603      	mov	r3, r0
 8028e1e:	2b00      	cmp	r3, #0
 8028e20:	d02f      	beq.n	8028e82 <prv_calculate_dbl_num_data+0x15a>
        ++n->decimal_part;
 8028e22:	6a3b      	ldr	r3, [r7, #32]
 8028e24:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8028e28:	1c51      	adds	r1, r2, #1
 8028e2a:	60b9      	str	r1, [r7, #8]
 8028e2c:	f143 0300 	adc.w	r3, r3, #0
 8028e30:	60fb      	str	r3, [r7, #12]
 8028e32:	6a3b      	ldr	r3, [r7, #32]
 8028e34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8028e38:	e9c3 1204 	strd	r1, r2, [r3, #16]
        if (n->decimal_part >= powers_of_10[lwi->m.precision]) {
 8028e3c:	6a3b      	ldr	r3, [r7, #32]
 8028e3e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8028e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028e44:	6a1b      	ldr	r3, [r3, #32]
 8028e46:	4a64      	ldr	r2, [pc, #400]	@ (8028fd8 <prv_calculate_dbl_num_data+0x2b0>)
 8028e48:	00db      	lsls	r3, r3, #3
 8028e4a:	4413      	add	r3, r2
 8028e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028e50:	4290      	cmp	r0, r2
 8028e52:	eb71 0303 	sbcs.w	r3, r1, r3
 8028e56:	db39      	blt.n	8028ecc <prv_calculate_dbl_num_data+0x1a4>
            n->decimal_part = 0;
 8028e58:	6a39      	ldr	r1, [r7, #32]
 8028e5a:	f04f 0200 	mov.w	r2, #0
 8028e5e:	f04f 0300 	mov.w	r3, #0
 8028e62:	e9c1 2304 	strd	r2, r3, [r1, #16]
            ++n->integer_part;
 8028e66:	6a3b      	ldr	r3, [r7, #32]
 8028e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028e6c:	1c51      	adds	r1, r2, #1
 8028e6e:	6039      	str	r1, [r7, #0]
 8028e70:	f143 0300 	adc.w	r3, r3, #0
 8028e74:	607b      	str	r3, [r7, #4]
 8028e76:	6a3b      	ldr	r3, [r7, #32]
 8028e78:	e9d7 1200 	ldrd	r1, r2, [r7]
 8028e7c:	e9c3 1200 	strd	r1, r2, [r3]
 8028e80:	e024      	b.n	8028ecc <prv_calculate_dbl_num_data+0x1a4>
        }
    } else if (n->diff < 0.5) {
 8028e82:	6a3b      	ldr	r3, [r7, #32]
 8028e84:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8028e88:	f04f 0200 	mov.w	r2, #0
 8028e8c:	4b53      	ldr	r3, [pc, #332]	@ (8028fdc <prv_calculate_dbl_num_data+0x2b4>)
 8028e8e:	f7f8 f825 	bl	8020edc <__aeabi_dcmplt>
 8028e92:	4603      	mov	r3, r0
 8028e94:	2b00      	cmp	r3, #0
 8028e96:	d119      	bne.n	8028ecc <prv_calculate_dbl_num_data+0x1a4>
        /* Used in separate if, since comparing float to == will certainly result to false */
    } else {
        /* Difference is exactly 0.5 */
        if (n->decimal_part == 0) {
 8028e98:	6a3b      	ldr	r3, [r7, #32]
 8028e9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8028e9e:	4313      	orrs	r3, r2
 8028ea0:	d10a      	bne.n	8028eb8 <prv_calculate_dbl_num_data+0x190>
            ++n->integer_part;
 8028ea2:	6a3b      	ldr	r3, [r7, #32]
 8028ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028ea8:	f112 0a01 	adds.w	sl, r2, #1
 8028eac:	f143 0b00 	adc.w	fp, r3, #0
 8028eb0:	6a3b      	ldr	r3, [r7, #32]
 8028eb2:	e9c3 ab00 	strd	sl, fp, [r3]
 8028eb6:	e009      	b.n	8028ecc <prv_calculate_dbl_num_data+0x1a4>
        } else {
            ++n->decimal_part;
 8028eb8:	6a3b      	ldr	r3, [r7, #32]
 8028eba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8028ebe:	f112 0801 	adds.w	r8, r2, #1
 8028ec2:	f143 0900 	adc.w	r9, r3, #0
 8028ec6:	6a3b      	ldr	r3, [r7, #32]
 8028ec8:	e9c3 8904 	strd	r8, r9, [r3, #16]
        }
    }

    /* Calculate number of digits for integer and decimal parts */
    if (n->integer_part == 0) {
 8028ecc:	6a3b      	ldr	r3, [r7, #32]
 8028ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028ed2:	4313      	orrs	r3, r2
 8028ed4:	d103      	bne.n	8028ede <prv_calculate_dbl_num_data+0x1b6>
        n->digits_cnt_integer_part = 1;
 8028ed6:	6a3b      	ldr	r3, [r7, #32]
 8028ed8:	2201      	movs	r2, #1
 8028eda:	841a      	strh	r2, [r3, #32]
 8028edc:	e023      	b.n	8028f26 <prv_calculate_dbl_num_data+0x1fe>
    } else {
        float_long_t tmp;
        for (n->digits_cnt_integer_part = 0, tmp = n->integer_part; tmp > 0; ++n->digits_cnt_integer_part, tmp /= 10) {}
 8028ede:	6a3b      	ldr	r3, [r7, #32]
 8028ee0:	2200      	movs	r2, #0
 8028ee2:	841a      	strh	r2, [r3, #32]
 8028ee4:	6a3b      	ldr	r3, [r7, #32]
 8028ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028eea:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8028eee:	e014      	b.n	8028f1a <prv_calculate_dbl_num_data+0x1f2>
 8028ef0:	6a3b      	ldr	r3, [r7, #32]
 8028ef2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8028ef6:	b29b      	uxth	r3, r3
 8028ef8:	3301      	adds	r3, #1
 8028efa:	b29b      	uxth	r3, r3
 8028efc:	b21a      	sxth	r2, r3
 8028efe:	6a3b      	ldr	r3, [r7, #32]
 8028f00:	841a      	strh	r2, [r3, #32]
 8028f02:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8028f06:	f04f 020a 	mov.w	r2, #10
 8028f0a:	f04f 0300 	mov.w	r3, #0
 8028f0e:	f7f8 f80d 	bl	8020f2c <__aeabi_ldivmod>
 8028f12:	4602      	mov	r2, r0
 8028f14:	460b      	mov	r3, r1
 8028f16:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8028f1a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8028f1e:	2a01      	cmp	r2, #1
 8028f20:	f173 0300 	sbcs.w	r3, r3, #0
 8028f24:	dae4      	bge.n	8028ef0 <prv_calculate_dbl_num_data+0x1c8>
    }
    n->digits_cnt_decimal_part = (short)lwi->m.precision;
 8028f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028f28:	6a1b      	ldr	r3, [r3, #32]
 8028f2a:	b21a      	sxth	r2, r3
 8028f2c:	6a3b      	ldr	r3, [r7, #32]
 8028f2e:	845a      	strh	r2, [r3, #34]	@ 0x22

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Calculate minimum useful digits for decimal (excl last useless zeros) */
    if (type == 'g') {
 8028f30:	7dfb      	ldrb	r3, [r7, #23]
 8028f32:	2b67      	cmp	r3, #103	@ 0x67
 8028f34:	d143      	bne.n	8028fbe <prv_calculate_dbl_num_data+0x296>
        float_long_t tmp = n->decimal_part;
 8028f36:	6a3b      	ldr	r3, [r7, #32]
 8028f38:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8028f3c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        short adder, i;

        for (adder = 0, i = 0; tmp > 0 || i < (short)lwi->m.precision;
 8028f40:	2300      	movs	r3, #0
 8028f42:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8028f44:	2300      	movs	r3, #0
 8028f46:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8028f48:	e02b      	b.n	8028fa2 <prv_calculate_dbl_num_data+0x27a>
             tmp /= 10, n->digits_cnt_decimal_part_useful += adder, ++i) {
            if (adder == 0 && (tmp % 10) > 0) {
 8028f4a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8028f4e:	2b00      	cmp	r3, #0
 8028f50:	d10d      	bne.n	8028f6e <prv_calculate_dbl_num_data+0x246>
 8028f52:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8028f56:	f04f 020a 	mov.w	r2, #10
 8028f5a:	f04f 0300 	mov.w	r3, #0
 8028f5e:	f7f7 ffe5 	bl	8020f2c <__aeabi_ldivmod>
 8028f62:	2a01      	cmp	r2, #1
 8028f64:	f173 0300 	sbcs.w	r3, r3, #0
 8028f68:	db01      	blt.n	8028f6e <prv_calculate_dbl_num_data+0x246>
                adder = 1;
 8028f6a:	2301      	movs	r3, #1
 8028f6c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
             tmp /= 10, n->digits_cnt_decimal_part_useful += adder, ++i) {
 8028f6e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8028f72:	f04f 020a 	mov.w	r2, #10
 8028f76:	f04f 0300 	mov.w	r3, #0
 8028f7a:	f7f7 ffd7 	bl	8020f2c <__aeabi_ldivmod>
 8028f7e:	4602      	mov	r2, r0
 8028f80:	460b      	mov	r3, r1
 8028f82:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8028f86:	6a3b      	ldr	r3, [r7, #32]
 8028f88:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8028f8c:	b29a      	uxth	r2, r3
 8028f8e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8028f90:	4413      	add	r3, r2
 8028f92:	b29b      	uxth	r3, r3
 8028f94:	b21a      	sxth	r2, r3
 8028f96:	6a3b      	ldr	r3, [r7, #32]
 8028f98:	849a      	strh	r2, [r3, #36]	@ 0x24
 8028f9a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8028f9c:	3301      	adds	r3, #1
 8028f9e:	b29b      	uxth	r3, r3
 8028fa0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        for (adder = 0, i = 0; tmp > 0 || i < (short)lwi->m.precision;
 8028fa2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8028fa6:	2a01      	cmp	r2, #1
 8028fa8:	f173 0300 	sbcs.w	r3, r3, #0
 8028fac:	dacd      	bge.n	8028f4a <prv_calculate_dbl_num_data+0x222>
 8028fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028fb0:	6a1b      	ldr	r3, [r3, #32]
 8028fb2:	b21b      	sxth	r3, r3
 8028fb4:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8028fb8:	429a      	cmp	r2, r3
 8028fba:	dbc6      	blt.n	8028f4a <prv_calculate_dbl_num_data+0x222>
    } else
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    {
        n->digits_cnt_decimal_part_useful = (short)lwi->m.precision;
    }
}
 8028fbc:	e004      	b.n	8028fc8 <prv_calculate_dbl_num_data+0x2a0>
        n->digits_cnt_decimal_part_useful = (short)lwi->m.precision;
 8028fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028fc0:	6a1b      	ldr	r3, [r3, #32]
 8028fc2:	b21a      	sxth	r2, r3
 8028fc4:	6a3b      	ldr	r3, [r7, #32]
 8028fc6:	849a      	strh	r2, [r3, #36]	@ 0x24
}
 8028fc8:	bf00      	nop
 8028fca:	3740      	adds	r7, #64	@ 0x40
 8028fcc:	46bd      	mov	sp, r7
 8028fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8028fd2:	bf00      	nop
 8028fd4:	f3af 8000 	nop.w
 8028fd8:	08033048 	.word	0x08033048
 8028fdc:	3fe00000 	.word	0x3fe00000
 8028fe0:	86a12b9b 	.word	0x86a12b9b
 8028fe4:	3cf6849b 	.word	0x3cf6849b

08028fe8 <prv_double_to_str>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_double_to_str(lwprintf_int_t* lwi, double in_num) {
 8028fe8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8028fec:	b0a0      	sub	sp, #128	@ 0x80
 8028fee:	af00      	add	r7, sp, #0
 8028ff0:	60f8      	str	r0, [r7, #12]
 8028ff2:	ed87 0b00 	vstr	d0, [r7]
    float_num_t dblnum;
    double orig_num = in_num;
 8028ff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8028ffa:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    int digits_cnt, chosen_precision, i;
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    int exp_cnt = 0;
 8028ffe:	2300      	movs	r3, #0
 8029000:	673b      	str	r3, [r7, #112]	@ 0x70
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    char def_type = lwi->m.type;
 8029002:	68fb      	ldr	r3, [r7, #12]
 8029004:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8029008:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
     * - Print negative infinity if number is less than -FLOAT_MAX_B_ENG and engineering mode is disabled
     * - Print positive infinity if number is greater than absolute minimum
     * - Print positive infinity if number is greater than FLOAT_MAX_B_ENG and engineering mode is disabled
     * - Go to engineering mode if it is enabled and `in_num < -FLOAT_MAX_B_ENG` or `in_num > FLOAT_MAX_B_ENG`
     */
    if (in_num != in_num) {
 802900c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8029010:	e9d7 0100 	ldrd	r0, r1, [r7]
 8029014:	f7f7 ff58 	bl	8020ec8 <__aeabi_dcmpeq>
 8029018:	4603      	mov	r3, r0
 802901a:	2b00      	cmp	r3, #0
 802901c:	d110      	bne.n	8029040 <prv_double_to_str+0x58>
        return prv_out_str(lwi, lwi->m.flags.uc ? "NAN" : "nan", 3);
 802901e:	68fb      	ldr	r3, [r7, #12]
 8029020:	7f5b      	ldrb	r3, [r3, #29]
 8029022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8029026:	b2db      	uxtb	r3, r3
 8029028:	2b00      	cmp	r3, #0
 802902a:	d001      	beq.n	8029030 <prv_double_to_str+0x48>
 802902c:	4ba6      	ldr	r3, [pc, #664]	@ (80292c8 <prv_double_to_str+0x2e0>)
 802902e:	e000      	b.n	8029032 <prv_double_to_str+0x4a>
 8029030:	4ba6      	ldr	r3, [pc, #664]	@ (80292cc <prv_double_to_str+0x2e4>)
 8029032:	2203      	movs	r2, #3
 8029034:	4619      	mov	r1, r3
 8029036:	68f8      	ldr	r0, [r7, #12]
 8029038:	f7ff fd9c 	bl	8028b74 <prv_out_str>
 802903c:	4603      	mov	r3, r0
 802903e:	e32b      	b.n	8029698 <prv_double_to_str+0x6b0>
    } else if (in_num < -DBL_MAX
 8029040:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8029044:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 8029048:	e9d7 0100 	ldrd	r0, r1, [r7]
 802904c:	f7f7 ff46 	bl	8020edc <__aeabi_dcmplt>
 8029050:	4603      	mov	r3, r0
 8029052:	2b00      	cmp	r3, #0
 8029054:	d010      	beq.n	8029078 <prv_double_to_str+0x90>
#if !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
               || in_num < -FLOAT_MAX_B_ENG
#endif /* !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    ) {
        return prv_out_str(lwi, lwi->m.flags.uc ? "-INF" : "-inf", 4);
 8029056:	68fb      	ldr	r3, [r7, #12]
 8029058:	7f5b      	ldrb	r3, [r3, #29]
 802905a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802905e:	b2db      	uxtb	r3, r3
 8029060:	2b00      	cmp	r3, #0
 8029062:	d001      	beq.n	8029068 <prv_double_to_str+0x80>
 8029064:	4b9a      	ldr	r3, [pc, #616]	@ (80292d0 <prv_double_to_str+0x2e8>)
 8029066:	e000      	b.n	802906a <prv_double_to_str+0x82>
 8029068:	4b9a      	ldr	r3, [pc, #616]	@ (80292d4 <prv_double_to_str+0x2ec>)
 802906a:	2204      	movs	r2, #4
 802906c:	4619      	mov	r1, r3
 802906e:	68f8      	ldr	r0, [r7, #12]
 8029070:	f7ff fd80 	bl	8028b74 <prv_out_str>
 8029074:	4603      	mov	r3, r0
 8029076:	e30f      	b.n	8029698 <prv_double_to_str+0x6b0>
    } else if (in_num > DBL_MAX
 8029078:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802907c:	4b96      	ldr	r3, [pc, #600]	@ (80292d8 <prv_double_to_str+0x2f0>)
 802907e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8029082:	f7f7 ff49 	bl	8020f18 <__aeabi_dcmpgt>
 8029086:	4603      	mov	r3, r0
 8029088:	2b00      	cmp	r3, #0
 802908a:	d02e      	beq.n	80290ea <prv_double_to_str+0x102>
#if !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
               || in_num > FLOAT_MAX_B_ENG
#endif /* !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    ) {
        char str[5], *s_ptr = str;
 802908c:	f107 0310 	add.w	r3, r7, #16
 8029090:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (lwi->m.flags.plus) {
 8029092:	68fb      	ldr	r3, [r7, #12]
 8029094:	7f1b      	ldrb	r3, [r3, #28]
 8029096:	f003 0302 	and.w	r3, r3, #2
 802909a:	b2db      	uxtb	r3, r3
 802909c:	2b00      	cmp	r3, #0
 802909e:	d004      	beq.n	80290aa <prv_double_to_str+0xc2>
            *s_ptr++ = '+';
 80290a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80290a2:	1c5a      	adds	r2, r3, #1
 80290a4:	66ba      	str	r2, [r7, #104]	@ 0x68
 80290a6:	222b      	movs	r2, #43	@ 0x2b
 80290a8:	701a      	strb	r2, [r3, #0]
        }
        strcpy(s_ptr, lwi->m.flags.uc ? "INF" : "inf");
 80290aa:	68fb      	ldr	r3, [r7, #12]
 80290ac:	7f5b      	ldrb	r3, [r3, #29]
 80290ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80290b2:	b2db      	uxtb	r3, r3
 80290b4:	2b00      	cmp	r3, #0
 80290b6:	d001      	beq.n	80290bc <prv_double_to_str+0xd4>
 80290b8:	4b88      	ldr	r3, [pc, #544]	@ (80292dc <prv_double_to_str+0x2f4>)
 80290ba:	e000      	b.n	80290be <prv_double_to_str+0xd6>
 80290bc:	4b88      	ldr	r3, [pc, #544]	@ (80292e0 <prv_double_to_str+0x2f8>)
 80290be:	4619      	mov	r1, r3
 80290c0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80290c2:	f007 fa2e 	bl	8030522 <strcpy>
        return prv_out_str(lwi, str, lwi->m.flags.plus ? 4 : 3);
 80290c6:	68fb      	ldr	r3, [r7, #12]
 80290c8:	7f1b      	ldrb	r3, [r3, #28]
 80290ca:	f003 0302 	and.w	r3, r3, #2
 80290ce:	b2db      	uxtb	r3, r3
 80290d0:	2b00      	cmp	r3, #0
 80290d2:	d001      	beq.n	80290d8 <prv_double_to_str+0xf0>
 80290d4:	2204      	movs	r2, #4
 80290d6:	e000      	b.n	80290da <prv_double_to_str+0xf2>
 80290d8:	2203      	movs	r2, #3
 80290da:	f107 0310 	add.w	r3, r7, #16
 80290de:	4619      	mov	r1, r3
 80290e0:	68f8      	ldr	r0, [r7, #12]
 80290e2:	f7ff fd47 	bl	8028b74 <prv_out_str>
 80290e6:	4603      	mov	r3, r0
 80290e8:	e2d6      	b.n	8029698 <prv_double_to_str+0x6b0>
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    } else if ((in_num < -FLOAT_MAX_B_ENG || in_num > FLOAT_MAX_B_ENG) && def_type != 'g') {
 80290ea:	a375      	add	r3, pc, #468	@ (adr r3, 80292c0 <prv_double_to_str+0x2d8>)
 80290ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80290f0:	2100      	movs	r1, #0
 80290f2:	f1d2 0800 	rsbs	r8, r2, #0
 80290f6:	eb61 0903 	sbc.w	r9, r1, r3
 80290fa:	4640      	mov	r0, r8
 80290fc:	4649      	mov	r1, r9
 80290fe:	f7f7 fc4d 	bl	802099c <__aeabi_l2d>
 8029102:	4602      	mov	r2, r0
 8029104:	460b      	mov	r3, r1
 8029106:	e9d7 0100 	ldrd	r0, r1, [r7]
 802910a:	f7f7 fee7 	bl	8020edc <__aeabi_dcmplt>
 802910e:	4603      	mov	r3, r0
 8029110:	2b00      	cmp	r3, #0
 8029112:	d10f      	bne.n	8029134 <prv_double_to_str+0x14c>
 8029114:	a36a      	add	r3, pc, #424	@ (adr r3, 80292c0 <prv_double_to_str+0x2d8>)
 8029116:	e9d3 2300 	ldrd	r2, r3, [r3]
 802911a:	4610      	mov	r0, r2
 802911c:	4619      	mov	r1, r3
 802911e:	f7f7 fc3d 	bl	802099c <__aeabi_l2d>
 8029122:	4602      	mov	r2, r0
 8029124:	460b      	mov	r3, r1
 8029126:	e9d7 0100 	ldrd	r0, r1, [r7]
 802912a:	f7f7 fef5 	bl	8020f18 <__aeabi_dcmpgt>
 802912e:	4603      	mov	r3, r0
 8029130:	2b00      	cmp	r3, #0
 8029132:	d00b      	beq.n	802914c <prv_double_to_str+0x164>
 8029134:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8029138:	2b67      	cmp	r3, #103	@ 0x67
 802913a:	d007      	beq.n	802914c <prv_double_to_str+0x164>
        lwi->m.type = def_type = 'e'; /* Go to engineering mode */
 802913c:	2365      	movs	r3, #101	@ 0x65
 802913e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8029142:	68fb      	ldr	r3, [r7, #12]
 8029144:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8029148:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
#endif                                /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    }

    /* Check sign of the number */
    SIGNED_CHECK_NEGATIVE(lwi, in_num);
 802914c:	f04f 0200 	mov.w	r2, #0
 8029150:	f04f 0300 	mov.w	r3, #0
 8029154:	e9d7 0100 	ldrd	r0, r1, [r7]
 8029158:	f7f7 fec0 	bl	8020edc <__aeabi_dcmplt>
 802915c:	4603      	mov	r3, r0
 802915e:	2b00      	cmp	r3, #0
 8029160:	d00a      	beq.n	8029178 <prv_double_to_str+0x190>
 8029162:	68fa      	ldr	r2, [r7, #12]
 8029164:	7f53      	ldrb	r3, [r2, #29]
 8029166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802916a:	7753      	strb	r3, [r2, #29]
 802916c:	683c      	ldr	r4, [r7, #0]
 802916e:	687b      	ldr	r3, [r7, #4]
 8029170:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8029174:	e9c7 4500 	strd	r4, r5, [r7]
    orig_num = in_num;
 8029178:	e9d7 2300 	ldrd	r2, r3, [r7]
 802917c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Engineering mode check for number of exponents */
    if (def_type == 'e' || def_type == 'g'
 8029180:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8029184:	2b65      	cmp	r3, #101	@ 0x65
 8029186:	d013      	beq.n	80291b0 <prv_double_to_str+0x1c8>
 8029188:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 802918c:	2b67      	cmp	r3, #103	@ 0x67
 802918e:	d00f      	beq.n	80291b0 <prv_double_to_str+0x1c8>
        || in_num > (double)(powers_of_10[LWPRINTF_ARRAYSIZE(powers_of_10) - 1])) { /* More vs what float can hold */
 8029190:	a34b      	add	r3, pc, #300	@ (adr r3, 80292c0 <prv_double_to_str+0x2d8>)
 8029192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029196:	4610      	mov	r0, r2
 8029198:	4619      	mov	r1, r3
 802919a:	f7f7 fbff 	bl	802099c <__aeabi_l2d>
 802919e:	4602      	mov	r2, r0
 80291a0:	460b      	mov	r3, r1
 80291a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80291a6:	f7f7 feb7 	bl	8020f18 <__aeabi_dcmpgt>
 80291aa:	4603      	mov	r3, r0
 80291ac:	2b00      	cmp	r3, #0
 80291ae:	d054      	beq.n	802925a <prv_double_to_str+0x272>
        if (lwi->m.type != 'g') {
 80291b0:	68fb      	ldr	r3, [r7, #12]
 80291b2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80291b6:	2b67      	cmp	r3, #103	@ 0x67
 80291b8:	d003      	beq.n	80291c2 <prv_double_to_str+0x1da>
            lwi->m.type = 'e';
 80291ba:	68fb      	ldr	r3, [r7, #12]
 80291bc:	2265      	movs	r2, #101	@ 0x65
 80291be:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        }

        /* Normalize number to be between 0 and 1 and count decimals for exponent */
        if (in_num < 1) {
 80291c2:	f04f 0200 	mov.w	r2, #0
 80291c6:	4b47      	ldr	r3, [pc, #284]	@ (80292e4 <prv_double_to_str+0x2fc>)
 80291c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80291cc:	f7f7 fe86 	bl	8020edc <__aeabi_dcmplt>
 80291d0:	4603      	mov	r3, r0
 80291d2:	2b00      	cmp	r3, #0
 80291d4:	d026      	beq.n	8029224 <prv_double_to_str+0x23c>
            for (exp_cnt = 0; in_num < 1 && in_num > 0; in_num *= 10, --exp_cnt) {}
 80291d6:	2300      	movs	r3, #0
 80291d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80291da:	e00d      	b.n	80291f8 <prv_double_to_str+0x210>
 80291dc:	f04f 0200 	mov.w	r2, #0
 80291e0:	4b41      	ldr	r3, [pc, #260]	@ (80292e8 <prv_double_to_str+0x300>)
 80291e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80291e6:	f7f7 fc07 	bl	80209f8 <__aeabi_dmul>
 80291ea:	4602      	mov	r2, r0
 80291ec:	460b      	mov	r3, r1
 80291ee:	e9c7 2300 	strd	r2, r3, [r7]
 80291f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80291f4:	3b01      	subs	r3, #1
 80291f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80291f8:	f04f 0200 	mov.w	r2, #0
 80291fc:	4b39      	ldr	r3, [pc, #228]	@ (80292e4 <prv_double_to_str+0x2fc>)
 80291fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8029202:	f7f7 fe6b 	bl	8020edc <__aeabi_dcmplt>
 8029206:	4603      	mov	r3, r0
 8029208:	2b00      	cmp	r3, #0
 802920a:	d026      	beq.n	802925a <prv_double_to_str+0x272>
 802920c:	f04f 0200 	mov.w	r2, #0
 8029210:	f04f 0300 	mov.w	r3, #0
 8029214:	e9d7 0100 	ldrd	r0, r1, [r7]
 8029218:	f7f7 fe7e 	bl	8020f18 <__aeabi_dcmpgt>
 802921c:	4603      	mov	r3, r0
 802921e:	2b00      	cmp	r3, #0
 8029220:	d1dc      	bne.n	80291dc <prv_double_to_str+0x1f4>
 8029222:	e01a      	b.n	802925a <prv_double_to_str+0x272>
        } else {
            for (exp_cnt = 0; in_num >= 10; in_num /= 10, ++exp_cnt) {}
 8029224:	2300      	movs	r3, #0
 8029226:	673b      	str	r3, [r7, #112]	@ 0x70
 8029228:	e00d      	b.n	8029246 <prv_double_to_str+0x25e>
 802922a:	f04f 0200 	mov.w	r2, #0
 802922e:	4b2e      	ldr	r3, [pc, #184]	@ (80292e8 <prv_double_to_str+0x300>)
 8029230:	e9d7 0100 	ldrd	r0, r1, [r7]
 8029234:	f7f7 fd0a 	bl	8020c4c <__aeabi_ddiv>
 8029238:	4602      	mov	r2, r0
 802923a:	460b      	mov	r3, r1
 802923c:	e9c7 2300 	strd	r2, r3, [r7]
 8029240:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8029242:	3301      	adds	r3, #1
 8029244:	673b      	str	r3, [r7, #112]	@ 0x70
 8029246:	f04f 0200 	mov.w	r2, #0
 802924a:	4b27      	ldr	r3, [pc, #156]	@ (80292e8 <prv_double_to_str+0x300>)
 802924c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8029250:	f7f7 fe58 	bl	8020f04 <__aeabi_dcmpge>
 8029254:	4603      	mov	r3, r0
 8029256:	2b00      	cmp	r3, #0
 8029258:	d1e7      	bne.n	802922a <prv_double_to_str+0x242>
        }
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */

    /* Check precision data */
    chosen_precision = lwi->m.precision; /* This is default value coming from app */
 802925a:	68fb      	ldr	r3, [r7, #12]
 802925c:	6a1b      	ldr	r3, [r3, #32]
 802925e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (lwi->m.precision >= (int)LWPRINTF_ARRAYSIZE(powers_of_10)) {
 8029260:	68fb      	ldr	r3, [r7, #12]
 8029262:	6a1b      	ldr	r3, [r3, #32]
 8029264:	2b12      	cmp	r3, #18
 8029266:	dd03      	ble.n	8029270 <prv_double_to_str+0x288>
        lwi->m.precision = (int)LWPRINTF_ARRAYSIZE(powers_of_10) - 1; /* Limit to maximum precision */
 8029268:	68fb      	ldr	r3, [r7, #12]
 802926a:	2212      	movs	r2, #18
 802926c:	621a      	str	r2, [r3, #32]
 802926e:	e01f      	b.n	80292b0 <prv_double_to_str+0x2c8>
        /*
         * Precision is lower than the one selected by app (or user).
         * It means that we have to append ending zeros for precision when printing data
         */
    } else if (!lwi->m.flags.precision) {
 8029270:	68fb      	ldr	r3, [r7, #12]
 8029272:	7f1b      	ldrb	r3, [r3, #28]
 8029274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8029278:	b2db      	uxtb	r3, r3
 802927a:	2b00      	cmp	r3, #0
 802927c:	d106      	bne.n	802928c <prv_double_to_str+0x2a4>
        lwi->m.precision = LWPRINTF_CFG_FLOAT_DEFAULT_PRECISION; /* Default precision when not used */
 802927e:	68fb      	ldr	r3, [r7, #12]
 8029280:	2206      	movs	r2, #6
 8029282:	621a      	str	r2, [r3, #32]
        chosen_precision = lwi->m.precision;                     /* There was no precision, update chosen precision */
 8029284:	68fb      	ldr	r3, [r7, #12]
 8029286:	6a1b      	ldr	r3, [r3, #32]
 8029288:	67bb      	str	r3, [r7, #120]	@ 0x78
 802928a:	e011      	b.n	80292b0 <prv_double_to_str+0x2c8>
    } else if (lwi->m.flags.precision && lwi->m.precision == 0) {
 802928c:	68fb      	ldr	r3, [r7, #12]
 802928e:	7f1b      	ldrb	r3, [r3, #28]
 8029290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8029294:	b2db      	uxtb	r3, r3
 8029296:	2b00      	cmp	r3, #0
 8029298:	d00a      	beq.n	80292b0 <prv_double_to_str+0x2c8>
 802929a:	68fb      	ldr	r3, [r7, #12]
 802929c:	6a1b      	ldr	r3, [r3, #32]
 802929e:	2b00      	cmp	r3, #0
 80292a0:	d106      	bne.n	80292b0 <prv_double_to_str+0x2c8>
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
        /* Precision must be set to 1 if set to 0 by default */
        if (def_type == 'g') {
 80292a2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80292a6:	2b67      	cmp	r3, #103	@ 0x67
 80292a8:	d102      	bne.n	80292b0 <prv_double_to_str+0x2c8>
            lwi->m.precision = 1;
 80292aa:	68fb      	ldr	r3, [r7, #12]
 80292ac:	2201      	movs	r2, #1
 80292ae:	621a      	str	r2, [r3, #32]
     *
     * A double argument representing an infinity or 'NaN' is converted in the style of an 'f' or 'F' conversion specifier.
     */

    /* Calculate data for number */
    prv_calculate_dbl_num_data(lwi, &dblnum, def_type == 'e' ? in_num : orig_num, def_type);
 80292b0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80292b4:	2b65      	cmp	r3, #101	@ 0x65
 80292b6:	d119      	bne.n	80292ec <prv_double_to_str+0x304>
 80292b8:	ed97 7b00 	vldr	d7, [r7]
 80292bc:	e018      	b.n	80292f0 <prv_double_to_str+0x308>
 80292be:	bf00      	nop
 80292c0:	a7640000 	.word	0xa7640000
 80292c4:	0de0b6b3 	.word	0x0de0b6b3
 80292c8:	08031718 	.word	0x08031718
 80292cc:	0803171c 	.word	0x0803171c
 80292d0:	08031720 	.word	0x08031720
 80292d4:	08031728 	.word	0x08031728
 80292d8:	7fefffff 	.word	0x7fefffff
 80292dc:	08031730 	.word	0x08031730
 80292e0:	08031734 	.word	0x08031734
 80292e4:	3ff00000 	.word	0x3ff00000
 80292e8:	40240000 	.word	0x40240000
 80292ec:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80292f0:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 80292f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80292f8:	eeb0 0a47 	vmov.f32	s0, s14
 80292fc:	eef0 0a67 	vmov.f32	s1, s15
 8029300:	4619      	mov	r1, r3
 8029302:	68f8      	ldr	r0, [r7, #12]
 8029304:	f7ff fd10 	bl	8028d28 <prv_calculate_dbl_num_data>

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Set type G */
    if (def_type == 'g') {
 8029308:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 802930c:	2b67      	cmp	r3, #103	@ 0x67
 802930e:	d137      	bne.n	8029380 <prv_double_to_str+0x398>
        /* As per standard to decide level of precision */
        if (exp_cnt >= -4 && exp_cnt < lwi->m.precision) {
 8029310:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8029312:	f113 0f04 	cmn.w	r3, #4
 8029316:	db19      	blt.n	802934c <prv_double_to_str+0x364>
 8029318:	68fb      	ldr	r3, [r7, #12]
 802931a:	6a1b      	ldr	r3, [r3, #32]
 802931c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 802931e:	429a      	cmp	r2, r3
 8029320:	da14      	bge.n	802934c <prv_double_to_str+0x364>
            lwi->m.precision -= exp_cnt + 1;
 8029322:	68fb      	ldr	r3, [r7, #12]
 8029324:	6a1a      	ldr	r2, [r3, #32]
 8029326:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8029328:	3301      	adds	r3, #1
 802932a:	1ad2      	subs	r2, r2, r3
 802932c:	68fb      	ldr	r3, [r7, #12]
 802932e:	621a      	str	r2, [r3, #32]
            chosen_precision -= exp_cnt + 1;
 8029330:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8029332:	3301      	adds	r3, #1
 8029334:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8029336:	1ad3      	subs	r3, r2, r3
 8029338:	67bb      	str	r3, [r7, #120]	@ 0x78
            lwi->m.type = 'f';
 802933a:	68fb      	ldr	r3, [r7, #12]
 802933c:	2266      	movs	r2, #102	@ 0x66
 802933e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            in_num = orig_num;
 8029342:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8029346:	e9c7 2300 	strd	r2, r3, [r7]
 802934a:	e00f      	b.n	802936c <prv_double_to_str+0x384>
        } else {
            lwi->m.type = 'e';
 802934c:	68fb      	ldr	r3, [r7, #12]
 802934e:	2265      	movs	r2, #101	@ 0x65
 8029350:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            if (lwi->m.precision > 0) {
 8029354:	68fb      	ldr	r3, [r7, #12]
 8029356:	6a1b      	ldr	r3, [r3, #32]
 8029358:	2b00      	cmp	r3, #0
 802935a:	dd07      	ble.n	802936c <prv_double_to_str+0x384>
                --lwi->m.precision;
 802935c:	68fb      	ldr	r3, [r7, #12]
 802935e:	6a1b      	ldr	r3, [r3, #32]
 8029360:	1e5a      	subs	r2, r3, #1
 8029362:	68fb      	ldr	r3, [r7, #12]
 8029364:	621a      	str	r2, [r3, #32]
                --chosen_precision;
 8029366:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8029368:	3b01      	subs	r3, #1
 802936a:	67bb      	str	r3, [r7, #120]	@ 0x78
            }
        }
        prv_calculate_dbl_num_data(lwi, &dblnum, in_num, def_type);
 802936c:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8029370:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8029374:	ed97 0b00 	vldr	d0, [r7]
 8029378:	4619      	mov	r1, r3
 802937a:	68f8      	ldr	r0, [r7, #12]
 802937c:	f7ff fcd4 	bl	8028d28 <prv_calculate_dbl_num_data>
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */

    /* Set number of digits to display */
    digits_cnt = dblnum.digits_cnt_integer_part;
 8029380:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 8029384:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (0) {
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    } else if (def_type == 'g' && lwi->m.precision > 0) {
 8029386:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 802938a:	2b67      	cmp	r3, #103	@ 0x67
 802938c:	d111      	bne.n	80293b2 <prv_double_to_str+0x3ca>
 802938e:	68fb      	ldr	r3, [r7, #12]
 8029390:	6a1b      	ldr	r3, [r3, #32]
 8029392:	2b00      	cmp	r3, #0
 8029394:	dd0d      	ble.n	80293b2 <prv_double_to_str+0x3ca>
        digits_cnt += dblnum.digits_cnt_decimal_part_useful;
 8029396:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 802939a:	461a      	mov	r2, r3
 802939c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 802939e:	4413      	add	r3, r2
 80293a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 80293a2:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 80293a6:	2b00      	cmp	r3, #0
 80293a8:	dd12      	ble.n	80293d0 <prv_double_to_str+0x3e8>
            ++digits_cnt;
 80293aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80293ac:	3301      	adds	r3, #1
 80293ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 80293b0:	e00e      	b.n	80293d0 <prv_double_to_str+0x3e8>
        }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    } else {
        if (chosen_precision > 0 && lwi->m.flags.precision) {
 80293b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80293b4:	2b00      	cmp	r3, #0
 80293b6:	dd0b      	ble.n	80293d0 <prv_double_to_str+0x3e8>
 80293b8:	68fb      	ldr	r3, [r7, #12]
 80293ba:	7f1b      	ldrb	r3, [r3, #28]
 80293bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80293c0:	b2db      	uxtb	r3, r3
 80293c2:	2b00      	cmp	r3, #0
 80293c4:	d004      	beq.n	80293d0 <prv_double_to_str+0x3e8>
            /* Add precision digits + dot separator */
            digits_cnt += chosen_precision + 1;
 80293c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80293c8:	3301      	adds	r3, #1
 80293ca:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80293cc:	4413      	add	r3, r2
 80293ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
        }
    }

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Increase number of digits to display */
    if (lwi->m.type == 'e') {
 80293d0:	68fb      	ldr	r3, [r7, #12]
 80293d2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80293d6:	2b65      	cmp	r3, #101	@ 0x65
 80293d8:	d10d      	bne.n	80293f6 <prv_double_to_str+0x40e>
        /* Format is +Exxx, so add 4 or 5 characters (max is 307, min is 00 for exponent) */
        digits_cnt += 4 + (exp_cnt >= 100 || exp_cnt <= -100);
 80293da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80293dc:	2b63      	cmp	r3, #99	@ 0x63
 80293de:	dc03      	bgt.n	80293e8 <prv_double_to_str+0x400>
 80293e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80293e2:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 80293e6:	da01      	bge.n	80293ec <prv_double_to_str+0x404>
 80293e8:	2301      	movs	r3, #1
 80293ea:	e000      	b.n	80293ee <prv_double_to_str+0x406>
 80293ec:	2300      	movs	r3, #0
 80293ee:	3304      	adds	r3, #4
 80293f0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80293f2:	4413      	add	r3, r2
 80293f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */

    /* Output strings */
    prv_out_str_before(lwi, digits_cnt);
 80293f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80293f8:	4619      	mov	r1, r3
 80293fa:	68f8      	ldr	r0, [r7, #12]
 80293fc:	f7ff fa4c 	bl	8028898 <prv_out_str_before>

    /* Output integer part of number */
    if (dblnum.integer_part == 0) {
 8029400:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8029404:	4313      	orrs	r3, r2
 8029406:	d105      	bne.n	8029414 <prv_double_to_str+0x42c>
        lwi->out_fn(lwi, '0');
 8029408:	68fb      	ldr	r3, [r7, #12]
 802940a:	695b      	ldr	r3, [r3, #20]
 802940c:	2130      	movs	r1, #48	@ 0x30
 802940e:	68f8      	ldr	r0, [r7, #12]
 8029410:	4798      	blx	r3
 8029412:	e03a      	b.n	802948a <prv_double_to_str+0x4a2>
    } else {
        for (i = 0; dblnum.integer_part > 0; dblnum.integer_part /= 10, ++i) {
 8029414:	2300      	movs	r3, #0
 8029416:	677b      	str	r3, [r7, #116]	@ 0x74
 8029418:	e01f      	b.n	802945a <prv_double_to_str+0x472>
            str[i] = (char)'0' + (char)(dblnum.integer_part % 10);
 802941a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 802941e:	f04f 020a 	mov.w	r2, #10
 8029422:	f04f 0300 	mov.w	r3, #0
 8029426:	f7f7 fd81 	bl	8020f2c <__aeabi_ldivmod>
 802942a:	b2d3      	uxtb	r3, r2
 802942c:	3330      	adds	r3, #48	@ 0x30
 802942e:	b2d9      	uxtb	r1, r3
 8029430:	f107 0218 	add.w	r2, r7, #24
 8029434:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8029436:	4413      	add	r3, r2
 8029438:	460a      	mov	r2, r1
 802943a:	701a      	strb	r2, [r3, #0]
        for (i = 0; dblnum.integer_part > 0; dblnum.integer_part /= 10, ++i) {
 802943c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8029440:	f04f 020a 	mov.w	r2, #10
 8029444:	f04f 0300 	mov.w	r3, #0
 8029448:	f7f7 fd70 	bl	8020f2c <__aeabi_ldivmod>
 802944c:	4602      	mov	r2, r0
 802944e:	460b      	mov	r3, r1
 8029450:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8029454:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8029456:	3301      	adds	r3, #1
 8029458:	677b      	str	r3, [r7, #116]	@ 0x74
 802945a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 802945e:	2a01      	cmp	r2, #1
 8029460:	f173 0300 	sbcs.w	r3, r3, #0
 8029464:	dad9      	bge.n	802941a <prv_double_to_str+0x432>
        }
        for (; i > 0; --i) {
 8029466:	e00d      	b.n	8029484 <prv_double_to_str+0x49c>
            lwi->out_fn(lwi, str[i - 1]);
 8029468:	68fb      	ldr	r3, [r7, #12]
 802946a:	695b      	ldr	r3, [r3, #20]
 802946c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 802946e:	3a01      	subs	r2, #1
 8029470:	3280      	adds	r2, #128	@ 0x80
 8029472:	443a      	add	r2, r7
 8029474:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8029478:	4611      	mov	r1, r2
 802947a:	68f8      	ldr	r0, [r7, #12]
 802947c:	4798      	blx	r3
        for (; i > 0; --i) {
 802947e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8029480:	3b01      	subs	r3, #1
 8029482:	677b      	str	r3, [r7, #116]	@ 0x74
 8029484:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8029486:	2b00      	cmp	r3, #0
 8029488:	dcee      	bgt.n	8029468 <prv_double_to_str+0x480>
        }
    }

    /* Output decimal part */
    if (lwi->m.precision > 0) {
 802948a:	68fb      	ldr	r3, [r7, #12]
 802948c:	6a1b      	ldr	r3, [r3, #32]
 802948e:	2b00      	cmp	r3, #0
 8029490:	f340 809a 	ble.w	80295c8 <prv_double_to_str+0x5e0>
        int x;
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 8029494:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8029498:	2b00      	cmp	r3, #0
 802949a:	dd04      	ble.n	80294a6 <prv_double_to_str+0x4be>
            lwi->out_fn(lwi, '.');
 802949c:	68fb      	ldr	r3, [r7, #12]
 802949e:	695b      	ldr	r3, [r3, #20]
 80294a0:	212e      	movs	r1, #46	@ 0x2e
 80294a2:	68f8      	ldr	r0, [r7, #12]
 80294a4:	4798      	blx	r3
        }
        for (i = 0; dblnum.decimal_part > 0; dblnum.decimal_part /= 10, ++i) {
 80294a6:	2300      	movs	r3, #0
 80294a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80294aa:	e01f      	b.n	80294ec <prv_double_to_str+0x504>
            str[i] = (char)'0' + (char)(dblnum.decimal_part % 10);
 80294ac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80294b0:	f04f 020a 	mov.w	r2, #10
 80294b4:	f04f 0300 	mov.w	r3, #0
 80294b8:	f7f7 fd38 	bl	8020f2c <__aeabi_ldivmod>
 80294bc:	b2d3      	uxtb	r3, r2
 80294be:	3330      	adds	r3, #48	@ 0x30
 80294c0:	b2d9      	uxtb	r1, r3
 80294c2:	f107 0218 	add.w	r2, r7, #24
 80294c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80294c8:	4413      	add	r3, r2
 80294ca:	460a      	mov	r2, r1
 80294cc:	701a      	strb	r2, [r3, #0]
        for (i = 0; dblnum.decimal_part > 0; dblnum.decimal_part /= 10, ++i) {
 80294ce:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80294d2:	f04f 020a 	mov.w	r2, #10
 80294d6:	f04f 0300 	mov.w	r3, #0
 80294da:	f7f7 fd27 	bl	8020f2c <__aeabi_ldivmod>
 80294de:	4602      	mov	r2, r0
 80294e0:	460b      	mov	r3, r1
 80294e2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80294e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80294e8:	3301      	adds	r3, #1
 80294ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80294ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80294f0:	2a01      	cmp	r2, #1
 80294f2:	f173 0300 	sbcs.w	r3, r3, #0
 80294f6:	dad9      	bge.n	80294ac <prv_double_to_str+0x4c4>
        }

        /* Output relevant zeros first, string to print is opposite way */
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
        if (def_type == 'g') {
 80294f8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80294fc:	2b67      	cmp	r3, #103	@ 0x67
 80294fe:	d11e      	bne.n	802953e <prv_double_to_str+0x556>
            /* TODO: This is to be checked */
            for (x = 0; x < (lwi->m.precision - i) && dblnum.digits_cnt_decimal_part_useful > 0;
 8029500:	2300      	movs	r3, #0
 8029502:	667b      	str	r3, [r7, #100]	@ 0x64
 8029504:	e00f      	b.n	8029526 <prv_double_to_str+0x53e>
                 ++x, --dblnum.digits_cnt_decimal_part_useful) {
                lwi->out_fn(lwi, '0');
 8029506:	68fb      	ldr	r3, [r7, #12]
 8029508:	695b      	ldr	r3, [r3, #20]
 802950a:	2130      	movs	r1, #48	@ 0x30
 802950c:	68f8      	ldr	r0, [r7, #12]
 802950e:	4798      	blx	r3
                 ++x, --dblnum.digits_cnt_decimal_part_useful) {
 8029510:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8029512:	3301      	adds	r3, #1
 8029514:	667b      	str	r3, [r7, #100]	@ 0x64
 8029516:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 802951a:	b29b      	uxth	r3, r3
 802951c:	3b01      	subs	r3, #1
 802951e:	b29b      	uxth	r3, r3
 8029520:	b21b      	sxth	r3, r3
 8029522:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
            for (x = 0; x < (lwi->m.precision - i) && dblnum.digits_cnt_decimal_part_useful > 0;
 8029526:	68fb      	ldr	r3, [r7, #12]
 8029528:	6a1a      	ldr	r2, [r3, #32]
 802952a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 802952c:	1ad3      	subs	r3, r2, r3
 802952e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8029530:	429a      	cmp	r2, r3
 8029532:	da33      	bge.n	802959c <prv_double_to_str+0x5b4>
 8029534:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8029538:	2b00      	cmp	r3, #0
 802953a:	dce4      	bgt.n	8029506 <prv_double_to_str+0x51e>
 802953c:	e02e      	b.n	802959c <prv_double_to_str+0x5b4>
            }
        } else
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
        {
            for (x = i; x < lwi->m.precision; ++x) {
 802953e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8029540:	667b      	str	r3, [r7, #100]	@ 0x64
 8029542:	e007      	b.n	8029554 <prv_double_to_str+0x56c>
                lwi->out_fn(lwi, '0');
 8029544:	68fb      	ldr	r3, [r7, #12]
 8029546:	695b      	ldr	r3, [r3, #20]
 8029548:	2130      	movs	r1, #48	@ 0x30
 802954a:	68f8      	ldr	r0, [r7, #12]
 802954c:	4798      	blx	r3
            for (x = i; x < lwi->m.precision; ++x) {
 802954e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8029550:	3301      	adds	r3, #1
 8029552:	667b      	str	r3, [r7, #100]	@ 0x64
 8029554:	68fb      	ldr	r3, [r7, #12]
 8029556:	6a1b      	ldr	r3, [r3, #32]
 8029558:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802955a:	429a      	cmp	r2, r3
 802955c:	dbf2      	blt.n	8029544 <prv_double_to_str+0x55c>
            }
        }

        /* Now print string itself */
        for (; i > 0; --i) {
 802955e:	e01d      	b.n	802959c <prv_double_to_str+0x5b4>
            lwi->out_fn(lwi, str[i - 1]);
 8029560:	68fb      	ldr	r3, [r7, #12]
 8029562:	695b      	ldr	r3, [r3, #20]
 8029564:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8029566:	3a01      	subs	r2, #1
 8029568:	3280      	adds	r2, #128	@ 0x80
 802956a:	443a      	add	r2, r7
 802956c:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8029570:	4611      	mov	r1, r2
 8029572:	68f8      	ldr	r0, [r7, #12]
 8029574:	4798      	blx	r3
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
            if (def_type == 'g' && --dblnum.digits_cnt_decimal_part_useful == 0) {
 8029576:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 802957a:	2b67      	cmp	r3, #103	@ 0x67
 802957c:	d10b      	bne.n	8029596 <prv_double_to_str+0x5ae>
 802957e:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8029582:	b29b      	uxth	r3, r3
 8029584:	3b01      	subs	r3, #1
 8029586:	b29b      	uxth	r3, r3
 8029588:	b21b      	sxth	r3, r3
 802958a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 802958e:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8029592:	2b00      	cmp	r3, #0
 8029594:	d006      	beq.n	80295a4 <prv_double_to_str+0x5bc>
        for (; i > 0; --i) {
 8029596:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8029598:	3b01      	subs	r3, #1
 802959a:	677b      	str	r3, [r7, #116]	@ 0x74
 802959c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 802959e:	2b00      	cmp	r3, #0
 80295a0:	dcde      	bgt.n	8029560 <prv_double_to_str+0x578>
 80295a2:	e000      	b.n	80295a6 <prv_double_to_str+0x5be>
                break;
 80295a4:	bf00      	nop
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
        }

        /* Print ending zeros if selected precision is bigger than maximum supported */
        if (def_type != 'g') {
 80295a6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80295aa:	2b67      	cmp	r3, #103	@ 0x67
 80295ac:	d00c      	beq.n	80295c8 <prv_double_to_str+0x5e0>
            for (; x < chosen_precision; ++x) {
 80295ae:	e007      	b.n	80295c0 <prv_double_to_str+0x5d8>
                lwi->out_fn(lwi, '0');
 80295b0:	68fb      	ldr	r3, [r7, #12]
 80295b2:	695b      	ldr	r3, [r3, #20]
 80295b4:	2130      	movs	r1, #48	@ 0x30
 80295b6:	68f8      	ldr	r0, [r7, #12]
 80295b8:	4798      	blx	r3
            for (; x < chosen_precision; ++x) {
 80295ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80295bc:	3301      	adds	r3, #1
 80295be:	667b      	str	r3, [r7, #100]	@ 0x64
 80295c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80295c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80295c4:	429a      	cmp	r2, r3
 80295c6:	dbf3      	blt.n	80295b0 <prv_double_to_str+0x5c8>
        }
    }

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Engineering mode output, add exponent part */
    if (lwi->m.type == 'e') {
 80295c8:	68fb      	ldr	r3, [r7, #12]
 80295ca:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80295ce:	2b65      	cmp	r3, #101	@ 0x65
 80295d0:	d15c      	bne.n	802968c <prv_double_to_str+0x6a4>
        lwi->out_fn(lwi, lwi->m.flags.uc ? 'E' : 'e');
 80295d2:	68fb      	ldr	r3, [r7, #12]
 80295d4:	695b      	ldr	r3, [r3, #20]
 80295d6:	68fa      	ldr	r2, [r7, #12]
 80295d8:	7f52      	ldrb	r2, [r2, #29]
 80295da:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80295de:	b2d2      	uxtb	r2, r2
 80295e0:	2a00      	cmp	r2, #0
 80295e2:	d001      	beq.n	80295e8 <prv_double_to_str+0x600>
 80295e4:	2245      	movs	r2, #69	@ 0x45
 80295e6:	e000      	b.n	80295ea <prv_double_to_str+0x602>
 80295e8:	2265      	movs	r2, #101	@ 0x65
 80295ea:	4611      	mov	r1, r2
 80295ec:	68f8      	ldr	r0, [r7, #12]
 80295ee:	4798      	blx	r3
        lwi->out_fn(lwi, exp_cnt >= 0 ? '+' : '-');
 80295f0:	68fb      	ldr	r3, [r7, #12]
 80295f2:	695b      	ldr	r3, [r3, #20]
 80295f4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80295f6:	2a00      	cmp	r2, #0
 80295f8:	db01      	blt.n	80295fe <prv_double_to_str+0x616>
 80295fa:	222b      	movs	r2, #43	@ 0x2b
 80295fc:	e000      	b.n	8029600 <prv_double_to_str+0x618>
 80295fe:	222d      	movs	r2, #45	@ 0x2d
 8029600:	4611      	mov	r1, r2
 8029602:	68f8      	ldr	r0, [r7, #12]
 8029604:	4798      	blx	r3
        if (exp_cnt < 0) {
 8029606:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8029608:	2b00      	cmp	r3, #0
 802960a:	da02      	bge.n	8029612 <prv_double_to_str+0x62a>
            exp_cnt = -exp_cnt;
 802960c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802960e:	425b      	negs	r3, r3
 8029610:	673b      	str	r3, [r7, #112]	@ 0x70
        }
        if (exp_cnt >= 100) {
 8029612:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8029614:	2b63      	cmp	r3, #99	@ 0x63
 8029616:	dd16      	ble.n	8029646 <prv_double_to_str+0x65e>
            lwi->out_fn(lwi, (char)'0' + (char)(exp_cnt / 100));
 8029618:	68fb      	ldr	r3, [r7, #12]
 802961a:	695a      	ldr	r2, [r3, #20]
 802961c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802961e:	4921      	ldr	r1, [pc, #132]	@ (80296a4 <prv_double_to_str+0x6bc>)
 8029620:	fb81 0103 	smull	r0, r1, r1, r3
 8029624:	1149      	asrs	r1, r1, #5
 8029626:	17db      	asrs	r3, r3, #31
 8029628:	1acb      	subs	r3, r1, r3
 802962a:	b2db      	uxtb	r3, r3
 802962c:	3330      	adds	r3, #48	@ 0x30
 802962e:	b2db      	uxtb	r3, r3
 8029630:	4619      	mov	r1, r3
 8029632:	68f8      	ldr	r0, [r7, #12]
 8029634:	4790      	blx	r2
            exp_cnt /= 100;
 8029636:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8029638:	4a1a      	ldr	r2, [pc, #104]	@ (80296a4 <prv_double_to_str+0x6bc>)
 802963a:	fb82 1203 	smull	r1, r2, r2, r3
 802963e:	1152      	asrs	r2, r2, #5
 8029640:	17db      	asrs	r3, r3, #31
 8029642:	1ad3      	subs	r3, r2, r3
 8029644:	673b      	str	r3, [r7, #112]	@ 0x70
        }
        lwi->out_fn(lwi, (char)'0' + (char)(exp_cnt / 10));
 8029646:	68fb      	ldr	r3, [r7, #12]
 8029648:	695a      	ldr	r2, [r3, #20]
 802964a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802964c:	4916      	ldr	r1, [pc, #88]	@ (80296a8 <prv_double_to_str+0x6c0>)
 802964e:	fb81 0103 	smull	r0, r1, r1, r3
 8029652:	1089      	asrs	r1, r1, #2
 8029654:	17db      	asrs	r3, r3, #31
 8029656:	1acb      	subs	r3, r1, r3
 8029658:	b2db      	uxtb	r3, r3
 802965a:	3330      	adds	r3, #48	@ 0x30
 802965c:	b2db      	uxtb	r3, r3
 802965e:	4619      	mov	r1, r3
 8029660:	68f8      	ldr	r0, [r7, #12]
 8029662:	4790      	blx	r2
        lwi->out_fn(lwi, (char)'0' + (char)(exp_cnt % 10));
 8029664:	68fb      	ldr	r3, [r7, #12]
 8029666:	695c      	ldr	r4, [r3, #20]
 8029668:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 802966a:	4b0f      	ldr	r3, [pc, #60]	@ (80296a8 <prv_double_to_str+0x6c0>)
 802966c:	fb83 1302 	smull	r1, r3, r3, r2
 8029670:	1099      	asrs	r1, r3, #2
 8029672:	17d3      	asrs	r3, r2, #31
 8029674:	1ac9      	subs	r1, r1, r3
 8029676:	460b      	mov	r3, r1
 8029678:	009b      	lsls	r3, r3, #2
 802967a:	440b      	add	r3, r1
 802967c:	005b      	lsls	r3, r3, #1
 802967e:	1ad1      	subs	r1, r2, r3
 8029680:	b2cb      	uxtb	r3, r1
 8029682:	3330      	adds	r3, #48	@ 0x30
 8029684:	b2db      	uxtb	r3, r3
 8029686:	4619      	mov	r1, r3
 8029688:	68f8      	ldr	r0, [r7, #12]
 802968a:	47a0      	blx	r4
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    prv_out_str_after(lwi, digits_cnt);
 802968c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 802968e:	4619      	mov	r1, r3
 8029690:	68f8      	ldr	r0, [r7, #12]
 8029692:	f7ff fa2f 	bl	8028af4 <prv_out_str_after>

    return 1;
 8029696:	2301      	movs	r3, #1
}
 8029698:	4618      	mov	r0, r3
 802969a:	3780      	adds	r7, #128	@ 0x80
 802969c:	46bd      	mov	sp, r7
 802969e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80296a2:	bf00      	nop
 80296a4:	51eb851f 	.word	0x51eb851f
 80296a8:	66666667 	.word	0x66666667

080296ac <prv_format>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       arg: Variable parameters list
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_format(lwprintf_int_t* lwi, va_list arg) {
 80296ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80296b0:	b09d      	sub	sp, #116	@ 0x74
 80296b2:	af00      	add	r7, sp, #0
 80296b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80296b6:	6339      	str	r1, [r7, #48]	@ 0x30
    uint8_t detected = 0;
 80296b8:	2300      	movs	r3, #0
 80296ba:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    const char* fmt = lwi->fmt;
 80296be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80296c0:	685b      	ldr	r3, [r3, #4]
 80296c2:	63bb      	str	r3, [r7, #56]	@ 0x38
         || !lwprintf_sys_mutex_wait(&lwi->lwobj->mutex))) { /* Cannot acquire mutex */
        return 0;
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */

    while (fmt != NULL && *fmt != '\0') {
 80296c4:	f000 bc91 	b.w	8029fea <prv_format+0x93e>
        /* Check if we should stop processing */
        if (lwi->is_print_cancelled) {
 80296c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80296ca:	7e1b      	ldrb	r3, [r3, #24]
 80296cc:	2b00      	cmp	r3, #0
 80296ce:	f040 8495 	bne.w	8029ffc <prv_format+0x950>
            break;
        }

        /* Detect beginning */
        if (*fmt != '%') {
 80296d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80296d4:	781b      	ldrb	r3, [r3, #0]
 80296d6:	2b25      	cmp	r3, #37	@ 0x25
 80296d8:	d00b      	beq.n	80296f2 <prv_format+0x46>
            lwi->out_fn(lwi, *fmt); /* Output character */
 80296da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80296dc:	695a      	ldr	r2, [r3, #20]
 80296de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80296e0:	781b      	ldrb	r3, [r3, #0]
 80296e2:	4619      	mov	r1, r3
 80296e4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80296e6:	4790      	blx	r2
            ++fmt;
 80296e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80296ea:	3301      	adds	r3, #1
 80296ec:	63bb      	str	r3, [r7, #56]	@ 0x38
            continue;
 80296ee:	f000 bc7c 	b.w	8029fea <prv_format+0x93e>
        }
        ++fmt;
 80296f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80296f4:	3301      	adds	r3, #1
 80296f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        memset(&lwi->m, 0x00, sizeof(lwi->m)); /* Reset structure */
 80296f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80296fa:	331c      	adds	r3, #28
 80296fc:	2210      	movs	r2, #16
 80296fe:	2100      	movs	r1, #0
 8029700:	4618      	mov	r0, r3
 8029702:	f006 fe51 	bl	80303a8 <memset>
        /* %[flags][width][.precision][length]type */
        /* Go to https://docs.majerle.eu for more info about supported features */

        /* Check [flags] */
        /* It can have multiple flags in any order */
        detected = 1;
 8029706:	2301      	movs	r3, #1
 8029708:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        do {
            switch (*fmt) {
 802970c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802970e:	781b      	ldrb	r3, [r3, #0]
 8029710:	3b20      	subs	r3, #32
 8029712:	2b10      	cmp	r3, #16
 8029714:	d848      	bhi.n	80297a8 <prv_format+0xfc>
 8029716:	a201      	add	r2, pc, #4	@ (adr r2, 802971c <prv_format+0x70>)
 8029718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802971c:	08029779 	.word	0x08029779
 8029720:	080297a9 	.word	0x080297a9
 8029724:	080297a9 	.word	0x080297a9
 8029728:	0802979d 	.word	0x0802979d
 802972c:	080297a9 	.word	0x080297a9
 8029730:	080297a9 	.word	0x080297a9
 8029734:	080297a9 	.word	0x080297a9
 8029738:	08029791 	.word	0x08029791
 802973c:	080297a9 	.word	0x080297a9
 8029740:	080297a9 	.word	0x080297a9
 8029744:	080297a9 	.word	0x080297a9
 8029748:	0802976d 	.word	0x0802976d
 802974c:	080297a9 	.word	0x080297a9
 8029750:	08029761 	.word	0x08029761
 8029754:	080297a9 	.word	0x080297a9
 8029758:	080297a9 	.word	0x080297a9
 802975c:	08029785 	.word	0x08029785
                case '-': lwi->m.flags.left_align = 1; break;
 8029760:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029762:	7f13      	ldrb	r3, [r2, #28]
 8029764:	f043 0301 	orr.w	r3, r3, #1
 8029768:	7713      	strb	r3, [r2, #28]
 802976a:	e021      	b.n	80297b0 <prv_format+0x104>
                case '+': lwi->m.flags.plus = 1; break;
 802976c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802976e:	7f13      	ldrb	r3, [r2, #28]
 8029770:	f043 0302 	orr.w	r3, r3, #2
 8029774:	7713      	strb	r3, [r2, #28]
 8029776:	e01b      	b.n	80297b0 <prv_format+0x104>
                case ' ': lwi->m.flags.space = 1; break;
 8029778:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802977a:	7f13      	ldrb	r3, [r2, #28]
 802977c:	f043 0304 	orr.w	r3, r3, #4
 8029780:	7713      	strb	r3, [r2, #28]
 8029782:	e015      	b.n	80297b0 <prv_format+0x104>
                case '0': lwi->m.flags.zero = 1; break;
 8029784:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029786:	7f13      	ldrb	r3, [r2, #28]
 8029788:	f043 0308 	orr.w	r3, r3, #8
 802978c:	7713      	strb	r3, [r2, #28]
 802978e:	e00f      	b.n	80297b0 <prv_format+0x104>
                case '\'': lwi->m.flags.thousands = 1; break;
 8029790:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029792:	7f13      	ldrb	r3, [r2, #28]
 8029794:	f043 0310 	orr.w	r3, r3, #16
 8029798:	7713      	strb	r3, [r2, #28]
 802979a:	e009      	b.n	80297b0 <prv_format+0x104>
                case '#': lwi->m.flags.alt = 1; break;
 802979c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802979e:	7f13      	ldrb	r3, [r2, #28]
 80297a0:	f043 0320 	orr.w	r3, r3, #32
 80297a4:	7713      	strb	r3, [r2, #28]
 80297a6:	e003      	b.n	80297b0 <prv_format+0x104>
                default: detected = 0; break;
 80297a8:	2300      	movs	r3, #0
 80297aa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80297ae:	bf00      	nop
            }
            if (detected) {
 80297b0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80297b4:	2b00      	cmp	r3, #0
 80297b6:	d002      	beq.n	80297be <prv_format+0x112>
                ++fmt;
 80297b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80297ba:	3301      	adds	r3, #1
 80297bc:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        } while (detected);
 80297be:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80297c2:	2b00      	cmp	r3, #0
 80297c4:	d1a2      	bne.n	802970c <prv_format+0x60>

        /* Check [width] */
        lwi->m.width = 0;
 80297c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80297c8:	2300      	movs	r3, #0
 80297ca:	6253      	str	r3, [r2, #36]	@ 0x24
        if (CHARISNUM(*fmt)) { /* Fixed width check */
 80297cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80297ce:	781b      	ldrb	r3, [r3, #0]
 80297d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80297d2:	d90c      	bls.n	80297ee <prv_format+0x142>
 80297d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80297d6:	781b      	ldrb	r3, [r3, #0]
 80297d8:	2b39      	cmp	r3, #57	@ 0x39
 80297da:	d808      	bhi.n	80297ee <prv_format+0x142>
            /* If number is negative, it has been captured from previous step (left align) */
            lwi->m.width = prv_parse_num(&fmt); /* Number from string directly */
 80297dc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80297e0:	4618      	mov	r0, r3
 80297e2:	f7ff f830 	bl	8028846 <prv_parse_num>
 80297e6:	4602      	mov	r2, r0
 80297e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80297ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80297ec:	e01b      	b.n	8029826 <prv_format+0x17a>
        } else if (*fmt == '*') {               /* Or variable check */
 80297ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80297f0:	781b      	ldrb	r3, [r3, #0]
 80297f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80297f4:	d117      	bne.n	8029826 <prv_format+0x17a>
            const int w = (int)va_arg(arg, int);
 80297f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80297f8:	1d13      	adds	r3, r2, #4
 80297fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80297fc:	6813      	ldr	r3, [r2, #0]
 80297fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
            if (w < 0) {
 8029800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8029802:	2b00      	cmp	r3, #0
 8029804:	da09      	bge.n	802981a <prv_format+0x16e>
                lwi->m.flags.left_align = 1; /* Negative width means left aligned */
 8029806:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029808:	7f13      	ldrb	r3, [r2, #28]
 802980a:	f043 0301 	orr.w	r3, r3, #1
 802980e:	7713      	strb	r3, [r2, #28]
                lwi->m.width = -w;
 8029810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8029812:	425a      	negs	r2, r3
 8029814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029816:	625a      	str	r2, [r3, #36]	@ 0x24
 8029818:	e002      	b.n	8029820 <prv_format+0x174>
            } else {
                lwi->m.width = w;
 802981a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802981c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802981e:	6253      	str	r3, [r2, #36]	@ 0x24
            }
            ++fmt;
 8029820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029822:	3301      	adds	r3, #1
 8029824:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        /* Check [.precision] */
        lwi->m.precision = 0;
 8029826:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029828:	2300      	movs	r3, #0
 802982a:	6213      	str	r3, [r2, #32]
        if (*fmt == '.') { /* Precision flag is detected */
 802982c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802982e:	781b      	ldrb	r3, [r3, #0]
 8029830:	2b2e      	cmp	r3, #46	@ 0x2e
 8029832:	d129      	bne.n	8029888 <prv_format+0x1dc>
            lwi->m.flags.precision = 1;
 8029834:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029836:	7f13      	ldrb	r3, [r2, #28]
 8029838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802983c:	7713      	strb	r3, [r2, #28]
            if (*++fmt == '*') { /* Variable check */
 802983e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029840:	3301      	adds	r3, #1
 8029842:	63bb      	str	r3, [r7, #56]	@ 0x38
 8029844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029846:	781b      	ldrb	r3, [r3, #0]
 8029848:	2b2a      	cmp	r3, #42	@ 0x2a
 802984a:	d10d      	bne.n	8029868 <prv_format+0x1bc>
                const int pr = (int)va_arg(arg, int);
 802984c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802984e:	1d13      	adds	r3, r2, #4
 8029850:	633b      	str	r3, [r7, #48]	@ 0x30
 8029852:	6813      	ldr	r3, [r2, #0]
 8029854:	64bb      	str	r3, [r7, #72]	@ 0x48
                lwi->m.precision = pr > 0 ? pr : 0;
 8029856:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8029858:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 802985c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802985e:	621a      	str	r2, [r3, #32]
                ++fmt;
 8029860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029862:	3301      	adds	r3, #1
 8029864:	63bb      	str	r3, [r7, #56]	@ 0x38
 8029866:	e00f      	b.n	8029888 <prv_format+0x1dc>
            } else if (CHARISNUM(*fmt)) { /* Directly in the string */
 8029868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802986a:	781b      	ldrb	r3, [r3, #0]
 802986c:	2b2f      	cmp	r3, #47	@ 0x2f
 802986e:	d90b      	bls.n	8029888 <prv_format+0x1dc>
 8029870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029872:	781b      	ldrb	r3, [r3, #0]
 8029874:	2b39      	cmp	r3, #57	@ 0x39
 8029876:	d807      	bhi.n	8029888 <prv_format+0x1dc>
                lwi->m.precision = prv_parse_num(&fmt);
 8029878:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 802987c:	4618      	mov	r0, r3
 802987e:	f7fe ffe2 	bl	8028846 <prv_parse_num>
 8029882:	4602      	mov	r2, r0
 8029884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029886:	621a      	str	r2, [r3, #32]
            }
        }

        /* Check [length] */
        detected = 1;
 8029888:	2301      	movs	r3, #1
 802988a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        switch (*fmt) {
 802988e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029890:	781b      	ldrb	r3, [r3, #0]
 8029892:	3b4c      	subs	r3, #76	@ 0x4c
 8029894:	2b2e      	cmp	r3, #46	@ 0x2e
 8029896:	f200 80a1 	bhi.w	80299dc <prv_format+0x330>
 802989a:	a201      	add	r2, pc, #4	@ (adr r2, 80298a0 <prv_format+0x1f4>)
 802989c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80298a0:	080299e5 	.word	0x080299e5
 80298a4:	080299dd 	.word	0x080299dd
 80298a8:	080299dd 	.word	0x080299dd
 80298ac:	080299dd 	.word	0x080299dd
 80298b0:	080299dd 	.word	0x080299dd
 80298b4:	080299dd 	.word	0x080299dd
 80298b8:	080299dd 	.word	0x080299dd
 80298bc:	080299dd 	.word	0x080299dd
 80298c0:	080299dd 	.word	0x080299dd
 80298c4:	080299dd 	.word	0x080299dd
 80298c8:	080299dd 	.word	0x080299dd
 80298cc:	080299dd 	.word	0x080299dd
 80298d0:	080299dd 	.word	0x080299dd
 80298d4:	080299dd 	.word	0x080299dd
 80298d8:	080299dd 	.word	0x080299dd
 80298dc:	080299dd 	.word	0x080299dd
 80298e0:	080299dd 	.word	0x080299dd
 80298e4:	080299dd 	.word	0x080299dd
 80298e8:	080299dd 	.word	0x080299dd
 80298ec:	080299dd 	.word	0x080299dd
 80298f0:	080299dd 	.word	0x080299dd
 80298f4:	080299dd 	.word	0x080299dd
 80298f8:	080299dd 	.word	0x080299dd
 80298fc:	080299dd 	.word	0x080299dd
 8029900:	080299dd 	.word	0x080299dd
 8029904:	080299dd 	.word	0x080299dd
 8029908:	080299dd 	.word	0x080299dd
 802990c:	080299dd 	.word	0x080299dd
 8029910:	0802995d 	.word	0x0802995d
 8029914:	080299dd 	.word	0x080299dd
 8029918:	080299cb 	.word	0x080299cb
 802991c:	080299dd 	.word	0x080299dd
 8029920:	0802998b 	.word	0x0802998b
 8029924:	080299dd 	.word	0x080299dd
 8029928:	080299dd 	.word	0x080299dd
 802992c:	080299dd 	.word	0x080299dd
 8029930:	080299dd 	.word	0x080299dd
 8029934:	080299dd 	.word	0x080299dd
 8029938:	080299dd 	.word	0x080299dd
 802993c:	080299dd 	.word	0x080299dd
 8029940:	080299e5 	.word	0x080299e5
 8029944:	080299dd 	.word	0x080299dd
 8029948:	080299dd 	.word	0x080299dd
 802994c:	080299dd 	.word	0x080299dd
 8029950:	080299dd 	.word	0x080299dd
 8029954:	080299dd 	.word	0x080299dd
 8029958:	080299b9 	.word	0x080299b9
            case 'h':
                lwi->m.flags.char_short = 1;     /* Single h detected */
 802995c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802995e:	7f4b      	ldrb	r3, [r1, #29]
 8029960:	2201      	movs	r2, #1
 8029962:	f362 0383 	bfi	r3, r2, #2, #2
 8029966:	774b      	strb	r3, [r1, #29]
                if (*++fmt == 'h') {             /* Does it follow by another h? */
 8029968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802996a:	3301      	adds	r3, #1
 802996c:	63bb      	str	r3, [r7, #56]	@ 0x38
 802996e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029970:	781b      	ldrb	r3, [r3, #0]
 8029972:	2b68      	cmp	r3, #104	@ 0x68
 8029974:	d138      	bne.n	80299e8 <prv_format+0x33c>
                    lwi->m.flags.char_short = 2; /* Second h detected */
 8029976:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8029978:	7f4b      	ldrb	r3, [r1, #29]
 802997a:	2202      	movs	r2, #2
 802997c:	f362 0383 	bfi	r3, r2, #2, #2
 8029980:	774b      	strb	r3, [r1, #29]
                    ++fmt;
 8029982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029984:	3301      	adds	r3, #1
 8029986:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
                break;
 8029988:	e02e      	b.n	80299e8 <prv_format+0x33c>
            case 'l':
                lwi->m.flags.longlong = 1;     /* Single l detected */
 802998a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802998c:	7f4b      	ldrb	r3, [r1, #29]
 802998e:	2201      	movs	r2, #1
 8029990:	f362 0301 	bfi	r3, r2, #0, #2
 8029994:	774b      	strb	r3, [r1, #29]
                if (*++fmt == 'l') {           /* Does it follow by another l? */
 8029996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029998:	3301      	adds	r3, #1
 802999a:	63bb      	str	r3, [r7, #56]	@ 0x38
 802999c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802999e:	781b      	ldrb	r3, [r3, #0]
 80299a0:	2b6c      	cmp	r3, #108	@ 0x6c
 80299a2:	d123      	bne.n	80299ec <prv_format+0x340>
                    lwi->m.flags.longlong = 2; /* Second l detected */
 80299a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80299a6:	7f4b      	ldrb	r3, [r1, #29]
 80299a8:	2202      	movs	r2, #2
 80299aa:	f362 0301 	bfi	r3, r2, #0, #2
 80299ae:	774b      	strb	r3, [r1, #29]
                    ++fmt;
 80299b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80299b2:	3301      	adds	r3, #1
 80299b4:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
                break;
 80299b6:	e019      	b.n	80299ec <prv_format+0x340>
            case 'L': break;
            case 'z':
                lwi->m.flags.sz_t = 1; /* Size T flag */
 80299b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80299ba:	7f53      	ldrb	r3, [r2, #29]
 80299bc:	f043 0310 	orr.w	r3, r3, #16
 80299c0:	7753      	strb	r3, [r2, #29]
                ++fmt;
 80299c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80299c4:	3301      	adds	r3, #1
 80299c6:	63bb      	str	r3, [r7, #56]	@ 0x38
                break;
 80299c8:	e011      	b.n	80299ee <prv_format+0x342>
            case 'j':
                lwi->m.flags.umax_t = 1; /* uintmax_t flag */
 80299ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80299cc:	7f53      	ldrb	r3, [r2, #29]
 80299ce:	f043 0320 	orr.w	r3, r3, #32
 80299d2:	7753      	strb	r3, [r2, #29]
                ++fmt;
 80299d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80299d6:	3301      	adds	r3, #1
 80299d8:	63bb      	str	r3, [r7, #56]	@ 0x38
                break;
 80299da:	e008      	b.n	80299ee <prv_format+0x342>
            case 't': break;
            default: detected = 0;
 80299dc:	2300      	movs	r3, #0
 80299de:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80299e2:	e004      	b.n	80299ee <prv_format+0x342>
            case 'L': break;
 80299e4:	bf00      	nop
 80299e6:	e002      	b.n	80299ee <prv_format+0x342>
                break;
 80299e8:	bf00      	nop
 80299ea:	e000      	b.n	80299ee <prv_format+0x342>
                break;
 80299ec:	bf00      	nop
        }

        /* Check type */
        lwi->m.type = *fmt + (char)((*fmt >= 'A' && *fmt <= 'Z') ? 0x20 : 0x00);
 80299ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80299f0:	781a      	ldrb	r2, [r3, #0]
 80299f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80299f4:	781b      	ldrb	r3, [r3, #0]
 80299f6:	2b40      	cmp	r3, #64	@ 0x40
 80299f8:	d905      	bls.n	8029a06 <prv_format+0x35a>
 80299fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80299fc:	781b      	ldrb	r3, [r3, #0]
 80299fe:	2b5a      	cmp	r3, #90	@ 0x5a
 8029a00:	d801      	bhi.n	8029a06 <prv_format+0x35a>
 8029a02:	2320      	movs	r3, #32
 8029a04:	e000      	b.n	8029a08 <prv_format+0x35c>
 8029a06:	2300      	movs	r3, #0
 8029a08:	4413      	add	r3, r2
 8029a0a:	b2db      	uxtb	r3, r3
 8029a0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029a0e:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
        if (*fmt >= 'A' && *fmt <= 'Z') {
 8029a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029a14:	781b      	ldrb	r3, [r3, #0]
 8029a16:	2b40      	cmp	r3, #64	@ 0x40
 8029a18:	d908      	bls.n	8029a2c <prv_format+0x380>
 8029a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029a1c:	781b      	ldrb	r3, [r3, #0]
 8029a1e:	2b5a      	cmp	r3, #90	@ 0x5a
 8029a20:	d804      	bhi.n	8029a2c <prv_format+0x380>
            lwi->m.flags.uc = 1;
 8029a22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029a24:	7f53      	ldrb	r3, [r2, #29]
 8029a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029a2a:	7753      	strb	r3, [r2, #29]
        }
        switch (*fmt) {
 8029a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029a2e:	781b      	ldrb	r3, [r3, #0]
 8029a30:	3b25      	subs	r3, #37	@ 0x25
 8029a32:	2b53      	cmp	r3, #83	@ 0x53
 8029a34:	f200 82cb 	bhi.w	8029fce <prv_format+0x922>
 8029a38:	a201      	add	r2, pc, #4	@ (adr r2, 8029a40 <prv_format+0x394>)
 8029a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029a3e:	bf00      	nop
 8029a40:	08029e81 	.word	0x08029e81
 8029a44:	08029fcf 	.word	0x08029fcf
 8029a48:	08029fcf 	.word	0x08029fcf
 8029a4c:	08029fcf 	.word	0x08029fcf
 8029a50:	08029fcf 	.word	0x08029fcf
 8029a54:	08029fcf 	.word	0x08029fcf
 8029a58:	08029fcf 	.word	0x08029fcf
 8029a5c:	08029fcf 	.word	0x08029fcf
 8029a60:	08029fcf 	.word	0x08029fcf
 8029a64:	08029fcf 	.word	0x08029fcf
 8029a68:	08029fcf 	.word	0x08029fcf
 8029a6c:	08029fcf 	.word	0x08029fcf
 8029a70:	08029fcf 	.word	0x08029fcf
 8029a74:	08029fcf 	.word	0x08029fcf
 8029a78:	08029fcf 	.word	0x08029fcf
 8029a7c:	08029fcf 	.word	0x08029fcf
 8029a80:	08029fcf 	.word	0x08029fcf
 8029a84:	08029fcf 	.word	0x08029fcf
 8029a88:	08029fcf 	.word	0x08029fcf
 8029a8c:	08029fcf 	.word	0x08029fcf
 8029a90:	08029fcf 	.word	0x08029fcf
 8029a94:	08029fcf 	.word	0x08029fcf
 8029a98:	08029fcf 	.word	0x08029fcf
 8029a9c:	08029fcf 	.word	0x08029fcf
 8029aa0:	08029fcf 	.word	0x08029fcf
 8029aa4:	08029fcf 	.word	0x08029fcf
 8029aa8:	08029fcf 	.word	0x08029fcf
 8029aac:	08029fcf 	.word	0x08029fcf
 8029ab0:	08029b91 	.word	0x08029b91
 8029ab4:	08029c41 	.word	0x08029c41
 8029ab8:	08029fcf 	.word	0x08029fcf
 8029abc:	08029fcf 	.word	0x08029fcf
 8029ac0:	08029e49 	.word	0x08029e49
 8029ac4:	08029e49 	.word	0x08029e49
 8029ac8:	08029e49 	.word	0x08029e49
 8029acc:	08029fcf 	.word	0x08029fcf
 8029ad0:	08029fcf 	.word	0x08029fcf
 8029ad4:	08029fcf 	.word	0x08029fcf
 8029ad8:	08029e8d 	.word	0x08029e8d
 8029adc:	08029fcf 	.word	0x08029fcf
 8029ae0:	08029fcf 	.word	0x08029fcf
 8029ae4:	08029fcf 	.word	0x08029fcf
 8029ae8:	08029fcf 	.word	0x08029fcf
 8029aec:	08029fcf 	.word	0x08029fcf
 8029af0:	08029fcf 	.word	0x08029fcf
 8029af4:	08029fcf 	.word	0x08029fcf
 8029af8:	08029fcf 	.word	0x08029fcf
 8029afc:	08029fcf 	.word	0x08029fcf
 8029b00:	08029fcf 	.word	0x08029fcf
 8029b04:	08029fcf 	.word	0x08029fcf
 8029b08:	08029fcf 	.word	0x08029fcf
 8029b0c:	08029c41 	.word	0x08029c41
 8029b10:	08029fcf 	.word	0x08029fcf
 8029b14:	08029fcf 	.word	0x08029fcf
 8029b18:	08029fcf 	.word	0x08029fcf
 8029b1c:	08029fcf 	.word	0x08029fcf
 8029b20:	08029fcf 	.word	0x08029fcf
 8029b24:	08029fcf 	.word	0x08029fcf
 8029b28:	08029fcf 	.word	0x08029fcf
 8029b2c:	08029fcf 	.word	0x08029fcf
 8029b30:	08029b91 	.word	0x08029b91
 8029b34:	08029c41 	.word	0x08029c41
 8029b38:	08029ba9 	.word	0x08029ba9
 8029b3c:	08029bbf 	.word	0x08029bbf
 8029b40:	08029e49 	.word	0x08029e49
 8029b44:	08029e49 	.word	0x08029e49
 8029b48:	08029e49 	.word	0x08029e49
 8029b4c:	08029fcf 	.word	0x08029fcf
 8029b50:	08029bbf 	.word	0x08029bbf
 8029b54:	08029fcf 	.word	0x08029fcf
 8029b58:	08029e8d 	.word	0x08029e8d
 8029b5c:	08029fcf 	.word	0x08029fcf
 8029b60:	08029fcf 	.word	0x08029fcf
 8029b64:	08029e6b 	.word	0x08029e6b
 8029b68:	08029c41 	.word	0x08029c41
 8029b6c:	08029e0d 	.word	0x08029e0d
 8029b70:	08029fcf 	.word	0x08029fcf
 8029b74:	08029fcf 	.word	0x08029fcf
 8029b78:	08029dc3 	.word	0x08029dc3
 8029b7c:	08029fcf 	.word	0x08029fcf
 8029b80:	08029c41 	.word	0x08029c41
 8029b84:	08029fcf 	.word	0x08029fcf
 8029b88:	08029fcf 	.word	0x08029fcf
 8029b8c:	08029c41 	.word	0x08029c41
            case 'a':
            case 'A':
                /* Double in hexadecimal notation */
                (void)va_arg(arg, double);      /* Read argument to ignore it and move to next one */
 8029b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8029b92:	3307      	adds	r3, #7
 8029b94:	f023 0307 	bic.w	r3, r3, #7
 8029b98:	3308      	adds	r3, #8
 8029b9a:	633b      	str	r3, [r7, #48]	@ 0x30
                prv_out_str_raw(lwi, "NaN", 3); /* Print string */
 8029b9c:	2203      	movs	r2, #3
 8029b9e:	4999      	ldr	r1, [pc, #612]	@ (8029e04 <prv_format+0x758>)
 8029ba0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029ba2:	f7fe ffc9 	bl	8028b38 <prv_out_str_raw>
                break;
 8029ba6:	e21d      	b.n	8029fe4 <prv_format+0x938>
            case 'c': lwi->out_fn(lwi, (char)va_arg(arg, int)); break;
 8029ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029baa:	695c      	ldr	r4, [r3, #20]
 8029bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8029bae:	1d13      	adds	r3, r2, #4
 8029bb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8029bb2:	6813      	ldr	r3, [r2, #0]
 8029bb4:	b2db      	uxtb	r3, r3
 8029bb6:	4619      	mov	r1, r3
 8029bb8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029bba:	47a0      	blx	r4
 8029bbc:	e212      	b.n	8029fe4 <prv_format+0x938>
#if LWPRINTF_CFG_SUPPORT_TYPE_INT
            case 'd':
            case 'i': {
                /* Check for different length parameters */
                lwi->m.base = 10;
 8029bbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029bc0:	230a      	movs	r3, #10
 8029bc2:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
                if (lwi->m.flags.longlong == 0) {
 8029bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029bc8:	7f5b      	ldrb	r3, [r3, #29]
 8029bca:	f003 0303 	and.w	r3, r3, #3
 8029bce:	b2db      	uxtb	r3, r3
 8029bd0:	2b00      	cmp	r3, #0
 8029bd2:	d10c      	bne.n	8029bee <prv_format+0x542>
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed int));
 8029bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8029bd6:	1d13      	adds	r3, r2, #4
 8029bd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8029bda:	6813      	ldr	r3, [r2, #0]
 8029bdc:	17da      	asrs	r2, r3, #31
 8029bde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029be0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8029be2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8029be6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029be8:	f7ff f85d 	bl	8028ca6 <prv_longest_signed_int_to_str>
#if LWPRINTF_CFG_SUPPORT_LONG_LONG
                } else if (lwi->m.flags.longlong == 2) {
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed long long int));
#endif /* LWPRINTF_CFG_SUPPORT_LONG_LONG */
                }
                break;
 8029bec:	e1f7      	b.n	8029fde <prv_format+0x932>
                } else if (lwi->m.flags.longlong == 1) {
 8029bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029bf0:	7f5b      	ldrb	r3, [r3, #29]
 8029bf2:	f003 0303 	and.w	r3, r3, #3
 8029bf6:	b2db      	uxtb	r3, r3
 8029bf8:	2b01      	cmp	r3, #1
 8029bfa:	d10c      	bne.n	8029c16 <prv_format+0x56a>
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed long int));
 8029bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8029bfe:	1d13      	adds	r3, r2, #4
 8029c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8029c02:	6813      	ldr	r3, [r2, #0]
 8029c04:	17da      	asrs	r2, r3, #31
 8029c06:	623b      	str	r3, [r7, #32]
 8029c08:	627a      	str	r2, [r7, #36]	@ 0x24
 8029c0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8029c0e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029c10:	f7ff f849 	bl	8028ca6 <prv_longest_signed_int_to_str>
                break;
 8029c14:	e1e3      	b.n	8029fde <prv_format+0x932>
                } else if (lwi->m.flags.longlong == 2) {
 8029c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029c18:	7f5b      	ldrb	r3, [r3, #29]
 8029c1a:	f003 0303 	and.w	r3, r3, #3
 8029c1e:	b2db      	uxtb	r3, r3
 8029c20:	2b02      	cmp	r3, #2
 8029c22:	f040 81dc 	bne.w	8029fde <prv_format+0x932>
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed long long int));
 8029c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8029c28:	3307      	adds	r3, #7
 8029c2a:	f023 0207 	bic.w	r2, r3, #7
 8029c2e:	f102 0308 	add.w	r3, r2, #8
 8029c32:	633b      	str	r3, [r7, #48]	@ 0x30
 8029c34:	e9d2 2300 	ldrd	r2, r3, [r2]
 8029c38:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029c3a:	f7ff f834 	bl	8028ca6 <prv_longest_signed_int_to_str>
                break;
 8029c3e:	e1ce      	b.n	8029fde <prv_format+0x932>
            case 'B':
            case 'o':
            case 'u':
            case 'x':
            case 'X':
                if (*fmt == 'b' || *fmt == 'B') {
 8029c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029c42:	781b      	ldrb	r3, [r3, #0]
 8029c44:	2b62      	cmp	r3, #98	@ 0x62
 8029c46:	d003      	beq.n	8029c50 <prv_format+0x5a4>
 8029c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029c4a:	781b      	ldrb	r3, [r3, #0]
 8029c4c:	2b42      	cmp	r3, #66	@ 0x42
 8029c4e:	d104      	bne.n	8029c5a <prv_format+0x5ae>
                    lwi->m.base = 2;
 8029c50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029c52:	2302      	movs	r3, #2
 8029c54:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8029c58:	e01d      	b.n	8029c96 <prv_format+0x5ea>
                } else if (*fmt == 'o') {
 8029c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029c5c:	781b      	ldrb	r3, [r3, #0]
 8029c5e:	2b6f      	cmp	r3, #111	@ 0x6f
 8029c60:	d104      	bne.n	8029c6c <prv_format+0x5c0>
                    lwi->m.base = 8;
 8029c62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029c64:	2308      	movs	r3, #8
 8029c66:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8029c6a:	e014      	b.n	8029c96 <prv_format+0x5ea>
                } else if (*fmt == 'u') {
 8029c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029c6e:	781b      	ldrb	r3, [r3, #0]
 8029c70:	2b75      	cmp	r3, #117	@ 0x75
 8029c72:	d104      	bne.n	8029c7e <prv_format+0x5d2>
                    lwi->m.base = 10;
 8029c74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029c76:	230a      	movs	r3, #10
 8029c78:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8029c7c:	e00b      	b.n	8029c96 <prv_format+0x5ea>
                } else if (*fmt == 'x' || *fmt == 'X') {
 8029c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029c80:	781b      	ldrb	r3, [r3, #0]
 8029c82:	2b78      	cmp	r3, #120	@ 0x78
 8029c84:	d003      	beq.n	8029c8e <prv_format+0x5e2>
 8029c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029c88:	781b      	ldrb	r3, [r3, #0]
 8029c8a:	2b58      	cmp	r3, #88	@ 0x58
 8029c8c:	d103      	bne.n	8029c96 <prv_format+0x5ea>
                    lwi->m.base = 16;
 8029c8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029c90:	2310      	movs	r3, #16
 8029c92:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
                }
                lwi->m.flags.space = 0; /* Space flag has no meaning here */
 8029c96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029c98:	7f13      	ldrb	r3, [r2, #28]
 8029c9a:	f023 0304 	bic.w	r3, r3, #4
 8029c9e:	7713      	strb	r3, [r2, #28]

                /* Check for different length parameters */
                if (0) {

                } else if (lwi->m.flags.sz_t) {
 8029ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029ca2:	7f5b      	ldrb	r3, [r3, #29]
 8029ca4:	f003 0310 	and.w	r3, r3, #16
 8029ca8:	b2db      	uxtb	r3, r3
 8029caa:	2b00      	cmp	r3, #0
 8029cac:	d00c      	beq.n	8029cc8 <prv_format+0x61c>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, size_t));
 8029cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8029cb0:	1d13      	adds	r3, r2, #4
 8029cb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8029cb4:	6813      	ldr	r3, [r2, #0]
 8029cb6:	2200      	movs	r2, #0
 8029cb8:	61bb      	str	r3, [r7, #24]
 8029cba:	61fa      	str	r2, [r7, #28]
 8029cbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8029cc0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029cc2:	f7fe ff6f 	bl	8028ba4 <prv_longest_unsigned_int_to_str>
#if LWPRINTF_CFG_SUPPORT_LONG_LONG
                } else if (lwi->m.flags.longlong == 2) {
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, unsigned long long int));
#endif /* LWPRINTF_CFG_SUPPORT_LONG_LONG */
                }
                break;
 8029cc6:	e18c      	b.n	8029fe2 <prv_format+0x936>
                } else if (lwi->m.flags.umax_t) {
 8029cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029cca:	7f5b      	ldrb	r3, [r3, #29]
 8029ccc:	f003 0320 	and.w	r3, r3, #32
 8029cd0:	b2db      	uxtb	r3, r3
 8029cd2:	2b00      	cmp	r3, #0
 8029cd4:	d00c      	beq.n	8029cf0 <prv_format+0x644>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, uintmax_t));
 8029cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8029cd8:	3307      	adds	r3, #7
 8029cda:	f023 0207 	bic.w	r2, r3, #7
 8029cde:	f102 0308 	add.w	r3, r2, #8
 8029ce2:	633b      	str	r3, [r7, #48]	@ 0x30
 8029ce4:	e9d2 2300 	ldrd	r2, r3, [r2]
 8029ce8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029cea:	f7fe ff5b 	bl	8028ba4 <prv_longest_unsigned_int_to_str>
                break;
 8029cee:	e178      	b.n	8029fe2 <prv_format+0x936>
                } else if (lwi->m.flags.longlong == 0 || lwi->m.base == 2) {
 8029cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029cf2:	7f5b      	ldrb	r3, [r3, #29]
 8029cf4:	f003 0303 	and.w	r3, r3, #3
 8029cf8:	b2db      	uxtb	r3, r3
 8029cfa:	2b00      	cmp	r3, #0
 8029cfc:	d004      	beq.n	8029d08 <prv_format+0x65c>
 8029cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029d00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8029d04:	2b02      	cmp	r3, #2
 8029d06:	d133      	bne.n	8029d70 <prv_format+0x6c4>
                    uint_maxtype_t v = va_arg(arg, unsigned int);
 8029d08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8029d0a:	1d13      	adds	r3, r2, #4
 8029d0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8029d0e:	6813      	ldr	r3, [r2, #0]
 8029d10:	2200      	movs	r2, #0
 8029d12:	603b      	str	r3, [r7, #0]
 8029d14:	607a      	str	r2, [r7, #4]
 8029d16:	e9d7 3400 	ldrd	r3, r4, [r7]
 8029d1a:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
                    switch (lwi->m.flags.char_short) {
 8029d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029d20:	7f5b      	ldrb	r3, [r3, #29]
 8029d22:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8029d26:	b2db      	uxtb	r3, r3
 8029d28:	2b01      	cmp	r3, #1
 8029d2a:	d00a      	beq.n	8029d42 <prv_format+0x696>
 8029d2c:	2b02      	cmp	r3, #2
 8029d2e:	d111      	bne.n	8029d54 <prv_format+0x6a8>
                        case 2: v = (uint_maxtype_t)((unsigned char)v); break;
 8029d30:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8029d34:	b2db      	uxtb	r3, r3
 8029d36:	2200      	movs	r2, #0
 8029d38:	469a      	mov	sl, r3
 8029d3a:	4693      	mov	fp, r2
 8029d3c:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 8029d40:	e00f      	b.n	8029d62 <prv_format+0x6b6>
                        case 1: v = (uint_maxtype_t)((unsigned short int)v); break;
 8029d42:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8029d46:	b29b      	uxth	r3, r3
 8029d48:	2200      	movs	r2, #0
 8029d4a:	461d      	mov	r5, r3
 8029d4c:	4616      	mov	r6, r2
 8029d4e:	e9c7 5618 	strd	r5, r6, [r7, #96]	@ 0x60
 8029d52:	e006      	b.n	8029d62 <prv_format+0x6b6>
                        default: v = (uint_maxtype_t)((unsigned int)v); break;
 8029d54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8029d56:	2200      	movs	r2, #0
 8029d58:	4698      	mov	r8, r3
 8029d5a:	4691      	mov	r9, r2
 8029d5c:	e9c7 8918 	strd	r8, r9, [r7, #96]	@ 0x60
 8029d60:	bf00      	nop
                    prv_longest_unsigned_int_to_str(lwi, v);
 8029d62:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8029d66:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029d68:	f7fe ff1c 	bl	8028ba4 <prv_longest_unsigned_int_to_str>
                } else if (lwi->m.flags.longlong == 0 || lwi->m.base == 2) {
 8029d6c:	bf00      	nop
                break;
 8029d6e:	e138      	b.n	8029fe2 <prv_format+0x936>
                } else if (lwi->m.flags.longlong == 1) {
 8029d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029d72:	7f5b      	ldrb	r3, [r3, #29]
 8029d74:	f003 0303 	and.w	r3, r3, #3
 8029d78:	b2db      	uxtb	r3, r3
 8029d7a:	2b01      	cmp	r3, #1
 8029d7c:	d10c      	bne.n	8029d98 <prv_format+0x6ec>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, unsigned long int));
 8029d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8029d80:	1d13      	adds	r3, r2, #4
 8029d82:	633b      	str	r3, [r7, #48]	@ 0x30
 8029d84:	6813      	ldr	r3, [r2, #0]
 8029d86:	2200      	movs	r2, #0
 8029d88:	613b      	str	r3, [r7, #16]
 8029d8a:	617a      	str	r2, [r7, #20]
 8029d8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8029d90:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029d92:	f7fe ff07 	bl	8028ba4 <prv_longest_unsigned_int_to_str>
                break;
 8029d96:	e124      	b.n	8029fe2 <prv_format+0x936>
                } else if (lwi->m.flags.longlong == 2) {
 8029d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029d9a:	7f5b      	ldrb	r3, [r3, #29]
 8029d9c:	f003 0303 	and.w	r3, r3, #3
 8029da0:	b2db      	uxtb	r3, r3
 8029da2:	2b02      	cmp	r3, #2
 8029da4:	f040 811d 	bne.w	8029fe2 <prv_format+0x936>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, unsigned long long int));
 8029da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8029daa:	3307      	adds	r3, #7
 8029dac:	f023 0207 	bic.w	r2, r3, #7
 8029db0:	f102 0308 	add.w	r3, r2, #8
 8029db4:	633b      	str	r3, [r7, #48]	@ 0x30
 8029db6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8029dba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029dbc:	f7fe fef2 	bl	8028ba4 <prv_longest_unsigned_int_to_str>
                break;
 8029dc0:	e10f      	b.n	8029fe2 <prv_format+0x936>
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_INT */
#if LWPRINTF_CFG_SUPPORT_TYPE_STRING
            case 's': {
                const char* b = va_arg(arg, const char*);
 8029dc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8029dc4:	1d13      	adds	r3, r2, #4
 8029dc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8029dc8:	6813      	ldr	r3, [r2, #0]
 8029dca:	65fb      	str	r3, [r7, #92]	@ 0x5c
                if (b == NULL) {
 8029dcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8029dce:	2b00      	cmp	r3, #0
 8029dd0:	d101      	bne.n	8029dd6 <prv_format+0x72a>
                    b = "(null)";
 8029dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8029e08 <prv_format+0x75c>)
 8029dd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }

                /* Output string up to maximum buffer. If user provides lower buffer size, write will not write to it
                    but it will still calculate "would be" length */
                prv_out_str(lwi, b, prv_strnlen(b, lwi->m.flags.precision ? (size_t)lwi->m.precision : (SIZE_MAX)));
 8029dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029dd8:	7f1b      	ldrb	r3, [r3, #28]
 8029dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8029dde:	b2db      	uxtb	r3, r3
 8029de0:	2b00      	cmp	r3, #0
 8029de2:	d002      	beq.n	8029dea <prv_format+0x73e>
 8029de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029de6:	6a1b      	ldr	r3, [r3, #32]
 8029de8:	e001      	b.n	8029dee <prv_format+0x742>
 8029dea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029dee:	4619      	mov	r1, r3
 8029df0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8029df2:	f7fe ff79 	bl	8028ce8 <prv_strnlen>
 8029df6:	4603      	mov	r3, r0
 8029df8:	461a      	mov	r2, r3
 8029dfa:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8029dfc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029dfe:	f7fe feb9 	bl	8028b74 <prv_out_str>
                break;
 8029e02:	e0ef      	b.n	8029fe4 <prv_format+0x938>
 8029e04:	08031738 	.word	0x08031738
 8029e08:	0803173c 	.word	0x0803173c
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_STRING */
#if LWPRINTF_CFG_SUPPORT_TYPE_POINTER
            case 'p': {
                lwi->m.base = 16;      /* Go to hex format */
 8029e0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029e0e:	2310      	movs	r3, #16
 8029e10:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
                lwi->m.flags.uc = 0;   /* Uppercase characters */
 8029e14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029e16:	7f53      	ldrb	r3, [r2, #29]
 8029e18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8029e1c:	7753      	strb	r3, [r2, #29]
                lwi->m.flags.zero = 1; /* Zero padding */
 8029e1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029e20:	7f13      	ldrb	r3, [r2, #28]
 8029e22:	f043 0308 	orr.w	r3, r3, #8
 8029e26:	7713      	strb	r3, [r2, #28]
                lwi->m.width =
 8029e28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029e2a:	2308      	movs	r3, #8
 8029e2c:	6253      	str	r3, [r2, #36]	@ 0x24
                    sizeof(uintptr_t) * 2; /* Number is in hex format and byte is represented with 2 letters */

                prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, uintptr_t));
 8029e2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8029e30:	1d13      	adds	r3, r2, #4
 8029e32:	633b      	str	r3, [r7, #48]	@ 0x30
 8029e34:	6813      	ldr	r3, [r2, #0]
 8029e36:	2200      	movs	r2, #0
 8029e38:	60bb      	str	r3, [r7, #8]
 8029e3a:	60fa      	str	r2, [r7, #12]
 8029e3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8029e40:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029e42:	f7fe feaf 	bl	8028ba4 <prv_longest_unsigned_int_to_str>
                break;
 8029e46:	e0cd      	b.n	8029fe4 <prv_format+0x938>
            case 'E':
            case 'g':
            case 'G':
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
                /* Double number in different format. Final output depends on type of format */
                prv_double_to_str(lwi, (double)va_arg(arg, double));
 8029e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8029e4a:	3307      	adds	r3, #7
 8029e4c:	f023 0207 	bic.w	r2, r3, #7
 8029e50:	f102 0308 	add.w	r3, r2, #8
 8029e54:	633b      	str	r3, [r7, #48]	@ 0x30
 8029e56:	ed92 7b00 	vldr	d7, [r2]
 8029e5a:	eeb0 0a47 	vmov.f32	s0, s14
 8029e5e:	eef0 0a67 	vmov.f32	s1, s15
 8029e62:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029e64:	f7ff f8c0 	bl	8028fe8 <prv_double_to_str>
                break;
 8029e68:	e0bc      	b.n	8029fe4 <prv_format+0x938>
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_FLOAT */
            case 'n': {
                int* ptr = (void*)va_arg(arg, int*);
 8029e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8029e6c:	1d13      	adds	r3, r2, #4
 8029e6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8029e70:	6813      	ldr	r3, [r2, #0]
 8029e72:	647b      	str	r3, [r7, #68]	@ 0x44
                *ptr = (int)lwi->n_len; /* Write current length */
 8029e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029e76:	691b      	ldr	r3, [r3, #16]
 8029e78:	461a      	mov	r2, r3
 8029e7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8029e7c:	601a      	str	r2, [r3, #0]

                break;
 8029e7e:	e0b1      	b.n	8029fe4 <prv_format+0x938>
            }
            case '%': lwi->out_fn(lwi, '%'); break;
 8029e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029e82:	695b      	ldr	r3, [r3, #20]
 8029e84:	2125      	movs	r1, #37	@ 0x25
 8029e86:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029e88:	4798      	blx	r3
 8029e8a:	e0ab      	b.n	8029fe4 <prv_format+0x938>
             * char arr[] = {0, 1, 2, 3, 255};
             * "%5K" would produce 00010203FF
             */
            case 'k':
            case 'K': {
                unsigned char* ptr =
 8029e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8029e8e:	1d13      	adds	r3, r2, #4
 8029e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8029e92:	6813      	ldr	r3, [r2, #0]
 8029e94:	65bb      	str	r3, [r7, #88]	@ 0x58
                    (void*)va_arg(arg, unsigned char*); /* Get input parameter as unsigned char pointer */
                int len = lwi->m.width, full_width;
 8029e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8029e9a:	643b      	str	r3, [r7, #64]	@ 0x40
                uint8_t is_space = lwi->m.flags.space == 1;
 8029e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029e9e:	7f1b      	ldrb	r3, [r3, #28]
 8029ea0:	f003 0304 	and.w	r3, r3, #4
 8029ea4:	b2db      	uxtb	r3, r3
 8029ea6:	2b00      	cmp	r3, #0
 8029ea8:	bf14      	ite	ne
 8029eaa:	2301      	movne	r3, #1
 8029eac:	2300      	moveq	r3, #0
 8029eae:	b2db      	uxtb	r3, r3
 8029eb0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

                if (ptr == NULL || len == 0) {
 8029eb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8029eb6:	2b00      	cmp	r3, #0
 8029eb8:	f000 8094 	beq.w	8029fe4 <prv_format+0x938>
 8029ebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8029ebe:	2b00      	cmp	r3, #0
 8029ec0:	f000 8090 	beq.w	8029fe4 <prv_format+0x938>
                    break;
                }

                lwi->m.flags.zero = 1;  /* Prepend with zeros if necessary */
 8029ec4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029ec6:	7f13      	ldrb	r3, [r2, #28]
 8029ec8:	f043 0308 	orr.w	r3, r3, #8
 8029ecc:	7713      	strb	r3, [r2, #28]
                lwi->m.width = 0;       /* No width parameter */
 8029ece:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029ed0:	2300      	movs	r3, #0
 8029ed2:	6253      	str	r3, [r2, #36]	@ 0x24
                lwi->m.base = 16;       /* Hex format */
 8029ed4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029ed6:	2310      	movs	r3, #16
 8029ed8:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
                lwi->m.flags.space = 0; /* Delete any flag for space */
 8029edc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029ede:	7f13      	ldrb	r3, [r2, #28]
 8029ee0:	f023 0304 	bic.w	r3, r3, #4
 8029ee4:	7713      	strb	r3, [r2, #28]

                /* Full width of digits to print */
                full_width = len * (2 + (int)is_space);
 8029ee6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8029eea:	1c9a      	adds	r2, r3, #2
 8029eec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8029eee:	fb02 f303 	mul.w	r3, r2, r3
 8029ef2:	657b      	str	r3, [r7, #84]	@ 0x54
                if (is_space && full_width > 0) {
 8029ef4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8029ef8:	2b00      	cmp	r3, #0
 8029efa:	d005      	beq.n	8029f08 <prv_format+0x85c>
 8029efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8029efe:	2b00      	cmp	r3, #0
 8029f00:	dd02      	ble.n	8029f08 <prv_format+0x85c>
                    --full_width; /* Remove space after last number */
 8029f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8029f04:	3b01      	subs	r3, #1
 8029f06:	657b      	str	r3, [r7, #84]	@ 0x54
                }

                /* Output byte by byte w/o hex prefix */
                prv_out_str_before(lwi, full_width);
 8029f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8029f0a:	4619      	mov	r1, r3
 8029f0c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029f0e:	f7fe fcc3 	bl	8028898 <prv_out_str_before>
                for (int i = 0; i < len; ++i, ++ptr) {
 8029f12:	2300      	movs	r3, #0
 8029f14:	653b      	str	r3, [r7, #80]	@ 0x50
 8029f16:	e050      	b.n	8029fba <prv_format+0x90e>
                    uint8_t d;

                    d = (*ptr >> 0x04) & 0x0F; /* Print MSB */
 8029f18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8029f1a:	781b      	ldrb	r3, [r3, #0]
 8029f1c:	091b      	lsrs	r3, r3, #4
 8029f1e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 8029f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029f24:	695c      	ldr	r4, [r3, #20]
 8029f26:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8029f2a:	2b09      	cmp	r3, #9
 8029f2c:	d90a      	bls.n	8029f44 <prv_format+0x898>
 8029f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029f30:	7f5b      	ldrb	r3, [r3, #29]
 8029f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8029f36:	b2db      	uxtb	r3, r3
 8029f38:	2b00      	cmp	r3, #0
 8029f3a:	d001      	beq.n	8029f40 <prv_format+0x894>
 8029f3c:	2237      	movs	r2, #55	@ 0x37
 8029f3e:	e002      	b.n	8029f46 <prv_format+0x89a>
 8029f40:	2257      	movs	r2, #87	@ 0x57
 8029f42:	e000      	b.n	8029f46 <prv_format+0x89a>
 8029f44:	2230      	movs	r2, #48	@ 0x30
 8029f46:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8029f4a:	4413      	add	r3, r2
 8029f4c:	b2db      	uxtb	r3, r3
 8029f4e:	4619      	mov	r1, r3
 8029f50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029f52:	47a0      	blx	r4
                    d = *ptr & 0x0F; /* Print LSB */
 8029f54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8029f56:	781b      	ldrb	r3, [r3, #0]
 8029f58:	f003 030f 	and.w	r3, r3, #15
 8029f5c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 8029f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029f62:	695c      	ldr	r4, [r3, #20]
 8029f64:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8029f68:	2b09      	cmp	r3, #9
 8029f6a:	d90a      	bls.n	8029f82 <prv_format+0x8d6>
 8029f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029f6e:	7f5b      	ldrb	r3, [r3, #29]
 8029f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8029f74:	b2db      	uxtb	r3, r3
 8029f76:	2b00      	cmp	r3, #0
 8029f78:	d001      	beq.n	8029f7e <prv_format+0x8d2>
 8029f7a:	2237      	movs	r2, #55	@ 0x37
 8029f7c:	e002      	b.n	8029f84 <prv_format+0x8d8>
 8029f7e:	2257      	movs	r2, #87	@ 0x57
 8029f80:	e000      	b.n	8029f84 <prv_format+0x8d8>
 8029f82:	2230      	movs	r2, #48	@ 0x30
 8029f84:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8029f88:	4413      	add	r3, r2
 8029f8a:	b2db      	uxtb	r3, r3
 8029f8c:	4619      	mov	r1, r3
 8029f8e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029f90:	47a0      	blx	r4

                    if (is_space && i < (len - 1)) {
 8029f92:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8029f96:	2b00      	cmp	r3, #0
 8029f98:	d009      	beq.n	8029fae <prv_format+0x902>
 8029f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8029f9c:	1e5a      	subs	r2, r3, #1
 8029f9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8029fa0:	4293      	cmp	r3, r2
 8029fa2:	da04      	bge.n	8029fae <prv_format+0x902>
                        lwi->out_fn(lwi, ' '); /* Generate space between numbers */
 8029fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029fa6:	695b      	ldr	r3, [r3, #20]
 8029fa8:	2120      	movs	r1, #32
 8029faa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029fac:	4798      	blx	r3
                for (int i = 0; i < len; ++i, ++ptr) {
 8029fae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8029fb0:	3301      	adds	r3, #1
 8029fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8029fb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8029fb6:	3301      	adds	r3, #1
 8029fb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8029fba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8029fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8029fbe:	429a      	cmp	r2, r3
 8029fc0:	dbaa      	blt.n	8029f18 <prv_format+0x86c>
                    }
                }
                prv_out_str_after(lwi, full_width);
 8029fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8029fc4:	4619      	mov	r1, r3
 8029fc6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029fc8:	f7fe fd94 	bl	8028af4 <prv_out_str_after>
                break;
 8029fcc:	e00a      	b.n	8029fe4 <prv_format+0x938>
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_BYTE_ARRAY */
            default: lwi->out_fn(lwi, *fmt);
 8029fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029fd0:	695a      	ldr	r2, [r3, #20]
 8029fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029fd4:	781b      	ldrb	r3, [r3, #0]
 8029fd6:	4619      	mov	r1, r3
 8029fd8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8029fda:	4790      	blx	r2
 8029fdc:	e002      	b.n	8029fe4 <prv_format+0x938>
                break;
 8029fde:	bf00      	nop
 8029fe0:	e000      	b.n	8029fe4 <prv_format+0x938>
                break;
 8029fe2:	bf00      	nop
        }
        ++fmt;
 8029fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029fe6:	3301      	adds	r3, #1
 8029fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
    while (fmt != NULL && *fmt != '\0') {
 8029fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029fec:	2b00      	cmp	r3, #0
 8029fee:	d006      	beq.n	8029ffe <prv_format+0x952>
 8029ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029ff2:	781b      	ldrb	r3, [r3, #0]
 8029ff4:	2b00      	cmp	r3, #0
 8029ff6:	f47f ab67 	bne.w	80296c8 <prv_format+0x1c>
 8029ffa:	e000      	b.n	8029ffe <prv_format+0x952>
            break;
 8029ffc:	bf00      	nop
    }
    lwi->out_fn(lwi, '\0'); /* Output last zero number */
 8029ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a000:	695b      	ldr	r3, [r3, #20]
 802a002:	2100      	movs	r1, #0
 802a004:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 802a006:	4798      	blx	r3
#if LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT
    if (IS_PRINT_MODE(lwi)) { /* Mutex only for print operation */
        lwprintf_sys_mutex_release(&lwi->lwobj->mutex);
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */
    return 1;
 802a008:	2301      	movs	r3, #1
}
 802a00a:	4618      	mov	r0, r3
 802a00c:	3774      	adds	r7, #116	@ 0x74
 802a00e:	46bd      	mov	sp, r7
 802a010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a014 <lwprintf_init_ex>:
 *                      as system mutex isn't needed. All formatting functions (with print being an exception)
 *                      are thread safe. Library utilizes stack-based variables
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwprintf_init_ex(lwprintf_t* lwobj, lwprintf_output_fn out_fn) {
 802a014:	b480      	push	{r7}
 802a016:	b083      	sub	sp, #12
 802a018:	af00      	add	r7, sp, #0
 802a01a:	6078      	str	r0, [r7, #4]
 802a01c:	6039      	str	r1, [r7, #0]
    LWPRINTF_GET_LWOBJ(lwobj)->out_fn = out_fn;
 802a01e:	687b      	ldr	r3, [r7, #4]
 802a020:	2b00      	cmp	r3, #0
 802a022:	d001      	beq.n	802a028 <lwprintf_init_ex+0x14>
 802a024:	687b      	ldr	r3, [r7, #4]
 802a026:	e000      	b.n	802a02a <lwprintf_init_ex+0x16>
 802a028:	4b04      	ldr	r3, [pc, #16]	@ (802a03c <lwprintf_init_ex+0x28>)
 802a02a:	683a      	ldr	r2, [r7, #0]
 802a02c:	601a      	str	r2, [r3, #0]
        && (lwprintf_sys_mutex_isvalid(&LWPRINTF_GET_LWOBJ(lwobj)->mutex)
            || !lwprintf_sys_mutex_create(&LWPRINTF_GET_LWOBJ(lwobj)->mutex))) {
        return 0;
    }
#endif /* LWPRINTF_CFG_OS */
    return 1;
 802a02e:	2301      	movs	r3, #1
}
 802a030:	4618      	mov	r0, r3
 802a032:	370c      	adds	r7, #12
 802a034:	46bd      	mov	sp, r7
 802a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a03a:	4770      	bx	lr
 802a03c:	2000019c 	.word	0x2000019c

0802a040 <lwprintf_vprintf_ex>:
 *                      `va_list` is a special type defined in `<cstdarg>`.
 * \return          The number of characters that would have been written if `n` had been sufficiently large,
 *                      not counting the terminating null character.
 */
int
lwprintf_vprintf_ex(lwprintf_t* const lwobj, const char* format, va_list arg) {
 802a040:	b580      	push	{r7, lr}
 802a042:	b090      	sub	sp, #64	@ 0x40
 802a044:	af00      	add	r7, sp, #0
 802a046:	60f8      	str	r0, [r7, #12]
 802a048:	60b9      	str	r1, [r7, #8]
 802a04a:	607a      	str	r2, [r7, #4]
    lwprintf_int_t fobj = {
 802a04c:	f107 0314 	add.w	r3, r7, #20
 802a050:	222c      	movs	r2, #44	@ 0x2c
 802a052:	2100      	movs	r1, #0
 802a054:	4618      	mov	r0, r3
 802a056:	f006 f9a7 	bl	80303a8 <memset>
        .lwobj = LWPRINTF_GET_LWOBJ(lwobj),
 802a05a:	68fb      	ldr	r3, [r7, #12]
 802a05c:	2b00      	cmp	r3, #0
 802a05e:	d001      	beq.n	802a064 <lwprintf_vprintf_ex+0x24>
 802a060:	68fb      	ldr	r3, [r7, #12]
 802a062:	e000      	b.n	802a066 <lwprintf_vprintf_ex+0x26>
 802a064:	4b0d      	ldr	r3, [pc, #52]	@ (802a09c <lwprintf_vprintf_ex+0x5c>)
    lwprintf_int_t fobj = {
 802a066:	617b      	str	r3, [r7, #20]
 802a068:	68bb      	ldr	r3, [r7, #8]
 802a06a:	61bb      	str	r3, [r7, #24]
 802a06c:	4b0c      	ldr	r3, [pc, #48]	@ (802a0a0 <lwprintf_vprintf_ex+0x60>)
 802a06e:	62bb      	str	r3, [r7, #40]	@ 0x28
        .fmt = format,
        .buff = NULL,
        .buff_size = 0,
    };
    /* For direct print, output function must be set by user */
    if (fobj.lwobj->out_fn == NULL) {
 802a070:	697b      	ldr	r3, [r7, #20]
 802a072:	681b      	ldr	r3, [r3, #0]
 802a074:	2b00      	cmp	r3, #0
 802a076:	d101      	bne.n	802a07c <lwprintf_vprintf_ex+0x3c>
        return 0;
 802a078:	2300      	movs	r3, #0
 802a07a:	e00b      	b.n	802a094 <lwprintf_vprintf_ex+0x54>
    }
    if (prv_format(&fobj, arg)) {
 802a07c:	f107 0314 	add.w	r3, r7, #20
 802a080:	6879      	ldr	r1, [r7, #4]
 802a082:	4618      	mov	r0, r3
 802a084:	f7ff fb12 	bl	80296ac <prv_format>
 802a088:	4603      	mov	r3, r0
 802a08a:	2b00      	cmp	r3, #0
 802a08c:	d001      	beq.n	802a092 <lwprintf_vprintf_ex+0x52>
        return (int)fobj.n_len;
 802a08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a090:	e000      	b.n	802a094 <lwprintf_vprintf_ex+0x54>
    }
    return 0;
 802a092:	2300      	movs	r3, #0
}
 802a094:	4618      	mov	r0, r3
 802a096:	3740      	adds	r7, #64	@ 0x40
 802a098:	46bd      	mov	sp, r7
 802a09a:	bd80      	pop	{r7, pc}
 802a09c:	2000019c 	.word	0x2000019c
 802a0a0:	080287f1 	.word	0x080287f1

0802a0a4 <stm32_log_init>:
#include "main.h"

static lwprintf_t debug;

uint8_t stm32_log_init(lwprintf_output_fn out_fn)
{
 802a0a4:	b580      	push	{r7, lr}
 802a0a6:	b082      	sub	sp, #8
 802a0a8:	af00      	add	r7, sp, #0
 802a0aa:	6078      	str	r0, [r7, #4]

	if(out_fn == NULL)
 802a0ac:	687b      	ldr	r3, [r7, #4]
 802a0ae:	2b00      	cmp	r3, #0
 802a0b0:	d104      	bne.n	802a0bc <stm32_log_init+0x18>
	{
		lwprintf_init_ex(&debug, stm32_log_out);
 802a0b2:	4907      	ldr	r1, [pc, #28]	@ (802a0d0 <stm32_log_init+0x2c>)
 802a0b4:	4807      	ldr	r0, [pc, #28]	@ (802a0d4 <stm32_log_init+0x30>)
 802a0b6:	f7ff ffad 	bl	802a014 <lwprintf_init_ex>
 802a0ba:	e003      	b.n	802a0c4 <stm32_log_init+0x20>
	}
	else
	{
		lwprintf_init_ex(&debug, out_fn);
 802a0bc:	6879      	ldr	r1, [r7, #4]
 802a0be:	4805      	ldr	r0, [pc, #20]	@ (802a0d4 <stm32_log_init+0x30>)
 802a0c0:	f7ff ffa8 	bl	802a014 <lwprintf_init_ex>
	}
	return 0;
 802a0c4:	2300      	movs	r3, #0

}
 802a0c6:	4618      	mov	r0, r3
 802a0c8:	3708      	adds	r7, #8
 802a0ca:	46bd      	mov	sp, r7
 802a0cc:	bd80      	pop	{r7, pc}
 802a0ce:	bf00      	nop
 802a0d0:	0802babd 	.word	0x0802babd
 802a0d4:	200001a4 	.word	0x200001a4

0802a0d8 <stm32_log_timestamp>:
// Función para obtener la marca de tiempo (adapta según sea necesario)
__attribute__((weak)) uint32_t stm32_log_timestamp(void) {
 802a0d8:	b580      	push	{r7, lr}
 802a0da:	af00      	add	r7, sp, #0
    // Implementa la obtención de la marca de tiempo aquí (puede ser un contador o un reloj en tiempo real)
    return HAL_GetTick() ;
 802a0dc:	f002 f9aa 	bl	802c434 <HAL_GetTick>
 802a0e0:	4603      	mov	r3, r0
}
 802a0e2:	4618      	mov	r0, r3
 802a0e4:	bd80      	pop	{r7, pc}
	...

0802a0e8 <stm32_log_write>:

// Función para escribir un mensaje de registro (adapta según sea necesario)
void stm32_log_write(int level, const char* tag, const char* format, ...) {
 802a0e8:	b40c      	push	{r2, r3}
 802a0ea:	b580      	push	{r7, lr}
 802a0ec:	b084      	sub	sp, #16
 802a0ee:	af00      	add	r7, sp, #0
 802a0f0:	6078      	str	r0, [r7, #4]
 802a0f2:	6039      	str	r1, [r7, #0]
    if (level <= STM32_LOG_LEVEL) {
 802a0f4:	687b      	ldr	r3, [r7, #4]
 802a0f6:	2b04      	cmp	r3, #4
 802a0f8:	dc08      	bgt.n	802a10c <stm32_log_write+0x24>
        va_list args;
        va_start(args, format);
 802a0fa:	f107 031c 	add.w	r3, r7, #28
 802a0fe:	60fb      	str	r3, [r7, #12]
        lwprintf_vprintf_ex(&debug, format, args);
 802a100:	68fa      	ldr	r2, [r7, #12]
 802a102:	69b9      	ldr	r1, [r7, #24]
 802a104:	4805      	ldr	r0, [pc, #20]	@ (802a11c <stm32_log_write+0x34>)
 802a106:	f7ff ff9b 	bl	802a040 <lwprintf_vprintf_ex>
        va_end(args);
    }
    return;
 802a10a:	bf00      	nop
 802a10c:	bf00      	nop
}
 802a10e:	3710      	adds	r7, #16
 802a110:	46bd      	mov	sp, r7
 802a112:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802a116:	b002      	add	sp, #8
 802a118:	4770      	bx	lr
 802a11a:	bf00      	nop
 802a11c:	200001a4 	.word	0x200001a4

0802a120 <w25q_build_address_command>:

/**
 * @brief Construye comando con dirección según el modo
 */
static size_t w25q_build_address_command(uint8_t *cmd, uint8_t command, uint32_t addr, w25q_addr_mode_t addr_mode)
{
 802a120:	b480      	push	{r7}
 802a122:	b085      	sub	sp, #20
 802a124:	af00      	add	r7, sp, #0
 802a126:	60f8      	str	r0, [r7, #12]
 802a128:	607a      	str	r2, [r7, #4]
 802a12a:	461a      	mov	r2, r3
 802a12c:	460b      	mov	r3, r1
 802a12e:	72fb      	strb	r3, [r7, #11]
 802a130:	4613      	mov	r3, r2
 802a132:	72bb      	strb	r3, [r7, #10]
	cmd[0] = command;
 802a134:	68fb      	ldr	r3, [r7, #12]
 802a136:	7afa      	ldrb	r2, [r7, #11]
 802a138:	701a      	strb	r2, [r3, #0]

	if (addr_mode == W25Q_ADDR_4BYTE) {
 802a13a:	7abb      	ldrb	r3, [r7, #10]
 802a13c:	2b01      	cmp	r3, #1
 802a13e:	d118      	bne.n	802a172 <w25q_build_address_command+0x52>
		cmd[1] = (uint8_t)((addr >> 24) & 0xFF);
 802a140:	687b      	ldr	r3, [r7, #4]
 802a142:	0e1a      	lsrs	r2, r3, #24
 802a144:	68fb      	ldr	r3, [r7, #12]
 802a146:	3301      	adds	r3, #1
 802a148:	b2d2      	uxtb	r2, r2
 802a14a:	701a      	strb	r2, [r3, #0]
		cmd[2] = (uint8_t)((addr >> 16) & 0xFF);
 802a14c:	687b      	ldr	r3, [r7, #4]
 802a14e:	0c1a      	lsrs	r2, r3, #16
 802a150:	68fb      	ldr	r3, [r7, #12]
 802a152:	3302      	adds	r3, #2
 802a154:	b2d2      	uxtb	r2, r2
 802a156:	701a      	strb	r2, [r3, #0]
		cmd[3] = (uint8_t)((addr >> 8) & 0xFF);
 802a158:	687b      	ldr	r3, [r7, #4]
 802a15a:	0a1a      	lsrs	r2, r3, #8
 802a15c:	68fb      	ldr	r3, [r7, #12]
 802a15e:	3303      	adds	r3, #3
 802a160:	b2d2      	uxtb	r2, r2
 802a162:	701a      	strb	r2, [r3, #0]
		cmd[4] = (uint8_t)(addr & 0xFF);
 802a164:	68fb      	ldr	r3, [r7, #12]
 802a166:	3304      	adds	r3, #4
 802a168:	687a      	ldr	r2, [r7, #4]
 802a16a:	b2d2      	uxtb	r2, r2
 802a16c:	701a      	strb	r2, [r3, #0]
		return 5;
 802a16e:	2305      	movs	r3, #5
 802a170:	e011      	b.n	802a196 <w25q_build_address_command+0x76>
	} else {
		// Modo 3 bytes
		cmd[1] = (uint8_t)((addr >> 16) & 0xFF);
 802a172:	687b      	ldr	r3, [r7, #4]
 802a174:	0c1a      	lsrs	r2, r3, #16
 802a176:	68fb      	ldr	r3, [r7, #12]
 802a178:	3301      	adds	r3, #1
 802a17a:	b2d2      	uxtb	r2, r2
 802a17c:	701a      	strb	r2, [r3, #0]
		cmd[2] = (uint8_t)((addr >> 8) & 0xFF);
 802a17e:	687b      	ldr	r3, [r7, #4]
 802a180:	0a1a      	lsrs	r2, r3, #8
 802a182:	68fb      	ldr	r3, [r7, #12]
 802a184:	3302      	adds	r3, #2
 802a186:	b2d2      	uxtb	r2, r2
 802a188:	701a      	strb	r2, [r3, #0]
		cmd[3] = (uint8_t)(addr & 0xFF);
 802a18a:	68fb      	ldr	r3, [r7, #12]
 802a18c:	3303      	adds	r3, #3
 802a18e:	687a      	ldr	r2, [r7, #4]
 802a190:	b2d2      	uxtb	r2, r2
 802a192:	701a      	strb	r2, [r3, #0]
		return 4;
 802a194:	2304      	movs	r3, #4
	}
}
 802a196:	4618      	mov	r0, r3
 802a198:	3714      	adds	r7, #20
 802a19a:	46bd      	mov	sp, r7
 802a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1a0:	4770      	bx	lr

0802a1a2 <w25q_spi_command>:

/**
 * @brief Ejecuta comando SPI simple
 */
static w25q_err_t w25q_spi_command(w25q_handle_t *handle, uint8_t cmd)
{
 802a1a2:	b590      	push	{r4, r7, lr}
 802a1a4:	b085      	sub	sp, #20
 802a1a6:	af00      	add	r7, sp, #0
 802a1a8:	6078      	str	r0, [r7, #4]
 802a1aa:	460b      	mov	r3, r1
 802a1ac:	70fb      	strb	r3, [r7, #3]
	if (handle->software_cs && handle->hw->cs_control) {
 802a1ae:	687b      	ldr	r3, [r7, #4]
 802a1b0:	7f1b      	ldrb	r3, [r3, #28]
 802a1b2:	2b00      	cmp	r3, #0
 802a1b4:	d00c      	beq.n	802a1d0 <w25q_spi_command+0x2e>
 802a1b6:	687b      	ldr	r3, [r7, #4]
 802a1b8:	681b      	ldr	r3, [r3, #0]
 802a1ba:	689b      	ldr	r3, [r3, #8]
 802a1bc:	2b00      	cmp	r3, #0
 802a1be:	d007      	beq.n	802a1d0 <w25q_spi_command+0x2e>
		handle->hw->cs_control(handle->user_ctx, true);
 802a1c0:	687b      	ldr	r3, [r7, #4]
 802a1c2:	681b      	ldr	r3, [r3, #0]
 802a1c4:	689b      	ldr	r3, [r3, #8]
 802a1c6:	687a      	ldr	r2, [r7, #4]
 802a1c8:	6852      	ldr	r2, [r2, #4]
 802a1ca:	2101      	movs	r1, #1
 802a1cc:	4610      	mov	r0, r2
 802a1ce:	4798      	blx	r3
	}

	w25q_err_t ret = W25Q_OK;
 802a1d0:	2300      	movs	r3, #0
 802a1d2:	73fb      	strb	r3, [r7, #15]
	if (handle->hw->spi_write_read(handle->user_ctx, &cmd, NULL, 1) != 0) {
 802a1d4:	687b      	ldr	r3, [r7, #4]
 802a1d6:	681b      	ldr	r3, [r3, #0]
 802a1d8:	685c      	ldr	r4, [r3, #4]
 802a1da:	687b      	ldr	r3, [r7, #4]
 802a1dc:	6858      	ldr	r0, [r3, #4]
 802a1de:	1cf9      	adds	r1, r7, #3
 802a1e0:	2301      	movs	r3, #1
 802a1e2:	2200      	movs	r2, #0
 802a1e4:	47a0      	blx	r4
 802a1e6:	4603      	mov	r3, r0
 802a1e8:	2b00      	cmp	r3, #0
 802a1ea:	d001      	beq.n	802a1f0 <w25q_spi_command+0x4e>
		ret = W25Q_ERR_SPI;
 802a1ec:	23fe      	movs	r3, #254	@ 0xfe
 802a1ee:	73fb      	strb	r3, [r7, #15]
	}

	if (handle->software_cs && handle->hw->cs_control) {
 802a1f0:	687b      	ldr	r3, [r7, #4]
 802a1f2:	7f1b      	ldrb	r3, [r3, #28]
 802a1f4:	2b00      	cmp	r3, #0
 802a1f6:	d00c      	beq.n	802a212 <w25q_spi_command+0x70>
 802a1f8:	687b      	ldr	r3, [r7, #4]
 802a1fa:	681b      	ldr	r3, [r3, #0]
 802a1fc:	689b      	ldr	r3, [r3, #8]
 802a1fe:	2b00      	cmp	r3, #0
 802a200:	d007      	beq.n	802a212 <w25q_spi_command+0x70>
		handle->hw->cs_control(handle->user_ctx, false);
 802a202:	687b      	ldr	r3, [r7, #4]
 802a204:	681b      	ldr	r3, [r3, #0]
 802a206:	689b      	ldr	r3, [r3, #8]
 802a208:	687a      	ldr	r2, [r7, #4]
 802a20a:	6852      	ldr	r2, [r2, #4]
 802a20c:	2100      	movs	r1, #0
 802a20e:	4610      	mov	r0, r2
 802a210:	4798      	blx	r3
	}

	return ret;
 802a212:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802a216:	4618      	mov	r0, r3
 802a218:	3714      	adds	r7, #20
 802a21a:	46bd      	mov	sp, r7
 802a21c:	bd90      	pop	{r4, r7, pc}

0802a21e <w25q_spi_transfer>:
 * @brief Transferencia SPI con datos
 */
static w25q_err_t w25q_spi_transfer(w25q_handle_t *handle,
		const uint8_t *tx_data, uint8_t *rx_data,
		size_t len)
{
 802a21e:	b590      	push	{r4, r7, lr}
 802a220:	b087      	sub	sp, #28
 802a222:	af00      	add	r7, sp, #0
 802a224:	60f8      	str	r0, [r7, #12]
 802a226:	60b9      	str	r1, [r7, #8]
 802a228:	607a      	str	r2, [r7, #4]
 802a22a:	603b      	str	r3, [r7, #0]
	if (handle->software_cs && handle->hw->cs_control) {
 802a22c:	68fb      	ldr	r3, [r7, #12]
 802a22e:	7f1b      	ldrb	r3, [r3, #28]
 802a230:	2b00      	cmp	r3, #0
 802a232:	d00c      	beq.n	802a24e <w25q_spi_transfer+0x30>
 802a234:	68fb      	ldr	r3, [r7, #12]
 802a236:	681b      	ldr	r3, [r3, #0]
 802a238:	689b      	ldr	r3, [r3, #8]
 802a23a:	2b00      	cmp	r3, #0
 802a23c:	d007      	beq.n	802a24e <w25q_spi_transfer+0x30>
		handle->hw->cs_control(handle->user_ctx, true);
 802a23e:	68fb      	ldr	r3, [r7, #12]
 802a240:	681b      	ldr	r3, [r3, #0]
 802a242:	689b      	ldr	r3, [r3, #8]
 802a244:	68fa      	ldr	r2, [r7, #12]
 802a246:	6852      	ldr	r2, [r2, #4]
 802a248:	2101      	movs	r1, #1
 802a24a:	4610      	mov	r0, r2
 802a24c:	4798      	blx	r3
	}

	w25q_err_t ret = W25Q_OK;
 802a24e:	2300      	movs	r3, #0
 802a250:	75fb      	strb	r3, [r7, #23]
	if (handle->hw->spi_write_read(handle->user_ctx, tx_data, rx_data, len) != 0) {
 802a252:	68fb      	ldr	r3, [r7, #12]
 802a254:	681b      	ldr	r3, [r3, #0]
 802a256:	685c      	ldr	r4, [r3, #4]
 802a258:	68fb      	ldr	r3, [r7, #12]
 802a25a:	6858      	ldr	r0, [r3, #4]
 802a25c:	683b      	ldr	r3, [r7, #0]
 802a25e:	687a      	ldr	r2, [r7, #4]
 802a260:	68b9      	ldr	r1, [r7, #8]
 802a262:	47a0      	blx	r4
 802a264:	4603      	mov	r3, r0
 802a266:	2b00      	cmp	r3, #0
 802a268:	d001      	beq.n	802a26e <w25q_spi_transfer+0x50>
		ret = W25Q_ERR_SPI;
 802a26a:	23fe      	movs	r3, #254	@ 0xfe
 802a26c:	75fb      	strb	r3, [r7, #23]
	}

	if (handle->software_cs && handle->hw->cs_control) {
 802a26e:	68fb      	ldr	r3, [r7, #12]
 802a270:	7f1b      	ldrb	r3, [r3, #28]
 802a272:	2b00      	cmp	r3, #0
 802a274:	d00c      	beq.n	802a290 <w25q_spi_transfer+0x72>
 802a276:	68fb      	ldr	r3, [r7, #12]
 802a278:	681b      	ldr	r3, [r3, #0]
 802a27a:	689b      	ldr	r3, [r3, #8]
 802a27c:	2b00      	cmp	r3, #0
 802a27e:	d007      	beq.n	802a290 <w25q_spi_transfer+0x72>
		handle->hw->cs_control(handle->user_ctx, false);
 802a280:	68fb      	ldr	r3, [r7, #12]
 802a282:	681b      	ldr	r3, [r3, #0]
 802a284:	689b      	ldr	r3, [r3, #8]
 802a286:	68fa      	ldr	r2, [r7, #12]
 802a288:	6852      	ldr	r2, [r2, #4]
 802a28a:	2100      	movs	r1, #0
 802a28c:	4610      	mov	r0, r2
 802a28e:	4798      	blx	r3
	}

	return ret;
 802a290:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802a294:	4618      	mov	r0, r3
 802a296:	371c      	adds	r7, #28
 802a298:	46bd      	mov	sp, r7
 802a29a:	bd90      	pop	{r4, r7, pc}

0802a29c <w25q_lock>:

/**
 * @brief Lock para thread safety
 */
static void w25q_lock(w25q_handle_t *handle)
{
 802a29c:	b580      	push	{r7, lr}
 802a29e:	b082      	sub	sp, #8
 802a2a0:	af00      	add	r7, sp, #0
 802a2a2:	6078      	str	r0, [r7, #4]
	if (handle->hw->lock) {
 802a2a4:	687b      	ldr	r3, [r7, #4]
 802a2a6:	681b      	ldr	r3, [r3, #0]
 802a2a8:	691b      	ldr	r3, [r3, #16]
 802a2aa:	2b00      	cmp	r3, #0
 802a2ac:	d006      	beq.n	802a2bc <w25q_lock+0x20>
		handle->hw->lock(handle->user_ctx);
 802a2ae:	687b      	ldr	r3, [r7, #4]
 802a2b0:	681b      	ldr	r3, [r3, #0]
 802a2b2:	691b      	ldr	r3, [r3, #16]
 802a2b4:	687a      	ldr	r2, [r7, #4]
 802a2b6:	6852      	ldr	r2, [r2, #4]
 802a2b8:	4610      	mov	r0, r2
 802a2ba:	4798      	blx	r3
	}
}
 802a2bc:	bf00      	nop
 802a2be:	3708      	adds	r7, #8
 802a2c0:	46bd      	mov	sp, r7
 802a2c2:	bd80      	pop	{r7, pc}

0802a2c4 <w25q_unlock>:

/**
 * @brief Unlock para thread safety
 */
static void w25q_unlock(w25q_handle_t *handle)
{
 802a2c4:	b580      	push	{r7, lr}
 802a2c6:	b082      	sub	sp, #8
 802a2c8:	af00      	add	r7, sp, #0
 802a2ca:	6078      	str	r0, [r7, #4]
	if (handle->hw->unlock) {
 802a2cc:	687b      	ldr	r3, [r7, #4]
 802a2ce:	681b      	ldr	r3, [r3, #0]
 802a2d0:	695b      	ldr	r3, [r3, #20]
 802a2d2:	2b00      	cmp	r3, #0
 802a2d4:	d006      	beq.n	802a2e4 <w25q_unlock+0x20>
		handle->hw->unlock(handle->user_ctx);
 802a2d6:	687b      	ldr	r3, [r7, #4]
 802a2d8:	681b      	ldr	r3, [r3, #0]
 802a2da:	695b      	ldr	r3, [r3, #20]
 802a2dc:	687a      	ldr	r2, [r7, #4]
 802a2de:	6852      	ldr	r2, [r2, #4]
 802a2e0:	4610      	mov	r0, r2
 802a2e2:	4798      	blx	r3
	}
}
 802a2e4:	bf00      	nop
 802a2e6:	3708      	adds	r7, #8
 802a2e8:	46bd      	mov	sp, r7
 802a2ea:	bd80      	pop	{r7, pc}

0802a2ec <w25q_detect_capacity>:
/**
 * @brief Detecta capacidad basado en JEDEC ID
 */
static w25q_err_t w25q_detect_capacity(w25q_handle_t *handle, uint8_t manufacturer_id,
		uint8_t memory_type, uint8_t capacity_id)
{
 802a2ec:	b480      	push	{r7}
 802a2ee:	b085      	sub	sp, #20
 802a2f0:	af00      	add	r7, sp, #0
 802a2f2:	6078      	str	r0, [r7, #4]
 802a2f4:	4608      	mov	r0, r1
 802a2f6:	4611      	mov	r1, r2
 802a2f8:	461a      	mov	r2, r3
 802a2fa:	4603      	mov	r3, r0
 802a2fc:	70fb      	strb	r3, [r7, #3]
 802a2fe:	460b      	mov	r3, r1
 802a300:	70bb      	strb	r3, [r7, #2]
 802a302:	4613      	mov	r3, r2
 802a304:	707b      	strb	r3, [r7, #1]
	// Verificar fabricante Winbond
	if (manufacturer_id != 0xEF) {
 802a306:	78fb      	ldrb	r3, [r7, #3]
 802a308:	2bef      	cmp	r3, #239	@ 0xef
 802a30a:	d002      	beq.n	802a312 <w25q_detect_capacity+0x26>
		return W25Q_ERR_UNSUPPORTED;
 802a30c:	f06f 0308 	mvn.w	r3, #8
 802a310:	e0a2      	b.n	802a458 <w25q_detect_capacity+0x16c>
	}

	// Verificar que sea de la familia W25Q (Memory Type = 0x40)
	if (memory_type != 0x40) {
 802a312:	78bb      	ldrb	r3, [r7, #2]
 802a314:	2b40      	cmp	r3, #64	@ 0x40
 802a316:	d002      	beq.n	802a31e <w25q_detect_capacity+0x32>
		return W25Q_ERR_UNSUPPORTED;
 802a318:	f06f 0308 	mvn.w	r3, #8
 802a31c:	e09c      	b.n	802a458 <w25q_detect_capacity+0x16c>
	}

	// Combinar memory_type y capacity_id para comparar
	uint16_t device_id = (memory_type << 8) | capacity_id;
 802a31e:	78bb      	ldrb	r3, [r7, #2]
 802a320:	b21b      	sxth	r3, r3
 802a322:	021b      	lsls	r3, r3, #8
 802a324:	b21a      	sxth	r2, r3
 802a326:	787b      	ldrb	r3, [r7, #1]
 802a328:	b21b      	sxth	r3, r3
 802a32a:	4313      	orrs	r3, r2
 802a32c:	b21b      	sxth	r3, r3
 802a32e:	81fb      	strh	r3, [r7, #14]

	switch (device_id) {
 802a330:	89fb      	ldrh	r3, [r7, #14]
 802a332:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 802a336:	3b11      	subs	r3, #17
 802a338:	2b0f      	cmp	r3, #15
 802a33a:	d873      	bhi.n	802a424 <w25q_detect_capacity+0x138>
 802a33c:	a201      	add	r2, pc, #4	@ (adr r2, 802a344 <w25q_detect_capacity+0x58>)
 802a33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a342:	bf00      	nop
 802a344:	0802a385 	.word	0x0802a385
 802a348:	0802a395 	.word	0x0802a395
 802a34c:	0802a3a5 	.word	0x0802a3a5
 802a350:	0802a3b5 	.word	0x0802a3b5
 802a354:	0802a3c5 	.word	0x0802a3c5
 802a358:	0802a3d5 	.word	0x0802a3d5
 802a35c:	0802a3e5 	.word	0x0802a3e5
 802a360:	0802a3f5 	.word	0x0802a3f5
 802a364:	0802a405 	.word	0x0802a405
 802a368:	0802a425 	.word	0x0802a425
 802a36c:	0802a425 	.word	0x0802a425
 802a370:	0802a425 	.word	0x0802a425
 802a374:	0802a425 	.word	0x0802a425
 802a378:	0802a425 	.word	0x0802a425
 802a37c:	0802a425 	.word	0x0802a425
 802a380:	0802a415 	.word	0x0802a415
	case W25Q_CAPACITY_1MBIT:
		handle->info.capacity_bytes = 131072;      // 1Mbit = 128KB
 802a384:	687b      	ldr	r3, [r7, #4]
 802a386:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 802a38a:	609a      	str	r2, [r3, #8]
		handle->info.addr_mode = W25Q_ADDR_3BYTE;
 802a38c:	687b      	ldr	r3, [r7, #4]
 802a38e:	2200      	movs	r2, #0
 802a390:	75da      	strb	r2, [r3, #23]
		break;
 802a392:	e04a      	b.n	802a42a <w25q_detect_capacity+0x13e>
	case W25Q_CAPACITY_2MBIT:
		handle->info.capacity_bytes = 262144;      // 2Mbit = 256KB
 802a394:	687b      	ldr	r3, [r7, #4]
 802a396:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 802a39a:	609a      	str	r2, [r3, #8]
		handle->info.addr_mode = W25Q_ADDR_3BYTE;
 802a39c:	687b      	ldr	r3, [r7, #4]
 802a39e:	2200      	movs	r2, #0
 802a3a0:	75da      	strb	r2, [r3, #23]
		break;
 802a3a2:	e042      	b.n	802a42a <w25q_detect_capacity+0x13e>
	case W25Q_CAPACITY_4MBIT:
		handle->info.capacity_bytes = 524288;      // 4Mbit = 512KB
 802a3a4:	687b      	ldr	r3, [r7, #4]
 802a3a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 802a3aa:	609a      	str	r2, [r3, #8]
		handle->info.addr_mode = W25Q_ADDR_3BYTE;
 802a3ac:	687b      	ldr	r3, [r7, #4]
 802a3ae:	2200      	movs	r2, #0
 802a3b0:	75da      	strb	r2, [r3, #23]
		break;
 802a3b2:	e03a      	b.n	802a42a <w25q_detect_capacity+0x13e>
	case W25Q_CAPACITY_8MBIT:
		handle->info.capacity_bytes = 1048576;     // 8Mbit = 1MB
 802a3b4:	687b      	ldr	r3, [r7, #4]
 802a3b6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 802a3ba:	609a      	str	r2, [r3, #8]
		handle->info.addr_mode = W25Q_ADDR_3BYTE;
 802a3bc:	687b      	ldr	r3, [r7, #4]
 802a3be:	2200      	movs	r2, #0
 802a3c0:	75da      	strb	r2, [r3, #23]
		break;
 802a3c2:	e032      	b.n	802a42a <w25q_detect_capacity+0x13e>
	case W25Q_CAPACITY_16MBIT:
		handle->info.capacity_bytes = 2097152;     // 16Mbit = 2MB
 802a3c4:	687b      	ldr	r3, [r7, #4]
 802a3c6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 802a3ca:	609a      	str	r2, [r3, #8]
		handle->info.addr_mode = W25Q_ADDR_3BYTE;
 802a3cc:	687b      	ldr	r3, [r7, #4]
 802a3ce:	2200      	movs	r2, #0
 802a3d0:	75da      	strb	r2, [r3, #23]
		break;
 802a3d2:	e02a      	b.n	802a42a <w25q_detect_capacity+0x13e>
	case W25Q_CAPACITY_32MBIT:
		handle->info.capacity_bytes = 4194304;     // 32Mbit = 4MB
 802a3d4:	687b      	ldr	r3, [r7, #4]
 802a3d6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 802a3da:	609a      	str	r2, [r3, #8]
		handle->info.addr_mode = W25Q_ADDR_3BYTE;
 802a3dc:	687b      	ldr	r3, [r7, #4]
 802a3de:	2200      	movs	r2, #0
 802a3e0:	75da      	strb	r2, [r3, #23]
		break;
 802a3e2:	e022      	b.n	802a42a <w25q_detect_capacity+0x13e>
	case W25Q_CAPACITY_64MBIT:
		handle->info.capacity_bytes = 8388608;     // 64Mbit = 8MB
 802a3e4:	687b      	ldr	r3, [r7, #4]
 802a3e6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 802a3ea:	609a      	str	r2, [r3, #8]
		handle->info.addr_mode = W25Q_ADDR_3BYTE;
 802a3ec:	687b      	ldr	r3, [r7, #4]
 802a3ee:	2200      	movs	r2, #0
 802a3f0:	75da      	strb	r2, [r3, #23]
		break;
 802a3f2:	e01a      	b.n	802a42a <w25q_detect_capacity+0x13e>
	case W25Q_CAPACITY_128MBIT:
		handle->info.capacity_bytes = 16777216;    // 128Mbit = 16MB
 802a3f4:	687b      	ldr	r3, [r7, #4]
 802a3f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 802a3fa:	609a      	str	r2, [r3, #8]
		handle->info.addr_mode = W25Q_ADDR_3BYTE;
 802a3fc:	687b      	ldr	r3, [r7, #4]
 802a3fe:	2200      	movs	r2, #0
 802a400:	75da      	strb	r2, [r3, #23]
		break;
 802a402:	e012      	b.n	802a42a <w25q_detect_capacity+0x13e>
	case W25Q_CAPACITY_256MBIT:
		handle->info.capacity_bytes = 33554432;    // 256Mbit = 32MB
 802a404:	687b      	ldr	r3, [r7, #4]
 802a406:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 802a40a:	609a      	str	r2, [r3, #8]
		handle->info.addr_mode = W25Q_ADDR_4BYTE;
 802a40c:	687b      	ldr	r3, [r7, #4]
 802a40e:	2201      	movs	r2, #1
 802a410:	75da      	strb	r2, [r3, #23]
		break;
 802a412:	e00a      	b.n	802a42a <w25q_detect_capacity+0x13e>
	case W25Q_CAPACITY_512MBIT:
		handle->info.capacity_bytes = 67108864;    // 512Mbit = 64MB
 802a414:	687b      	ldr	r3, [r7, #4]
 802a416:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 802a41a:	609a      	str	r2, [r3, #8]
		handle->info.addr_mode = W25Q_ADDR_4BYTE;
 802a41c:	687b      	ldr	r3, [r7, #4]
 802a41e:	2201      	movs	r2, #1
 802a420:	75da      	strb	r2, [r3, #23]
		break;
 802a422:	e002      	b.n	802a42a <w25q_detect_capacity+0x13e>
	default:
		return W25Q_ERR_UNSUPPORTED;
 802a424:	f06f 0308 	mvn.w	r3, #8
 802a428:	e016      	b.n	802a458 <w25q_detect_capacity+0x16c>
	}

	// Configurar tamaños estándar
	handle->info.page_size = W25Q_PAGE_SIZE;
 802a42a:	687b      	ldr	r3, [r7, #4]
 802a42c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 802a430:	819a      	strh	r2, [r3, #12]
	handle->info.sector_size = W25Q_SECTOR_SIZE;
 802a432:	687b      	ldr	r3, [r7, #4]
 802a434:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 802a438:	81da      	strh	r2, [r3, #14]
	handle->info.num_sectors = handle->info.capacity_bytes / W25Q_SECTOR_SIZE;
 802a43a:	687b      	ldr	r3, [r7, #4]
 802a43c:	689b      	ldr	r3, [r3, #8]
 802a43e:	0b1a      	lsrs	r2, r3, #12
 802a440:	687b      	ldr	r3, [r7, #4]
 802a442:	611a      	str	r2, [r3, #16]
	handle->info.manufacturer_id = manufacturer_id;
 802a444:	687b      	ldr	r3, [r7, #4]
 802a446:	78fa      	ldrb	r2, [r7, #3]
 802a448:	751a      	strb	r2, [r3, #20]
	handle->info.memory_type = memory_type;
 802a44a:	687b      	ldr	r3, [r7, #4]
 802a44c:	78ba      	ldrb	r2, [r7, #2]
 802a44e:	755a      	strb	r2, [r3, #21]
	handle->info.capacity_id = capacity_id;
 802a450:	687b      	ldr	r3, [r7, #4]
 802a452:	787a      	ldrb	r2, [r7, #1]
 802a454:	759a      	strb	r2, [r3, #22]

	return W25Q_OK;
 802a456:	2300      	movs	r3, #0
}
 802a458:	4618      	mov	r0, r3
 802a45a:	3714      	adds	r7, #20
 802a45c:	46bd      	mov	sp, r7
 802a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a462:	4770      	bx	lr

0802a464 <w25q_check_address>:

/**
 * @brief Verifica parámetros de dirección y longitud
 */
static w25q_err_t w25q_check_address(w25q_handle_t *handle, uint32_t addr, size_t len)
{
 802a464:	b480      	push	{r7}
 802a466:	b085      	sub	sp, #20
 802a468:	af00      	add	r7, sp, #0
 802a46a:	60f8      	str	r0, [r7, #12]
 802a46c:	60b9      	str	r1, [r7, #8]
 802a46e:	607a      	str	r2, [r7, #4]
	if (!handle->initialized) {
 802a470:	68fb      	ldr	r3, [r7, #12]
 802a472:	7f5b      	ldrb	r3, [r3, #29]
 802a474:	f083 0301 	eor.w	r3, r3, #1
 802a478:	b2db      	uxtb	r3, r3
 802a47a:	2b00      	cmp	r3, #0
 802a47c:	d002      	beq.n	802a484 <w25q_check_address+0x20>
		return W25Q_ERR_PARAM;
 802a47e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a482:	e018      	b.n	802a4b6 <w25q_check_address+0x52>
	}

	if (addr >= handle->info.capacity_bytes) {
 802a484:	68fb      	ldr	r3, [r7, #12]
 802a486:	689b      	ldr	r3, [r3, #8]
 802a488:	68ba      	ldr	r2, [r7, #8]
 802a48a:	429a      	cmp	r2, r3
 802a48c:	d302      	bcc.n	802a494 <w25q_check_address+0x30>
		return W25Q_ERR_ADDR;
 802a48e:	f06f 0306 	mvn.w	r3, #6
 802a492:	e010      	b.n	802a4b6 <w25q_check_address+0x52>
	}

	if (len == 0) {
 802a494:	687b      	ldr	r3, [r7, #4]
 802a496:	2b00      	cmp	r3, #0
 802a498:	d102      	bne.n	802a4a0 <w25q_check_address+0x3c>
		return W25Q_ERR_SIZE;
 802a49a:	f06f 0307 	mvn.w	r3, #7
 802a49e:	e00a      	b.n	802a4b6 <w25q_check_address+0x52>
	}

	if ((addr + len) > handle->info.capacity_bytes) {
 802a4a0:	68ba      	ldr	r2, [r7, #8]
 802a4a2:	687b      	ldr	r3, [r7, #4]
 802a4a4:	441a      	add	r2, r3
 802a4a6:	68fb      	ldr	r3, [r7, #12]
 802a4a8:	689b      	ldr	r3, [r3, #8]
 802a4aa:	429a      	cmp	r2, r3
 802a4ac:	d902      	bls.n	802a4b4 <w25q_check_address+0x50>
		return W25Q_ERR_SIZE;
 802a4ae:	f06f 0307 	mvn.w	r3, #7
 802a4b2:	e000      	b.n	802a4b6 <w25q_check_address+0x52>
	}

	return W25Q_OK;
 802a4b4:	2300      	movs	r3, #0
}
 802a4b6:	4618      	mov	r0, r3
 802a4b8:	3714      	adds	r7, #20
 802a4ba:	46bd      	mov	sp, r7
 802a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a4c0:	4770      	bx	lr

0802a4c2 <w25q_init>:
// ============================================================================
// Implementación API pública
// ============================================================================

w25q_err_t w25q_init(w25q_handle_t *handle, const w25q_config_t *config)
{
 802a4c2:	b580      	push	{r7, lr}
 802a4c4:	b084      	sub	sp, #16
 802a4c6:	af00      	add	r7, sp, #0
 802a4c8:	6078      	str	r0, [r7, #4]
 802a4ca:	6039      	str	r1, [r7, #0]
	if (!handle || !config || !config->hw || !config->hw->spi_write_read || !config->hw->delay_ms) {
 802a4cc:	687b      	ldr	r3, [r7, #4]
 802a4ce:	2b00      	cmp	r3, #0
 802a4d0:	d010      	beq.n	802a4f4 <w25q_init+0x32>
 802a4d2:	683b      	ldr	r3, [r7, #0]
 802a4d4:	2b00      	cmp	r3, #0
 802a4d6:	d00d      	beq.n	802a4f4 <w25q_init+0x32>
 802a4d8:	683b      	ldr	r3, [r7, #0]
 802a4da:	681b      	ldr	r3, [r3, #0]
 802a4dc:	2b00      	cmp	r3, #0
 802a4de:	d009      	beq.n	802a4f4 <w25q_init+0x32>
 802a4e0:	683b      	ldr	r3, [r7, #0]
 802a4e2:	681b      	ldr	r3, [r3, #0]
 802a4e4:	685b      	ldr	r3, [r3, #4]
 802a4e6:	2b00      	cmp	r3, #0
 802a4e8:	d004      	beq.n	802a4f4 <w25q_init+0x32>
 802a4ea:	683b      	ldr	r3, [r7, #0]
 802a4ec:	681b      	ldr	r3, [r3, #0]
 802a4ee:	68db      	ldr	r3, [r3, #12]
 802a4f0:	2b00      	cmp	r3, #0
 802a4f2:	d102      	bne.n	802a4fa <w25q_init+0x38>
		return W25Q_ERR_PARAM;
 802a4f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a4f8:	e075      	b.n	802a5e6 <w25q_init+0x124>
	}

	// Inicializar estructura
	memset(handle, 0, sizeof(w25q_handle_t));
 802a4fa:	2220      	movs	r2, #32
 802a4fc:	2100      	movs	r1, #0
 802a4fe:	6878      	ldr	r0, [r7, #4]
 802a500:	f005 ff52 	bl	80303a8 <memset>
	handle->hw = config->hw;
 802a504:	683b      	ldr	r3, [r7, #0]
 802a506:	681a      	ldr	r2, [r3, #0]
 802a508:	687b      	ldr	r3, [r7, #4]
 802a50a:	601a      	str	r2, [r3, #0]
	handle->user_ctx = config->user_ctx;
 802a50c:	683b      	ldr	r3, [r7, #0]
 802a50e:	685a      	ldr	r2, [r3, #4]
 802a510:	687b      	ldr	r3, [r7, #4]
 802a512:	605a      	str	r2, [r3, #4]
	handle->timeout_ms = config->timeout_ms ? config->timeout_ms : W25Q_DEFAULT_TIMEOUT_MS;
 802a514:	683b      	ldr	r3, [r7, #0]
 802a516:	689b      	ldr	r3, [r3, #8]
 802a518:	2b00      	cmp	r3, #0
 802a51a:	d002      	beq.n	802a522 <w25q_init+0x60>
 802a51c:	683b      	ldr	r3, [r7, #0]
 802a51e:	689b      	ldr	r3, [r3, #8]
 802a520:	e001      	b.n	802a526 <w25q_init+0x64>
 802a522:	f241 3388 	movw	r3, #5000	@ 0x1388
 802a526:	687a      	ldr	r2, [r7, #4]
 802a528:	6193      	str	r3, [r2, #24]
	handle->software_cs = config->software_cs;
 802a52a:	683b      	ldr	r3, [r7, #0]
 802a52c:	7b1a      	ldrb	r2, [r3, #12]
 802a52e:	687b      	ldr	r3, [r7, #4]
 802a530:	771a      	strb	r2, [r3, #28]

	// Inicializar SPI si está disponible
	if (handle->hw->spi_init) {
 802a532:	687b      	ldr	r3, [r7, #4]
 802a534:	681b      	ldr	r3, [r3, #0]
 802a536:	681b      	ldr	r3, [r3, #0]
 802a538:	2b00      	cmp	r3, #0
 802a53a:	d00c      	beq.n	802a556 <w25q_init+0x94>
		if (handle->hw->spi_init(handle->user_ctx) != 0) {
 802a53c:	687b      	ldr	r3, [r7, #4]
 802a53e:	681b      	ldr	r3, [r3, #0]
 802a540:	681b      	ldr	r3, [r3, #0]
 802a542:	687a      	ldr	r2, [r7, #4]
 802a544:	6852      	ldr	r2, [r2, #4]
 802a546:	4610      	mov	r0, r2
 802a548:	4798      	blx	r3
 802a54a:	4603      	mov	r3, r0
 802a54c:	2b00      	cmp	r3, #0
 802a54e:	d002      	beq.n	802a556 <w25q_init+0x94>
			return W25Q_ERR_SPI;
 802a550:	f06f 0301 	mvn.w	r3, #1
 802a554:	e047      	b.n	802a5e6 <w25q_init+0x124>
		}
	}

	w25q_lock(handle);
 802a556:	6878      	ldr	r0, [r7, #4]
 802a558:	f7ff fea0 	bl	802a29c <w25q_lock>

	// Liberar de power down si está
	w25q_release_power_down(handle);
 802a55c:	6878      	ldr	r0, [r7, #4]
 802a55e:	f000 fc41 	bl	802ade4 <w25q_release_power_down>
	// Leer JEDEC ID para detectar dispositivo
	uint8_t jedec_id[3];
	w25q_err_t ret = w25q_read_jedec_id(handle, jedec_id);
 802a562:	f107 030c 	add.w	r3, r7, #12
 802a566:	4619      	mov	r1, r3
 802a568:	6878      	ldr	r0, [r7, #4]
 802a56a:	f000 f88b 	bl	802a684 <w25q_read_jedec_id>
 802a56e:	4603      	mov	r3, r0
 802a570:	73fb      	strb	r3, [r7, #15]
	if (ret != W25Q_OK) {
 802a572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a576:	2b00      	cmp	r3, #0
 802a578:	d005      	beq.n	802a586 <w25q_init+0xc4>
		w25q_unlock(handle);
 802a57a:	6878      	ldr	r0, [r7, #4]
 802a57c:	f7ff fea2 	bl	802a2c4 <w25q_unlock>
		return ret;
 802a580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a584:	e02f      	b.n	802a5e6 <w25q_init+0x124>
	}

	// Detectar capacidad
	ret = w25q_detect_capacity(handle, jedec_id[0], jedec_id[1], jedec_id[2]);
 802a586:	7b39      	ldrb	r1, [r7, #12]
 802a588:	7b7a      	ldrb	r2, [r7, #13]
 802a58a:	7bbb      	ldrb	r3, [r7, #14]
 802a58c:	6878      	ldr	r0, [r7, #4]
 802a58e:	f7ff fead 	bl	802a2ec <w25q_detect_capacity>
 802a592:	4603      	mov	r3, r0
 802a594:	73fb      	strb	r3, [r7, #15]
	if (ret != W25Q_OK) {
 802a596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a59a:	2b00      	cmp	r3, #0
 802a59c:	d005      	beq.n	802a5aa <w25q_init+0xe8>
		w25q_unlock(handle);
 802a59e:	6878      	ldr	r0, [r7, #4]
 802a5a0:	f7ff fe90 	bl	802a2c4 <w25q_unlock>
		return ret;
 802a5a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a5a8:	e01d      	b.n	802a5e6 <w25q_init+0x124>
	}

	// Si el dispositivo requiere direccionamiento de 4 bytes, habilitarlo
	if (handle->info.addr_mode == W25Q_ADDR_4BYTE) {
 802a5aa:	687b      	ldr	r3, [r7, #4]
 802a5ac:	7ddb      	ldrb	r3, [r3, #23]
 802a5ae:	2b01      	cmp	r3, #1
 802a5b0:	d10f      	bne.n	802a5d2 <w25q_init+0x110>
		ret = w25q_spi_command(handle, W25Q_CMD_ENABLE_4BYTE_ADDR);
 802a5b2:	21b7      	movs	r1, #183	@ 0xb7
 802a5b4:	6878      	ldr	r0, [r7, #4]
 802a5b6:	f7ff fdf4 	bl	802a1a2 <w25q_spi_command>
 802a5ba:	4603      	mov	r3, r0
 802a5bc:	73fb      	strb	r3, [r7, #15]
		if (ret != W25Q_OK) {
 802a5be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a5c2:	2b00      	cmp	r3, #0
 802a5c4:	d005      	beq.n	802a5d2 <w25q_init+0x110>
			w25q_unlock(handle);
 802a5c6:	6878      	ldr	r0, [r7, #4]
 802a5c8:	f7ff fe7c 	bl	802a2c4 <w25q_unlock>
			return ret;
 802a5cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a5d0:	e009      	b.n	802a5e6 <w25q_init+0x124>
		}
	}

	// Liberar de power down si está
	w25q_release_power_down(handle);
 802a5d2:	6878      	ldr	r0, [r7, #4]
 802a5d4:	f000 fc06 	bl	802ade4 <w25q_release_power_down>

	handle->initialized = true;
 802a5d8:	687b      	ldr	r3, [r7, #4]
 802a5da:	2201      	movs	r2, #1
 802a5dc:	775a      	strb	r2, [r3, #29]
	w25q_unlock(handle);
 802a5de:	6878      	ldr	r0, [r7, #4]
 802a5e0:	f7ff fe70 	bl	802a2c4 <w25q_unlock>

	return W25Q_OK;
 802a5e4:	2300      	movs	r3, #0
}
 802a5e6:	4618      	mov	r0, r3
 802a5e8:	3710      	adds	r7, #16
 802a5ea:	46bd      	mov	sp, r7
 802a5ec:	bd80      	pop	{r7, pc}

0802a5ee <w25q_deinit>:

w25q_err_t w25q_deinit(w25q_handle_t *handle)
{
 802a5ee:	b580      	push	{r7, lr}
 802a5f0:	b082      	sub	sp, #8
 802a5f2:	af00      	add	r7, sp, #0
 802a5f4:	6078      	str	r0, [r7, #4]
	if (!handle || !handle->initialized) {
 802a5f6:	687b      	ldr	r3, [r7, #4]
 802a5f8:	2b00      	cmp	r3, #0
 802a5fa:	d006      	beq.n	802a60a <w25q_deinit+0x1c>
 802a5fc:	687b      	ldr	r3, [r7, #4]
 802a5fe:	7f5b      	ldrb	r3, [r3, #29]
 802a600:	f083 0301 	eor.w	r3, r3, #1
 802a604:	b2db      	uxtb	r3, r3
 802a606:	2b00      	cmp	r3, #0
 802a608:	d002      	beq.n	802a610 <w25q_deinit+0x22>
		return W25Q_ERR_PARAM;
 802a60a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a60e:	e014      	b.n	802a63a <w25q_deinit+0x4c>
	}

	w25q_lock(handle);
 802a610:	6878      	ldr	r0, [r7, #4]
 802a612:	f7ff fe43 	bl	802a29c <w25q_lock>

	// Si estaba en modo 4 bytes, salir de él (opcional, pero buena práctica)
	if (handle->info.addr_mode == W25Q_ADDR_4BYTE) {
 802a616:	687b      	ldr	r3, [r7, #4]
 802a618:	7ddb      	ldrb	r3, [r3, #23]
 802a61a:	2b01      	cmp	r3, #1
 802a61c:	d103      	bne.n	802a626 <w25q_deinit+0x38>
		w25q_spi_command(handle, W25Q_CMD_EXIT_4BYTE_ADDR);
 802a61e:	21e9      	movs	r1, #233	@ 0xe9
 802a620:	6878      	ldr	r0, [r7, #4]
 802a622:	f7ff fdbe 	bl	802a1a2 <w25q_spi_command>
	}

	// Poner en modo bajo consumo
	w25q_power_down(handle);
 802a626:	6878      	ldr	r0, [r7, #4]
 802a628:	f000 fbc9 	bl	802adbe <w25q_power_down>

	handle->initialized = false;
 802a62c:	687b      	ldr	r3, [r7, #4]
 802a62e:	2200      	movs	r2, #0
 802a630:	775a      	strb	r2, [r3, #29]
	w25q_unlock(handle);
 802a632:	6878      	ldr	r0, [r7, #4]
 802a634:	f7ff fe46 	bl	802a2c4 <w25q_unlock>

	return W25Q_OK;
 802a638:	2300      	movs	r3, #0
}
 802a63a:	4618      	mov	r0, r3
 802a63c:	3708      	adds	r7, #8
 802a63e:	46bd      	mov	sp, r7
 802a640:	bd80      	pop	{r7, pc}

0802a642 <w25q_get_info>:

w25q_err_t w25q_get_info(w25q_handle_t *handle, w25q_info_t *info)
{
 802a642:	b580      	push	{r7, lr}
 802a644:	b082      	sub	sp, #8
 802a646:	af00      	add	r7, sp, #0
 802a648:	6078      	str	r0, [r7, #4]
 802a64a:	6039      	str	r1, [r7, #0]
	if (!handle || !info || !handle->initialized) {
 802a64c:	687b      	ldr	r3, [r7, #4]
 802a64e:	2b00      	cmp	r3, #0
 802a650:	d009      	beq.n	802a666 <w25q_get_info+0x24>
 802a652:	683b      	ldr	r3, [r7, #0]
 802a654:	2b00      	cmp	r3, #0
 802a656:	d006      	beq.n	802a666 <w25q_get_info+0x24>
 802a658:	687b      	ldr	r3, [r7, #4]
 802a65a:	7f5b      	ldrb	r3, [r3, #29]
 802a65c:	f083 0301 	eor.w	r3, r3, #1
 802a660:	b2db      	uxtb	r3, r3
 802a662:	2b00      	cmp	r3, #0
 802a664:	d002      	beq.n	802a66c <w25q_get_info+0x2a>
		return W25Q_ERR_PARAM;
 802a666:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a66a:	e007      	b.n	802a67c <w25q_get_info+0x3a>
	}

	memcpy(info, &handle->info, sizeof(w25q_info_t));
 802a66c:	687b      	ldr	r3, [r7, #4]
 802a66e:	3308      	adds	r3, #8
 802a670:	2210      	movs	r2, #16
 802a672:	4619      	mov	r1, r3
 802a674:	6838      	ldr	r0, [r7, #0]
 802a676:	f005 ff5c 	bl	8030532 <memcpy>
	return W25Q_OK;
 802a67a:	2300      	movs	r3, #0
}
 802a67c:	4618      	mov	r0, r3
 802a67e:	3708      	adds	r7, #8
 802a680:	46bd      	mov	sp, r7
 802a682:	bd80      	pop	{r7, pc}

0802a684 <w25q_read_jedec_id>:

w25q_err_t w25q_read_jedec_id(w25q_handle_t *handle, uint8_t id[3])
{
 802a684:	b590      	push	{r4, r7, lr}
 802a686:	b085      	sub	sp, #20
 802a688:	af00      	add	r7, sp, #0
 802a68a:	6078      	str	r0, [r7, #4]
 802a68c:	6039      	str	r1, [r7, #0]
	if (!handle || !id) {
 802a68e:	687b      	ldr	r3, [r7, #4]
 802a690:	2b00      	cmp	r3, #0
 802a692:	d002      	beq.n	802a69a <w25q_read_jedec_id+0x16>
 802a694:	683b      	ldr	r3, [r7, #0]
 802a696:	2b00      	cmp	r3, #0
 802a698:	d102      	bne.n	802a6a0 <w25q_read_jedec_id+0x1c>
		return W25Q_ERR_PARAM;
 802a69a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a69e:	e073      	b.n	802a788 <w25q_read_jedec_id+0x104>
	}

	uint8_t cmd = W25Q_CMD_JEDEC_ID;
 802a6a0:	239f      	movs	r3, #159	@ 0x9f
 802a6a2:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_buf[4] = {0};
 802a6a4:	2300      	movs	r3, #0
 802a6a6:	60bb      	str	r3, [r7, #8]

	if (handle->software_cs && handle->hw->cs_control) {
 802a6a8:	687b      	ldr	r3, [r7, #4]
 802a6aa:	7f1b      	ldrb	r3, [r3, #28]
 802a6ac:	2b00      	cmp	r3, #0
 802a6ae:	d00c      	beq.n	802a6ca <w25q_read_jedec_id+0x46>
 802a6b0:	687b      	ldr	r3, [r7, #4]
 802a6b2:	681b      	ldr	r3, [r3, #0]
 802a6b4:	689b      	ldr	r3, [r3, #8]
 802a6b6:	2b00      	cmp	r3, #0
 802a6b8:	d007      	beq.n	802a6ca <w25q_read_jedec_id+0x46>
		handle->hw->cs_control(handle->user_ctx, true);
 802a6ba:	687b      	ldr	r3, [r7, #4]
 802a6bc:	681b      	ldr	r3, [r3, #0]
 802a6be:	689b      	ldr	r3, [r3, #8]
 802a6c0:	687a      	ldr	r2, [r7, #4]
 802a6c2:	6852      	ldr	r2, [r2, #4]
 802a6c4:	2101      	movs	r1, #1
 802a6c6:	4610      	mov	r0, r2
 802a6c8:	4798      	blx	r3
	}

	// Enviar comando y leer 3 bytes de ID
	if (handle->hw->spi_write_read(handle->user_ctx, &cmd, NULL, 1) != 0) {
 802a6ca:	687b      	ldr	r3, [r7, #4]
 802a6cc:	681b      	ldr	r3, [r3, #0]
 802a6ce:	685c      	ldr	r4, [r3, #4]
 802a6d0:	687b      	ldr	r3, [r7, #4]
 802a6d2:	6858      	ldr	r0, [r3, #4]
 802a6d4:	f107 010f 	add.w	r1, r7, #15
 802a6d8:	2301      	movs	r3, #1
 802a6da:	2200      	movs	r2, #0
 802a6dc:	47a0      	blx	r4
 802a6de:	4603      	mov	r3, r0
 802a6e0:	2b00      	cmp	r3, #0
 802a6e2:	d013      	beq.n	802a70c <w25q_read_jedec_id+0x88>
		if (handle->software_cs && handle->hw->cs_control) {
 802a6e4:	687b      	ldr	r3, [r7, #4]
 802a6e6:	7f1b      	ldrb	r3, [r3, #28]
 802a6e8:	2b00      	cmp	r3, #0
 802a6ea:	d00c      	beq.n	802a706 <w25q_read_jedec_id+0x82>
 802a6ec:	687b      	ldr	r3, [r7, #4]
 802a6ee:	681b      	ldr	r3, [r3, #0]
 802a6f0:	689b      	ldr	r3, [r3, #8]
 802a6f2:	2b00      	cmp	r3, #0
 802a6f4:	d007      	beq.n	802a706 <w25q_read_jedec_id+0x82>
			handle->hw->cs_control(handle->user_ctx, false);
 802a6f6:	687b      	ldr	r3, [r7, #4]
 802a6f8:	681b      	ldr	r3, [r3, #0]
 802a6fa:	689b      	ldr	r3, [r3, #8]
 802a6fc:	687a      	ldr	r2, [r7, #4]
 802a6fe:	6852      	ldr	r2, [r2, #4]
 802a700:	2100      	movs	r1, #0
 802a702:	4610      	mov	r0, r2
 802a704:	4798      	blx	r3
		}
		return W25Q_ERR_SPI;
 802a706:	f06f 0301 	mvn.w	r3, #1
 802a70a:	e03d      	b.n	802a788 <w25q_read_jedec_id+0x104>
	}

	if (handle->hw->spi_write_read(handle->user_ctx, NULL, rx_buf, 3) != 0) {
 802a70c:	687b      	ldr	r3, [r7, #4]
 802a70e:	681b      	ldr	r3, [r3, #0]
 802a710:	685c      	ldr	r4, [r3, #4]
 802a712:	687b      	ldr	r3, [r7, #4]
 802a714:	6858      	ldr	r0, [r3, #4]
 802a716:	f107 0208 	add.w	r2, r7, #8
 802a71a:	2303      	movs	r3, #3
 802a71c:	2100      	movs	r1, #0
 802a71e:	47a0      	blx	r4
 802a720:	4603      	mov	r3, r0
 802a722:	2b00      	cmp	r3, #0
 802a724:	d013      	beq.n	802a74e <w25q_read_jedec_id+0xca>
		if (handle->software_cs && handle->hw->cs_control) {
 802a726:	687b      	ldr	r3, [r7, #4]
 802a728:	7f1b      	ldrb	r3, [r3, #28]
 802a72a:	2b00      	cmp	r3, #0
 802a72c:	d00c      	beq.n	802a748 <w25q_read_jedec_id+0xc4>
 802a72e:	687b      	ldr	r3, [r7, #4]
 802a730:	681b      	ldr	r3, [r3, #0]
 802a732:	689b      	ldr	r3, [r3, #8]
 802a734:	2b00      	cmp	r3, #0
 802a736:	d007      	beq.n	802a748 <w25q_read_jedec_id+0xc4>
			handle->hw->cs_control(handle->user_ctx, false);
 802a738:	687b      	ldr	r3, [r7, #4]
 802a73a:	681b      	ldr	r3, [r3, #0]
 802a73c:	689b      	ldr	r3, [r3, #8]
 802a73e:	687a      	ldr	r2, [r7, #4]
 802a740:	6852      	ldr	r2, [r2, #4]
 802a742:	2100      	movs	r1, #0
 802a744:	4610      	mov	r0, r2
 802a746:	4798      	blx	r3
		}
		return W25Q_ERR_SPI;
 802a748:	f06f 0301 	mvn.w	r3, #1
 802a74c:	e01c      	b.n	802a788 <w25q_read_jedec_id+0x104>
	}

	if (handle->software_cs && handle->hw->cs_control) {
 802a74e:	687b      	ldr	r3, [r7, #4]
 802a750:	7f1b      	ldrb	r3, [r3, #28]
 802a752:	2b00      	cmp	r3, #0
 802a754:	d00c      	beq.n	802a770 <w25q_read_jedec_id+0xec>
 802a756:	687b      	ldr	r3, [r7, #4]
 802a758:	681b      	ldr	r3, [r3, #0]
 802a75a:	689b      	ldr	r3, [r3, #8]
 802a75c:	2b00      	cmp	r3, #0
 802a75e:	d007      	beq.n	802a770 <w25q_read_jedec_id+0xec>
		handle->hw->cs_control(handle->user_ctx, false);
 802a760:	687b      	ldr	r3, [r7, #4]
 802a762:	681b      	ldr	r3, [r3, #0]
 802a764:	689b      	ldr	r3, [r3, #8]
 802a766:	687a      	ldr	r2, [r7, #4]
 802a768:	6852      	ldr	r2, [r2, #4]
 802a76a:	2100      	movs	r1, #0
 802a76c:	4610      	mov	r0, r2
 802a76e:	4798      	blx	r3
	}

	id[0] = rx_buf[0]; // Manufacturer ID
 802a770:	7a3a      	ldrb	r2, [r7, #8]
 802a772:	683b      	ldr	r3, [r7, #0]
 802a774:	701a      	strb	r2, [r3, #0]
	id[1] = rx_buf[1]; // Memory Type
 802a776:	683b      	ldr	r3, [r7, #0]
 802a778:	3301      	adds	r3, #1
 802a77a:	7a7a      	ldrb	r2, [r7, #9]
 802a77c:	701a      	strb	r2, [r3, #0]
	id[2] = rx_buf[2]; // Capacity ID
 802a77e:	683b      	ldr	r3, [r7, #0]
 802a780:	3302      	adds	r3, #2
 802a782:	7aba      	ldrb	r2, [r7, #10]
 802a784:	701a      	strb	r2, [r3, #0]

	return W25Q_OK;
 802a786:	2300      	movs	r3, #0
}
 802a788:	4618      	mov	r0, r3
 802a78a:	3714      	adds	r7, #20
 802a78c:	46bd      	mov	sp, r7
 802a78e:	bd90      	pop	{r4, r7, pc}

0802a790 <w25q_read_status>:
	*bytes = handle->info.capacity_bytes;
	return W25Q_OK;
}

w25q_err_t w25q_read_status(w25q_handle_t *handle, uint8_t *status)
{
 802a790:	b590      	push	{r4, r7, lr}
 802a792:	b085      	sub	sp, #20
 802a794:	af00      	add	r7, sp, #0
 802a796:	6078      	str	r0, [r7, #4]
 802a798:	6039      	str	r1, [r7, #0]
	if (!handle || !status) {
 802a79a:	687b      	ldr	r3, [r7, #4]
 802a79c:	2b00      	cmp	r3, #0
 802a79e:	d002      	beq.n	802a7a6 <w25q_read_status+0x16>
 802a7a0:	683b      	ldr	r3, [r7, #0]
 802a7a2:	2b00      	cmp	r3, #0
 802a7a4:	d102      	bne.n	802a7ac <w25q_read_status+0x1c>
		return W25Q_ERR_PARAM;
 802a7a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a7aa:	e065      	b.n	802a878 <w25q_read_status+0xe8>
	}

	uint8_t cmd = W25Q_CMD_READ_STATUS_REG1;
 802a7ac:	2305      	movs	r3, #5
 802a7ae:	73fb      	strb	r3, [r7, #15]

	if (handle->software_cs && handle->hw->cs_control) {
 802a7b0:	687b      	ldr	r3, [r7, #4]
 802a7b2:	7f1b      	ldrb	r3, [r3, #28]
 802a7b4:	2b00      	cmp	r3, #0
 802a7b6:	d00c      	beq.n	802a7d2 <w25q_read_status+0x42>
 802a7b8:	687b      	ldr	r3, [r7, #4]
 802a7ba:	681b      	ldr	r3, [r3, #0]
 802a7bc:	689b      	ldr	r3, [r3, #8]
 802a7be:	2b00      	cmp	r3, #0
 802a7c0:	d007      	beq.n	802a7d2 <w25q_read_status+0x42>
		handle->hw->cs_control(handle->user_ctx, true);
 802a7c2:	687b      	ldr	r3, [r7, #4]
 802a7c4:	681b      	ldr	r3, [r3, #0]
 802a7c6:	689b      	ldr	r3, [r3, #8]
 802a7c8:	687a      	ldr	r2, [r7, #4]
 802a7ca:	6852      	ldr	r2, [r2, #4]
 802a7cc:	2101      	movs	r1, #1
 802a7ce:	4610      	mov	r0, r2
 802a7d0:	4798      	blx	r3
	}

	// Enviar comando y leer status
	if (handle->hw->spi_write_read(handle->user_ctx, &cmd, NULL, 1) != 0) {
 802a7d2:	687b      	ldr	r3, [r7, #4]
 802a7d4:	681b      	ldr	r3, [r3, #0]
 802a7d6:	685c      	ldr	r4, [r3, #4]
 802a7d8:	687b      	ldr	r3, [r7, #4]
 802a7da:	6858      	ldr	r0, [r3, #4]
 802a7dc:	f107 010f 	add.w	r1, r7, #15
 802a7e0:	2301      	movs	r3, #1
 802a7e2:	2200      	movs	r2, #0
 802a7e4:	47a0      	blx	r4
 802a7e6:	4603      	mov	r3, r0
 802a7e8:	2b00      	cmp	r3, #0
 802a7ea:	d013      	beq.n	802a814 <w25q_read_status+0x84>
		if (handle->software_cs && handle->hw->cs_control) {
 802a7ec:	687b      	ldr	r3, [r7, #4]
 802a7ee:	7f1b      	ldrb	r3, [r3, #28]
 802a7f0:	2b00      	cmp	r3, #0
 802a7f2:	d00c      	beq.n	802a80e <w25q_read_status+0x7e>
 802a7f4:	687b      	ldr	r3, [r7, #4]
 802a7f6:	681b      	ldr	r3, [r3, #0]
 802a7f8:	689b      	ldr	r3, [r3, #8]
 802a7fa:	2b00      	cmp	r3, #0
 802a7fc:	d007      	beq.n	802a80e <w25q_read_status+0x7e>
			handle->hw->cs_control(handle->user_ctx, false);
 802a7fe:	687b      	ldr	r3, [r7, #4]
 802a800:	681b      	ldr	r3, [r3, #0]
 802a802:	689b      	ldr	r3, [r3, #8]
 802a804:	687a      	ldr	r2, [r7, #4]
 802a806:	6852      	ldr	r2, [r2, #4]
 802a808:	2100      	movs	r1, #0
 802a80a:	4610      	mov	r0, r2
 802a80c:	4798      	blx	r3
		}
		return W25Q_ERR_SPI;
 802a80e:	f06f 0301 	mvn.w	r3, #1
 802a812:	e031      	b.n	802a878 <w25q_read_status+0xe8>
	}

	if (handle->hw->spi_write_read(handle->user_ctx, NULL, status, 1) != 0) {
 802a814:	687b      	ldr	r3, [r7, #4]
 802a816:	681b      	ldr	r3, [r3, #0]
 802a818:	685c      	ldr	r4, [r3, #4]
 802a81a:	687b      	ldr	r3, [r7, #4]
 802a81c:	6858      	ldr	r0, [r3, #4]
 802a81e:	2301      	movs	r3, #1
 802a820:	683a      	ldr	r2, [r7, #0]
 802a822:	2100      	movs	r1, #0
 802a824:	47a0      	blx	r4
 802a826:	4603      	mov	r3, r0
 802a828:	2b00      	cmp	r3, #0
 802a82a:	d013      	beq.n	802a854 <w25q_read_status+0xc4>
		if (handle->software_cs && handle->hw->cs_control) {
 802a82c:	687b      	ldr	r3, [r7, #4]
 802a82e:	7f1b      	ldrb	r3, [r3, #28]
 802a830:	2b00      	cmp	r3, #0
 802a832:	d00c      	beq.n	802a84e <w25q_read_status+0xbe>
 802a834:	687b      	ldr	r3, [r7, #4]
 802a836:	681b      	ldr	r3, [r3, #0]
 802a838:	689b      	ldr	r3, [r3, #8]
 802a83a:	2b00      	cmp	r3, #0
 802a83c:	d007      	beq.n	802a84e <w25q_read_status+0xbe>
			handle->hw->cs_control(handle->user_ctx, false);
 802a83e:	687b      	ldr	r3, [r7, #4]
 802a840:	681b      	ldr	r3, [r3, #0]
 802a842:	689b      	ldr	r3, [r3, #8]
 802a844:	687a      	ldr	r2, [r7, #4]
 802a846:	6852      	ldr	r2, [r2, #4]
 802a848:	2100      	movs	r1, #0
 802a84a:	4610      	mov	r0, r2
 802a84c:	4798      	blx	r3
		}
		return W25Q_ERR_SPI;
 802a84e:	f06f 0301 	mvn.w	r3, #1
 802a852:	e011      	b.n	802a878 <w25q_read_status+0xe8>
	}

	if (handle->software_cs && handle->hw->cs_control) {
 802a854:	687b      	ldr	r3, [r7, #4]
 802a856:	7f1b      	ldrb	r3, [r3, #28]
 802a858:	2b00      	cmp	r3, #0
 802a85a:	d00c      	beq.n	802a876 <w25q_read_status+0xe6>
 802a85c:	687b      	ldr	r3, [r7, #4]
 802a85e:	681b      	ldr	r3, [r3, #0]
 802a860:	689b      	ldr	r3, [r3, #8]
 802a862:	2b00      	cmp	r3, #0
 802a864:	d007      	beq.n	802a876 <w25q_read_status+0xe6>
		handle->hw->cs_control(handle->user_ctx, false);
 802a866:	687b      	ldr	r3, [r7, #4]
 802a868:	681b      	ldr	r3, [r3, #0]
 802a86a:	689b      	ldr	r3, [r3, #8]
 802a86c:	687a      	ldr	r2, [r7, #4]
 802a86e:	6852      	ldr	r2, [r2, #4]
 802a870:	2100      	movs	r1, #0
 802a872:	4610      	mov	r0, r2
 802a874:	4798      	blx	r3
	}

	return W25Q_OK;
 802a876:	2300      	movs	r3, #0
}
 802a878:	4618      	mov	r0, r3
 802a87a:	3714      	adds	r7, #20
 802a87c:	46bd      	mov	sp, r7
 802a87e:	bd90      	pop	{r4, r7, pc}

0802a880 <w25q_write_enable>:

	return ret;
}

w25q_err_t w25q_write_enable(w25q_handle_t *handle)
{
 802a880:	b580      	push	{r7, lr}
 802a882:	b082      	sub	sp, #8
 802a884:	af00      	add	r7, sp, #0
 802a886:	6078      	str	r0, [r7, #4]
	if (!handle) {
 802a888:	687b      	ldr	r3, [r7, #4]
 802a88a:	2b00      	cmp	r3, #0
 802a88c:	d102      	bne.n	802a894 <w25q_write_enable+0x14>
		return W25Q_ERR_PARAM;
 802a88e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a892:	e004      	b.n	802a89e <w25q_write_enable+0x1e>
	}

	return w25q_spi_command(handle, W25Q_CMD_WRITE_ENABLE);
 802a894:	2106      	movs	r1, #6
 802a896:	6878      	ldr	r0, [r7, #4]
 802a898:	f7ff fc83 	bl	802a1a2 <w25q_spi_command>
 802a89c:	4603      	mov	r3, r0
}
 802a89e:	4618      	mov	r0, r3
 802a8a0:	3708      	adds	r7, #8
 802a8a2:	46bd      	mov	sp, r7
 802a8a4:	bd80      	pop	{r7, pc}

0802a8a6 <w25q_wait_busy>:

	return w25q_spi_command(handle, W25Q_CMD_WRITE_DISABLE);
}

w25q_err_t w25q_wait_busy(w25q_handle_t *handle, uint32_t timeout_ms)
{
 802a8a6:	b580      	push	{r7, lr}
 802a8a8:	b084      	sub	sp, #16
 802a8aa:	af00      	add	r7, sp, #0
 802a8ac:	6078      	str	r0, [r7, #4]
 802a8ae:	6039      	str	r1, [r7, #0]
	if (!handle) {
 802a8b0:	687b      	ldr	r3, [r7, #4]
 802a8b2:	2b00      	cmp	r3, #0
 802a8b4:	d102      	bne.n	802a8bc <w25q_wait_busy+0x16>
		return W25Q_ERR_PARAM;
 802a8b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a8ba:	e026      	b.n	802a90a <w25q_wait_busy+0x64>
	}


	uint32_t elapsed = 0;
 802a8bc:	2300      	movs	r3, #0
 802a8be:	60fb      	str	r3, [r7, #12]

	while (elapsed < timeout_ms) {
 802a8c0:	e01d      	b.n	802a8fe <w25q_wait_busy+0x58>
		uint8_t status;
		w25q_err_t ret = w25q_read_status(handle, &status);
 802a8c2:	f107 030a 	add.w	r3, r7, #10
 802a8c6:	4619      	mov	r1, r3
 802a8c8:	6878      	ldr	r0, [r7, #4]
 802a8ca:	f7ff ff61 	bl	802a790 <w25q_read_status>
 802a8ce:	4603      	mov	r3, r0
 802a8d0:	72fb      	strb	r3, [r7, #11]
		if (ret != W25Q_OK) {
 802a8d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 802a8d6:	2b00      	cmp	r3, #0
 802a8d8:	d002      	beq.n	802a8e0 <w25q_wait_busy+0x3a>
			return ret;
 802a8da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 802a8de:	e014      	b.n	802a90a <w25q_wait_busy+0x64>
		}

		if (!(status & W25Q_STATUS_BUSY)) {
 802a8e0:	7abb      	ldrb	r3, [r7, #10]
 802a8e2:	f003 0301 	and.w	r3, r3, #1
 802a8e6:	2b00      	cmp	r3, #0
 802a8e8:	d101      	bne.n	802a8ee <w25q_wait_busy+0x48>
			return W25Q_OK;
 802a8ea:	2300      	movs	r3, #0
 802a8ec:	e00d      	b.n	802a90a <w25q_wait_busy+0x64>
		}

		handle->hw->delay_ms(1);
 802a8ee:	687b      	ldr	r3, [r7, #4]
 802a8f0:	681b      	ldr	r3, [r3, #0]
 802a8f2:	68db      	ldr	r3, [r3, #12]
 802a8f4:	2001      	movs	r0, #1
 802a8f6:	4798      	blx	r3
		elapsed++;
 802a8f8:	68fb      	ldr	r3, [r7, #12]
 802a8fa:	3301      	adds	r3, #1
 802a8fc:	60fb      	str	r3, [r7, #12]
	while (elapsed < timeout_ms) {
 802a8fe:	68fa      	ldr	r2, [r7, #12]
 802a900:	683b      	ldr	r3, [r7, #0]
 802a902:	429a      	cmp	r2, r3
 802a904:	d3dd      	bcc.n	802a8c2 <w25q_wait_busy+0x1c>
	}

	return W25Q_ERR_TIMEOUT;
 802a906:	f06f 0302 	mvn.w	r3, #2
}
 802a90a:	4618      	mov	r0, r3
 802a90c:	3710      	adds	r7, #16
 802a90e:	46bd      	mov	sp, r7
 802a910:	bd80      	pop	{r7, pc}

0802a912 <w25q_read>:

w25q_err_t w25q_read(w25q_handle_t *handle, uint32_t addr, uint8_t *data, size_t len)
{
 802a912:	b590      	push	{r4, r7, lr}
 802a914:	b089      	sub	sp, #36	@ 0x24
 802a916:	af00      	add	r7, sp, #0
 802a918:	60f8      	str	r0, [r7, #12]
 802a91a:	60b9      	str	r1, [r7, #8]
 802a91c:	607a      	str	r2, [r7, #4]
 802a91e:	603b      	str	r3, [r7, #0]
	if (!handle || !data) {
 802a920:	68fb      	ldr	r3, [r7, #12]
 802a922:	2b00      	cmp	r3, #0
 802a924:	d002      	beq.n	802a92c <w25q_read+0x1a>
 802a926:	687b      	ldr	r3, [r7, #4]
 802a928:	2b00      	cmp	r3, #0
 802a92a:	d102      	bne.n	802a932 <w25q_read+0x20>
		return W25Q_ERR_PARAM;
 802a92c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a930:	e098      	b.n	802aa64 <w25q_read+0x152>
	}

	w25q_err_t ret = w25q_check_address(handle, addr, len);
 802a932:	683a      	ldr	r2, [r7, #0]
 802a934:	68b9      	ldr	r1, [r7, #8]
 802a936:	68f8      	ldr	r0, [r7, #12]
 802a938:	f7ff fd94 	bl	802a464 <w25q_check_address>
 802a93c:	4603      	mov	r3, r0
 802a93e:	77fb      	strb	r3, [r7, #31]
	if (ret != W25Q_OK) {
 802a940:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802a944:	2b00      	cmp	r3, #0
 802a946:	d002      	beq.n	802a94e <w25q_read+0x3c>
		return ret;
 802a948:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802a94c:	e08a      	b.n	802aa64 <w25q_read+0x152>
	}

	w25q_lock(handle);
 802a94e:	68f8      	ldr	r0, [r7, #12]
 802a950:	f7ff fca4 	bl	802a29c <w25q_lock>

	// Esperar si hay operación en curso
	ret = w25q_wait_busy(handle, handle->timeout_ms);
 802a954:	68fb      	ldr	r3, [r7, #12]
 802a956:	699b      	ldr	r3, [r3, #24]
 802a958:	4619      	mov	r1, r3
 802a95a:	68f8      	ldr	r0, [r7, #12]
 802a95c:	f7ff ffa3 	bl	802a8a6 <w25q_wait_busy>
 802a960:	4603      	mov	r3, r0
 802a962:	77fb      	strb	r3, [r7, #31]
	if (ret != W25Q_OK) {
 802a964:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802a968:	2b00      	cmp	r3, #0
 802a96a:	d005      	beq.n	802a978 <w25q_read+0x66>
		w25q_unlock(handle);
 802a96c:	68f8      	ldr	r0, [r7, #12]
 802a96e:	f7ff fca9 	bl	802a2c4 <w25q_unlock>
		return ret;
 802a972:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802a976:	e075      	b.n	802aa64 <w25q_read+0x152>
	}

	// Comando de lectura + dirección
	uint8_t cmd[5];
	size_t cmd_len = w25q_build_address_command(cmd, W25Q_CMD_READ_DATA, addr, handle->info.addr_mode);
 802a978:	68fb      	ldr	r3, [r7, #12]
 802a97a:	7ddb      	ldrb	r3, [r3, #23]
 802a97c:	f107 0010 	add.w	r0, r7, #16
 802a980:	68ba      	ldr	r2, [r7, #8]
 802a982:	2103      	movs	r1, #3
 802a984:	f7ff fbcc 	bl	802a120 <w25q_build_address_command>
 802a988:	61b8      	str	r0, [r7, #24]

	if (handle->software_cs && handle->hw->cs_control) {
 802a98a:	68fb      	ldr	r3, [r7, #12]
 802a98c:	7f1b      	ldrb	r3, [r3, #28]
 802a98e:	2b00      	cmp	r3, #0
 802a990:	d00c      	beq.n	802a9ac <w25q_read+0x9a>
 802a992:	68fb      	ldr	r3, [r7, #12]
 802a994:	681b      	ldr	r3, [r3, #0]
 802a996:	689b      	ldr	r3, [r3, #8]
 802a998:	2b00      	cmp	r3, #0
 802a99a:	d007      	beq.n	802a9ac <w25q_read+0x9a>
		handle->hw->cs_control(handle->user_ctx, true);
 802a99c:	68fb      	ldr	r3, [r7, #12]
 802a99e:	681b      	ldr	r3, [r3, #0]
 802a9a0:	689b      	ldr	r3, [r3, #8]
 802a9a2:	68fa      	ldr	r2, [r7, #12]
 802a9a4:	6852      	ldr	r2, [r2, #4]
 802a9a6:	2101      	movs	r1, #1
 802a9a8:	4610      	mov	r0, r2
 802a9aa:	4798      	blx	r3
	}

	// Enviar comando y dirección
	if (handle->hw->spi_write_read(handle->user_ctx, cmd, NULL, cmd_len) != 0) {
 802a9ac:	68fb      	ldr	r3, [r7, #12]
 802a9ae:	681b      	ldr	r3, [r3, #0]
 802a9b0:	685c      	ldr	r4, [r3, #4]
 802a9b2:	68fb      	ldr	r3, [r7, #12]
 802a9b4:	6858      	ldr	r0, [r3, #4]
 802a9b6:	f107 0110 	add.w	r1, r7, #16
 802a9ba:	69bb      	ldr	r3, [r7, #24]
 802a9bc:	2200      	movs	r2, #0
 802a9be:	47a0      	blx	r4
 802a9c0:	4603      	mov	r3, r0
 802a9c2:	2b00      	cmp	r3, #0
 802a9c4:	d016      	beq.n	802a9f4 <w25q_read+0xe2>
		if (handle->software_cs && handle->hw->cs_control) {
 802a9c6:	68fb      	ldr	r3, [r7, #12]
 802a9c8:	7f1b      	ldrb	r3, [r3, #28]
 802a9ca:	2b00      	cmp	r3, #0
 802a9cc:	d00c      	beq.n	802a9e8 <w25q_read+0xd6>
 802a9ce:	68fb      	ldr	r3, [r7, #12]
 802a9d0:	681b      	ldr	r3, [r3, #0]
 802a9d2:	689b      	ldr	r3, [r3, #8]
 802a9d4:	2b00      	cmp	r3, #0
 802a9d6:	d007      	beq.n	802a9e8 <w25q_read+0xd6>
			handle->hw->cs_control(handle->user_ctx, false);
 802a9d8:	68fb      	ldr	r3, [r7, #12]
 802a9da:	681b      	ldr	r3, [r3, #0]
 802a9dc:	689b      	ldr	r3, [r3, #8]
 802a9de:	68fa      	ldr	r2, [r7, #12]
 802a9e0:	6852      	ldr	r2, [r2, #4]
 802a9e2:	2100      	movs	r1, #0
 802a9e4:	4610      	mov	r0, r2
 802a9e6:	4798      	blx	r3
		}
		w25q_unlock(handle);
 802a9e8:	68f8      	ldr	r0, [r7, #12]
 802a9ea:	f7ff fc6b 	bl	802a2c4 <w25q_unlock>
		return W25Q_ERR_SPI;
 802a9ee:	f06f 0301 	mvn.w	r3, #1
 802a9f2:	e037      	b.n	802aa64 <w25q_read+0x152>
	}

	// Leer datos
	if (handle->hw->spi_write_read(handle->user_ctx, NULL, data, len) != 0) {
 802a9f4:	68fb      	ldr	r3, [r7, #12]
 802a9f6:	681b      	ldr	r3, [r3, #0]
 802a9f8:	685c      	ldr	r4, [r3, #4]
 802a9fa:	68fb      	ldr	r3, [r7, #12]
 802a9fc:	6858      	ldr	r0, [r3, #4]
 802a9fe:	683b      	ldr	r3, [r7, #0]
 802aa00:	687a      	ldr	r2, [r7, #4]
 802aa02:	2100      	movs	r1, #0
 802aa04:	47a0      	blx	r4
 802aa06:	4603      	mov	r3, r0
 802aa08:	2b00      	cmp	r3, #0
 802aa0a:	d016      	beq.n	802aa3a <w25q_read+0x128>
		if (handle->software_cs && handle->hw->cs_control) {
 802aa0c:	68fb      	ldr	r3, [r7, #12]
 802aa0e:	7f1b      	ldrb	r3, [r3, #28]
 802aa10:	2b00      	cmp	r3, #0
 802aa12:	d00c      	beq.n	802aa2e <w25q_read+0x11c>
 802aa14:	68fb      	ldr	r3, [r7, #12]
 802aa16:	681b      	ldr	r3, [r3, #0]
 802aa18:	689b      	ldr	r3, [r3, #8]
 802aa1a:	2b00      	cmp	r3, #0
 802aa1c:	d007      	beq.n	802aa2e <w25q_read+0x11c>
			handle->hw->cs_control(handle->user_ctx, false);
 802aa1e:	68fb      	ldr	r3, [r7, #12]
 802aa20:	681b      	ldr	r3, [r3, #0]
 802aa22:	689b      	ldr	r3, [r3, #8]
 802aa24:	68fa      	ldr	r2, [r7, #12]
 802aa26:	6852      	ldr	r2, [r2, #4]
 802aa28:	2100      	movs	r1, #0
 802aa2a:	4610      	mov	r0, r2
 802aa2c:	4798      	blx	r3
		}
		w25q_unlock(handle);
 802aa2e:	68f8      	ldr	r0, [r7, #12]
 802aa30:	f7ff fc48 	bl	802a2c4 <w25q_unlock>
		return W25Q_ERR_SPI;
 802aa34:	f06f 0301 	mvn.w	r3, #1
 802aa38:	e014      	b.n	802aa64 <w25q_read+0x152>
	}

	if (handle->software_cs && handle->hw->cs_control) {
 802aa3a:	68fb      	ldr	r3, [r7, #12]
 802aa3c:	7f1b      	ldrb	r3, [r3, #28]
 802aa3e:	2b00      	cmp	r3, #0
 802aa40:	d00c      	beq.n	802aa5c <w25q_read+0x14a>
 802aa42:	68fb      	ldr	r3, [r7, #12]
 802aa44:	681b      	ldr	r3, [r3, #0]
 802aa46:	689b      	ldr	r3, [r3, #8]
 802aa48:	2b00      	cmp	r3, #0
 802aa4a:	d007      	beq.n	802aa5c <w25q_read+0x14a>
		handle->hw->cs_control(handle->user_ctx, false);
 802aa4c:	68fb      	ldr	r3, [r7, #12]
 802aa4e:	681b      	ldr	r3, [r3, #0]
 802aa50:	689b      	ldr	r3, [r3, #8]
 802aa52:	68fa      	ldr	r2, [r7, #12]
 802aa54:	6852      	ldr	r2, [r2, #4]
 802aa56:	2100      	movs	r1, #0
 802aa58:	4610      	mov	r0, r2
 802aa5a:	4798      	blx	r3
	}

	w25q_unlock(handle);
 802aa5c:	68f8      	ldr	r0, [r7, #12]
 802aa5e:	f7ff fc31 	bl	802a2c4 <w25q_unlock>
	return W25Q_OK;
 802aa62:	2300      	movs	r3, #0
}
 802aa64:	4618      	mov	r0, r3
 802aa66:	3724      	adds	r7, #36	@ 0x24
 802aa68:	46bd      	mov	sp, r7
 802aa6a:	bd90      	pop	{r4, r7, pc}

0802aa6c <w25q_page_program>:

w25q_err_t w25q_page_program(w25q_handle_t *handle, uint32_t addr, const uint8_t *data, size_t len)
{
 802aa6c:	b590      	push	{r4, r7, lr}
 802aa6e:	b08b      	sub	sp, #44	@ 0x2c
 802aa70:	af00      	add	r7, sp, #0
 802aa72:	60f8      	str	r0, [r7, #12]
 802aa74:	60b9      	str	r1, [r7, #8]
 802aa76:	607a      	str	r2, [r7, #4]
 802aa78:	603b      	str	r3, [r7, #0]
	if (!handle || !data) {
 802aa7a:	68fb      	ldr	r3, [r7, #12]
 802aa7c:	2b00      	cmp	r3, #0
 802aa7e:	d002      	beq.n	802aa86 <w25q_page_program+0x1a>
 802aa80:	687b      	ldr	r3, [r7, #4]
 802aa82:	2b00      	cmp	r3, #0
 802aa84:	d102      	bne.n	802aa8c <w25q_page_program+0x20>
		return W25Q_ERR_PARAM;
 802aa86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802aa8a:	e0c8      	b.n	802ac1e <w25q_page_program+0x1b2>
	}

	if (len > W25Q_PAGE_SIZE) {
 802aa8c:	683b      	ldr	r3, [r7, #0]
 802aa8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802aa92:	d902      	bls.n	802aa9a <w25q_page_program+0x2e>
		return W25Q_ERR_SIZE;
 802aa94:	f06f 0307 	mvn.w	r3, #7
 802aa98:	e0c1      	b.n	802ac1e <w25q_page_program+0x1b2>
	}

	// Verificar que no cruce límite de página
	uint32_t page_start = addr & ~(W25Q_PAGE_SIZE - 1);
 802aa9a:	68bb      	ldr	r3, [r7, #8]
 802aa9c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802aaa0:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t page_end = page_start + W25Q_PAGE_SIZE - 1;
 802aaa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802aaa4:	33ff      	adds	r3, #255	@ 0xff
 802aaa6:	623b      	str	r3, [r7, #32]
	if ((addr + len - 1) > page_end) {
 802aaa8:	68ba      	ldr	r2, [r7, #8]
 802aaaa:	683b      	ldr	r3, [r7, #0]
 802aaac:	4413      	add	r3, r2
 802aaae:	3b01      	subs	r3, #1
 802aab0:	6a3a      	ldr	r2, [r7, #32]
 802aab2:	429a      	cmp	r2, r3
 802aab4:	d202      	bcs.n	802aabc <w25q_page_program+0x50>
		return W25Q_ERR_SIZE;
 802aab6:	f06f 0307 	mvn.w	r3, #7
 802aaba:	e0b0      	b.n	802ac1e <w25q_page_program+0x1b2>
	}

	w25q_err_t ret = w25q_check_address(handle, addr, len);
 802aabc:	683a      	ldr	r2, [r7, #0]
 802aabe:	68b9      	ldr	r1, [r7, #8]
 802aac0:	68f8      	ldr	r0, [r7, #12]
 802aac2:	f7ff fccf 	bl	802a464 <w25q_check_address>
 802aac6:	4603      	mov	r3, r0
 802aac8:	77fb      	strb	r3, [r7, #31]
	if (ret != W25Q_OK) {
 802aaca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802aace:	2b00      	cmp	r3, #0
 802aad0:	d002      	beq.n	802aad8 <w25q_page_program+0x6c>
		return ret;
 802aad2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802aad6:	e0a2      	b.n	802ac1e <w25q_page_program+0x1b2>
	}

	w25q_lock(handle);
 802aad8:	68f8      	ldr	r0, [r7, #12]
 802aada:	f7ff fbdf 	bl	802a29c <w25q_lock>

	// Esperar dispositivo listo
	ret = w25q_wait_busy(handle, handle->timeout_ms);
 802aade:	68fb      	ldr	r3, [r7, #12]
 802aae0:	699b      	ldr	r3, [r3, #24]
 802aae2:	4619      	mov	r1, r3
 802aae4:	68f8      	ldr	r0, [r7, #12]
 802aae6:	f7ff fede 	bl	802a8a6 <w25q_wait_busy>
 802aaea:	4603      	mov	r3, r0
 802aaec:	77fb      	strb	r3, [r7, #31]
	if (ret != W25Q_OK) {
 802aaee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802aaf2:	2b00      	cmp	r3, #0
 802aaf4:	d005      	beq.n	802ab02 <w25q_page_program+0x96>
		w25q_unlock(handle);
 802aaf6:	68f8      	ldr	r0, [r7, #12]
 802aaf8:	f7ff fbe4 	bl	802a2c4 <w25q_unlock>
		return ret;
 802aafc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802ab00:	e08d      	b.n	802ac1e <w25q_page_program+0x1b2>
	}

	// Habilitar escritura
	ret = w25q_write_enable(handle);
 802ab02:	68f8      	ldr	r0, [r7, #12]
 802ab04:	f7ff febc 	bl	802a880 <w25q_write_enable>
 802ab08:	4603      	mov	r3, r0
 802ab0a:	77fb      	strb	r3, [r7, #31]
	if (ret != W25Q_OK) {
 802ab0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802ab10:	2b00      	cmp	r3, #0
 802ab12:	d005      	beq.n	802ab20 <w25q_page_program+0xb4>
		w25q_unlock(handle);
 802ab14:	68f8      	ldr	r0, [r7, #12]
 802ab16:	f7ff fbd5 	bl	802a2c4 <w25q_unlock>
		return ret;
 802ab1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802ab1e:	e07e      	b.n	802ac1e <w25q_page_program+0x1b2>
	}

	// Comando page program + dirección
	uint8_t cmd[5];
	size_t cmd_len = w25q_build_address_command(cmd, W25Q_CMD_PAGE_PROGRAM, addr, handle->info.addr_mode);
 802ab20:	68fb      	ldr	r3, [r7, #12]
 802ab22:	7ddb      	ldrb	r3, [r3, #23]
 802ab24:	f107 0010 	add.w	r0, r7, #16
 802ab28:	68ba      	ldr	r2, [r7, #8]
 802ab2a:	2102      	movs	r1, #2
 802ab2c:	f7ff faf8 	bl	802a120 <w25q_build_address_command>
 802ab30:	61b8      	str	r0, [r7, #24]

	if (handle->software_cs && handle->hw->cs_control) {
 802ab32:	68fb      	ldr	r3, [r7, #12]
 802ab34:	7f1b      	ldrb	r3, [r3, #28]
 802ab36:	2b00      	cmp	r3, #0
 802ab38:	d00c      	beq.n	802ab54 <w25q_page_program+0xe8>
 802ab3a:	68fb      	ldr	r3, [r7, #12]
 802ab3c:	681b      	ldr	r3, [r3, #0]
 802ab3e:	689b      	ldr	r3, [r3, #8]
 802ab40:	2b00      	cmp	r3, #0
 802ab42:	d007      	beq.n	802ab54 <w25q_page_program+0xe8>
		handle->hw->cs_control(handle->user_ctx, true);
 802ab44:	68fb      	ldr	r3, [r7, #12]
 802ab46:	681b      	ldr	r3, [r3, #0]
 802ab48:	689b      	ldr	r3, [r3, #8]
 802ab4a:	68fa      	ldr	r2, [r7, #12]
 802ab4c:	6852      	ldr	r2, [r2, #4]
 802ab4e:	2101      	movs	r1, #1
 802ab50:	4610      	mov	r0, r2
 802ab52:	4798      	blx	r3
	}

	// Enviar comando, dirección y datos
	if (handle->hw->spi_write_read(handle->user_ctx, cmd, NULL, cmd_len) != 0) {
 802ab54:	68fb      	ldr	r3, [r7, #12]
 802ab56:	681b      	ldr	r3, [r3, #0]
 802ab58:	685c      	ldr	r4, [r3, #4]
 802ab5a:	68fb      	ldr	r3, [r7, #12]
 802ab5c:	6858      	ldr	r0, [r3, #4]
 802ab5e:	f107 0110 	add.w	r1, r7, #16
 802ab62:	69bb      	ldr	r3, [r7, #24]
 802ab64:	2200      	movs	r2, #0
 802ab66:	47a0      	blx	r4
 802ab68:	4603      	mov	r3, r0
 802ab6a:	2b00      	cmp	r3, #0
 802ab6c:	d016      	beq.n	802ab9c <w25q_page_program+0x130>
		if (handle->software_cs && handle->hw->cs_control) {
 802ab6e:	68fb      	ldr	r3, [r7, #12]
 802ab70:	7f1b      	ldrb	r3, [r3, #28]
 802ab72:	2b00      	cmp	r3, #0
 802ab74:	d00c      	beq.n	802ab90 <w25q_page_program+0x124>
 802ab76:	68fb      	ldr	r3, [r7, #12]
 802ab78:	681b      	ldr	r3, [r3, #0]
 802ab7a:	689b      	ldr	r3, [r3, #8]
 802ab7c:	2b00      	cmp	r3, #0
 802ab7e:	d007      	beq.n	802ab90 <w25q_page_program+0x124>
			handle->hw->cs_control(handle->user_ctx, false);
 802ab80:	68fb      	ldr	r3, [r7, #12]
 802ab82:	681b      	ldr	r3, [r3, #0]
 802ab84:	689b      	ldr	r3, [r3, #8]
 802ab86:	68fa      	ldr	r2, [r7, #12]
 802ab88:	6852      	ldr	r2, [r2, #4]
 802ab8a:	2100      	movs	r1, #0
 802ab8c:	4610      	mov	r0, r2
 802ab8e:	4798      	blx	r3
		}
		w25q_unlock(handle);
 802ab90:	68f8      	ldr	r0, [r7, #12]
 802ab92:	f7ff fb97 	bl	802a2c4 <w25q_unlock>
		return W25Q_ERR_SPI;
 802ab96:	f06f 0301 	mvn.w	r3, #1
 802ab9a:	e040      	b.n	802ac1e <w25q_page_program+0x1b2>
	}

	if (handle->hw->spi_write_read(handle->user_ctx, data, NULL, len) != 0) {
 802ab9c:	68fb      	ldr	r3, [r7, #12]
 802ab9e:	681b      	ldr	r3, [r3, #0]
 802aba0:	685c      	ldr	r4, [r3, #4]
 802aba2:	68fb      	ldr	r3, [r7, #12]
 802aba4:	6858      	ldr	r0, [r3, #4]
 802aba6:	683b      	ldr	r3, [r7, #0]
 802aba8:	2200      	movs	r2, #0
 802abaa:	6879      	ldr	r1, [r7, #4]
 802abac:	47a0      	blx	r4
 802abae:	4603      	mov	r3, r0
 802abb0:	2b00      	cmp	r3, #0
 802abb2:	d016      	beq.n	802abe2 <w25q_page_program+0x176>
		if (handle->software_cs && handle->hw->cs_control) {
 802abb4:	68fb      	ldr	r3, [r7, #12]
 802abb6:	7f1b      	ldrb	r3, [r3, #28]
 802abb8:	2b00      	cmp	r3, #0
 802abba:	d00c      	beq.n	802abd6 <w25q_page_program+0x16a>
 802abbc:	68fb      	ldr	r3, [r7, #12]
 802abbe:	681b      	ldr	r3, [r3, #0]
 802abc0:	689b      	ldr	r3, [r3, #8]
 802abc2:	2b00      	cmp	r3, #0
 802abc4:	d007      	beq.n	802abd6 <w25q_page_program+0x16a>
			handle->hw->cs_control(handle->user_ctx, false);
 802abc6:	68fb      	ldr	r3, [r7, #12]
 802abc8:	681b      	ldr	r3, [r3, #0]
 802abca:	689b      	ldr	r3, [r3, #8]
 802abcc:	68fa      	ldr	r2, [r7, #12]
 802abce:	6852      	ldr	r2, [r2, #4]
 802abd0:	2100      	movs	r1, #0
 802abd2:	4610      	mov	r0, r2
 802abd4:	4798      	blx	r3
		}
		w25q_unlock(handle);
 802abd6:	68f8      	ldr	r0, [r7, #12]
 802abd8:	f7ff fb74 	bl	802a2c4 <w25q_unlock>
		return W25Q_ERR_SPI;
 802abdc:	f06f 0301 	mvn.w	r3, #1
 802abe0:	e01d      	b.n	802ac1e <w25q_page_program+0x1b2>
	}

	if (handle->software_cs && handle->hw->cs_control) {
 802abe2:	68fb      	ldr	r3, [r7, #12]
 802abe4:	7f1b      	ldrb	r3, [r3, #28]
 802abe6:	2b00      	cmp	r3, #0
 802abe8:	d00c      	beq.n	802ac04 <w25q_page_program+0x198>
 802abea:	68fb      	ldr	r3, [r7, #12]
 802abec:	681b      	ldr	r3, [r3, #0]
 802abee:	689b      	ldr	r3, [r3, #8]
 802abf0:	2b00      	cmp	r3, #0
 802abf2:	d007      	beq.n	802ac04 <w25q_page_program+0x198>
		handle->hw->cs_control(handle->user_ctx, false);
 802abf4:	68fb      	ldr	r3, [r7, #12]
 802abf6:	681b      	ldr	r3, [r3, #0]
 802abf8:	689b      	ldr	r3, [r3, #8]
 802abfa:	68fa      	ldr	r2, [r7, #12]
 802abfc:	6852      	ldr	r2, [r2, #4]
 802abfe:	2100      	movs	r1, #0
 802ac00:	4610      	mov	r0, r2
 802ac02:	4798      	blx	r3
	}

	// Esperar a que termine la programación
	ret = w25q_wait_busy(handle, handle->timeout_ms);
 802ac04:	68fb      	ldr	r3, [r7, #12]
 802ac06:	699b      	ldr	r3, [r3, #24]
 802ac08:	4619      	mov	r1, r3
 802ac0a:	68f8      	ldr	r0, [r7, #12]
 802ac0c:	f7ff fe4b 	bl	802a8a6 <w25q_wait_busy>
 802ac10:	4603      	mov	r3, r0
 802ac12:	77fb      	strb	r3, [r7, #31]

	w25q_unlock(handle);
 802ac14:	68f8      	ldr	r0, [r7, #12]
 802ac16:	f7ff fb55 	bl	802a2c4 <w25q_unlock>
	return ret;
 802ac1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 802ac1e:	4618      	mov	r0, r3
 802ac20:	372c      	adds	r7, #44	@ 0x2c
 802ac22:	46bd      	mov	sp, r7
 802ac24:	bd90      	pop	{r4, r7, pc}

0802ac26 <w25q_write>:

w25q_err_t w25q_write(w25q_handle_t *handle, uint32_t addr, const uint8_t *data, size_t len)
{
 802ac26:	b580      	push	{r7, lr}
 802ac28:	b08a      	sub	sp, #40	@ 0x28
 802ac2a:	af00      	add	r7, sp, #0
 802ac2c:	60f8      	str	r0, [r7, #12]
 802ac2e:	60b9      	str	r1, [r7, #8]
 802ac30:	607a      	str	r2, [r7, #4]
 802ac32:	603b      	str	r3, [r7, #0]
	if (!handle || !data) {
 802ac34:	68fb      	ldr	r3, [r7, #12]
 802ac36:	2b00      	cmp	r3, #0
 802ac38:	d002      	beq.n	802ac40 <w25q_write+0x1a>
 802ac3a:	687b      	ldr	r3, [r7, #4]
 802ac3c:	2b00      	cmp	r3, #0
 802ac3e:	d102      	bne.n	802ac46 <w25q_write+0x20>
		return W25Q_ERR_PARAM;
 802ac40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802ac44:	e04a      	b.n	802acdc <w25q_write+0xb6>
	}

	w25q_err_t ret = w25q_check_address(handle, addr, len);
 802ac46:	683a      	ldr	r2, [r7, #0]
 802ac48:	68b9      	ldr	r1, [r7, #8]
 802ac4a:	68f8      	ldr	r0, [r7, #12]
 802ac4c:	f7ff fc0a 	bl	802a464 <w25q_check_address>
 802ac50:	4603      	mov	r3, r0
 802ac52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (ret != W25Q_OK) {
 802ac56:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 802ac5a:	2b00      	cmp	r3, #0
 802ac5c:	d002      	beq.n	802ac64 <w25q_write+0x3e>
		return ret;
 802ac5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 802ac62:	e03b      	b.n	802acdc <w25q_write+0xb6>
	}

	w25q_lock(handle);
 802ac64:	68f8      	ldr	r0, [r7, #12]
 802ac66:	f7ff fb19 	bl	802a29c <w25q_lock>

	size_t bytes_written = 0;
 802ac6a:	2300      	movs	r3, #0
 802ac6c:	623b      	str	r3, [r7, #32]

	while (bytes_written < len) {
 802ac6e:	e02a      	b.n	802acc6 <w25q_write+0xa0>
		uint32_t current_addr = addr + bytes_written;
 802ac70:	68ba      	ldr	r2, [r7, #8]
 802ac72:	6a3b      	ldr	r3, [r7, #32]
 802ac74:	4413      	add	r3, r2
 802ac76:	61bb      	str	r3, [r7, #24]
		size_t remaining = len - bytes_written;
 802ac78:	683a      	ldr	r2, [r7, #0]
 802ac7a:	6a3b      	ldr	r3, [r7, #32]
 802ac7c:	1ad3      	subs	r3, r2, r3
 802ac7e:	617b      	str	r3, [r7, #20]

		// Calcular bytes hasta el final de la página actual
		uint32_t page_boundary = (current_addr & ~(W25Q_PAGE_SIZE - 1)) + W25Q_PAGE_SIZE;
 802ac80:	69bb      	ldr	r3, [r7, #24]
 802ac82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802ac86:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 802ac8a:	613b      	str	r3, [r7, #16]
		size_t chunk_size = page_boundary - current_addr;
 802ac8c:	693a      	ldr	r2, [r7, #16]
 802ac8e:	69bb      	ldr	r3, [r7, #24]
 802ac90:	1ad3      	subs	r3, r2, r3
 802ac92:	61fb      	str	r3, [r7, #28]

		if (chunk_size > remaining) {
 802ac94:	69fa      	ldr	r2, [r7, #28]
 802ac96:	697b      	ldr	r3, [r7, #20]
 802ac98:	429a      	cmp	r2, r3
 802ac9a:	d901      	bls.n	802aca0 <w25q_write+0x7a>
			chunk_size = remaining;
 802ac9c:	697b      	ldr	r3, [r7, #20]
 802ac9e:	61fb      	str	r3, [r7, #28]
		}

		ret = w25q_page_program(handle, current_addr, data + bytes_written, chunk_size);
 802aca0:	687a      	ldr	r2, [r7, #4]
 802aca2:	6a3b      	ldr	r3, [r7, #32]
 802aca4:	441a      	add	r2, r3
 802aca6:	69fb      	ldr	r3, [r7, #28]
 802aca8:	69b9      	ldr	r1, [r7, #24]
 802acaa:	68f8      	ldr	r0, [r7, #12]
 802acac:	f7ff fede 	bl	802aa6c <w25q_page_program>
 802acb0:	4603      	mov	r3, r0
 802acb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (ret != W25Q_OK) {
 802acb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 802acba:	2b00      	cmp	r3, #0
 802acbc:	d108      	bne.n	802acd0 <w25q_write+0xaa>
			break;
		}

		bytes_written += chunk_size;
 802acbe:	6a3a      	ldr	r2, [r7, #32]
 802acc0:	69fb      	ldr	r3, [r7, #28]
 802acc2:	4413      	add	r3, r2
 802acc4:	623b      	str	r3, [r7, #32]
	while (bytes_written < len) {
 802acc6:	6a3a      	ldr	r2, [r7, #32]
 802acc8:	683b      	ldr	r3, [r7, #0]
 802acca:	429a      	cmp	r2, r3
 802accc:	d3d0      	bcc.n	802ac70 <w25q_write+0x4a>
 802acce:	e000      	b.n	802acd2 <w25q_write+0xac>
			break;
 802acd0:	bf00      	nop
	}

	w25q_unlock(handle);
 802acd2:	68f8      	ldr	r0, [r7, #12]
 802acd4:	f7ff faf6 	bl	802a2c4 <w25q_unlock>
	return ret;
 802acd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 802acdc:	4618      	mov	r0, r3
 802acde:	3728      	adds	r7, #40	@ 0x28
 802ace0:	46bd      	mov	sp, r7
 802ace2:	bd80      	pop	{r7, pc}

0802ace4 <w25q_erase_sector>:

w25q_err_t w25q_erase_sector(w25q_handle_t *handle, uint32_t sector_addr)
{
 802ace4:	b580      	push	{r7, lr}
 802ace6:	b086      	sub	sp, #24
 802ace8:	af00      	add	r7, sp, #0
 802acea:	6078      	str	r0, [r7, #4]
 802acec:	6039      	str	r1, [r7, #0]
	if (!handle) {
 802acee:	687b      	ldr	r3, [r7, #4]
 802acf0:	2b00      	cmp	r3, #0
 802acf2:	d102      	bne.n	802acfa <w25q_erase_sector+0x16>
		return W25Q_ERR_PARAM;
 802acf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802acf8:	e05d      	b.n	802adb6 <w25q_erase_sector+0xd2>
	}

	// Verificar alineación a sector
	if ((sector_addr & (W25Q_SECTOR_SIZE - 1)) != 0) {
 802acfa:	683b      	ldr	r3, [r7, #0]
 802acfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802ad00:	2b00      	cmp	r3, #0
 802ad02:	d002      	beq.n	802ad0a <w25q_erase_sector+0x26>
		return W25Q_ERR_ADDR;
 802ad04:	f06f 0306 	mvn.w	r3, #6
 802ad08:	e055      	b.n	802adb6 <w25q_erase_sector+0xd2>
	}

	w25q_err_t ret = w25q_check_address(handle, sector_addr, W25Q_SECTOR_SIZE);
 802ad0a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 802ad0e:	6839      	ldr	r1, [r7, #0]
 802ad10:	6878      	ldr	r0, [r7, #4]
 802ad12:	f7ff fba7 	bl	802a464 <w25q_check_address>
 802ad16:	4603      	mov	r3, r0
 802ad18:	75fb      	strb	r3, [r7, #23]
	if (ret != W25Q_OK) {
 802ad1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802ad1e:	2b00      	cmp	r3, #0
 802ad20:	d002      	beq.n	802ad28 <w25q_erase_sector+0x44>
		return ret;
 802ad22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802ad26:	e046      	b.n	802adb6 <w25q_erase_sector+0xd2>
	}

	w25q_lock(handle);
 802ad28:	6878      	ldr	r0, [r7, #4]
 802ad2a:	f7ff fab7 	bl	802a29c <w25q_lock>

	// Esperar dispositivo listo
	ret = w25q_wait_busy(handle, handle->timeout_ms);
 802ad2e:	687b      	ldr	r3, [r7, #4]
 802ad30:	699b      	ldr	r3, [r3, #24]
 802ad32:	4619      	mov	r1, r3
 802ad34:	6878      	ldr	r0, [r7, #4]
 802ad36:	f7ff fdb6 	bl	802a8a6 <w25q_wait_busy>
 802ad3a:	4603      	mov	r3, r0
 802ad3c:	75fb      	strb	r3, [r7, #23]
	if (ret != W25Q_OK) {
 802ad3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802ad42:	2b00      	cmp	r3, #0
 802ad44:	d005      	beq.n	802ad52 <w25q_erase_sector+0x6e>
		w25q_unlock(handle);
 802ad46:	6878      	ldr	r0, [r7, #4]
 802ad48:	f7ff fabc 	bl	802a2c4 <w25q_unlock>
		return ret;
 802ad4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802ad50:	e031      	b.n	802adb6 <w25q_erase_sector+0xd2>
	}

	// Habilitar escritura
	ret = w25q_write_enable(handle);
 802ad52:	6878      	ldr	r0, [r7, #4]
 802ad54:	f7ff fd94 	bl	802a880 <w25q_write_enable>
 802ad58:	4603      	mov	r3, r0
 802ad5a:	75fb      	strb	r3, [r7, #23]
	if (ret != W25Q_OK) {
 802ad5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802ad60:	2b00      	cmp	r3, #0
 802ad62:	d005      	beq.n	802ad70 <w25q_erase_sector+0x8c>
		w25q_unlock(handle);
 802ad64:	6878      	ldr	r0, [r7, #4]
 802ad66:	f7ff faad 	bl	802a2c4 <w25q_unlock>
		return ret;
 802ad6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802ad6e:	e022      	b.n	802adb6 <w25q_erase_sector+0xd2>
	}

	// Comando erase sector + dirección
	uint8_t cmd[5];
	size_t cmd_len = w25q_build_address_command(cmd, W25Q_CMD_BLOCK_ERASE_4KB, sector_addr, handle->info.addr_mode);
 802ad70:	687b      	ldr	r3, [r7, #4]
 802ad72:	7ddb      	ldrb	r3, [r3, #23]
 802ad74:	f107 0008 	add.w	r0, r7, #8
 802ad78:	683a      	ldr	r2, [r7, #0]
 802ad7a:	2120      	movs	r1, #32
 802ad7c:	f7ff f9d0 	bl	802a120 <w25q_build_address_command>
 802ad80:	6138      	str	r0, [r7, #16]

	ret = w25q_spi_transfer(handle, cmd, NULL, cmd_len);
 802ad82:	f107 0108 	add.w	r1, r7, #8
 802ad86:	693b      	ldr	r3, [r7, #16]
 802ad88:	2200      	movs	r2, #0
 802ad8a:	6878      	ldr	r0, [r7, #4]
 802ad8c:	f7ff fa47 	bl	802a21e <w25q_spi_transfer>
 802ad90:	4603      	mov	r3, r0
 802ad92:	75fb      	strb	r3, [r7, #23]

	// Esperar a que termine el borrado
	if (ret == W25Q_OK) {
 802ad94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802ad98:	2b00      	cmp	r3, #0
 802ad9a:	d107      	bne.n	802adac <w25q_erase_sector+0xc8>
		ret = w25q_wait_busy(handle, handle->timeout_ms);
 802ad9c:	687b      	ldr	r3, [r7, #4]
 802ad9e:	699b      	ldr	r3, [r3, #24]
 802ada0:	4619      	mov	r1, r3
 802ada2:	6878      	ldr	r0, [r7, #4]
 802ada4:	f7ff fd7f 	bl	802a8a6 <w25q_wait_busy>
 802ada8:	4603      	mov	r3, r0
 802adaa:	75fb      	strb	r3, [r7, #23]
	}

	w25q_unlock(handle);
 802adac:	6878      	ldr	r0, [r7, #4]
 802adae:	f7ff fa89 	bl	802a2c4 <w25q_unlock>
	return ret;
 802adb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802adb6:	4618      	mov	r0, r3
 802adb8:	3718      	adds	r7, #24
 802adba:	46bd      	mov	sp, r7
 802adbc:	bd80      	pop	{r7, pc}

0802adbe <w25q_power_down>:
	w25q_unlock(handle);
	return ret;
}

w25q_err_t w25q_power_down(w25q_handle_t *handle)
{
 802adbe:	b580      	push	{r7, lr}
 802adc0:	b082      	sub	sp, #8
 802adc2:	af00      	add	r7, sp, #0
 802adc4:	6078      	str	r0, [r7, #4]
	if (!handle) {
 802adc6:	687b      	ldr	r3, [r7, #4]
 802adc8:	2b00      	cmp	r3, #0
 802adca:	d102      	bne.n	802add2 <w25q_power_down+0x14>
		return W25Q_ERR_PARAM;
 802adcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802add0:	e004      	b.n	802addc <w25q_power_down+0x1e>
	}

	return w25q_spi_command(handle, W25Q_CMD_POWER_DOWN);
 802add2:	21b9      	movs	r1, #185	@ 0xb9
 802add4:	6878      	ldr	r0, [r7, #4]
 802add6:	f7ff f9e4 	bl	802a1a2 <w25q_spi_command>
 802adda:	4603      	mov	r3, r0
}
 802addc:	4618      	mov	r0, r3
 802adde:	3708      	adds	r7, #8
 802ade0:	46bd      	mov	sp, r7
 802ade2:	bd80      	pop	{r7, pc}

0802ade4 <w25q_release_power_down>:

w25q_err_t w25q_release_power_down(w25q_handle_t *handle)
{
 802ade4:	b580      	push	{r7, lr}
 802ade6:	b082      	sub	sp, #8
 802ade8:	af00      	add	r7, sp, #0
 802adea:	6078      	str	r0, [r7, #4]
	if (!handle) {
 802adec:	687b      	ldr	r3, [r7, #4]
 802adee:	2b00      	cmp	r3, #0
 802adf0:	d102      	bne.n	802adf8 <w25q_release_power_down+0x14>
		return W25Q_ERR_PARAM;
 802adf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802adf6:	e004      	b.n	802ae02 <w25q_release_power_down+0x1e>
	}

	return w25q_spi_command(handle, W25Q_CMD_RELEASE_POWER_DOWN);
 802adf8:	21ab      	movs	r1, #171	@ 0xab
 802adfa:	6878      	ldr	r0, [r7, #4]
 802adfc:	f7ff f9d1 	bl	802a1a2 <w25q_spi_command>
 802ae00:	4603      	mov	r3, r0
}
 802ae02:	4618      	mov	r0, r3
 802ae04:	3708      	adds	r7, #8
 802ae06:	46bd      	mov	sp, r7
 802ae08:	bd80      	pop	{r7, pc}

0802ae0a <string_to_uint32>:
static uint16_t calculate_crc16(const uint8_t* p_data, uint32_t size);
static uint8_t calculate_checksum(const uint8_t *p_data, uint32_t size);
static COM_StatusTypeDef serial_put_byte(ymodem_handle_t *handle, uint8_t data);

// String to integer conversion (replacement for Str2Int)
static COM_StatusTypeDef string_to_uint32(const uint8_t *str, uint32_t *value) {
 802ae0a:	b480      	push	{r7}
 802ae0c:	b085      	sub	sp, #20
 802ae0e:	af00      	add	r7, sp, #0
 802ae10:	6078      	str	r0, [r7, #4]
 802ae12:	6039      	str	r1, [r7, #0]
    uint32_t result = 0;
 802ae14:	2300      	movs	r3, #0
 802ae16:	60fb      	str	r3, [r7, #12]
    uint32_t i = 0;
 802ae18:	2300      	movs	r3, #0
 802ae1a:	60bb      	str	r3, [r7, #8]

    if (str == NULL || value == NULL) {
 802ae1c:	687b      	ldr	r3, [r7, #4]
 802ae1e:	2b00      	cmp	r3, #0
 802ae20:	d002      	beq.n	802ae28 <string_to_uint32+0x1e>
 802ae22:	683b      	ldr	r3, [r7, #0]
 802ae24:	2b00      	cmp	r3, #0
 802ae26:	d11d      	bne.n	802ae64 <string_to_uint32+0x5a>
        return COM_ERROR;
 802ae28:	2301      	movs	r3, #1
 802ae2a:	e025      	b.n	802ae78 <string_to_uint32+0x6e>
    }

    while (str[i] != '\0') {
        if (str[i] >= '0' && str[i] <= '9') {
 802ae2c:	687a      	ldr	r2, [r7, #4]
 802ae2e:	68bb      	ldr	r3, [r7, #8]
 802ae30:	4413      	add	r3, r2
 802ae32:	781b      	ldrb	r3, [r3, #0]
 802ae34:	2b2f      	cmp	r3, #47	@ 0x2f
 802ae36:	d91b      	bls.n	802ae70 <string_to_uint32+0x66>
 802ae38:	687a      	ldr	r2, [r7, #4]
 802ae3a:	68bb      	ldr	r3, [r7, #8]
 802ae3c:	4413      	add	r3, r2
 802ae3e:	781b      	ldrb	r3, [r3, #0]
 802ae40:	2b39      	cmp	r3, #57	@ 0x39
 802ae42:	d815      	bhi.n	802ae70 <string_to_uint32+0x66>
            result = result * 10 + (str[i] - '0');
 802ae44:	68fa      	ldr	r2, [r7, #12]
 802ae46:	4613      	mov	r3, r2
 802ae48:	009b      	lsls	r3, r3, #2
 802ae4a:	4413      	add	r3, r2
 802ae4c:	005b      	lsls	r3, r3, #1
 802ae4e:	4619      	mov	r1, r3
 802ae50:	687a      	ldr	r2, [r7, #4]
 802ae52:	68bb      	ldr	r3, [r7, #8]
 802ae54:	4413      	add	r3, r2
 802ae56:	781b      	ldrb	r3, [r3, #0]
 802ae58:	440b      	add	r3, r1
 802ae5a:	3b30      	subs	r3, #48	@ 0x30
 802ae5c:	60fb      	str	r3, [r7, #12]
            i++;
 802ae5e:	68bb      	ldr	r3, [r7, #8]
 802ae60:	3301      	adds	r3, #1
 802ae62:	60bb      	str	r3, [r7, #8]
    while (str[i] != '\0') {
 802ae64:	687a      	ldr	r2, [r7, #4]
 802ae66:	68bb      	ldr	r3, [r7, #8]
 802ae68:	4413      	add	r3, r2
 802ae6a:	781b      	ldrb	r3, [r3, #0]
 802ae6c:	2b00      	cmp	r3, #0
 802ae6e:	d1dd      	bne.n	802ae2c <string_to_uint32+0x22>
        } else {
            break;
        }
    }

    *value = result;
 802ae70:	683b      	ldr	r3, [r7, #0]
 802ae72:	68fa      	ldr	r2, [r7, #12]
 802ae74:	601a      	str	r2, [r3, #0]
    return COM_OK;
 802ae76:	2300      	movs	r3, #0
}
 802ae78:	4618      	mov	r0, r3
 802ae7a:	3714      	adds	r7, #20
 802ae7c:	46bd      	mov	sp, r7
 802ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae82:	4770      	bx	lr

0802ae84 <ymodem_init>:
 * @brief Initialize YMODEM handle with user I/O functions
 * @param handle Pointer to YMODEM handle
 * @param read_fn User-provided read function
 * @param write_fn User-provided write function
 */
void ymodem_init(ymodem_handle_t *handle, ymodem_read_fn_t read_fn, ymodem_write_fn_t write_fn) {
 802ae84:	b580      	push	{r7, lr}
 802ae86:	b084      	sub	sp, #16
 802ae88:	af00      	add	r7, sp, #0
 802ae8a:	60f8      	str	r0, [r7, #12]
 802ae8c:	60b9      	str	r1, [r7, #8]
 802ae8e:	607a      	str	r2, [r7, #4]
    if (handle == NULL) return;
 802ae90:	68fb      	ldr	r3, [r7, #12]
 802ae92:	2b00      	cmp	r3, #0
 802ae94:	d01d      	beq.n	802aed2 <ymodem_init+0x4e>

    handle->read_fn = read_fn;
 802ae96:	68fb      	ldr	r3, [r7, #12]
 802ae98:	68ba      	ldr	r2, [r7, #8]
 802ae9a:	601a      	str	r2, [r3, #0]
    handle->write_fn = write_fn;
 802ae9c:	68fb      	ldr	r3, [r7, #12]
 802ae9e:	687a      	ldr	r2, [r7, #4]
 802aea0:	605a      	str	r2, [r3, #4]
    handle->file_size = 0;
 802aea2:	68fb      	ldr	r3, [r7, #12]
 802aea4:	2200      	movs	r2, #0
 802aea6:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
    handle->bytes_transferred = 0;
 802aeaa:	68fb      	ldr	r3, [r7, #12]
 802aeac:	2200      	movs	r2, #0
 802aeae:	f8c3 2454 	str.w	r2, [r3, #1108]	@ 0x454
    memset(handle->filename, 0, FILE_NAME_LENGTH);
 802aeb2:	68fb      	ldr	r3, [r7, #12]
 802aeb4:	3308      	adds	r3, #8
 802aeb6:	2240      	movs	r2, #64	@ 0x40
 802aeb8:	2100      	movs	r1, #0
 802aeba:	4618      	mov	r0, r3
 802aebc:	f005 fa74 	bl	80303a8 <memset>
    memset(handle->packet_data, 0, sizeof(handle->packet_data));
 802aec0:	68fb      	ldr	r3, [r7, #12]
 802aec2:	3348      	adds	r3, #72	@ 0x48
 802aec4:	f240 4206 	movw	r2, #1030	@ 0x406
 802aec8:	2100      	movs	r1, #0
 802aeca:	4618      	mov	r0, r3
 802aecc:	f005 fa6c 	bl	80303a8 <memset>
 802aed0:	e000      	b.n	802aed4 <ymodem_init+0x50>
    if (handle == NULL) return;
 802aed2:	bf00      	nop
}
 802aed4:	3710      	adds	r7, #16
 802aed6:	46bd      	mov	sp, r7
 802aed8:	bd80      	pop	{r7, pc}

0802aeda <serial_put_byte>:
 * @brief Send a single byte using user write function
 * @param handle Pointer to YMODEM handle
 * @param data Byte to send
 * @return COM_StatusTypeDef
 */
static COM_StatusTypeDef serial_put_byte(ymodem_handle_t *handle, uint8_t data) {
 802aeda:	b580      	push	{r7, lr}
 802aedc:	b082      	sub	sp, #8
 802aede:	af00      	add	r7, sp, #0
 802aee0:	6078      	str	r0, [r7, #4]
 802aee2:	460b      	mov	r3, r1
 802aee4:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL || handle->write_fn == NULL) {
 802aee6:	687b      	ldr	r3, [r7, #4]
 802aee8:	2b00      	cmp	r3, #0
 802aeea:	d003      	beq.n	802aef4 <serial_put_byte+0x1a>
 802aeec:	687b      	ldr	r3, [r7, #4]
 802aeee:	685b      	ldr	r3, [r3, #4]
 802aef0:	2b00      	cmp	r3, #0
 802aef2:	d101      	bne.n	802aef8 <serial_put_byte+0x1e>
        return COM_ERROR;
 802aef4:	2301      	movs	r3, #1
 802aef6:	e006      	b.n	802af06 <serial_put_byte+0x2c>
    }
    return handle->write_fn(&data, 1);
 802aef8:	687b      	ldr	r3, [r7, #4]
 802aefa:	685b      	ldr	r3, [r3, #4]
 802aefc:	1cfa      	adds	r2, r7, #3
 802aefe:	2101      	movs	r1, #1
 802af00:	4610      	mov	r0, r2
 802af02:	4798      	blx	r3
 802af04:	4603      	mov	r3, r0
}
 802af06:	4618      	mov	r0, r3
 802af08:	3708      	adds	r7, #8
 802af0a:	46bd      	mov	sp, r7
 802af0c:	bd80      	pop	{r7, pc}
	...

0802af10 <receive_packet>:
 * @param p_data Data buffer
 * @param p_length Packet length
 * @param timeout Timeout in milliseconds
 * @return COM_StatusTypeDef
 */
static COM_StatusTypeDef receive_packet(ymodem_handle_t *handle, uint8_t *p_data, uint32_t *p_length, uint32_t timeout) {
 802af10:	b580      	push	{r7, lr}
 802af12:	b088      	sub	sp, #32
 802af14:	af00      	add	r7, sp, #0
 802af16:	60f8      	str	r0, [r7, #12]
 802af18:	60b9      	str	r1, [r7, #8]
 802af1a:	607a      	str	r2, [r7, #4]
 802af1c:	603b      	str	r3, [r7, #0]
    uint32_t crc;
    uint32_t packet_size = 0;
 802af1e:	2300      	movs	r3, #0
 802af20:	61fb      	str	r3, [r7, #28]
    COM_StatusTypeDef status;
    uint8_t char1;

    *p_length = 0;
 802af22:	687b      	ldr	r3, [r7, #4]
 802af24:	2200      	movs	r2, #0
 802af26:	601a      	str	r2, [r3, #0]

    if (handle == NULL || handle->read_fn == NULL) {
 802af28:	68fb      	ldr	r3, [r7, #12]
 802af2a:	2b00      	cmp	r3, #0
 802af2c:	d003      	beq.n	802af36 <receive_packet+0x26>
 802af2e:	68fb      	ldr	r3, [r7, #12]
 802af30:	681b      	ldr	r3, [r3, #0]
 802af32:	2b00      	cmp	r3, #0
 802af34:	d101      	bne.n	802af3a <receive_packet+0x2a>
        return COM_ERROR;
 802af36:	2301      	movs	r3, #1
 802af38:	e0b8      	b.n	802b0ac <receive_packet+0x19c>
    }

    status = handle->read_fn(&char1, 1, timeout);
 802af3a:	68fb      	ldr	r3, [r7, #12]
 802af3c:	681b      	ldr	r3, [r3, #0]
 802af3e:	f107 0013 	add.w	r0, r7, #19
 802af42:	683a      	ldr	r2, [r7, #0]
 802af44:	2101      	movs	r1, #1
 802af46:	4798      	blx	r3
 802af48:	4603      	mov	r3, r0
 802af4a:	76fb      	strb	r3, [r7, #27]

    if (status == COM_OK) {
 802af4c:	7efb      	ldrb	r3, [r7, #27]
 802af4e:	2b00      	cmp	r3, #0
 802af50:	f040 80a8 	bne.w	802b0a4 <receive_packet+0x194>
        switch (char1) {
 802af54:	7cfb      	ldrb	r3, [r7, #19]
 802af56:	2b61      	cmp	r3, #97	@ 0x61
 802af58:	d059      	beq.n	802b00e <receive_packet+0xfe>
 802af5a:	2b61      	cmp	r3, #97	@ 0x61
 802af5c:	dc5a      	bgt.n	802b014 <receive_packet+0x104>
 802af5e:	2b18      	cmp	r3, #24
 802af60:	dc38      	bgt.n	802afd4 <receive_packet+0xc4>
 802af62:	2b00      	cmp	r3, #0
 802af64:	dd56      	ble.n	802b014 <receive_packet+0x104>
 802af66:	3b01      	subs	r3, #1
 802af68:	2b17      	cmp	r3, #23
 802af6a:	d853      	bhi.n	802b014 <receive_packet+0x104>
 802af6c:	a201      	add	r2, pc, #4	@ (adr r2, 802af74 <receive_packet+0x64>)
 802af6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802af72:	bf00      	nop
 802af74:	0802afdb 	.word	0x0802afdb
 802af78:	0802afe1 	.word	0x0802afe1
 802af7c:	0802b015 	.word	0x0802b015
 802af80:	0802b01b 	.word	0x0802b01b
 802af84:	0802b015 	.word	0x0802b015
 802af88:	0802b015 	.word	0x0802b015
 802af8c:	0802b015 	.word	0x0802b015
 802af90:	0802b015 	.word	0x0802b015
 802af94:	0802b015 	.word	0x0802b015
 802af98:	0802b015 	.word	0x0802b015
 802af9c:	0802b015 	.word	0x0802b015
 802afa0:	0802b015 	.word	0x0802b015
 802afa4:	0802b015 	.word	0x0802b015
 802afa8:	0802b015 	.word	0x0802b015
 802afac:	0802b015 	.word	0x0802b015
 802afb0:	0802b015 	.word	0x0802b015
 802afb4:	0802b015 	.word	0x0802b015
 802afb8:	0802b015 	.word	0x0802b015
 802afbc:	0802b015 	.word	0x0802b015
 802afc0:	0802b015 	.word	0x0802b015
 802afc4:	0802b015 	.word	0x0802b015
 802afc8:	0802b015 	.word	0x0802b015
 802afcc:	0802b015 	.word	0x0802b015
 802afd0:	0802afe9 	.word	0x0802afe9
 802afd4:	2b41      	cmp	r3, #65	@ 0x41
 802afd6:	d01a      	beq.n	802b00e <receive_packet+0xfe>
 802afd8:	e01c      	b.n	802b014 <receive_packet+0x104>
            case SOH:
                packet_size = PACKET_SIZE;
 802afda:	2380      	movs	r3, #128	@ 0x80
 802afdc:	61fb      	str	r3, [r7, #28]
                break;
 802afde:	e01d      	b.n	802b01c <receive_packet+0x10c>
            case STX:
                packet_size = PACKET_1K_SIZE;
 802afe0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802afe4:	61fb      	str	r3, [r7, #28]
                break;
 802afe6:	e019      	b.n	802b01c <receive_packet+0x10c>
            case EOT:
                break;
            case CA:
                if ((handle->read_fn(&char1, 1, timeout) == COM_OK) && (char1 == CA)) {
 802afe8:	68fb      	ldr	r3, [r7, #12]
 802afea:	681b      	ldr	r3, [r3, #0]
 802afec:	f107 0013 	add.w	r0, r7, #19
 802aff0:	683a      	ldr	r2, [r7, #0]
 802aff2:	2101      	movs	r1, #1
 802aff4:	4798      	blx	r3
 802aff6:	4603      	mov	r3, r0
 802aff8:	2b00      	cmp	r3, #0
 802affa:	d105      	bne.n	802b008 <receive_packet+0xf8>
 802affc:	7cfb      	ldrb	r3, [r7, #19]
 802affe:	2b18      	cmp	r3, #24
 802b000:	d102      	bne.n	802b008 <receive_packet+0xf8>
                    packet_size = 2;
 802b002:	2302      	movs	r3, #2
 802b004:	61fb      	str	r3, [r7, #28]
                } else {
                    status = COM_ERROR;
                }
                break;
 802b006:	e009      	b.n	802b01c <receive_packet+0x10c>
                    status = COM_ERROR;
 802b008:	2301      	movs	r3, #1
 802b00a:	76fb      	strb	r3, [r7, #27]
                break;
 802b00c:	e006      	b.n	802b01c <receive_packet+0x10c>
            case ABORT1:
            case ABORT2:
                status = COM_ABORT;
 802b00e:	2302      	movs	r3, #2
 802b010:	76fb      	strb	r3, [r7, #27]
                break;
 802b012:	e003      	b.n	802b01c <receive_packet+0x10c>
            default:
                status = COM_ERROR;
 802b014:	2301      	movs	r3, #1
 802b016:	76fb      	strb	r3, [r7, #27]
                break;
 802b018:	e000      	b.n	802b01c <receive_packet+0x10c>
                break;
 802b01a:	bf00      	nop
        }
        *p_data = char1;
 802b01c:	7cfa      	ldrb	r2, [r7, #19]
 802b01e:	68bb      	ldr	r3, [r7, #8]
 802b020:	701a      	strb	r2, [r3, #0]

        if (packet_size >= PACKET_SIZE) {
 802b022:	69fb      	ldr	r3, [r7, #28]
 802b024:	2b7f      	cmp	r3, #127	@ 0x7f
 802b026:	d93d      	bls.n	802b0a4 <receive_packet+0x194>
            status = handle->read_fn(&p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 802b028:	68fb      	ldr	r3, [r7, #12]
 802b02a:	681b      	ldr	r3, [r3, #0]
 802b02c:	68ba      	ldr	r2, [r7, #8]
 802b02e:	1c90      	adds	r0, r2, #2
 802b030:	69fa      	ldr	r2, [r7, #28]
 802b032:	1d11      	adds	r1, r2, #4
 802b034:	683a      	ldr	r2, [r7, #0]
 802b036:	4798      	blx	r3
 802b038:	4603      	mov	r3, r0
 802b03a:	76fb      	strb	r3, [r7, #27]

            /* Simple packet sanity check */
            if (status == COM_OK) {
 802b03c:	7efb      	ldrb	r3, [r7, #27]
 802b03e:	2b00      	cmp	r3, #0
 802b040:	d12e      	bne.n	802b0a0 <receive_packet+0x190>
                if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE)) {
 802b042:	68bb      	ldr	r3, [r7, #8]
 802b044:	3302      	adds	r3, #2
 802b046:	781a      	ldrb	r2, [r3, #0]
 802b048:	68bb      	ldr	r3, [r7, #8]
 802b04a:	3303      	adds	r3, #3
 802b04c:	781b      	ldrb	r3, [r3, #0]
 802b04e:	43db      	mvns	r3, r3
 802b050:	b2db      	uxtb	r3, r3
 802b052:	429a      	cmp	r2, r3
 802b054:	d004      	beq.n	802b060 <receive_packet+0x150>
                    packet_size = 0;
 802b056:	2300      	movs	r3, #0
 802b058:	61fb      	str	r3, [r7, #28]
                    status = COM_ERROR;
 802b05a:	2301      	movs	r3, #1
 802b05c:	76fb      	strb	r3, [r7, #27]
 802b05e:	e021      	b.n	802b0a4 <receive_packet+0x194>
                } else {
                    /* Check packet CRC */
                    crc = p_data[packet_size + PACKET_DATA_INDEX] << 8;
 802b060:	69fb      	ldr	r3, [r7, #28]
 802b062:	3304      	adds	r3, #4
 802b064:	68ba      	ldr	r2, [r7, #8]
 802b066:	4413      	add	r3, r2
 802b068:	781b      	ldrb	r3, [r3, #0]
 802b06a:	021b      	lsls	r3, r3, #8
 802b06c:	617b      	str	r3, [r7, #20]
                    crc += p_data[packet_size + PACKET_DATA_INDEX + 1];
 802b06e:	69fb      	ldr	r3, [r7, #28]
 802b070:	3305      	adds	r3, #5
 802b072:	68ba      	ldr	r2, [r7, #8]
 802b074:	4413      	add	r3, r2
 802b076:	781b      	ldrb	r3, [r3, #0]
 802b078:	461a      	mov	r2, r3
 802b07a:	697b      	ldr	r3, [r7, #20]
 802b07c:	4413      	add	r3, r2
 802b07e:	617b      	str	r3, [r7, #20]
                    if (calculate_crc16(&p_data[PACKET_DATA_INDEX], packet_size) != crc) {
 802b080:	68bb      	ldr	r3, [r7, #8]
 802b082:	3304      	adds	r3, #4
 802b084:	69f9      	ldr	r1, [r7, #28]
 802b086:	4618      	mov	r0, r3
 802b088:	f000 f848 	bl	802b11c <calculate_crc16>
 802b08c:	4603      	mov	r3, r0
 802b08e:	461a      	mov	r2, r3
 802b090:	697b      	ldr	r3, [r7, #20]
 802b092:	4293      	cmp	r3, r2
 802b094:	d006      	beq.n	802b0a4 <receive_packet+0x194>
                        packet_size = 0;
 802b096:	2300      	movs	r3, #0
 802b098:	61fb      	str	r3, [r7, #28]
                        status = COM_ERROR;
 802b09a:	2301      	movs	r3, #1
 802b09c:	76fb      	strb	r3, [r7, #27]
 802b09e:	e001      	b.n	802b0a4 <receive_packet+0x194>
                    }
                }
            } else {
                packet_size = 0;
 802b0a0:	2300      	movs	r3, #0
 802b0a2:	61fb      	str	r3, [r7, #28]
            }
        }
    }
    *p_length = packet_size;
 802b0a4:	687b      	ldr	r3, [r7, #4]
 802b0a6:	69fa      	ldr	r2, [r7, #28]
 802b0a8:	601a      	str	r2, [r3, #0]
    return status;
 802b0aa:	7efb      	ldrb	r3, [r7, #27]
}
 802b0ac:	4618      	mov	r0, r3
 802b0ae:	3720      	adds	r7, #32
 802b0b0:	46bd      	mov	sp, r7
 802b0b2:	bd80      	pop	{r7, pc}

0802b0b4 <update_crc16>:
 * @brief Update CRC16 for input byte
 * @param crc_in Input CRC value
 * @param byte Input byte
 * @return Updated CRC16 value
 */
static uint16_t update_crc16(uint16_t crc_in, uint8_t byte) {
 802b0b4:	b480      	push	{r7}
 802b0b6:	b085      	sub	sp, #20
 802b0b8:	af00      	add	r7, sp, #0
 802b0ba:	4603      	mov	r3, r0
 802b0bc:	460a      	mov	r2, r1
 802b0be:	80fb      	strh	r3, [r7, #6]
 802b0c0:	4613      	mov	r3, r2
 802b0c2:	717b      	strb	r3, [r7, #5]
    uint32_t crc = crc_in;
 802b0c4:	88fb      	ldrh	r3, [r7, #6]
 802b0c6:	60fb      	str	r3, [r7, #12]
    uint32_t in = byte | 0x100;
 802b0c8:	797b      	ldrb	r3, [r7, #5]
 802b0ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 802b0ce:	60bb      	str	r3, [r7, #8]

    do {
        crc <<= 1;
 802b0d0:	68fb      	ldr	r3, [r7, #12]
 802b0d2:	005b      	lsls	r3, r3, #1
 802b0d4:	60fb      	str	r3, [r7, #12]
        in <<= 1;
 802b0d6:	68bb      	ldr	r3, [r7, #8]
 802b0d8:	005b      	lsls	r3, r3, #1
 802b0da:	60bb      	str	r3, [r7, #8]
        if (in & 0x100)
 802b0dc:	68bb      	ldr	r3, [r7, #8]
 802b0de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802b0e2:	2b00      	cmp	r3, #0
 802b0e4:	d002      	beq.n	802b0ec <update_crc16+0x38>
            ++crc;
 802b0e6:	68fb      	ldr	r3, [r7, #12]
 802b0e8:	3301      	adds	r3, #1
 802b0ea:	60fb      	str	r3, [r7, #12]
        if (crc & 0x10000)
 802b0ec:	68fb      	ldr	r3, [r7, #12]
 802b0ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802b0f2:	2b00      	cmp	r3, #0
 802b0f4:	d005      	beq.n	802b102 <update_crc16+0x4e>
            crc ^= 0x1021;
 802b0f6:	68fb      	ldr	r3, [r7, #12]
 802b0f8:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 802b0fc:	f083 0301 	eor.w	r3, r3, #1
 802b100:	60fb      	str	r3, [r7, #12]
    } while (!(in & 0x10000));
 802b102:	68bb      	ldr	r3, [r7, #8]
 802b104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802b108:	2b00      	cmp	r3, #0
 802b10a:	d0e1      	beq.n	802b0d0 <update_crc16+0x1c>

    return crc & 0xffffu;
 802b10c:	68fb      	ldr	r3, [r7, #12]
 802b10e:	b29b      	uxth	r3, r3
}
 802b110:	4618      	mov	r0, r3
 802b112:	3714      	adds	r7, #20
 802b114:	46bd      	mov	sp, r7
 802b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b11a:	4770      	bx	lr

0802b11c <calculate_crc16>:
 * @brief Calculate CRC16 for YModem Packet
 * @param p_data Data buffer
 * @param size Data size
 * @return CRC16 value
 */
static uint16_t calculate_crc16(const uint8_t* p_data, uint32_t size) {
 802b11c:	b580      	push	{r7, lr}
 802b11e:	b084      	sub	sp, #16
 802b120:	af00      	add	r7, sp, #0
 802b122:	6078      	str	r0, [r7, #4]
 802b124:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0;
 802b126:	2300      	movs	r3, #0
 802b128:	60fb      	str	r3, [r7, #12]
    const uint8_t* dataEnd = p_data + size;
 802b12a:	687a      	ldr	r2, [r7, #4]
 802b12c:	683b      	ldr	r3, [r7, #0]
 802b12e:	4413      	add	r3, r2
 802b130:	60bb      	str	r3, [r7, #8]

    while (p_data < dataEnd)
 802b132:	e00a      	b.n	802b14a <calculate_crc16+0x2e>
        crc = update_crc16(crc, *p_data++);
 802b134:	68fb      	ldr	r3, [r7, #12]
 802b136:	b298      	uxth	r0, r3
 802b138:	687b      	ldr	r3, [r7, #4]
 802b13a:	1c5a      	adds	r2, r3, #1
 802b13c:	607a      	str	r2, [r7, #4]
 802b13e:	781b      	ldrb	r3, [r3, #0]
 802b140:	4619      	mov	r1, r3
 802b142:	f7ff ffb7 	bl	802b0b4 <update_crc16>
 802b146:	4603      	mov	r3, r0
 802b148:	60fb      	str	r3, [r7, #12]
    while (p_data < dataEnd)
 802b14a:	687a      	ldr	r2, [r7, #4]
 802b14c:	68bb      	ldr	r3, [r7, #8]
 802b14e:	429a      	cmp	r2, r3
 802b150:	d3f0      	bcc.n	802b134 <calculate_crc16+0x18>

    crc = update_crc16(crc, 0);
 802b152:	68fb      	ldr	r3, [r7, #12]
 802b154:	b29b      	uxth	r3, r3
 802b156:	2100      	movs	r1, #0
 802b158:	4618      	mov	r0, r3
 802b15a:	f7ff ffab 	bl	802b0b4 <update_crc16>
 802b15e:	4603      	mov	r3, r0
 802b160:	60fb      	str	r3, [r7, #12]
    crc = update_crc16(crc, 0);
 802b162:	68fb      	ldr	r3, [r7, #12]
 802b164:	b29b      	uxth	r3, r3
 802b166:	2100      	movs	r1, #0
 802b168:	4618      	mov	r0, r3
 802b16a:	f7ff ffa3 	bl	802b0b4 <update_crc16>
 802b16e:	4603      	mov	r3, r0
 802b170:	60fb      	str	r3, [r7, #12]

    return crc & 0xffffu;
 802b172:	68fb      	ldr	r3, [r7, #12]
 802b174:	b29b      	uxth	r3, r3
}
 802b176:	4618      	mov	r0, r3
 802b178:	3710      	adds	r7, #16
 802b17a:	46bd      	mov	sp, r7
 802b17c:	bd80      	pop	{r7, pc}

0802b17e <ymodem_receive>:
 * @brief Receive a file using the ymodem protocol with CRC16
 * @param handle Pointer to YMODEM handle
 * @param data_callback Callback function to process received data
 * @return COM_StatusTypeDef result of reception
 */
COM_StatusTypeDef ymodem_receive(ymodem_handle_t *handle, ymodem_data_callback_t data_callback) {
 802b17e:	b580      	push	{r7, lr}
 802b180:	b092      	sub	sp, #72	@ 0x48
 802b182:	af00      	add	r7, sp, #0
 802b184:	6078      	str	r0, [r7, #4]
 802b186:	6039      	str	r1, [r7, #0]
    uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0, packets_received = 0, bytes_received = 0;
 802b188:	2300      	movs	r3, #0
 802b18a:	643b      	str	r3, [r7, #64]	@ 0x40
 802b18c:	2300      	movs	r3, #0
 802b18e:	63bb      	str	r3, [r7, #56]	@ 0x38
 802b190:	2300      	movs	r3, #0
 802b192:	637b      	str	r3, [r7, #52]	@ 0x34
 802b194:	2300      	movs	r3, #0
 802b196:	633b      	str	r3, [r7, #48]	@ 0x30
 802b198:	2300      	movs	r3, #0
 802b19a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t filesize;
    uint8_t *file_ptr, *data_ptr;
    uint8_t file_size[FILE_SIZE_LENGTH];
    COM_StatusTypeDef result = COM_OK;
 802b19c:	2300      	movs	r3, #0
 802b19e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (handle == NULL || data_callback == NULL) {
 802b1a2:	687b      	ldr	r3, [r7, #4]
 802b1a4:	2b00      	cmp	r3, #0
 802b1a6:	d002      	beq.n	802b1ae <ymodem_receive+0x30>
 802b1a8:	683b      	ldr	r3, [r7, #0]
 802b1aa:	2b00      	cmp	r3, #0
 802b1ac:	d101      	bne.n	802b1b2 <ymodem_receive+0x34>
        return COM_ERROR;
 802b1ae:	2301      	movs	r3, #1
 802b1b0:	e12d      	b.n	802b40e <ymodem_receive+0x290>
    }

    // Reset transfer state
    handle->file_size = 0;
 802b1b2:	687b      	ldr	r3, [r7, #4]
 802b1b4:	2200      	movs	r2, #0
 802b1b6:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
    handle->bytes_transferred = 0;
 802b1ba:	687b      	ldr	r3, [r7, #4]
 802b1bc:	2200      	movs	r2, #0
 802b1be:	f8c3 2454 	str.w	r2, [r3, #1108]	@ 0x454
    memset(handle->filename, 0, FILE_NAME_LENGTH);
 802b1c2:	687b      	ldr	r3, [r7, #4]
 802b1c4:	3308      	adds	r3, #8
 802b1c6:	2240      	movs	r2, #64	@ 0x40
 802b1c8:	2100      	movs	r1, #0
 802b1ca:	4618      	mov	r0, r3
 802b1cc:	f005 f8ec 	bl	80303a8 <memset>

    while ((session_done == 0) && (result == COM_OK)) {
 802b1d0:	e113      	b.n	802b3fa <ymodem_receive+0x27c>
        packets_received = 0;
 802b1d2:	2300      	movs	r3, #0
 802b1d4:	633b      	str	r3, [r7, #48]	@ 0x30
        file_done = 0;
 802b1d6:	2300      	movs	r3, #0
 802b1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        while ((file_done == 0) && (result == COM_OK)) {
 802b1da:	e106      	b.n	802b3ea <ymodem_receive+0x26c>
            switch (receive_packet(handle, handle->packet_data, &packet_length, DOWNLOAD_TIMEOUT)) {
 802b1dc:	687b      	ldr	r3, [r7, #4]
 802b1de:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802b1e2:	f107 021c 	add.w	r2, r7, #28
 802b1e6:	f242 7310 	movw	r3, #10000	@ 0x2710
 802b1ea:	6878      	ldr	r0, [r7, #4]
 802b1ec:	f7ff fe90 	bl	802af10 <receive_packet>
 802b1f0:	4603      	mov	r3, r0
 802b1f2:	2b00      	cmp	r3, #0
 802b1f4:	d003      	beq.n	802b1fe <ymodem_receive+0x80>
 802b1f6:	2b02      	cmp	r3, #2
 802b1f8:	f000 80d1 	beq.w	802b39e <ymodem_receive+0x220>
 802b1fc:	e0db      	b.n	802b3b6 <ymodem_receive+0x238>
                case COM_OK:
                    errors = 0;
 802b1fe:	2300      	movs	r3, #0
 802b200:	63bb      	str	r3, [r7, #56]	@ 0x38
                    switch (packet_length) {
 802b202:	69fb      	ldr	r3, [r7, #28]
 802b204:	2b00      	cmp	r3, #0
 802b206:	d009      	beq.n	802b21c <ymodem_receive+0x9e>
 802b208:	2b02      	cmp	r3, #2
 802b20a:	d10e      	bne.n	802b22a <ymodem_receive+0xac>
                        case 2:
                            /* Abort by sender */
                            serial_put_byte(handle, ACK);
 802b20c:	2106      	movs	r1, #6
 802b20e:	6878      	ldr	r0, [r7, #4]
 802b210:	f7ff fe63 	bl	802aeda <serial_put_byte>
                            result = COM_ABORT;
 802b214:	2302      	movs	r3, #2
 802b216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                            break;
 802b21a:	e0bf      	b.n	802b39c <ymodem_receive+0x21e>
                        case 0:
                            /* End of transmission */
                            serial_put_byte(handle, ACK);
 802b21c:	2106      	movs	r1, #6
 802b21e:	6878      	ldr	r0, [r7, #4]
 802b220:	f7ff fe5b 	bl	802aeda <serial_put_byte>
                            file_done = 1;
 802b224:	2301      	movs	r3, #1
 802b226:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            break;
 802b228:	e0b8      	b.n	802b39c <ymodem_receive+0x21e>
                        default:
                            /* Normal packet */
                            if (handle->packet_data[PACKET_NUMBER_INDEX] != (0xFFU & packets_received)) {
 802b22a:	687b      	ldr	r3, [r7, #4]
 802b22c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 802b230:	461a      	mov	r2, r3
 802b232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802b234:	b2db      	uxtb	r3, r3
 802b236:	429a      	cmp	r2, r3
 802b238:	d004      	beq.n	802b244 <ymodem_receive+0xc6>
                                serial_put_byte(handle, NAK);
 802b23a:	2115      	movs	r1, #21
 802b23c:	6878      	ldr	r0, [r7, #4]
 802b23e:	f7ff fe4c 	bl	802aeda <serial_put_byte>
                                    }
                                }
                                packets_received++;
                                session_begin = 1;
                            }
                            break;
 802b242:	e0aa      	b.n	802b39a <ymodem_receive+0x21c>
                                if (packets_received == 0) {
 802b244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802b246:	2b00      	cmp	r3, #0
 802b248:	d16a      	bne.n	802b320 <ymodem_receive+0x1a2>
                                    if (handle->packet_data[PACKET_DATA_INDEX] != 0) {
 802b24a:	687b      	ldr	r3, [r7, #4]
 802b24c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 802b250:	2b00      	cmp	r3, #0
 802b252:	d05c      	beq.n	802b30e <ymodem_receive+0x190>
                                        i = 0;
 802b254:	2300      	movs	r3, #0
 802b256:	647b      	str	r3, [r7, #68]	@ 0x44
                                        file_ptr = handle->packet_data + PACKET_DATA_INDEX;
 802b258:	687b      	ldr	r3, [r7, #4]
 802b25a:	3348      	adds	r3, #72	@ 0x48
 802b25c:	3304      	adds	r3, #4
 802b25e:	62bb      	str	r3, [r7, #40]	@ 0x28
                                        while ((*file_ptr != 0) && (i < FILE_NAME_LENGTH)) {
 802b260:	e00a      	b.n	802b278 <ymodem_receive+0xfa>
                                            handle->filename[i++] = *file_ptr++;
 802b262:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802b264:	1c53      	adds	r3, r2, #1
 802b266:	62bb      	str	r3, [r7, #40]	@ 0x28
 802b268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802b26a:	1c59      	adds	r1, r3, #1
 802b26c:	6479      	str	r1, [r7, #68]	@ 0x44
 802b26e:	7811      	ldrb	r1, [r2, #0]
 802b270:	687a      	ldr	r2, [r7, #4]
 802b272:	4413      	add	r3, r2
 802b274:	460a      	mov	r2, r1
 802b276:	721a      	strb	r2, [r3, #8]
                                        while ((*file_ptr != 0) && (i < FILE_NAME_LENGTH)) {
 802b278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802b27a:	781b      	ldrb	r3, [r3, #0]
 802b27c:	2b00      	cmp	r3, #0
 802b27e:	d002      	beq.n	802b286 <ymodem_receive+0x108>
 802b280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802b282:	2b3f      	cmp	r3, #63	@ 0x3f
 802b284:	d9ed      	bls.n	802b262 <ymodem_receive+0xe4>
                                        handle->filename[i] = '\0';
 802b286:	687a      	ldr	r2, [r7, #4]
 802b288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802b28a:	4413      	add	r3, r2
 802b28c:	3308      	adds	r3, #8
 802b28e:	2200      	movs	r2, #0
 802b290:	701a      	strb	r2, [r3, #0]
                                        i = 0;
 802b292:	2300      	movs	r3, #0
 802b294:	647b      	str	r3, [r7, #68]	@ 0x44
                                        file_ptr++;
 802b296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802b298:	3301      	adds	r3, #1
 802b29a:	62bb      	str	r3, [r7, #40]	@ 0x28
                                        while ((*file_ptr != ' ') && (i < FILE_SIZE_LENGTH)) {
 802b29c:	e00a      	b.n	802b2b4 <ymodem_receive+0x136>
                                            file_size[i++] = *file_ptr++;
 802b29e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802b2a0:	1c53      	adds	r3, r2, #1
 802b2a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 802b2a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802b2a6:	1c59      	adds	r1, r3, #1
 802b2a8:	6479      	str	r1, [r7, #68]	@ 0x44
 802b2aa:	7812      	ldrb	r2, [r2, #0]
 802b2ac:	3348      	adds	r3, #72	@ 0x48
 802b2ae:	443b      	add	r3, r7
 802b2b0:	f803 2c40 	strb.w	r2, [r3, #-64]
                                        while ((*file_ptr != ' ') && (i < FILE_SIZE_LENGTH)) {
 802b2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802b2b6:	781b      	ldrb	r3, [r3, #0]
 802b2b8:	2b20      	cmp	r3, #32
 802b2ba:	d002      	beq.n	802b2c2 <ymodem_receive+0x144>
 802b2bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802b2be:	2b0f      	cmp	r3, #15
 802b2c0:	d9ed      	bls.n	802b29e <ymodem_receive+0x120>
                                        file_size[i] = '\0';
 802b2c2:	f107 0208 	add.w	r2, r7, #8
 802b2c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802b2c8:	4413      	add	r3, r2
 802b2ca:	2200      	movs	r2, #0
 802b2cc:	701a      	strb	r2, [r3, #0]
                                        if (string_to_uint32(file_size, &filesize) != COM_OK) {
 802b2ce:	f107 0218 	add.w	r2, r7, #24
 802b2d2:	f107 0308 	add.w	r3, r7, #8
 802b2d6:	4611      	mov	r1, r2
 802b2d8:	4618      	mov	r0, r3
 802b2da:	f7ff fd96 	bl	802ae0a <string_to_uint32>
 802b2de:	4603      	mov	r3, r0
 802b2e0:	2b00      	cmp	r3, #0
 802b2e2:	d003      	beq.n	802b2ec <ymodem_receive+0x16e>
                                            result = COM_ERROR;
 802b2e4:	2301      	movs	r3, #1
 802b2e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                            break;
 802b2ea:	e057      	b.n	802b39c <ymodem_receive+0x21e>
                                        handle->file_size = filesize;
 802b2ec:	69ba      	ldr	r2, [r7, #24]
 802b2ee:	687b      	ldr	r3, [r7, #4]
 802b2f0:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
                                        handle->bytes_transferred = 0;
 802b2f4:	687b      	ldr	r3, [r7, #4]
 802b2f6:	2200      	movs	r2, #0
 802b2f8:	f8c3 2454 	str.w	r2, [r3, #1108]	@ 0x454
                                        serial_put_byte(handle, ACK);
 802b2fc:	2106      	movs	r1, #6
 802b2fe:	6878      	ldr	r0, [r7, #4]
 802b300:	f7ff fdeb 	bl	802aeda <serial_put_byte>
                                        serial_put_byte(handle, CRC16);
 802b304:	2143      	movs	r1, #67	@ 0x43
 802b306:	6878      	ldr	r0, [r7, #4]
 802b308:	f7ff fde7 	bl	802aeda <serial_put_byte>
 802b30c:	e040      	b.n	802b390 <ymodem_receive+0x212>
                                        serial_put_byte(handle, ACK);
 802b30e:	2106      	movs	r1, #6
 802b310:	6878      	ldr	r0, [r7, #4]
 802b312:	f7ff fde2 	bl	802aeda <serial_put_byte>
                                        file_done = 1;
 802b316:	2301      	movs	r3, #1
 802b318:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                        session_done = 1;
 802b31a:	2301      	movs	r3, #1
 802b31c:	643b      	str	r3, [r7, #64]	@ 0x40
                                        break;
 802b31e:	e03d      	b.n	802b39c <ymodem_receive+0x21e>
                                    data_ptr = (uint8_t*)&handle->packet_data[PACKET_DATA_INDEX];
 802b320:	687b      	ldr	r3, [r7, #4]
 802b322:	334c      	adds	r3, #76	@ 0x4c
 802b324:	623b      	str	r3, [r7, #32]
                                    if ((handle->file_size - bytes_received) < 1024) {
 802b326:	687b      	ldr	r3, [r7, #4]
 802b328:	f8d3 2450 	ldr.w	r2, [r3, #1104]	@ 0x450
 802b32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802b32e:	1ad3      	subs	r3, r2, r3
 802b330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802b334:	d20a      	bcs.n	802b34c <ymodem_receive+0x1ce>
                                        while (data_ptr[packet_length - 1] == '\x1A') {
 802b336:	e002      	b.n	802b33e <ymodem_receive+0x1c0>
                                            packet_length--;
 802b338:	69fb      	ldr	r3, [r7, #28]
 802b33a:	3b01      	subs	r3, #1
 802b33c:	61fb      	str	r3, [r7, #28]
                                        while (data_ptr[packet_length - 1] == '\x1A') {
 802b33e:	69fb      	ldr	r3, [r7, #28]
 802b340:	3b01      	subs	r3, #1
 802b342:	6a3a      	ldr	r2, [r7, #32]
 802b344:	4413      	add	r3, r2
 802b346:	781b      	ldrb	r3, [r3, #0]
 802b348:	2b1a      	cmp	r3, #26
 802b34a:	d0f5      	beq.n	802b338 <ymodem_receive+0x1ba>
                                    bytes_received += packet_length;
 802b34c:	69fb      	ldr	r3, [r7, #28]
 802b34e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802b350:	4413      	add	r3, r2
 802b352:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                    handle->bytes_transferred = bytes_received;
 802b354:	687b      	ldr	r3, [r7, #4]
 802b356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802b358:	f8c3 2454 	str.w	r2, [r3, #1108]	@ 0x454
                                    if (data_callback(data_ptr, packet_length, bytes_received - packet_length) == COM_OK) {
 802b35c:	69f9      	ldr	r1, [r7, #28]
 802b35e:	69fb      	ldr	r3, [r7, #28]
 802b360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802b362:	1ad2      	subs	r2, r2, r3
 802b364:	683b      	ldr	r3, [r7, #0]
 802b366:	6a38      	ldr	r0, [r7, #32]
 802b368:	4798      	blx	r3
 802b36a:	4603      	mov	r3, r0
 802b36c:	2b00      	cmp	r3, #0
 802b36e:	d104      	bne.n	802b37a <ymodem_receive+0x1fc>
                                        serial_put_byte(handle, ACK);
 802b370:	2106      	movs	r1, #6
 802b372:	6878      	ldr	r0, [r7, #4]
 802b374:	f7ff fdb1 	bl	802aeda <serial_put_byte>
 802b378:	e00a      	b.n	802b390 <ymodem_receive+0x212>
                                        serial_put_byte(handle, CA);
 802b37a:	2118      	movs	r1, #24
 802b37c:	6878      	ldr	r0, [r7, #4]
 802b37e:	f7ff fdac 	bl	802aeda <serial_put_byte>
                                        serial_put_byte(handle, CA);
 802b382:	2118      	movs	r1, #24
 802b384:	6878      	ldr	r0, [r7, #4]
 802b386:	f7ff fda8 	bl	802aeda <serial_put_byte>
                                        result = COM_DATA;
 802b38a:	2304      	movs	r3, #4
 802b38c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                packets_received++;
 802b390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802b392:	3301      	adds	r3, #1
 802b394:	633b      	str	r3, [r7, #48]	@ 0x30
                                session_begin = 1;
 802b396:	2301      	movs	r3, #1
 802b398:	637b      	str	r3, [r7, #52]	@ 0x34
                            break;
 802b39a:	bf00      	nop
                    }
                    break;
 802b39c:	e025      	b.n	802b3ea <ymodem_receive+0x26c>
                case COM_ABORT: /* Abort actually */
                    serial_put_byte(handle, CA);
 802b39e:	2118      	movs	r1, #24
 802b3a0:	6878      	ldr	r0, [r7, #4]
 802b3a2:	f7ff fd9a 	bl	802aeda <serial_put_byte>
                    serial_put_byte(handle, CA);
 802b3a6:	2118      	movs	r1, #24
 802b3a8:	6878      	ldr	r0, [r7, #4]
 802b3aa:	f7ff fd96 	bl	802aeda <serial_put_byte>
                    result = COM_ABORT;
 802b3ae:	2302      	movs	r3, #2
 802b3b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    break;
 802b3b4:	e019      	b.n	802b3ea <ymodem_receive+0x26c>
                default:
                    if (session_begin > 0) {
 802b3b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b3b8:	2b00      	cmp	r3, #0
 802b3ba:	d002      	beq.n	802b3c2 <ymodem_receive+0x244>
                        errors++;
 802b3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802b3be:	3301      	adds	r3, #1
 802b3c0:	63bb      	str	r3, [r7, #56]	@ 0x38
                    }
                    if (errors > MAX_ERRORS) {
 802b3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802b3c4:	2b05      	cmp	r3, #5
 802b3c6:	d90b      	bls.n	802b3e0 <ymodem_receive+0x262>
                        /* Abort communication */
                        serial_put_byte(handle, CA);
 802b3c8:	2118      	movs	r1, #24
 802b3ca:	6878      	ldr	r0, [r7, #4]
 802b3cc:	f7ff fd85 	bl	802aeda <serial_put_byte>
                        serial_put_byte(handle, CA);
 802b3d0:	2118      	movs	r1, #24
 802b3d2:	6878      	ldr	r0, [r7, #4]
 802b3d4:	f7ff fd81 	bl	802aeda <serial_put_byte>
                        result = COM_ERROR;
 802b3d8:	2301      	movs	r3, #1
 802b3da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    } else {
                        serial_put_byte(handle, CRC16); /* Ask for a packet */
                    }
                    break;
 802b3de:	e003      	b.n	802b3e8 <ymodem_receive+0x26a>
                        serial_put_byte(handle, CRC16); /* Ask for a packet */
 802b3e0:	2143      	movs	r1, #67	@ 0x43
 802b3e2:	6878      	ldr	r0, [r7, #4]
 802b3e4:	f7ff fd79 	bl	802aeda <serial_put_byte>
                    break;
 802b3e8:	bf00      	nop
        while ((file_done == 0) && (result == COM_OK)) {
 802b3ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802b3ec:	2b00      	cmp	r3, #0
 802b3ee:	d104      	bne.n	802b3fa <ymodem_receive+0x27c>
 802b3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802b3f4:	2b00      	cmp	r3, #0
 802b3f6:	f43f aef1 	beq.w	802b1dc <ymodem_receive+0x5e>
    while ((session_done == 0) && (result == COM_OK)) {
 802b3fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802b3fc:	2b00      	cmp	r3, #0
 802b3fe:	d104      	bne.n	802b40a <ymodem_receive+0x28c>
 802b400:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802b404:	2b00      	cmp	r3, #0
 802b406:	f43f aee4 	beq.w	802b1d2 <ymodem_receive+0x54>
            }
        }
    }
    return result;
 802b40a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 802b40e:	4618      	mov	r0, r3
 802b410:	3748      	adds	r7, #72	@ 0x48
 802b412:	46bd      	mov	sp, r7
 802b414:	bd80      	pop	{r7, pc}
	...

0802b418 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 802b418:	b580      	push	{r7, lr}
 802b41a:	b082      	sub	sp, #8
 802b41c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 802b41e:	2300      	movs	r3, #0
 802b420:	607b      	str	r3, [r7, #4]
 802b422:	4b10      	ldr	r3, [pc, #64]	@ (802b464 <MX_DMA_Init+0x4c>)
 802b424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b426:	4a0f      	ldr	r2, [pc, #60]	@ (802b464 <MX_DMA_Init+0x4c>)
 802b428:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 802b42c:	6313      	str	r3, [r2, #48]	@ 0x30
 802b42e:	4b0d      	ldr	r3, [pc, #52]	@ (802b464 <MX_DMA_Init+0x4c>)
 802b430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b432:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 802b436:	607b      	str	r3, [r7, #4]
 802b438:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 802b43a:	2200      	movs	r2, #0
 802b43c:	2100      	movs	r1, #0
 802b43e:	2010      	movs	r0, #16
 802b440:	f001 f903 	bl	802c64a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 802b444:	2010      	movs	r0, #16
 802b446:	f001 f91c 	bl	802c682 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 802b44a:	2200      	movs	r2, #0
 802b44c:	2100      	movs	r1, #0
 802b44e:	2011      	movs	r0, #17
 802b450:	f001 f8fb 	bl	802c64a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 802b454:	2011      	movs	r0, #17
 802b456:	f001 f914 	bl	802c682 <HAL_NVIC_EnableIRQ>

}
 802b45a:	bf00      	nop
 802b45c:	3708      	adds	r7, #8
 802b45e:	46bd      	mov	sp, r7
 802b460:	bd80      	pop	{r7, pc}
 802b462:	bf00      	nop
 802b464:	40023800 	.word	0x40023800

0802b468 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 802b468:	b580      	push	{r7, lr}
 802b46a:	b08a      	sub	sp, #40	@ 0x28
 802b46c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802b46e:	f107 0314 	add.w	r3, r7, #20
 802b472:	2200      	movs	r2, #0
 802b474:	601a      	str	r2, [r3, #0]
 802b476:	605a      	str	r2, [r3, #4]
 802b478:	609a      	str	r2, [r3, #8]
 802b47a:	60da      	str	r2, [r3, #12]
 802b47c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802b47e:	2300      	movs	r3, #0
 802b480:	613b      	str	r3, [r7, #16]
 802b482:	4b3e      	ldr	r3, [pc, #248]	@ (802b57c <MX_GPIO_Init+0x114>)
 802b484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b486:	4a3d      	ldr	r2, [pc, #244]	@ (802b57c <MX_GPIO_Init+0x114>)
 802b488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802b48c:	6313      	str	r3, [r2, #48]	@ 0x30
 802b48e:	4b3b      	ldr	r3, [pc, #236]	@ (802b57c <MX_GPIO_Init+0x114>)
 802b490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802b496:	613b      	str	r3, [r7, #16]
 802b498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802b49a:	2300      	movs	r3, #0
 802b49c:	60fb      	str	r3, [r7, #12]
 802b49e:	4b37      	ldr	r3, [pc, #220]	@ (802b57c <MX_GPIO_Init+0x114>)
 802b4a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b4a2:	4a36      	ldr	r2, [pc, #216]	@ (802b57c <MX_GPIO_Init+0x114>)
 802b4a4:	f043 0301 	orr.w	r3, r3, #1
 802b4a8:	6313      	str	r3, [r2, #48]	@ 0x30
 802b4aa:	4b34      	ldr	r3, [pc, #208]	@ (802b57c <MX_GPIO_Init+0x114>)
 802b4ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b4ae:	f003 0301 	and.w	r3, r3, #1
 802b4b2:	60fb      	str	r3, [r7, #12]
 802b4b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802b4b6:	2300      	movs	r3, #0
 802b4b8:	60bb      	str	r3, [r7, #8]
 802b4ba:	4b30      	ldr	r3, [pc, #192]	@ (802b57c <MX_GPIO_Init+0x114>)
 802b4bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b4be:	4a2f      	ldr	r2, [pc, #188]	@ (802b57c <MX_GPIO_Init+0x114>)
 802b4c0:	f043 0304 	orr.w	r3, r3, #4
 802b4c4:	6313      	str	r3, [r2, #48]	@ 0x30
 802b4c6:	4b2d      	ldr	r3, [pc, #180]	@ (802b57c <MX_GPIO_Init+0x114>)
 802b4c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b4ca:	f003 0304 	and.w	r3, r3, #4
 802b4ce:	60bb      	str	r3, [r7, #8]
 802b4d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802b4d2:	2300      	movs	r3, #0
 802b4d4:	607b      	str	r3, [r7, #4]
 802b4d6:	4b29      	ldr	r3, [pc, #164]	@ (802b57c <MX_GPIO_Init+0x114>)
 802b4d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b4da:	4a28      	ldr	r2, [pc, #160]	@ (802b57c <MX_GPIO_Init+0x114>)
 802b4dc:	f043 0308 	orr.w	r3, r3, #8
 802b4e0:	6313      	str	r3, [r2, #48]	@ 0x30
 802b4e2:	4b26      	ldr	r3, [pc, #152]	@ (802b57c <MX_GPIO_Init+0x114>)
 802b4e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b4e6:	f003 0308 	and.w	r3, r3, #8
 802b4ea:	607b      	str	r3, [r7, #4]
 802b4ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802b4ee:	2300      	movs	r3, #0
 802b4f0:	603b      	str	r3, [r7, #0]
 802b4f2:	4b22      	ldr	r3, [pc, #136]	@ (802b57c <MX_GPIO_Init+0x114>)
 802b4f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b4f6:	4a21      	ldr	r2, [pc, #132]	@ (802b57c <MX_GPIO_Init+0x114>)
 802b4f8:	f043 0302 	orr.w	r3, r3, #2
 802b4fc:	6313      	str	r3, [r2, #48]	@ 0x30
 802b4fe:	4b1f      	ldr	r3, [pc, #124]	@ (802b57c <MX_GPIO_Init+0x114>)
 802b500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b502:	f003 0302 	and.w	r3, r3, #2
 802b506:	603b      	str	r3, [r7, #0]
 802b508:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 802b50a:	2200      	movs	r2, #0
 802b50c:	2110      	movs	r1, #16
 802b50e:	481c      	ldr	r0, [pc, #112]	@ (802b580 <MX_GPIO_Init+0x118>)
 802b510:	f002 f8d6 	bl	802d6c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 802b514:	2200      	movs	r2, #0
 802b516:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 802b51a:	481a      	ldr	r0, [pc, #104]	@ (802b584 <MX_GPIO_Init+0x11c>)
 802b51c:	f002 f8d0 	bl	802d6c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 802b520:	2301      	movs	r3, #1
 802b522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802b524:	2300      	movs	r3, #0
 802b526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b528:	2300      	movs	r3, #0
 802b52a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 802b52c:	f107 0314 	add.w	r3, r7, #20
 802b530:	4619      	mov	r1, r3
 802b532:	4815      	ldr	r0, [pc, #84]	@ (802b588 <MX_GPIO_Init+0x120>)
 802b534:	f001 ff10 	bl	802d358 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 802b538:	2310      	movs	r3, #16
 802b53a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802b53c:	2301      	movs	r3, #1
 802b53e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b540:	2300      	movs	r3, #0
 802b542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802b544:	2300      	movs	r3, #0
 802b546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 802b548:	f107 0314 	add.w	r3, r7, #20
 802b54c:	4619      	mov	r1, r3
 802b54e:	480c      	ldr	r0, [pc, #48]	@ (802b580 <MX_GPIO_Init+0x118>)
 802b550:	f001 ff02 	bl	802d358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 802b554:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 802b558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802b55a:	2301      	movs	r3, #1
 802b55c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b55e:	2300      	movs	r3, #0
 802b560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802b562:	2300      	movs	r3, #0
 802b564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802b566:	f107 0314 	add.w	r3, r7, #20
 802b56a:	4619      	mov	r1, r3
 802b56c:	4805      	ldr	r0, [pc, #20]	@ (802b584 <MX_GPIO_Init+0x11c>)
 802b56e:	f001 fef3 	bl	802d358 <HAL_GPIO_Init>

}
 802b572:	bf00      	nop
 802b574:	3728      	adds	r7, #40	@ 0x28
 802b576:	46bd      	mov	sp, r7
 802b578:	bd80      	pop	{r7, pc}
 802b57a:	bf00      	nop
 802b57c:	40023800 	.word	0x40023800
 802b580:	40020800 	.word	0x40020800
 802b584:	40020c00 	.word	0x40020c00
 802b588:	40020000 	.word	0x40020000

0802b58c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 802b58c:	b480      	push	{r7}
 802b58e:	b083      	sub	sp, #12
 802b590:	af00      	add	r7, sp, #0
 802b592:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 802b594:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 802b598:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 802b59c:	f003 0301 	and.w	r3, r3, #1
 802b5a0:	2b00      	cmp	r3, #0
 802b5a2:	d013      	beq.n	802b5cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 802b5a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 802b5a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 802b5ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 802b5b0:	2b00      	cmp	r3, #0
 802b5b2:	d00b      	beq.n	802b5cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 802b5b4:	e000      	b.n	802b5b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 802b5b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 802b5b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 802b5bc:	681b      	ldr	r3, [r3, #0]
 802b5be:	2b00      	cmp	r3, #0
 802b5c0:	d0f9      	beq.n	802b5b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 802b5c2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 802b5c6:	687a      	ldr	r2, [r7, #4]
 802b5c8:	b2d2      	uxtb	r2, r2
 802b5ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 802b5cc:	687b      	ldr	r3, [r7, #4]
}
 802b5ce:	4618      	mov	r0, r3
 802b5d0:	370c      	adds	r7, #12
 802b5d2:	46bd      	mov	sp, r7
 802b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b5d8:	4770      	bx	lr
	...

0802b5dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 802b5dc:	b5b0      	push	{r4, r5, r7, lr}
 802b5de:	b08e      	sub	sp, #56	@ 0x38
 802b5e0:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
	error_t error;
	cboot_error_t cerror;
	COM_StatusTypeDef result;
	w25q_driver_config_t config = {
 802b5e2:	4b3b      	ldr	r3, [pc, #236]	@ (802b6d0 <main+0xf4>)
 802b5e4:	1d3c      	adds	r4, r7, #4
 802b5e6:	461d      	mov	r5, r3
 802b5e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802b5ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802b5ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 802b5f0:	e884 0003 	stmia.w	r4, {r0, r1}
 802b5f4:	2300      	movs	r3, #0
 802b5f6:	61fb      	str	r3, [r7, #28]
 802b5f8:	f241 3388 	movw	r3, #5000	@ 0x1388
 802b5fc:	623b      	str	r3, [r7, #32]
 802b5fe:	2301      	movs	r3, #1
 802b600:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 802b604:	f000 feb0 	bl	802c368 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 802b608:	f000 f9ee 	bl	802b9e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 802b60c:	f7ff ff2c 	bl	802b468 <MX_GPIO_Init>
	MX_DMA_Init();
 802b610:	f7ff ff02 	bl	802b418 <MX_DMA_Init>
	MX_RNG_Init();
 802b614:	f000 fb42 	bl	802bc9c <MX_RNG_Init>
	MX_USART2_UART_Init();
 802b618:	f000 fd68 	bl	802c0ec <MX_USART2_UART_Init>
	MX_SPI1_Init();
 802b61c:	f000 fb8e 	bl	802bd3c <MX_SPI1_Init>
	MX_USART1_UART_Init();
 802b620:	f000 fd3a 	bl	802c098 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	stm32_log_init(NULL);
 802b624:	2000      	movs	r0, #0
 802b626:	f7fe fd3d 	bl	802a0a4 <stm32_log_init>


	for(uint8_t i = 0; i < 15; i++)
 802b62a:	2300      	movs	r3, #0
 802b62c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802b630:	e00d      	b.n	802b64e <main+0x72>
	{
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 802b632:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 802b636:	4827      	ldr	r0, [pc, #156]	@ (802b6d4 <main+0xf8>)
 802b638:	f002 f85b 	bl	802d6f2 <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 802b63c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 802b640:	f000 ff04 	bl	802c44c <HAL_Delay>
	for(uint8_t i = 0; i < 15; i++)
 802b644:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802b648:	3301      	adds	r3, #1
 802b64a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802b64e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802b652:	2b0e      	cmp	r3, #14
 802b654:	d9ed      	bls.n	802b632 <main+0x56>
	}
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 802b656:	2201      	movs	r2, #1
 802b658:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 802b65c:	481d      	ldr	r0, [pc, #116]	@ (802b6d4 <main+0xf8>)
 802b65e:	f002 f82f 	bl	802d6c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 802b662:	2201      	movs	r2, #1
 802b664:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 802b668:	481a      	ldr	r0, [pc, #104]	@ (802b6d4 <main+0xf8>)
 802b66a:	f002 f829 	bl	802d6c0 <HAL_GPIO_WritePin>
	STM32_LOGI(TAG, "user application started...\r\n!");
 802b66e:	4b1a      	ldr	r3, [pc, #104]	@ (802b6d8 <main+0xfc>)
 802b670:	681c      	ldr	r4, [r3, #0]
 802b672:	f7fe fd31 	bl	802a0d8 <stm32_log_timestamp>
 802b676:	4602      	mov	r2, r0
 802b678:	4b17      	ldr	r3, [pc, #92]	@ (802b6d8 <main+0xfc>)
 802b67a:	681b      	ldr	r3, [r3, #0]
 802b67c:	9300      	str	r3, [sp, #0]
 802b67e:	4613      	mov	r3, r2
 802b680:	4a16      	ldr	r2, [pc, #88]	@ (802b6dc <main+0x100>)
 802b682:	4621      	mov	r1, r4
 802b684:	2003      	movs	r0, #3
 802b686:	f7fe fd2f 	bl	802a0e8 <stm32_log_write>


	//external flash driver init
	w25qFlashSetConfig(&config);
 802b68a:	1d3b      	adds	r3, r7, #4
 802b68c:	4618      	mov	r0, r3
 802b68e:	f7f6 f835 	bl	80216fc <w25qFlashSetConfig>
	//	// Initialize YMODEM with user I/O functions
	ymodem_init(&ymodem, ymodem_uart_read, ymodem_uart_write);
 802b692:	4a13      	ldr	r2, [pc, #76]	@ (802b6e0 <main+0x104>)
 802b694:	4913      	ldr	r1, [pc, #76]	@ (802b6e4 <main+0x108>)
 802b696:	4814      	ldr	r0, [pc, #80]	@ (802b6e8 <main+0x10c>)
 802b698:	f7ff fbf4 	bl	802ae84 <ymodem_init>

	if(resGetData("/keys/rsa_public_key.pem", &pemUpdtSignPublicKey, &pemUpdtSignPublicKeyLen) != NO_ERROR)
 802b69c:	4a13      	ldr	r2, [pc, #76]	@ (802b6ec <main+0x110>)
 802b69e:	4914      	ldr	r1, [pc, #80]	@ (802b6f0 <main+0x114>)
 802b6a0:	4814      	ldr	r0, [pc, #80]	@ (802b6f4 <main+0x118>)
 802b6a2:	f7f5 febf 	bl	8021424 <resGetData>
 802b6a6:	4603      	mov	r3, r0
 802b6a8:	2b00      	cmp	r3, #0
 802b6aa:	d027      	beq.n	802b6fc <main+0x120>
	{
		STM32_LOGI(TAG, "public key not found!\r\n");
 802b6ac:	4b0a      	ldr	r3, [pc, #40]	@ (802b6d8 <main+0xfc>)
 802b6ae:	681c      	ldr	r4, [r3, #0]
 802b6b0:	f7fe fd12 	bl	802a0d8 <stm32_log_timestamp>
 802b6b4:	4602      	mov	r2, r0
 802b6b6:	4b08      	ldr	r3, [pc, #32]	@ (802b6d8 <main+0xfc>)
 802b6b8:	681b      	ldr	r3, [r3, #0]
 802b6ba:	9300      	str	r3, [sp, #0]
 802b6bc:	4613      	mov	r3, r2
 802b6be:	4a0e      	ldr	r2, [pc, #56]	@ (802b6f8 <main+0x11c>)
 802b6c0:	4621      	mov	r1, r4
 802b6c2:	2003      	movs	r0, #3
 802b6c4:	f7fe fd10 	bl	802a0e8 <stm32_log_write>

		Error_Handler();
 802b6c8:	f000 fae1 	bl	802bc8e <Error_Handler>
 802b6cc:	e024      	b.n	802b718 <main+0x13c>
 802b6ce:	bf00      	nop
 802b6d0:	2000003c 	.word	0x2000003c
 802b6d4:	40020c00 	.word	0x40020c00
 802b6d8:	20000038 	.word	0x20000038
 802b6dc:	0803174c 	.word	0x0803174c
 802b6e0:	0802bb25 	.word	0x0802bb25
 802b6e4:	0802bafd 	.word	0x0802bafd
 802b6e8:	200001ac 	.word	0x200001ac
 802b6ec:	20000608 	.word	0x20000608
 802b6f0:	20000604 	.word	0x20000604
 802b6f4:	08031778 	.word	0x08031778
 802b6f8:	08031794 	.word	0x08031794
	}
	else
	{
		STM32_LOGI(TAG, "Public key found!");
 802b6fc:	4b9f      	ldr	r3, [pc, #636]	@ (802b97c <main+0x3a0>)
 802b6fe:	681c      	ldr	r4, [r3, #0]
 802b700:	f7fe fcea 	bl	802a0d8 <stm32_log_timestamp>
 802b704:	4602      	mov	r2, r0
 802b706:	4b9d      	ldr	r3, [pc, #628]	@ (802b97c <main+0x3a0>)
 802b708:	681b      	ldr	r3, [r3, #0]
 802b70a:	9300      	str	r3, [sp, #0]
 802b70c:	4613      	mov	r3, r2
 802b70e:	4a9c      	ldr	r2, [pc, #624]	@ (802b980 <main+0x3a4>)
 802b710:	4621      	mov	r1, r4
 802b712:	2003      	movs	r0, #3
 802b714:	f7fe fce8 	bl	802a0e8 <stm32_log_write>
	}
	//->criptografia
	error = stm32f4xxCryptoInit();
 802b718:	f7fa f926 	bl	8025968 <stm32f4xxCryptoInit>
 802b71c:	4603      	mov	r3, r0
 802b71e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	if(error)
 802b720:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 802b722:	2b00      	cmp	r3, #0
 802b724:	d00f      	beq.n	802b746 <main+0x16a>
	{
		STM32_LOGI(TAG, "failed hardware crypto!");
 802b726:	4b95      	ldr	r3, [pc, #596]	@ (802b97c <main+0x3a0>)
 802b728:	681c      	ldr	r4, [r3, #0]
 802b72a:	f7fe fcd5 	bl	802a0d8 <stm32_log_timestamp>
 802b72e:	4602      	mov	r2, r0
 802b730:	4b92      	ldr	r3, [pc, #584]	@ (802b97c <main+0x3a0>)
 802b732:	681b      	ldr	r3, [r3, #0]
 802b734:	9300      	str	r3, [sp, #0]
 802b736:	4613      	mov	r3, r2
 802b738:	4a92      	ldr	r2, [pc, #584]	@ (802b984 <main+0x3a8>)
 802b73a:	4621      	mov	r1, r4
 802b73c:	2003      	movs	r0, #3
 802b73e:	f7fe fcd3 	bl	802a0e8 <stm32_log_write>
		Error_Handler();
 802b742:	f000 faa4 	bl	802bc8e <Error_Handler>
	}
	//generador de numeros aleatorios
	error = trngInit();
 802b746:	f7fa f92b 	bl	80259a0 <trngInit>
 802b74a:	4603      	mov	r3, r0
 802b74c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	if(error)
 802b74e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 802b750:	2b00      	cmp	r3, #0
 802b752:	d00f      	beq.n	802b774 <main+0x198>
	{
		STM32_LOGI(TAG, "failed trng init");
 802b754:	4b89      	ldr	r3, [pc, #548]	@ (802b97c <main+0x3a0>)
 802b756:	681c      	ldr	r4, [r3, #0]
 802b758:	f7fe fcbe 	bl	802a0d8 <stm32_log_timestamp>
 802b75c:	4602      	mov	r2, r0
 802b75e:	4b87      	ldr	r3, [pc, #540]	@ (802b97c <main+0x3a0>)
 802b760:	681b      	ldr	r3, [r3, #0]
 802b762:	9300      	str	r3, [sp, #0]
 802b764:	4613      	mov	r3, r2
 802b766:	4a88      	ldr	r2, [pc, #544]	@ (802b988 <main+0x3ac>)
 802b768:	4621      	mov	r1, r4
 802b76a:	2003      	movs	r0, #3
 802b76c:	f7fe fcbc 	bl	802a0e8 <stm32_log_write>
		Error_Handler();
 802b770:	f000 fa8d 	bl	802bc8e <Error_Handler>
	}

	//User update settings security configuration
	updateSettings.imageInCrypto.verifySettings.verifyMethod    = VERIFY_METHOD_SIGNATURE;
 802b774:	4b85      	ldr	r3, [pc, #532]	@ (802b98c <main+0x3b0>)
 802b776:	2202      	movs	r2, #2
 802b778:	741a      	strb	r2, [r3, #16]
	updateSettings.imageInCrypto.verifySettings.signAlgo        = VERIFY_SIGN_RSA;
 802b77a:	4b84      	ldr	r3, [pc, #528]	@ (802b98c <main+0x3b0>)
 802b77c:	2201      	movs	r2, #1
 802b77e:	761a      	strb	r2, [r3, #24]
	updateSettings.imageInCrypto.verifySettings.signHashAlgo    = SHA256_HASH_ALGO;
 802b780:	4b82      	ldr	r3, [pc, #520]	@ (802b98c <main+0x3b0>)
 802b782:	4a83      	ldr	r2, [pc, #524]	@ (802b990 <main+0x3b4>)
 802b784:	61da      	str	r2, [r3, #28]
	updateSettings.imageInCrypto.verifySettings.signKey         = (const char_t*) pemUpdtSignPublicKey;
 802b786:	4b83      	ldr	r3, [pc, #524]	@ (802b994 <main+0x3b8>)
 802b788:	681b      	ldr	r3, [r3, #0]
 802b78a:	4a80      	ldr	r2, [pc, #512]	@ (802b98c <main+0x3b0>)
 802b78c:	6213      	str	r3, [r2, #32]
	updateSettings.imageInCrypto.verifySettings.signKeyLen      = pemUpdtSignPublicKeyLen;
 802b78e:	4b82      	ldr	r3, [pc, #520]	@ (802b998 <main+0x3bc>)
 802b790:	681b      	ldr	r3, [r3, #0]
 802b792:	4a7e      	ldr	r2, [pc, #504]	@ (802b98c <main+0x3b0>)
 802b794:	6253      	str	r3, [r2, #36]	@ 0x24
	updateSettings.imageInCrypto.cipherAlgo                     = AES_CIPHER_ALGO;
 802b796:	4b7d      	ldr	r3, [pc, #500]	@ (802b98c <main+0x3b0>)
 802b798:	4a80      	ldr	r2, [pc, #512]	@ (802b99c <main+0x3c0>)
 802b79a:	601a      	str	r2, [r3, #0]
	updateSettings.imageInCrypto.cipherMode                     = CIPHER_MODE_CBC;
 802b79c:	4b7b      	ldr	r3, [pc, #492]	@ (802b98c <main+0x3b0>)
 802b79e:	2203      	movs	r2, #3
 802b7a0:	711a      	strb	r2, [r3, #4]
	updateSettings.imageInCrypto.cipherKey                      = (const uint8_t *)"aa3ff7d43cc015682c7dfd00de9379e7";
 802b7a2:	4b7a      	ldr	r3, [pc, #488]	@ (802b98c <main+0x3b0>)
 802b7a4:	4a7e      	ldr	r2, [pc, #504]	@ (802b9a0 <main+0x3c4>)
 802b7a6:	609a      	str	r2, [r3, #8]
	updateSettings.imageInCrypto.cipherKeyLen                   = 32;
 802b7a8:	4b78      	ldr	r3, [pc, #480]	@ (802b98c <main+0x3b0>)
 802b7aa:	2220      	movs	r2, #32
 802b7ac:	60da      	str	r2, [r3, #12]

	//User update settings primary memory configuration
	updateSettings.memories[0].memoryRole 			   = MEMORY_ROLE_PRIMARY;
 802b7ae:	4b77      	ldr	r3, [pc, #476]	@ (802b98c <main+0x3b0>)
 802b7b0:	2200      	movs	r2, #0
 802b7b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	updateSettings.memories[0].memoryType 			   = MEMORY_TYPE_FLASH;
 802b7b6:	4b75      	ldr	r3, [pc, #468]	@ (802b98c <main+0x3b0>)
 802b7b8:	2200      	movs	r2, #0
 802b7ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	updateSettings.memories[0].driver     			   = &stm32f4xxFlashDriver;
 802b7be:	4b73      	ldr	r3, [pc, #460]	@ (802b98c <main+0x3b0>)
 802b7c0:	4a78      	ldr	r2, [pc, #480]	@ (802b9a4 <main+0x3c8>)
 802b7c2:	67da      	str	r2, [r3, #124]	@ 0x7c
	updateSettings.memories[0].nbSlots    			   = 1;
 802b7c4:	4b71      	ldr	r3, [pc, #452]	@ (802b98c <main+0x3b0>)
 802b7c6:	2201      	movs	r2, #1
 802b7c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	//User update settings primary memory slot 0 configuration
	updateSettings.memories[0].slots[0].type 		   = SLOT_TYPE_DIRECT;
 802b7cc:	4b6f      	ldr	r3, [pc, #444]	@ (802b98c <main+0x3b0>)
 802b7ce:	2201      	movs	r2, #1
 802b7d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	updateSettings.memories[0].slots[0].cType 		= SLOT_CONTENT_APP;
 802b7d4:	4b6d      	ldr	r3, [pc, #436]	@ (802b98c <main+0x3b0>)
 802b7d6:	2201      	movs	r2, #1
 802b7d8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
	updateSettings.memories[0].slots[0].memParent 	= &updateSettings.memories[0];
 802b7dc:	4b6b      	ldr	r3, [pc, #428]	@ (802b98c <main+0x3b0>)
 802b7de:	4a72      	ldr	r2, [pc, #456]	@ (802b9a8 <main+0x3cc>)
 802b7e0:	65da      	str	r2, [r3, #92]	@ 0x5c
	updateSettings.memories[0].slots[0].addr 		   = 0x08020000;
 802b7e2:	4b6a      	ldr	r3, [pc, #424]	@ (802b98c <main+0x3b0>)
 802b7e4:	4a71      	ldr	r2, [pc, #452]	@ (802b9ac <main+0x3d0>)
 802b7e6:	661a      	str	r2, [r3, #96]	@ 0x60
	updateSettings.memories[0].slots[0].size 		   = 0xE0000; //128x3 = 384kb->1024KB -128kb
 802b7e8:	4b68      	ldr	r3, [pc, #416]	@ (802b98c <main+0x3b0>)
 802b7ea:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 802b7ee:	665a      	str	r2, [r3, #100]	@ 0x64
	//	updateSettings.memories[0].slots[1].addr 		   = 0x08080000;
	//	updateSettings.memories[0].slots[1].size 		   = 0x60000;	//128x3 = 384kb

	//external memory
	//User update settings secondary memory configuration
	updateSettings.memories[1].memoryRole 			   = MEMORY_ROLE_SECONDARY;
 802b7f0:	4b66      	ldr	r3, [pc, #408]	@ (802b98c <main+0x3b0>)
 802b7f2:	2201      	movs	r2, #1
 802b7f4:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
	updateSettings.memories[1].memoryType 			   = MEMORY_TYPE_FLASH;
 802b7f8:	4b64      	ldr	r3, [pc, #400]	@ (802b98c <main+0x3b0>)
 802b7fa:	2200      	movs	r2, #0
 802b7fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	updateSettings.memories[1].driver 				   = &w25qFlashDriver;
 802b800:	4b62      	ldr	r3, [pc, #392]	@ (802b98c <main+0x3b0>)
 802b802:	4a6b      	ldr	r2, [pc, #428]	@ (802b9b0 <main+0x3d4>)
 802b804:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	updateSettings.memories[1].nbSlots 				   = 1;
 802b808:	4b60      	ldr	r3, [pc, #384]	@ (802b98c <main+0x3b0>)
 802b80a:	2201      	movs	r2, #1
 802b80c:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

	//User update settings secondary memory slot 0 configuration
	updateSettings.memories[1].slots[0].type 		   = SLOT_TYPE_DIRECT;
 802b810:	4b5e      	ldr	r3, [pc, #376]	@ (802b98c <main+0x3b0>)
 802b812:	2201      	movs	r2, #1
 802b814:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	updateSettings.memories[1].slots[0].cType 		= SLOT_CONTENT_APP | SLOT_CONTENT_BACKUP;
 802b818:	4b5c      	ldr	r3, [pc, #368]	@ (802b98c <main+0x3b0>)
 802b81a:	2205      	movs	r2, #5
 802b81c:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
	updateSettings.memories[1].slots[0].memParent 	= &updateSettings.memories[1];
 802b820:	4b5a      	ldr	r3, [pc, #360]	@ (802b98c <main+0x3b0>)
 802b822:	4a64      	ldr	r2, [pc, #400]	@ (802b9b4 <main+0x3d8>)
 802b824:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	updateSettings.memories[1].slots[0].addr 		   = 0x00000000;
 802b828:	4b58      	ldr	r3, [pc, #352]	@ (802b98c <main+0x3b0>)
 802b82a:	2200      	movs	r2, #0
 802b82c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	updateSettings.memories[1].slots[0].size 		   = 0x200000;
 802b830:	4b56      	ldr	r3, [pc, #344]	@ (802b98c <main+0x3b0>)
 802b832:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 802b836:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98


	if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin))
 802b83a:	2101      	movs	r1, #1
 802b83c:	485e      	ldr	r0, [pc, #376]	@ (802b9b8 <main+0x3dc>)
 802b83e:	f001 ff27 	bl	802d690 <HAL_GPIO_ReadPin>
 802b842:	4603      	mov	r3, r0
 802b844:	2b00      	cmp	r3, #0
 802b846:	d07f      	beq.n	802b948 <main+0x36c>
	{
		STM32_LOGI(TAG, "Receiving firmware update image...\r\n");
 802b848:	4b4c      	ldr	r3, [pc, #304]	@ (802b97c <main+0x3a0>)
 802b84a:	681c      	ldr	r4, [r3, #0]
 802b84c:	f7fe fc44 	bl	802a0d8 <stm32_log_timestamp>
 802b850:	4602      	mov	r2, r0
 802b852:	4b4a      	ldr	r3, [pc, #296]	@ (802b97c <main+0x3a0>)
 802b854:	681b      	ldr	r3, [r3, #0]
 802b856:	9300      	str	r3, [sp, #0]
 802b858:	4613      	mov	r3, r2
 802b85a:	4a58      	ldr	r2, [pc, #352]	@ (802b9bc <main+0x3e0>)
 802b85c:	4621      	mov	r1, r4
 802b85e:	2003      	movs	r0, #3
 802b860:	f7fe fc42 	bl	802a0e8 <stm32_log_write>
		//Initialize IAP update context
		cerror = updateInit(&updateContext, &updateSettings);
 802b864:	4949      	ldr	r1, [pc, #292]	@ (802b98c <main+0x3b0>)
 802b866:	4856      	ldr	r0, [pc, #344]	@ (802b9c0 <main+0x3e4>)
 802b868:	f7f8 fb06 	bl	8023e78 <updateInit>
 802b86c:	4603      	mov	r3, r0
 802b86e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

		if(cerror)
 802b872:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 802b876:	2b00      	cmp	r3, #0
 802b878:	d00f      	beq.n	802b89a <main+0x2be>
		{
			STM32_LOGI(TAG, "failed to initialize IAP\r\n"); // in application programming
 802b87a:	4b40      	ldr	r3, [pc, #256]	@ (802b97c <main+0x3a0>)
 802b87c:	681c      	ldr	r4, [r3, #0]
 802b87e:	f7fe fc2b 	bl	802a0d8 <stm32_log_timestamp>
 802b882:	4602      	mov	r2, r0
 802b884:	4b3d      	ldr	r3, [pc, #244]	@ (802b97c <main+0x3a0>)
 802b886:	681b      	ldr	r3, [r3, #0]
 802b888:	9300      	str	r3, [sp, #0]
 802b88a:	4613      	mov	r3, r2
 802b88c:	4a4d      	ldr	r2, [pc, #308]	@ (802b9c4 <main+0x3e8>)
 802b88e:	4621      	mov	r1, r4
 802b890:	2003      	movs	r0, #3
 802b892:	f7fe fc29 	bl	802a0e8 <stm32_log_write>
			Error_Handler();
 802b896:	f000 f9fa 	bl	802bc8e <Error_Handler>
		}
		result = ymodem_receive(&ymodem, ymodem_data_callback);
 802b89a:	494b      	ldr	r1, [pc, #300]	@ (802b9c8 <main+0x3ec>)
 802b89c:	484b      	ldr	r0, [pc, #300]	@ (802b9cc <main+0x3f0>)
 802b89e:	f7ff fc6e 	bl	802b17e <ymodem_receive>
 802b8a2:	4603      	mov	r3, r0
 802b8a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

		if(result == COM_OK)
 802b8a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 802b8ac:	2b00      	cmp	r3, #0
 802b8ae:	d13d      	bne.n	802b92c <main+0x350>
		{
			STM32_LOGI(TAG, "firmware receive ok!");
 802b8b0:	4b32      	ldr	r3, [pc, #200]	@ (802b97c <main+0x3a0>)
 802b8b2:	681c      	ldr	r4, [r3, #0]
 802b8b4:	f7fe fc10 	bl	802a0d8 <stm32_log_timestamp>
 802b8b8:	4602      	mov	r2, r0
 802b8ba:	4b30      	ldr	r3, [pc, #192]	@ (802b97c <main+0x3a0>)
 802b8bc:	681b      	ldr	r3, [r3, #0]
 802b8be:	9300      	str	r3, [sp, #0]
 802b8c0:	4613      	mov	r3, r2
 802b8c2:	4a43      	ldr	r2, [pc, #268]	@ (802b9d0 <main+0x3f4>)
 802b8c4:	4621      	mov	r1, r4
 802b8c6:	2003      	movs	r0, #3
 802b8c8:	f7fe fc0e 	bl	802a0e8 <stm32_log_write>

			cerror = updateFinalize(&updateContext);
 802b8cc:	483c      	ldr	r0, [pc, #240]	@ (802b9c0 <main+0x3e4>)
 802b8ce:	f7f8 fc05 	bl	80240dc <updateFinalize>
 802b8d2:	4603      	mov	r3, r0
 802b8d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

			if(cerror != CBOOT_NO_ERROR)
 802b8d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 802b8dc:	2b00      	cmp	r3, #0
 802b8de:	d00d      	beq.n	802b8fc <main+0x320>
			{
				STM32_LOGI(TAG, "failed to finalize firmware\r\n");
 802b8e0:	4b26      	ldr	r3, [pc, #152]	@ (802b97c <main+0x3a0>)
 802b8e2:	681c      	ldr	r4, [r3, #0]
 802b8e4:	f7fe fbf8 	bl	802a0d8 <stm32_log_timestamp>
 802b8e8:	4602      	mov	r2, r0
 802b8ea:	4b24      	ldr	r3, [pc, #144]	@ (802b97c <main+0x3a0>)
 802b8ec:	681b      	ldr	r3, [r3, #0]
 802b8ee:	9300      	str	r3, [sp, #0]
 802b8f0:	4613      	mov	r3, r2
 802b8f2:	4a38      	ldr	r2, [pc, #224]	@ (802b9d4 <main+0x3f8>)
 802b8f4:	4621      	mov	r1, r4
 802b8f6:	2003      	movs	r0, #3
 802b8f8:	f7fe fbf6 	bl	802a0e8 <stm32_log_write>
			}

			error = updateReboot(&updateContext);
 802b8fc:	4830      	ldr	r0, [pc, #192]	@ (802b9c0 <main+0x3e4>)
 802b8fe:	f7f8 fc9d 	bl	802423c <updateReboot>
 802b902:	4603      	mov	r3, r0
 802b904:	85bb      	strh	r3, [r7, #44]	@ 0x2c

			if(cerror != CBOOT_NO_ERROR)
 802b906:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 802b90a:	2b00      	cmp	r3, #0
 802b90c:	d01c      	beq.n	802b948 <main+0x36c>
			{
				STM32_LOGI(TAG, "failed reboot\r\n");
 802b90e:	4b1b      	ldr	r3, [pc, #108]	@ (802b97c <main+0x3a0>)
 802b910:	681c      	ldr	r4, [r3, #0]
 802b912:	f7fe fbe1 	bl	802a0d8 <stm32_log_timestamp>
 802b916:	4602      	mov	r2, r0
 802b918:	4b18      	ldr	r3, [pc, #96]	@ (802b97c <main+0x3a0>)
 802b91a:	681b      	ldr	r3, [r3, #0]
 802b91c:	9300      	str	r3, [sp, #0]
 802b91e:	4613      	mov	r3, r2
 802b920:	4a2d      	ldr	r2, [pc, #180]	@ (802b9d8 <main+0x3fc>)
 802b922:	4621      	mov	r1, r4
 802b924:	2003      	movs	r0, #3
 802b926:	f7fe fbdf 	bl	802a0e8 <stm32_log_write>
 802b92a:	e00d      	b.n	802b948 <main+0x36c>
			}
		}
		else
		{
			STM32_LOGI(TAG, "Fail receiving firmware");
 802b92c:	4b13      	ldr	r3, [pc, #76]	@ (802b97c <main+0x3a0>)
 802b92e:	681c      	ldr	r4, [r3, #0]
 802b930:	f7fe fbd2 	bl	802a0d8 <stm32_log_timestamp>
 802b934:	4602      	mov	r2, r0
 802b936:	4b11      	ldr	r3, [pc, #68]	@ (802b97c <main+0x3a0>)
 802b938:	681b      	ldr	r3, [r3, #0]
 802b93a:	9300      	str	r3, [sp, #0]
 802b93c:	4613      	mov	r3, r2
 802b93e:	4a27      	ldr	r2, [pc, #156]	@ (802b9dc <main+0x400>)
 802b940:	4621      	mov	r1, r4
 802b942:	2003      	movs	r0, #3
 802b944:	f7fe fbd0 	bl	802a0e8 <stm32_log_write>
		}
	}

	STM32_LOGI(TAG, "App enter to loop");
 802b948:	4b0c      	ldr	r3, [pc, #48]	@ (802b97c <main+0x3a0>)
 802b94a:	681c      	ldr	r4, [r3, #0]
 802b94c:	f7fe fbc4 	bl	802a0d8 <stm32_log_timestamp>
 802b950:	4602      	mov	r2, r0
 802b952:	4b0a      	ldr	r3, [pc, #40]	@ (802b97c <main+0x3a0>)
 802b954:	681b      	ldr	r3, [r3, #0]
 802b956:	9300      	str	r3, [sp, #0]
 802b958:	4613      	mov	r3, r2
 802b95a:	4a21      	ldr	r2, [pc, #132]	@ (802b9e0 <main+0x404>)
 802b95c:	4621      	mov	r1, r4
 802b95e:	2003      	movs	r0, #3
 802b960:	f7fe fbc2 	bl	802a0e8 <stm32_log_write>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		LED1_GPIO_Port->ODR ^= LED1_Pin;
 802b964:	4b1f      	ldr	r3, [pc, #124]	@ (802b9e4 <main+0x408>)
 802b966:	695b      	ldr	r3, [r3, #20]
 802b968:	4a1e      	ldr	r2, [pc, #120]	@ (802b9e4 <main+0x408>)
 802b96a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 802b96e:	6153      	str	r3, [r2, #20]
		HAL_Delay(1000);
 802b970:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 802b974:	f000 fd6a 	bl	802c44c <HAL_Delay>
		LED1_GPIO_Port->ODR ^= LED1_Pin;
 802b978:	bf00      	nop
 802b97a:	e7f3      	b.n	802b964 <main+0x388>
 802b97c:	20000038 	.word	0x20000038
 802b980:	080317bc 	.word	0x080317bc
 802b984:	080317dc 	.word	0x080317dc
 802b988:	08031804 	.word	0x08031804
 802b98c:	2000060c 	.word	0x2000060c
 802b990:	08032ff8 	.word	0x08032ff8
 802b994:	20000604 	.word	0x20000604
 802b998:	20000608 	.word	0x20000608
 802b99c:	08032dfc 	.word	0x08032dfc
 802b9a0:	08031824 	.word	0x08031824
 802b9a4:	080323a4 	.word	0x080323a4
 802b9a8:	2000065c 	.word	0x2000065c
 802b9ac:	08020000 	.word	0x08020000
 802b9b0:	08032324 	.word	0x08032324
 802b9b4:	20000690 	.word	0x20000690
 802b9b8:	40020000 	.word	0x40020000
 802b9bc:	08031848 	.word	0x08031848
 802b9c0:	200006c4 	.word	0x200006c4
 802b9c4:	0803187c 	.word	0x0803187c
 802b9c8:	0802bb4d 	.word	0x0802bb4d
 802b9cc:	200001ac 	.word	0x200001ac
 802b9d0:	080318a4 	.word	0x080318a4
 802b9d4:	080318c8 	.word	0x080318c8
 802b9d8:	080318f4 	.word	0x080318f4
 802b9dc:	08031914 	.word	0x08031914
 802b9e0:	0803193c 	.word	0x0803193c
 802b9e4:	40020c00 	.word	0x40020c00

0802b9e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 802b9e8:	b580      	push	{r7, lr}
 802b9ea:	b094      	sub	sp, #80	@ 0x50
 802b9ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802b9ee:	f107 0320 	add.w	r3, r7, #32
 802b9f2:	2230      	movs	r2, #48	@ 0x30
 802b9f4:	2100      	movs	r1, #0
 802b9f6:	4618      	mov	r0, r3
 802b9f8:	f004 fcd6 	bl	80303a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802b9fc:	f107 030c 	add.w	r3, r7, #12
 802ba00:	2200      	movs	r2, #0
 802ba02:	601a      	str	r2, [r3, #0]
 802ba04:	605a      	str	r2, [r3, #4]
 802ba06:	609a      	str	r2, [r3, #8]
 802ba08:	60da      	str	r2, [r3, #12]
 802ba0a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 802ba0c:	2300      	movs	r3, #0
 802ba0e:	60bb      	str	r3, [r7, #8]
 802ba10:	4b28      	ldr	r3, [pc, #160]	@ (802bab4 <SystemClock_Config+0xcc>)
 802ba12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802ba14:	4a27      	ldr	r2, [pc, #156]	@ (802bab4 <SystemClock_Config+0xcc>)
 802ba16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 802ba1a:	6413      	str	r3, [r2, #64]	@ 0x40
 802ba1c:	4b25      	ldr	r3, [pc, #148]	@ (802bab4 <SystemClock_Config+0xcc>)
 802ba1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802ba20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 802ba24:	60bb      	str	r3, [r7, #8]
 802ba26:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802ba28:	2300      	movs	r3, #0
 802ba2a:	607b      	str	r3, [r7, #4]
 802ba2c:	4b22      	ldr	r3, [pc, #136]	@ (802bab8 <SystemClock_Config+0xd0>)
 802ba2e:	681b      	ldr	r3, [r3, #0]
 802ba30:	4a21      	ldr	r2, [pc, #132]	@ (802bab8 <SystemClock_Config+0xd0>)
 802ba32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 802ba36:	6013      	str	r3, [r2, #0]
 802ba38:	4b1f      	ldr	r3, [pc, #124]	@ (802bab8 <SystemClock_Config+0xd0>)
 802ba3a:	681b      	ldr	r3, [r3, #0]
 802ba3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 802ba40:	607b      	str	r3, [r7, #4]
 802ba42:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 802ba44:	2301      	movs	r3, #1
 802ba46:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 802ba48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802ba4c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802ba4e:	2302      	movs	r3, #2
 802ba50:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 802ba52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 802ba56:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 802ba58:	2304      	movs	r3, #4
 802ba5a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 802ba5c:	23a8      	movs	r3, #168	@ 0xa8
 802ba5e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802ba60:	2302      	movs	r3, #2
 802ba62:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 802ba64:	2307      	movs	r3, #7
 802ba66:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802ba68:	f107 0320 	add.w	r3, r7, #32
 802ba6c:	4618      	mov	r0, r3
 802ba6e:	f001 fe5b 	bl	802d728 <HAL_RCC_OscConfig>
 802ba72:	4603      	mov	r3, r0
 802ba74:	2b00      	cmp	r3, #0
 802ba76:	d001      	beq.n	802ba7c <SystemClock_Config+0x94>
	{
		Error_Handler();
 802ba78:	f000 f909 	bl	802bc8e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802ba7c:	230f      	movs	r3, #15
 802ba7e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802ba80:	2302      	movs	r3, #2
 802ba82:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802ba84:	2300      	movs	r3, #0
 802ba86:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802ba88:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 802ba8c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 802ba8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802ba92:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 802ba94:	f107 030c 	add.w	r3, r7, #12
 802ba98:	2105      	movs	r1, #5
 802ba9a:	4618      	mov	r0, r3
 802ba9c:	f002 f8bc 	bl	802dc18 <HAL_RCC_ClockConfig>
 802baa0:	4603      	mov	r3, r0
 802baa2:	2b00      	cmp	r3, #0
 802baa4:	d001      	beq.n	802baaa <SystemClock_Config+0xc2>
	{
		Error_Handler();
 802baa6:	f000 f8f2 	bl	802bc8e <Error_Handler>
	}
}
 802baaa:	bf00      	nop
 802baac:	3750      	adds	r7, #80	@ 0x50
 802baae:	46bd      	mov	sp, r7
 802bab0:	bd80      	pop	{r7, pc}
 802bab2:	bf00      	nop
 802bab4:	40023800 	.word	0x40023800
 802bab8:	40007000 	.word	0x40007000

0802babc <stm32_log_out>:

/* USER CODE BEGIN 4 */
int stm32_log_out(int ch, lwprintf_t* p) {
 802babc:	b580      	push	{r7, lr}
 802babe:	b084      	sub	sp, #16
 802bac0:	af00      	add	r7, sp, #0
 802bac2:	6078      	str	r0, [r7, #4]
 802bac4:	6039      	str	r1, [r7, #0]

    uint8_t c = (uint8_t)ch;
 802bac6:	687b      	ldr	r3, [r7, #4]
 802bac8:	b2db      	uxtb	r3, r3
 802baca:	73fb      	strb	r3, [r7, #15]

    /* Don't print zero */
    if (c == '\0') {
 802bacc:	7bfb      	ldrb	r3, [r7, #15]
 802bace:	2b00      	cmp	r3, #0
 802bad0:	d101      	bne.n	802bad6 <stm32_log_out+0x1a>
        return ch;
 802bad2:	687b      	ldr	r3, [r7, #4]
 802bad4:	e00b      	b.n	802baee <stm32_log_out+0x32>
    }
    ITM_SendChar(ch);
 802bad6:	687b      	ldr	r3, [r7, #4]
 802bad8:	4618      	mov	r0, r3
 802bada:	f7ff fd57 	bl	802b58c <ITM_SendChar>
    //add uart
    HAL_UART_Transmit(&huart1, &c, 1, 1);
 802bade:	f107 010f 	add.w	r1, r7, #15
 802bae2:	2301      	movs	r3, #1
 802bae4:	2201      	movs	r2, #1
 802bae6:	4804      	ldr	r0, [pc, #16]	@ (802baf8 <stm32_log_out+0x3c>)
 802bae8:	f003 f92c 	bl	802ed44 <HAL_UART_Transmit>
    return ch;
 802baec:	687b      	ldr	r3, [r7, #4]
}
 802baee:	4618      	mov	r0, r3
 802baf0:	3710      	adds	r7, #16
 802baf2:	46bd      	mov	sp, r7
 802baf4:	bd80      	pop	{r7, pc}
 802baf6:	bf00      	nop
 802baf8:	20001444 	.word	0x20001444

0802bafc <ymodem_uart_read>:

// User-provided read function (w25q for UART)
COM_StatusTypeDef ymodem_uart_read(uint8_t *data, size_t size, uint32_t timeout_ms) {
 802bafc:	b580      	push	{r7, lr}
 802bafe:	b084      	sub	sp, #16
 802bb00:	af00      	add	r7, sp, #0
 802bb02:	60f8      	str	r0, [r7, #12]
 802bb04:	60b9      	str	r1, [r7, #8]
 802bb06:	607a      	str	r2, [r7, #4]
	return HAL_UART_Receive(&huart2, data, size, timeout_ms);
 802bb08:	68bb      	ldr	r3, [r7, #8]
 802bb0a:	b29a      	uxth	r2, r3
 802bb0c:	687b      	ldr	r3, [r7, #4]
 802bb0e:	68f9      	ldr	r1, [r7, #12]
 802bb10:	4803      	ldr	r0, [pc, #12]	@ (802bb20 <ymodem_uart_read+0x24>)
 802bb12:	f003 f9a2 	bl	802ee5a <HAL_UART_Receive>
 802bb16:	4603      	mov	r3, r0

}
 802bb18:	4618      	mov	r0, r3
 802bb1a:	3710      	adds	r7, #16
 802bb1c:	46bd      	mov	sp, r7
 802bb1e:	bd80      	pop	{r7, pc}
 802bb20:	2000148c 	.word	0x2000148c

0802bb24 <ymodem_uart_write>:

// User-provided write function (w25q for UART)
COM_StatusTypeDef ymodem_uart_write(const uint8_t *data, size_t size) {
 802bb24:	b580      	push	{r7, lr}
 802bb26:	b082      	sub	sp, #8
 802bb28:	af00      	add	r7, sp, #0
 802bb2a:	6078      	str	r0, [r7, #4]
 802bb2c:	6039      	str	r1, [r7, #0]

	return HAL_UART_Transmit(&huart2, data, size, 2000);
 802bb2e:	683b      	ldr	r3, [r7, #0]
 802bb30:	b29a      	uxth	r2, r3
 802bb32:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 802bb36:	6879      	ldr	r1, [r7, #4]
 802bb38:	4803      	ldr	r0, [pc, #12]	@ (802bb48 <ymodem_uart_write+0x24>)
 802bb3a:	f003 f903 	bl	802ed44 <HAL_UART_Transmit>
 802bb3e:	4603      	mov	r3, r0

}
 802bb40:	4618      	mov	r0, r3
 802bb42:	3708      	adds	r7, #8
 802bb44:	46bd      	mov	sp, r7
 802bb46:	bd80      	pop	{r7, pc}
 802bb48:	2000148c 	.word	0x2000148c

0802bb4c <ymodem_data_callback>:

// User data callback to process received data
COM_StatusTypeDef ymodem_data_callback(uint8_t *data, size_t length, uint32_t offset) {
 802bb4c:	b580      	push	{r7, lr}
 802bb4e:	b086      	sub	sp, #24
 802bb50:	af00      	add	r7, sp, #0
 802bb52:	60f8      	str	r0, [r7, #12]
 802bb54:	60b9      	str	r1, [r7, #8]
 802bb56:	607a      	str	r2, [r7, #4]

	error_t error;
	//write to flash
	error = updateProcess(&updateContext, data, length);
 802bb58:	68ba      	ldr	r2, [r7, #8]
 802bb5a:	68f9      	ldr	r1, [r7, #12]
 802bb5c:	4805      	ldr	r0, [pc, #20]	@ (802bb74 <ymodem_data_callback+0x28>)
 802bb5e:	f7f8 fa3f 	bl	8023fe0 <updateProcess>
 802bb62:	4603      	mov	r3, r0
 802bb64:	82fb      	strh	r3, [r7, #22]

	return error;
 802bb66:	8afb      	ldrh	r3, [r7, #22]
 802bb68:	b2db      	uxtb	r3, r3
}
 802bb6a:	4618      	mov	r0, r3
 802bb6c:	3718      	adds	r7, #24
 802bb6e:	46bd      	mov	sp, r7
 802bb70:	bd80      	pop	{r7, pc}
 802bb72:	bf00      	nop
 802bb74:	200006c4 	.word	0x200006c4

0802bb78 <w25q_spi_init>:

static int32_t w25q_spi_init(void *user_ctx)
{
 802bb78:	b590      	push	{r4, r7, lr}
 802bb7a:	b085      	sub	sp, #20
 802bb7c:	af02      	add	r7, sp, #8
 802bb7e:	6078      	str	r0, [r7, #4]
	MX_SPI1_Init();
 802bb80:	f000 f8dc 	bl	802bd3c <MX_SPI1_Init>
	// Inicializar hardware SPI aquí
	STM32_LOGI(TAG, "SPI inicializado\r\n");
 802bb84:	4b09      	ldr	r3, [pc, #36]	@ (802bbac <w25q_spi_init+0x34>)
 802bb86:	681c      	ldr	r4, [r3, #0]
 802bb88:	f7fe faa6 	bl	802a0d8 <stm32_log_timestamp>
 802bb8c:	4602      	mov	r2, r0
 802bb8e:	4b07      	ldr	r3, [pc, #28]	@ (802bbac <w25q_spi_init+0x34>)
 802bb90:	681b      	ldr	r3, [r3, #0]
 802bb92:	9300      	str	r3, [sp, #0]
 802bb94:	4613      	mov	r3, r2
 802bb96:	4a06      	ldr	r2, [pc, #24]	@ (802bbb0 <w25q_spi_init+0x38>)
 802bb98:	4621      	mov	r1, r4
 802bb9a:	2003      	movs	r0, #3
 802bb9c:	f7fe faa4 	bl	802a0e8 <stm32_log_write>
	return 0;
 802bba0:	2300      	movs	r3, #0
}
 802bba2:	4618      	mov	r0, r3
 802bba4:	370c      	adds	r7, #12
 802bba6:	46bd      	mov	sp, r7
 802bba8:	bd90      	pop	{r4, r7, pc}
 802bbaa:	bf00      	nop
 802bbac:	20000038 	.word	0x20000038
 802bbb0:	0803195c 	.word	0x0803195c

0802bbb4 <w25q_spi_write_read>:

static int32_t w25q_spi_write_read(void *user_ctx, const uint8_t *tx, uint8_t *rx, size_t len)
{
 802bbb4:	b580      	push	{r7, lr}
 802bbb6:	b088      	sub	sp, #32
 802bbb8:	af02      	add	r7, sp, #8
 802bbba:	60f8      	str	r0, [r7, #12]
 802bbbc:	60b9      	str	r1, [r7, #8]
 802bbbe:	607a      	str	r2, [r7, #4]
 802bbc0:	603b      	str	r3, [r7, #0]
	int32_t ret = HAL_OK;
 802bbc2:	2300      	movs	r3, #0
 802bbc4:	617b      	str	r3, [r7, #20]
	// Implementar transferencia SPI aquí
	if(tx == NULL)
 802bbc6:	68bb      	ldr	r3, [r7, #8]
 802bbc8:	2b00      	cmp	r3, #0
 802bbca:	d10a      	bne.n	802bbe2 <w25q_spi_write_read+0x2e>
	{
		ret = HAL_SPI_Receive(&hspi1, rx, len, HAL_MAX_DELAY);
 802bbcc:	683b      	ldr	r3, [r7, #0]
 802bbce:	b29a      	uxth	r2, r3
 802bbd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802bbd4:	6879      	ldr	r1, [r7, #4]
 802bbd6:	4812      	ldr	r0, [pc, #72]	@ (802bc20 <w25q_spi_write_read+0x6c>)
 802bbd8:	f002 fc5f 	bl	802e49a <HAL_SPI_Receive>
 802bbdc:	4603      	mov	r3, r0
 802bbde:	617b      	str	r3, [r7, #20]
 802bbe0:	e019      	b.n	802bc16 <w25q_spi_write_read+0x62>
	}
	else if(rx == NULL)
 802bbe2:	687b      	ldr	r3, [r7, #4]
 802bbe4:	2b00      	cmp	r3, #0
 802bbe6:	d10a      	bne.n	802bbfe <w25q_spi_write_read+0x4a>
	{
		ret = HAL_SPI_Transmit(&hspi1, tx, len, HAL_MAX_DELAY);
 802bbe8:	683b      	ldr	r3, [r7, #0]
 802bbea:	b29a      	uxth	r2, r3
 802bbec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802bbf0:	68b9      	ldr	r1, [r7, #8]
 802bbf2:	480b      	ldr	r0, [pc, #44]	@ (802bc20 <w25q_spi_write_read+0x6c>)
 802bbf4:	f002 fb0d 	bl	802e212 <HAL_SPI_Transmit>
 802bbf8:	4603      	mov	r3, r0
 802bbfa:	617b      	str	r3, [r7, #20]
 802bbfc:	e00b      	b.n	802bc16 <w25q_spi_write_read+0x62>
	}
	else
	{
		ret = HAL_SPI_TransmitReceive(&hspi1, tx, rx, len, HAL_MAX_DELAY);
 802bbfe:	683b      	ldr	r3, [r7, #0]
 802bc00:	b29b      	uxth	r3, r3
 802bc02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802bc06:	9200      	str	r2, [sp, #0]
 802bc08:	687a      	ldr	r2, [r7, #4]
 802bc0a:	68b9      	ldr	r1, [r7, #8]
 802bc0c:	4804      	ldr	r0, [pc, #16]	@ (802bc20 <w25q_spi_write_read+0x6c>)
 802bc0e:	f002 fd5d 	bl	802e6cc <HAL_SPI_TransmitReceive>
 802bc12:	4603      	mov	r3, r0
 802bc14:	617b      	str	r3, [r7, #20]
	}


	return ret;
 802bc16:	697b      	ldr	r3, [r7, #20]
}
 802bc18:	4618      	mov	r0, r3
 802bc1a:	3718      	adds	r7, #24
 802bc1c:	46bd      	mov	sp, r7
 802bc1e:	bd80      	pop	{r7, pc}
 802bc20:	200013e8 	.word	0x200013e8

0802bc24 <w25q_cs_control>:

static void w25q_cs_control(void *user_ctx, bool level)
{
 802bc24:	b580      	push	{r7, lr}
 802bc26:	b082      	sub	sp, #8
 802bc28:	af00      	add	r7, sp, #0
 802bc2a:	6078      	str	r0, [r7, #4]
 802bc2c:	460b      	mov	r3, r1
 802bc2e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, level ? GPIO_PIN_RESET : GPIO_PIN_SET);
 802bc30:	78fb      	ldrb	r3, [r7, #3]
 802bc32:	f083 0301 	eor.w	r3, r3, #1
 802bc36:	b2db      	uxtb	r3, r3
 802bc38:	461a      	mov	r2, r3
 802bc3a:	2110      	movs	r1, #16
 802bc3c:	4803      	ldr	r0, [pc, #12]	@ (802bc4c <w25q_cs_control+0x28>)
 802bc3e:	f001 fd3f 	bl	802d6c0 <HAL_GPIO_WritePin>
}
 802bc42:	bf00      	nop
 802bc44:	3708      	adds	r7, #8
 802bc46:	46bd      	mov	sp, r7
 802bc48:	bd80      	pop	{r7, pc}
 802bc4a:	bf00      	nop
 802bc4c:	40020800 	.word	0x40020800

0802bc50 <w25q_delay_ms>:

static void w25q_delay_ms(uint32_t ms)
{
 802bc50:	b580      	push	{r7, lr}
 802bc52:	b082      	sub	sp, #8
 802bc54:	af00      	add	r7, sp, #0
 802bc56:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 802bc58:	6878      	ldr	r0, [r7, #4]
 802bc5a:	f000 fbf7 	bl	802c44c <HAL_Delay>
}
 802bc5e:	bf00      	nop
 802bc60:	3708      	adds	r7, #8
 802bc62:	46bd      	mov	sp, r7
 802bc64:	bd80      	pop	{r7, pc}

0802bc66 <w25q_lock>:

static void w25q_lock(void *user_ctx) {
 802bc66:	b480      	push	{r7}
 802bc68:	b083      	sub	sp, #12
 802bc6a:	af00      	add	r7, sp, #0
 802bc6c:	6078      	str	r0, [r7, #4]

}
 802bc6e:	bf00      	nop
 802bc70:	370c      	adds	r7, #12
 802bc72:	46bd      	mov	sp, r7
 802bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bc78:	4770      	bx	lr

0802bc7a <w25q_unlock>:
static void w25q_unlock(void *user_ctx) {
 802bc7a:	b480      	push	{r7}
 802bc7c:	b083      	sub	sp, #12
 802bc7e:	af00      	add	r7, sp, #0
 802bc80:	6078      	str	r0, [r7, #4]

}
 802bc82:	bf00      	nop
 802bc84:	370c      	adds	r7, #12
 802bc86:	46bd      	mov	sp, r7
 802bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bc8c:	4770      	bx	lr

0802bc8e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 802bc8e:	b480      	push	{r7}
 802bc90:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 802bc92:	b672      	cpsid	i
}
 802bc94:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 802bc96:	bf00      	nop
 802bc98:	e7fd      	b.n	802bc96 <Error_Handler+0x8>
	...

0802bc9c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 802bc9c:	b580      	push	{r7, lr}
 802bc9e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 802bca0:	4b06      	ldr	r3, [pc, #24]	@ (802bcbc <MX_RNG_Init+0x20>)
 802bca2:	4a07      	ldr	r2, [pc, #28]	@ (802bcc0 <MX_RNG_Init+0x24>)
 802bca4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 802bca6:	4805      	ldr	r0, [pc, #20]	@ (802bcbc <MX_RNG_Init+0x20>)
 802bca8:	f002 f9d6 	bl	802e058 <HAL_RNG_Init>
 802bcac:	4603      	mov	r3, r0
 802bcae:	2b00      	cmp	r3, #0
 802bcb0:	d001      	beq.n	802bcb6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 802bcb2:	f7ff ffec 	bl	802bc8e <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 802bcb6:	bf00      	nop
 802bcb8:	bd80      	pop	{r7, pc}
 802bcba:	bf00      	nop
 802bcbc:	200013d8 	.word	0x200013d8
 802bcc0:	50060800 	.word	0x50060800

0802bcc4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 802bcc4:	b480      	push	{r7}
 802bcc6:	b085      	sub	sp, #20
 802bcc8:	af00      	add	r7, sp, #0
 802bcca:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 802bccc:	687b      	ldr	r3, [r7, #4]
 802bcce:	681b      	ldr	r3, [r3, #0]
 802bcd0:	4a0b      	ldr	r2, [pc, #44]	@ (802bd00 <HAL_RNG_MspInit+0x3c>)
 802bcd2:	4293      	cmp	r3, r2
 802bcd4:	d10d      	bne.n	802bcf2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 802bcd6:	2300      	movs	r3, #0
 802bcd8:	60fb      	str	r3, [r7, #12]
 802bcda:	4b0a      	ldr	r3, [pc, #40]	@ (802bd04 <HAL_RNG_MspInit+0x40>)
 802bcdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802bcde:	4a09      	ldr	r2, [pc, #36]	@ (802bd04 <HAL_RNG_MspInit+0x40>)
 802bce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bce4:	6353      	str	r3, [r2, #52]	@ 0x34
 802bce6:	4b07      	ldr	r3, [pc, #28]	@ (802bd04 <HAL_RNG_MspInit+0x40>)
 802bce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802bcea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802bcee:	60fb      	str	r3, [r7, #12]
 802bcf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 802bcf2:	bf00      	nop
 802bcf4:	3714      	adds	r7, #20
 802bcf6:	46bd      	mov	sp, r7
 802bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bcfc:	4770      	bx	lr
 802bcfe:	bf00      	nop
 802bd00:	50060800 	.word	0x50060800
 802bd04:	40023800 	.word	0x40023800

0802bd08 <HAL_RNG_MspDeInit>:

void HAL_RNG_MspDeInit(RNG_HandleTypeDef* rngHandle)
{
 802bd08:	b480      	push	{r7}
 802bd0a:	b083      	sub	sp, #12
 802bd0c:	af00      	add	r7, sp, #0
 802bd0e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 802bd10:	687b      	ldr	r3, [r7, #4]
 802bd12:	681b      	ldr	r3, [r3, #0]
 802bd14:	4a07      	ldr	r2, [pc, #28]	@ (802bd34 <HAL_RNG_MspDeInit+0x2c>)
 802bd16:	4293      	cmp	r3, r2
 802bd18:	d105      	bne.n	802bd26 <HAL_RNG_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 802bd1a:	4b07      	ldr	r3, [pc, #28]	@ (802bd38 <HAL_RNG_MspDeInit+0x30>)
 802bd1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802bd1e:	4a06      	ldr	r2, [pc, #24]	@ (802bd38 <HAL_RNG_MspDeInit+0x30>)
 802bd20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 802bd24:	6353      	str	r3, [r2, #52]	@ 0x34
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }
}
 802bd26:	bf00      	nop
 802bd28:	370c      	adds	r7, #12
 802bd2a:	46bd      	mov	sp, r7
 802bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bd30:	4770      	bx	lr
 802bd32:	bf00      	nop
 802bd34:	50060800 	.word	0x50060800
 802bd38:	40023800 	.word	0x40023800

0802bd3c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 802bd3c:	b580      	push	{r7, lr}
 802bd3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 802bd40:	4b17      	ldr	r3, [pc, #92]	@ (802bda0 <MX_SPI1_Init+0x64>)
 802bd42:	4a18      	ldr	r2, [pc, #96]	@ (802bda4 <MX_SPI1_Init+0x68>)
 802bd44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 802bd46:	4b16      	ldr	r3, [pc, #88]	@ (802bda0 <MX_SPI1_Init+0x64>)
 802bd48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 802bd4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 802bd4e:	4b14      	ldr	r3, [pc, #80]	@ (802bda0 <MX_SPI1_Init+0x64>)
 802bd50:	2200      	movs	r2, #0
 802bd52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 802bd54:	4b12      	ldr	r3, [pc, #72]	@ (802bda0 <MX_SPI1_Init+0x64>)
 802bd56:	2200      	movs	r2, #0
 802bd58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 802bd5a:	4b11      	ldr	r3, [pc, #68]	@ (802bda0 <MX_SPI1_Init+0x64>)
 802bd5c:	2200      	movs	r2, #0
 802bd5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 802bd60:	4b0f      	ldr	r3, [pc, #60]	@ (802bda0 <MX_SPI1_Init+0x64>)
 802bd62:	2200      	movs	r2, #0
 802bd64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 802bd66:	4b0e      	ldr	r3, [pc, #56]	@ (802bda0 <MX_SPI1_Init+0x64>)
 802bd68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 802bd6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 802bd6e:	4b0c      	ldr	r3, [pc, #48]	@ (802bda0 <MX_SPI1_Init+0x64>)
 802bd70:	2218      	movs	r2, #24
 802bd72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 802bd74:	4b0a      	ldr	r3, [pc, #40]	@ (802bda0 <MX_SPI1_Init+0x64>)
 802bd76:	2200      	movs	r2, #0
 802bd78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 802bd7a:	4b09      	ldr	r3, [pc, #36]	@ (802bda0 <MX_SPI1_Init+0x64>)
 802bd7c:	2200      	movs	r2, #0
 802bd7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802bd80:	4b07      	ldr	r3, [pc, #28]	@ (802bda0 <MX_SPI1_Init+0x64>)
 802bd82:	2200      	movs	r2, #0
 802bd84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 802bd86:	4b06      	ldr	r3, [pc, #24]	@ (802bda0 <MX_SPI1_Init+0x64>)
 802bd88:	220a      	movs	r2, #10
 802bd8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 802bd8c:	4804      	ldr	r0, [pc, #16]	@ (802bda0 <MX_SPI1_Init+0x64>)
 802bd8e:	f002 f9b7 	bl	802e100 <HAL_SPI_Init>
 802bd92:	4603      	mov	r3, r0
 802bd94:	2b00      	cmp	r3, #0
 802bd96:	d001      	beq.n	802bd9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 802bd98:	f7ff ff79 	bl	802bc8e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 802bd9c:	bf00      	nop
 802bd9e:	bd80      	pop	{r7, pc}
 802bda0:	200013e8 	.word	0x200013e8
 802bda4:	40013000 	.word	0x40013000

0802bda8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 802bda8:	b580      	push	{r7, lr}
 802bdaa:	b08a      	sub	sp, #40	@ 0x28
 802bdac:	af00      	add	r7, sp, #0
 802bdae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802bdb0:	f107 0314 	add.w	r3, r7, #20
 802bdb4:	2200      	movs	r2, #0
 802bdb6:	601a      	str	r2, [r3, #0]
 802bdb8:	605a      	str	r2, [r3, #4]
 802bdba:	609a      	str	r2, [r3, #8]
 802bdbc:	60da      	str	r2, [r3, #12]
 802bdbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 802bdc0:	687b      	ldr	r3, [r7, #4]
 802bdc2:	681b      	ldr	r3, [r3, #0]
 802bdc4:	4a19      	ldr	r2, [pc, #100]	@ (802be2c <HAL_SPI_MspInit+0x84>)
 802bdc6:	4293      	cmp	r3, r2
 802bdc8:	d12b      	bne.n	802be22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 802bdca:	2300      	movs	r3, #0
 802bdcc:	613b      	str	r3, [r7, #16]
 802bdce:	4b18      	ldr	r3, [pc, #96]	@ (802be30 <HAL_SPI_MspInit+0x88>)
 802bdd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802bdd2:	4a17      	ldr	r2, [pc, #92]	@ (802be30 <HAL_SPI_MspInit+0x88>)
 802bdd4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 802bdd8:	6453      	str	r3, [r2, #68]	@ 0x44
 802bdda:	4b15      	ldr	r3, [pc, #84]	@ (802be30 <HAL_SPI_MspInit+0x88>)
 802bddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802bdde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 802bde2:	613b      	str	r3, [r7, #16]
 802bde4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802bde6:	2300      	movs	r3, #0
 802bde8:	60fb      	str	r3, [r7, #12]
 802bdea:	4b11      	ldr	r3, [pc, #68]	@ (802be30 <HAL_SPI_MspInit+0x88>)
 802bdec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802bdee:	4a10      	ldr	r2, [pc, #64]	@ (802be30 <HAL_SPI_MspInit+0x88>)
 802bdf0:	f043 0301 	orr.w	r3, r3, #1
 802bdf4:	6313      	str	r3, [r2, #48]	@ 0x30
 802bdf6:	4b0e      	ldr	r3, [pc, #56]	@ (802be30 <HAL_SPI_MspInit+0x88>)
 802bdf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802bdfa:	f003 0301 	and.w	r3, r3, #1
 802bdfe:	60fb      	str	r3, [r7, #12]
 802be00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 802be02:	23e0      	movs	r3, #224	@ 0xe0
 802be04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802be06:	2302      	movs	r3, #2
 802be08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802be0a:	2300      	movs	r3, #0
 802be0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802be0e:	2303      	movs	r3, #3
 802be10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802be12:	2305      	movs	r3, #5
 802be14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802be16:	f107 0314 	add.w	r3, r7, #20
 802be1a:	4619      	mov	r1, r3
 802be1c:	4805      	ldr	r0, [pc, #20]	@ (802be34 <HAL_SPI_MspInit+0x8c>)
 802be1e:	f001 fa9b 	bl	802d358 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 802be22:	bf00      	nop
 802be24:	3728      	adds	r7, #40	@ 0x28
 802be26:	46bd      	mov	sp, r7
 802be28:	bd80      	pop	{r7, pc}
 802be2a:	bf00      	nop
 802be2c:	40013000 	.word	0x40013000
 802be30:	40023800 	.word	0x40023800
 802be34:	40020000 	.word	0x40020000

0802be38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802be38:	b480      	push	{r7}
 802be3a:	b083      	sub	sp, #12
 802be3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802be3e:	2300      	movs	r3, #0
 802be40:	607b      	str	r3, [r7, #4]
 802be42:	4b10      	ldr	r3, [pc, #64]	@ (802be84 <HAL_MspInit+0x4c>)
 802be44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802be46:	4a0f      	ldr	r2, [pc, #60]	@ (802be84 <HAL_MspInit+0x4c>)
 802be48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 802be4c:	6453      	str	r3, [r2, #68]	@ 0x44
 802be4e:	4b0d      	ldr	r3, [pc, #52]	@ (802be84 <HAL_MspInit+0x4c>)
 802be50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802be52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 802be56:	607b      	str	r3, [r7, #4]
 802be58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802be5a:	2300      	movs	r3, #0
 802be5c:	603b      	str	r3, [r7, #0]
 802be5e:	4b09      	ldr	r3, [pc, #36]	@ (802be84 <HAL_MspInit+0x4c>)
 802be60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802be62:	4a08      	ldr	r2, [pc, #32]	@ (802be84 <HAL_MspInit+0x4c>)
 802be64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 802be68:	6413      	str	r3, [r2, #64]	@ 0x40
 802be6a:	4b06      	ldr	r3, [pc, #24]	@ (802be84 <HAL_MspInit+0x4c>)
 802be6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802be6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 802be72:	603b      	str	r3, [r7, #0]
 802be74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802be76:	bf00      	nop
 802be78:	370c      	adds	r7, #12
 802be7a:	46bd      	mov	sp, r7
 802be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802be80:	4770      	bx	lr
 802be82:	bf00      	nop
 802be84:	40023800 	.word	0x40023800

0802be88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 802be88:	b480      	push	{r7}
 802be8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 802be8c:	bf00      	nop
 802be8e:	e7fd      	b.n	802be8c <NMI_Handler+0x4>

0802be90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802be90:	b480      	push	{r7}
 802be92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802be94:	bf00      	nop
 802be96:	e7fd      	b.n	802be94 <HardFault_Handler+0x4>

0802be98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 802be98:	b480      	push	{r7}
 802be9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802be9c:	bf00      	nop
 802be9e:	e7fd      	b.n	802be9c <MemManage_Handler+0x4>

0802bea0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802bea0:	b480      	push	{r7}
 802bea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802bea4:	bf00      	nop
 802bea6:	e7fd      	b.n	802bea4 <BusFault_Handler+0x4>

0802bea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802bea8:	b480      	push	{r7}
 802beaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 802beac:	bf00      	nop
 802beae:	e7fd      	b.n	802beac <UsageFault_Handler+0x4>

0802beb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802beb0:	b480      	push	{r7}
 802beb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802beb4:	bf00      	nop
 802beb6:	46bd      	mov	sp, r7
 802beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bebc:	4770      	bx	lr

0802bebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802bebe:	b480      	push	{r7}
 802bec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802bec2:	bf00      	nop
 802bec4:	46bd      	mov	sp, r7
 802bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802beca:	4770      	bx	lr

0802becc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802becc:	b480      	push	{r7}
 802bece:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802bed0:	bf00      	nop
 802bed2:	46bd      	mov	sp, r7
 802bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bed8:	4770      	bx	lr

0802beda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802beda:	b580      	push	{r7, lr}
 802bedc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 802bede:	f000 fa95 	bl	802c40c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802bee2:	bf00      	nop
 802bee4:	bd80      	pop	{r7, pc}
	...

0802bee8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 802bee8:	b580      	push	{r7, lr}
 802beea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 802beec:	4802      	ldr	r0, [pc, #8]	@ (802bef8 <DMA1_Stream5_IRQHandler+0x10>)
 802beee:	f000 fd23 	bl	802c938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 802bef2:	bf00      	nop
 802bef4:	bd80      	pop	{r7, pc}
 802bef6:	bf00      	nop
 802bef8:	200014d4 	.word	0x200014d4

0802befc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 802befc:	b580      	push	{r7, lr}
 802befe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 802bf00:	4802      	ldr	r0, [pc, #8]	@ (802bf0c <DMA1_Stream6_IRQHandler+0x10>)
 802bf02:	f000 fd19 	bl	802c938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 802bf06:	bf00      	nop
 802bf08:	bd80      	pop	{r7, pc}
 802bf0a:	bf00      	nop
 802bf0c:	20001534 	.word	0x20001534

0802bf10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 802bf10:	b580      	push	{r7, lr}
 802bf12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 802bf14:	4802      	ldr	r0, [pc, #8]	@ (802bf20 <USART2_IRQHandler+0x10>)
 802bf16:	f003 f837 	bl	802ef88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 802bf1a:	bf00      	nop
 802bf1c:	bd80      	pop	{r7, pc}
 802bf1e:	bf00      	nop
 802bf20:	2000148c 	.word	0x2000148c

0802bf24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 802bf24:	b580      	push	{r7, lr}
 802bf26:	b086      	sub	sp, #24
 802bf28:	af00      	add	r7, sp, #0
 802bf2a:	60f8      	str	r0, [r7, #12]
 802bf2c:	60b9      	str	r1, [r7, #8]
 802bf2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802bf30:	2300      	movs	r3, #0
 802bf32:	617b      	str	r3, [r7, #20]
 802bf34:	e00a      	b.n	802bf4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 802bf36:	f3af 8000 	nop.w
 802bf3a:	4601      	mov	r1, r0
 802bf3c:	68bb      	ldr	r3, [r7, #8]
 802bf3e:	1c5a      	adds	r2, r3, #1
 802bf40:	60ba      	str	r2, [r7, #8]
 802bf42:	b2ca      	uxtb	r2, r1
 802bf44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802bf46:	697b      	ldr	r3, [r7, #20]
 802bf48:	3301      	adds	r3, #1
 802bf4a:	617b      	str	r3, [r7, #20]
 802bf4c:	697a      	ldr	r2, [r7, #20]
 802bf4e:	687b      	ldr	r3, [r7, #4]
 802bf50:	429a      	cmp	r2, r3
 802bf52:	dbf0      	blt.n	802bf36 <_read+0x12>
  }

  return len;
 802bf54:	687b      	ldr	r3, [r7, #4]
}
 802bf56:	4618      	mov	r0, r3
 802bf58:	3718      	adds	r7, #24
 802bf5a:	46bd      	mov	sp, r7
 802bf5c:	bd80      	pop	{r7, pc}

0802bf5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 802bf5e:	b580      	push	{r7, lr}
 802bf60:	b086      	sub	sp, #24
 802bf62:	af00      	add	r7, sp, #0
 802bf64:	60f8      	str	r0, [r7, #12]
 802bf66:	60b9      	str	r1, [r7, #8]
 802bf68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802bf6a:	2300      	movs	r3, #0
 802bf6c:	617b      	str	r3, [r7, #20]
 802bf6e:	e009      	b.n	802bf84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 802bf70:	68bb      	ldr	r3, [r7, #8]
 802bf72:	1c5a      	adds	r2, r3, #1
 802bf74:	60ba      	str	r2, [r7, #8]
 802bf76:	781b      	ldrb	r3, [r3, #0]
 802bf78:	4618      	mov	r0, r3
 802bf7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802bf7e:	697b      	ldr	r3, [r7, #20]
 802bf80:	3301      	adds	r3, #1
 802bf82:	617b      	str	r3, [r7, #20]
 802bf84:	697a      	ldr	r2, [r7, #20]
 802bf86:	687b      	ldr	r3, [r7, #4]
 802bf88:	429a      	cmp	r2, r3
 802bf8a:	dbf1      	blt.n	802bf70 <_write+0x12>
  }
  return len;
 802bf8c:	687b      	ldr	r3, [r7, #4]
}
 802bf8e:	4618      	mov	r0, r3
 802bf90:	3718      	adds	r7, #24
 802bf92:	46bd      	mov	sp, r7
 802bf94:	bd80      	pop	{r7, pc}

0802bf96 <_close>:

int _close(int file)
{
 802bf96:	b480      	push	{r7}
 802bf98:	b083      	sub	sp, #12
 802bf9a:	af00      	add	r7, sp, #0
 802bf9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 802bf9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 802bfa2:	4618      	mov	r0, r3
 802bfa4:	370c      	adds	r7, #12
 802bfa6:	46bd      	mov	sp, r7
 802bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bfac:	4770      	bx	lr

0802bfae <_fstat>:


int _fstat(int file, struct stat *st)
{
 802bfae:	b480      	push	{r7}
 802bfb0:	b083      	sub	sp, #12
 802bfb2:	af00      	add	r7, sp, #0
 802bfb4:	6078      	str	r0, [r7, #4]
 802bfb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 802bfb8:	683b      	ldr	r3, [r7, #0]
 802bfba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 802bfbe:	605a      	str	r2, [r3, #4]
  return 0;
 802bfc0:	2300      	movs	r3, #0
}
 802bfc2:	4618      	mov	r0, r3
 802bfc4:	370c      	adds	r7, #12
 802bfc6:	46bd      	mov	sp, r7
 802bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bfcc:	4770      	bx	lr

0802bfce <_isatty>:

int _isatty(int file)
{
 802bfce:	b480      	push	{r7}
 802bfd0:	b083      	sub	sp, #12
 802bfd2:	af00      	add	r7, sp, #0
 802bfd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 802bfd6:	2301      	movs	r3, #1
}
 802bfd8:	4618      	mov	r0, r3
 802bfda:	370c      	adds	r7, #12
 802bfdc:	46bd      	mov	sp, r7
 802bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bfe2:	4770      	bx	lr

0802bfe4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802bfe4:	b480      	push	{r7}
 802bfe6:	b085      	sub	sp, #20
 802bfe8:	af00      	add	r7, sp, #0
 802bfea:	60f8      	str	r0, [r7, #12]
 802bfec:	60b9      	str	r1, [r7, #8]
 802bfee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 802bff0:	2300      	movs	r3, #0
}
 802bff2:	4618      	mov	r0, r3
 802bff4:	3714      	adds	r7, #20
 802bff6:	46bd      	mov	sp, r7
 802bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bffc:	4770      	bx	lr
	...

0802c000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802c000:	b580      	push	{r7, lr}
 802c002:	b086      	sub	sp, #24
 802c004:	af00      	add	r7, sp, #0
 802c006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 802c008:	4a14      	ldr	r2, [pc, #80]	@ (802c05c <_sbrk+0x5c>)
 802c00a:	4b15      	ldr	r3, [pc, #84]	@ (802c060 <_sbrk+0x60>)
 802c00c:	1ad3      	subs	r3, r2, r3
 802c00e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802c010:	697b      	ldr	r3, [r7, #20]
 802c012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 802c014:	4b13      	ldr	r3, [pc, #76]	@ (802c064 <_sbrk+0x64>)
 802c016:	681b      	ldr	r3, [r3, #0]
 802c018:	2b00      	cmp	r3, #0
 802c01a:	d102      	bne.n	802c022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 802c01c:	4b11      	ldr	r3, [pc, #68]	@ (802c064 <_sbrk+0x64>)
 802c01e:	4a12      	ldr	r2, [pc, #72]	@ (802c068 <_sbrk+0x68>)
 802c020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802c022:	4b10      	ldr	r3, [pc, #64]	@ (802c064 <_sbrk+0x64>)
 802c024:	681a      	ldr	r2, [r3, #0]
 802c026:	687b      	ldr	r3, [r7, #4]
 802c028:	4413      	add	r3, r2
 802c02a:	693a      	ldr	r2, [r7, #16]
 802c02c:	429a      	cmp	r2, r3
 802c02e:	d207      	bcs.n	802c040 <_sbrk+0x40>
  {
    errno = ENOMEM;
 802c030:	f004 fa4a 	bl	80304c8 <__errno>
 802c034:	4603      	mov	r3, r0
 802c036:	220c      	movs	r2, #12
 802c038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 802c03a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802c03e:	e009      	b.n	802c054 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 802c040:	4b08      	ldr	r3, [pc, #32]	@ (802c064 <_sbrk+0x64>)
 802c042:	681b      	ldr	r3, [r3, #0]
 802c044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802c046:	4b07      	ldr	r3, [pc, #28]	@ (802c064 <_sbrk+0x64>)
 802c048:	681a      	ldr	r2, [r3, #0]
 802c04a:	687b      	ldr	r3, [r7, #4]
 802c04c:	4413      	add	r3, r2
 802c04e:	4a05      	ldr	r2, [pc, #20]	@ (802c064 <_sbrk+0x64>)
 802c050:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802c052:	68fb      	ldr	r3, [r7, #12]
}
 802c054:	4618      	mov	r0, r3
 802c056:	3718      	adds	r7, #24
 802c058:	46bd      	mov	sp, r7
 802c05a:	bd80      	pop	{r7, pc}
 802c05c:	20020000 	.word	0x20020000
 802c060:	00000400 	.word	0x00000400
 802c064:	20001440 	.word	0x20001440
 802c068:	200016e8 	.word	0x200016e8

0802c06c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 802c06c:	b480      	push	{r7}
 802c06e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 802c070:	4b07      	ldr	r3, [pc, #28]	@ (802c090 <SystemInit+0x24>)
 802c072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802c076:	4a06      	ldr	r2, [pc, #24]	@ (802c090 <SystemInit+0x24>)
 802c078:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 802c07c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 802c080:	4b03      	ldr	r3, [pc, #12]	@ (802c090 <SystemInit+0x24>)
 802c082:	4a04      	ldr	r2, [pc, #16]	@ (802c094 <SystemInit+0x28>)
 802c084:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 802c086:	bf00      	nop
 802c088:	46bd      	mov	sp, r7
 802c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c08e:	4770      	bx	lr
 802c090:	e000ed00 	.word	0xe000ed00
 802c094:	08020400 	.word	0x08020400

0802c098 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 802c098:	b580      	push	{r7, lr}
 802c09a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 802c09c:	4b11      	ldr	r3, [pc, #68]	@ (802c0e4 <MX_USART1_UART_Init+0x4c>)
 802c09e:	4a12      	ldr	r2, [pc, #72]	@ (802c0e8 <MX_USART1_UART_Init+0x50>)
 802c0a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 802c0a2:	4b10      	ldr	r3, [pc, #64]	@ (802c0e4 <MX_USART1_UART_Init+0x4c>)
 802c0a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 802c0a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 802c0aa:	4b0e      	ldr	r3, [pc, #56]	@ (802c0e4 <MX_USART1_UART_Init+0x4c>)
 802c0ac:	2200      	movs	r2, #0
 802c0ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 802c0b0:	4b0c      	ldr	r3, [pc, #48]	@ (802c0e4 <MX_USART1_UART_Init+0x4c>)
 802c0b2:	2200      	movs	r2, #0
 802c0b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 802c0b6:	4b0b      	ldr	r3, [pc, #44]	@ (802c0e4 <MX_USART1_UART_Init+0x4c>)
 802c0b8:	2200      	movs	r2, #0
 802c0ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 802c0bc:	4b09      	ldr	r3, [pc, #36]	@ (802c0e4 <MX_USART1_UART_Init+0x4c>)
 802c0be:	220c      	movs	r2, #12
 802c0c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802c0c2:	4b08      	ldr	r3, [pc, #32]	@ (802c0e4 <MX_USART1_UART_Init+0x4c>)
 802c0c4:	2200      	movs	r2, #0
 802c0c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 802c0c8:	4b06      	ldr	r3, [pc, #24]	@ (802c0e4 <MX_USART1_UART_Init+0x4c>)
 802c0ca:	2200      	movs	r2, #0
 802c0cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 802c0ce:	4805      	ldr	r0, [pc, #20]	@ (802c0e4 <MX_USART1_UART_Init+0x4c>)
 802c0d0:	f002 fde8 	bl	802eca4 <HAL_UART_Init>
 802c0d4:	4603      	mov	r3, r0
 802c0d6:	2b00      	cmp	r3, #0
 802c0d8:	d001      	beq.n	802c0de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 802c0da:	f7ff fdd8 	bl	802bc8e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 802c0de:	bf00      	nop
 802c0e0:	bd80      	pop	{r7, pc}
 802c0e2:	bf00      	nop
 802c0e4:	20001444 	.word	0x20001444
 802c0e8:	40011000 	.word	0x40011000

0802c0ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 802c0ec:	b580      	push	{r7, lr}
 802c0ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 802c0f0:	4b11      	ldr	r3, [pc, #68]	@ (802c138 <MX_USART2_UART_Init+0x4c>)
 802c0f2:	4a12      	ldr	r2, [pc, #72]	@ (802c13c <MX_USART2_UART_Init+0x50>)
 802c0f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 802c0f6:	4b10      	ldr	r3, [pc, #64]	@ (802c138 <MX_USART2_UART_Init+0x4c>)
 802c0f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 802c0fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802c0fe:	4b0e      	ldr	r3, [pc, #56]	@ (802c138 <MX_USART2_UART_Init+0x4c>)
 802c100:	2200      	movs	r2, #0
 802c102:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 802c104:	4b0c      	ldr	r3, [pc, #48]	@ (802c138 <MX_USART2_UART_Init+0x4c>)
 802c106:	2200      	movs	r2, #0
 802c108:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802c10a:	4b0b      	ldr	r3, [pc, #44]	@ (802c138 <MX_USART2_UART_Init+0x4c>)
 802c10c:	2200      	movs	r2, #0
 802c10e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 802c110:	4b09      	ldr	r3, [pc, #36]	@ (802c138 <MX_USART2_UART_Init+0x4c>)
 802c112:	220c      	movs	r2, #12
 802c114:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802c116:	4b08      	ldr	r3, [pc, #32]	@ (802c138 <MX_USART2_UART_Init+0x4c>)
 802c118:	2200      	movs	r2, #0
 802c11a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802c11c:	4b06      	ldr	r3, [pc, #24]	@ (802c138 <MX_USART2_UART_Init+0x4c>)
 802c11e:	2200      	movs	r2, #0
 802c120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 802c122:	4805      	ldr	r0, [pc, #20]	@ (802c138 <MX_USART2_UART_Init+0x4c>)
 802c124:	f002 fdbe 	bl	802eca4 <HAL_UART_Init>
 802c128:	4603      	mov	r3, r0
 802c12a:	2b00      	cmp	r3, #0
 802c12c:	d001      	beq.n	802c132 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 802c12e:	f7ff fdae 	bl	802bc8e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 802c132:	bf00      	nop
 802c134:	bd80      	pop	{r7, pc}
 802c136:	bf00      	nop
 802c138:	2000148c 	.word	0x2000148c
 802c13c:	40004400 	.word	0x40004400

0802c140 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 802c140:	b580      	push	{r7, lr}
 802c142:	b08c      	sub	sp, #48	@ 0x30
 802c144:	af00      	add	r7, sp, #0
 802c146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802c148:	f107 031c 	add.w	r3, r7, #28
 802c14c:	2200      	movs	r2, #0
 802c14e:	601a      	str	r2, [r3, #0]
 802c150:	605a      	str	r2, [r3, #4]
 802c152:	609a      	str	r2, [r3, #8]
 802c154:	60da      	str	r2, [r3, #12]
 802c156:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 802c158:	687b      	ldr	r3, [r7, #4]
 802c15a:	681b      	ldr	r3, [r3, #0]
 802c15c:	4a64      	ldr	r2, [pc, #400]	@ (802c2f0 <HAL_UART_MspInit+0x1b0>)
 802c15e:	4293      	cmp	r3, r2
 802c160:	d12c      	bne.n	802c1bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 802c162:	2300      	movs	r3, #0
 802c164:	61bb      	str	r3, [r7, #24]
 802c166:	4b63      	ldr	r3, [pc, #396]	@ (802c2f4 <HAL_UART_MspInit+0x1b4>)
 802c168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802c16a:	4a62      	ldr	r2, [pc, #392]	@ (802c2f4 <HAL_UART_MspInit+0x1b4>)
 802c16c:	f043 0310 	orr.w	r3, r3, #16
 802c170:	6453      	str	r3, [r2, #68]	@ 0x44
 802c172:	4b60      	ldr	r3, [pc, #384]	@ (802c2f4 <HAL_UART_MspInit+0x1b4>)
 802c174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802c176:	f003 0310 	and.w	r3, r3, #16
 802c17a:	61bb      	str	r3, [r7, #24]
 802c17c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802c17e:	2300      	movs	r3, #0
 802c180:	617b      	str	r3, [r7, #20]
 802c182:	4b5c      	ldr	r3, [pc, #368]	@ (802c2f4 <HAL_UART_MspInit+0x1b4>)
 802c184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802c186:	4a5b      	ldr	r2, [pc, #364]	@ (802c2f4 <HAL_UART_MspInit+0x1b4>)
 802c188:	f043 0302 	orr.w	r3, r3, #2
 802c18c:	6313      	str	r3, [r2, #48]	@ 0x30
 802c18e:	4b59      	ldr	r3, [pc, #356]	@ (802c2f4 <HAL_UART_MspInit+0x1b4>)
 802c190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802c192:	f003 0302 	and.w	r3, r3, #2
 802c196:	617b      	str	r3, [r7, #20]
 802c198:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 802c19a:	23c0      	movs	r3, #192	@ 0xc0
 802c19c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802c19e:	2302      	movs	r3, #2
 802c1a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802c1a2:	2300      	movs	r3, #0
 802c1a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802c1a6:	2303      	movs	r3, #3
 802c1a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 802c1aa:	2307      	movs	r3, #7
 802c1ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802c1ae:	f107 031c 	add.w	r3, r7, #28
 802c1b2:	4619      	mov	r1, r3
 802c1b4:	4850      	ldr	r0, [pc, #320]	@ (802c2f8 <HAL_UART_MspInit+0x1b8>)
 802c1b6:	f001 f8cf 	bl	802d358 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 802c1ba:	e095      	b.n	802c2e8 <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART2)
 802c1bc:	687b      	ldr	r3, [r7, #4]
 802c1be:	681b      	ldr	r3, [r3, #0]
 802c1c0:	4a4e      	ldr	r2, [pc, #312]	@ (802c2fc <HAL_UART_MspInit+0x1bc>)
 802c1c2:	4293      	cmp	r3, r2
 802c1c4:	f040 8090 	bne.w	802c2e8 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 802c1c8:	2300      	movs	r3, #0
 802c1ca:	613b      	str	r3, [r7, #16]
 802c1cc:	4b49      	ldr	r3, [pc, #292]	@ (802c2f4 <HAL_UART_MspInit+0x1b4>)
 802c1ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802c1d0:	4a48      	ldr	r2, [pc, #288]	@ (802c2f4 <HAL_UART_MspInit+0x1b4>)
 802c1d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802c1d6:	6413      	str	r3, [r2, #64]	@ 0x40
 802c1d8:	4b46      	ldr	r3, [pc, #280]	@ (802c2f4 <HAL_UART_MspInit+0x1b4>)
 802c1da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802c1dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802c1e0:	613b      	str	r3, [r7, #16]
 802c1e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802c1e4:	2300      	movs	r3, #0
 802c1e6:	60fb      	str	r3, [r7, #12]
 802c1e8:	4b42      	ldr	r3, [pc, #264]	@ (802c2f4 <HAL_UART_MspInit+0x1b4>)
 802c1ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802c1ec:	4a41      	ldr	r2, [pc, #260]	@ (802c2f4 <HAL_UART_MspInit+0x1b4>)
 802c1ee:	f043 0301 	orr.w	r3, r3, #1
 802c1f2:	6313      	str	r3, [r2, #48]	@ 0x30
 802c1f4:	4b3f      	ldr	r3, [pc, #252]	@ (802c2f4 <HAL_UART_MspInit+0x1b4>)
 802c1f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802c1f8:	f003 0301 	and.w	r3, r3, #1
 802c1fc:	60fb      	str	r3, [r7, #12]
 802c1fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 802c200:	230c      	movs	r3, #12
 802c202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802c204:	2302      	movs	r3, #2
 802c206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802c208:	2300      	movs	r3, #0
 802c20a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802c20c:	2303      	movs	r3, #3
 802c20e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802c210:	2307      	movs	r3, #7
 802c212:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802c214:	f107 031c 	add.w	r3, r7, #28
 802c218:	4619      	mov	r1, r3
 802c21a:	4839      	ldr	r0, [pc, #228]	@ (802c300 <HAL_UART_MspInit+0x1c0>)
 802c21c:	f001 f89c 	bl	802d358 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 802c220:	4b38      	ldr	r3, [pc, #224]	@ (802c304 <HAL_UART_MspInit+0x1c4>)
 802c222:	4a39      	ldr	r2, [pc, #228]	@ (802c308 <HAL_UART_MspInit+0x1c8>)
 802c224:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 802c226:	4b37      	ldr	r3, [pc, #220]	@ (802c304 <HAL_UART_MspInit+0x1c4>)
 802c228:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 802c22c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802c22e:	4b35      	ldr	r3, [pc, #212]	@ (802c304 <HAL_UART_MspInit+0x1c4>)
 802c230:	2200      	movs	r2, #0
 802c232:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802c234:	4b33      	ldr	r3, [pc, #204]	@ (802c304 <HAL_UART_MspInit+0x1c4>)
 802c236:	2200      	movs	r2, #0
 802c238:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 802c23a:	4b32      	ldr	r3, [pc, #200]	@ (802c304 <HAL_UART_MspInit+0x1c4>)
 802c23c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 802c240:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802c242:	4b30      	ldr	r3, [pc, #192]	@ (802c304 <HAL_UART_MspInit+0x1c4>)
 802c244:	2200      	movs	r2, #0
 802c246:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802c248:	4b2e      	ldr	r3, [pc, #184]	@ (802c304 <HAL_UART_MspInit+0x1c4>)
 802c24a:	2200      	movs	r2, #0
 802c24c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 802c24e:	4b2d      	ldr	r3, [pc, #180]	@ (802c304 <HAL_UART_MspInit+0x1c4>)
 802c250:	2200      	movs	r2, #0
 802c252:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 802c254:	4b2b      	ldr	r3, [pc, #172]	@ (802c304 <HAL_UART_MspInit+0x1c4>)
 802c256:	2200      	movs	r2, #0
 802c258:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802c25a:	4b2a      	ldr	r3, [pc, #168]	@ (802c304 <HAL_UART_MspInit+0x1c4>)
 802c25c:	2200      	movs	r2, #0
 802c25e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 802c260:	4828      	ldr	r0, [pc, #160]	@ (802c304 <HAL_UART_MspInit+0x1c4>)
 802c262:	f000 fa29 	bl	802c6b8 <HAL_DMA_Init>
 802c266:	4603      	mov	r3, r0
 802c268:	2b00      	cmp	r3, #0
 802c26a:	d001      	beq.n	802c270 <HAL_UART_MspInit+0x130>
      Error_Handler();
 802c26c:	f7ff fd0f 	bl	802bc8e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 802c270:	687b      	ldr	r3, [r7, #4]
 802c272:	4a24      	ldr	r2, [pc, #144]	@ (802c304 <HAL_UART_MspInit+0x1c4>)
 802c274:	63da      	str	r2, [r3, #60]	@ 0x3c
 802c276:	4a23      	ldr	r2, [pc, #140]	@ (802c304 <HAL_UART_MspInit+0x1c4>)
 802c278:	687b      	ldr	r3, [r7, #4]
 802c27a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 802c27c:	4b23      	ldr	r3, [pc, #140]	@ (802c30c <HAL_UART_MspInit+0x1cc>)
 802c27e:	4a24      	ldr	r2, [pc, #144]	@ (802c310 <HAL_UART_MspInit+0x1d0>)
 802c280:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 802c282:	4b22      	ldr	r3, [pc, #136]	@ (802c30c <HAL_UART_MspInit+0x1cc>)
 802c284:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 802c288:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802c28a:	4b20      	ldr	r3, [pc, #128]	@ (802c30c <HAL_UART_MspInit+0x1cc>)
 802c28c:	2240      	movs	r2, #64	@ 0x40
 802c28e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802c290:	4b1e      	ldr	r3, [pc, #120]	@ (802c30c <HAL_UART_MspInit+0x1cc>)
 802c292:	2200      	movs	r2, #0
 802c294:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 802c296:	4b1d      	ldr	r3, [pc, #116]	@ (802c30c <HAL_UART_MspInit+0x1cc>)
 802c298:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 802c29c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802c29e:	4b1b      	ldr	r3, [pc, #108]	@ (802c30c <HAL_UART_MspInit+0x1cc>)
 802c2a0:	2200      	movs	r2, #0
 802c2a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802c2a4:	4b19      	ldr	r3, [pc, #100]	@ (802c30c <HAL_UART_MspInit+0x1cc>)
 802c2a6:	2200      	movs	r2, #0
 802c2a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 802c2aa:	4b18      	ldr	r3, [pc, #96]	@ (802c30c <HAL_UART_MspInit+0x1cc>)
 802c2ac:	2200      	movs	r2, #0
 802c2ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 802c2b0:	4b16      	ldr	r3, [pc, #88]	@ (802c30c <HAL_UART_MspInit+0x1cc>)
 802c2b2:	2200      	movs	r2, #0
 802c2b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802c2b6:	4b15      	ldr	r3, [pc, #84]	@ (802c30c <HAL_UART_MspInit+0x1cc>)
 802c2b8:	2200      	movs	r2, #0
 802c2ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 802c2bc:	4813      	ldr	r0, [pc, #76]	@ (802c30c <HAL_UART_MspInit+0x1cc>)
 802c2be:	f000 f9fb 	bl	802c6b8 <HAL_DMA_Init>
 802c2c2:	4603      	mov	r3, r0
 802c2c4:	2b00      	cmp	r3, #0
 802c2c6:	d001      	beq.n	802c2cc <HAL_UART_MspInit+0x18c>
      Error_Handler();
 802c2c8:	f7ff fce1 	bl	802bc8e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 802c2cc:	687b      	ldr	r3, [r7, #4]
 802c2ce:	4a0f      	ldr	r2, [pc, #60]	@ (802c30c <HAL_UART_MspInit+0x1cc>)
 802c2d0:	639a      	str	r2, [r3, #56]	@ 0x38
 802c2d2:	4a0e      	ldr	r2, [pc, #56]	@ (802c30c <HAL_UART_MspInit+0x1cc>)
 802c2d4:	687b      	ldr	r3, [r7, #4]
 802c2d6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 802c2d8:	2200      	movs	r2, #0
 802c2da:	2100      	movs	r1, #0
 802c2dc:	2026      	movs	r0, #38	@ 0x26
 802c2de:	f000 f9b4 	bl	802c64a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 802c2e2:	2026      	movs	r0, #38	@ 0x26
 802c2e4:	f000 f9cd 	bl	802c682 <HAL_NVIC_EnableIRQ>
}
 802c2e8:	bf00      	nop
 802c2ea:	3730      	adds	r7, #48	@ 0x30
 802c2ec:	46bd      	mov	sp, r7
 802c2ee:	bd80      	pop	{r7, pc}
 802c2f0:	40011000 	.word	0x40011000
 802c2f4:	40023800 	.word	0x40023800
 802c2f8:	40020400 	.word	0x40020400
 802c2fc:	40004400 	.word	0x40004400
 802c300:	40020000 	.word	0x40020000
 802c304:	200014d4 	.word	0x200014d4
 802c308:	40026088 	.word	0x40026088
 802c30c:	20001534 	.word	0x20001534
 802c310:	400260a0 	.word	0x400260a0

0802c314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 802c314:	f8df d034 	ldr.w	sp, [pc, #52]	@ 802c34c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 802c318:	f7ff fea8 	bl	802c06c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 802c31c:	480c      	ldr	r0, [pc, #48]	@ (802c350 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 802c31e:	490d      	ldr	r1, [pc, #52]	@ (802c354 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 802c320:	4a0d      	ldr	r2, [pc, #52]	@ (802c358 <LoopFillZerobss+0x1a>)
  movs r3, #0
 802c322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 802c324:	e002      	b.n	802c32c <LoopCopyDataInit>

0802c326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802c326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802c328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802c32a:	3304      	adds	r3, #4

0802c32c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802c32c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802c32e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802c330:	d3f9      	bcc.n	802c326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802c332:	4a0a      	ldr	r2, [pc, #40]	@ (802c35c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 802c334:	4c0a      	ldr	r4, [pc, #40]	@ (802c360 <LoopFillZerobss+0x22>)
  movs r3, #0
 802c336:	2300      	movs	r3, #0
  b LoopFillZerobss
 802c338:	e001      	b.n	802c33e <LoopFillZerobss>

0802c33a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802c33a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 802c33c:	3204      	adds	r2, #4

0802c33e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802c33e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802c340:	d3fb      	bcc.n	802c33a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802c342:	f004 f8c7 	bl	80304d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802c346:	f7ff f949 	bl	802b5dc <main>
  bx  lr    
 802c34a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 802c34c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 802c350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 802c354:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 802c358:	08033244 	.word	0x08033244
  ldr r2, =_sbss
 802c35c:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 802c360:	200016e4 	.word	0x200016e4

0802c364 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802c364:	e7fe      	b.n	802c364 <ADC_IRQHandler>
	...

0802c368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802c368:	b580      	push	{r7, lr}
 802c36a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802c36c:	4b0e      	ldr	r3, [pc, #56]	@ (802c3a8 <HAL_Init+0x40>)
 802c36e:	681b      	ldr	r3, [r3, #0]
 802c370:	4a0d      	ldr	r2, [pc, #52]	@ (802c3a8 <HAL_Init+0x40>)
 802c372:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 802c376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 802c378:	4b0b      	ldr	r3, [pc, #44]	@ (802c3a8 <HAL_Init+0x40>)
 802c37a:	681b      	ldr	r3, [r3, #0]
 802c37c:	4a0a      	ldr	r2, [pc, #40]	@ (802c3a8 <HAL_Init+0x40>)
 802c37e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 802c382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 802c384:	4b08      	ldr	r3, [pc, #32]	@ (802c3a8 <HAL_Init+0x40>)
 802c386:	681b      	ldr	r3, [r3, #0]
 802c388:	4a07      	ldr	r2, [pc, #28]	@ (802c3a8 <HAL_Init+0x40>)
 802c38a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 802c38e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802c390:	2003      	movs	r0, #3
 802c392:	f000 f94f 	bl	802c634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802c396:	200f      	movs	r0, #15
 802c398:	f000 f808 	bl	802c3ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 802c39c:	f7ff fd4c 	bl	802be38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802c3a0:	2300      	movs	r3, #0
}
 802c3a2:	4618      	mov	r0, r3
 802c3a4:	bd80      	pop	{r7, pc}
 802c3a6:	bf00      	nop
 802c3a8:	40023c00 	.word	0x40023c00

0802c3ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802c3ac:	b580      	push	{r7, lr}
 802c3ae:	b082      	sub	sp, #8
 802c3b0:	af00      	add	r7, sp, #0
 802c3b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 802c3b4:	4b12      	ldr	r3, [pc, #72]	@ (802c400 <HAL_InitTick+0x54>)
 802c3b6:	681a      	ldr	r2, [r3, #0]
 802c3b8:	4b12      	ldr	r3, [pc, #72]	@ (802c404 <HAL_InitTick+0x58>)
 802c3ba:	781b      	ldrb	r3, [r3, #0]
 802c3bc:	4619      	mov	r1, r3
 802c3be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 802c3c2:	fbb3 f3f1 	udiv	r3, r3, r1
 802c3c6:	fbb2 f3f3 	udiv	r3, r2, r3
 802c3ca:	4618      	mov	r0, r3
 802c3cc:	f000 f967 	bl	802c69e <HAL_SYSTICK_Config>
 802c3d0:	4603      	mov	r3, r0
 802c3d2:	2b00      	cmp	r3, #0
 802c3d4:	d001      	beq.n	802c3da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 802c3d6:	2301      	movs	r3, #1
 802c3d8:	e00e      	b.n	802c3f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802c3da:	687b      	ldr	r3, [r7, #4]
 802c3dc:	2b0f      	cmp	r3, #15
 802c3de:	d80a      	bhi.n	802c3f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802c3e0:	2200      	movs	r2, #0
 802c3e2:	6879      	ldr	r1, [r7, #4]
 802c3e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c3e8:	f000 f92f 	bl	802c64a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 802c3ec:	4a06      	ldr	r2, [pc, #24]	@ (802c408 <HAL_InitTick+0x5c>)
 802c3ee:	687b      	ldr	r3, [r7, #4]
 802c3f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802c3f2:	2300      	movs	r3, #0
 802c3f4:	e000      	b.n	802c3f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 802c3f6:	2301      	movs	r3, #1
}
 802c3f8:	4618      	mov	r0, r3
 802c3fa:	3708      	adds	r7, #8
 802c3fc:	46bd      	mov	sp, r7
 802c3fe:	bd80      	pop	{r7, pc}
 802c400:	20000054 	.word	0x20000054
 802c404:	2000005c 	.word	0x2000005c
 802c408:	20000058 	.word	0x20000058

0802c40c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802c40c:	b480      	push	{r7}
 802c40e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 802c410:	4b06      	ldr	r3, [pc, #24]	@ (802c42c <HAL_IncTick+0x20>)
 802c412:	781b      	ldrb	r3, [r3, #0]
 802c414:	461a      	mov	r2, r3
 802c416:	4b06      	ldr	r3, [pc, #24]	@ (802c430 <HAL_IncTick+0x24>)
 802c418:	681b      	ldr	r3, [r3, #0]
 802c41a:	4413      	add	r3, r2
 802c41c:	4a04      	ldr	r2, [pc, #16]	@ (802c430 <HAL_IncTick+0x24>)
 802c41e:	6013      	str	r3, [r2, #0]
}
 802c420:	bf00      	nop
 802c422:	46bd      	mov	sp, r7
 802c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c428:	4770      	bx	lr
 802c42a:	bf00      	nop
 802c42c:	2000005c 	.word	0x2000005c
 802c430:	20001594 	.word	0x20001594

0802c434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802c434:	b480      	push	{r7}
 802c436:	af00      	add	r7, sp, #0
  return uwTick;
 802c438:	4b03      	ldr	r3, [pc, #12]	@ (802c448 <HAL_GetTick+0x14>)
 802c43a:	681b      	ldr	r3, [r3, #0]
}
 802c43c:	4618      	mov	r0, r3
 802c43e:	46bd      	mov	sp, r7
 802c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c444:	4770      	bx	lr
 802c446:	bf00      	nop
 802c448:	20001594 	.word	0x20001594

0802c44c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802c44c:	b580      	push	{r7, lr}
 802c44e:	b084      	sub	sp, #16
 802c450:	af00      	add	r7, sp, #0
 802c452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802c454:	f7ff ffee 	bl	802c434 <HAL_GetTick>
 802c458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802c45a:	687b      	ldr	r3, [r7, #4]
 802c45c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802c45e:	68fb      	ldr	r3, [r7, #12]
 802c460:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802c464:	d005      	beq.n	802c472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802c466:	4b0a      	ldr	r3, [pc, #40]	@ (802c490 <HAL_Delay+0x44>)
 802c468:	781b      	ldrb	r3, [r3, #0]
 802c46a:	461a      	mov	r2, r3
 802c46c:	68fb      	ldr	r3, [r7, #12]
 802c46e:	4413      	add	r3, r2
 802c470:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 802c472:	bf00      	nop
 802c474:	f7ff ffde 	bl	802c434 <HAL_GetTick>
 802c478:	4602      	mov	r2, r0
 802c47a:	68bb      	ldr	r3, [r7, #8]
 802c47c:	1ad3      	subs	r3, r2, r3
 802c47e:	68fa      	ldr	r2, [r7, #12]
 802c480:	429a      	cmp	r2, r3
 802c482:	d8f7      	bhi.n	802c474 <HAL_Delay+0x28>
  {
  }
}
 802c484:	bf00      	nop
 802c486:	bf00      	nop
 802c488:	3710      	adds	r7, #16
 802c48a:	46bd      	mov	sp, r7
 802c48c:	bd80      	pop	{r7, pc}
 802c48e:	bf00      	nop
 802c490:	2000005c 	.word	0x2000005c

0802c494 <__NVIC_SetPriorityGrouping>:
{
 802c494:	b480      	push	{r7}
 802c496:	b085      	sub	sp, #20
 802c498:	af00      	add	r7, sp, #0
 802c49a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802c49c:	687b      	ldr	r3, [r7, #4]
 802c49e:	f003 0307 	and.w	r3, r3, #7
 802c4a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802c4a4:	4b0c      	ldr	r3, [pc, #48]	@ (802c4d8 <__NVIC_SetPriorityGrouping+0x44>)
 802c4a6:	68db      	ldr	r3, [r3, #12]
 802c4a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802c4aa:	68ba      	ldr	r2, [r7, #8]
 802c4ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 802c4b0:	4013      	ands	r3, r2
 802c4b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802c4b4:	68fb      	ldr	r3, [r7, #12]
 802c4b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802c4b8:	68bb      	ldr	r3, [r7, #8]
 802c4ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 802c4bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 802c4c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802c4c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802c4c6:	4a04      	ldr	r2, [pc, #16]	@ (802c4d8 <__NVIC_SetPriorityGrouping+0x44>)
 802c4c8:	68bb      	ldr	r3, [r7, #8]
 802c4ca:	60d3      	str	r3, [r2, #12]
}
 802c4cc:	bf00      	nop
 802c4ce:	3714      	adds	r7, #20
 802c4d0:	46bd      	mov	sp, r7
 802c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c4d6:	4770      	bx	lr
 802c4d8:	e000ed00 	.word	0xe000ed00

0802c4dc <__NVIC_GetPriorityGrouping>:
{
 802c4dc:	b480      	push	{r7}
 802c4de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802c4e0:	4b04      	ldr	r3, [pc, #16]	@ (802c4f4 <__NVIC_GetPriorityGrouping+0x18>)
 802c4e2:	68db      	ldr	r3, [r3, #12]
 802c4e4:	0a1b      	lsrs	r3, r3, #8
 802c4e6:	f003 0307 	and.w	r3, r3, #7
}
 802c4ea:	4618      	mov	r0, r3
 802c4ec:	46bd      	mov	sp, r7
 802c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c4f2:	4770      	bx	lr
 802c4f4:	e000ed00 	.word	0xe000ed00

0802c4f8 <__NVIC_EnableIRQ>:
{
 802c4f8:	b480      	push	{r7}
 802c4fa:	b083      	sub	sp, #12
 802c4fc:	af00      	add	r7, sp, #0
 802c4fe:	4603      	mov	r3, r0
 802c500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802c502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802c506:	2b00      	cmp	r3, #0
 802c508:	db0b      	blt.n	802c522 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802c50a:	79fb      	ldrb	r3, [r7, #7]
 802c50c:	f003 021f 	and.w	r2, r3, #31
 802c510:	4907      	ldr	r1, [pc, #28]	@ (802c530 <__NVIC_EnableIRQ+0x38>)
 802c512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802c516:	095b      	lsrs	r3, r3, #5
 802c518:	2001      	movs	r0, #1
 802c51a:	fa00 f202 	lsl.w	r2, r0, r2
 802c51e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 802c522:	bf00      	nop
 802c524:	370c      	adds	r7, #12
 802c526:	46bd      	mov	sp, r7
 802c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c52c:	4770      	bx	lr
 802c52e:	bf00      	nop
 802c530:	e000e100 	.word	0xe000e100

0802c534 <__NVIC_SetPriority>:
{
 802c534:	b480      	push	{r7}
 802c536:	b083      	sub	sp, #12
 802c538:	af00      	add	r7, sp, #0
 802c53a:	4603      	mov	r3, r0
 802c53c:	6039      	str	r1, [r7, #0]
 802c53e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802c540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802c544:	2b00      	cmp	r3, #0
 802c546:	db0a      	blt.n	802c55e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802c548:	683b      	ldr	r3, [r7, #0]
 802c54a:	b2da      	uxtb	r2, r3
 802c54c:	490c      	ldr	r1, [pc, #48]	@ (802c580 <__NVIC_SetPriority+0x4c>)
 802c54e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802c552:	0112      	lsls	r2, r2, #4
 802c554:	b2d2      	uxtb	r2, r2
 802c556:	440b      	add	r3, r1
 802c558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 802c55c:	e00a      	b.n	802c574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802c55e:	683b      	ldr	r3, [r7, #0]
 802c560:	b2da      	uxtb	r2, r3
 802c562:	4908      	ldr	r1, [pc, #32]	@ (802c584 <__NVIC_SetPriority+0x50>)
 802c564:	79fb      	ldrb	r3, [r7, #7]
 802c566:	f003 030f 	and.w	r3, r3, #15
 802c56a:	3b04      	subs	r3, #4
 802c56c:	0112      	lsls	r2, r2, #4
 802c56e:	b2d2      	uxtb	r2, r2
 802c570:	440b      	add	r3, r1
 802c572:	761a      	strb	r2, [r3, #24]
}
 802c574:	bf00      	nop
 802c576:	370c      	adds	r7, #12
 802c578:	46bd      	mov	sp, r7
 802c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c57e:	4770      	bx	lr
 802c580:	e000e100 	.word	0xe000e100
 802c584:	e000ed00 	.word	0xe000ed00

0802c588 <NVIC_EncodePriority>:
{
 802c588:	b480      	push	{r7}
 802c58a:	b089      	sub	sp, #36	@ 0x24
 802c58c:	af00      	add	r7, sp, #0
 802c58e:	60f8      	str	r0, [r7, #12]
 802c590:	60b9      	str	r1, [r7, #8]
 802c592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802c594:	68fb      	ldr	r3, [r7, #12]
 802c596:	f003 0307 	and.w	r3, r3, #7
 802c59a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802c59c:	69fb      	ldr	r3, [r7, #28]
 802c59e:	f1c3 0307 	rsb	r3, r3, #7
 802c5a2:	2b04      	cmp	r3, #4
 802c5a4:	bf28      	it	cs
 802c5a6:	2304      	movcs	r3, #4
 802c5a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802c5aa:	69fb      	ldr	r3, [r7, #28]
 802c5ac:	3304      	adds	r3, #4
 802c5ae:	2b06      	cmp	r3, #6
 802c5b0:	d902      	bls.n	802c5b8 <NVIC_EncodePriority+0x30>
 802c5b2:	69fb      	ldr	r3, [r7, #28]
 802c5b4:	3b03      	subs	r3, #3
 802c5b6:	e000      	b.n	802c5ba <NVIC_EncodePriority+0x32>
 802c5b8:	2300      	movs	r3, #0
 802c5ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802c5bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802c5c0:	69bb      	ldr	r3, [r7, #24]
 802c5c2:	fa02 f303 	lsl.w	r3, r2, r3
 802c5c6:	43da      	mvns	r2, r3
 802c5c8:	68bb      	ldr	r3, [r7, #8]
 802c5ca:	401a      	ands	r2, r3
 802c5cc:	697b      	ldr	r3, [r7, #20]
 802c5ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802c5d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 802c5d4:	697b      	ldr	r3, [r7, #20]
 802c5d6:	fa01 f303 	lsl.w	r3, r1, r3
 802c5da:	43d9      	mvns	r1, r3
 802c5dc:	687b      	ldr	r3, [r7, #4]
 802c5de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802c5e0:	4313      	orrs	r3, r2
}
 802c5e2:	4618      	mov	r0, r3
 802c5e4:	3724      	adds	r7, #36	@ 0x24
 802c5e6:	46bd      	mov	sp, r7
 802c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c5ec:	4770      	bx	lr
	...

0802c5f0 <SysTick_Config>:
{
 802c5f0:	b580      	push	{r7, lr}
 802c5f2:	b082      	sub	sp, #8
 802c5f4:	af00      	add	r7, sp, #0
 802c5f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802c5f8:	687b      	ldr	r3, [r7, #4]
 802c5fa:	3b01      	subs	r3, #1
 802c5fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802c600:	d301      	bcc.n	802c606 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 802c602:	2301      	movs	r3, #1
 802c604:	e00f      	b.n	802c626 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802c606:	4a0a      	ldr	r2, [pc, #40]	@ (802c630 <SysTick_Config+0x40>)
 802c608:	687b      	ldr	r3, [r7, #4]
 802c60a:	3b01      	subs	r3, #1
 802c60c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802c60e:	210f      	movs	r1, #15
 802c610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c614:	f7ff ff8e 	bl	802c534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802c618:	4b05      	ldr	r3, [pc, #20]	@ (802c630 <SysTick_Config+0x40>)
 802c61a:	2200      	movs	r2, #0
 802c61c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802c61e:	4b04      	ldr	r3, [pc, #16]	@ (802c630 <SysTick_Config+0x40>)
 802c620:	2207      	movs	r2, #7
 802c622:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 802c624:	2300      	movs	r3, #0
}
 802c626:	4618      	mov	r0, r3
 802c628:	3708      	adds	r7, #8
 802c62a:	46bd      	mov	sp, r7
 802c62c:	bd80      	pop	{r7, pc}
 802c62e:	bf00      	nop
 802c630:	e000e010 	.word	0xe000e010

0802c634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802c634:	b580      	push	{r7, lr}
 802c636:	b082      	sub	sp, #8
 802c638:	af00      	add	r7, sp, #0
 802c63a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802c63c:	6878      	ldr	r0, [r7, #4]
 802c63e:	f7ff ff29 	bl	802c494 <__NVIC_SetPriorityGrouping>
}
 802c642:	bf00      	nop
 802c644:	3708      	adds	r7, #8
 802c646:	46bd      	mov	sp, r7
 802c648:	bd80      	pop	{r7, pc}

0802c64a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802c64a:	b580      	push	{r7, lr}
 802c64c:	b086      	sub	sp, #24
 802c64e:	af00      	add	r7, sp, #0
 802c650:	4603      	mov	r3, r0
 802c652:	60b9      	str	r1, [r7, #8]
 802c654:	607a      	str	r2, [r7, #4]
 802c656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 802c658:	2300      	movs	r3, #0
 802c65a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 802c65c:	f7ff ff3e 	bl	802c4dc <__NVIC_GetPriorityGrouping>
 802c660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802c662:	687a      	ldr	r2, [r7, #4]
 802c664:	68b9      	ldr	r1, [r7, #8]
 802c666:	6978      	ldr	r0, [r7, #20]
 802c668:	f7ff ff8e 	bl	802c588 <NVIC_EncodePriority>
 802c66c:	4602      	mov	r2, r0
 802c66e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802c672:	4611      	mov	r1, r2
 802c674:	4618      	mov	r0, r3
 802c676:	f7ff ff5d 	bl	802c534 <__NVIC_SetPriority>
}
 802c67a:	bf00      	nop
 802c67c:	3718      	adds	r7, #24
 802c67e:	46bd      	mov	sp, r7
 802c680:	bd80      	pop	{r7, pc}

0802c682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802c682:	b580      	push	{r7, lr}
 802c684:	b082      	sub	sp, #8
 802c686:	af00      	add	r7, sp, #0
 802c688:	4603      	mov	r3, r0
 802c68a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802c68c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802c690:	4618      	mov	r0, r3
 802c692:	f7ff ff31 	bl	802c4f8 <__NVIC_EnableIRQ>
}
 802c696:	bf00      	nop
 802c698:	3708      	adds	r7, #8
 802c69a:	46bd      	mov	sp, r7
 802c69c:	bd80      	pop	{r7, pc}

0802c69e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802c69e:	b580      	push	{r7, lr}
 802c6a0:	b082      	sub	sp, #8
 802c6a2:	af00      	add	r7, sp, #0
 802c6a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802c6a6:	6878      	ldr	r0, [r7, #4]
 802c6a8:	f7ff ffa2 	bl	802c5f0 <SysTick_Config>
 802c6ac:	4603      	mov	r3, r0
}
 802c6ae:	4618      	mov	r0, r3
 802c6b0:	3708      	adds	r7, #8
 802c6b2:	46bd      	mov	sp, r7
 802c6b4:	bd80      	pop	{r7, pc}
	...

0802c6b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 802c6b8:	b580      	push	{r7, lr}
 802c6ba:	b086      	sub	sp, #24
 802c6bc:	af00      	add	r7, sp, #0
 802c6be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 802c6c0:	2300      	movs	r3, #0
 802c6c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 802c6c4:	f7ff feb6 	bl	802c434 <HAL_GetTick>
 802c6c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 802c6ca:	687b      	ldr	r3, [r7, #4]
 802c6cc:	2b00      	cmp	r3, #0
 802c6ce:	d101      	bne.n	802c6d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 802c6d0:	2301      	movs	r3, #1
 802c6d2:	e099      	b.n	802c808 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 802c6d4:	687b      	ldr	r3, [r7, #4]
 802c6d6:	2202      	movs	r2, #2
 802c6d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 802c6dc:	687b      	ldr	r3, [r7, #4]
 802c6de:	2200      	movs	r2, #0
 802c6e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 802c6e4:	687b      	ldr	r3, [r7, #4]
 802c6e6:	681b      	ldr	r3, [r3, #0]
 802c6e8:	681a      	ldr	r2, [r3, #0]
 802c6ea:	687b      	ldr	r3, [r7, #4]
 802c6ec:	681b      	ldr	r3, [r3, #0]
 802c6ee:	f022 0201 	bic.w	r2, r2, #1
 802c6f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802c6f4:	e00f      	b.n	802c716 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802c6f6:	f7ff fe9d 	bl	802c434 <HAL_GetTick>
 802c6fa:	4602      	mov	r2, r0
 802c6fc:	693b      	ldr	r3, [r7, #16]
 802c6fe:	1ad3      	subs	r3, r2, r3
 802c700:	2b05      	cmp	r3, #5
 802c702:	d908      	bls.n	802c716 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802c704:	687b      	ldr	r3, [r7, #4]
 802c706:	2220      	movs	r2, #32
 802c708:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 802c70a:	687b      	ldr	r3, [r7, #4]
 802c70c:	2203      	movs	r2, #3
 802c70e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 802c712:	2303      	movs	r3, #3
 802c714:	e078      	b.n	802c808 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802c716:	687b      	ldr	r3, [r7, #4]
 802c718:	681b      	ldr	r3, [r3, #0]
 802c71a:	681b      	ldr	r3, [r3, #0]
 802c71c:	f003 0301 	and.w	r3, r3, #1
 802c720:	2b00      	cmp	r3, #0
 802c722:	d1e8      	bne.n	802c6f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 802c724:	687b      	ldr	r3, [r7, #4]
 802c726:	681b      	ldr	r3, [r3, #0]
 802c728:	681b      	ldr	r3, [r3, #0]
 802c72a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802c72c:	697a      	ldr	r2, [r7, #20]
 802c72e:	4b38      	ldr	r3, [pc, #224]	@ (802c810 <HAL_DMA_Init+0x158>)
 802c730:	4013      	ands	r3, r2
 802c732:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802c734:	687b      	ldr	r3, [r7, #4]
 802c736:	685a      	ldr	r2, [r3, #4]
 802c738:	687b      	ldr	r3, [r7, #4]
 802c73a:	689b      	ldr	r3, [r3, #8]
 802c73c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802c73e:	687b      	ldr	r3, [r7, #4]
 802c740:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802c742:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802c744:	687b      	ldr	r3, [r7, #4]
 802c746:	691b      	ldr	r3, [r3, #16]
 802c748:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802c74a:	687b      	ldr	r3, [r7, #4]
 802c74c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802c74e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802c750:	687b      	ldr	r3, [r7, #4]
 802c752:	699b      	ldr	r3, [r3, #24]
 802c754:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802c756:	687b      	ldr	r3, [r7, #4]
 802c758:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802c75a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802c75c:	687b      	ldr	r3, [r7, #4]
 802c75e:	6a1b      	ldr	r3, [r3, #32]
 802c760:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802c762:	697a      	ldr	r2, [r7, #20]
 802c764:	4313      	orrs	r3, r2
 802c766:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802c768:	687b      	ldr	r3, [r7, #4]
 802c76a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802c76c:	2b04      	cmp	r3, #4
 802c76e:	d107      	bne.n	802c780 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802c770:	687b      	ldr	r3, [r7, #4]
 802c772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802c774:	687b      	ldr	r3, [r7, #4]
 802c776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802c778:	4313      	orrs	r3, r2
 802c77a:	697a      	ldr	r2, [r7, #20]
 802c77c:	4313      	orrs	r3, r2
 802c77e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 802c780:	687b      	ldr	r3, [r7, #4]
 802c782:	681b      	ldr	r3, [r3, #0]
 802c784:	697a      	ldr	r2, [r7, #20]
 802c786:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 802c788:	687b      	ldr	r3, [r7, #4]
 802c78a:	681b      	ldr	r3, [r3, #0]
 802c78c:	695b      	ldr	r3, [r3, #20]
 802c78e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802c790:	697b      	ldr	r3, [r7, #20]
 802c792:	f023 0307 	bic.w	r3, r3, #7
 802c796:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 802c798:	687b      	ldr	r3, [r7, #4]
 802c79a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802c79c:	697a      	ldr	r2, [r7, #20]
 802c79e:	4313      	orrs	r3, r2
 802c7a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802c7a2:	687b      	ldr	r3, [r7, #4]
 802c7a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802c7a6:	2b04      	cmp	r3, #4
 802c7a8:	d117      	bne.n	802c7da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 802c7aa:	687b      	ldr	r3, [r7, #4]
 802c7ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802c7ae:	697a      	ldr	r2, [r7, #20]
 802c7b0:	4313      	orrs	r3, r2
 802c7b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802c7b4:	687b      	ldr	r3, [r7, #4]
 802c7b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802c7b8:	2b00      	cmp	r3, #0
 802c7ba:	d00e      	beq.n	802c7da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 802c7bc:	6878      	ldr	r0, [r7, #4]
 802c7be:	f000 fa7b 	bl	802ccb8 <DMA_CheckFifoParam>
 802c7c2:	4603      	mov	r3, r0
 802c7c4:	2b00      	cmp	r3, #0
 802c7c6:	d008      	beq.n	802c7da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802c7c8:	687b      	ldr	r3, [r7, #4]
 802c7ca:	2240      	movs	r2, #64	@ 0x40
 802c7cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802c7ce:	687b      	ldr	r3, [r7, #4]
 802c7d0:	2201      	movs	r2, #1
 802c7d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 802c7d6:	2301      	movs	r3, #1
 802c7d8:	e016      	b.n	802c808 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 802c7da:	687b      	ldr	r3, [r7, #4]
 802c7dc:	681b      	ldr	r3, [r3, #0]
 802c7de:	697a      	ldr	r2, [r7, #20]
 802c7e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802c7e2:	6878      	ldr	r0, [r7, #4]
 802c7e4:	f000 fa32 	bl	802cc4c <DMA_CalcBaseAndBitshift>
 802c7e8:	4603      	mov	r3, r0
 802c7ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 802c7ec:	687b      	ldr	r3, [r7, #4]
 802c7ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802c7f0:	223f      	movs	r2, #63	@ 0x3f
 802c7f2:	409a      	lsls	r2, r3
 802c7f4:	68fb      	ldr	r3, [r7, #12]
 802c7f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802c7f8:	687b      	ldr	r3, [r7, #4]
 802c7fa:	2200      	movs	r2, #0
 802c7fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802c7fe:	687b      	ldr	r3, [r7, #4]
 802c800:	2201      	movs	r2, #1
 802c802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 802c806:	2300      	movs	r3, #0
}
 802c808:	4618      	mov	r0, r3
 802c80a:	3718      	adds	r7, #24
 802c80c:	46bd      	mov	sp, r7
 802c80e:	bd80      	pop	{r7, pc}
 802c810:	f010803f 	.word	0xf010803f

0802c814 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 802c814:	b580      	push	{r7, lr}
 802c816:	b084      	sub	sp, #16
 802c818:	af00      	add	r7, sp, #0
 802c81a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802c81c:	687b      	ldr	r3, [r7, #4]
 802c81e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802c820:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 802c822:	f7ff fe07 	bl	802c434 <HAL_GetTick>
 802c826:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802c828:	687b      	ldr	r3, [r7, #4]
 802c82a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 802c82e:	b2db      	uxtb	r3, r3
 802c830:	2b02      	cmp	r3, #2
 802c832:	d008      	beq.n	802c846 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802c834:	687b      	ldr	r3, [r7, #4]
 802c836:	2280      	movs	r2, #128	@ 0x80
 802c838:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802c83a:	687b      	ldr	r3, [r7, #4]
 802c83c:	2200      	movs	r2, #0
 802c83e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 802c842:	2301      	movs	r3, #1
 802c844:	e052      	b.n	802c8ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802c846:	687b      	ldr	r3, [r7, #4]
 802c848:	681b      	ldr	r3, [r3, #0]
 802c84a:	681a      	ldr	r2, [r3, #0]
 802c84c:	687b      	ldr	r3, [r7, #4]
 802c84e:	681b      	ldr	r3, [r3, #0]
 802c850:	f022 0216 	bic.w	r2, r2, #22
 802c854:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 802c856:	687b      	ldr	r3, [r7, #4]
 802c858:	681b      	ldr	r3, [r3, #0]
 802c85a:	695a      	ldr	r2, [r3, #20]
 802c85c:	687b      	ldr	r3, [r7, #4]
 802c85e:	681b      	ldr	r3, [r3, #0]
 802c860:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 802c864:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802c866:	687b      	ldr	r3, [r7, #4]
 802c868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802c86a:	2b00      	cmp	r3, #0
 802c86c:	d103      	bne.n	802c876 <HAL_DMA_Abort+0x62>
 802c86e:	687b      	ldr	r3, [r7, #4]
 802c870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802c872:	2b00      	cmp	r3, #0
 802c874:	d007      	beq.n	802c886 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 802c876:	687b      	ldr	r3, [r7, #4]
 802c878:	681b      	ldr	r3, [r3, #0]
 802c87a:	681a      	ldr	r2, [r3, #0]
 802c87c:	687b      	ldr	r3, [r7, #4]
 802c87e:	681b      	ldr	r3, [r3, #0]
 802c880:	f022 0208 	bic.w	r2, r2, #8
 802c884:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802c886:	687b      	ldr	r3, [r7, #4]
 802c888:	681b      	ldr	r3, [r3, #0]
 802c88a:	681a      	ldr	r2, [r3, #0]
 802c88c:	687b      	ldr	r3, [r7, #4]
 802c88e:	681b      	ldr	r3, [r3, #0]
 802c890:	f022 0201 	bic.w	r2, r2, #1
 802c894:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802c896:	e013      	b.n	802c8c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802c898:	f7ff fdcc 	bl	802c434 <HAL_GetTick>
 802c89c:	4602      	mov	r2, r0
 802c89e:	68bb      	ldr	r3, [r7, #8]
 802c8a0:	1ad3      	subs	r3, r2, r3
 802c8a2:	2b05      	cmp	r3, #5
 802c8a4:	d90c      	bls.n	802c8c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802c8a6:	687b      	ldr	r3, [r7, #4]
 802c8a8:	2220      	movs	r2, #32
 802c8aa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 802c8ac:	687b      	ldr	r3, [r7, #4]
 802c8ae:	2203      	movs	r2, #3
 802c8b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802c8b4:	687b      	ldr	r3, [r7, #4]
 802c8b6:	2200      	movs	r2, #0
 802c8b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 802c8bc:	2303      	movs	r3, #3
 802c8be:	e015      	b.n	802c8ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802c8c0:	687b      	ldr	r3, [r7, #4]
 802c8c2:	681b      	ldr	r3, [r3, #0]
 802c8c4:	681b      	ldr	r3, [r3, #0]
 802c8c6:	f003 0301 	and.w	r3, r3, #1
 802c8ca:	2b00      	cmp	r3, #0
 802c8cc:	d1e4      	bne.n	802c898 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 802c8ce:	687b      	ldr	r3, [r7, #4]
 802c8d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802c8d2:	223f      	movs	r2, #63	@ 0x3f
 802c8d4:	409a      	lsls	r2, r3
 802c8d6:	68fb      	ldr	r3, [r7, #12]
 802c8d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 802c8da:	687b      	ldr	r3, [r7, #4]
 802c8dc:	2201      	movs	r2, #1
 802c8de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802c8e2:	687b      	ldr	r3, [r7, #4]
 802c8e4:	2200      	movs	r2, #0
 802c8e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 802c8ea:	2300      	movs	r3, #0
}
 802c8ec:	4618      	mov	r0, r3
 802c8ee:	3710      	adds	r7, #16
 802c8f0:	46bd      	mov	sp, r7
 802c8f2:	bd80      	pop	{r7, pc}

0802c8f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802c8f4:	b480      	push	{r7}
 802c8f6:	b083      	sub	sp, #12
 802c8f8:	af00      	add	r7, sp, #0
 802c8fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802c8fc:	687b      	ldr	r3, [r7, #4]
 802c8fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 802c902:	b2db      	uxtb	r3, r3
 802c904:	2b02      	cmp	r3, #2
 802c906:	d004      	beq.n	802c912 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802c908:	687b      	ldr	r3, [r7, #4]
 802c90a:	2280      	movs	r2, #128	@ 0x80
 802c90c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 802c90e:	2301      	movs	r3, #1
 802c910:	e00c      	b.n	802c92c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 802c912:	687b      	ldr	r3, [r7, #4]
 802c914:	2205      	movs	r2, #5
 802c916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802c91a:	687b      	ldr	r3, [r7, #4]
 802c91c:	681b      	ldr	r3, [r3, #0]
 802c91e:	681a      	ldr	r2, [r3, #0]
 802c920:	687b      	ldr	r3, [r7, #4]
 802c922:	681b      	ldr	r3, [r3, #0]
 802c924:	f022 0201 	bic.w	r2, r2, #1
 802c928:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 802c92a:	2300      	movs	r3, #0
}
 802c92c:	4618      	mov	r0, r3
 802c92e:	370c      	adds	r7, #12
 802c930:	46bd      	mov	sp, r7
 802c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c936:	4770      	bx	lr

0802c938 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802c938:	b580      	push	{r7, lr}
 802c93a:	b086      	sub	sp, #24
 802c93c:	af00      	add	r7, sp, #0
 802c93e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 802c940:	2300      	movs	r3, #0
 802c942:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 802c944:	4b8e      	ldr	r3, [pc, #568]	@ (802cb80 <HAL_DMA_IRQHandler+0x248>)
 802c946:	681b      	ldr	r3, [r3, #0]
 802c948:	4a8e      	ldr	r2, [pc, #568]	@ (802cb84 <HAL_DMA_IRQHandler+0x24c>)
 802c94a:	fba2 2303 	umull	r2, r3, r2, r3
 802c94e:	0a9b      	lsrs	r3, r3, #10
 802c950:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802c952:	687b      	ldr	r3, [r7, #4]
 802c954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802c956:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 802c958:	693b      	ldr	r3, [r7, #16]
 802c95a:	681b      	ldr	r3, [r3, #0]
 802c95c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 802c95e:	687b      	ldr	r3, [r7, #4]
 802c960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802c962:	2208      	movs	r2, #8
 802c964:	409a      	lsls	r2, r3
 802c966:	68fb      	ldr	r3, [r7, #12]
 802c968:	4013      	ands	r3, r2
 802c96a:	2b00      	cmp	r3, #0
 802c96c:	d01a      	beq.n	802c9a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802c96e:	687b      	ldr	r3, [r7, #4]
 802c970:	681b      	ldr	r3, [r3, #0]
 802c972:	681b      	ldr	r3, [r3, #0]
 802c974:	f003 0304 	and.w	r3, r3, #4
 802c978:	2b00      	cmp	r3, #0
 802c97a:	d013      	beq.n	802c9a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 802c97c:	687b      	ldr	r3, [r7, #4]
 802c97e:	681b      	ldr	r3, [r3, #0]
 802c980:	681a      	ldr	r2, [r3, #0]
 802c982:	687b      	ldr	r3, [r7, #4]
 802c984:	681b      	ldr	r3, [r3, #0]
 802c986:	f022 0204 	bic.w	r2, r2, #4
 802c98a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 802c98c:	687b      	ldr	r3, [r7, #4]
 802c98e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802c990:	2208      	movs	r2, #8
 802c992:	409a      	lsls	r2, r3
 802c994:	693b      	ldr	r3, [r7, #16]
 802c996:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 802c998:	687b      	ldr	r3, [r7, #4]
 802c99a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802c99c:	f043 0201 	orr.w	r2, r3, #1
 802c9a0:	687b      	ldr	r3, [r7, #4]
 802c9a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 802c9a4:	687b      	ldr	r3, [r7, #4]
 802c9a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802c9a8:	2201      	movs	r2, #1
 802c9aa:	409a      	lsls	r2, r3
 802c9ac:	68fb      	ldr	r3, [r7, #12]
 802c9ae:	4013      	ands	r3, r2
 802c9b0:	2b00      	cmp	r3, #0
 802c9b2:	d012      	beq.n	802c9da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 802c9b4:	687b      	ldr	r3, [r7, #4]
 802c9b6:	681b      	ldr	r3, [r3, #0]
 802c9b8:	695b      	ldr	r3, [r3, #20]
 802c9ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802c9be:	2b00      	cmp	r3, #0
 802c9c0:	d00b      	beq.n	802c9da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 802c9c2:	687b      	ldr	r3, [r7, #4]
 802c9c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802c9c6:	2201      	movs	r2, #1
 802c9c8:	409a      	lsls	r2, r3
 802c9ca:	693b      	ldr	r3, [r7, #16]
 802c9cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802c9ce:	687b      	ldr	r3, [r7, #4]
 802c9d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802c9d2:	f043 0202 	orr.w	r2, r3, #2
 802c9d6:	687b      	ldr	r3, [r7, #4]
 802c9d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 802c9da:	687b      	ldr	r3, [r7, #4]
 802c9dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802c9de:	2204      	movs	r2, #4
 802c9e0:	409a      	lsls	r2, r3
 802c9e2:	68fb      	ldr	r3, [r7, #12]
 802c9e4:	4013      	ands	r3, r2
 802c9e6:	2b00      	cmp	r3, #0
 802c9e8:	d012      	beq.n	802ca10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 802c9ea:	687b      	ldr	r3, [r7, #4]
 802c9ec:	681b      	ldr	r3, [r3, #0]
 802c9ee:	681b      	ldr	r3, [r3, #0]
 802c9f0:	f003 0302 	and.w	r3, r3, #2
 802c9f4:	2b00      	cmp	r3, #0
 802c9f6:	d00b      	beq.n	802ca10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 802c9f8:	687b      	ldr	r3, [r7, #4]
 802c9fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802c9fc:	2204      	movs	r2, #4
 802c9fe:	409a      	lsls	r2, r3
 802ca00:	693b      	ldr	r3, [r7, #16]
 802ca02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 802ca04:	687b      	ldr	r3, [r7, #4]
 802ca06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802ca08:	f043 0204 	orr.w	r2, r3, #4
 802ca0c:	687b      	ldr	r3, [r7, #4]
 802ca0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 802ca10:	687b      	ldr	r3, [r7, #4]
 802ca12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802ca14:	2210      	movs	r2, #16
 802ca16:	409a      	lsls	r2, r3
 802ca18:	68fb      	ldr	r3, [r7, #12]
 802ca1a:	4013      	ands	r3, r2
 802ca1c:	2b00      	cmp	r3, #0
 802ca1e:	d043      	beq.n	802caa8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 802ca20:	687b      	ldr	r3, [r7, #4]
 802ca22:	681b      	ldr	r3, [r3, #0]
 802ca24:	681b      	ldr	r3, [r3, #0]
 802ca26:	f003 0308 	and.w	r3, r3, #8
 802ca2a:	2b00      	cmp	r3, #0
 802ca2c:	d03c      	beq.n	802caa8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 802ca2e:	687b      	ldr	r3, [r7, #4]
 802ca30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802ca32:	2210      	movs	r2, #16
 802ca34:	409a      	lsls	r2, r3
 802ca36:	693b      	ldr	r3, [r7, #16]
 802ca38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802ca3a:	687b      	ldr	r3, [r7, #4]
 802ca3c:	681b      	ldr	r3, [r3, #0]
 802ca3e:	681b      	ldr	r3, [r3, #0]
 802ca40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 802ca44:	2b00      	cmp	r3, #0
 802ca46:	d018      	beq.n	802ca7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802ca48:	687b      	ldr	r3, [r7, #4]
 802ca4a:	681b      	ldr	r3, [r3, #0]
 802ca4c:	681b      	ldr	r3, [r3, #0]
 802ca4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 802ca52:	2b00      	cmp	r3, #0
 802ca54:	d108      	bne.n	802ca68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802ca56:	687b      	ldr	r3, [r7, #4]
 802ca58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802ca5a:	2b00      	cmp	r3, #0
 802ca5c:	d024      	beq.n	802caa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802ca5e:	687b      	ldr	r3, [r7, #4]
 802ca60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802ca62:	6878      	ldr	r0, [r7, #4]
 802ca64:	4798      	blx	r3
 802ca66:	e01f      	b.n	802caa8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 802ca68:	687b      	ldr	r3, [r7, #4]
 802ca6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802ca6c:	2b00      	cmp	r3, #0
 802ca6e:	d01b      	beq.n	802caa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 802ca70:	687b      	ldr	r3, [r7, #4]
 802ca72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802ca74:	6878      	ldr	r0, [r7, #4]
 802ca76:	4798      	blx	r3
 802ca78:	e016      	b.n	802caa8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802ca7a:	687b      	ldr	r3, [r7, #4]
 802ca7c:	681b      	ldr	r3, [r3, #0]
 802ca7e:	681b      	ldr	r3, [r3, #0]
 802ca80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802ca84:	2b00      	cmp	r3, #0
 802ca86:	d107      	bne.n	802ca98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802ca88:	687b      	ldr	r3, [r7, #4]
 802ca8a:	681b      	ldr	r3, [r3, #0]
 802ca8c:	681a      	ldr	r2, [r3, #0]
 802ca8e:	687b      	ldr	r3, [r7, #4]
 802ca90:	681b      	ldr	r3, [r3, #0]
 802ca92:	f022 0208 	bic.w	r2, r2, #8
 802ca96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 802ca98:	687b      	ldr	r3, [r7, #4]
 802ca9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802ca9c:	2b00      	cmp	r3, #0
 802ca9e:	d003      	beq.n	802caa8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802caa0:	687b      	ldr	r3, [r7, #4]
 802caa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802caa4:	6878      	ldr	r0, [r7, #4]
 802caa6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 802caa8:	687b      	ldr	r3, [r7, #4]
 802caaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802caac:	2220      	movs	r2, #32
 802caae:	409a      	lsls	r2, r3
 802cab0:	68fb      	ldr	r3, [r7, #12]
 802cab2:	4013      	ands	r3, r2
 802cab4:	2b00      	cmp	r3, #0
 802cab6:	f000 808f 	beq.w	802cbd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 802caba:	687b      	ldr	r3, [r7, #4]
 802cabc:	681b      	ldr	r3, [r3, #0]
 802cabe:	681b      	ldr	r3, [r3, #0]
 802cac0:	f003 0310 	and.w	r3, r3, #16
 802cac4:	2b00      	cmp	r3, #0
 802cac6:	f000 8087 	beq.w	802cbd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 802caca:	687b      	ldr	r3, [r7, #4]
 802cacc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802cace:	2220      	movs	r2, #32
 802cad0:	409a      	lsls	r2, r3
 802cad2:	693b      	ldr	r3, [r7, #16]
 802cad4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 802cad6:	687b      	ldr	r3, [r7, #4]
 802cad8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 802cadc:	b2db      	uxtb	r3, r3
 802cade:	2b05      	cmp	r3, #5
 802cae0:	d136      	bne.n	802cb50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802cae2:	687b      	ldr	r3, [r7, #4]
 802cae4:	681b      	ldr	r3, [r3, #0]
 802cae6:	681a      	ldr	r2, [r3, #0]
 802cae8:	687b      	ldr	r3, [r7, #4]
 802caea:	681b      	ldr	r3, [r3, #0]
 802caec:	f022 0216 	bic.w	r2, r2, #22
 802caf0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 802caf2:	687b      	ldr	r3, [r7, #4]
 802caf4:	681b      	ldr	r3, [r3, #0]
 802caf6:	695a      	ldr	r2, [r3, #20]
 802caf8:	687b      	ldr	r3, [r7, #4]
 802cafa:	681b      	ldr	r3, [r3, #0]
 802cafc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 802cb00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802cb02:	687b      	ldr	r3, [r7, #4]
 802cb04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802cb06:	2b00      	cmp	r3, #0
 802cb08:	d103      	bne.n	802cb12 <HAL_DMA_IRQHandler+0x1da>
 802cb0a:	687b      	ldr	r3, [r7, #4]
 802cb0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802cb0e:	2b00      	cmp	r3, #0
 802cb10:	d007      	beq.n	802cb22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802cb12:	687b      	ldr	r3, [r7, #4]
 802cb14:	681b      	ldr	r3, [r3, #0]
 802cb16:	681a      	ldr	r2, [r3, #0]
 802cb18:	687b      	ldr	r3, [r7, #4]
 802cb1a:	681b      	ldr	r3, [r3, #0]
 802cb1c:	f022 0208 	bic.w	r2, r2, #8
 802cb20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 802cb22:	687b      	ldr	r3, [r7, #4]
 802cb24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802cb26:	223f      	movs	r2, #63	@ 0x3f
 802cb28:	409a      	lsls	r2, r3
 802cb2a:	693b      	ldr	r3, [r7, #16]
 802cb2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802cb2e:	687b      	ldr	r3, [r7, #4]
 802cb30:	2201      	movs	r2, #1
 802cb32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802cb36:	687b      	ldr	r3, [r7, #4]
 802cb38:	2200      	movs	r2, #0
 802cb3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 802cb3e:	687b      	ldr	r3, [r7, #4]
 802cb40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802cb42:	2b00      	cmp	r3, #0
 802cb44:	d07e      	beq.n	802cc44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 802cb46:	687b      	ldr	r3, [r7, #4]
 802cb48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802cb4a:	6878      	ldr	r0, [r7, #4]
 802cb4c:	4798      	blx	r3
        }
        return;
 802cb4e:	e079      	b.n	802cc44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802cb50:	687b      	ldr	r3, [r7, #4]
 802cb52:	681b      	ldr	r3, [r3, #0]
 802cb54:	681b      	ldr	r3, [r3, #0]
 802cb56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 802cb5a:	2b00      	cmp	r3, #0
 802cb5c:	d01d      	beq.n	802cb9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802cb5e:	687b      	ldr	r3, [r7, #4]
 802cb60:	681b      	ldr	r3, [r3, #0]
 802cb62:	681b      	ldr	r3, [r3, #0]
 802cb64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 802cb68:	2b00      	cmp	r3, #0
 802cb6a:	d10d      	bne.n	802cb88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 802cb6c:	687b      	ldr	r3, [r7, #4]
 802cb6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802cb70:	2b00      	cmp	r3, #0
 802cb72:	d031      	beq.n	802cbd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 802cb74:	687b      	ldr	r3, [r7, #4]
 802cb76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802cb78:	6878      	ldr	r0, [r7, #4]
 802cb7a:	4798      	blx	r3
 802cb7c:	e02c      	b.n	802cbd8 <HAL_DMA_IRQHandler+0x2a0>
 802cb7e:	bf00      	nop
 802cb80:	20000054 	.word	0x20000054
 802cb84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802cb88:	687b      	ldr	r3, [r7, #4]
 802cb8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802cb8c:	2b00      	cmp	r3, #0
 802cb8e:	d023      	beq.n	802cbd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 802cb90:	687b      	ldr	r3, [r7, #4]
 802cb92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802cb94:	6878      	ldr	r0, [r7, #4]
 802cb96:	4798      	blx	r3
 802cb98:	e01e      	b.n	802cbd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802cb9a:	687b      	ldr	r3, [r7, #4]
 802cb9c:	681b      	ldr	r3, [r3, #0]
 802cb9e:	681b      	ldr	r3, [r3, #0]
 802cba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802cba4:	2b00      	cmp	r3, #0
 802cba6:	d10f      	bne.n	802cbc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 802cba8:	687b      	ldr	r3, [r7, #4]
 802cbaa:	681b      	ldr	r3, [r3, #0]
 802cbac:	681a      	ldr	r2, [r3, #0]
 802cbae:	687b      	ldr	r3, [r7, #4]
 802cbb0:	681b      	ldr	r3, [r3, #0]
 802cbb2:	f022 0210 	bic.w	r2, r2, #16
 802cbb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802cbb8:	687b      	ldr	r3, [r7, #4]
 802cbba:	2201      	movs	r2, #1
 802cbbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802cbc0:	687b      	ldr	r3, [r7, #4]
 802cbc2:	2200      	movs	r2, #0
 802cbc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 802cbc8:	687b      	ldr	r3, [r7, #4]
 802cbca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802cbcc:	2b00      	cmp	r3, #0
 802cbce:	d003      	beq.n	802cbd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802cbd0:	687b      	ldr	r3, [r7, #4]
 802cbd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802cbd4:	6878      	ldr	r0, [r7, #4]
 802cbd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802cbd8:	687b      	ldr	r3, [r7, #4]
 802cbda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802cbdc:	2b00      	cmp	r3, #0
 802cbde:	d032      	beq.n	802cc46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 802cbe0:	687b      	ldr	r3, [r7, #4]
 802cbe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802cbe4:	f003 0301 	and.w	r3, r3, #1
 802cbe8:	2b00      	cmp	r3, #0
 802cbea:	d022      	beq.n	802cc32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 802cbec:	687b      	ldr	r3, [r7, #4]
 802cbee:	2205      	movs	r2, #5
 802cbf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802cbf4:	687b      	ldr	r3, [r7, #4]
 802cbf6:	681b      	ldr	r3, [r3, #0]
 802cbf8:	681a      	ldr	r2, [r3, #0]
 802cbfa:	687b      	ldr	r3, [r7, #4]
 802cbfc:	681b      	ldr	r3, [r3, #0]
 802cbfe:	f022 0201 	bic.w	r2, r2, #1
 802cc02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 802cc04:	68bb      	ldr	r3, [r7, #8]
 802cc06:	3301      	adds	r3, #1
 802cc08:	60bb      	str	r3, [r7, #8]
 802cc0a:	697a      	ldr	r2, [r7, #20]
 802cc0c:	429a      	cmp	r2, r3
 802cc0e:	d307      	bcc.n	802cc20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 802cc10:	687b      	ldr	r3, [r7, #4]
 802cc12:	681b      	ldr	r3, [r3, #0]
 802cc14:	681b      	ldr	r3, [r3, #0]
 802cc16:	f003 0301 	and.w	r3, r3, #1
 802cc1a:	2b00      	cmp	r3, #0
 802cc1c:	d1f2      	bne.n	802cc04 <HAL_DMA_IRQHandler+0x2cc>
 802cc1e:	e000      	b.n	802cc22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 802cc20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802cc22:	687b      	ldr	r3, [r7, #4]
 802cc24:	2201      	movs	r2, #1
 802cc26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802cc2a:	687b      	ldr	r3, [r7, #4]
 802cc2c:	2200      	movs	r2, #0
 802cc2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 802cc32:	687b      	ldr	r3, [r7, #4]
 802cc34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802cc36:	2b00      	cmp	r3, #0
 802cc38:	d005      	beq.n	802cc46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 802cc3a:	687b      	ldr	r3, [r7, #4]
 802cc3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802cc3e:	6878      	ldr	r0, [r7, #4]
 802cc40:	4798      	blx	r3
 802cc42:	e000      	b.n	802cc46 <HAL_DMA_IRQHandler+0x30e>
        return;
 802cc44:	bf00      	nop
    }
  }
}
 802cc46:	3718      	adds	r7, #24
 802cc48:	46bd      	mov	sp, r7
 802cc4a:	bd80      	pop	{r7, pc}

0802cc4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802cc4c:	b480      	push	{r7}
 802cc4e:	b085      	sub	sp, #20
 802cc50:	af00      	add	r7, sp, #0
 802cc52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 802cc54:	687b      	ldr	r3, [r7, #4]
 802cc56:	681b      	ldr	r3, [r3, #0]
 802cc58:	b2db      	uxtb	r3, r3
 802cc5a:	3b10      	subs	r3, #16
 802cc5c:	4a14      	ldr	r2, [pc, #80]	@ (802ccb0 <DMA_CalcBaseAndBitshift+0x64>)
 802cc5e:	fba2 2303 	umull	r2, r3, r2, r3
 802cc62:	091b      	lsrs	r3, r3, #4
 802cc64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802cc66:	4a13      	ldr	r2, [pc, #76]	@ (802ccb4 <DMA_CalcBaseAndBitshift+0x68>)
 802cc68:	68fb      	ldr	r3, [r7, #12]
 802cc6a:	4413      	add	r3, r2
 802cc6c:	781b      	ldrb	r3, [r3, #0]
 802cc6e:	461a      	mov	r2, r3
 802cc70:	687b      	ldr	r3, [r7, #4]
 802cc72:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 802cc74:	68fb      	ldr	r3, [r7, #12]
 802cc76:	2b03      	cmp	r3, #3
 802cc78:	d909      	bls.n	802cc8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802cc7a:	687b      	ldr	r3, [r7, #4]
 802cc7c:	681b      	ldr	r3, [r3, #0]
 802cc7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 802cc82:	f023 0303 	bic.w	r3, r3, #3
 802cc86:	1d1a      	adds	r2, r3, #4
 802cc88:	687b      	ldr	r3, [r7, #4]
 802cc8a:	659a      	str	r2, [r3, #88]	@ 0x58
 802cc8c:	e007      	b.n	802cc9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 802cc8e:	687b      	ldr	r3, [r7, #4]
 802cc90:	681b      	ldr	r3, [r3, #0]
 802cc92:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 802cc96:	f023 0303 	bic.w	r3, r3, #3
 802cc9a:	687a      	ldr	r2, [r7, #4]
 802cc9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 802cc9e:	687b      	ldr	r3, [r7, #4]
 802cca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 802cca2:	4618      	mov	r0, r3
 802cca4:	3714      	adds	r7, #20
 802cca6:	46bd      	mov	sp, r7
 802cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ccac:	4770      	bx	lr
 802ccae:	bf00      	nop
 802ccb0:	aaaaaaab 	.word	0xaaaaaaab
 802ccb4:	080330f8 	.word	0x080330f8

0802ccb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 802ccb8:	b480      	push	{r7}
 802ccba:	b085      	sub	sp, #20
 802ccbc:	af00      	add	r7, sp, #0
 802ccbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802ccc0:	2300      	movs	r3, #0
 802ccc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 802ccc4:	687b      	ldr	r3, [r7, #4]
 802ccc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802ccc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802ccca:	687b      	ldr	r3, [r7, #4]
 802cccc:	699b      	ldr	r3, [r3, #24]
 802ccce:	2b00      	cmp	r3, #0
 802ccd0:	d11f      	bne.n	802cd12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 802ccd2:	68bb      	ldr	r3, [r7, #8]
 802ccd4:	2b03      	cmp	r3, #3
 802ccd6:	d856      	bhi.n	802cd86 <DMA_CheckFifoParam+0xce>
 802ccd8:	a201      	add	r2, pc, #4	@ (adr r2, 802cce0 <DMA_CheckFifoParam+0x28>)
 802ccda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ccde:	bf00      	nop
 802cce0:	0802ccf1 	.word	0x0802ccf1
 802cce4:	0802cd03 	.word	0x0802cd03
 802cce8:	0802ccf1 	.word	0x0802ccf1
 802ccec:	0802cd87 	.word	0x0802cd87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802ccf0:	687b      	ldr	r3, [r7, #4]
 802ccf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802ccf4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 802ccf8:	2b00      	cmp	r3, #0
 802ccfa:	d046      	beq.n	802cd8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 802ccfc:	2301      	movs	r3, #1
 802ccfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802cd00:	e043      	b.n	802cd8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802cd02:	687b      	ldr	r3, [r7, #4]
 802cd04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802cd06:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 802cd0a:	d140      	bne.n	802cd8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 802cd0c:	2301      	movs	r3, #1
 802cd0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802cd10:	e03d      	b.n	802cd8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802cd12:	687b      	ldr	r3, [r7, #4]
 802cd14:	699b      	ldr	r3, [r3, #24]
 802cd16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802cd1a:	d121      	bne.n	802cd60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 802cd1c:	68bb      	ldr	r3, [r7, #8]
 802cd1e:	2b03      	cmp	r3, #3
 802cd20:	d837      	bhi.n	802cd92 <DMA_CheckFifoParam+0xda>
 802cd22:	a201      	add	r2, pc, #4	@ (adr r2, 802cd28 <DMA_CheckFifoParam+0x70>)
 802cd24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802cd28:	0802cd39 	.word	0x0802cd39
 802cd2c:	0802cd3f 	.word	0x0802cd3f
 802cd30:	0802cd39 	.word	0x0802cd39
 802cd34:	0802cd51 	.word	0x0802cd51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 802cd38:	2301      	movs	r3, #1
 802cd3a:	73fb      	strb	r3, [r7, #15]
      break;
 802cd3c:	e030      	b.n	802cda0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802cd3e:	687b      	ldr	r3, [r7, #4]
 802cd40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802cd42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 802cd46:	2b00      	cmp	r3, #0
 802cd48:	d025      	beq.n	802cd96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 802cd4a:	2301      	movs	r3, #1
 802cd4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802cd4e:	e022      	b.n	802cd96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802cd50:	687b      	ldr	r3, [r7, #4]
 802cd52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802cd54:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 802cd58:	d11f      	bne.n	802cd9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 802cd5a:	2301      	movs	r3, #1
 802cd5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 802cd5e:	e01c      	b.n	802cd9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 802cd60:	68bb      	ldr	r3, [r7, #8]
 802cd62:	2b02      	cmp	r3, #2
 802cd64:	d903      	bls.n	802cd6e <DMA_CheckFifoParam+0xb6>
 802cd66:	68bb      	ldr	r3, [r7, #8]
 802cd68:	2b03      	cmp	r3, #3
 802cd6a:	d003      	beq.n	802cd74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 802cd6c:	e018      	b.n	802cda0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 802cd6e:	2301      	movs	r3, #1
 802cd70:	73fb      	strb	r3, [r7, #15]
      break;
 802cd72:	e015      	b.n	802cda0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802cd74:	687b      	ldr	r3, [r7, #4]
 802cd76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802cd78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 802cd7c:	2b00      	cmp	r3, #0
 802cd7e:	d00e      	beq.n	802cd9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 802cd80:	2301      	movs	r3, #1
 802cd82:	73fb      	strb	r3, [r7, #15]
      break;
 802cd84:	e00b      	b.n	802cd9e <DMA_CheckFifoParam+0xe6>
      break;
 802cd86:	bf00      	nop
 802cd88:	e00a      	b.n	802cda0 <DMA_CheckFifoParam+0xe8>
      break;
 802cd8a:	bf00      	nop
 802cd8c:	e008      	b.n	802cda0 <DMA_CheckFifoParam+0xe8>
      break;
 802cd8e:	bf00      	nop
 802cd90:	e006      	b.n	802cda0 <DMA_CheckFifoParam+0xe8>
      break;
 802cd92:	bf00      	nop
 802cd94:	e004      	b.n	802cda0 <DMA_CheckFifoParam+0xe8>
      break;
 802cd96:	bf00      	nop
 802cd98:	e002      	b.n	802cda0 <DMA_CheckFifoParam+0xe8>
      break;   
 802cd9a:	bf00      	nop
 802cd9c:	e000      	b.n	802cda0 <DMA_CheckFifoParam+0xe8>
      break;
 802cd9e:	bf00      	nop
    }
  } 
  
  return status; 
 802cda0:	7bfb      	ldrb	r3, [r7, #15]
}
 802cda2:	4618      	mov	r0, r3
 802cda4:	3714      	adds	r7, #20
 802cda6:	46bd      	mov	sp, r7
 802cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cdac:	4770      	bx	lr
 802cdae:	bf00      	nop

0802cdb0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 802cdb0:	b580      	push	{r7, lr}
 802cdb2:	b086      	sub	sp, #24
 802cdb4:	af00      	add	r7, sp, #0
 802cdb6:	60f8      	str	r0, [r7, #12]
 802cdb8:	60b9      	str	r1, [r7, #8]
 802cdba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802cdbe:	4b23      	ldr	r3, [pc, #140]	@ (802ce4c <HAL_FLASH_Program+0x9c>)
 802cdc0:	7e1b      	ldrb	r3, [r3, #24]
 802cdc2:	2b01      	cmp	r3, #1
 802cdc4:	d101      	bne.n	802cdca <HAL_FLASH_Program+0x1a>
 802cdc6:	2302      	movs	r3, #2
 802cdc8:	e03b      	b.n	802ce42 <HAL_FLASH_Program+0x92>
 802cdca:	4b20      	ldr	r3, [pc, #128]	@ (802ce4c <HAL_FLASH_Program+0x9c>)
 802cdcc:	2201      	movs	r2, #1
 802cdce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802cdd0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 802cdd4:	f000 f870 	bl	802ceb8 <FLASH_WaitForLastOperation>
 802cdd8:	4603      	mov	r3, r0
 802cdda:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 802cddc:	7dfb      	ldrb	r3, [r7, #23]
 802cdde:	2b00      	cmp	r3, #0
 802cde0:	d12b      	bne.n	802ce3a <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 802cde2:	68fb      	ldr	r3, [r7, #12]
 802cde4:	2b00      	cmp	r3, #0
 802cde6:	d105      	bne.n	802cdf4 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 802cde8:	783b      	ldrb	r3, [r7, #0]
 802cdea:	4619      	mov	r1, r3
 802cdec:	68b8      	ldr	r0, [r7, #8]
 802cdee:	f000 f91b 	bl	802d028 <FLASH_Program_Byte>
 802cdf2:	e016      	b.n	802ce22 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 802cdf4:	68fb      	ldr	r3, [r7, #12]
 802cdf6:	2b01      	cmp	r3, #1
 802cdf8:	d105      	bne.n	802ce06 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 802cdfa:	883b      	ldrh	r3, [r7, #0]
 802cdfc:	4619      	mov	r1, r3
 802cdfe:	68b8      	ldr	r0, [r7, #8]
 802ce00:	f000 f8ee 	bl	802cfe0 <FLASH_Program_HalfWord>
 802ce04:	e00d      	b.n	802ce22 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 802ce06:	68fb      	ldr	r3, [r7, #12]
 802ce08:	2b02      	cmp	r3, #2
 802ce0a:	d105      	bne.n	802ce18 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 802ce0c:	683b      	ldr	r3, [r7, #0]
 802ce0e:	4619      	mov	r1, r3
 802ce10:	68b8      	ldr	r0, [r7, #8]
 802ce12:	f000 f8c3 	bl	802cf9c <FLASH_Program_Word>
 802ce16:	e004      	b.n	802ce22 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 802ce18:	e9d7 2300 	ldrd	r2, r3, [r7]
 802ce1c:	68b8      	ldr	r0, [r7, #8]
 802ce1e:	f000 f88b 	bl	802cf38 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802ce22:	f24c 3050 	movw	r0, #50000	@ 0xc350
 802ce26:	f000 f847 	bl	802ceb8 <FLASH_WaitForLastOperation>
 802ce2a:	4603      	mov	r3, r0
 802ce2c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 802ce2e:	4b08      	ldr	r3, [pc, #32]	@ (802ce50 <HAL_FLASH_Program+0xa0>)
 802ce30:	691b      	ldr	r3, [r3, #16]
 802ce32:	4a07      	ldr	r2, [pc, #28]	@ (802ce50 <HAL_FLASH_Program+0xa0>)
 802ce34:	f023 0301 	bic.w	r3, r3, #1
 802ce38:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802ce3a:	4b04      	ldr	r3, [pc, #16]	@ (802ce4c <HAL_FLASH_Program+0x9c>)
 802ce3c:	2200      	movs	r2, #0
 802ce3e:	761a      	strb	r2, [r3, #24]

  return status;
 802ce40:	7dfb      	ldrb	r3, [r7, #23]
}
 802ce42:	4618      	mov	r0, r3
 802ce44:	3718      	adds	r7, #24
 802ce46:	46bd      	mov	sp, r7
 802ce48:	bd80      	pop	{r7, pc}
 802ce4a:	bf00      	nop
 802ce4c:	20000060 	.word	0x20000060
 802ce50:	40023c00 	.word	0x40023c00

0802ce54 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 802ce54:	b480      	push	{r7}
 802ce56:	b083      	sub	sp, #12
 802ce58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 802ce5a:	2300      	movs	r3, #0
 802ce5c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802ce5e:	4b0b      	ldr	r3, [pc, #44]	@ (802ce8c <HAL_FLASH_Unlock+0x38>)
 802ce60:	691b      	ldr	r3, [r3, #16]
 802ce62:	2b00      	cmp	r3, #0
 802ce64:	da0b      	bge.n	802ce7e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 802ce66:	4b09      	ldr	r3, [pc, #36]	@ (802ce8c <HAL_FLASH_Unlock+0x38>)
 802ce68:	4a09      	ldr	r2, [pc, #36]	@ (802ce90 <HAL_FLASH_Unlock+0x3c>)
 802ce6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 802ce6c:	4b07      	ldr	r3, [pc, #28]	@ (802ce8c <HAL_FLASH_Unlock+0x38>)
 802ce6e:	4a09      	ldr	r2, [pc, #36]	@ (802ce94 <HAL_FLASH_Unlock+0x40>)
 802ce70:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802ce72:	4b06      	ldr	r3, [pc, #24]	@ (802ce8c <HAL_FLASH_Unlock+0x38>)
 802ce74:	691b      	ldr	r3, [r3, #16]
 802ce76:	2b00      	cmp	r3, #0
 802ce78:	da01      	bge.n	802ce7e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 802ce7a:	2301      	movs	r3, #1
 802ce7c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 802ce7e:	79fb      	ldrb	r3, [r7, #7]
}
 802ce80:	4618      	mov	r0, r3
 802ce82:	370c      	adds	r7, #12
 802ce84:	46bd      	mov	sp, r7
 802ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ce8a:	4770      	bx	lr
 802ce8c:	40023c00 	.word	0x40023c00
 802ce90:	45670123 	.word	0x45670123
 802ce94:	cdef89ab 	.word	0xcdef89ab

0802ce98 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 802ce98:	b480      	push	{r7}
 802ce9a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 802ce9c:	4b05      	ldr	r3, [pc, #20]	@ (802ceb4 <HAL_FLASH_Lock+0x1c>)
 802ce9e:	691b      	ldr	r3, [r3, #16]
 802cea0:	4a04      	ldr	r2, [pc, #16]	@ (802ceb4 <HAL_FLASH_Lock+0x1c>)
 802cea2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 802cea6:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 802cea8:	2300      	movs	r3, #0
}
 802ceaa:	4618      	mov	r0, r3
 802ceac:	46bd      	mov	sp, r7
 802ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ceb2:	4770      	bx	lr
 802ceb4:	40023c00 	.word	0x40023c00

0802ceb8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 802ceb8:	b580      	push	{r7, lr}
 802ceba:	b084      	sub	sp, #16
 802cebc:	af00      	add	r7, sp, #0
 802cebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802cec0:	2300      	movs	r3, #0
 802cec2:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 802cec4:	4b1a      	ldr	r3, [pc, #104]	@ (802cf30 <FLASH_WaitForLastOperation+0x78>)
 802cec6:	2200      	movs	r2, #0
 802cec8:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 802ceca:	f7ff fab3 	bl	802c434 <HAL_GetTick>
 802cece:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 802ced0:	e010      	b.n	802cef4 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 802ced2:	687b      	ldr	r3, [r7, #4]
 802ced4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802ced8:	d00c      	beq.n	802cef4 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 802ceda:	687b      	ldr	r3, [r7, #4]
 802cedc:	2b00      	cmp	r3, #0
 802cede:	d007      	beq.n	802cef0 <FLASH_WaitForLastOperation+0x38>
 802cee0:	f7ff faa8 	bl	802c434 <HAL_GetTick>
 802cee4:	4602      	mov	r2, r0
 802cee6:	68fb      	ldr	r3, [r7, #12]
 802cee8:	1ad3      	subs	r3, r2, r3
 802ceea:	687a      	ldr	r2, [r7, #4]
 802ceec:	429a      	cmp	r2, r3
 802ceee:	d201      	bcs.n	802cef4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 802cef0:	2303      	movs	r3, #3
 802cef2:	e019      	b.n	802cf28 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 802cef4:	4b0f      	ldr	r3, [pc, #60]	@ (802cf34 <FLASH_WaitForLastOperation+0x7c>)
 802cef6:	68db      	ldr	r3, [r3, #12]
 802cef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802cefc:	2b00      	cmp	r3, #0
 802cefe:	d1e8      	bne.n	802ced2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 802cf00:	4b0c      	ldr	r3, [pc, #48]	@ (802cf34 <FLASH_WaitForLastOperation+0x7c>)
 802cf02:	68db      	ldr	r3, [r3, #12]
 802cf04:	f003 0301 	and.w	r3, r3, #1
 802cf08:	2b00      	cmp	r3, #0
 802cf0a:	d002      	beq.n	802cf12 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 802cf0c:	4b09      	ldr	r3, [pc, #36]	@ (802cf34 <FLASH_WaitForLastOperation+0x7c>)
 802cf0e:	2201      	movs	r2, #1
 802cf10:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 802cf12:	4b08      	ldr	r3, [pc, #32]	@ (802cf34 <FLASH_WaitForLastOperation+0x7c>)
 802cf14:	68db      	ldr	r3, [r3, #12]
 802cf16:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 802cf1a:	2b00      	cmp	r3, #0
 802cf1c:	d003      	beq.n	802cf26 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 802cf1e:	f000 f8a5 	bl	802d06c <FLASH_SetErrorCode>
    return HAL_ERROR;
 802cf22:	2301      	movs	r3, #1
 802cf24:	e000      	b.n	802cf28 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 802cf26:	2300      	movs	r3, #0

}
 802cf28:	4618      	mov	r0, r3
 802cf2a:	3710      	adds	r7, #16
 802cf2c:	46bd      	mov	sp, r7
 802cf2e:	bd80      	pop	{r7, pc}
 802cf30:	20000060 	.word	0x20000060
 802cf34:	40023c00 	.word	0x40023c00

0802cf38 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 802cf38:	b480      	push	{r7}
 802cf3a:	b085      	sub	sp, #20
 802cf3c:	af00      	add	r7, sp, #0
 802cf3e:	60f8      	str	r0, [r7, #12]
 802cf40:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802cf44:	4b14      	ldr	r3, [pc, #80]	@ (802cf98 <FLASH_Program_DoubleWord+0x60>)
 802cf46:	691b      	ldr	r3, [r3, #16]
 802cf48:	4a13      	ldr	r2, [pc, #76]	@ (802cf98 <FLASH_Program_DoubleWord+0x60>)
 802cf4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802cf4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 802cf50:	4b11      	ldr	r3, [pc, #68]	@ (802cf98 <FLASH_Program_DoubleWord+0x60>)
 802cf52:	691b      	ldr	r3, [r3, #16]
 802cf54:	4a10      	ldr	r2, [pc, #64]	@ (802cf98 <FLASH_Program_DoubleWord+0x60>)
 802cf56:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 802cf5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802cf5c:	4b0e      	ldr	r3, [pc, #56]	@ (802cf98 <FLASH_Program_DoubleWord+0x60>)
 802cf5e:	691b      	ldr	r3, [r3, #16]
 802cf60:	4a0d      	ldr	r2, [pc, #52]	@ (802cf98 <FLASH_Program_DoubleWord+0x60>)
 802cf62:	f043 0301 	orr.w	r3, r3, #1
 802cf66:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 802cf68:	68fb      	ldr	r3, [r7, #12]
 802cf6a:	683a      	ldr	r2, [r7, #0]
 802cf6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 802cf6e:	f3bf 8f6f 	isb	sy
}
 802cf72:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 802cf74:	e9d7 0100 	ldrd	r0, r1, [r7]
 802cf78:	f04f 0200 	mov.w	r2, #0
 802cf7c:	f04f 0300 	mov.w	r3, #0
 802cf80:	000a      	movs	r2, r1
 802cf82:	2300      	movs	r3, #0
 802cf84:	68f9      	ldr	r1, [r7, #12]
 802cf86:	3104      	adds	r1, #4
 802cf88:	4613      	mov	r3, r2
 802cf8a:	600b      	str	r3, [r1, #0]
}
 802cf8c:	bf00      	nop
 802cf8e:	3714      	adds	r7, #20
 802cf90:	46bd      	mov	sp, r7
 802cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cf96:	4770      	bx	lr
 802cf98:	40023c00 	.word	0x40023c00

0802cf9c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 802cf9c:	b480      	push	{r7}
 802cf9e:	b083      	sub	sp, #12
 802cfa0:	af00      	add	r7, sp, #0
 802cfa2:	6078      	str	r0, [r7, #4]
 802cfa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802cfa6:	4b0d      	ldr	r3, [pc, #52]	@ (802cfdc <FLASH_Program_Word+0x40>)
 802cfa8:	691b      	ldr	r3, [r3, #16]
 802cfaa:	4a0c      	ldr	r2, [pc, #48]	@ (802cfdc <FLASH_Program_Word+0x40>)
 802cfac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802cfb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 802cfb2:	4b0a      	ldr	r3, [pc, #40]	@ (802cfdc <FLASH_Program_Word+0x40>)
 802cfb4:	691b      	ldr	r3, [r3, #16]
 802cfb6:	4a09      	ldr	r2, [pc, #36]	@ (802cfdc <FLASH_Program_Word+0x40>)
 802cfb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 802cfbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802cfbe:	4b07      	ldr	r3, [pc, #28]	@ (802cfdc <FLASH_Program_Word+0x40>)
 802cfc0:	691b      	ldr	r3, [r3, #16]
 802cfc2:	4a06      	ldr	r2, [pc, #24]	@ (802cfdc <FLASH_Program_Word+0x40>)
 802cfc4:	f043 0301 	orr.w	r3, r3, #1
 802cfc8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 802cfca:	687b      	ldr	r3, [r7, #4]
 802cfcc:	683a      	ldr	r2, [r7, #0]
 802cfce:	601a      	str	r2, [r3, #0]
}
 802cfd0:	bf00      	nop
 802cfd2:	370c      	adds	r7, #12
 802cfd4:	46bd      	mov	sp, r7
 802cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cfda:	4770      	bx	lr
 802cfdc:	40023c00 	.word	0x40023c00

0802cfe0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 802cfe0:	b480      	push	{r7}
 802cfe2:	b083      	sub	sp, #12
 802cfe4:	af00      	add	r7, sp, #0
 802cfe6:	6078      	str	r0, [r7, #4]
 802cfe8:	460b      	mov	r3, r1
 802cfea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802cfec:	4b0d      	ldr	r3, [pc, #52]	@ (802d024 <FLASH_Program_HalfWord+0x44>)
 802cfee:	691b      	ldr	r3, [r3, #16]
 802cff0:	4a0c      	ldr	r2, [pc, #48]	@ (802d024 <FLASH_Program_HalfWord+0x44>)
 802cff2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802cff6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 802cff8:	4b0a      	ldr	r3, [pc, #40]	@ (802d024 <FLASH_Program_HalfWord+0x44>)
 802cffa:	691b      	ldr	r3, [r3, #16]
 802cffc:	4a09      	ldr	r2, [pc, #36]	@ (802d024 <FLASH_Program_HalfWord+0x44>)
 802cffe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 802d002:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802d004:	4b07      	ldr	r3, [pc, #28]	@ (802d024 <FLASH_Program_HalfWord+0x44>)
 802d006:	691b      	ldr	r3, [r3, #16]
 802d008:	4a06      	ldr	r2, [pc, #24]	@ (802d024 <FLASH_Program_HalfWord+0x44>)
 802d00a:	f043 0301 	orr.w	r3, r3, #1
 802d00e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 802d010:	687b      	ldr	r3, [r7, #4]
 802d012:	887a      	ldrh	r2, [r7, #2]
 802d014:	801a      	strh	r2, [r3, #0]
}
 802d016:	bf00      	nop
 802d018:	370c      	adds	r7, #12
 802d01a:	46bd      	mov	sp, r7
 802d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d020:	4770      	bx	lr
 802d022:	bf00      	nop
 802d024:	40023c00 	.word	0x40023c00

0802d028 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 802d028:	b480      	push	{r7}
 802d02a:	b083      	sub	sp, #12
 802d02c:	af00      	add	r7, sp, #0
 802d02e:	6078      	str	r0, [r7, #4]
 802d030:	460b      	mov	r3, r1
 802d032:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802d034:	4b0c      	ldr	r3, [pc, #48]	@ (802d068 <FLASH_Program_Byte+0x40>)
 802d036:	691b      	ldr	r3, [r3, #16]
 802d038:	4a0b      	ldr	r2, [pc, #44]	@ (802d068 <FLASH_Program_Byte+0x40>)
 802d03a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802d03e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 802d040:	4b09      	ldr	r3, [pc, #36]	@ (802d068 <FLASH_Program_Byte+0x40>)
 802d042:	4a09      	ldr	r2, [pc, #36]	@ (802d068 <FLASH_Program_Byte+0x40>)
 802d044:	691b      	ldr	r3, [r3, #16]
 802d046:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802d048:	4b07      	ldr	r3, [pc, #28]	@ (802d068 <FLASH_Program_Byte+0x40>)
 802d04a:	691b      	ldr	r3, [r3, #16]
 802d04c:	4a06      	ldr	r2, [pc, #24]	@ (802d068 <FLASH_Program_Byte+0x40>)
 802d04e:	f043 0301 	orr.w	r3, r3, #1
 802d052:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 802d054:	687b      	ldr	r3, [r7, #4]
 802d056:	78fa      	ldrb	r2, [r7, #3]
 802d058:	701a      	strb	r2, [r3, #0]
}
 802d05a:	bf00      	nop
 802d05c:	370c      	adds	r7, #12
 802d05e:	46bd      	mov	sp, r7
 802d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d064:	4770      	bx	lr
 802d066:	bf00      	nop
 802d068:	40023c00 	.word	0x40023c00

0802d06c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 802d06c:	b480      	push	{r7}
 802d06e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 802d070:	4b27      	ldr	r3, [pc, #156]	@ (802d110 <FLASH_SetErrorCode+0xa4>)
 802d072:	68db      	ldr	r3, [r3, #12]
 802d074:	f003 0310 	and.w	r3, r3, #16
 802d078:	2b00      	cmp	r3, #0
 802d07a:	d008      	beq.n	802d08e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 802d07c:	4b25      	ldr	r3, [pc, #148]	@ (802d114 <FLASH_SetErrorCode+0xa8>)
 802d07e:	69db      	ldr	r3, [r3, #28]
 802d080:	f043 0310 	orr.w	r3, r3, #16
 802d084:	4a23      	ldr	r2, [pc, #140]	@ (802d114 <FLASH_SetErrorCode+0xa8>)
 802d086:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 802d088:	4b21      	ldr	r3, [pc, #132]	@ (802d110 <FLASH_SetErrorCode+0xa4>)
 802d08a:	2210      	movs	r2, #16
 802d08c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 802d08e:	4b20      	ldr	r3, [pc, #128]	@ (802d110 <FLASH_SetErrorCode+0xa4>)
 802d090:	68db      	ldr	r3, [r3, #12]
 802d092:	f003 0320 	and.w	r3, r3, #32
 802d096:	2b00      	cmp	r3, #0
 802d098:	d008      	beq.n	802d0ac <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 802d09a:	4b1e      	ldr	r3, [pc, #120]	@ (802d114 <FLASH_SetErrorCode+0xa8>)
 802d09c:	69db      	ldr	r3, [r3, #28]
 802d09e:	f043 0308 	orr.w	r3, r3, #8
 802d0a2:	4a1c      	ldr	r2, [pc, #112]	@ (802d114 <FLASH_SetErrorCode+0xa8>)
 802d0a4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 802d0a6:	4b1a      	ldr	r3, [pc, #104]	@ (802d110 <FLASH_SetErrorCode+0xa4>)
 802d0a8:	2220      	movs	r2, #32
 802d0aa:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 802d0ac:	4b18      	ldr	r3, [pc, #96]	@ (802d110 <FLASH_SetErrorCode+0xa4>)
 802d0ae:	68db      	ldr	r3, [r3, #12]
 802d0b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802d0b4:	2b00      	cmp	r3, #0
 802d0b6:	d008      	beq.n	802d0ca <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 802d0b8:	4b16      	ldr	r3, [pc, #88]	@ (802d114 <FLASH_SetErrorCode+0xa8>)
 802d0ba:	69db      	ldr	r3, [r3, #28]
 802d0bc:	f043 0304 	orr.w	r3, r3, #4
 802d0c0:	4a14      	ldr	r2, [pc, #80]	@ (802d114 <FLASH_SetErrorCode+0xa8>)
 802d0c2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 802d0c4:	4b12      	ldr	r3, [pc, #72]	@ (802d110 <FLASH_SetErrorCode+0xa4>)
 802d0c6:	2240      	movs	r2, #64	@ 0x40
 802d0c8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 802d0ca:	4b11      	ldr	r3, [pc, #68]	@ (802d110 <FLASH_SetErrorCode+0xa4>)
 802d0cc:	68db      	ldr	r3, [r3, #12]
 802d0ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802d0d2:	2b00      	cmp	r3, #0
 802d0d4:	d008      	beq.n	802d0e8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 802d0d6:	4b0f      	ldr	r3, [pc, #60]	@ (802d114 <FLASH_SetErrorCode+0xa8>)
 802d0d8:	69db      	ldr	r3, [r3, #28]
 802d0da:	f043 0302 	orr.w	r3, r3, #2
 802d0de:	4a0d      	ldr	r2, [pc, #52]	@ (802d114 <FLASH_SetErrorCode+0xa8>)
 802d0e0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 802d0e2:	4b0b      	ldr	r3, [pc, #44]	@ (802d110 <FLASH_SetErrorCode+0xa4>)
 802d0e4:	2280      	movs	r2, #128	@ 0x80
 802d0e6:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 802d0e8:	4b09      	ldr	r3, [pc, #36]	@ (802d110 <FLASH_SetErrorCode+0xa4>)
 802d0ea:	68db      	ldr	r3, [r3, #12]
 802d0ec:	f003 0302 	and.w	r3, r3, #2
 802d0f0:	2b00      	cmp	r3, #0
 802d0f2:	d008      	beq.n	802d106 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 802d0f4:	4b07      	ldr	r3, [pc, #28]	@ (802d114 <FLASH_SetErrorCode+0xa8>)
 802d0f6:	69db      	ldr	r3, [r3, #28]
 802d0f8:	f043 0320 	orr.w	r3, r3, #32
 802d0fc:	4a05      	ldr	r2, [pc, #20]	@ (802d114 <FLASH_SetErrorCode+0xa8>)
 802d0fe:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 802d100:	4b03      	ldr	r3, [pc, #12]	@ (802d110 <FLASH_SetErrorCode+0xa4>)
 802d102:	2202      	movs	r2, #2
 802d104:	60da      	str	r2, [r3, #12]
  }
}
 802d106:	bf00      	nop
 802d108:	46bd      	mov	sp, r7
 802d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d10e:	4770      	bx	lr
 802d110:	40023c00 	.word	0x40023c00
 802d114:	20000060 	.word	0x20000060

0802d118 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 802d118:	b580      	push	{r7, lr}
 802d11a:	b084      	sub	sp, #16
 802d11c:	af00      	add	r7, sp, #0
 802d11e:	6078      	str	r0, [r7, #4]
 802d120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 802d122:	2300      	movs	r3, #0
 802d124:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802d126:	4b31      	ldr	r3, [pc, #196]	@ (802d1ec <HAL_FLASHEx_Erase+0xd4>)
 802d128:	7e1b      	ldrb	r3, [r3, #24]
 802d12a:	2b01      	cmp	r3, #1
 802d12c:	d101      	bne.n	802d132 <HAL_FLASHEx_Erase+0x1a>
 802d12e:	2302      	movs	r3, #2
 802d130:	e058      	b.n	802d1e4 <HAL_FLASHEx_Erase+0xcc>
 802d132:	4b2e      	ldr	r3, [pc, #184]	@ (802d1ec <HAL_FLASHEx_Erase+0xd4>)
 802d134:	2201      	movs	r2, #1
 802d136:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802d138:	f24c 3050 	movw	r0, #50000	@ 0xc350
 802d13c:	f7ff febc 	bl	802ceb8 <FLASH_WaitForLastOperation>
 802d140:	4603      	mov	r3, r0
 802d142:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 802d144:	7bfb      	ldrb	r3, [r7, #15]
 802d146:	2b00      	cmp	r3, #0
 802d148:	d148      	bne.n	802d1dc <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 802d14a:	683b      	ldr	r3, [r7, #0]
 802d14c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802d150:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 802d152:	687b      	ldr	r3, [r7, #4]
 802d154:	681b      	ldr	r3, [r3, #0]
 802d156:	2b01      	cmp	r3, #1
 802d158:	d115      	bne.n	802d186 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 802d15a:	687b      	ldr	r3, [r7, #4]
 802d15c:	691b      	ldr	r3, [r3, #16]
 802d15e:	b2da      	uxtb	r2, r3
 802d160:	687b      	ldr	r3, [r7, #4]
 802d162:	685b      	ldr	r3, [r3, #4]
 802d164:	4619      	mov	r1, r3
 802d166:	4610      	mov	r0, r2
 802d168:	f000 f844 	bl	802d1f4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802d16c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 802d170:	f7ff fea2 	bl	802ceb8 <FLASH_WaitForLastOperation>
 802d174:	4603      	mov	r3, r0
 802d176:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 802d178:	4b1d      	ldr	r3, [pc, #116]	@ (802d1f0 <HAL_FLASHEx_Erase+0xd8>)
 802d17a:	691b      	ldr	r3, [r3, #16]
 802d17c:	4a1c      	ldr	r2, [pc, #112]	@ (802d1f0 <HAL_FLASHEx_Erase+0xd8>)
 802d17e:	f023 0304 	bic.w	r3, r3, #4
 802d182:	6113      	str	r3, [r2, #16]
 802d184:	e028      	b.n	802d1d8 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802d186:	687b      	ldr	r3, [r7, #4]
 802d188:	689b      	ldr	r3, [r3, #8]
 802d18a:	60bb      	str	r3, [r7, #8]
 802d18c:	e01c      	b.n	802d1c8 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 802d18e:	687b      	ldr	r3, [r7, #4]
 802d190:	691b      	ldr	r3, [r3, #16]
 802d192:	b2db      	uxtb	r3, r3
 802d194:	4619      	mov	r1, r3
 802d196:	68b8      	ldr	r0, [r7, #8]
 802d198:	f000 f850 	bl	802d23c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802d19c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 802d1a0:	f7ff fe8a 	bl	802ceb8 <FLASH_WaitForLastOperation>
 802d1a4:	4603      	mov	r3, r0
 802d1a6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 802d1a8:	4b11      	ldr	r3, [pc, #68]	@ (802d1f0 <HAL_FLASHEx_Erase+0xd8>)
 802d1aa:	691b      	ldr	r3, [r3, #16]
 802d1ac:	4a10      	ldr	r2, [pc, #64]	@ (802d1f0 <HAL_FLASHEx_Erase+0xd8>)
 802d1ae:	f023 037a 	bic.w	r3, r3, #122	@ 0x7a
 802d1b2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 802d1b4:	7bfb      	ldrb	r3, [r7, #15]
 802d1b6:	2b00      	cmp	r3, #0
 802d1b8:	d003      	beq.n	802d1c2 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 802d1ba:	683b      	ldr	r3, [r7, #0]
 802d1bc:	68ba      	ldr	r2, [r7, #8]
 802d1be:	601a      	str	r2, [r3, #0]
          break;
 802d1c0:	e00a      	b.n	802d1d8 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802d1c2:	68bb      	ldr	r3, [r7, #8]
 802d1c4:	3301      	adds	r3, #1
 802d1c6:	60bb      	str	r3, [r7, #8]
 802d1c8:	687b      	ldr	r3, [r7, #4]
 802d1ca:	68da      	ldr	r2, [r3, #12]
 802d1cc:	687b      	ldr	r3, [r7, #4]
 802d1ce:	689b      	ldr	r3, [r3, #8]
 802d1d0:	4413      	add	r3, r2
 802d1d2:	68ba      	ldr	r2, [r7, #8]
 802d1d4:	429a      	cmp	r2, r3
 802d1d6:	d3da      	bcc.n	802d18e <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 802d1d8:	f000 f878 	bl	802d2cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802d1dc:	4b03      	ldr	r3, [pc, #12]	@ (802d1ec <HAL_FLASHEx_Erase+0xd4>)
 802d1de:	2200      	movs	r2, #0
 802d1e0:	761a      	strb	r2, [r3, #24]

  return status;
 802d1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 802d1e4:	4618      	mov	r0, r3
 802d1e6:	3710      	adds	r7, #16
 802d1e8:	46bd      	mov	sp, r7
 802d1ea:	bd80      	pop	{r7, pc}
 802d1ec:	20000060 	.word	0x20000060
 802d1f0:	40023c00 	.word	0x40023c00

0802d1f4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 802d1f4:	b480      	push	{r7}
 802d1f6:	b083      	sub	sp, #12
 802d1f8:	af00      	add	r7, sp, #0
 802d1fa:	4603      	mov	r3, r0
 802d1fc:	6039      	str	r1, [r7, #0]
 802d1fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802d200:	4b0d      	ldr	r3, [pc, #52]	@ (802d238 <FLASH_MassErase+0x44>)
 802d202:	691b      	ldr	r3, [r3, #16]
 802d204:	4a0c      	ldr	r2, [pc, #48]	@ (802d238 <FLASH_MassErase+0x44>)
 802d206:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802d20a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 802d20c:	4b0a      	ldr	r3, [pc, #40]	@ (802d238 <FLASH_MassErase+0x44>)
 802d20e:	691b      	ldr	r3, [r3, #16]
 802d210:	4a09      	ldr	r2, [pc, #36]	@ (802d238 <FLASH_MassErase+0x44>)
 802d212:	f043 0304 	orr.w	r3, r3, #4
 802d216:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 802d218:	4b07      	ldr	r3, [pc, #28]	@ (802d238 <FLASH_MassErase+0x44>)
 802d21a:	691a      	ldr	r2, [r3, #16]
 802d21c:	79fb      	ldrb	r3, [r7, #7]
 802d21e:	021b      	lsls	r3, r3, #8
 802d220:	4313      	orrs	r3, r2
 802d222:	4a05      	ldr	r2, [pc, #20]	@ (802d238 <FLASH_MassErase+0x44>)
 802d224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 802d228:	6113      	str	r3, [r2, #16]
}
 802d22a:	bf00      	nop
 802d22c:	370c      	adds	r7, #12
 802d22e:	46bd      	mov	sp, r7
 802d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d234:	4770      	bx	lr
 802d236:	bf00      	nop
 802d238:	40023c00 	.word	0x40023c00

0802d23c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 802d23c:	b480      	push	{r7}
 802d23e:	b085      	sub	sp, #20
 802d240:	af00      	add	r7, sp, #0
 802d242:	6078      	str	r0, [r7, #4]
 802d244:	460b      	mov	r3, r1
 802d246:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 802d248:	2300      	movs	r3, #0
 802d24a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 802d24c:	78fb      	ldrb	r3, [r7, #3]
 802d24e:	2b00      	cmp	r3, #0
 802d250:	d102      	bne.n	802d258 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 802d252:	2300      	movs	r3, #0
 802d254:	60fb      	str	r3, [r7, #12]
 802d256:	e010      	b.n	802d27a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 802d258:	78fb      	ldrb	r3, [r7, #3]
 802d25a:	2b01      	cmp	r3, #1
 802d25c:	d103      	bne.n	802d266 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 802d25e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802d262:	60fb      	str	r3, [r7, #12]
 802d264:	e009      	b.n	802d27a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 802d266:	78fb      	ldrb	r3, [r7, #3]
 802d268:	2b02      	cmp	r3, #2
 802d26a:	d103      	bne.n	802d274 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 802d26c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802d270:	60fb      	str	r3, [r7, #12]
 802d272:	e002      	b.n	802d27a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 802d274:	f44f 7340 	mov.w	r3, #768	@ 0x300
 802d278:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802d27a:	4b13      	ldr	r3, [pc, #76]	@ (802d2c8 <FLASH_Erase_Sector+0x8c>)
 802d27c:	691b      	ldr	r3, [r3, #16]
 802d27e:	4a12      	ldr	r2, [pc, #72]	@ (802d2c8 <FLASH_Erase_Sector+0x8c>)
 802d280:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802d284:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 802d286:	4b10      	ldr	r3, [pc, #64]	@ (802d2c8 <FLASH_Erase_Sector+0x8c>)
 802d288:	691a      	ldr	r2, [r3, #16]
 802d28a:	490f      	ldr	r1, [pc, #60]	@ (802d2c8 <FLASH_Erase_Sector+0x8c>)
 802d28c:	68fb      	ldr	r3, [r7, #12]
 802d28e:	4313      	orrs	r3, r2
 802d290:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 802d292:	4b0d      	ldr	r3, [pc, #52]	@ (802d2c8 <FLASH_Erase_Sector+0x8c>)
 802d294:	691b      	ldr	r3, [r3, #16]
 802d296:	4a0c      	ldr	r2, [pc, #48]	@ (802d2c8 <FLASH_Erase_Sector+0x8c>)
 802d298:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 802d29c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 802d29e:	4b0a      	ldr	r3, [pc, #40]	@ (802d2c8 <FLASH_Erase_Sector+0x8c>)
 802d2a0:	691a      	ldr	r2, [r3, #16]
 802d2a2:	687b      	ldr	r3, [r7, #4]
 802d2a4:	00db      	lsls	r3, r3, #3
 802d2a6:	4313      	orrs	r3, r2
 802d2a8:	4a07      	ldr	r2, [pc, #28]	@ (802d2c8 <FLASH_Erase_Sector+0x8c>)
 802d2aa:	f043 0302 	orr.w	r3, r3, #2
 802d2ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 802d2b0:	4b05      	ldr	r3, [pc, #20]	@ (802d2c8 <FLASH_Erase_Sector+0x8c>)
 802d2b2:	691b      	ldr	r3, [r3, #16]
 802d2b4:	4a04      	ldr	r2, [pc, #16]	@ (802d2c8 <FLASH_Erase_Sector+0x8c>)
 802d2b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 802d2ba:	6113      	str	r3, [r2, #16]
}
 802d2bc:	bf00      	nop
 802d2be:	3714      	adds	r7, #20
 802d2c0:	46bd      	mov	sp, r7
 802d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d2c6:	4770      	bx	lr
 802d2c8:	40023c00 	.word	0x40023c00

0802d2cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 802d2cc:	b480      	push	{r7}
 802d2ce:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 802d2d0:	4b20      	ldr	r3, [pc, #128]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d2d2:	681b      	ldr	r3, [r3, #0]
 802d2d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802d2d8:	2b00      	cmp	r3, #0
 802d2da:	d017      	beq.n	802d30c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 802d2dc:	4b1d      	ldr	r3, [pc, #116]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d2de:	681b      	ldr	r3, [r3, #0]
 802d2e0:	4a1c      	ldr	r2, [pc, #112]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d2e2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 802d2e6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 802d2e8:	4b1a      	ldr	r3, [pc, #104]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d2ea:	681b      	ldr	r3, [r3, #0]
 802d2ec:	4a19      	ldr	r2, [pc, #100]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d2ee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 802d2f2:	6013      	str	r3, [r2, #0]
 802d2f4:	4b17      	ldr	r3, [pc, #92]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d2f6:	681b      	ldr	r3, [r3, #0]
 802d2f8:	4a16      	ldr	r2, [pc, #88]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d2fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 802d2fe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802d300:	4b14      	ldr	r3, [pc, #80]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d302:	681b      	ldr	r3, [r3, #0]
 802d304:	4a13      	ldr	r2, [pc, #76]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d306:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 802d30a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 802d30c:	4b11      	ldr	r3, [pc, #68]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d30e:	681b      	ldr	r3, [r3, #0]
 802d310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802d314:	2b00      	cmp	r3, #0
 802d316:	d017      	beq.n	802d348 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 802d318:	4b0e      	ldr	r3, [pc, #56]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d31a:	681b      	ldr	r3, [r3, #0]
 802d31c:	4a0d      	ldr	r2, [pc, #52]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d31e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 802d322:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 802d324:	4b0b      	ldr	r3, [pc, #44]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d326:	681b      	ldr	r3, [r3, #0]
 802d328:	4a0a      	ldr	r2, [pc, #40]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d32a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 802d32e:	6013      	str	r3, [r2, #0]
 802d330:	4b08      	ldr	r3, [pc, #32]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d332:	681b      	ldr	r3, [r3, #0]
 802d334:	4a07      	ldr	r2, [pc, #28]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d336:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802d33a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 802d33c:	4b05      	ldr	r3, [pc, #20]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d33e:	681b      	ldr	r3, [r3, #0]
 802d340:	4a04      	ldr	r2, [pc, #16]	@ (802d354 <FLASH_FlushCaches+0x88>)
 802d342:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 802d346:	6013      	str	r3, [r2, #0]
  }
}
 802d348:	bf00      	nop
 802d34a:	46bd      	mov	sp, r7
 802d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d350:	4770      	bx	lr
 802d352:	bf00      	nop
 802d354:	40023c00 	.word	0x40023c00

0802d358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802d358:	b480      	push	{r7}
 802d35a:	b089      	sub	sp, #36	@ 0x24
 802d35c:	af00      	add	r7, sp, #0
 802d35e:	6078      	str	r0, [r7, #4]
 802d360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802d362:	2300      	movs	r3, #0
 802d364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 802d366:	2300      	movs	r3, #0
 802d368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802d36a:	2300      	movs	r3, #0
 802d36c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802d36e:	2300      	movs	r3, #0
 802d370:	61fb      	str	r3, [r7, #28]
 802d372:	e16b      	b.n	802d64c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 802d374:	2201      	movs	r2, #1
 802d376:	69fb      	ldr	r3, [r7, #28]
 802d378:	fa02 f303 	lsl.w	r3, r2, r3
 802d37c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802d37e:	683b      	ldr	r3, [r7, #0]
 802d380:	681b      	ldr	r3, [r3, #0]
 802d382:	697a      	ldr	r2, [r7, #20]
 802d384:	4013      	ands	r3, r2
 802d386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 802d388:	693a      	ldr	r2, [r7, #16]
 802d38a:	697b      	ldr	r3, [r7, #20]
 802d38c:	429a      	cmp	r2, r3
 802d38e:	f040 815a 	bne.w	802d646 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 802d392:	683b      	ldr	r3, [r7, #0]
 802d394:	685b      	ldr	r3, [r3, #4]
 802d396:	f003 0303 	and.w	r3, r3, #3
 802d39a:	2b01      	cmp	r3, #1
 802d39c:	d005      	beq.n	802d3aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802d39e:	683b      	ldr	r3, [r7, #0]
 802d3a0:	685b      	ldr	r3, [r3, #4]
 802d3a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 802d3a6:	2b02      	cmp	r3, #2
 802d3a8:	d130      	bne.n	802d40c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802d3aa:	687b      	ldr	r3, [r7, #4]
 802d3ac:	689b      	ldr	r3, [r3, #8]
 802d3ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 802d3b0:	69fb      	ldr	r3, [r7, #28]
 802d3b2:	005b      	lsls	r3, r3, #1
 802d3b4:	2203      	movs	r2, #3
 802d3b6:	fa02 f303 	lsl.w	r3, r2, r3
 802d3ba:	43db      	mvns	r3, r3
 802d3bc:	69ba      	ldr	r2, [r7, #24]
 802d3be:	4013      	ands	r3, r2
 802d3c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802d3c2:	683b      	ldr	r3, [r7, #0]
 802d3c4:	68da      	ldr	r2, [r3, #12]
 802d3c6:	69fb      	ldr	r3, [r7, #28]
 802d3c8:	005b      	lsls	r3, r3, #1
 802d3ca:	fa02 f303 	lsl.w	r3, r2, r3
 802d3ce:	69ba      	ldr	r2, [r7, #24]
 802d3d0:	4313      	orrs	r3, r2
 802d3d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 802d3d4:	687b      	ldr	r3, [r7, #4]
 802d3d6:	69ba      	ldr	r2, [r7, #24]
 802d3d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802d3da:	687b      	ldr	r3, [r7, #4]
 802d3dc:	685b      	ldr	r3, [r3, #4]
 802d3de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 802d3e0:	2201      	movs	r2, #1
 802d3e2:	69fb      	ldr	r3, [r7, #28]
 802d3e4:	fa02 f303 	lsl.w	r3, r2, r3
 802d3e8:	43db      	mvns	r3, r3
 802d3ea:	69ba      	ldr	r2, [r7, #24]
 802d3ec:	4013      	ands	r3, r2
 802d3ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 802d3f0:	683b      	ldr	r3, [r7, #0]
 802d3f2:	685b      	ldr	r3, [r3, #4]
 802d3f4:	091b      	lsrs	r3, r3, #4
 802d3f6:	f003 0201 	and.w	r2, r3, #1
 802d3fa:	69fb      	ldr	r3, [r7, #28]
 802d3fc:	fa02 f303 	lsl.w	r3, r2, r3
 802d400:	69ba      	ldr	r2, [r7, #24]
 802d402:	4313      	orrs	r3, r2
 802d404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802d406:	687b      	ldr	r3, [r7, #4]
 802d408:	69ba      	ldr	r2, [r7, #24]
 802d40a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 802d40c:	683b      	ldr	r3, [r7, #0]
 802d40e:	685b      	ldr	r3, [r3, #4]
 802d410:	f003 0303 	and.w	r3, r3, #3
 802d414:	2b03      	cmp	r3, #3
 802d416:	d017      	beq.n	802d448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 802d418:	687b      	ldr	r3, [r7, #4]
 802d41a:	68db      	ldr	r3, [r3, #12]
 802d41c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802d41e:	69fb      	ldr	r3, [r7, #28]
 802d420:	005b      	lsls	r3, r3, #1
 802d422:	2203      	movs	r2, #3
 802d424:	fa02 f303 	lsl.w	r3, r2, r3
 802d428:	43db      	mvns	r3, r3
 802d42a:	69ba      	ldr	r2, [r7, #24]
 802d42c:	4013      	ands	r3, r2
 802d42e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 802d430:	683b      	ldr	r3, [r7, #0]
 802d432:	689a      	ldr	r2, [r3, #8]
 802d434:	69fb      	ldr	r3, [r7, #28]
 802d436:	005b      	lsls	r3, r3, #1
 802d438:	fa02 f303 	lsl.w	r3, r2, r3
 802d43c:	69ba      	ldr	r2, [r7, #24]
 802d43e:	4313      	orrs	r3, r2
 802d440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 802d442:	687b      	ldr	r3, [r7, #4]
 802d444:	69ba      	ldr	r2, [r7, #24]
 802d446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802d448:	683b      	ldr	r3, [r7, #0]
 802d44a:	685b      	ldr	r3, [r3, #4]
 802d44c:	f003 0303 	and.w	r3, r3, #3
 802d450:	2b02      	cmp	r3, #2
 802d452:	d123      	bne.n	802d49c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802d454:	69fb      	ldr	r3, [r7, #28]
 802d456:	08da      	lsrs	r2, r3, #3
 802d458:	687b      	ldr	r3, [r7, #4]
 802d45a:	3208      	adds	r2, #8
 802d45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802d460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802d462:	69fb      	ldr	r3, [r7, #28]
 802d464:	f003 0307 	and.w	r3, r3, #7
 802d468:	009b      	lsls	r3, r3, #2
 802d46a:	220f      	movs	r2, #15
 802d46c:	fa02 f303 	lsl.w	r3, r2, r3
 802d470:	43db      	mvns	r3, r3
 802d472:	69ba      	ldr	r2, [r7, #24]
 802d474:	4013      	ands	r3, r2
 802d476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 802d478:	683b      	ldr	r3, [r7, #0]
 802d47a:	691a      	ldr	r2, [r3, #16]
 802d47c:	69fb      	ldr	r3, [r7, #28]
 802d47e:	f003 0307 	and.w	r3, r3, #7
 802d482:	009b      	lsls	r3, r3, #2
 802d484:	fa02 f303 	lsl.w	r3, r2, r3
 802d488:	69ba      	ldr	r2, [r7, #24]
 802d48a:	4313      	orrs	r3, r2
 802d48c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802d48e:	69fb      	ldr	r3, [r7, #28]
 802d490:	08da      	lsrs	r2, r3, #3
 802d492:	687b      	ldr	r3, [r7, #4]
 802d494:	3208      	adds	r2, #8
 802d496:	69b9      	ldr	r1, [r7, #24]
 802d498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802d49c:	687b      	ldr	r3, [r7, #4]
 802d49e:	681b      	ldr	r3, [r3, #0]
 802d4a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 802d4a2:	69fb      	ldr	r3, [r7, #28]
 802d4a4:	005b      	lsls	r3, r3, #1
 802d4a6:	2203      	movs	r2, #3
 802d4a8:	fa02 f303 	lsl.w	r3, r2, r3
 802d4ac:	43db      	mvns	r3, r3
 802d4ae:	69ba      	ldr	r2, [r7, #24]
 802d4b0:	4013      	ands	r3, r2
 802d4b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802d4b4:	683b      	ldr	r3, [r7, #0]
 802d4b6:	685b      	ldr	r3, [r3, #4]
 802d4b8:	f003 0203 	and.w	r2, r3, #3
 802d4bc:	69fb      	ldr	r3, [r7, #28]
 802d4be:	005b      	lsls	r3, r3, #1
 802d4c0:	fa02 f303 	lsl.w	r3, r2, r3
 802d4c4:	69ba      	ldr	r2, [r7, #24]
 802d4c6:	4313      	orrs	r3, r2
 802d4c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802d4ca:	687b      	ldr	r3, [r7, #4]
 802d4cc:	69ba      	ldr	r2, [r7, #24]
 802d4ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 802d4d0:	683b      	ldr	r3, [r7, #0]
 802d4d2:	685b      	ldr	r3, [r3, #4]
 802d4d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 802d4d8:	2b00      	cmp	r3, #0
 802d4da:	f000 80b4 	beq.w	802d646 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802d4de:	2300      	movs	r3, #0
 802d4e0:	60fb      	str	r3, [r7, #12]
 802d4e2:	4b60      	ldr	r3, [pc, #384]	@ (802d664 <HAL_GPIO_Init+0x30c>)
 802d4e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802d4e6:	4a5f      	ldr	r2, [pc, #380]	@ (802d664 <HAL_GPIO_Init+0x30c>)
 802d4e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 802d4ec:	6453      	str	r3, [r2, #68]	@ 0x44
 802d4ee:	4b5d      	ldr	r3, [pc, #372]	@ (802d664 <HAL_GPIO_Init+0x30c>)
 802d4f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802d4f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 802d4f6:	60fb      	str	r3, [r7, #12]
 802d4f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802d4fa:	4a5b      	ldr	r2, [pc, #364]	@ (802d668 <HAL_GPIO_Init+0x310>)
 802d4fc:	69fb      	ldr	r3, [r7, #28]
 802d4fe:	089b      	lsrs	r3, r3, #2
 802d500:	3302      	adds	r3, #2
 802d502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802d506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 802d508:	69fb      	ldr	r3, [r7, #28]
 802d50a:	f003 0303 	and.w	r3, r3, #3
 802d50e:	009b      	lsls	r3, r3, #2
 802d510:	220f      	movs	r2, #15
 802d512:	fa02 f303 	lsl.w	r3, r2, r3
 802d516:	43db      	mvns	r3, r3
 802d518:	69ba      	ldr	r2, [r7, #24]
 802d51a:	4013      	ands	r3, r2
 802d51c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 802d51e:	687b      	ldr	r3, [r7, #4]
 802d520:	4a52      	ldr	r2, [pc, #328]	@ (802d66c <HAL_GPIO_Init+0x314>)
 802d522:	4293      	cmp	r3, r2
 802d524:	d02b      	beq.n	802d57e <HAL_GPIO_Init+0x226>
 802d526:	687b      	ldr	r3, [r7, #4]
 802d528:	4a51      	ldr	r2, [pc, #324]	@ (802d670 <HAL_GPIO_Init+0x318>)
 802d52a:	4293      	cmp	r3, r2
 802d52c:	d025      	beq.n	802d57a <HAL_GPIO_Init+0x222>
 802d52e:	687b      	ldr	r3, [r7, #4]
 802d530:	4a50      	ldr	r2, [pc, #320]	@ (802d674 <HAL_GPIO_Init+0x31c>)
 802d532:	4293      	cmp	r3, r2
 802d534:	d01f      	beq.n	802d576 <HAL_GPIO_Init+0x21e>
 802d536:	687b      	ldr	r3, [r7, #4]
 802d538:	4a4f      	ldr	r2, [pc, #316]	@ (802d678 <HAL_GPIO_Init+0x320>)
 802d53a:	4293      	cmp	r3, r2
 802d53c:	d019      	beq.n	802d572 <HAL_GPIO_Init+0x21a>
 802d53e:	687b      	ldr	r3, [r7, #4]
 802d540:	4a4e      	ldr	r2, [pc, #312]	@ (802d67c <HAL_GPIO_Init+0x324>)
 802d542:	4293      	cmp	r3, r2
 802d544:	d013      	beq.n	802d56e <HAL_GPIO_Init+0x216>
 802d546:	687b      	ldr	r3, [r7, #4]
 802d548:	4a4d      	ldr	r2, [pc, #308]	@ (802d680 <HAL_GPIO_Init+0x328>)
 802d54a:	4293      	cmp	r3, r2
 802d54c:	d00d      	beq.n	802d56a <HAL_GPIO_Init+0x212>
 802d54e:	687b      	ldr	r3, [r7, #4]
 802d550:	4a4c      	ldr	r2, [pc, #304]	@ (802d684 <HAL_GPIO_Init+0x32c>)
 802d552:	4293      	cmp	r3, r2
 802d554:	d007      	beq.n	802d566 <HAL_GPIO_Init+0x20e>
 802d556:	687b      	ldr	r3, [r7, #4]
 802d558:	4a4b      	ldr	r2, [pc, #300]	@ (802d688 <HAL_GPIO_Init+0x330>)
 802d55a:	4293      	cmp	r3, r2
 802d55c:	d101      	bne.n	802d562 <HAL_GPIO_Init+0x20a>
 802d55e:	2307      	movs	r3, #7
 802d560:	e00e      	b.n	802d580 <HAL_GPIO_Init+0x228>
 802d562:	2308      	movs	r3, #8
 802d564:	e00c      	b.n	802d580 <HAL_GPIO_Init+0x228>
 802d566:	2306      	movs	r3, #6
 802d568:	e00a      	b.n	802d580 <HAL_GPIO_Init+0x228>
 802d56a:	2305      	movs	r3, #5
 802d56c:	e008      	b.n	802d580 <HAL_GPIO_Init+0x228>
 802d56e:	2304      	movs	r3, #4
 802d570:	e006      	b.n	802d580 <HAL_GPIO_Init+0x228>
 802d572:	2303      	movs	r3, #3
 802d574:	e004      	b.n	802d580 <HAL_GPIO_Init+0x228>
 802d576:	2302      	movs	r3, #2
 802d578:	e002      	b.n	802d580 <HAL_GPIO_Init+0x228>
 802d57a:	2301      	movs	r3, #1
 802d57c:	e000      	b.n	802d580 <HAL_GPIO_Init+0x228>
 802d57e:	2300      	movs	r3, #0
 802d580:	69fa      	ldr	r2, [r7, #28]
 802d582:	f002 0203 	and.w	r2, r2, #3
 802d586:	0092      	lsls	r2, r2, #2
 802d588:	4093      	lsls	r3, r2
 802d58a:	69ba      	ldr	r2, [r7, #24]
 802d58c:	4313      	orrs	r3, r2
 802d58e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802d590:	4935      	ldr	r1, [pc, #212]	@ (802d668 <HAL_GPIO_Init+0x310>)
 802d592:	69fb      	ldr	r3, [r7, #28]
 802d594:	089b      	lsrs	r3, r3, #2
 802d596:	3302      	adds	r3, #2
 802d598:	69ba      	ldr	r2, [r7, #24]
 802d59a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802d59e:	4b3b      	ldr	r3, [pc, #236]	@ (802d68c <HAL_GPIO_Init+0x334>)
 802d5a0:	689b      	ldr	r3, [r3, #8]
 802d5a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802d5a4:	693b      	ldr	r3, [r7, #16]
 802d5a6:	43db      	mvns	r3, r3
 802d5a8:	69ba      	ldr	r2, [r7, #24]
 802d5aa:	4013      	ands	r3, r2
 802d5ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802d5ae:	683b      	ldr	r3, [r7, #0]
 802d5b0:	685b      	ldr	r3, [r3, #4]
 802d5b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802d5b6:	2b00      	cmp	r3, #0
 802d5b8:	d003      	beq.n	802d5c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 802d5ba:	69ba      	ldr	r2, [r7, #24]
 802d5bc:	693b      	ldr	r3, [r7, #16]
 802d5be:	4313      	orrs	r3, r2
 802d5c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 802d5c2:	4a32      	ldr	r2, [pc, #200]	@ (802d68c <HAL_GPIO_Init+0x334>)
 802d5c4:	69bb      	ldr	r3, [r7, #24]
 802d5c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 802d5c8:	4b30      	ldr	r3, [pc, #192]	@ (802d68c <HAL_GPIO_Init+0x334>)
 802d5ca:	68db      	ldr	r3, [r3, #12]
 802d5cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802d5ce:	693b      	ldr	r3, [r7, #16]
 802d5d0:	43db      	mvns	r3, r3
 802d5d2:	69ba      	ldr	r2, [r7, #24]
 802d5d4:	4013      	ands	r3, r2
 802d5d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 802d5d8:	683b      	ldr	r3, [r7, #0]
 802d5da:	685b      	ldr	r3, [r3, #4]
 802d5dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 802d5e0:	2b00      	cmp	r3, #0
 802d5e2:	d003      	beq.n	802d5ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 802d5e4:	69ba      	ldr	r2, [r7, #24]
 802d5e6:	693b      	ldr	r3, [r7, #16]
 802d5e8:	4313      	orrs	r3, r2
 802d5ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 802d5ec:	4a27      	ldr	r2, [pc, #156]	@ (802d68c <HAL_GPIO_Init+0x334>)
 802d5ee:	69bb      	ldr	r3, [r7, #24]
 802d5f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 802d5f2:	4b26      	ldr	r3, [pc, #152]	@ (802d68c <HAL_GPIO_Init+0x334>)
 802d5f4:	685b      	ldr	r3, [r3, #4]
 802d5f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802d5f8:	693b      	ldr	r3, [r7, #16]
 802d5fa:	43db      	mvns	r3, r3
 802d5fc:	69ba      	ldr	r2, [r7, #24]
 802d5fe:	4013      	ands	r3, r2
 802d600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 802d602:	683b      	ldr	r3, [r7, #0]
 802d604:	685b      	ldr	r3, [r3, #4]
 802d606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802d60a:	2b00      	cmp	r3, #0
 802d60c:	d003      	beq.n	802d616 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 802d60e:	69ba      	ldr	r2, [r7, #24]
 802d610:	693b      	ldr	r3, [r7, #16]
 802d612:	4313      	orrs	r3, r2
 802d614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 802d616:	4a1d      	ldr	r2, [pc, #116]	@ (802d68c <HAL_GPIO_Init+0x334>)
 802d618:	69bb      	ldr	r3, [r7, #24]
 802d61a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 802d61c:	4b1b      	ldr	r3, [pc, #108]	@ (802d68c <HAL_GPIO_Init+0x334>)
 802d61e:	681b      	ldr	r3, [r3, #0]
 802d620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802d622:	693b      	ldr	r3, [r7, #16]
 802d624:	43db      	mvns	r3, r3
 802d626:	69ba      	ldr	r2, [r7, #24]
 802d628:	4013      	ands	r3, r2
 802d62a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 802d62c:	683b      	ldr	r3, [r7, #0]
 802d62e:	685b      	ldr	r3, [r3, #4]
 802d630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802d634:	2b00      	cmp	r3, #0
 802d636:	d003      	beq.n	802d640 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 802d638:	69ba      	ldr	r2, [r7, #24]
 802d63a:	693b      	ldr	r3, [r7, #16]
 802d63c:	4313      	orrs	r3, r2
 802d63e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 802d640:	4a12      	ldr	r2, [pc, #72]	@ (802d68c <HAL_GPIO_Init+0x334>)
 802d642:	69bb      	ldr	r3, [r7, #24]
 802d644:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802d646:	69fb      	ldr	r3, [r7, #28]
 802d648:	3301      	adds	r3, #1
 802d64a:	61fb      	str	r3, [r7, #28]
 802d64c:	69fb      	ldr	r3, [r7, #28]
 802d64e:	2b0f      	cmp	r3, #15
 802d650:	f67f ae90 	bls.w	802d374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 802d654:	bf00      	nop
 802d656:	bf00      	nop
 802d658:	3724      	adds	r7, #36	@ 0x24
 802d65a:	46bd      	mov	sp, r7
 802d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d660:	4770      	bx	lr
 802d662:	bf00      	nop
 802d664:	40023800 	.word	0x40023800
 802d668:	40013800 	.word	0x40013800
 802d66c:	40020000 	.word	0x40020000
 802d670:	40020400 	.word	0x40020400
 802d674:	40020800 	.word	0x40020800
 802d678:	40020c00 	.word	0x40020c00
 802d67c:	40021000 	.word	0x40021000
 802d680:	40021400 	.word	0x40021400
 802d684:	40021800 	.word	0x40021800
 802d688:	40021c00 	.word	0x40021c00
 802d68c:	40013c00 	.word	0x40013c00

0802d690 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 802d690:	b480      	push	{r7}
 802d692:	b085      	sub	sp, #20
 802d694:	af00      	add	r7, sp, #0
 802d696:	6078      	str	r0, [r7, #4]
 802d698:	460b      	mov	r3, r1
 802d69a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 802d69c:	687b      	ldr	r3, [r7, #4]
 802d69e:	691a      	ldr	r2, [r3, #16]
 802d6a0:	887b      	ldrh	r3, [r7, #2]
 802d6a2:	4013      	ands	r3, r2
 802d6a4:	2b00      	cmp	r3, #0
 802d6a6:	d002      	beq.n	802d6ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 802d6a8:	2301      	movs	r3, #1
 802d6aa:	73fb      	strb	r3, [r7, #15]
 802d6ac:	e001      	b.n	802d6b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 802d6ae:	2300      	movs	r3, #0
 802d6b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 802d6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 802d6b4:	4618      	mov	r0, r3
 802d6b6:	3714      	adds	r7, #20
 802d6b8:	46bd      	mov	sp, r7
 802d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d6be:	4770      	bx	lr

0802d6c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802d6c0:	b480      	push	{r7}
 802d6c2:	b083      	sub	sp, #12
 802d6c4:	af00      	add	r7, sp, #0
 802d6c6:	6078      	str	r0, [r7, #4]
 802d6c8:	460b      	mov	r3, r1
 802d6ca:	807b      	strh	r3, [r7, #2]
 802d6cc:	4613      	mov	r3, r2
 802d6ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 802d6d0:	787b      	ldrb	r3, [r7, #1]
 802d6d2:	2b00      	cmp	r3, #0
 802d6d4:	d003      	beq.n	802d6de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802d6d6:	887a      	ldrh	r2, [r7, #2]
 802d6d8:	687b      	ldr	r3, [r7, #4]
 802d6da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 802d6dc:	e003      	b.n	802d6e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 802d6de:	887b      	ldrh	r3, [r7, #2]
 802d6e0:	041a      	lsls	r2, r3, #16
 802d6e2:	687b      	ldr	r3, [r7, #4]
 802d6e4:	619a      	str	r2, [r3, #24]
}
 802d6e6:	bf00      	nop
 802d6e8:	370c      	adds	r7, #12
 802d6ea:	46bd      	mov	sp, r7
 802d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d6f0:	4770      	bx	lr

0802d6f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 802d6f2:	b480      	push	{r7}
 802d6f4:	b085      	sub	sp, #20
 802d6f6:	af00      	add	r7, sp, #0
 802d6f8:	6078      	str	r0, [r7, #4]
 802d6fa:	460b      	mov	r3, r1
 802d6fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 802d6fe:	687b      	ldr	r3, [r7, #4]
 802d700:	695b      	ldr	r3, [r3, #20]
 802d702:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 802d704:	887a      	ldrh	r2, [r7, #2]
 802d706:	68fb      	ldr	r3, [r7, #12]
 802d708:	4013      	ands	r3, r2
 802d70a:	041a      	lsls	r2, r3, #16
 802d70c:	68fb      	ldr	r3, [r7, #12]
 802d70e:	43d9      	mvns	r1, r3
 802d710:	887b      	ldrh	r3, [r7, #2]
 802d712:	400b      	ands	r3, r1
 802d714:	431a      	orrs	r2, r3
 802d716:	687b      	ldr	r3, [r7, #4]
 802d718:	619a      	str	r2, [r3, #24]
}
 802d71a:	bf00      	nop
 802d71c:	3714      	adds	r7, #20
 802d71e:	46bd      	mov	sp, r7
 802d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d724:	4770      	bx	lr
	...

0802d728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802d728:	b580      	push	{r7, lr}
 802d72a:	b086      	sub	sp, #24
 802d72c:	af00      	add	r7, sp, #0
 802d72e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 802d730:	687b      	ldr	r3, [r7, #4]
 802d732:	2b00      	cmp	r3, #0
 802d734:	d101      	bne.n	802d73a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802d736:	2301      	movs	r3, #1
 802d738:	e267      	b.n	802dc0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802d73a:	687b      	ldr	r3, [r7, #4]
 802d73c:	681b      	ldr	r3, [r3, #0]
 802d73e:	f003 0301 	and.w	r3, r3, #1
 802d742:	2b00      	cmp	r3, #0
 802d744:	d075      	beq.n	802d832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 802d746:	4b88      	ldr	r3, [pc, #544]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d748:	689b      	ldr	r3, [r3, #8]
 802d74a:	f003 030c 	and.w	r3, r3, #12
 802d74e:	2b04      	cmp	r3, #4
 802d750:	d00c      	beq.n	802d76c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802d752:	4b85      	ldr	r3, [pc, #532]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d754:	689b      	ldr	r3, [r3, #8]
 802d756:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 802d75a:	2b08      	cmp	r3, #8
 802d75c:	d112      	bne.n	802d784 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802d75e:	4b82      	ldr	r3, [pc, #520]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d760:	685b      	ldr	r3, [r3, #4]
 802d762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802d766:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 802d76a:	d10b      	bne.n	802d784 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802d76c:	4b7e      	ldr	r3, [pc, #504]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d76e:	681b      	ldr	r3, [r3, #0]
 802d770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802d774:	2b00      	cmp	r3, #0
 802d776:	d05b      	beq.n	802d830 <HAL_RCC_OscConfig+0x108>
 802d778:	687b      	ldr	r3, [r7, #4]
 802d77a:	685b      	ldr	r3, [r3, #4]
 802d77c:	2b00      	cmp	r3, #0
 802d77e:	d157      	bne.n	802d830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 802d780:	2301      	movs	r3, #1
 802d782:	e242      	b.n	802dc0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802d784:	687b      	ldr	r3, [r7, #4]
 802d786:	685b      	ldr	r3, [r3, #4]
 802d788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802d78c:	d106      	bne.n	802d79c <HAL_RCC_OscConfig+0x74>
 802d78e:	4b76      	ldr	r3, [pc, #472]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d790:	681b      	ldr	r3, [r3, #0]
 802d792:	4a75      	ldr	r2, [pc, #468]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 802d798:	6013      	str	r3, [r2, #0]
 802d79a:	e01d      	b.n	802d7d8 <HAL_RCC_OscConfig+0xb0>
 802d79c:	687b      	ldr	r3, [r7, #4]
 802d79e:	685b      	ldr	r3, [r3, #4]
 802d7a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 802d7a4:	d10c      	bne.n	802d7c0 <HAL_RCC_OscConfig+0x98>
 802d7a6:	4b70      	ldr	r3, [pc, #448]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d7a8:	681b      	ldr	r3, [r3, #0]
 802d7aa:	4a6f      	ldr	r2, [pc, #444]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d7ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 802d7b0:	6013      	str	r3, [r2, #0]
 802d7b2:	4b6d      	ldr	r3, [pc, #436]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d7b4:	681b      	ldr	r3, [r3, #0]
 802d7b6:	4a6c      	ldr	r2, [pc, #432]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d7b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 802d7bc:	6013      	str	r3, [r2, #0]
 802d7be:	e00b      	b.n	802d7d8 <HAL_RCC_OscConfig+0xb0>
 802d7c0:	4b69      	ldr	r3, [pc, #420]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d7c2:	681b      	ldr	r3, [r3, #0]
 802d7c4:	4a68      	ldr	r2, [pc, #416]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d7c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 802d7ca:	6013      	str	r3, [r2, #0]
 802d7cc:	4b66      	ldr	r3, [pc, #408]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d7ce:	681b      	ldr	r3, [r3, #0]
 802d7d0:	4a65      	ldr	r2, [pc, #404]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d7d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 802d7d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 802d7d8:	687b      	ldr	r3, [r7, #4]
 802d7da:	685b      	ldr	r3, [r3, #4]
 802d7dc:	2b00      	cmp	r3, #0
 802d7de:	d013      	beq.n	802d808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802d7e0:	f7fe fe28 	bl	802c434 <HAL_GetTick>
 802d7e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802d7e6:	e008      	b.n	802d7fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 802d7e8:	f7fe fe24 	bl	802c434 <HAL_GetTick>
 802d7ec:	4602      	mov	r2, r0
 802d7ee:	693b      	ldr	r3, [r7, #16]
 802d7f0:	1ad3      	subs	r3, r2, r3
 802d7f2:	2b64      	cmp	r3, #100	@ 0x64
 802d7f4:	d901      	bls.n	802d7fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802d7f6:	2303      	movs	r3, #3
 802d7f8:	e207      	b.n	802dc0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802d7fa:	4b5b      	ldr	r3, [pc, #364]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d7fc:	681b      	ldr	r3, [r3, #0]
 802d7fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802d802:	2b00      	cmp	r3, #0
 802d804:	d0f0      	beq.n	802d7e8 <HAL_RCC_OscConfig+0xc0>
 802d806:	e014      	b.n	802d832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802d808:	f7fe fe14 	bl	802c434 <HAL_GetTick>
 802d80c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802d80e:	e008      	b.n	802d822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 802d810:	f7fe fe10 	bl	802c434 <HAL_GetTick>
 802d814:	4602      	mov	r2, r0
 802d816:	693b      	ldr	r3, [r7, #16]
 802d818:	1ad3      	subs	r3, r2, r3
 802d81a:	2b64      	cmp	r3, #100	@ 0x64
 802d81c:	d901      	bls.n	802d822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802d81e:	2303      	movs	r3, #3
 802d820:	e1f3      	b.n	802dc0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802d822:	4b51      	ldr	r3, [pc, #324]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d824:	681b      	ldr	r3, [r3, #0]
 802d826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802d82a:	2b00      	cmp	r3, #0
 802d82c:	d1f0      	bne.n	802d810 <HAL_RCC_OscConfig+0xe8>
 802d82e:	e000      	b.n	802d832 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802d830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802d832:	687b      	ldr	r3, [r7, #4]
 802d834:	681b      	ldr	r3, [r3, #0]
 802d836:	f003 0302 	and.w	r3, r3, #2
 802d83a:	2b00      	cmp	r3, #0
 802d83c:	d063      	beq.n	802d906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 802d83e:	4b4a      	ldr	r3, [pc, #296]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d840:	689b      	ldr	r3, [r3, #8]
 802d842:	f003 030c 	and.w	r3, r3, #12
 802d846:	2b00      	cmp	r3, #0
 802d848:	d00b      	beq.n	802d862 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802d84a:	4b47      	ldr	r3, [pc, #284]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d84c:	689b      	ldr	r3, [r3, #8]
 802d84e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 802d852:	2b08      	cmp	r3, #8
 802d854:	d11c      	bne.n	802d890 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802d856:	4b44      	ldr	r3, [pc, #272]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d858:	685b      	ldr	r3, [r3, #4]
 802d85a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802d85e:	2b00      	cmp	r3, #0
 802d860:	d116      	bne.n	802d890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802d862:	4b41      	ldr	r3, [pc, #260]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d864:	681b      	ldr	r3, [r3, #0]
 802d866:	f003 0302 	and.w	r3, r3, #2
 802d86a:	2b00      	cmp	r3, #0
 802d86c:	d005      	beq.n	802d87a <HAL_RCC_OscConfig+0x152>
 802d86e:	687b      	ldr	r3, [r7, #4]
 802d870:	68db      	ldr	r3, [r3, #12]
 802d872:	2b01      	cmp	r3, #1
 802d874:	d001      	beq.n	802d87a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 802d876:	2301      	movs	r3, #1
 802d878:	e1c7      	b.n	802dc0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802d87a:	4b3b      	ldr	r3, [pc, #236]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d87c:	681b      	ldr	r3, [r3, #0]
 802d87e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 802d882:	687b      	ldr	r3, [r7, #4]
 802d884:	691b      	ldr	r3, [r3, #16]
 802d886:	00db      	lsls	r3, r3, #3
 802d888:	4937      	ldr	r1, [pc, #220]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d88a:	4313      	orrs	r3, r2
 802d88c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802d88e:	e03a      	b.n	802d906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 802d890:	687b      	ldr	r3, [r7, #4]
 802d892:	68db      	ldr	r3, [r3, #12]
 802d894:	2b00      	cmp	r3, #0
 802d896:	d020      	beq.n	802d8da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 802d898:	4b34      	ldr	r3, [pc, #208]	@ (802d96c <HAL_RCC_OscConfig+0x244>)
 802d89a:	2201      	movs	r2, #1
 802d89c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802d89e:	f7fe fdc9 	bl	802c434 <HAL_GetTick>
 802d8a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802d8a4:	e008      	b.n	802d8b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802d8a6:	f7fe fdc5 	bl	802c434 <HAL_GetTick>
 802d8aa:	4602      	mov	r2, r0
 802d8ac:	693b      	ldr	r3, [r7, #16]
 802d8ae:	1ad3      	subs	r3, r2, r3
 802d8b0:	2b02      	cmp	r3, #2
 802d8b2:	d901      	bls.n	802d8b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 802d8b4:	2303      	movs	r3, #3
 802d8b6:	e1a8      	b.n	802dc0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802d8b8:	4b2b      	ldr	r3, [pc, #172]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d8ba:	681b      	ldr	r3, [r3, #0]
 802d8bc:	f003 0302 	and.w	r3, r3, #2
 802d8c0:	2b00      	cmp	r3, #0
 802d8c2:	d0f0      	beq.n	802d8a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802d8c4:	4b28      	ldr	r3, [pc, #160]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d8c6:	681b      	ldr	r3, [r3, #0]
 802d8c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 802d8cc:	687b      	ldr	r3, [r7, #4]
 802d8ce:	691b      	ldr	r3, [r3, #16]
 802d8d0:	00db      	lsls	r3, r3, #3
 802d8d2:	4925      	ldr	r1, [pc, #148]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d8d4:	4313      	orrs	r3, r2
 802d8d6:	600b      	str	r3, [r1, #0]
 802d8d8:	e015      	b.n	802d906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802d8da:	4b24      	ldr	r3, [pc, #144]	@ (802d96c <HAL_RCC_OscConfig+0x244>)
 802d8dc:	2200      	movs	r2, #0
 802d8de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802d8e0:	f7fe fda8 	bl	802c434 <HAL_GetTick>
 802d8e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802d8e6:	e008      	b.n	802d8fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802d8e8:	f7fe fda4 	bl	802c434 <HAL_GetTick>
 802d8ec:	4602      	mov	r2, r0
 802d8ee:	693b      	ldr	r3, [r7, #16]
 802d8f0:	1ad3      	subs	r3, r2, r3
 802d8f2:	2b02      	cmp	r3, #2
 802d8f4:	d901      	bls.n	802d8fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802d8f6:	2303      	movs	r3, #3
 802d8f8:	e187      	b.n	802dc0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802d8fa:	4b1b      	ldr	r3, [pc, #108]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d8fc:	681b      	ldr	r3, [r3, #0]
 802d8fe:	f003 0302 	and.w	r3, r3, #2
 802d902:	2b00      	cmp	r3, #0
 802d904:	d1f0      	bne.n	802d8e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802d906:	687b      	ldr	r3, [r7, #4]
 802d908:	681b      	ldr	r3, [r3, #0]
 802d90a:	f003 0308 	and.w	r3, r3, #8
 802d90e:	2b00      	cmp	r3, #0
 802d910:	d036      	beq.n	802d980 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 802d912:	687b      	ldr	r3, [r7, #4]
 802d914:	695b      	ldr	r3, [r3, #20]
 802d916:	2b00      	cmp	r3, #0
 802d918:	d016      	beq.n	802d948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802d91a:	4b15      	ldr	r3, [pc, #84]	@ (802d970 <HAL_RCC_OscConfig+0x248>)
 802d91c:	2201      	movs	r2, #1
 802d91e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802d920:	f7fe fd88 	bl	802c434 <HAL_GetTick>
 802d924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802d926:	e008      	b.n	802d93a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802d928:	f7fe fd84 	bl	802c434 <HAL_GetTick>
 802d92c:	4602      	mov	r2, r0
 802d92e:	693b      	ldr	r3, [r7, #16]
 802d930:	1ad3      	subs	r3, r2, r3
 802d932:	2b02      	cmp	r3, #2
 802d934:	d901      	bls.n	802d93a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802d936:	2303      	movs	r3, #3
 802d938:	e167      	b.n	802dc0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802d93a:	4b0b      	ldr	r3, [pc, #44]	@ (802d968 <HAL_RCC_OscConfig+0x240>)
 802d93c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802d93e:	f003 0302 	and.w	r3, r3, #2
 802d942:	2b00      	cmp	r3, #0
 802d944:	d0f0      	beq.n	802d928 <HAL_RCC_OscConfig+0x200>
 802d946:	e01b      	b.n	802d980 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802d948:	4b09      	ldr	r3, [pc, #36]	@ (802d970 <HAL_RCC_OscConfig+0x248>)
 802d94a:	2200      	movs	r2, #0
 802d94c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802d94e:	f7fe fd71 	bl	802c434 <HAL_GetTick>
 802d952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802d954:	e00e      	b.n	802d974 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802d956:	f7fe fd6d 	bl	802c434 <HAL_GetTick>
 802d95a:	4602      	mov	r2, r0
 802d95c:	693b      	ldr	r3, [r7, #16]
 802d95e:	1ad3      	subs	r3, r2, r3
 802d960:	2b02      	cmp	r3, #2
 802d962:	d907      	bls.n	802d974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 802d964:	2303      	movs	r3, #3
 802d966:	e150      	b.n	802dc0a <HAL_RCC_OscConfig+0x4e2>
 802d968:	40023800 	.word	0x40023800
 802d96c:	42470000 	.word	0x42470000
 802d970:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802d974:	4b88      	ldr	r3, [pc, #544]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802d976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802d978:	f003 0302 	and.w	r3, r3, #2
 802d97c:	2b00      	cmp	r3, #0
 802d97e:	d1ea      	bne.n	802d956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802d980:	687b      	ldr	r3, [r7, #4]
 802d982:	681b      	ldr	r3, [r3, #0]
 802d984:	f003 0304 	and.w	r3, r3, #4
 802d988:	2b00      	cmp	r3, #0
 802d98a:	f000 8097 	beq.w	802dabc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 802d98e:	2300      	movs	r3, #0
 802d990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 802d992:	4b81      	ldr	r3, [pc, #516]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802d994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802d996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 802d99a:	2b00      	cmp	r3, #0
 802d99c:	d10f      	bne.n	802d9be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802d99e:	2300      	movs	r3, #0
 802d9a0:	60bb      	str	r3, [r7, #8]
 802d9a2:	4b7d      	ldr	r3, [pc, #500]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802d9a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802d9a6:	4a7c      	ldr	r2, [pc, #496]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802d9a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 802d9ac:	6413      	str	r3, [r2, #64]	@ 0x40
 802d9ae:	4b7a      	ldr	r3, [pc, #488]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802d9b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802d9b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 802d9b6:	60bb      	str	r3, [r7, #8]
 802d9b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802d9ba:	2301      	movs	r3, #1
 802d9bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802d9be:	4b77      	ldr	r3, [pc, #476]	@ (802db9c <HAL_RCC_OscConfig+0x474>)
 802d9c0:	681b      	ldr	r3, [r3, #0]
 802d9c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802d9c6:	2b00      	cmp	r3, #0
 802d9c8:	d118      	bne.n	802d9fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802d9ca:	4b74      	ldr	r3, [pc, #464]	@ (802db9c <HAL_RCC_OscConfig+0x474>)
 802d9cc:	681b      	ldr	r3, [r3, #0]
 802d9ce:	4a73      	ldr	r2, [pc, #460]	@ (802db9c <HAL_RCC_OscConfig+0x474>)
 802d9d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 802d9d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802d9d6:	f7fe fd2d 	bl	802c434 <HAL_GetTick>
 802d9da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802d9dc:	e008      	b.n	802d9f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802d9de:	f7fe fd29 	bl	802c434 <HAL_GetTick>
 802d9e2:	4602      	mov	r2, r0
 802d9e4:	693b      	ldr	r3, [r7, #16]
 802d9e6:	1ad3      	subs	r3, r2, r3
 802d9e8:	2b02      	cmp	r3, #2
 802d9ea:	d901      	bls.n	802d9f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 802d9ec:	2303      	movs	r3, #3
 802d9ee:	e10c      	b.n	802dc0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802d9f0:	4b6a      	ldr	r3, [pc, #424]	@ (802db9c <HAL_RCC_OscConfig+0x474>)
 802d9f2:	681b      	ldr	r3, [r3, #0]
 802d9f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802d9f8:	2b00      	cmp	r3, #0
 802d9fa:	d0f0      	beq.n	802d9de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802d9fc:	687b      	ldr	r3, [r7, #4]
 802d9fe:	689b      	ldr	r3, [r3, #8]
 802da00:	2b01      	cmp	r3, #1
 802da02:	d106      	bne.n	802da12 <HAL_RCC_OscConfig+0x2ea>
 802da04:	4b64      	ldr	r3, [pc, #400]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802da06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802da08:	4a63      	ldr	r2, [pc, #396]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802da0a:	f043 0301 	orr.w	r3, r3, #1
 802da0e:	6713      	str	r3, [r2, #112]	@ 0x70
 802da10:	e01c      	b.n	802da4c <HAL_RCC_OscConfig+0x324>
 802da12:	687b      	ldr	r3, [r7, #4]
 802da14:	689b      	ldr	r3, [r3, #8]
 802da16:	2b05      	cmp	r3, #5
 802da18:	d10c      	bne.n	802da34 <HAL_RCC_OscConfig+0x30c>
 802da1a:	4b5f      	ldr	r3, [pc, #380]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802da1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802da1e:	4a5e      	ldr	r2, [pc, #376]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802da20:	f043 0304 	orr.w	r3, r3, #4
 802da24:	6713      	str	r3, [r2, #112]	@ 0x70
 802da26:	4b5c      	ldr	r3, [pc, #368]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802da28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802da2a:	4a5b      	ldr	r2, [pc, #364]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802da2c:	f043 0301 	orr.w	r3, r3, #1
 802da30:	6713      	str	r3, [r2, #112]	@ 0x70
 802da32:	e00b      	b.n	802da4c <HAL_RCC_OscConfig+0x324>
 802da34:	4b58      	ldr	r3, [pc, #352]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802da36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802da38:	4a57      	ldr	r2, [pc, #348]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802da3a:	f023 0301 	bic.w	r3, r3, #1
 802da3e:	6713      	str	r3, [r2, #112]	@ 0x70
 802da40:	4b55      	ldr	r3, [pc, #340]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802da42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802da44:	4a54      	ldr	r2, [pc, #336]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802da46:	f023 0304 	bic.w	r3, r3, #4
 802da4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802da4c:	687b      	ldr	r3, [r7, #4]
 802da4e:	689b      	ldr	r3, [r3, #8]
 802da50:	2b00      	cmp	r3, #0
 802da52:	d015      	beq.n	802da80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802da54:	f7fe fcee 	bl	802c434 <HAL_GetTick>
 802da58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802da5a:	e00a      	b.n	802da72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802da5c:	f7fe fcea 	bl	802c434 <HAL_GetTick>
 802da60:	4602      	mov	r2, r0
 802da62:	693b      	ldr	r3, [r7, #16]
 802da64:	1ad3      	subs	r3, r2, r3
 802da66:	f241 3288 	movw	r2, #5000	@ 0x1388
 802da6a:	4293      	cmp	r3, r2
 802da6c:	d901      	bls.n	802da72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 802da6e:	2303      	movs	r3, #3
 802da70:	e0cb      	b.n	802dc0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802da72:	4b49      	ldr	r3, [pc, #292]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802da74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802da76:	f003 0302 	and.w	r3, r3, #2
 802da7a:	2b00      	cmp	r3, #0
 802da7c:	d0ee      	beq.n	802da5c <HAL_RCC_OscConfig+0x334>
 802da7e:	e014      	b.n	802daaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802da80:	f7fe fcd8 	bl	802c434 <HAL_GetTick>
 802da84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802da86:	e00a      	b.n	802da9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802da88:	f7fe fcd4 	bl	802c434 <HAL_GetTick>
 802da8c:	4602      	mov	r2, r0
 802da8e:	693b      	ldr	r3, [r7, #16]
 802da90:	1ad3      	subs	r3, r2, r3
 802da92:	f241 3288 	movw	r2, #5000	@ 0x1388
 802da96:	4293      	cmp	r3, r2
 802da98:	d901      	bls.n	802da9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 802da9a:	2303      	movs	r3, #3
 802da9c:	e0b5      	b.n	802dc0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802da9e:	4b3e      	ldr	r3, [pc, #248]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802daa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802daa2:	f003 0302 	and.w	r3, r3, #2
 802daa6:	2b00      	cmp	r3, #0
 802daa8:	d1ee      	bne.n	802da88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 802daaa:	7dfb      	ldrb	r3, [r7, #23]
 802daac:	2b01      	cmp	r3, #1
 802daae:	d105      	bne.n	802dabc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802dab0:	4b39      	ldr	r3, [pc, #228]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802dab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802dab4:	4a38      	ldr	r2, [pc, #224]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802dab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 802daba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802dabc:	687b      	ldr	r3, [r7, #4]
 802dabe:	699b      	ldr	r3, [r3, #24]
 802dac0:	2b00      	cmp	r3, #0
 802dac2:	f000 80a1 	beq.w	802dc08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 802dac6:	4b34      	ldr	r3, [pc, #208]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802dac8:	689b      	ldr	r3, [r3, #8]
 802daca:	f003 030c 	and.w	r3, r3, #12
 802dace:	2b08      	cmp	r3, #8
 802dad0:	d05c      	beq.n	802db8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802dad2:	687b      	ldr	r3, [r7, #4]
 802dad4:	699b      	ldr	r3, [r3, #24]
 802dad6:	2b02      	cmp	r3, #2
 802dad8:	d141      	bne.n	802db5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802dada:	4b31      	ldr	r3, [pc, #196]	@ (802dba0 <HAL_RCC_OscConfig+0x478>)
 802dadc:	2200      	movs	r2, #0
 802dade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802dae0:	f7fe fca8 	bl	802c434 <HAL_GetTick>
 802dae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802dae6:	e008      	b.n	802dafa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802dae8:	f7fe fca4 	bl	802c434 <HAL_GetTick>
 802daec:	4602      	mov	r2, r0
 802daee:	693b      	ldr	r3, [r7, #16]
 802daf0:	1ad3      	subs	r3, r2, r3
 802daf2:	2b02      	cmp	r3, #2
 802daf4:	d901      	bls.n	802dafa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 802daf6:	2303      	movs	r3, #3
 802daf8:	e087      	b.n	802dc0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802dafa:	4b27      	ldr	r3, [pc, #156]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802dafc:	681b      	ldr	r3, [r3, #0]
 802dafe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802db02:	2b00      	cmp	r3, #0
 802db04:	d1f0      	bne.n	802dae8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802db06:	687b      	ldr	r3, [r7, #4]
 802db08:	69da      	ldr	r2, [r3, #28]
 802db0a:	687b      	ldr	r3, [r7, #4]
 802db0c:	6a1b      	ldr	r3, [r3, #32]
 802db0e:	431a      	orrs	r2, r3
 802db10:	687b      	ldr	r3, [r7, #4]
 802db12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802db14:	019b      	lsls	r3, r3, #6
 802db16:	431a      	orrs	r2, r3
 802db18:	687b      	ldr	r3, [r7, #4]
 802db1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802db1c:	085b      	lsrs	r3, r3, #1
 802db1e:	3b01      	subs	r3, #1
 802db20:	041b      	lsls	r3, r3, #16
 802db22:	431a      	orrs	r2, r3
 802db24:	687b      	ldr	r3, [r7, #4]
 802db26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802db28:	061b      	lsls	r3, r3, #24
 802db2a:	491b      	ldr	r1, [pc, #108]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802db2c:	4313      	orrs	r3, r2
 802db2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802db30:	4b1b      	ldr	r3, [pc, #108]	@ (802dba0 <HAL_RCC_OscConfig+0x478>)
 802db32:	2201      	movs	r2, #1
 802db34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802db36:	f7fe fc7d 	bl	802c434 <HAL_GetTick>
 802db3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802db3c:	e008      	b.n	802db50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802db3e:	f7fe fc79 	bl	802c434 <HAL_GetTick>
 802db42:	4602      	mov	r2, r0
 802db44:	693b      	ldr	r3, [r7, #16]
 802db46:	1ad3      	subs	r3, r2, r3
 802db48:	2b02      	cmp	r3, #2
 802db4a:	d901      	bls.n	802db50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 802db4c:	2303      	movs	r3, #3
 802db4e:	e05c      	b.n	802dc0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802db50:	4b11      	ldr	r3, [pc, #68]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802db52:	681b      	ldr	r3, [r3, #0]
 802db54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802db58:	2b00      	cmp	r3, #0
 802db5a:	d0f0      	beq.n	802db3e <HAL_RCC_OscConfig+0x416>
 802db5c:	e054      	b.n	802dc08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802db5e:	4b10      	ldr	r3, [pc, #64]	@ (802dba0 <HAL_RCC_OscConfig+0x478>)
 802db60:	2200      	movs	r2, #0
 802db62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802db64:	f7fe fc66 	bl	802c434 <HAL_GetTick>
 802db68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802db6a:	e008      	b.n	802db7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802db6c:	f7fe fc62 	bl	802c434 <HAL_GetTick>
 802db70:	4602      	mov	r2, r0
 802db72:	693b      	ldr	r3, [r7, #16]
 802db74:	1ad3      	subs	r3, r2, r3
 802db76:	2b02      	cmp	r3, #2
 802db78:	d901      	bls.n	802db7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 802db7a:	2303      	movs	r3, #3
 802db7c:	e045      	b.n	802dc0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802db7e:	4b06      	ldr	r3, [pc, #24]	@ (802db98 <HAL_RCC_OscConfig+0x470>)
 802db80:	681b      	ldr	r3, [r3, #0]
 802db82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802db86:	2b00      	cmp	r3, #0
 802db88:	d1f0      	bne.n	802db6c <HAL_RCC_OscConfig+0x444>
 802db8a:	e03d      	b.n	802dc08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802db8c:	687b      	ldr	r3, [r7, #4]
 802db8e:	699b      	ldr	r3, [r3, #24]
 802db90:	2b01      	cmp	r3, #1
 802db92:	d107      	bne.n	802dba4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 802db94:	2301      	movs	r3, #1
 802db96:	e038      	b.n	802dc0a <HAL_RCC_OscConfig+0x4e2>
 802db98:	40023800 	.word	0x40023800
 802db9c:	40007000 	.word	0x40007000
 802dba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 802dba4:	4b1b      	ldr	r3, [pc, #108]	@ (802dc14 <HAL_RCC_OscConfig+0x4ec>)
 802dba6:	685b      	ldr	r3, [r3, #4]
 802dba8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802dbaa:	687b      	ldr	r3, [r7, #4]
 802dbac:	699b      	ldr	r3, [r3, #24]
 802dbae:	2b01      	cmp	r3, #1
 802dbb0:	d028      	beq.n	802dc04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802dbb2:	68fb      	ldr	r3, [r7, #12]
 802dbb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 802dbb8:	687b      	ldr	r3, [r7, #4]
 802dbba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802dbbc:	429a      	cmp	r2, r3
 802dbbe:	d121      	bne.n	802dc04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802dbc0:	68fb      	ldr	r3, [r7, #12]
 802dbc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 802dbc6:	687b      	ldr	r3, [r7, #4]
 802dbc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802dbca:	429a      	cmp	r2, r3
 802dbcc:	d11a      	bne.n	802dc04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802dbce:	68fa      	ldr	r2, [r7, #12]
 802dbd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 802dbd4:	4013      	ands	r3, r2
 802dbd6:	687a      	ldr	r2, [r7, #4]
 802dbd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 802dbda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802dbdc:	4293      	cmp	r3, r2
 802dbde:	d111      	bne.n	802dc04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802dbe0:	68fb      	ldr	r3, [r7, #12]
 802dbe2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 802dbe6:	687b      	ldr	r3, [r7, #4]
 802dbe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802dbea:	085b      	lsrs	r3, r3, #1
 802dbec:	3b01      	subs	r3, #1
 802dbee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802dbf0:	429a      	cmp	r2, r3
 802dbf2:	d107      	bne.n	802dc04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 802dbf4:	68fb      	ldr	r3, [r7, #12]
 802dbf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 802dbfa:	687b      	ldr	r3, [r7, #4]
 802dbfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802dbfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802dc00:	429a      	cmp	r2, r3
 802dc02:	d001      	beq.n	802dc08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 802dc04:	2301      	movs	r3, #1
 802dc06:	e000      	b.n	802dc0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 802dc08:	2300      	movs	r3, #0
}
 802dc0a:	4618      	mov	r0, r3
 802dc0c:	3718      	adds	r7, #24
 802dc0e:	46bd      	mov	sp, r7
 802dc10:	bd80      	pop	{r7, pc}
 802dc12:	bf00      	nop
 802dc14:	40023800 	.word	0x40023800

0802dc18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802dc18:	b580      	push	{r7, lr}
 802dc1a:	b084      	sub	sp, #16
 802dc1c:	af00      	add	r7, sp, #0
 802dc1e:	6078      	str	r0, [r7, #4]
 802dc20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 802dc22:	687b      	ldr	r3, [r7, #4]
 802dc24:	2b00      	cmp	r3, #0
 802dc26:	d101      	bne.n	802dc2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802dc28:	2301      	movs	r3, #1
 802dc2a:	e0cc      	b.n	802ddc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 802dc2c:	4b68      	ldr	r3, [pc, #416]	@ (802ddd0 <HAL_RCC_ClockConfig+0x1b8>)
 802dc2e:	681b      	ldr	r3, [r3, #0]
 802dc30:	f003 0307 	and.w	r3, r3, #7
 802dc34:	683a      	ldr	r2, [r7, #0]
 802dc36:	429a      	cmp	r2, r3
 802dc38:	d90c      	bls.n	802dc54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802dc3a:	4b65      	ldr	r3, [pc, #404]	@ (802ddd0 <HAL_RCC_ClockConfig+0x1b8>)
 802dc3c:	683a      	ldr	r2, [r7, #0]
 802dc3e:	b2d2      	uxtb	r2, r2
 802dc40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802dc42:	4b63      	ldr	r3, [pc, #396]	@ (802ddd0 <HAL_RCC_ClockConfig+0x1b8>)
 802dc44:	681b      	ldr	r3, [r3, #0]
 802dc46:	f003 0307 	and.w	r3, r3, #7
 802dc4a:	683a      	ldr	r2, [r7, #0]
 802dc4c:	429a      	cmp	r2, r3
 802dc4e:	d001      	beq.n	802dc54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 802dc50:	2301      	movs	r3, #1
 802dc52:	e0b8      	b.n	802ddc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802dc54:	687b      	ldr	r3, [r7, #4]
 802dc56:	681b      	ldr	r3, [r3, #0]
 802dc58:	f003 0302 	and.w	r3, r3, #2
 802dc5c:	2b00      	cmp	r3, #0
 802dc5e:	d020      	beq.n	802dca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802dc60:	687b      	ldr	r3, [r7, #4]
 802dc62:	681b      	ldr	r3, [r3, #0]
 802dc64:	f003 0304 	and.w	r3, r3, #4
 802dc68:	2b00      	cmp	r3, #0
 802dc6a:	d005      	beq.n	802dc78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802dc6c:	4b59      	ldr	r3, [pc, #356]	@ (802ddd4 <HAL_RCC_ClockConfig+0x1bc>)
 802dc6e:	689b      	ldr	r3, [r3, #8]
 802dc70:	4a58      	ldr	r2, [pc, #352]	@ (802ddd4 <HAL_RCC_ClockConfig+0x1bc>)
 802dc72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 802dc76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802dc78:	687b      	ldr	r3, [r7, #4]
 802dc7a:	681b      	ldr	r3, [r3, #0]
 802dc7c:	f003 0308 	and.w	r3, r3, #8
 802dc80:	2b00      	cmp	r3, #0
 802dc82:	d005      	beq.n	802dc90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802dc84:	4b53      	ldr	r3, [pc, #332]	@ (802ddd4 <HAL_RCC_ClockConfig+0x1bc>)
 802dc86:	689b      	ldr	r3, [r3, #8]
 802dc88:	4a52      	ldr	r2, [pc, #328]	@ (802ddd4 <HAL_RCC_ClockConfig+0x1bc>)
 802dc8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 802dc8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802dc90:	4b50      	ldr	r3, [pc, #320]	@ (802ddd4 <HAL_RCC_ClockConfig+0x1bc>)
 802dc92:	689b      	ldr	r3, [r3, #8]
 802dc94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 802dc98:	687b      	ldr	r3, [r7, #4]
 802dc9a:	689b      	ldr	r3, [r3, #8]
 802dc9c:	494d      	ldr	r1, [pc, #308]	@ (802ddd4 <HAL_RCC_ClockConfig+0x1bc>)
 802dc9e:	4313      	orrs	r3, r2
 802dca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802dca2:	687b      	ldr	r3, [r7, #4]
 802dca4:	681b      	ldr	r3, [r3, #0]
 802dca6:	f003 0301 	and.w	r3, r3, #1
 802dcaa:	2b00      	cmp	r3, #0
 802dcac:	d044      	beq.n	802dd38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802dcae:	687b      	ldr	r3, [r7, #4]
 802dcb0:	685b      	ldr	r3, [r3, #4]
 802dcb2:	2b01      	cmp	r3, #1
 802dcb4:	d107      	bne.n	802dcc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802dcb6:	4b47      	ldr	r3, [pc, #284]	@ (802ddd4 <HAL_RCC_ClockConfig+0x1bc>)
 802dcb8:	681b      	ldr	r3, [r3, #0]
 802dcba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802dcbe:	2b00      	cmp	r3, #0
 802dcc0:	d119      	bne.n	802dcf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802dcc2:	2301      	movs	r3, #1
 802dcc4:	e07f      	b.n	802ddc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802dcc6:	687b      	ldr	r3, [r7, #4]
 802dcc8:	685b      	ldr	r3, [r3, #4]
 802dcca:	2b02      	cmp	r3, #2
 802dccc:	d003      	beq.n	802dcd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802dcce:	687b      	ldr	r3, [r7, #4]
 802dcd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802dcd2:	2b03      	cmp	r3, #3
 802dcd4:	d107      	bne.n	802dce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802dcd6:	4b3f      	ldr	r3, [pc, #252]	@ (802ddd4 <HAL_RCC_ClockConfig+0x1bc>)
 802dcd8:	681b      	ldr	r3, [r3, #0]
 802dcda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802dcde:	2b00      	cmp	r3, #0
 802dce0:	d109      	bne.n	802dcf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802dce2:	2301      	movs	r3, #1
 802dce4:	e06f      	b.n	802ddc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802dce6:	4b3b      	ldr	r3, [pc, #236]	@ (802ddd4 <HAL_RCC_ClockConfig+0x1bc>)
 802dce8:	681b      	ldr	r3, [r3, #0]
 802dcea:	f003 0302 	and.w	r3, r3, #2
 802dcee:	2b00      	cmp	r3, #0
 802dcf0:	d101      	bne.n	802dcf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802dcf2:	2301      	movs	r3, #1
 802dcf4:	e067      	b.n	802ddc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802dcf6:	4b37      	ldr	r3, [pc, #220]	@ (802ddd4 <HAL_RCC_ClockConfig+0x1bc>)
 802dcf8:	689b      	ldr	r3, [r3, #8]
 802dcfa:	f023 0203 	bic.w	r2, r3, #3
 802dcfe:	687b      	ldr	r3, [r7, #4]
 802dd00:	685b      	ldr	r3, [r3, #4]
 802dd02:	4934      	ldr	r1, [pc, #208]	@ (802ddd4 <HAL_RCC_ClockConfig+0x1bc>)
 802dd04:	4313      	orrs	r3, r2
 802dd06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 802dd08:	f7fe fb94 	bl	802c434 <HAL_GetTick>
 802dd0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802dd0e:	e00a      	b.n	802dd26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802dd10:	f7fe fb90 	bl	802c434 <HAL_GetTick>
 802dd14:	4602      	mov	r2, r0
 802dd16:	68fb      	ldr	r3, [r7, #12]
 802dd18:	1ad3      	subs	r3, r2, r3
 802dd1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 802dd1e:	4293      	cmp	r3, r2
 802dd20:	d901      	bls.n	802dd26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802dd22:	2303      	movs	r3, #3
 802dd24:	e04f      	b.n	802ddc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802dd26:	4b2b      	ldr	r3, [pc, #172]	@ (802ddd4 <HAL_RCC_ClockConfig+0x1bc>)
 802dd28:	689b      	ldr	r3, [r3, #8]
 802dd2a:	f003 020c 	and.w	r2, r3, #12
 802dd2e:	687b      	ldr	r3, [r7, #4]
 802dd30:	685b      	ldr	r3, [r3, #4]
 802dd32:	009b      	lsls	r3, r3, #2
 802dd34:	429a      	cmp	r2, r3
 802dd36:	d1eb      	bne.n	802dd10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 802dd38:	4b25      	ldr	r3, [pc, #148]	@ (802ddd0 <HAL_RCC_ClockConfig+0x1b8>)
 802dd3a:	681b      	ldr	r3, [r3, #0]
 802dd3c:	f003 0307 	and.w	r3, r3, #7
 802dd40:	683a      	ldr	r2, [r7, #0]
 802dd42:	429a      	cmp	r2, r3
 802dd44:	d20c      	bcs.n	802dd60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802dd46:	4b22      	ldr	r3, [pc, #136]	@ (802ddd0 <HAL_RCC_ClockConfig+0x1b8>)
 802dd48:	683a      	ldr	r2, [r7, #0]
 802dd4a:	b2d2      	uxtb	r2, r2
 802dd4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802dd4e:	4b20      	ldr	r3, [pc, #128]	@ (802ddd0 <HAL_RCC_ClockConfig+0x1b8>)
 802dd50:	681b      	ldr	r3, [r3, #0]
 802dd52:	f003 0307 	and.w	r3, r3, #7
 802dd56:	683a      	ldr	r2, [r7, #0]
 802dd58:	429a      	cmp	r2, r3
 802dd5a:	d001      	beq.n	802dd60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 802dd5c:	2301      	movs	r3, #1
 802dd5e:	e032      	b.n	802ddc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802dd60:	687b      	ldr	r3, [r7, #4]
 802dd62:	681b      	ldr	r3, [r3, #0]
 802dd64:	f003 0304 	and.w	r3, r3, #4
 802dd68:	2b00      	cmp	r3, #0
 802dd6a:	d008      	beq.n	802dd7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802dd6c:	4b19      	ldr	r3, [pc, #100]	@ (802ddd4 <HAL_RCC_ClockConfig+0x1bc>)
 802dd6e:	689b      	ldr	r3, [r3, #8]
 802dd70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 802dd74:	687b      	ldr	r3, [r7, #4]
 802dd76:	68db      	ldr	r3, [r3, #12]
 802dd78:	4916      	ldr	r1, [pc, #88]	@ (802ddd4 <HAL_RCC_ClockConfig+0x1bc>)
 802dd7a:	4313      	orrs	r3, r2
 802dd7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802dd7e:	687b      	ldr	r3, [r7, #4]
 802dd80:	681b      	ldr	r3, [r3, #0]
 802dd82:	f003 0308 	and.w	r3, r3, #8
 802dd86:	2b00      	cmp	r3, #0
 802dd88:	d009      	beq.n	802dd9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802dd8a:	4b12      	ldr	r3, [pc, #72]	@ (802ddd4 <HAL_RCC_ClockConfig+0x1bc>)
 802dd8c:	689b      	ldr	r3, [r3, #8]
 802dd8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 802dd92:	687b      	ldr	r3, [r7, #4]
 802dd94:	691b      	ldr	r3, [r3, #16]
 802dd96:	00db      	lsls	r3, r3, #3
 802dd98:	490e      	ldr	r1, [pc, #56]	@ (802ddd4 <HAL_RCC_ClockConfig+0x1bc>)
 802dd9a:	4313      	orrs	r3, r2
 802dd9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 802dd9e:	f000 f821 	bl	802dde4 <HAL_RCC_GetSysClockFreq>
 802dda2:	4602      	mov	r2, r0
 802dda4:	4b0b      	ldr	r3, [pc, #44]	@ (802ddd4 <HAL_RCC_ClockConfig+0x1bc>)
 802dda6:	689b      	ldr	r3, [r3, #8]
 802dda8:	091b      	lsrs	r3, r3, #4
 802ddaa:	f003 030f 	and.w	r3, r3, #15
 802ddae:	490a      	ldr	r1, [pc, #40]	@ (802ddd8 <HAL_RCC_ClockConfig+0x1c0>)
 802ddb0:	5ccb      	ldrb	r3, [r1, r3]
 802ddb2:	fa22 f303 	lsr.w	r3, r2, r3
 802ddb6:	4a09      	ldr	r2, [pc, #36]	@ (802dddc <HAL_RCC_ClockConfig+0x1c4>)
 802ddb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 802ddba:	4b09      	ldr	r3, [pc, #36]	@ (802dde0 <HAL_RCC_ClockConfig+0x1c8>)
 802ddbc:	681b      	ldr	r3, [r3, #0]
 802ddbe:	4618      	mov	r0, r3
 802ddc0:	f7fe faf4 	bl	802c3ac <HAL_InitTick>

  return HAL_OK;
 802ddc4:	2300      	movs	r3, #0
}
 802ddc6:	4618      	mov	r0, r3
 802ddc8:	3710      	adds	r7, #16
 802ddca:	46bd      	mov	sp, r7
 802ddcc:	bd80      	pop	{r7, pc}
 802ddce:	bf00      	nop
 802ddd0:	40023c00 	.word	0x40023c00
 802ddd4:	40023800 	.word	0x40023800
 802ddd8:	080330e0 	.word	0x080330e0
 802dddc:	20000054 	.word	0x20000054
 802dde0:	20000058 	.word	0x20000058

0802dde4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802dde4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802dde8:	b094      	sub	sp, #80	@ 0x50
 802ddea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 802ddec:	2300      	movs	r3, #0
 802ddee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 802ddf0:	2300      	movs	r3, #0
 802ddf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 802ddf4:	2300      	movs	r3, #0
 802ddf6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 802ddf8:	2300      	movs	r3, #0
 802ddfa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802ddfc:	4b79      	ldr	r3, [pc, #484]	@ (802dfe4 <HAL_RCC_GetSysClockFreq+0x200>)
 802ddfe:	689b      	ldr	r3, [r3, #8]
 802de00:	f003 030c 	and.w	r3, r3, #12
 802de04:	2b08      	cmp	r3, #8
 802de06:	d00d      	beq.n	802de24 <HAL_RCC_GetSysClockFreq+0x40>
 802de08:	2b08      	cmp	r3, #8
 802de0a:	f200 80e1 	bhi.w	802dfd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 802de0e:	2b00      	cmp	r3, #0
 802de10:	d002      	beq.n	802de18 <HAL_RCC_GetSysClockFreq+0x34>
 802de12:	2b04      	cmp	r3, #4
 802de14:	d003      	beq.n	802de1e <HAL_RCC_GetSysClockFreq+0x3a>
 802de16:	e0db      	b.n	802dfd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802de18:	4b73      	ldr	r3, [pc, #460]	@ (802dfe8 <HAL_RCC_GetSysClockFreq+0x204>)
 802de1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 802de1c:	e0db      	b.n	802dfd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802de1e:	4b73      	ldr	r3, [pc, #460]	@ (802dfec <HAL_RCC_GetSysClockFreq+0x208>)
 802de20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 802de22:	e0d8      	b.n	802dfd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802de24:	4b6f      	ldr	r3, [pc, #444]	@ (802dfe4 <HAL_RCC_GetSysClockFreq+0x200>)
 802de26:	685b      	ldr	r3, [r3, #4]
 802de28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802de2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802de2e:	4b6d      	ldr	r3, [pc, #436]	@ (802dfe4 <HAL_RCC_GetSysClockFreq+0x200>)
 802de30:	685b      	ldr	r3, [r3, #4]
 802de32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802de36:	2b00      	cmp	r3, #0
 802de38:	d063      	beq.n	802df02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802de3a:	4b6a      	ldr	r3, [pc, #424]	@ (802dfe4 <HAL_RCC_GetSysClockFreq+0x200>)
 802de3c:	685b      	ldr	r3, [r3, #4]
 802de3e:	099b      	lsrs	r3, r3, #6
 802de40:	2200      	movs	r2, #0
 802de42:	63bb      	str	r3, [r7, #56]	@ 0x38
 802de44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 802de46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802de48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802de4c:	633b      	str	r3, [r7, #48]	@ 0x30
 802de4e:	2300      	movs	r3, #0
 802de50:	637b      	str	r3, [r7, #52]	@ 0x34
 802de52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 802de56:	4622      	mov	r2, r4
 802de58:	462b      	mov	r3, r5
 802de5a:	f04f 0000 	mov.w	r0, #0
 802de5e:	f04f 0100 	mov.w	r1, #0
 802de62:	0159      	lsls	r1, r3, #5
 802de64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802de68:	0150      	lsls	r0, r2, #5
 802de6a:	4602      	mov	r2, r0
 802de6c:	460b      	mov	r3, r1
 802de6e:	4621      	mov	r1, r4
 802de70:	1a51      	subs	r1, r2, r1
 802de72:	6139      	str	r1, [r7, #16]
 802de74:	4629      	mov	r1, r5
 802de76:	eb63 0301 	sbc.w	r3, r3, r1
 802de7a:	617b      	str	r3, [r7, #20]
 802de7c:	f04f 0200 	mov.w	r2, #0
 802de80:	f04f 0300 	mov.w	r3, #0
 802de84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802de88:	4659      	mov	r1, fp
 802de8a:	018b      	lsls	r3, r1, #6
 802de8c:	4651      	mov	r1, sl
 802de8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 802de92:	4651      	mov	r1, sl
 802de94:	018a      	lsls	r2, r1, #6
 802de96:	4651      	mov	r1, sl
 802de98:	ebb2 0801 	subs.w	r8, r2, r1
 802de9c:	4659      	mov	r1, fp
 802de9e:	eb63 0901 	sbc.w	r9, r3, r1
 802dea2:	f04f 0200 	mov.w	r2, #0
 802dea6:	f04f 0300 	mov.w	r3, #0
 802deaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802deae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802deb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802deb6:	4690      	mov	r8, r2
 802deb8:	4699      	mov	r9, r3
 802deba:	4623      	mov	r3, r4
 802debc:	eb18 0303 	adds.w	r3, r8, r3
 802dec0:	60bb      	str	r3, [r7, #8]
 802dec2:	462b      	mov	r3, r5
 802dec4:	eb49 0303 	adc.w	r3, r9, r3
 802dec8:	60fb      	str	r3, [r7, #12]
 802deca:	f04f 0200 	mov.w	r2, #0
 802dece:	f04f 0300 	mov.w	r3, #0
 802ded2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 802ded6:	4629      	mov	r1, r5
 802ded8:	024b      	lsls	r3, r1, #9
 802deda:	4621      	mov	r1, r4
 802dedc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 802dee0:	4621      	mov	r1, r4
 802dee2:	024a      	lsls	r2, r1, #9
 802dee4:	4610      	mov	r0, r2
 802dee6:	4619      	mov	r1, r3
 802dee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802deea:	2200      	movs	r2, #0
 802deec:	62bb      	str	r3, [r7, #40]	@ 0x28
 802deee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802def0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 802def4:	f7f3 f86a 	bl	8020fcc <__aeabi_uldivmod>
 802def8:	4602      	mov	r2, r0
 802defa:	460b      	mov	r3, r1
 802defc:	4613      	mov	r3, r2
 802defe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802df00:	e058      	b.n	802dfb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802df02:	4b38      	ldr	r3, [pc, #224]	@ (802dfe4 <HAL_RCC_GetSysClockFreq+0x200>)
 802df04:	685b      	ldr	r3, [r3, #4]
 802df06:	099b      	lsrs	r3, r3, #6
 802df08:	2200      	movs	r2, #0
 802df0a:	4618      	mov	r0, r3
 802df0c:	4611      	mov	r1, r2
 802df0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 802df12:	623b      	str	r3, [r7, #32]
 802df14:	2300      	movs	r3, #0
 802df16:	627b      	str	r3, [r7, #36]	@ 0x24
 802df18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 802df1c:	4642      	mov	r2, r8
 802df1e:	464b      	mov	r3, r9
 802df20:	f04f 0000 	mov.w	r0, #0
 802df24:	f04f 0100 	mov.w	r1, #0
 802df28:	0159      	lsls	r1, r3, #5
 802df2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802df2e:	0150      	lsls	r0, r2, #5
 802df30:	4602      	mov	r2, r0
 802df32:	460b      	mov	r3, r1
 802df34:	4641      	mov	r1, r8
 802df36:	ebb2 0a01 	subs.w	sl, r2, r1
 802df3a:	4649      	mov	r1, r9
 802df3c:	eb63 0b01 	sbc.w	fp, r3, r1
 802df40:	f04f 0200 	mov.w	r2, #0
 802df44:	f04f 0300 	mov.w	r3, #0
 802df48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 802df4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 802df50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 802df54:	ebb2 040a 	subs.w	r4, r2, sl
 802df58:	eb63 050b 	sbc.w	r5, r3, fp
 802df5c:	f04f 0200 	mov.w	r2, #0
 802df60:	f04f 0300 	mov.w	r3, #0
 802df64:	00eb      	lsls	r3, r5, #3
 802df66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802df6a:	00e2      	lsls	r2, r4, #3
 802df6c:	4614      	mov	r4, r2
 802df6e:	461d      	mov	r5, r3
 802df70:	4643      	mov	r3, r8
 802df72:	18e3      	adds	r3, r4, r3
 802df74:	603b      	str	r3, [r7, #0]
 802df76:	464b      	mov	r3, r9
 802df78:	eb45 0303 	adc.w	r3, r5, r3
 802df7c:	607b      	str	r3, [r7, #4]
 802df7e:	f04f 0200 	mov.w	r2, #0
 802df82:	f04f 0300 	mov.w	r3, #0
 802df86:	e9d7 4500 	ldrd	r4, r5, [r7]
 802df8a:	4629      	mov	r1, r5
 802df8c:	028b      	lsls	r3, r1, #10
 802df8e:	4621      	mov	r1, r4
 802df90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 802df94:	4621      	mov	r1, r4
 802df96:	028a      	lsls	r2, r1, #10
 802df98:	4610      	mov	r0, r2
 802df9a:	4619      	mov	r1, r3
 802df9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802df9e:	2200      	movs	r2, #0
 802dfa0:	61bb      	str	r3, [r7, #24]
 802dfa2:	61fa      	str	r2, [r7, #28]
 802dfa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802dfa8:	f7f3 f810 	bl	8020fcc <__aeabi_uldivmod>
 802dfac:	4602      	mov	r2, r0
 802dfae:	460b      	mov	r3, r1
 802dfb0:	4613      	mov	r3, r2
 802dfb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 802dfb4:	4b0b      	ldr	r3, [pc, #44]	@ (802dfe4 <HAL_RCC_GetSysClockFreq+0x200>)
 802dfb6:	685b      	ldr	r3, [r3, #4]
 802dfb8:	0c1b      	lsrs	r3, r3, #16
 802dfba:	f003 0303 	and.w	r3, r3, #3
 802dfbe:	3301      	adds	r3, #1
 802dfc0:	005b      	lsls	r3, r3, #1
 802dfc2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 802dfc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802dfc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802dfc8:	fbb2 f3f3 	udiv	r3, r2, r3
 802dfcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 802dfce:	e002      	b.n	802dfd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802dfd0:	4b05      	ldr	r3, [pc, #20]	@ (802dfe8 <HAL_RCC_GetSysClockFreq+0x204>)
 802dfd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 802dfd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 802dfd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 802dfd8:	4618      	mov	r0, r3
 802dfda:	3750      	adds	r7, #80	@ 0x50
 802dfdc:	46bd      	mov	sp, r7
 802dfde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802dfe2:	bf00      	nop
 802dfe4:	40023800 	.word	0x40023800
 802dfe8:	00f42400 	.word	0x00f42400
 802dfec:	007a1200 	.word	0x007a1200

0802dff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802dff0:	b480      	push	{r7}
 802dff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 802dff4:	4b03      	ldr	r3, [pc, #12]	@ (802e004 <HAL_RCC_GetHCLKFreq+0x14>)
 802dff6:	681b      	ldr	r3, [r3, #0]
}
 802dff8:	4618      	mov	r0, r3
 802dffa:	46bd      	mov	sp, r7
 802dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e000:	4770      	bx	lr
 802e002:	bf00      	nop
 802e004:	20000054 	.word	0x20000054

0802e008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802e008:	b580      	push	{r7, lr}
 802e00a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 802e00c:	f7ff fff0 	bl	802dff0 <HAL_RCC_GetHCLKFreq>
 802e010:	4602      	mov	r2, r0
 802e012:	4b05      	ldr	r3, [pc, #20]	@ (802e028 <HAL_RCC_GetPCLK1Freq+0x20>)
 802e014:	689b      	ldr	r3, [r3, #8]
 802e016:	0a9b      	lsrs	r3, r3, #10
 802e018:	f003 0307 	and.w	r3, r3, #7
 802e01c:	4903      	ldr	r1, [pc, #12]	@ (802e02c <HAL_RCC_GetPCLK1Freq+0x24>)
 802e01e:	5ccb      	ldrb	r3, [r1, r3]
 802e020:	fa22 f303 	lsr.w	r3, r2, r3
}
 802e024:	4618      	mov	r0, r3
 802e026:	bd80      	pop	{r7, pc}
 802e028:	40023800 	.word	0x40023800
 802e02c:	080330f0 	.word	0x080330f0

0802e030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802e030:	b580      	push	{r7, lr}
 802e032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 802e034:	f7ff ffdc 	bl	802dff0 <HAL_RCC_GetHCLKFreq>
 802e038:	4602      	mov	r2, r0
 802e03a:	4b05      	ldr	r3, [pc, #20]	@ (802e050 <HAL_RCC_GetPCLK2Freq+0x20>)
 802e03c:	689b      	ldr	r3, [r3, #8]
 802e03e:	0b5b      	lsrs	r3, r3, #13
 802e040:	f003 0307 	and.w	r3, r3, #7
 802e044:	4903      	ldr	r1, [pc, #12]	@ (802e054 <HAL_RCC_GetPCLK2Freq+0x24>)
 802e046:	5ccb      	ldrb	r3, [r1, r3]
 802e048:	fa22 f303 	lsr.w	r3, r2, r3
}
 802e04c:	4618      	mov	r0, r3
 802e04e:	bd80      	pop	{r7, pc}
 802e050:	40023800 	.word	0x40023800
 802e054:	080330f0 	.word	0x080330f0

0802e058 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 802e058:	b580      	push	{r7, lr}
 802e05a:	b082      	sub	sp, #8
 802e05c:	af00      	add	r7, sp, #0
 802e05e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 802e060:	687b      	ldr	r3, [r7, #4]
 802e062:	2b00      	cmp	r3, #0
 802e064:	d101      	bne.n	802e06a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 802e066:	2301      	movs	r3, #1
 802e068:	e01c      	b.n	802e0a4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 802e06a:	687b      	ldr	r3, [r7, #4]
 802e06c:	795b      	ldrb	r3, [r3, #5]
 802e06e:	b2db      	uxtb	r3, r3
 802e070:	2b00      	cmp	r3, #0
 802e072:	d105      	bne.n	802e080 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 802e074:	687b      	ldr	r3, [r7, #4]
 802e076:	2200      	movs	r2, #0
 802e078:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 802e07a:	6878      	ldr	r0, [r7, #4]
 802e07c:	f7fd fe22 	bl	802bcc4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 802e080:	687b      	ldr	r3, [r7, #4]
 802e082:	2202      	movs	r2, #2
 802e084:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 802e086:	687b      	ldr	r3, [r7, #4]
 802e088:	681b      	ldr	r3, [r3, #0]
 802e08a:	681a      	ldr	r2, [r3, #0]
 802e08c:	687b      	ldr	r3, [r7, #4]
 802e08e:	681b      	ldr	r3, [r3, #0]
 802e090:	f042 0204 	orr.w	r2, r2, #4
 802e094:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 802e096:	687b      	ldr	r3, [r7, #4]
 802e098:	2201      	movs	r2, #1
 802e09a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 802e09c:	687b      	ldr	r3, [r7, #4]
 802e09e:	2200      	movs	r2, #0
 802e0a0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 802e0a2:	2300      	movs	r3, #0
}
 802e0a4:	4618      	mov	r0, r3
 802e0a6:	3708      	adds	r7, #8
 802e0a8:	46bd      	mov	sp, r7
 802e0aa:	bd80      	pop	{r7, pc}

0802e0ac <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 802e0ac:	b580      	push	{r7, lr}
 802e0ae:	b082      	sub	sp, #8
 802e0b0:	af00      	add	r7, sp, #0
 802e0b2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 802e0b4:	687b      	ldr	r3, [r7, #4]
 802e0b6:	2b00      	cmp	r3, #0
 802e0b8:	d101      	bne.n	802e0be <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 802e0ba:	2301      	movs	r3, #1
 802e0bc:	e01c      	b.n	802e0f8 <HAL_RNG_DeInit+0x4c>
  }

  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 802e0be:	687b      	ldr	r3, [r7, #4]
 802e0c0:	681b      	ldr	r3, [r3, #0]
 802e0c2:	681a      	ldr	r2, [r3, #0]
 802e0c4:	687b      	ldr	r3, [r7, #4]
 802e0c6:	681b      	ldr	r3, [r3, #0]
 802e0c8:	f022 020c 	bic.w	r2, r2, #12
 802e0cc:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 802e0ce:	687b      	ldr	r3, [r7, #4]
 802e0d0:	681b      	ldr	r3, [r3, #0]
 802e0d2:	685a      	ldr	r2, [r3, #4]
 802e0d4:	687b      	ldr	r3, [r7, #4]
 802e0d6:	681b      	ldr	r3, [r3, #0]
 802e0d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 802e0dc:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 802e0de:	6878      	ldr	r0, [r7, #4]
 802e0e0:	f7fd fe12 	bl	802bd08 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 802e0e4:	687b      	ldr	r3, [r7, #4]
 802e0e6:	2200      	movs	r2, #0
 802e0e8:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 802e0ea:	687b      	ldr	r3, [r7, #4]
 802e0ec:	2200      	movs	r2, #0
 802e0ee:	609a      	str	r2, [r3, #8]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 802e0f0:	687b      	ldr	r3, [r7, #4]
 802e0f2:	2200      	movs	r2, #0
 802e0f4:	711a      	strb	r2, [r3, #4]

  /* Return the function status */
  return HAL_OK;
 802e0f6:	2300      	movs	r3, #0
}
 802e0f8:	4618      	mov	r0, r3
 802e0fa:	3708      	adds	r7, #8
 802e0fc:	46bd      	mov	sp, r7
 802e0fe:	bd80      	pop	{r7, pc}

0802e100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 802e100:	b580      	push	{r7, lr}
 802e102:	b082      	sub	sp, #8
 802e104:	af00      	add	r7, sp, #0
 802e106:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802e108:	687b      	ldr	r3, [r7, #4]
 802e10a:	2b00      	cmp	r3, #0
 802e10c:	d101      	bne.n	802e112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 802e10e:	2301      	movs	r3, #1
 802e110:	e07b      	b.n	802e20a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 802e112:	687b      	ldr	r3, [r7, #4]
 802e114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802e116:	2b00      	cmp	r3, #0
 802e118:	d108      	bne.n	802e12c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 802e11a:	687b      	ldr	r3, [r7, #4]
 802e11c:	685b      	ldr	r3, [r3, #4]
 802e11e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 802e122:	d009      	beq.n	802e138 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 802e124:	687b      	ldr	r3, [r7, #4]
 802e126:	2200      	movs	r2, #0
 802e128:	61da      	str	r2, [r3, #28]
 802e12a:	e005      	b.n	802e138 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 802e12c:	687b      	ldr	r3, [r7, #4]
 802e12e:	2200      	movs	r2, #0
 802e130:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 802e132:	687b      	ldr	r3, [r7, #4]
 802e134:	2200      	movs	r2, #0
 802e136:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802e138:	687b      	ldr	r3, [r7, #4]
 802e13a:	2200      	movs	r2, #0
 802e13c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802e13e:	687b      	ldr	r3, [r7, #4]
 802e140:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 802e144:	b2db      	uxtb	r3, r3
 802e146:	2b00      	cmp	r3, #0
 802e148:	d106      	bne.n	802e158 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802e14a:	687b      	ldr	r3, [r7, #4]
 802e14c:	2200      	movs	r2, #0
 802e14e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802e152:	6878      	ldr	r0, [r7, #4]
 802e154:	f7fd fe28 	bl	802bda8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802e158:	687b      	ldr	r3, [r7, #4]
 802e15a:	2202      	movs	r2, #2
 802e15c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802e160:	687b      	ldr	r3, [r7, #4]
 802e162:	681b      	ldr	r3, [r3, #0]
 802e164:	681a      	ldr	r2, [r3, #0]
 802e166:	687b      	ldr	r3, [r7, #4]
 802e168:	681b      	ldr	r3, [r3, #0]
 802e16a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 802e16e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 802e170:	687b      	ldr	r3, [r7, #4]
 802e172:	685b      	ldr	r3, [r3, #4]
 802e174:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 802e178:	687b      	ldr	r3, [r7, #4]
 802e17a:	689b      	ldr	r3, [r3, #8]
 802e17c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 802e180:	431a      	orrs	r2, r3
 802e182:	687b      	ldr	r3, [r7, #4]
 802e184:	68db      	ldr	r3, [r3, #12]
 802e186:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 802e18a:	431a      	orrs	r2, r3
 802e18c:	687b      	ldr	r3, [r7, #4]
 802e18e:	691b      	ldr	r3, [r3, #16]
 802e190:	f003 0302 	and.w	r3, r3, #2
 802e194:	431a      	orrs	r2, r3
 802e196:	687b      	ldr	r3, [r7, #4]
 802e198:	695b      	ldr	r3, [r3, #20]
 802e19a:	f003 0301 	and.w	r3, r3, #1
 802e19e:	431a      	orrs	r2, r3
 802e1a0:	687b      	ldr	r3, [r7, #4]
 802e1a2:	699b      	ldr	r3, [r3, #24]
 802e1a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802e1a8:	431a      	orrs	r2, r3
 802e1aa:	687b      	ldr	r3, [r7, #4]
 802e1ac:	69db      	ldr	r3, [r3, #28]
 802e1ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 802e1b2:	431a      	orrs	r2, r3
 802e1b4:	687b      	ldr	r3, [r7, #4]
 802e1b6:	6a1b      	ldr	r3, [r3, #32]
 802e1b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802e1bc:	ea42 0103 	orr.w	r1, r2, r3
 802e1c0:	687b      	ldr	r3, [r7, #4]
 802e1c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802e1c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 802e1c8:	687b      	ldr	r3, [r7, #4]
 802e1ca:	681b      	ldr	r3, [r3, #0]
 802e1cc:	430a      	orrs	r2, r1
 802e1ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 802e1d0:	687b      	ldr	r3, [r7, #4]
 802e1d2:	699b      	ldr	r3, [r3, #24]
 802e1d4:	0c1b      	lsrs	r3, r3, #16
 802e1d6:	f003 0104 	and.w	r1, r3, #4
 802e1da:	687b      	ldr	r3, [r7, #4]
 802e1dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802e1de:	f003 0210 	and.w	r2, r3, #16
 802e1e2:	687b      	ldr	r3, [r7, #4]
 802e1e4:	681b      	ldr	r3, [r3, #0]
 802e1e6:	430a      	orrs	r2, r1
 802e1e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 802e1ea:	687b      	ldr	r3, [r7, #4]
 802e1ec:	681b      	ldr	r3, [r3, #0]
 802e1ee:	69da      	ldr	r2, [r3, #28]
 802e1f0:	687b      	ldr	r3, [r7, #4]
 802e1f2:	681b      	ldr	r3, [r3, #0]
 802e1f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 802e1f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802e1fa:	687b      	ldr	r3, [r7, #4]
 802e1fc:	2200      	movs	r2, #0
 802e1fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 802e200:	687b      	ldr	r3, [r7, #4]
 802e202:	2201      	movs	r2, #1
 802e204:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 802e208:	2300      	movs	r3, #0
}
 802e20a:	4618      	mov	r0, r3
 802e20c:	3708      	adds	r7, #8
 802e20e:	46bd      	mov	sp, r7
 802e210:	bd80      	pop	{r7, pc}

0802e212 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802e212:	b580      	push	{r7, lr}
 802e214:	b088      	sub	sp, #32
 802e216:	af00      	add	r7, sp, #0
 802e218:	60f8      	str	r0, [r7, #12]
 802e21a:	60b9      	str	r1, [r7, #8]
 802e21c:	603b      	str	r3, [r7, #0]
 802e21e:	4613      	mov	r3, r2
 802e220:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802e222:	f7fe f907 	bl	802c434 <HAL_GetTick>
 802e226:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 802e228:	88fb      	ldrh	r3, [r7, #6]
 802e22a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 802e22c:	68fb      	ldr	r3, [r7, #12]
 802e22e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 802e232:	b2db      	uxtb	r3, r3
 802e234:	2b01      	cmp	r3, #1
 802e236:	d001      	beq.n	802e23c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 802e238:	2302      	movs	r3, #2
 802e23a:	e12a      	b.n	802e492 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 802e23c:	68bb      	ldr	r3, [r7, #8]
 802e23e:	2b00      	cmp	r3, #0
 802e240:	d002      	beq.n	802e248 <HAL_SPI_Transmit+0x36>
 802e242:	88fb      	ldrh	r3, [r7, #6]
 802e244:	2b00      	cmp	r3, #0
 802e246:	d101      	bne.n	802e24c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 802e248:	2301      	movs	r3, #1
 802e24a:	e122      	b.n	802e492 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 802e24c:	68fb      	ldr	r3, [r7, #12]
 802e24e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 802e252:	2b01      	cmp	r3, #1
 802e254:	d101      	bne.n	802e25a <HAL_SPI_Transmit+0x48>
 802e256:	2302      	movs	r3, #2
 802e258:	e11b      	b.n	802e492 <HAL_SPI_Transmit+0x280>
 802e25a:	68fb      	ldr	r3, [r7, #12]
 802e25c:	2201      	movs	r2, #1
 802e25e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 802e262:	68fb      	ldr	r3, [r7, #12]
 802e264:	2203      	movs	r2, #3
 802e266:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802e26a:	68fb      	ldr	r3, [r7, #12]
 802e26c:	2200      	movs	r2, #0
 802e26e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 802e270:	68fb      	ldr	r3, [r7, #12]
 802e272:	68ba      	ldr	r2, [r7, #8]
 802e274:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 802e276:	68fb      	ldr	r3, [r7, #12]
 802e278:	88fa      	ldrh	r2, [r7, #6]
 802e27a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 802e27c:	68fb      	ldr	r3, [r7, #12]
 802e27e:	88fa      	ldrh	r2, [r7, #6]
 802e280:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 802e282:	68fb      	ldr	r3, [r7, #12]
 802e284:	2200      	movs	r2, #0
 802e286:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 802e288:	68fb      	ldr	r3, [r7, #12]
 802e28a:	2200      	movs	r2, #0
 802e28c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 802e28e:	68fb      	ldr	r3, [r7, #12]
 802e290:	2200      	movs	r2, #0
 802e292:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 802e294:	68fb      	ldr	r3, [r7, #12]
 802e296:	2200      	movs	r2, #0
 802e298:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 802e29a:	68fb      	ldr	r3, [r7, #12]
 802e29c:	2200      	movs	r2, #0
 802e29e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802e2a0:	68fb      	ldr	r3, [r7, #12]
 802e2a2:	689b      	ldr	r3, [r3, #8]
 802e2a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802e2a8:	d10f      	bne.n	802e2ca <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 802e2aa:	68fb      	ldr	r3, [r7, #12]
 802e2ac:	681b      	ldr	r3, [r3, #0]
 802e2ae:	681a      	ldr	r2, [r3, #0]
 802e2b0:	68fb      	ldr	r3, [r7, #12]
 802e2b2:	681b      	ldr	r3, [r3, #0]
 802e2b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 802e2b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 802e2ba:	68fb      	ldr	r3, [r7, #12]
 802e2bc:	681b      	ldr	r3, [r3, #0]
 802e2be:	681a      	ldr	r2, [r3, #0]
 802e2c0:	68fb      	ldr	r3, [r7, #12]
 802e2c2:	681b      	ldr	r3, [r3, #0]
 802e2c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 802e2c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802e2ca:	68fb      	ldr	r3, [r7, #12]
 802e2cc:	681b      	ldr	r3, [r3, #0]
 802e2ce:	681b      	ldr	r3, [r3, #0]
 802e2d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802e2d4:	2b40      	cmp	r3, #64	@ 0x40
 802e2d6:	d007      	beq.n	802e2e8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802e2d8:	68fb      	ldr	r3, [r7, #12]
 802e2da:	681b      	ldr	r3, [r3, #0]
 802e2dc:	681a      	ldr	r2, [r3, #0]
 802e2de:	68fb      	ldr	r3, [r7, #12]
 802e2e0:	681b      	ldr	r3, [r3, #0]
 802e2e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 802e2e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802e2e8:	68fb      	ldr	r3, [r7, #12]
 802e2ea:	68db      	ldr	r3, [r3, #12]
 802e2ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802e2f0:	d152      	bne.n	802e398 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802e2f2:	68fb      	ldr	r3, [r7, #12]
 802e2f4:	685b      	ldr	r3, [r3, #4]
 802e2f6:	2b00      	cmp	r3, #0
 802e2f8:	d002      	beq.n	802e300 <HAL_SPI_Transmit+0xee>
 802e2fa:	8b7b      	ldrh	r3, [r7, #26]
 802e2fc:	2b01      	cmp	r3, #1
 802e2fe:	d145      	bne.n	802e38c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 802e300:	68fb      	ldr	r3, [r7, #12]
 802e302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802e304:	881a      	ldrh	r2, [r3, #0]
 802e306:	68fb      	ldr	r3, [r7, #12]
 802e308:	681b      	ldr	r3, [r3, #0]
 802e30a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 802e30c:	68fb      	ldr	r3, [r7, #12]
 802e30e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802e310:	1c9a      	adds	r2, r3, #2
 802e312:	68fb      	ldr	r3, [r7, #12]
 802e314:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 802e316:	68fb      	ldr	r3, [r7, #12]
 802e318:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802e31a:	b29b      	uxth	r3, r3
 802e31c:	3b01      	subs	r3, #1
 802e31e:	b29a      	uxth	r2, r3
 802e320:	68fb      	ldr	r3, [r7, #12]
 802e322:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 802e324:	e032      	b.n	802e38c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 802e326:	68fb      	ldr	r3, [r7, #12]
 802e328:	681b      	ldr	r3, [r3, #0]
 802e32a:	689b      	ldr	r3, [r3, #8]
 802e32c:	f003 0302 	and.w	r3, r3, #2
 802e330:	2b02      	cmp	r3, #2
 802e332:	d112      	bne.n	802e35a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 802e334:	68fb      	ldr	r3, [r7, #12]
 802e336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802e338:	881a      	ldrh	r2, [r3, #0]
 802e33a:	68fb      	ldr	r3, [r7, #12]
 802e33c:	681b      	ldr	r3, [r3, #0]
 802e33e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802e340:	68fb      	ldr	r3, [r7, #12]
 802e342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802e344:	1c9a      	adds	r2, r3, #2
 802e346:	68fb      	ldr	r3, [r7, #12]
 802e348:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 802e34a:	68fb      	ldr	r3, [r7, #12]
 802e34c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802e34e:	b29b      	uxth	r3, r3
 802e350:	3b01      	subs	r3, #1
 802e352:	b29a      	uxth	r2, r3
 802e354:	68fb      	ldr	r3, [r7, #12]
 802e356:	86da      	strh	r2, [r3, #54]	@ 0x36
 802e358:	e018      	b.n	802e38c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802e35a:	f7fe f86b 	bl	802c434 <HAL_GetTick>
 802e35e:	4602      	mov	r2, r0
 802e360:	69fb      	ldr	r3, [r7, #28]
 802e362:	1ad3      	subs	r3, r2, r3
 802e364:	683a      	ldr	r2, [r7, #0]
 802e366:	429a      	cmp	r2, r3
 802e368:	d803      	bhi.n	802e372 <HAL_SPI_Transmit+0x160>
 802e36a:	683b      	ldr	r3, [r7, #0]
 802e36c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802e370:	d102      	bne.n	802e378 <HAL_SPI_Transmit+0x166>
 802e372:	683b      	ldr	r3, [r7, #0]
 802e374:	2b00      	cmp	r3, #0
 802e376:	d109      	bne.n	802e38c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 802e378:	68fb      	ldr	r3, [r7, #12]
 802e37a:	2201      	movs	r2, #1
 802e37c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 802e380:	68fb      	ldr	r3, [r7, #12]
 802e382:	2200      	movs	r2, #0
 802e384:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 802e388:	2303      	movs	r3, #3
 802e38a:	e082      	b.n	802e492 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 802e38c:	68fb      	ldr	r3, [r7, #12]
 802e38e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802e390:	b29b      	uxth	r3, r3
 802e392:	2b00      	cmp	r3, #0
 802e394:	d1c7      	bne.n	802e326 <HAL_SPI_Transmit+0x114>
 802e396:	e053      	b.n	802e440 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802e398:	68fb      	ldr	r3, [r7, #12]
 802e39a:	685b      	ldr	r3, [r3, #4]
 802e39c:	2b00      	cmp	r3, #0
 802e39e:	d002      	beq.n	802e3a6 <HAL_SPI_Transmit+0x194>
 802e3a0:	8b7b      	ldrh	r3, [r7, #26]
 802e3a2:	2b01      	cmp	r3, #1
 802e3a4:	d147      	bne.n	802e436 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 802e3a6:	68fb      	ldr	r3, [r7, #12]
 802e3a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802e3aa:	68fb      	ldr	r3, [r7, #12]
 802e3ac:	681b      	ldr	r3, [r3, #0]
 802e3ae:	330c      	adds	r3, #12
 802e3b0:	7812      	ldrb	r2, [r2, #0]
 802e3b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 802e3b4:	68fb      	ldr	r3, [r7, #12]
 802e3b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802e3b8:	1c5a      	adds	r2, r3, #1
 802e3ba:	68fb      	ldr	r3, [r7, #12]
 802e3bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 802e3be:	68fb      	ldr	r3, [r7, #12]
 802e3c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802e3c2:	b29b      	uxth	r3, r3
 802e3c4:	3b01      	subs	r3, #1
 802e3c6:	b29a      	uxth	r2, r3
 802e3c8:	68fb      	ldr	r3, [r7, #12]
 802e3ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 802e3cc:	e033      	b.n	802e436 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 802e3ce:	68fb      	ldr	r3, [r7, #12]
 802e3d0:	681b      	ldr	r3, [r3, #0]
 802e3d2:	689b      	ldr	r3, [r3, #8]
 802e3d4:	f003 0302 	and.w	r3, r3, #2
 802e3d8:	2b02      	cmp	r3, #2
 802e3da:	d113      	bne.n	802e404 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 802e3dc:	68fb      	ldr	r3, [r7, #12]
 802e3de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802e3e0:	68fb      	ldr	r3, [r7, #12]
 802e3e2:	681b      	ldr	r3, [r3, #0]
 802e3e4:	330c      	adds	r3, #12
 802e3e6:	7812      	ldrb	r2, [r2, #0]
 802e3e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 802e3ea:	68fb      	ldr	r3, [r7, #12]
 802e3ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802e3ee:	1c5a      	adds	r2, r3, #1
 802e3f0:	68fb      	ldr	r3, [r7, #12]
 802e3f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 802e3f4:	68fb      	ldr	r3, [r7, #12]
 802e3f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802e3f8:	b29b      	uxth	r3, r3
 802e3fa:	3b01      	subs	r3, #1
 802e3fc:	b29a      	uxth	r2, r3
 802e3fe:	68fb      	ldr	r3, [r7, #12]
 802e400:	86da      	strh	r2, [r3, #54]	@ 0x36
 802e402:	e018      	b.n	802e436 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802e404:	f7fe f816 	bl	802c434 <HAL_GetTick>
 802e408:	4602      	mov	r2, r0
 802e40a:	69fb      	ldr	r3, [r7, #28]
 802e40c:	1ad3      	subs	r3, r2, r3
 802e40e:	683a      	ldr	r2, [r7, #0]
 802e410:	429a      	cmp	r2, r3
 802e412:	d803      	bhi.n	802e41c <HAL_SPI_Transmit+0x20a>
 802e414:	683b      	ldr	r3, [r7, #0]
 802e416:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802e41a:	d102      	bne.n	802e422 <HAL_SPI_Transmit+0x210>
 802e41c:	683b      	ldr	r3, [r7, #0]
 802e41e:	2b00      	cmp	r3, #0
 802e420:	d109      	bne.n	802e436 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 802e422:	68fb      	ldr	r3, [r7, #12]
 802e424:	2201      	movs	r2, #1
 802e426:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 802e42a:	68fb      	ldr	r3, [r7, #12]
 802e42c:	2200      	movs	r2, #0
 802e42e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 802e432:	2303      	movs	r3, #3
 802e434:	e02d      	b.n	802e492 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 802e436:	68fb      	ldr	r3, [r7, #12]
 802e438:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802e43a:	b29b      	uxth	r3, r3
 802e43c:	2b00      	cmp	r3, #0
 802e43e:	d1c6      	bne.n	802e3ce <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802e440:	69fa      	ldr	r2, [r7, #28]
 802e442:	6839      	ldr	r1, [r7, #0]
 802e444:	68f8      	ldr	r0, [r7, #12]
 802e446:	f000 fbd9 	bl	802ebfc <SPI_EndRxTxTransaction>
 802e44a:	4603      	mov	r3, r0
 802e44c:	2b00      	cmp	r3, #0
 802e44e:	d002      	beq.n	802e456 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802e450:	68fb      	ldr	r3, [r7, #12]
 802e452:	2220      	movs	r2, #32
 802e454:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802e456:	68fb      	ldr	r3, [r7, #12]
 802e458:	689b      	ldr	r3, [r3, #8]
 802e45a:	2b00      	cmp	r3, #0
 802e45c:	d10a      	bne.n	802e474 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802e45e:	2300      	movs	r3, #0
 802e460:	617b      	str	r3, [r7, #20]
 802e462:	68fb      	ldr	r3, [r7, #12]
 802e464:	681b      	ldr	r3, [r3, #0]
 802e466:	68db      	ldr	r3, [r3, #12]
 802e468:	617b      	str	r3, [r7, #20]
 802e46a:	68fb      	ldr	r3, [r7, #12]
 802e46c:	681b      	ldr	r3, [r3, #0]
 802e46e:	689b      	ldr	r3, [r3, #8]
 802e470:	617b      	str	r3, [r7, #20]
 802e472:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 802e474:	68fb      	ldr	r3, [r7, #12]
 802e476:	2201      	movs	r2, #1
 802e478:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 802e47c:	68fb      	ldr	r3, [r7, #12]
 802e47e:	2200      	movs	r2, #0
 802e480:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802e484:	68fb      	ldr	r3, [r7, #12]
 802e486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802e488:	2b00      	cmp	r3, #0
 802e48a:	d001      	beq.n	802e490 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 802e48c:	2301      	movs	r3, #1
 802e48e:	e000      	b.n	802e492 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 802e490:	2300      	movs	r3, #0
  }
}
 802e492:	4618      	mov	r0, r3
 802e494:	3720      	adds	r7, #32
 802e496:	46bd      	mov	sp, r7
 802e498:	bd80      	pop	{r7, pc}

0802e49a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802e49a:	b580      	push	{r7, lr}
 802e49c:	b088      	sub	sp, #32
 802e49e:	af02      	add	r7, sp, #8
 802e4a0:	60f8      	str	r0, [r7, #12]
 802e4a2:	60b9      	str	r1, [r7, #8]
 802e4a4:	603b      	str	r3, [r7, #0]
 802e4a6:	4613      	mov	r3, r2
 802e4a8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 802e4aa:	68fb      	ldr	r3, [r7, #12]
 802e4ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 802e4b0:	b2db      	uxtb	r3, r3
 802e4b2:	2b01      	cmp	r3, #1
 802e4b4:	d001      	beq.n	802e4ba <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 802e4b6:	2302      	movs	r3, #2
 802e4b8:	e104      	b.n	802e6c4 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 802e4ba:	68bb      	ldr	r3, [r7, #8]
 802e4bc:	2b00      	cmp	r3, #0
 802e4be:	d002      	beq.n	802e4c6 <HAL_SPI_Receive+0x2c>
 802e4c0:	88fb      	ldrh	r3, [r7, #6]
 802e4c2:	2b00      	cmp	r3, #0
 802e4c4:	d101      	bne.n	802e4ca <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 802e4c6:	2301      	movs	r3, #1
 802e4c8:	e0fc      	b.n	802e6c4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 802e4ca:	68fb      	ldr	r3, [r7, #12]
 802e4cc:	685b      	ldr	r3, [r3, #4]
 802e4ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 802e4d2:	d112      	bne.n	802e4fa <HAL_SPI_Receive+0x60>
 802e4d4:	68fb      	ldr	r3, [r7, #12]
 802e4d6:	689b      	ldr	r3, [r3, #8]
 802e4d8:	2b00      	cmp	r3, #0
 802e4da:	d10e      	bne.n	802e4fa <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 802e4dc:	68fb      	ldr	r3, [r7, #12]
 802e4de:	2204      	movs	r2, #4
 802e4e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 802e4e4:	88fa      	ldrh	r2, [r7, #6]
 802e4e6:	683b      	ldr	r3, [r7, #0]
 802e4e8:	9300      	str	r3, [sp, #0]
 802e4ea:	4613      	mov	r3, r2
 802e4ec:	68ba      	ldr	r2, [r7, #8]
 802e4ee:	68b9      	ldr	r1, [r7, #8]
 802e4f0:	68f8      	ldr	r0, [r7, #12]
 802e4f2:	f000 f8eb 	bl	802e6cc <HAL_SPI_TransmitReceive>
 802e4f6:	4603      	mov	r3, r0
 802e4f8:	e0e4      	b.n	802e6c4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802e4fa:	f7fd ff9b 	bl	802c434 <HAL_GetTick>
 802e4fe:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 802e500:	68fb      	ldr	r3, [r7, #12]
 802e502:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 802e506:	2b01      	cmp	r3, #1
 802e508:	d101      	bne.n	802e50e <HAL_SPI_Receive+0x74>
 802e50a:	2302      	movs	r3, #2
 802e50c:	e0da      	b.n	802e6c4 <HAL_SPI_Receive+0x22a>
 802e50e:	68fb      	ldr	r3, [r7, #12]
 802e510:	2201      	movs	r2, #1
 802e512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 802e516:	68fb      	ldr	r3, [r7, #12]
 802e518:	2204      	movs	r2, #4
 802e51a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802e51e:	68fb      	ldr	r3, [r7, #12]
 802e520:	2200      	movs	r2, #0
 802e522:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 802e524:	68fb      	ldr	r3, [r7, #12]
 802e526:	68ba      	ldr	r2, [r7, #8]
 802e528:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 802e52a:	68fb      	ldr	r3, [r7, #12]
 802e52c:	88fa      	ldrh	r2, [r7, #6]
 802e52e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 802e530:	68fb      	ldr	r3, [r7, #12]
 802e532:	88fa      	ldrh	r2, [r7, #6]
 802e534:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 802e536:	68fb      	ldr	r3, [r7, #12]
 802e538:	2200      	movs	r2, #0
 802e53a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 802e53c:	68fb      	ldr	r3, [r7, #12]
 802e53e:	2200      	movs	r2, #0
 802e540:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 802e542:	68fb      	ldr	r3, [r7, #12]
 802e544:	2200      	movs	r2, #0
 802e546:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 802e548:	68fb      	ldr	r3, [r7, #12]
 802e54a:	2200      	movs	r2, #0
 802e54c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 802e54e:	68fb      	ldr	r3, [r7, #12]
 802e550:	2200      	movs	r2, #0
 802e552:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802e554:	68fb      	ldr	r3, [r7, #12]
 802e556:	689b      	ldr	r3, [r3, #8]
 802e558:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802e55c:	d10f      	bne.n	802e57e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 802e55e:	68fb      	ldr	r3, [r7, #12]
 802e560:	681b      	ldr	r3, [r3, #0]
 802e562:	681a      	ldr	r2, [r3, #0]
 802e564:	68fb      	ldr	r3, [r7, #12]
 802e566:	681b      	ldr	r3, [r3, #0]
 802e568:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 802e56c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 802e56e:	68fb      	ldr	r3, [r7, #12]
 802e570:	681b      	ldr	r3, [r3, #0]
 802e572:	681a      	ldr	r2, [r3, #0]
 802e574:	68fb      	ldr	r3, [r7, #12]
 802e576:	681b      	ldr	r3, [r3, #0]
 802e578:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 802e57c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802e57e:	68fb      	ldr	r3, [r7, #12]
 802e580:	681b      	ldr	r3, [r3, #0]
 802e582:	681b      	ldr	r3, [r3, #0]
 802e584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802e588:	2b40      	cmp	r3, #64	@ 0x40
 802e58a:	d007      	beq.n	802e59c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802e58c:	68fb      	ldr	r3, [r7, #12]
 802e58e:	681b      	ldr	r3, [r3, #0]
 802e590:	681a      	ldr	r2, [r3, #0]
 802e592:	68fb      	ldr	r3, [r7, #12]
 802e594:	681b      	ldr	r3, [r3, #0]
 802e596:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 802e59a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 802e59c:	68fb      	ldr	r3, [r7, #12]
 802e59e:	68db      	ldr	r3, [r3, #12]
 802e5a0:	2b00      	cmp	r3, #0
 802e5a2:	d170      	bne.n	802e686 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 802e5a4:	e035      	b.n	802e612 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 802e5a6:	68fb      	ldr	r3, [r7, #12]
 802e5a8:	681b      	ldr	r3, [r3, #0]
 802e5aa:	689b      	ldr	r3, [r3, #8]
 802e5ac:	f003 0301 	and.w	r3, r3, #1
 802e5b0:	2b01      	cmp	r3, #1
 802e5b2:	d115      	bne.n	802e5e0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 802e5b4:	68fb      	ldr	r3, [r7, #12]
 802e5b6:	681b      	ldr	r3, [r3, #0]
 802e5b8:	f103 020c 	add.w	r2, r3, #12
 802e5bc:	68fb      	ldr	r3, [r7, #12]
 802e5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802e5c0:	7812      	ldrb	r2, [r2, #0]
 802e5c2:	b2d2      	uxtb	r2, r2
 802e5c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 802e5c6:	68fb      	ldr	r3, [r7, #12]
 802e5c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802e5ca:	1c5a      	adds	r2, r3, #1
 802e5cc:	68fb      	ldr	r3, [r7, #12]
 802e5ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 802e5d0:	68fb      	ldr	r3, [r7, #12]
 802e5d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802e5d4:	b29b      	uxth	r3, r3
 802e5d6:	3b01      	subs	r3, #1
 802e5d8:	b29a      	uxth	r2, r3
 802e5da:	68fb      	ldr	r3, [r7, #12]
 802e5dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 802e5de:	e018      	b.n	802e612 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802e5e0:	f7fd ff28 	bl	802c434 <HAL_GetTick>
 802e5e4:	4602      	mov	r2, r0
 802e5e6:	697b      	ldr	r3, [r7, #20]
 802e5e8:	1ad3      	subs	r3, r2, r3
 802e5ea:	683a      	ldr	r2, [r7, #0]
 802e5ec:	429a      	cmp	r2, r3
 802e5ee:	d803      	bhi.n	802e5f8 <HAL_SPI_Receive+0x15e>
 802e5f0:	683b      	ldr	r3, [r7, #0]
 802e5f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802e5f6:	d102      	bne.n	802e5fe <HAL_SPI_Receive+0x164>
 802e5f8:	683b      	ldr	r3, [r7, #0]
 802e5fa:	2b00      	cmp	r3, #0
 802e5fc:	d109      	bne.n	802e612 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 802e5fe:	68fb      	ldr	r3, [r7, #12]
 802e600:	2201      	movs	r2, #1
 802e602:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 802e606:	68fb      	ldr	r3, [r7, #12]
 802e608:	2200      	movs	r2, #0
 802e60a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 802e60e:	2303      	movs	r3, #3
 802e610:	e058      	b.n	802e6c4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 802e612:	68fb      	ldr	r3, [r7, #12]
 802e614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802e616:	b29b      	uxth	r3, r3
 802e618:	2b00      	cmp	r3, #0
 802e61a:	d1c4      	bne.n	802e5a6 <HAL_SPI_Receive+0x10c>
 802e61c:	e038      	b.n	802e690 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 802e61e:	68fb      	ldr	r3, [r7, #12]
 802e620:	681b      	ldr	r3, [r3, #0]
 802e622:	689b      	ldr	r3, [r3, #8]
 802e624:	f003 0301 	and.w	r3, r3, #1
 802e628:	2b01      	cmp	r3, #1
 802e62a:	d113      	bne.n	802e654 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 802e62c:	68fb      	ldr	r3, [r7, #12]
 802e62e:	681b      	ldr	r3, [r3, #0]
 802e630:	68da      	ldr	r2, [r3, #12]
 802e632:	68fb      	ldr	r3, [r7, #12]
 802e634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802e636:	b292      	uxth	r2, r2
 802e638:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 802e63a:	68fb      	ldr	r3, [r7, #12]
 802e63c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802e63e:	1c9a      	adds	r2, r3, #2
 802e640:	68fb      	ldr	r3, [r7, #12]
 802e642:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 802e644:	68fb      	ldr	r3, [r7, #12]
 802e646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802e648:	b29b      	uxth	r3, r3
 802e64a:	3b01      	subs	r3, #1
 802e64c:	b29a      	uxth	r2, r3
 802e64e:	68fb      	ldr	r3, [r7, #12]
 802e650:	87da      	strh	r2, [r3, #62]	@ 0x3e
 802e652:	e018      	b.n	802e686 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802e654:	f7fd feee 	bl	802c434 <HAL_GetTick>
 802e658:	4602      	mov	r2, r0
 802e65a:	697b      	ldr	r3, [r7, #20]
 802e65c:	1ad3      	subs	r3, r2, r3
 802e65e:	683a      	ldr	r2, [r7, #0]
 802e660:	429a      	cmp	r2, r3
 802e662:	d803      	bhi.n	802e66c <HAL_SPI_Receive+0x1d2>
 802e664:	683b      	ldr	r3, [r7, #0]
 802e666:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802e66a:	d102      	bne.n	802e672 <HAL_SPI_Receive+0x1d8>
 802e66c:	683b      	ldr	r3, [r7, #0]
 802e66e:	2b00      	cmp	r3, #0
 802e670:	d109      	bne.n	802e686 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 802e672:	68fb      	ldr	r3, [r7, #12]
 802e674:	2201      	movs	r2, #1
 802e676:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 802e67a:	68fb      	ldr	r3, [r7, #12]
 802e67c:	2200      	movs	r2, #0
 802e67e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 802e682:	2303      	movs	r3, #3
 802e684:	e01e      	b.n	802e6c4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 802e686:	68fb      	ldr	r3, [r7, #12]
 802e688:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802e68a:	b29b      	uxth	r3, r3
 802e68c:	2b00      	cmp	r3, #0
 802e68e:	d1c6      	bne.n	802e61e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802e690:	697a      	ldr	r2, [r7, #20]
 802e692:	6839      	ldr	r1, [r7, #0]
 802e694:	68f8      	ldr	r0, [r7, #12]
 802e696:	f000 fa4b 	bl	802eb30 <SPI_EndRxTransaction>
 802e69a:	4603      	mov	r3, r0
 802e69c:	2b00      	cmp	r3, #0
 802e69e:	d002      	beq.n	802e6a6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802e6a0:	68fb      	ldr	r3, [r7, #12]
 802e6a2:	2220      	movs	r2, #32
 802e6a4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 802e6a6:	68fb      	ldr	r3, [r7, #12]
 802e6a8:	2201      	movs	r2, #1
 802e6aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 802e6ae:	68fb      	ldr	r3, [r7, #12]
 802e6b0:	2200      	movs	r2, #0
 802e6b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802e6b6:	68fb      	ldr	r3, [r7, #12]
 802e6b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802e6ba:	2b00      	cmp	r3, #0
 802e6bc:	d001      	beq.n	802e6c2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 802e6be:	2301      	movs	r3, #1
 802e6c0:	e000      	b.n	802e6c4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 802e6c2:	2300      	movs	r3, #0
  }
}
 802e6c4:	4618      	mov	r0, r3
 802e6c6:	3718      	adds	r7, #24
 802e6c8:	46bd      	mov	sp, r7
 802e6ca:	bd80      	pop	{r7, pc}

0802e6cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 802e6cc:	b580      	push	{r7, lr}
 802e6ce:	b08a      	sub	sp, #40	@ 0x28
 802e6d0:	af00      	add	r7, sp, #0
 802e6d2:	60f8      	str	r0, [r7, #12]
 802e6d4:	60b9      	str	r1, [r7, #8]
 802e6d6:	607a      	str	r2, [r7, #4]
 802e6d8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 802e6da:	2301      	movs	r3, #1
 802e6dc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802e6de:	f7fd fea9 	bl	802c434 <HAL_GetTick>
 802e6e2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 802e6e4:	68fb      	ldr	r3, [r7, #12]
 802e6e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 802e6ea:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 802e6ec:	68fb      	ldr	r3, [r7, #12]
 802e6ee:	685b      	ldr	r3, [r3, #4]
 802e6f0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 802e6f2:	887b      	ldrh	r3, [r7, #2]
 802e6f4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 802e6f6:	7ffb      	ldrb	r3, [r7, #31]
 802e6f8:	2b01      	cmp	r3, #1
 802e6fa:	d00c      	beq.n	802e716 <HAL_SPI_TransmitReceive+0x4a>
 802e6fc:	69bb      	ldr	r3, [r7, #24]
 802e6fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 802e702:	d106      	bne.n	802e712 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 802e704:	68fb      	ldr	r3, [r7, #12]
 802e706:	689b      	ldr	r3, [r3, #8]
 802e708:	2b00      	cmp	r3, #0
 802e70a:	d102      	bne.n	802e712 <HAL_SPI_TransmitReceive+0x46>
 802e70c:	7ffb      	ldrb	r3, [r7, #31]
 802e70e:	2b04      	cmp	r3, #4
 802e710:	d001      	beq.n	802e716 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 802e712:	2302      	movs	r3, #2
 802e714:	e17f      	b.n	802ea16 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 802e716:	68bb      	ldr	r3, [r7, #8]
 802e718:	2b00      	cmp	r3, #0
 802e71a:	d005      	beq.n	802e728 <HAL_SPI_TransmitReceive+0x5c>
 802e71c:	687b      	ldr	r3, [r7, #4]
 802e71e:	2b00      	cmp	r3, #0
 802e720:	d002      	beq.n	802e728 <HAL_SPI_TransmitReceive+0x5c>
 802e722:	887b      	ldrh	r3, [r7, #2]
 802e724:	2b00      	cmp	r3, #0
 802e726:	d101      	bne.n	802e72c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 802e728:	2301      	movs	r3, #1
 802e72a:	e174      	b.n	802ea16 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 802e72c:	68fb      	ldr	r3, [r7, #12]
 802e72e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 802e732:	2b01      	cmp	r3, #1
 802e734:	d101      	bne.n	802e73a <HAL_SPI_TransmitReceive+0x6e>
 802e736:	2302      	movs	r3, #2
 802e738:	e16d      	b.n	802ea16 <HAL_SPI_TransmitReceive+0x34a>
 802e73a:	68fb      	ldr	r3, [r7, #12]
 802e73c:	2201      	movs	r2, #1
 802e73e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 802e742:	68fb      	ldr	r3, [r7, #12]
 802e744:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 802e748:	b2db      	uxtb	r3, r3
 802e74a:	2b04      	cmp	r3, #4
 802e74c:	d003      	beq.n	802e756 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 802e74e:	68fb      	ldr	r3, [r7, #12]
 802e750:	2205      	movs	r2, #5
 802e752:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802e756:	68fb      	ldr	r3, [r7, #12]
 802e758:	2200      	movs	r2, #0
 802e75a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 802e75c:	68fb      	ldr	r3, [r7, #12]
 802e75e:	687a      	ldr	r2, [r7, #4]
 802e760:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 802e762:	68fb      	ldr	r3, [r7, #12]
 802e764:	887a      	ldrh	r2, [r7, #2]
 802e766:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 802e768:	68fb      	ldr	r3, [r7, #12]
 802e76a:	887a      	ldrh	r2, [r7, #2]
 802e76c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 802e76e:	68fb      	ldr	r3, [r7, #12]
 802e770:	68ba      	ldr	r2, [r7, #8]
 802e772:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 802e774:	68fb      	ldr	r3, [r7, #12]
 802e776:	887a      	ldrh	r2, [r7, #2]
 802e778:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 802e77a:	68fb      	ldr	r3, [r7, #12]
 802e77c:	887a      	ldrh	r2, [r7, #2]
 802e77e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 802e780:	68fb      	ldr	r3, [r7, #12]
 802e782:	2200      	movs	r2, #0
 802e784:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 802e786:	68fb      	ldr	r3, [r7, #12]
 802e788:	2200      	movs	r2, #0
 802e78a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802e78c:	68fb      	ldr	r3, [r7, #12]
 802e78e:	681b      	ldr	r3, [r3, #0]
 802e790:	681b      	ldr	r3, [r3, #0]
 802e792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802e796:	2b40      	cmp	r3, #64	@ 0x40
 802e798:	d007      	beq.n	802e7aa <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802e79a:	68fb      	ldr	r3, [r7, #12]
 802e79c:	681b      	ldr	r3, [r3, #0]
 802e79e:	681a      	ldr	r2, [r3, #0]
 802e7a0:	68fb      	ldr	r3, [r7, #12]
 802e7a2:	681b      	ldr	r3, [r3, #0]
 802e7a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 802e7a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802e7aa:	68fb      	ldr	r3, [r7, #12]
 802e7ac:	68db      	ldr	r3, [r3, #12]
 802e7ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802e7b2:	d17e      	bne.n	802e8b2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802e7b4:	68fb      	ldr	r3, [r7, #12]
 802e7b6:	685b      	ldr	r3, [r3, #4]
 802e7b8:	2b00      	cmp	r3, #0
 802e7ba:	d002      	beq.n	802e7c2 <HAL_SPI_TransmitReceive+0xf6>
 802e7bc:	8afb      	ldrh	r3, [r7, #22]
 802e7be:	2b01      	cmp	r3, #1
 802e7c0:	d16c      	bne.n	802e89c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 802e7c2:	68fb      	ldr	r3, [r7, #12]
 802e7c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802e7c6:	881a      	ldrh	r2, [r3, #0]
 802e7c8:	68fb      	ldr	r3, [r7, #12]
 802e7ca:	681b      	ldr	r3, [r3, #0]
 802e7cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 802e7ce:	68fb      	ldr	r3, [r7, #12]
 802e7d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802e7d2:	1c9a      	adds	r2, r3, #2
 802e7d4:	68fb      	ldr	r3, [r7, #12]
 802e7d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 802e7d8:	68fb      	ldr	r3, [r7, #12]
 802e7da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802e7dc:	b29b      	uxth	r3, r3
 802e7de:	3b01      	subs	r3, #1
 802e7e0:	b29a      	uxth	r2, r3
 802e7e2:	68fb      	ldr	r3, [r7, #12]
 802e7e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802e7e6:	e059      	b.n	802e89c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 802e7e8:	68fb      	ldr	r3, [r7, #12]
 802e7ea:	681b      	ldr	r3, [r3, #0]
 802e7ec:	689b      	ldr	r3, [r3, #8]
 802e7ee:	f003 0302 	and.w	r3, r3, #2
 802e7f2:	2b02      	cmp	r3, #2
 802e7f4:	d11b      	bne.n	802e82e <HAL_SPI_TransmitReceive+0x162>
 802e7f6:	68fb      	ldr	r3, [r7, #12]
 802e7f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802e7fa:	b29b      	uxth	r3, r3
 802e7fc:	2b00      	cmp	r3, #0
 802e7fe:	d016      	beq.n	802e82e <HAL_SPI_TransmitReceive+0x162>
 802e800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802e802:	2b01      	cmp	r3, #1
 802e804:	d113      	bne.n	802e82e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 802e806:	68fb      	ldr	r3, [r7, #12]
 802e808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802e80a:	881a      	ldrh	r2, [r3, #0]
 802e80c:	68fb      	ldr	r3, [r7, #12]
 802e80e:	681b      	ldr	r3, [r3, #0]
 802e810:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802e812:	68fb      	ldr	r3, [r7, #12]
 802e814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802e816:	1c9a      	adds	r2, r3, #2
 802e818:	68fb      	ldr	r3, [r7, #12]
 802e81a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 802e81c:	68fb      	ldr	r3, [r7, #12]
 802e81e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802e820:	b29b      	uxth	r3, r3
 802e822:	3b01      	subs	r3, #1
 802e824:	b29a      	uxth	r2, r3
 802e826:	68fb      	ldr	r3, [r7, #12]
 802e828:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 802e82a:	2300      	movs	r3, #0
 802e82c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 802e82e:	68fb      	ldr	r3, [r7, #12]
 802e830:	681b      	ldr	r3, [r3, #0]
 802e832:	689b      	ldr	r3, [r3, #8]
 802e834:	f003 0301 	and.w	r3, r3, #1
 802e838:	2b01      	cmp	r3, #1
 802e83a:	d119      	bne.n	802e870 <HAL_SPI_TransmitReceive+0x1a4>
 802e83c:	68fb      	ldr	r3, [r7, #12]
 802e83e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802e840:	b29b      	uxth	r3, r3
 802e842:	2b00      	cmp	r3, #0
 802e844:	d014      	beq.n	802e870 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 802e846:	68fb      	ldr	r3, [r7, #12]
 802e848:	681b      	ldr	r3, [r3, #0]
 802e84a:	68da      	ldr	r2, [r3, #12]
 802e84c:	68fb      	ldr	r3, [r7, #12]
 802e84e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802e850:	b292      	uxth	r2, r2
 802e852:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 802e854:	68fb      	ldr	r3, [r7, #12]
 802e856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802e858:	1c9a      	adds	r2, r3, #2
 802e85a:	68fb      	ldr	r3, [r7, #12]
 802e85c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 802e85e:	68fb      	ldr	r3, [r7, #12]
 802e860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802e862:	b29b      	uxth	r3, r3
 802e864:	3b01      	subs	r3, #1
 802e866:	b29a      	uxth	r2, r3
 802e868:	68fb      	ldr	r3, [r7, #12]
 802e86a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 802e86c:	2301      	movs	r3, #1
 802e86e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 802e870:	f7fd fde0 	bl	802c434 <HAL_GetTick>
 802e874:	4602      	mov	r2, r0
 802e876:	6a3b      	ldr	r3, [r7, #32]
 802e878:	1ad3      	subs	r3, r2, r3
 802e87a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802e87c:	429a      	cmp	r2, r3
 802e87e:	d80d      	bhi.n	802e89c <HAL_SPI_TransmitReceive+0x1d0>
 802e880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802e882:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802e886:	d009      	beq.n	802e89c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 802e888:	68fb      	ldr	r3, [r7, #12]
 802e88a:	2201      	movs	r2, #1
 802e88c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 802e890:	68fb      	ldr	r3, [r7, #12]
 802e892:	2200      	movs	r2, #0
 802e894:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 802e898:	2303      	movs	r3, #3
 802e89a:	e0bc      	b.n	802ea16 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802e89c:	68fb      	ldr	r3, [r7, #12]
 802e89e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802e8a0:	b29b      	uxth	r3, r3
 802e8a2:	2b00      	cmp	r3, #0
 802e8a4:	d1a0      	bne.n	802e7e8 <HAL_SPI_TransmitReceive+0x11c>
 802e8a6:	68fb      	ldr	r3, [r7, #12]
 802e8a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802e8aa:	b29b      	uxth	r3, r3
 802e8ac:	2b00      	cmp	r3, #0
 802e8ae:	d19b      	bne.n	802e7e8 <HAL_SPI_TransmitReceive+0x11c>
 802e8b0:	e082      	b.n	802e9b8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802e8b2:	68fb      	ldr	r3, [r7, #12]
 802e8b4:	685b      	ldr	r3, [r3, #4]
 802e8b6:	2b00      	cmp	r3, #0
 802e8b8:	d002      	beq.n	802e8c0 <HAL_SPI_TransmitReceive+0x1f4>
 802e8ba:	8afb      	ldrh	r3, [r7, #22]
 802e8bc:	2b01      	cmp	r3, #1
 802e8be:	d171      	bne.n	802e9a4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 802e8c0:	68fb      	ldr	r3, [r7, #12]
 802e8c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802e8c4:	68fb      	ldr	r3, [r7, #12]
 802e8c6:	681b      	ldr	r3, [r3, #0]
 802e8c8:	330c      	adds	r3, #12
 802e8ca:	7812      	ldrb	r2, [r2, #0]
 802e8cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 802e8ce:	68fb      	ldr	r3, [r7, #12]
 802e8d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802e8d2:	1c5a      	adds	r2, r3, #1
 802e8d4:	68fb      	ldr	r3, [r7, #12]
 802e8d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 802e8d8:	68fb      	ldr	r3, [r7, #12]
 802e8da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802e8dc:	b29b      	uxth	r3, r3
 802e8de:	3b01      	subs	r3, #1
 802e8e0:	b29a      	uxth	r2, r3
 802e8e2:	68fb      	ldr	r3, [r7, #12]
 802e8e4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802e8e6:	e05d      	b.n	802e9a4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 802e8e8:	68fb      	ldr	r3, [r7, #12]
 802e8ea:	681b      	ldr	r3, [r3, #0]
 802e8ec:	689b      	ldr	r3, [r3, #8]
 802e8ee:	f003 0302 	and.w	r3, r3, #2
 802e8f2:	2b02      	cmp	r3, #2
 802e8f4:	d11c      	bne.n	802e930 <HAL_SPI_TransmitReceive+0x264>
 802e8f6:	68fb      	ldr	r3, [r7, #12]
 802e8f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802e8fa:	b29b      	uxth	r3, r3
 802e8fc:	2b00      	cmp	r3, #0
 802e8fe:	d017      	beq.n	802e930 <HAL_SPI_TransmitReceive+0x264>
 802e900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802e902:	2b01      	cmp	r3, #1
 802e904:	d114      	bne.n	802e930 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 802e906:	68fb      	ldr	r3, [r7, #12]
 802e908:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802e90a:	68fb      	ldr	r3, [r7, #12]
 802e90c:	681b      	ldr	r3, [r3, #0]
 802e90e:	330c      	adds	r3, #12
 802e910:	7812      	ldrb	r2, [r2, #0]
 802e912:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 802e914:	68fb      	ldr	r3, [r7, #12]
 802e916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802e918:	1c5a      	adds	r2, r3, #1
 802e91a:	68fb      	ldr	r3, [r7, #12]
 802e91c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 802e91e:	68fb      	ldr	r3, [r7, #12]
 802e920:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802e922:	b29b      	uxth	r3, r3
 802e924:	3b01      	subs	r3, #1
 802e926:	b29a      	uxth	r2, r3
 802e928:	68fb      	ldr	r3, [r7, #12]
 802e92a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 802e92c:	2300      	movs	r3, #0
 802e92e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 802e930:	68fb      	ldr	r3, [r7, #12]
 802e932:	681b      	ldr	r3, [r3, #0]
 802e934:	689b      	ldr	r3, [r3, #8]
 802e936:	f003 0301 	and.w	r3, r3, #1
 802e93a:	2b01      	cmp	r3, #1
 802e93c:	d119      	bne.n	802e972 <HAL_SPI_TransmitReceive+0x2a6>
 802e93e:	68fb      	ldr	r3, [r7, #12]
 802e940:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802e942:	b29b      	uxth	r3, r3
 802e944:	2b00      	cmp	r3, #0
 802e946:	d014      	beq.n	802e972 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 802e948:	68fb      	ldr	r3, [r7, #12]
 802e94a:	681b      	ldr	r3, [r3, #0]
 802e94c:	68da      	ldr	r2, [r3, #12]
 802e94e:	68fb      	ldr	r3, [r7, #12]
 802e950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802e952:	b2d2      	uxtb	r2, r2
 802e954:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 802e956:	68fb      	ldr	r3, [r7, #12]
 802e958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802e95a:	1c5a      	adds	r2, r3, #1
 802e95c:	68fb      	ldr	r3, [r7, #12]
 802e95e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 802e960:	68fb      	ldr	r3, [r7, #12]
 802e962:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802e964:	b29b      	uxth	r3, r3
 802e966:	3b01      	subs	r3, #1
 802e968:	b29a      	uxth	r2, r3
 802e96a:	68fb      	ldr	r3, [r7, #12]
 802e96c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 802e96e:	2301      	movs	r3, #1
 802e970:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 802e972:	f7fd fd5f 	bl	802c434 <HAL_GetTick>
 802e976:	4602      	mov	r2, r0
 802e978:	6a3b      	ldr	r3, [r7, #32]
 802e97a:	1ad3      	subs	r3, r2, r3
 802e97c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802e97e:	429a      	cmp	r2, r3
 802e980:	d803      	bhi.n	802e98a <HAL_SPI_TransmitReceive+0x2be>
 802e982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802e984:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802e988:	d102      	bne.n	802e990 <HAL_SPI_TransmitReceive+0x2c4>
 802e98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802e98c:	2b00      	cmp	r3, #0
 802e98e:	d109      	bne.n	802e9a4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 802e990:	68fb      	ldr	r3, [r7, #12]
 802e992:	2201      	movs	r2, #1
 802e994:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 802e998:	68fb      	ldr	r3, [r7, #12]
 802e99a:	2200      	movs	r2, #0
 802e99c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 802e9a0:	2303      	movs	r3, #3
 802e9a2:	e038      	b.n	802ea16 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802e9a4:	68fb      	ldr	r3, [r7, #12]
 802e9a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802e9a8:	b29b      	uxth	r3, r3
 802e9aa:	2b00      	cmp	r3, #0
 802e9ac:	d19c      	bne.n	802e8e8 <HAL_SPI_TransmitReceive+0x21c>
 802e9ae:	68fb      	ldr	r3, [r7, #12]
 802e9b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802e9b2:	b29b      	uxth	r3, r3
 802e9b4:	2b00      	cmp	r3, #0
 802e9b6:	d197      	bne.n	802e8e8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802e9b8:	6a3a      	ldr	r2, [r7, #32]
 802e9ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 802e9bc:	68f8      	ldr	r0, [r7, #12]
 802e9be:	f000 f91d 	bl	802ebfc <SPI_EndRxTxTransaction>
 802e9c2:	4603      	mov	r3, r0
 802e9c4:	2b00      	cmp	r3, #0
 802e9c6:	d008      	beq.n	802e9da <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802e9c8:	68fb      	ldr	r3, [r7, #12]
 802e9ca:	2220      	movs	r2, #32
 802e9cc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 802e9ce:	68fb      	ldr	r3, [r7, #12]
 802e9d0:	2200      	movs	r2, #0
 802e9d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 802e9d6:	2301      	movs	r3, #1
 802e9d8:	e01d      	b.n	802ea16 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802e9da:	68fb      	ldr	r3, [r7, #12]
 802e9dc:	689b      	ldr	r3, [r3, #8]
 802e9de:	2b00      	cmp	r3, #0
 802e9e0:	d10a      	bne.n	802e9f8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802e9e2:	2300      	movs	r3, #0
 802e9e4:	613b      	str	r3, [r7, #16]
 802e9e6:	68fb      	ldr	r3, [r7, #12]
 802e9e8:	681b      	ldr	r3, [r3, #0]
 802e9ea:	68db      	ldr	r3, [r3, #12]
 802e9ec:	613b      	str	r3, [r7, #16]
 802e9ee:	68fb      	ldr	r3, [r7, #12]
 802e9f0:	681b      	ldr	r3, [r3, #0]
 802e9f2:	689b      	ldr	r3, [r3, #8]
 802e9f4:	613b      	str	r3, [r7, #16]
 802e9f6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 802e9f8:	68fb      	ldr	r3, [r7, #12]
 802e9fa:	2201      	movs	r2, #1
 802e9fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 802ea00:	68fb      	ldr	r3, [r7, #12]
 802ea02:	2200      	movs	r2, #0
 802ea04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802ea08:	68fb      	ldr	r3, [r7, #12]
 802ea0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802ea0c:	2b00      	cmp	r3, #0
 802ea0e:	d001      	beq.n	802ea14 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 802ea10:	2301      	movs	r3, #1
 802ea12:	e000      	b.n	802ea16 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 802ea14:	2300      	movs	r3, #0
  }
}
 802ea16:	4618      	mov	r0, r3
 802ea18:	3728      	adds	r7, #40	@ 0x28
 802ea1a:	46bd      	mov	sp, r7
 802ea1c:	bd80      	pop	{r7, pc}
	...

0802ea20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 802ea20:	b580      	push	{r7, lr}
 802ea22:	b088      	sub	sp, #32
 802ea24:	af00      	add	r7, sp, #0
 802ea26:	60f8      	str	r0, [r7, #12]
 802ea28:	60b9      	str	r1, [r7, #8]
 802ea2a:	603b      	str	r3, [r7, #0]
 802ea2c:	4613      	mov	r3, r2
 802ea2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 802ea30:	f7fd fd00 	bl	802c434 <HAL_GetTick>
 802ea34:	4602      	mov	r2, r0
 802ea36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802ea38:	1a9b      	subs	r3, r3, r2
 802ea3a:	683a      	ldr	r2, [r7, #0]
 802ea3c:	4413      	add	r3, r2
 802ea3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 802ea40:	f7fd fcf8 	bl	802c434 <HAL_GetTick>
 802ea44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 802ea46:	4b39      	ldr	r3, [pc, #228]	@ (802eb2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 802ea48:	681b      	ldr	r3, [r3, #0]
 802ea4a:	015b      	lsls	r3, r3, #5
 802ea4c:	0d1b      	lsrs	r3, r3, #20
 802ea4e:	69fa      	ldr	r2, [r7, #28]
 802ea50:	fb02 f303 	mul.w	r3, r2, r3
 802ea54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802ea56:	e055      	b.n	802eb04 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 802ea58:	683b      	ldr	r3, [r7, #0]
 802ea5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802ea5e:	d051      	beq.n	802eb04 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 802ea60:	f7fd fce8 	bl	802c434 <HAL_GetTick>
 802ea64:	4602      	mov	r2, r0
 802ea66:	69bb      	ldr	r3, [r7, #24]
 802ea68:	1ad3      	subs	r3, r2, r3
 802ea6a:	69fa      	ldr	r2, [r7, #28]
 802ea6c:	429a      	cmp	r2, r3
 802ea6e:	d902      	bls.n	802ea76 <SPI_WaitFlagStateUntilTimeout+0x56>
 802ea70:	69fb      	ldr	r3, [r7, #28]
 802ea72:	2b00      	cmp	r3, #0
 802ea74:	d13d      	bne.n	802eaf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802ea76:	68fb      	ldr	r3, [r7, #12]
 802ea78:	681b      	ldr	r3, [r3, #0]
 802ea7a:	685a      	ldr	r2, [r3, #4]
 802ea7c:	68fb      	ldr	r3, [r7, #12]
 802ea7e:	681b      	ldr	r3, [r3, #0]
 802ea80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 802ea84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802ea86:	68fb      	ldr	r3, [r7, #12]
 802ea88:	685b      	ldr	r3, [r3, #4]
 802ea8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 802ea8e:	d111      	bne.n	802eab4 <SPI_WaitFlagStateUntilTimeout+0x94>
 802ea90:	68fb      	ldr	r3, [r7, #12]
 802ea92:	689b      	ldr	r3, [r3, #8]
 802ea94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802ea98:	d004      	beq.n	802eaa4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802ea9a:	68fb      	ldr	r3, [r7, #12]
 802ea9c:	689b      	ldr	r3, [r3, #8]
 802ea9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802eaa2:	d107      	bne.n	802eab4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 802eaa4:	68fb      	ldr	r3, [r7, #12]
 802eaa6:	681b      	ldr	r3, [r3, #0]
 802eaa8:	681a      	ldr	r2, [r3, #0]
 802eaaa:	68fb      	ldr	r3, [r7, #12]
 802eaac:	681b      	ldr	r3, [r3, #0]
 802eaae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 802eab2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802eab4:	68fb      	ldr	r3, [r7, #12]
 802eab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802eab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802eabc:	d10f      	bne.n	802eade <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 802eabe:	68fb      	ldr	r3, [r7, #12]
 802eac0:	681b      	ldr	r3, [r3, #0]
 802eac2:	681a      	ldr	r2, [r3, #0]
 802eac4:	68fb      	ldr	r3, [r7, #12]
 802eac6:	681b      	ldr	r3, [r3, #0]
 802eac8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 802eacc:	601a      	str	r2, [r3, #0]
 802eace:	68fb      	ldr	r3, [r7, #12]
 802ead0:	681b      	ldr	r3, [r3, #0]
 802ead2:	681a      	ldr	r2, [r3, #0]
 802ead4:	68fb      	ldr	r3, [r7, #12]
 802ead6:	681b      	ldr	r3, [r3, #0]
 802ead8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 802eadc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 802eade:	68fb      	ldr	r3, [r7, #12]
 802eae0:	2201      	movs	r2, #1
 802eae2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 802eae6:	68fb      	ldr	r3, [r7, #12]
 802eae8:	2200      	movs	r2, #0
 802eaea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 802eaee:	2303      	movs	r3, #3
 802eaf0:	e018      	b.n	802eb24 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 802eaf2:	697b      	ldr	r3, [r7, #20]
 802eaf4:	2b00      	cmp	r3, #0
 802eaf6:	d102      	bne.n	802eafe <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 802eaf8:	2300      	movs	r3, #0
 802eafa:	61fb      	str	r3, [r7, #28]
 802eafc:	e002      	b.n	802eb04 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 802eafe:	697b      	ldr	r3, [r7, #20]
 802eb00:	3b01      	subs	r3, #1
 802eb02:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802eb04:	68fb      	ldr	r3, [r7, #12]
 802eb06:	681b      	ldr	r3, [r3, #0]
 802eb08:	689a      	ldr	r2, [r3, #8]
 802eb0a:	68bb      	ldr	r3, [r7, #8]
 802eb0c:	4013      	ands	r3, r2
 802eb0e:	68ba      	ldr	r2, [r7, #8]
 802eb10:	429a      	cmp	r2, r3
 802eb12:	bf0c      	ite	eq
 802eb14:	2301      	moveq	r3, #1
 802eb16:	2300      	movne	r3, #0
 802eb18:	b2db      	uxtb	r3, r3
 802eb1a:	461a      	mov	r2, r3
 802eb1c:	79fb      	ldrb	r3, [r7, #7]
 802eb1e:	429a      	cmp	r2, r3
 802eb20:	d19a      	bne.n	802ea58 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 802eb22:	2300      	movs	r3, #0
}
 802eb24:	4618      	mov	r0, r3
 802eb26:	3720      	adds	r7, #32
 802eb28:	46bd      	mov	sp, r7
 802eb2a:	bd80      	pop	{r7, pc}
 802eb2c:	20000054 	.word	0x20000054

0802eb30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 802eb30:	b580      	push	{r7, lr}
 802eb32:	b086      	sub	sp, #24
 802eb34:	af02      	add	r7, sp, #8
 802eb36:	60f8      	str	r0, [r7, #12]
 802eb38:	60b9      	str	r1, [r7, #8]
 802eb3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802eb3c:	68fb      	ldr	r3, [r7, #12]
 802eb3e:	685b      	ldr	r3, [r3, #4]
 802eb40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 802eb44:	d111      	bne.n	802eb6a <SPI_EndRxTransaction+0x3a>
 802eb46:	68fb      	ldr	r3, [r7, #12]
 802eb48:	689b      	ldr	r3, [r3, #8]
 802eb4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802eb4e:	d004      	beq.n	802eb5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802eb50:	68fb      	ldr	r3, [r7, #12]
 802eb52:	689b      	ldr	r3, [r3, #8]
 802eb54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802eb58:	d107      	bne.n	802eb6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 802eb5a:	68fb      	ldr	r3, [r7, #12]
 802eb5c:	681b      	ldr	r3, [r3, #0]
 802eb5e:	681a      	ldr	r2, [r3, #0]
 802eb60:	68fb      	ldr	r3, [r7, #12]
 802eb62:	681b      	ldr	r3, [r3, #0]
 802eb64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 802eb68:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802eb6a:	68fb      	ldr	r3, [r7, #12]
 802eb6c:	685b      	ldr	r3, [r3, #4]
 802eb6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 802eb72:	d12a      	bne.n	802ebca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 802eb74:	68fb      	ldr	r3, [r7, #12]
 802eb76:	689b      	ldr	r3, [r3, #8]
 802eb78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802eb7c:	d012      	beq.n	802eba4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 802eb7e:	687b      	ldr	r3, [r7, #4]
 802eb80:	9300      	str	r3, [sp, #0]
 802eb82:	68bb      	ldr	r3, [r7, #8]
 802eb84:	2200      	movs	r2, #0
 802eb86:	2180      	movs	r1, #128	@ 0x80
 802eb88:	68f8      	ldr	r0, [r7, #12]
 802eb8a:	f7ff ff49 	bl	802ea20 <SPI_WaitFlagStateUntilTimeout>
 802eb8e:	4603      	mov	r3, r0
 802eb90:	2b00      	cmp	r3, #0
 802eb92:	d02d      	beq.n	802ebf0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802eb94:	68fb      	ldr	r3, [r7, #12]
 802eb96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802eb98:	f043 0220 	orr.w	r2, r3, #32
 802eb9c:	68fb      	ldr	r3, [r7, #12]
 802eb9e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 802eba0:	2303      	movs	r3, #3
 802eba2:	e026      	b.n	802ebf2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 802eba4:	687b      	ldr	r3, [r7, #4]
 802eba6:	9300      	str	r3, [sp, #0]
 802eba8:	68bb      	ldr	r3, [r7, #8]
 802ebaa:	2200      	movs	r2, #0
 802ebac:	2101      	movs	r1, #1
 802ebae:	68f8      	ldr	r0, [r7, #12]
 802ebb0:	f7ff ff36 	bl	802ea20 <SPI_WaitFlagStateUntilTimeout>
 802ebb4:	4603      	mov	r3, r0
 802ebb6:	2b00      	cmp	r3, #0
 802ebb8:	d01a      	beq.n	802ebf0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802ebba:	68fb      	ldr	r3, [r7, #12]
 802ebbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802ebbe:	f043 0220 	orr.w	r2, r3, #32
 802ebc2:	68fb      	ldr	r3, [r7, #12]
 802ebc4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 802ebc6:	2303      	movs	r3, #3
 802ebc8:	e013      	b.n	802ebf2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 802ebca:	687b      	ldr	r3, [r7, #4]
 802ebcc:	9300      	str	r3, [sp, #0]
 802ebce:	68bb      	ldr	r3, [r7, #8]
 802ebd0:	2200      	movs	r2, #0
 802ebd2:	2101      	movs	r1, #1
 802ebd4:	68f8      	ldr	r0, [r7, #12]
 802ebd6:	f7ff ff23 	bl	802ea20 <SPI_WaitFlagStateUntilTimeout>
 802ebda:	4603      	mov	r3, r0
 802ebdc:	2b00      	cmp	r3, #0
 802ebde:	d007      	beq.n	802ebf0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802ebe0:	68fb      	ldr	r3, [r7, #12]
 802ebe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802ebe4:	f043 0220 	orr.w	r2, r3, #32
 802ebe8:	68fb      	ldr	r3, [r7, #12]
 802ebea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 802ebec:	2303      	movs	r3, #3
 802ebee:	e000      	b.n	802ebf2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 802ebf0:	2300      	movs	r3, #0
}
 802ebf2:	4618      	mov	r0, r3
 802ebf4:	3710      	adds	r7, #16
 802ebf6:	46bd      	mov	sp, r7
 802ebf8:	bd80      	pop	{r7, pc}
	...

0802ebfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 802ebfc:	b580      	push	{r7, lr}
 802ebfe:	b088      	sub	sp, #32
 802ec00:	af02      	add	r7, sp, #8
 802ec02:	60f8      	str	r0, [r7, #12]
 802ec04:	60b9      	str	r1, [r7, #8]
 802ec06:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 802ec08:	687b      	ldr	r3, [r7, #4]
 802ec0a:	9300      	str	r3, [sp, #0]
 802ec0c:	68bb      	ldr	r3, [r7, #8]
 802ec0e:	2201      	movs	r2, #1
 802ec10:	2102      	movs	r1, #2
 802ec12:	68f8      	ldr	r0, [r7, #12]
 802ec14:	f7ff ff04 	bl	802ea20 <SPI_WaitFlagStateUntilTimeout>
 802ec18:	4603      	mov	r3, r0
 802ec1a:	2b00      	cmp	r3, #0
 802ec1c:	d007      	beq.n	802ec2e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802ec1e:	68fb      	ldr	r3, [r7, #12]
 802ec20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802ec22:	f043 0220 	orr.w	r2, r3, #32
 802ec26:	68fb      	ldr	r3, [r7, #12]
 802ec28:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 802ec2a:	2303      	movs	r3, #3
 802ec2c:	e032      	b.n	802ec94 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 802ec2e:	4b1b      	ldr	r3, [pc, #108]	@ (802ec9c <SPI_EndRxTxTransaction+0xa0>)
 802ec30:	681b      	ldr	r3, [r3, #0]
 802ec32:	4a1b      	ldr	r2, [pc, #108]	@ (802eca0 <SPI_EndRxTxTransaction+0xa4>)
 802ec34:	fba2 2303 	umull	r2, r3, r2, r3
 802ec38:	0d5b      	lsrs	r3, r3, #21
 802ec3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802ec3e:	fb02 f303 	mul.w	r3, r2, r3
 802ec42:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802ec44:	68fb      	ldr	r3, [r7, #12]
 802ec46:	685b      	ldr	r3, [r3, #4]
 802ec48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 802ec4c:	d112      	bne.n	802ec74 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 802ec4e:	687b      	ldr	r3, [r7, #4]
 802ec50:	9300      	str	r3, [sp, #0]
 802ec52:	68bb      	ldr	r3, [r7, #8]
 802ec54:	2200      	movs	r2, #0
 802ec56:	2180      	movs	r1, #128	@ 0x80
 802ec58:	68f8      	ldr	r0, [r7, #12]
 802ec5a:	f7ff fee1 	bl	802ea20 <SPI_WaitFlagStateUntilTimeout>
 802ec5e:	4603      	mov	r3, r0
 802ec60:	2b00      	cmp	r3, #0
 802ec62:	d016      	beq.n	802ec92 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802ec64:	68fb      	ldr	r3, [r7, #12]
 802ec66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802ec68:	f043 0220 	orr.w	r2, r3, #32
 802ec6c:	68fb      	ldr	r3, [r7, #12]
 802ec6e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 802ec70:	2303      	movs	r3, #3
 802ec72:	e00f      	b.n	802ec94 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 802ec74:	697b      	ldr	r3, [r7, #20]
 802ec76:	2b00      	cmp	r3, #0
 802ec78:	d00a      	beq.n	802ec90 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 802ec7a:	697b      	ldr	r3, [r7, #20]
 802ec7c:	3b01      	subs	r3, #1
 802ec7e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 802ec80:	68fb      	ldr	r3, [r7, #12]
 802ec82:	681b      	ldr	r3, [r3, #0]
 802ec84:	689b      	ldr	r3, [r3, #8]
 802ec86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802ec8a:	2b80      	cmp	r3, #128	@ 0x80
 802ec8c:	d0f2      	beq.n	802ec74 <SPI_EndRxTxTransaction+0x78>
 802ec8e:	e000      	b.n	802ec92 <SPI_EndRxTxTransaction+0x96>
        break;
 802ec90:	bf00      	nop
  }

  return HAL_OK;
 802ec92:	2300      	movs	r3, #0
}
 802ec94:	4618      	mov	r0, r3
 802ec96:	3718      	adds	r7, #24
 802ec98:	46bd      	mov	sp, r7
 802ec9a:	bd80      	pop	{r7, pc}
 802ec9c:	20000054 	.word	0x20000054
 802eca0:	165e9f81 	.word	0x165e9f81

0802eca4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802eca4:	b580      	push	{r7, lr}
 802eca6:	b082      	sub	sp, #8
 802eca8:	af00      	add	r7, sp, #0
 802ecaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802ecac:	687b      	ldr	r3, [r7, #4]
 802ecae:	2b00      	cmp	r3, #0
 802ecb0:	d101      	bne.n	802ecb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802ecb2:	2301      	movs	r3, #1
 802ecb4:	e042      	b.n	802ed3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802ecb6:	687b      	ldr	r3, [r7, #4]
 802ecb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 802ecbc:	b2db      	uxtb	r3, r3
 802ecbe:	2b00      	cmp	r3, #0
 802ecc0:	d106      	bne.n	802ecd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802ecc2:	687b      	ldr	r3, [r7, #4]
 802ecc4:	2200      	movs	r2, #0
 802ecc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802ecca:	6878      	ldr	r0, [r7, #4]
 802eccc:	f7fd fa38 	bl	802c140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802ecd0:	687b      	ldr	r3, [r7, #4]
 802ecd2:	2224      	movs	r2, #36	@ 0x24
 802ecd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 802ecd8:	687b      	ldr	r3, [r7, #4]
 802ecda:	681b      	ldr	r3, [r3, #0]
 802ecdc:	68da      	ldr	r2, [r3, #12]
 802ecde:	687b      	ldr	r3, [r7, #4]
 802ece0:	681b      	ldr	r3, [r3, #0]
 802ece2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 802ece6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 802ece8:	6878      	ldr	r0, [r7, #4]
 802ecea:	f000 fe15 	bl	802f918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802ecee:	687b      	ldr	r3, [r7, #4]
 802ecf0:	681b      	ldr	r3, [r3, #0]
 802ecf2:	691a      	ldr	r2, [r3, #16]
 802ecf4:	687b      	ldr	r3, [r7, #4]
 802ecf6:	681b      	ldr	r3, [r3, #0]
 802ecf8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 802ecfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802ecfe:	687b      	ldr	r3, [r7, #4]
 802ed00:	681b      	ldr	r3, [r3, #0]
 802ed02:	695a      	ldr	r2, [r3, #20]
 802ed04:	687b      	ldr	r3, [r7, #4]
 802ed06:	681b      	ldr	r3, [r3, #0]
 802ed08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 802ed0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 802ed0e:	687b      	ldr	r3, [r7, #4]
 802ed10:	681b      	ldr	r3, [r3, #0]
 802ed12:	68da      	ldr	r2, [r3, #12]
 802ed14:	687b      	ldr	r3, [r7, #4]
 802ed16:	681b      	ldr	r3, [r3, #0]
 802ed18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 802ed1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802ed1e:	687b      	ldr	r3, [r7, #4]
 802ed20:	2200      	movs	r2, #0
 802ed22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 802ed24:	687b      	ldr	r3, [r7, #4]
 802ed26:	2220      	movs	r2, #32
 802ed28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 802ed2c:	687b      	ldr	r3, [r7, #4]
 802ed2e:	2220      	movs	r2, #32
 802ed30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 802ed34:	687b      	ldr	r3, [r7, #4]
 802ed36:	2200      	movs	r2, #0
 802ed38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 802ed3a:	2300      	movs	r3, #0
}
 802ed3c:	4618      	mov	r0, r3
 802ed3e:	3708      	adds	r7, #8
 802ed40:	46bd      	mov	sp, r7
 802ed42:	bd80      	pop	{r7, pc}

0802ed44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802ed44:	b580      	push	{r7, lr}
 802ed46:	b08a      	sub	sp, #40	@ 0x28
 802ed48:	af02      	add	r7, sp, #8
 802ed4a:	60f8      	str	r0, [r7, #12]
 802ed4c:	60b9      	str	r1, [r7, #8]
 802ed4e:	603b      	str	r3, [r7, #0]
 802ed50:	4613      	mov	r3, r2
 802ed52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 802ed54:	2300      	movs	r3, #0
 802ed56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802ed58:	68fb      	ldr	r3, [r7, #12]
 802ed5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 802ed5e:	b2db      	uxtb	r3, r3
 802ed60:	2b20      	cmp	r3, #32
 802ed62:	d175      	bne.n	802ee50 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 802ed64:	68bb      	ldr	r3, [r7, #8]
 802ed66:	2b00      	cmp	r3, #0
 802ed68:	d002      	beq.n	802ed70 <HAL_UART_Transmit+0x2c>
 802ed6a:	88fb      	ldrh	r3, [r7, #6]
 802ed6c:	2b00      	cmp	r3, #0
 802ed6e:	d101      	bne.n	802ed74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 802ed70:	2301      	movs	r3, #1
 802ed72:	e06e      	b.n	802ee52 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802ed74:	68fb      	ldr	r3, [r7, #12]
 802ed76:	2200      	movs	r2, #0
 802ed78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802ed7a:	68fb      	ldr	r3, [r7, #12]
 802ed7c:	2221      	movs	r2, #33	@ 0x21
 802ed7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802ed82:	f7fd fb57 	bl	802c434 <HAL_GetTick>
 802ed86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 802ed88:	68fb      	ldr	r3, [r7, #12]
 802ed8a:	88fa      	ldrh	r2, [r7, #6]
 802ed8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 802ed8e:	68fb      	ldr	r3, [r7, #12]
 802ed90:	88fa      	ldrh	r2, [r7, #6]
 802ed92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802ed94:	68fb      	ldr	r3, [r7, #12]
 802ed96:	689b      	ldr	r3, [r3, #8]
 802ed98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802ed9c:	d108      	bne.n	802edb0 <HAL_UART_Transmit+0x6c>
 802ed9e:	68fb      	ldr	r3, [r7, #12]
 802eda0:	691b      	ldr	r3, [r3, #16]
 802eda2:	2b00      	cmp	r3, #0
 802eda4:	d104      	bne.n	802edb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 802eda6:	2300      	movs	r3, #0
 802eda8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802edaa:	68bb      	ldr	r3, [r7, #8]
 802edac:	61bb      	str	r3, [r7, #24]
 802edae:	e003      	b.n	802edb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 802edb0:	68bb      	ldr	r3, [r7, #8]
 802edb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802edb4:	2300      	movs	r3, #0
 802edb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 802edb8:	e02e      	b.n	802ee18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802edba:	683b      	ldr	r3, [r7, #0]
 802edbc:	9300      	str	r3, [sp, #0]
 802edbe:	697b      	ldr	r3, [r7, #20]
 802edc0:	2200      	movs	r2, #0
 802edc2:	2180      	movs	r1, #128	@ 0x80
 802edc4:	68f8      	ldr	r0, [r7, #12]
 802edc6:	f000 fbb3 	bl	802f530 <UART_WaitOnFlagUntilTimeout>
 802edca:	4603      	mov	r3, r0
 802edcc:	2b00      	cmp	r3, #0
 802edce:	d005      	beq.n	802eddc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 802edd0:	68fb      	ldr	r3, [r7, #12]
 802edd2:	2220      	movs	r2, #32
 802edd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 802edd8:	2303      	movs	r3, #3
 802edda:	e03a      	b.n	802ee52 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 802eddc:	69fb      	ldr	r3, [r7, #28]
 802edde:	2b00      	cmp	r3, #0
 802ede0:	d10b      	bne.n	802edfa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 802ede2:	69bb      	ldr	r3, [r7, #24]
 802ede4:	881b      	ldrh	r3, [r3, #0]
 802ede6:	461a      	mov	r2, r3
 802ede8:	68fb      	ldr	r3, [r7, #12]
 802edea:	681b      	ldr	r3, [r3, #0]
 802edec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802edf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 802edf2:	69bb      	ldr	r3, [r7, #24]
 802edf4:	3302      	adds	r3, #2
 802edf6:	61bb      	str	r3, [r7, #24]
 802edf8:	e007      	b.n	802ee0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 802edfa:	69fb      	ldr	r3, [r7, #28]
 802edfc:	781a      	ldrb	r2, [r3, #0]
 802edfe:	68fb      	ldr	r3, [r7, #12]
 802ee00:	681b      	ldr	r3, [r3, #0]
 802ee02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 802ee04:	69fb      	ldr	r3, [r7, #28]
 802ee06:	3301      	adds	r3, #1
 802ee08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802ee0a:	68fb      	ldr	r3, [r7, #12]
 802ee0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 802ee0e:	b29b      	uxth	r3, r3
 802ee10:	3b01      	subs	r3, #1
 802ee12:	b29a      	uxth	r2, r3
 802ee14:	68fb      	ldr	r3, [r7, #12]
 802ee16:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 802ee18:	68fb      	ldr	r3, [r7, #12]
 802ee1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 802ee1c:	b29b      	uxth	r3, r3
 802ee1e:	2b00      	cmp	r3, #0
 802ee20:	d1cb      	bne.n	802edba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802ee22:	683b      	ldr	r3, [r7, #0]
 802ee24:	9300      	str	r3, [sp, #0]
 802ee26:	697b      	ldr	r3, [r7, #20]
 802ee28:	2200      	movs	r2, #0
 802ee2a:	2140      	movs	r1, #64	@ 0x40
 802ee2c:	68f8      	ldr	r0, [r7, #12]
 802ee2e:	f000 fb7f 	bl	802f530 <UART_WaitOnFlagUntilTimeout>
 802ee32:	4603      	mov	r3, r0
 802ee34:	2b00      	cmp	r3, #0
 802ee36:	d005      	beq.n	802ee44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 802ee38:	68fb      	ldr	r3, [r7, #12]
 802ee3a:	2220      	movs	r2, #32
 802ee3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 802ee40:	2303      	movs	r3, #3
 802ee42:	e006      	b.n	802ee52 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 802ee44:	68fb      	ldr	r3, [r7, #12]
 802ee46:	2220      	movs	r2, #32
 802ee48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 802ee4c:	2300      	movs	r3, #0
 802ee4e:	e000      	b.n	802ee52 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 802ee50:	2302      	movs	r3, #2
  }
}
 802ee52:	4618      	mov	r0, r3
 802ee54:	3720      	adds	r7, #32
 802ee56:	46bd      	mov	sp, r7
 802ee58:	bd80      	pop	{r7, pc}

0802ee5a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802ee5a:	b580      	push	{r7, lr}
 802ee5c:	b08a      	sub	sp, #40	@ 0x28
 802ee5e:	af02      	add	r7, sp, #8
 802ee60:	60f8      	str	r0, [r7, #12]
 802ee62:	60b9      	str	r1, [r7, #8]
 802ee64:	603b      	str	r3, [r7, #0]
 802ee66:	4613      	mov	r3, r2
 802ee68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 802ee6a:	2300      	movs	r3, #0
 802ee6c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 802ee6e:	68fb      	ldr	r3, [r7, #12]
 802ee70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 802ee74:	b2db      	uxtb	r3, r3
 802ee76:	2b20      	cmp	r3, #32
 802ee78:	f040 8081 	bne.w	802ef7e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 802ee7c:	68bb      	ldr	r3, [r7, #8]
 802ee7e:	2b00      	cmp	r3, #0
 802ee80:	d002      	beq.n	802ee88 <HAL_UART_Receive+0x2e>
 802ee82:	88fb      	ldrh	r3, [r7, #6]
 802ee84:	2b00      	cmp	r3, #0
 802ee86:	d101      	bne.n	802ee8c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 802ee88:	2301      	movs	r3, #1
 802ee8a:	e079      	b.n	802ef80 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802ee8c:	68fb      	ldr	r3, [r7, #12]
 802ee8e:	2200      	movs	r2, #0
 802ee90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 802ee92:	68fb      	ldr	r3, [r7, #12]
 802ee94:	2222      	movs	r2, #34	@ 0x22
 802ee96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802ee9a:	68fb      	ldr	r3, [r7, #12]
 802ee9c:	2200      	movs	r2, #0
 802ee9e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802eea0:	f7fd fac8 	bl	802c434 <HAL_GetTick>
 802eea4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 802eea6:	68fb      	ldr	r3, [r7, #12]
 802eea8:	88fa      	ldrh	r2, [r7, #6]
 802eeaa:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 802eeac:	68fb      	ldr	r3, [r7, #12]
 802eeae:	88fa      	ldrh	r2, [r7, #6]
 802eeb0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802eeb2:	68fb      	ldr	r3, [r7, #12]
 802eeb4:	689b      	ldr	r3, [r3, #8]
 802eeb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802eeba:	d108      	bne.n	802eece <HAL_UART_Receive+0x74>
 802eebc:	68fb      	ldr	r3, [r7, #12]
 802eebe:	691b      	ldr	r3, [r3, #16]
 802eec0:	2b00      	cmp	r3, #0
 802eec2:	d104      	bne.n	802eece <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 802eec4:	2300      	movs	r3, #0
 802eec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 802eec8:	68bb      	ldr	r3, [r7, #8]
 802eeca:	61bb      	str	r3, [r7, #24]
 802eecc:	e003      	b.n	802eed6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 802eece:	68bb      	ldr	r3, [r7, #8]
 802eed0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802eed2:	2300      	movs	r3, #0
 802eed4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 802eed6:	e047      	b.n	802ef68 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 802eed8:	683b      	ldr	r3, [r7, #0]
 802eeda:	9300      	str	r3, [sp, #0]
 802eedc:	697b      	ldr	r3, [r7, #20]
 802eede:	2200      	movs	r2, #0
 802eee0:	2120      	movs	r1, #32
 802eee2:	68f8      	ldr	r0, [r7, #12]
 802eee4:	f000 fb24 	bl	802f530 <UART_WaitOnFlagUntilTimeout>
 802eee8:	4603      	mov	r3, r0
 802eeea:	2b00      	cmp	r3, #0
 802eeec:	d005      	beq.n	802eefa <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 802eeee:	68fb      	ldr	r3, [r7, #12]
 802eef0:	2220      	movs	r2, #32
 802eef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 802eef6:	2303      	movs	r3, #3
 802eef8:	e042      	b.n	802ef80 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 802eefa:	69fb      	ldr	r3, [r7, #28]
 802eefc:	2b00      	cmp	r3, #0
 802eefe:	d10c      	bne.n	802ef1a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 802ef00:	68fb      	ldr	r3, [r7, #12]
 802ef02:	681b      	ldr	r3, [r3, #0]
 802ef04:	685b      	ldr	r3, [r3, #4]
 802ef06:	b29b      	uxth	r3, r3
 802ef08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802ef0c:	b29a      	uxth	r2, r3
 802ef0e:	69bb      	ldr	r3, [r7, #24]
 802ef10:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 802ef12:	69bb      	ldr	r3, [r7, #24]
 802ef14:	3302      	adds	r3, #2
 802ef16:	61bb      	str	r3, [r7, #24]
 802ef18:	e01f      	b.n	802ef5a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802ef1a:	68fb      	ldr	r3, [r7, #12]
 802ef1c:	689b      	ldr	r3, [r3, #8]
 802ef1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802ef22:	d007      	beq.n	802ef34 <HAL_UART_Receive+0xda>
 802ef24:	68fb      	ldr	r3, [r7, #12]
 802ef26:	689b      	ldr	r3, [r3, #8]
 802ef28:	2b00      	cmp	r3, #0
 802ef2a:	d10a      	bne.n	802ef42 <HAL_UART_Receive+0xe8>
 802ef2c:	68fb      	ldr	r3, [r7, #12]
 802ef2e:	691b      	ldr	r3, [r3, #16]
 802ef30:	2b00      	cmp	r3, #0
 802ef32:	d106      	bne.n	802ef42 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802ef34:	68fb      	ldr	r3, [r7, #12]
 802ef36:	681b      	ldr	r3, [r3, #0]
 802ef38:	685b      	ldr	r3, [r3, #4]
 802ef3a:	b2da      	uxtb	r2, r3
 802ef3c:	69fb      	ldr	r3, [r7, #28]
 802ef3e:	701a      	strb	r2, [r3, #0]
 802ef40:	e008      	b.n	802ef54 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802ef42:	68fb      	ldr	r3, [r7, #12]
 802ef44:	681b      	ldr	r3, [r3, #0]
 802ef46:	685b      	ldr	r3, [r3, #4]
 802ef48:	b2db      	uxtb	r3, r3
 802ef4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802ef4e:	b2da      	uxtb	r2, r3
 802ef50:	69fb      	ldr	r3, [r7, #28]
 802ef52:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 802ef54:	69fb      	ldr	r3, [r7, #28]
 802ef56:	3301      	adds	r3, #1
 802ef58:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 802ef5a:	68fb      	ldr	r3, [r7, #12]
 802ef5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802ef5e:	b29b      	uxth	r3, r3
 802ef60:	3b01      	subs	r3, #1
 802ef62:	b29a      	uxth	r2, r3
 802ef64:	68fb      	ldr	r3, [r7, #12]
 802ef66:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 802ef68:	68fb      	ldr	r3, [r7, #12]
 802ef6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802ef6c:	b29b      	uxth	r3, r3
 802ef6e:	2b00      	cmp	r3, #0
 802ef70:	d1b2      	bne.n	802eed8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 802ef72:	68fb      	ldr	r3, [r7, #12]
 802ef74:	2220      	movs	r2, #32
 802ef76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 802ef7a:	2300      	movs	r3, #0
 802ef7c:	e000      	b.n	802ef80 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 802ef7e:	2302      	movs	r3, #2
  }
}
 802ef80:	4618      	mov	r0, r3
 802ef82:	3720      	adds	r7, #32
 802ef84:	46bd      	mov	sp, r7
 802ef86:	bd80      	pop	{r7, pc}

0802ef88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 802ef88:	b580      	push	{r7, lr}
 802ef8a:	b0ba      	sub	sp, #232	@ 0xe8
 802ef8c:	af00      	add	r7, sp, #0
 802ef8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 802ef90:	687b      	ldr	r3, [r7, #4]
 802ef92:	681b      	ldr	r3, [r3, #0]
 802ef94:	681b      	ldr	r3, [r3, #0]
 802ef96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802ef9a:	687b      	ldr	r3, [r7, #4]
 802ef9c:	681b      	ldr	r3, [r3, #0]
 802ef9e:	68db      	ldr	r3, [r3, #12]
 802efa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 802efa4:	687b      	ldr	r3, [r7, #4]
 802efa6:	681b      	ldr	r3, [r3, #0]
 802efa8:	695b      	ldr	r3, [r3, #20]
 802efaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 802efae:	2300      	movs	r3, #0
 802efb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 802efb4:	2300      	movs	r3, #0
 802efb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 802efba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802efbe:	f003 030f 	and.w	r3, r3, #15
 802efc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 802efc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802efca:	2b00      	cmp	r3, #0
 802efcc:	d10f      	bne.n	802efee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802efce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802efd2:	f003 0320 	and.w	r3, r3, #32
 802efd6:	2b00      	cmp	r3, #0
 802efd8:	d009      	beq.n	802efee <HAL_UART_IRQHandler+0x66>
 802efda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802efde:	f003 0320 	and.w	r3, r3, #32
 802efe2:	2b00      	cmp	r3, #0
 802efe4:	d003      	beq.n	802efee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 802efe6:	6878      	ldr	r0, [r7, #4]
 802efe8:	f000 fbd7 	bl	802f79a <UART_Receive_IT>
      return;
 802efec:	e273      	b.n	802f4d6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 802efee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802eff2:	2b00      	cmp	r3, #0
 802eff4:	f000 80de 	beq.w	802f1b4 <HAL_UART_IRQHandler+0x22c>
 802eff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802effc:	f003 0301 	and.w	r3, r3, #1
 802f000:	2b00      	cmp	r3, #0
 802f002:	d106      	bne.n	802f012 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 802f004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802f008:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 802f00c:	2b00      	cmp	r3, #0
 802f00e:	f000 80d1 	beq.w	802f1b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 802f012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802f016:	f003 0301 	and.w	r3, r3, #1
 802f01a:	2b00      	cmp	r3, #0
 802f01c:	d00b      	beq.n	802f036 <HAL_UART_IRQHandler+0xae>
 802f01e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802f022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802f026:	2b00      	cmp	r3, #0
 802f028:	d005      	beq.n	802f036 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802f02a:	687b      	ldr	r3, [r7, #4]
 802f02c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802f02e:	f043 0201 	orr.w	r2, r3, #1
 802f032:	687b      	ldr	r3, [r7, #4]
 802f034:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802f036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802f03a:	f003 0304 	and.w	r3, r3, #4
 802f03e:	2b00      	cmp	r3, #0
 802f040:	d00b      	beq.n	802f05a <HAL_UART_IRQHandler+0xd2>
 802f042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802f046:	f003 0301 	and.w	r3, r3, #1
 802f04a:	2b00      	cmp	r3, #0
 802f04c:	d005      	beq.n	802f05a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 802f04e:	687b      	ldr	r3, [r7, #4]
 802f050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802f052:	f043 0202 	orr.w	r2, r3, #2
 802f056:	687b      	ldr	r3, [r7, #4]
 802f058:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802f05a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802f05e:	f003 0302 	and.w	r3, r3, #2
 802f062:	2b00      	cmp	r3, #0
 802f064:	d00b      	beq.n	802f07e <HAL_UART_IRQHandler+0xf6>
 802f066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802f06a:	f003 0301 	and.w	r3, r3, #1
 802f06e:	2b00      	cmp	r3, #0
 802f070:	d005      	beq.n	802f07e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 802f072:	687b      	ldr	r3, [r7, #4]
 802f074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802f076:	f043 0204 	orr.w	r2, r3, #4
 802f07a:	687b      	ldr	r3, [r7, #4]
 802f07c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 802f07e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802f082:	f003 0308 	and.w	r3, r3, #8
 802f086:	2b00      	cmp	r3, #0
 802f088:	d011      	beq.n	802f0ae <HAL_UART_IRQHandler+0x126>
 802f08a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802f08e:	f003 0320 	and.w	r3, r3, #32
 802f092:	2b00      	cmp	r3, #0
 802f094:	d105      	bne.n	802f0a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 802f096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802f09a:	f003 0301 	and.w	r3, r3, #1
 802f09e:	2b00      	cmp	r3, #0
 802f0a0:	d005      	beq.n	802f0ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 802f0a2:	687b      	ldr	r3, [r7, #4]
 802f0a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802f0a6:	f043 0208 	orr.w	r2, r3, #8
 802f0aa:	687b      	ldr	r3, [r7, #4]
 802f0ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802f0ae:	687b      	ldr	r3, [r7, #4]
 802f0b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802f0b2:	2b00      	cmp	r3, #0
 802f0b4:	f000 820a 	beq.w	802f4cc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802f0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802f0bc:	f003 0320 	and.w	r3, r3, #32
 802f0c0:	2b00      	cmp	r3, #0
 802f0c2:	d008      	beq.n	802f0d6 <HAL_UART_IRQHandler+0x14e>
 802f0c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802f0c8:	f003 0320 	and.w	r3, r3, #32
 802f0cc:	2b00      	cmp	r3, #0
 802f0ce:	d002      	beq.n	802f0d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 802f0d0:	6878      	ldr	r0, [r7, #4]
 802f0d2:	f000 fb62 	bl	802f79a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 802f0d6:	687b      	ldr	r3, [r7, #4]
 802f0d8:	681b      	ldr	r3, [r3, #0]
 802f0da:	695b      	ldr	r3, [r3, #20]
 802f0dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802f0e0:	2b40      	cmp	r3, #64	@ 0x40
 802f0e2:	bf0c      	ite	eq
 802f0e4:	2301      	moveq	r3, #1
 802f0e6:	2300      	movne	r3, #0
 802f0e8:	b2db      	uxtb	r3, r3
 802f0ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 802f0ee:	687b      	ldr	r3, [r7, #4]
 802f0f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802f0f2:	f003 0308 	and.w	r3, r3, #8
 802f0f6:	2b00      	cmp	r3, #0
 802f0f8:	d103      	bne.n	802f102 <HAL_UART_IRQHandler+0x17a>
 802f0fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 802f0fe:	2b00      	cmp	r3, #0
 802f100:	d04f      	beq.n	802f1a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 802f102:	6878      	ldr	r0, [r7, #4]
 802f104:	f000 fa6d 	bl	802f5e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802f108:	687b      	ldr	r3, [r7, #4]
 802f10a:	681b      	ldr	r3, [r3, #0]
 802f10c:	695b      	ldr	r3, [r3, #20]
 802f10e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802f112:	2b40      	cmp	r3, #64	@ 0x40
 802f114:	d141      	bne.n	802f19a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802f116:	687b      	ldr	r3, [r7, #4]
 802f118:	681b      	ldr	r3, [r3, #0]
 802f11a:	3314      	adds	r3, #20
 802f11c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802f120:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 802f124:	e853 3f00 	ldrex	r3, [r3]
 802f128:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 802f12c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 802f130:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 802f134:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 802f138:	687b      	ldr	r3, [r7, #4]
 802f13a:	681b      	ldr	r3, [r3, #0]
 802f13c:	3314      	adds	r3, #20
 802f13e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 802f142:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 802f146:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802f14a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 802f14e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 802f152:	e841 2300 	strex	r3, r2, [r1]
 802f156:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 802f15a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802f15e:	2b00      	cmp	r3, #0
 802f160:	d1d9      	bne.n	802f116 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 802f162:	687b      	ldr	r3, [r7, #4]
 802f164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802f166:	2b00      	cmp	r3, #0
 802f168:	d013      	beq.n	802f192 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802f16a:	687b      	ldr	r3, [r7, #4]
 802f16c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802f16e:	4a8a      	ldr	r2, [pc, #552]	@ (802f398 <HAL_UART_IRQHandler+0x410>)
 802f170:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802f172:	687b      	ldr	r3, [r7, #4]
 802f174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802f176:	4618      	mov	r0, r3
 802f178:	f7fd fbbc 	bl	802c8f4 <HAL_DMA_Abort_IT>
 802f17c:	4603      	mov	r3, r0
 802f17e:	2b00      	cmp	r3, #0
 802f180:	d016      	beq.n	802f1b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 802f182:	687b      	ldr	r3, [r7, #4]
 802f184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802f186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802f188:	687a      	ldr	r2, [r7, #4]
 802f18a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 802f18c:	4610      	mov	r0, r2
 802f18e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802f190:	e00e      	b.n	802f1b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 802f192:	6878      	ldr	r0, [r7, #4]
 802f194:	f000 f9b6 	bl	802f504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802f198:	e00a      	b.n	802f1b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802f19a:	6878      	ldr	r0, [r7, #4]
 802f19c:	f000 f9b2 	bl	802f504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802f1a0:	e006      	b.n	802f1b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 802f1a2:	6878      	ldr	r0, [r7, #4]
 802f1a4:	f000 f9ae 	bl	802f504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802f1a8:	687b      	ldr	r3, [r7, #4]
 802f1aa:	2200      	movs	r2, #0
 802f1ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 802f1ae:	e18d      	b.n	802f4cc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802f1b0:	bf00      	nop
    return;
 802f1b2:	e18b      	b.n	802f4cc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802f1b4:	687b      	ldr	r3, [r7, #4]
 802f1b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802f1b8:	2b01      	cmp	r3, #1
 802f1ba:	f040 8167 	bne.w	802f48c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 802f1be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802f1c2:	f003 0310 	and.w	r3, r3, #16
 802f1c6:	2b00      	cmp	r3, #0
 802f1c8:	f000 8160 	beq.w	802f48c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 802f1cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802f1d0:	f003 0310 	and.w	r3, r3, #16
 802f1d4:	2b00      	cmp	r3, #0
 802f1d6:	f000 8159 	beq.w	802f48c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 802f1da:	2300      	movs	r3, #0
 802f1dc:	60bb      	str	r3, [r7, #8]
 802f1de:	687b      	ldr	r3, [r7, #4]
 802f1e0:	681b      	ldr	r3, [r3, #0]
 802f1e2:	681b      	ldr	r3, [r3, #0]
 802f1e4:	60bb      	str	r3, [r7, #8]
 802f1e6:	687b      	ldr	r3, [r7, #4]
 802f1e8:	681b      	ldr	r3, [r3, #0]
 802f1ea:	685b      	ldr	r3, [r3, #4]
 802f1ec:	60bb      	str	r3, [r7, #8]
 802f1ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802f1f0:	687b      	ldr	r3, [r7, #4]
 802f1f2:	681b      	ldr	r3, [r3, #0]
 802f1f4:	695b      	ldr	r3, [r3, #20]
 802f1f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802f1fa:	2b40      	cmp	r3, #64	@ 0x40
 802f1fc:	f040 80ce 	bne.w	802f39c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 802f200:	687b      	ldr	r3, [r7, #4]
 802f202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802f204:	681b      	ldr	r3, [r3, #0]
 802f206:	685b      	ldr	r3, [r3, #4]
 802f208:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 802f20c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 802f210:	2b00      	cmp	r3, #0
 802f212:	f000 80a9 	beq.w	802f368 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802f216:	687b      	ldr	r3, [r7, #4]
 802f218:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802f21a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 802f21e:	429a      	cmp	r2, r3
 802f220:	f080 80a2 	bcs.w	802f368 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 802f224:	687b      	ldr	r3, [r7, #4]
 802f226:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 802f22a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 802f22c:	687b      	ldr	r3, [r7, #4]
 802f22e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802f230:	69db      	ldr	r3, [r3, #28]
 802f232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802f236:	f000 8088 	beq.w	802f34a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802f23a:	687b      	ldr	r3, [r7, #4]
 802f23c:	681b      	ldr	r3, [r3, #0]
 802f23e:	330c      	adds	r3, #12
 802f240:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802f244:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 802f248:	e853 3f00 	ldrex	r3, [r3]
 802f24c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 802f250:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 802f254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 802f258:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 802f25c:	687b      	ldr	r3, [r7, #4]
 802f25e:	681b      	ldr	r3, [r3, #0]
 802f260:	330c      	adds	r3, #12
 802f262:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 802f266:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 802f26a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802f26e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 802f272:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 802f276:	e841 2300 	strex	r3, r2, [r1]
 802f27a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 802f27e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802f282:	2b00      	cmp	r3, #0
 802f284:	d1d9      	bne.n	802f23a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802f286:	687b      	ldr	r3, [r7, #4]
 802f288:	681b      	ldr	r3, [r3, #0]
 802f28a:	3314      	adds	r3, #20
 802f28c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802f28e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 802f290:	e853 3f00 	ldrex	r3, [r3]
 802f294:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 802f296:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802f298:	f023 0301 	bic.w	r3, r3, #1
 802f29c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 802f2a0:	687b      	ldr	r3, [r7, #4]
 802f2a2:	681b      	ldr	r3, [r3, #0]
 802f2a4:	3314      	adds	r3, #20
 802f2a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 802f2aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 802f2ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802f2b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 802f2b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 802f2b6:	e841 2300 	strex	r3, r2, [r1]
 802f2ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 802f2bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802f2be:	2b00      	cmp	r3, #0
 802f2c0:	d1e1      	bne.n	802f286 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802f2c2:	687b      	ldr	r3, [r7, #4]
 802f2c4:	681b      	ldr	r3, [r3, #0]
 802f2c6:	3314      	adds	r3, #20
 802f2c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802f2ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802f2cc:	e853 3f00 	ldrex	r3, [r3]
 802f2d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 802f2d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802f2d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 802f2d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 802f2dc:	687b      	ldr	r3, [r7, #4]
 802f2de:	681b      	ldr	r3, [r3, #0]
 802f2e0:	3314      	adds	r3, #20
 802f2e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 802f2e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 802f2e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802f2ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 802f2ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 802f2ee:	e841 2300 	strex	r3, r2, [r1]
 802f2f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 802f2f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802f2f6:	2b00      	cmp	r3, #0
 802f2f8:	d1e3      	bne.n	802f2c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 802f2fa:	687b      	ldr	r3, [r7, #4]
 802f2fc:	2220      	movs	r2, #32
 802f2fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802f302:	687b      	ldr	r3, [r7, #4]
 802f304:	2200      	movs	r2, #0
 802f306:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802f308:	687b      	ldr	r3, [r7, #4]
 802f30a:	681b      	ldr	r3, [r3, #0]
 802f30c:	330c      	adds	r3, #12
 802f30e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802f310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802f312:	e853 3f00 	ldrex	r3, [r3]
 802f316:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 802f318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802f31a:	f023 0310 	bic.w	r3, r3, #16
 802f31e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 802f322:	687b      	ldr	r3, [r7, #4]
 802f324:	681b      	ldr	r3, [r3, #0]
 802f326:	330c      	adds	r3, #12
 802f328:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 802f32c:	65ba      	str	r2, [r7, #88]	@ 0x58
 802f32e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802f330:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 802f332:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802f334:	e841 2300 	strex	r3, r2, [r1]
 802f338:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 802f33a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802f33c:	2b00      	cmp	r3, #0
 802f33e:	d1e3      	bne.n	802f308 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 802f340:	687b      	ldr	r3, [r7, #4]
 802f342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802f344:	4618      	mov	r0, r3
 802f346:	f7fd fa65 	bl	802c814 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 802f34a:	687b      	ldr	r3, [r7, #4]
 802f34c:	2202      	movs	r2, #2
 802f34e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 802f350:	687b      	ldr	r3, [r7, #4]
 802f352:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 802f354:	687b      	ldr	r3, [r7, #4]
 802f356:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802f358:	b29b      	uxth	r3, r3
 802f35a:	1ad3      	subs	r3, r2, r3
 802f35c:	b29b      	uxth	r3, r3
 802f35e:	4619      	mov	r1, r3
 802f360:	6878      	ldr	r0, [r7, #4]
 802f362:	f000 f8d9 	bl	802f518 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 802f366:	e0b3      	b.n	802f4d0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 802f368:	687b      	ldr	r3, [r7, #4]
 802f36a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802f36c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 802f370:	429a      	cmp	r2, r3
 802f372:	f040 80ad 	bne.w	802f4d0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 802f376:	687b      	ldr	r3, [r7, #4]
 802f378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802f37a:	69db      	ldr	r3, [r3, #28]
 802f37c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802f380:	f040 80a6 	bne.w	802f4d0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 802f384:	687b      	ldr	r3, [r7, #4]
 802f386:	2202      	movs	r2, #2
 802f388:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802f38a:	687b      	ldr	r3, [r7, #4]
 802f38c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802f38e:	4619      	mov	r1, r3
 802f390:	6878      	ldr	r0, [r7, #4]
 802f392:	f000 f8c1 	bl	802f518 <HAL_UARTEx_RxEventCallback>
      return;
 802f396:	e09b      	b.n	802f4d0 <HAL_UART_IRQHandler+0x548>
 802f398:	0802f6a9 	.word	0x0802f6a9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 802f39c:	687b      	ldr	r3, [r7, #4]
 802f39e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 802f3a0:	687b      	ldr	r3, [r7, #4]
 802f3a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802f3a4:	b29b      	uxth	r3, r3
 802f3a6:	1ad3      	subs	r3, r2, r3
 802f3a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 802f3ac:	687b      	ldr	r3, [r7, #4]
 802f3ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802f3b0:	b29b      	uxth	r3, r3
 802f3b2:	2b00      	cmp	r3, #0
 802f3b4:	f000 808e 	beq.w	802f4d4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 802f3b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 802f3bc:	2b00      	cmp	r3, #0
 802f3be:	f000 8089 	beq.w	802f4d4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802f3c2:	687b      	ldr	r3, [r7, #4]
 802f3c4:	681b      	ldr	r3, [r3, #0]
 802f3c6:	330c      	adds	r3, #12
 802f3c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802f3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802f3cc:	e853 3f00 	ldrex	r3, [r3]
 802f3d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 802f3d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f3d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802f3d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 802f3dc:	687b      	ldr	r3, [r7, #4]
 802f3de:	681b      	ldr	r3, [r3, #0]
 802f3e0:	330c      	adds	r3, #12
 802f3e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 802f3e6:	647a      	str	r2, [r7, #68]	@ 0x44
 802f3e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802f3ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802f3ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802f3ee:	e841 2300 	strex	r3, r2, [r1]
 802f3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 802f3f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802f3f6:	2b00      	cmp	r3, #0
 802f3f8:	d1e3      	bne.n	802f3c2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802f3fa:	687b      	ldr	r3, [r7, #4]
 802f3fc:	681b      	ldr	r3, [r3, #0]
 802f3fe:	3314      	adds	r3, #20
 802f400:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802f402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f404:	e853 3f00 	ldrex	r3, [r3]
 802f408:	623b      	str	r3, [r7, #32]
   return(result);
 802f40a:	6a3b      	ldr	r3, [r7, #32]
 802f40c:	f023 0301 	bic.w	r3, r3, #1
 802f410:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 802f414:	687b      	ldr	r3, [r7, #4]
 802f416:	681b      	ldr	r3, [r3, #0]
 802f418:	3314      	adds	r3, #20
 802f41a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 802f41e:	633a      	str	r2, [r7, #48]	@ 0x30
 802f420:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802f422:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802f424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802f426:	e841 2300 	strex	r3, r2, [r1]
 802f42a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 802f42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f42e:	2b00      	cmp	r3, #0
 802f430:	d1e3      	bne.n	802f3fa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802f432:	687b      	ldr	r3, [r7, #4]
 802f434:	2220      	movs	r2, #32
 802f436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802f43a:	687b      	ldr	r3, [r7, #4]
 802f43c:	2200      	movs	r2, #0
 802f43e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802f440:	687b      	ldr	r3, [r7, #4]
 802f442:	681b      	ldr	r3, [r3, #0]
 802f444:	330c      	adds	r3, #12
 802f446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802f448:	693b      	ldr	r3, [r7, #16]
 802f44a:	e853 3f00 	ldrex	r3, [r3]
 802f44e:	60fb      	str	r3, [r7, #12]
   return(result);
 802f450:	68fb      	ldr	r3, [r7, #12]
 802f452:	f023 0310 	bic.w	r3, r3, #16
 802f456:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 802f45a:	687b      	ldr	r3, [r7, #4]
 802f45c:	681b      	ldr	r3, [r3, #0]
 802f45e:	330c      	adds	r3, #12
 802f460:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 802f464:	61fa      	str	r2, [r7, #28]
 802f466:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802f468:	69b9      	ldr	r1, [r7, #24]
 802f46a:	69fa      	ldr	r2, [r7, #28]
 802f46c:	e841 2300 	strex	r3, r2, [r1]
 802f470:	617b      	str	r3, [r7, #20]
   return(result);
 802f472:	697b      	ldr	r3, [r7, #20]
 802f474:	2b00      	cmp	r3, #0
 802f476:	d1e3      	bne.n	802f440 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 802f478:	687b      	ldr	r3, [r7, #4]
 802f47a:	2202      	movs	r2, #2
 802f47c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 802f47e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 802f482:	4619      	mov	r1, r3
 802f484:	6878      	ldr	r0, [r7, #4]
 802f486:	f000 f847 	bl	802f518 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802f48a:	e023      	b.n	802f4d4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 802f48c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802f490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802f494:	2b00      	cmp	r3, #0
 802f496:	d009      	beq.n	802f4ac <HAL_UART_IRQHandler+0x524>
 802f498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802f49c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802f4a0:	2b00      	cmp	r3, #0
 802f4a2:	d003      	beq.n	802f4ac <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 802f4a4:	6878      	ldr	r0, [r7, #4]
 802f4a6:	f000 f910 	bl	802f6ca <UART_Transmit_IT>
    return;
 802f4aa:	e014      	b.n	802f4d6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 802f4ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802f4b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802f4b4:	2b00      	cmp	r3, #0
 802f4b6:	d00e      	beq.n	802f4d6 <HAL_UART_IRQHandler+0x54e>
 802f4b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802f4bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802f4c0:	2b00      	cmp	r3, #0
 802f4c2:	d008      	beq.n	802f4d6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 802f4c4:	6878      	ldr	r0, [r7, #4]
 802f4c6:	f000 f950 	bl	802f76a <UART_EndTransmit_IT>
    return;
 802f4ca:	e004      	b.n	802f4d6 <HAL_UART_IRQHandler+0x54e>
    return;
 802f4cc:	bf00      	nop
 802f4ce:	e002      	b.n	802f4d6 <HAL_UART_IRQHandler+0x54e>
      return;
 802f4d0:	bf00      	nop
 802f4d2:	e000      	b.n	802f4d6 <HAL_UART_IRQHandler+0x54e>
      return;
 802f4d4:	bf00      	nop
  }
}
 802f4d6:	37e8      	adds	r7, #232	@ 0xe8
 802f4d8:	46bd      	mov	sp, r7
 802f4da:	bd80      	pop	{r7, pc}

0802f4dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 802f4dc:	b480      	push	{r7}
 802f4de:	b083      	sub	sp, #12
 802f4e0:	af00      	add	r7, sp, #0
 802f4e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 802f4e4:	bf00      	nop
 802f4e6:	370c      	adds	r7, #12
 802f4e8:	46bd      	mov	sp, r7
 802f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f4ee:	4770      	bx	lr

0802f4f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 802f4f0:	b480      	push	{r7}
 802f4f2:	b083      	sub	sp, #12
 802f4f4:	af00      	add	r7, sp, #0
 802f4f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 802f4f8:	bf00      	nop
 802f4fa:	370c      	adds	r7, #12
 802f4fc:	46bd      	mov	sp, r7
 802f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f502:	4770      	bx	lr

0802f504 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 802f504:	b480      	push	{r7}
 802f506:	b083      	sub	sp, #12
 802f508:	af00      	add	r7, sp, #0
 802f50a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 802f50c:	bf00      	nop
 802f50e:	370c      	adds	r7, #12
 802f510:	46bd      	mov	sp, r7
 802f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f516:	4770      	bx	lr

0802f518 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 802f518:	b480      	push	{r7}
 802f51a:	b083      	sub	sp, #12
 802f51c:	af00      	add	r7, sp, #0
 802f51e:	6078      	str	r0, [r7, #4]
 802f520:	460b      	mov	r3, r1
 802f522:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 802f524:	bf00      	nop
 802f526:	370c      	adds	r7, #12
 802f528:	46bd      	mov	sp, r7
 802f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f52e:	4770      	bx	lr

0802f530 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 802f530:	b580      	push	{r7, lr}
 802f532:	b086      	sub	sp, #24
 802f534:	af00      	add	r7, sp, #0
 802f536:	60f8      	str	r0, [r7, #12]
 802f538:	60b9      	str	r1, [r7, #8]
 802f53a:	603b      	str	r3, [r7, #0]
 802f53c:	4613      	mov	r3, r2
 802f53e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802f540:	e03b      	b.n	802f5ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802f542:	6a3b      	ldr	r3, [r7, #32]
 802f544:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802f548:	d037      	beq.n	802f5ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802f54a:	f7fc ff73 	bl	802c434 <HAL_GetTick>
 802f54e:	4602      	mov	r2, r0
 802f550:	683b      	ldr	r3, [r7, #0]
 802f552:	1ad3      	subs	r3, r2, r3
 802f554:	6a3a      	ldr	r2, [r7, #32]
 802f556:	429a      	cmp	r2, r3
 802f558:	d302      	bcc.n	802f560 <UART_WaitOnFlagUntilTimeout+0x30>
 802f55a:	6a3b      	ldr	r3, [r7, #32]
 802f55c:	2b00      	cmp	r3, #0
 802f55e:	d101      	bne.n	802f564 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 802f560:	2303      	movs	r3, #3
 802f562:	e03a      	b.n	802f5da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 802f564:	68fb      	ldr	r3, [r7, #12]
 802f566:	681b      	ldr	r3, [r3, #0]
 802f568:	68db      	ldr	r3, [r3, #12]
 802f56a:	f003 0304 	and.w	r3, r3, #4
 802f56e:	2b00      	cmp	r3, #0
 802f570:	d023      	beq.n	802f5ba <UART_WaitOnFlagUntilTimeout+0x8a>
 802f572:	68bb      	ldr	r3, [r7, #8]
 802f574:	2b80      	cmp	r3, #128	@ 0x80
 802f576:	d020      	beq.n	802f5ba <UART_WaitOnFlagUntilTimeout+0x8a>
 802f578:	68bb      	ldr	r3, [r7, #8]
 802f57a:	2b40      	cmp	r3, #64	@ 0x40
 802f57c:	d01d      	beq.n	802f5ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 802f57e:	68fb      	ldr	r3, [r7, #12]
 802f580:	681b      	ldr	r3, [r3, #0]
 802f582:	681b      	ldr	r3, [r3, #0]
 802f584:	f003 0308 	and.w	r3, r3, #8
 802f588:	2b08      	cmp	r3, #8
 802f58a:	d116      	bne.n	802f5ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 802f58c:	2300      	movs	r3, #0
 802f58e:	617b      	str	r3, [r7, #20]
 802f590:	68fb      	ldr	r3, [r7, #12]
 802f592:	681b      	ldr	r3, [r3, #0]
 802f594:	681b      	ldr	r3, [r3, #0]
 802f596:	617b      	str	r3, [r7, #20]
 802f598:	68fb      	ldr	r3, [r7, #12]
 802f59a:	681b      	ldr	r3, [r3, #0]
 802f59c:	685b      	ldr	r3, [r3, #4]
 802f59e:	617b      	str	r3, [r7, #20]
 802f5a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 802f5a2:	68f8      	ldr	r0, [r7, #12]
 802f5a4:	f000 f81d 	bl	802f5e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 802f5a8:	68fb      	ldr	r3, [r7, #12]
 802f5aa:	2208      	movs	r2, #8
 802f5ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802f5ae:	68fb      	ldr	r3, [r7, #12]
 802f5b0:	2200      	movs	r2, #0
 802f5b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 802f5b6:	2301      	movs	r3, #1
 802f5b8:	e00f      	b.n	802f5da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802f5ba:	68fb      	ldr	r3, [r7, #12]
 802f5bc:	681b      	ldr	r3, [r3, #0]
 802f5be:	681a      	ldr	r2, [r3, #0]
 802f5c0:	68bb      	ldr	r3, [r7, #8]
 802f5c2:	4013      	ands	r3, r2
 802f5c4:	68ba      	ldr	r2, [r7, #8]
 802f5c6:	429a      	cmp	r2, r3
 802f5c8:	bf0c      	ite	eq
 802f5ca:	2301      	moveq	r3, #1
 802f5cc:	2300      	movne	r3, #0
 802f5ce:	b2db      	uxtb	r3, r3
 802f5d0:	461a      	mov	r2, r3
 802f5d2:	79fb      	ldrb	r3, [r7, #7]
 802f5d4:	429a      	cmp	r2, r3
 802f5d6:	d0b4      	beq.n	802f542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802f5d8:	2300      	movs	r3, #0
}
 802f5da:	4618      	mov	r0, r3
 802f5dc:	3718      	adds	r7, #24
 802f5de:	46bd      	mov	sp, r7
 802f5e0:	bd80      	pop	{r7, pc}

0802f5e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802f5e2:	b480      	push	{r7}
 802f5e4:	b095      	sub	sp, #84	@ 0x54
 802f5e6:	af00      	add	r7, sp, #0
 802f5e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802f5ea:	687b      	ldr	r3, [r7, #4]
 802f5ec:	681b      	ldr	r3, [r3, #0]
 802f5ee:	330c      	adds	r3, #12
 802f5f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802f5f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f5f4:	e853 3f00 	ldrex	r3, [r3]
 802f5f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 802f5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802f5fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802f600:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802f602:	687b      	ldr	r3, [r7, #4]
 802f604:	681b      	ldr	r3, [r3, #0]
 802f606:	330c      	adds	r3, #12
 802f608:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802f60a:	643a      	str	r2, [r7, #64]	@ 0x40
 802f60c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802f60e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 802f610:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802f612:	e841 2300 	strex	r3, r2, [r1]
 802f616:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 802f618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802f61a:	2b00      	cmp	r3, #0
 802f61c:	d1e5      	bne.n	802f5ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802f61e:	687b      	ldr	r3, [r7, #4]
 802f620:	681b      	ldr	r3, [r3, #0]
 802f622:	3314      	adds	r3, #20
 802f624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802f626:	6a3b      	ldr	r3, [r7, #32]
 802f628:	e853 3f00 	ldrex	r3, [r3]
 802f62c:	61fb      	str	r3, [r7, #28]
   return(result);
 802f62e:	69fb      	ldr	r3, [r7, #28]
 802f630:	f023 0301 	bic.w	r3, r3, #1
 802f634:	64bb      	str	r3, [r7, #72]	@ 0x48
 802f636:	687b      	ldr	r3, [r7, #4]
 802f638:	681b      	ldr	r3, [r3, #0]
 802f63a:	3314      	adds	r3, #20
 802f63c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802f63e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802f640:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802f642:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802f644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f646:	e841 2300 	strex	r3, r2, [r1]
 802f64a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 802f64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f64e:	2b00      	cmp	r3, #0
 802f650:	d1e5      	bne.n	802f61e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802f652:	687b      	ldr	r3, [r7, #4]
 802f654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802f656:	2b01      	cmp	r3, #1
 802f658:	d119      	bne.n	802f68e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802f65a:	687b      	ldr	r3, [r7, #4]
 802f65c:	681b      	ldr	r3, [r3, #0]
 802f65e:	330c      	adds	r3, #12
 802f660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802f662:	68fb      	ldr	r3, [r7, #12]
 802f664:	e853 3f00 	ldrex	r3, [r3]
 802f668:	60bb      	str	r3, [r7, #8]
   return(result);
 802f66a:	68bb      	ldr	r3, [r7, #8]
 802f66c:	f023 0310 	bic.w	r3, r3, #16
 802f670:	647b      	str	r3, [r7, #68]	@ 0x44
 802f672:	687b      	ldr	r3, [r7, #4]
 802f674:	681b      	ldr	r3, [r3, #0]
 802f676:	330c      	adds	r3, #12
 802f678:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802f67a:	61ba      	str	r2, [r7, #24]
 802f67c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802f67e:	6979      	ldr	r1, [r7, #20]
 802f680:	69ba      	ldr	r2, [r7, #24]
 802f682:	e841 2300 	strex	r3, r2, [r1]
 802f686:	613b      	str	r3, [r7, #16]
   return(result);
 802f688:	693b      	ldr	r3, [r7, #16]
 802f68a:	2b00      	cmp	r3, #0
 802f68c:	d1e5      	bne.n	802f65a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802f68e:	687b      	ldr	r3, [r7, #4]
 802f690:	2220      	movs	r2, #32
 802f692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802f696:	687b      	ldr	r3, [r7, #4]
 802f698:	2200      	movs	r2, #0
 802f69a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 802f69c:	bf00      	nop
 802f69e:	3754      	adds	r7, #84	@ 0x54
 802f6a0:	46bd      	mov	sp, r7
 802f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f6a6:	4770      	bx	lr

0802f6a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802f6a8:	b580      	push	{r7, lr}
 802f6aa:	b084      	sub	sp, #16
 802f6ac:	af00      	add	r7, sp, #0
 802f6ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802f6b0:	687b      	ldr	r3, [r7, #4]
 802f6b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802f6b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802f6b6:	68fb      	ldr	r3, [r7, #12]
 802f6b8:	2200      	movs	r2, #0
 802f6ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802f6bc:	68f8      	ldr	r0, [r7, #12]
 802f6be:	f7ff ff21 	bl	802f504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802f6c2:	bf00      	nop
 802f6c4:	3710      	adds	r7, #16
 802f6c6:	46bd      	mov	sp, r7
 802f6c8:	bd80      	pop	{r7, pc}

0802f6ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802f6ca:	b480      	push	{r7}
 802f6cc:	b085      	sub	sp, #20
 802f6ce:	af00      	add	r7, sp, #0
 802f6d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802f6d2:	687b      	ldr	r3, [r7, #4]
 802f6d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 802f6d8:	b2db      	uxtb	r3, r3
 802f6da:	2b21      	cmp	r3, #33	@ 0x21
 802f6dc:	d13e      	bne.n	802f75c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802f6de:	687b      	ldr	r3, [r7, #4]
 802f6e0:	689b      	ldr	r3, [r3, #8]
 802f6e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802f6e6:	d114      	bne.n	802f712 <UART_Transmit_IT+0x48>
 802f6e8:	687b      	ldr	r3, [r7, #4]
 802f6ea:	691b      	ldr	r3, [r3, #16]
 802f6ec:	2b00      	cmp	r3, #0
 802f6ee:	d110      	bne.n	802f712 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 802f6f0:	687b      	ldr	r3, [r7, #4]
 802f6f2:	6a1b      	ldr	r3, [r3, #32]
 802f6f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802f6f6:	68fb      	ldr	r3, [r7, #12]
 802f6f8:	881b      	ldrh	r3, [r3, #0]
 802f6fa:	461a      	mov	r2, r3
 802f6fc:	687b      	ldr	r3, [r7, #4]
 802f6fe:	681b      	ldr	r3, [r3, #0]
 802f700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802f704:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 802f706:	687b      	ldr	r3, [r7, #4]
 802f708:	6a1b      	ldr	r3, [r3, #32]
 802f70a:	1c9a      	adds	r2, r3, #2
 802f70c:	687b      	ldr	r3, [r7, #4]
 802f70e:	621a      	str	r2, [r3, #32]
 802f710:	e008      	b.n	802f724 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802f712:	687b      	ldr	r3, [r7, #4]
 802f714:	6a1b      	ldr	r3, [r3, #32]
 802f716:	1c59      	adds	r1, r3, #1
 802f718:	687a      	ldr	r2, [r7, #4]
 802f71a:	6211      	str	r1, [r2, #32]
 802f71c:	781a      	ldrb	r2, [r3, #0]
 802f71e:	687b      	ldr	r3, [r7, #4]
 802f720:	681b      	ldr	r3, [r3, #0]
 802f722:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802f724:	687b      	ldr	r3, [r7, #4]
 802f726:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 802f728:	b29b      	uxth	r3, r3
 802f72a:	3b01      	subs	r3, #1
 802f72c:	b29b      	uxth	r3, r3
 802f72e:	687a      	ldr	r2, [r7, #4]
 802f730:	4619      	mov	r1, r3
 802f732:	84d1      	strh	r1, [r2, #38]	@ 0x26
 802f734:	2b00      	cmp	r3, #0
 802f736:	d10f      	bne.n	802f758 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802f738:	687b      	ldr	r3, [r7, #4]
 802f73a:	681b      	ldr	r3, [r3, #0]
 802f73c:	68da      	ldr	r2, [r3, #12]
 802f73e:	687b      	ldr	r3, [r7, #4]
 802f740:	681b      	ldr	r3, [r3, #0]
 802f742:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 802f746:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802f748:	687b      	ldr	r3, [r7, #4]
 802f74a:	681b      	ldr	r3, [r3, #0]
 802f74c:	68da      	ldr	r2, [r3, #12]
 802f74e:	687b      	ldr	r3, [r7, #4]
 802f750:	681b      	ldr	r3, [r3, #0]
 802f752:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 802f756:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802f758:	2300      	movs	r3, #0
 802f75a:	e000      	b.n	802f75e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 802f75c:	2302      	movs	r3, #2
  }
}
 802f75e:	4618      	mov	r0, r3
 802f760:	3714      	adds	r7, #20
 802f762:	46bd      	mov	sp, r7
 802f764:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f768:	4770      	bx	lr

0802f76a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802f76a:	b580      	push	{r7, lr}
 802f76c:	b082      	sub	sp, #8
 802f76e:	af00      	add	r7, sp, #0
 802f770:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802f772:	687b      	ldr	r3, [r7, #4]
 802f774:	681b      	ldr	r3, [r3, #0]
 802f776:	68da      	ldr	r2, [r3, #12]
 802f778:	687b      	ldr	r3, [r7, #4]
 802f77a:	681b      	ldr	r3, [r3, #0]
 802f77c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 802f780:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802f782:	687b      	ldr	r3, [r7, #4]
 802f784:	2220      	movs	r2, #32
 802f786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802f78a:	6878      	ldr	r0, [r7, #4]
 802f78c:	f7ff fea6 	bl	802f4dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802f790:	2300      	movs	r3, #0
}
 802f792:	4618      	mov	r0, r3
 802f794:	3708      	adds	r7, #8
 802f796:	46bd      	mov	sp, r7
 802f798:	bd80      	pop	{r7, pc}

0802f79a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802f79a:	b580      	push	{r7, lr}
 802f79c:	b08c      	sub	sp, #48	@ 0x30
 802f79e:	af00      	add	r7, sp, #0
 802f7a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 802f7a2:	2300      	movs	r3, #0
 802f7a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 802f7a6:	2300      	movs	r3, #0
 802f7a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802f7aa:	687b      	ldr	r3, [r7, #4]
 802f7ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 802f7b0:	b2db      	uxtb	r3, r3
 802f7b2:	2b22      	cmp	r3, #34	@ 0x22
 802f7b4:	f040 80aa 	bne.w	802f90c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802f7b8:	687b      	ldr	r3, [r7, #4]
 802f7ba:	689b      	ldr	r3, [r3, #8]
 802f7bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802f7c0:	d115      	bne.n	802f7ee <UART_Receive_IT+0x54>
 802f7c2:	687b      	ldr	r3, [r7, #4]
 802f7c4:	691b      	ldr	r3, [r3, #16]
 802f7c6:	2b00      	cmp	r3, #0
 802f7c8:	d111      	bne.n	802f7ee <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 802f7ca:	687b      	ldr	r3, [r7, #4]
 802f7cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f7ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802f7d0:	687b      	ldr	r3, [r7, #4]
 802f7d2:	681b      	ldr	r3, [r3, #0]
 802f7d4:	685b      	ldr	r3, [r3, #4]
 802f7d6:	b29b      	uxth	r3, r3
 802f7d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802f7dc:	b29a      	uxth	r2, r3
 802f7de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f7e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 802f7e2:	687b      	ldr	r3, [r7, #4]
 802f7e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f7e6:	1c9a      	adds	r2, r3, #2
 802f7e8:	687b      	ldr	r3, [r7, #4]
 802f7ea:	629a      	str	r2, [r3, #40]	@ 0x28
 802f7ec:	e024      	b.n	802f838 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802f7ee:	687b      	ldr	r3, [r7, #4]
 802f7f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f7f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802f7f4:	687b      	ldr	r3, [r7, #4]
 802f7f6:	689b      	ldr	r3, [r3, #8]
 802f7f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802f7fc:	d007      	beq.n	802f80e <UART_Receive_IT+0x74>
 802f7fe:	687b      	ldr	r3, [r7, #4]
 802f800:	689b      	ldr	r3, [r3, #8]
 802f802:	2b00      	cmp	r3, #0
 802f804:	d10a      	bne.n	802f81c <UART_Receive_IT+0x82>
 802f806:	687b      	ldr	r3, [r7, #4]
 802f808:	691b      	ldr	r3, [r3, #16]
 802f80a:	2b00      	cmp	r3, #0
 802f80c:	d106      	bne.n	802f81c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802f80e:	687b      	ldr	r3, [r7, #4]
 802f810:	681b      	ldr	r3, [r3, #0]
 802f812:	685b      	ldr	r3, [r3, #4]
 802f814:	b2da      	uxtb	r2, r3
 802f816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f818:	701a      	strb	r2, [r3, #0]
 802f81a:	e008      	b.n	802f82e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802f81c:	687b      	ldr	r3, [r7, #4]
 802f81e:	681b      	ldr	r3, [r3, #0]
 802f820:	685b      	ldr	r3, [r3, #4]
 802f822:	b2db      	uxtb	r3, r3
 802f824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802f828:	b2da      	uxtb	r2, r3
 802f82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f82c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 802f82e:	687b      	ldr	r3, [r7, #4]
 802f830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f832:	1c5a      	adds	r2, r3, #1
 802f834:	687b      	ldr	r3, [r7, #4]
 802f836:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 802f838:	687b      	ldr	r3, [r7, #4]
 802f83a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802f83c:	b29b      	uxth	r3, r3
 802f83e:	3b01      	subs	r3, #1
 802f840:	b29b      	uxth	r3, r3
 802f842:	687a      	ldr	r2, [r7, #4]
 802f844:	4619      	mov	r1, r3
 802f846:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 802f848:	2b00      	cmp	r3, #0
 802f84a:	d15d      	bne.n	802f908 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802f84c:	687b      	ldr	r3, [r7, #4]
 802f84e:	681b      	ldr	r3, [r3, #0]
 802f850:	68da      	ldr	r2, [r3, #12]
 802f852:	687b      	ldr	r3, [r7, #4]
 802f854:	681b      	ldr	r3, [r3, #0]
 802f856:	f022 0220 	bic.w	r2, r2, #32
 802f85a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802f85c:	687b      	ldr	r3, [r7, #4]
 802f85e:	681b      	ldr	r3, [r3, #0]
 802f860:	68da      	ldr	r2, [r3, #12]
 802f862:	687b      	ldr	r3, [r7, #4]
 802f864:	681b      	ldr	r3, [r3, #0]
 802f866:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 802f86a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 802f86c:	687b      	ldr	r3, [r7, #4]
 802f86e:	681b      	ldr	r3, [r3, #0]
 802f870:	695a      	ldr	r2, [r3, #20]
 802f872:	687b      	ldr	r3, [r7, #4]
 802f874:	681b      	ldr	r3, [r3, #0]
 802f876:	f022 0201 	bic.w	r2, r2, #1
 802f87a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802f87c:	687b      	ldr	r3, [r7, #4]
 802f87e:	2220      	movs	r2, #32
 802f880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 802f884:	687b      	ldr	r3, [r7, #4]
 802f886:	2200      	movs	r2, #0
 802f888:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802f88a:	687b      	ldr	r3, [r7, #4]
 802f88c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802f88e:	2b01      	cmp	r3, #1
 802f890:	d135      	bne.n	802f8fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802f892:	687b      	ldr	r3, [r7, #4]
 802f894:	2200      	movs	r2, #0
 802f896:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802f898:	687b      	ldr	r3, [r7, #4]
 802f89a:	681b      	ldr	r3, [r3, #0]
 802f89c:	330c      	adds	r3, #12
 802f89e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802f8a0:	697b      	ldr	r3, [r7, #20]
 802f8a2:	e853 3f00 	ldrex	r3, [r3]
 802f8a6:	613b      	str	r3, [r7, #16]
   return(result);
 802f8a8:	693b      	ldr	r3, [r7, #16]
 802f8aa:	f023 0310 	bic.w	r3, r3, #16
 802f8ae:	627b      	str	r3, [r7, #36]	@ 0x24
 802f8b0:	687b      	ldr	r3, [r7, #4]
 802f8b2:	681b      	ldr	r3, [r3, #0]
 802f8b4:	330c      	adds	r3, #12
 802f8b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802f8b8:	623a      	str	r2, [r7, #32]
 802f8ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802f8bc:	69f9      	ldr	r1, [r7, #28]
 802f8be:	6a3a      	ldr	r2, [r7, #32]
 802f8c0:	e841 2300 	strex	r3, r2, [r1]
 802f8c4:	61bb      	str	r3, [r7, #24]
   return(result);
 802f8c6:	69bb      	ldr	r3, [r7, #24]
 802f8c8:	2b00      	cmp	r3, #0
 802f8ca:	d1e5      	bne.n	802f898 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 802f8cc:	687b      	ldr	r3, [r7, #4]
 802f8ce:	681b      	ldr	r3, [r3, #0]
 802f8d0:	681b      	ldr	r3, [r3, #0]
 802f8d2:	f003 0310 	and.w	r3, r3, #16
 802f8d6:	2b10      	cmp	r3, #16
 802f8d8:	d10a      	bne.n	802f8f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 802f8da:	2300      	movs	r3, #0
 802f8dc:	60fb      	str	r3, [r7, #12]
 802f8de:	687b      	ldr	r3, [r7, #4]
 802f8e0:	681b      	ldr	r3, [r3, #0]
 802f8e2:	681b      	ldr	r3, [r3, #0]
 802f8e4:	60fb      	str	r3, [r7, #12]
 802f8e6:	687b      	ldr	r3, [r7, #4]
 802f8e8:	681b      	ldr	r3, [r3, #0]
 802f8ea:	685b      	ldr	r3, [r3, #4]
 802f8ec:	60fb      	str	r3, [r7, #12]
 802f8ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802f8f0:	687b      	ldr	r3, [r7, #4]
 802f8f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802f8f4:	4619      	mov	r1, r3
 802f8f6:	6878      	ldr	r0, [r7, #4]
 802f8f8:	f7ff fe0e 	bl	802f518 <HAL_UARTEx_RxEventCallback>
 802f8fc:	e002      	b.n	802f904 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 802f8fe:	6878      	ldr	r0, [r7, #4]
 802f900:	f7ff fdf6 	bl	802f4f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 802f904:	2300      	movs	r3, #0
 802f906:	e002      	b.n	802f90e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 802f908:	2300      	movs	r3, #0
 802f90a:	e000      	b.n	802f90e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 802f90c:	2302      	movs	r3, #2
  }
}
 802f90e:	4618      	mov	r0, r3
 802f910:	3730      	adds	r7, #48	@ 0x30
 802f912:	46bd      	mov	sp, r7
 802f914:	bd80      	pop	{r7, pc}
	...

0802f918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802f918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802f91c:	b0c0      	sub	sp, #256	@ 0x100
 802f91e:	af00      	add	r7, sp, #0
 802f920:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802f924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802f928:	681b      	ldr	r3, [r3, #0]
 802f92a:	691b      	ldr	r3, [r3, #16]
 802f92c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 802f930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802f934:	68d9      	ldr	r1, [r3, #12]
 802f936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802f93a:	681a      	ldr	r2, [r3, #0]
 802f93c:	ea40 0301 	orr.w	r3, r0, r1
 802f940:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802f942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802f946:	689a      	ldr	r2, [r3, #8]
 802f948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802f94c:	691b      	ldr	r3, [r3, #16]
 802f94e:	431a      	orrs	r2, r3
 802f950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802f954:	695b      	ldr	r3, [r3, #20]
 802f956:	431a      	orrs	r2, r3
 802f958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802f95c:	69db      	ldr	r3, [r3, #28]
 802f95e:	4313      	orrs	r3, r2
 802f960:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 802f964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802f968:	681b      	ldr	r3, [r3, #0]
 802f96a:	68db      	ldr	r3, [r3, #12]
 802f96c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 802f970:	f021 010c 	bic.w	r1, r1, #12
 802f974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802f978:	681a      	ldr	r2, [r3, #0]
 802f97a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 802f97e:	430b      	orrs	r3, r1
 802f980:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802f982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802f986:	681b      	ldr	r3, [r3, #0]
 802f988:	695b      	ldr	r3, [r3, #20]
 802f98a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 802f98e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802f992:	6999      	ldr	r1, [r3, #24]
 802f994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802f998:	681a      	ldr	r2, [r3, #0]
 802f99a:	ea40 0301 	orr.w	r3, r0, r1
 802f99e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802f9a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802f9a4:	681a      	ldr	r2, [r3, #0]
 802f9a6:	4b8f      	ldr	r3, [pc, #572]	@ (802fbe4 <UART_SetConfig+0x2cc>)
 802f9a8:	429a      	cmp	r2, r3
 802f9aa:	d005      	beq.n	802f9b8 <UART_SetConfig+0xa0>
 802f9ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802f9b0:	681a      	ldr	r2, [r3, #0]
 802f9b2:	4b8d      	ldr	r3, [pc, #564]	@ (802fbe8 <UART_SetConfig+0x2d0>)
 802f9b4:	429a      	cmp	r2, r3
 802f9b6:	d104      	bne.n	802f9c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802f9b8:	f7fe fb3a 	bl	802e030 <HAL_RCC_GetPCLK2Freq>
 802f9bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 802f9c0:	e003      	b.n	802f9ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802f9c2:	f7fe fb21 	bl	802e008 <HAL_RCC_GetPCLK1Freq>
 802f9c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802f9ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802f9ce:	69db      	ldr	r3, [r3, #28]
 802f9d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802f9d4:	f040 810c 	bne.w	802fbf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802f9d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802f9dc:	2200      	movs	r2, #0
 802f9de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 802f9e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 802f9e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 802f9ea:	4622      	mov	r2, r4
 802f9ec:	462b      	mov	r3, r5
 802f9ee:	1891      	adds	r1, r2, r2
 802f9f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 802f9f2:	415b      	adcs	r3, r3
 802f9f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 802f9f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 802f9fa:	4621      	mov	r1, r4
 802f9fc:	eb12 0801 	adds.w	r8, r2, r1
 802fa00:	4629      	mov	r1, r5
 802fa02:	eb43 0901 	adc.w	r9, r3, r1
 802fa06:	f04f 0200 	mov.w	r2, #0
 802fa0a:	f04f 0300 	mov.w	r3, #0
 802fa0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802fa12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802fa16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802fa1a:	4690      	mov	r8, r2
 802fa1c:	4699      	mov	r9, r3
 802fa1e:	4623      	mov	r3, r4
 802fa20:	eb18 0303 	adds.w	r3, r8, r3
 802fa24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 802fa28:	462b      	mov	r3, r5
 802fa2a:	eb49 0303 	adc.w	r3, r9, r3
 802fa2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 802fa32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802fa36:	685b      	ldr	r3, [r3, #4]
 802fa38:	2200      	movs	r2, #0
 802fa3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 802fa3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 802fa42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 802fa46:	460b      	mov	r3, r1
 802fa48:	18db      	adds	r3, r3, r3
 802fa4a:	653b      	str	r3, [r7, #80]	@ 0x50
 802fa4c:	4613      	mov	r3, r2
 802fa4e:	eb42 0303 	adc.w	r3, r2, r3
 802fa52:	657b      	str	r3, [r7, #84]	@ 0x54
 802fa54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 802fa58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 802fa5c:	f7f1 fab6 	bl	8020fcc <__aeabi_uldivmod>
 802fa60:	4602      	mov	r2, r0
 802fa62:	460b      	mov	r3, r1
 802fa64:	4b61      	ldr	r3, [pc, #388]	@ (802fbec <UART_SetConfig+0x2d4>)
 802fa66:	fba3 2302 	umull	r2, r3, r3, r2
 802fa6a:	095b      	lsrs	r3, r3, #5
 802fa6c:	011c      	lsls	r4, r3, #4
 802fa6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802fa72:	2200      	movs	r2, #0
 802fa74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 802fa78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 802fa7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 802fa80:	4642      	mov	r2, r8
 802fa82:	464b      	mov	r3, r9
 802fa84:	1891      	adds	r1, r2, r2
 802fa86:	64b9      	str	r1, [r7, #72]	@ 0x48
 802fa88:	415b      	adcs	r3, r3
 802fa8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802fa8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 802fa90:	4641      	mov	r1, r8
 802fa92:	eb12 0a01 	adds.w	sl, r2, r1
 802fa96:	4649      	mov	r1, r9
 802fa98:	eb43 0b01 	adc.w	fp, r3, r1
 802fa9c:	f04f 0200 	mov.w	r2, #0
 802faa0:	f04f 0300 	mov.w	r3, #0
 802faa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802faa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 802faac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802fab0:	4692      	mov	sl, r2
 802fab2:	469b      	mov	fp, r3
 802fab4:	4643      	mov	r3, r8
 802fab6:	eb1a 0303 	adds.w	r3, sl, r3
 802faba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 802fabe:	464b      	mov	r3, r9
 802fac0:	eb4b 0303 	adc.w	r3, fp, r3
 802fac4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 802fac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802facc:	685b      	ldr	r3, [r3, #4]
 802face:	2200      	movs	r2, #0
 802fad0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 802fad4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 802fad8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 802fadc:	460b      	mov	r3, r1
 802fade:	18db      	adds	r3, r3, r3
 802fae0:	643b      	str	r3, [r7, #64]	@ 0x40
 802fae2:	4613      	mov	r3, r2
 802fae4:	eb42 0303 	adc.w	r3, r2, r3
 802fae8:	647b      	str	r3, [r7, #68]	@ 0x44
 802faea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 802faee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 802faf2:	f7f1 fa6b 	bl	8020fcc <__aeabi_uldivmod>
 802faf6:	4602      	mov	r2, r0
 802faf8:	460b      	mov	r3, r1
 802fafa:	4611      	mov	r1, r2
 802fafc:	4b3b      	ldr	r3, [pc, #236]	@ (802fbec <UART_SetConfig+0x2d4>)
 802fafe:	fba3 2301 	umull	r2, r3, r3, r1
 802fb02:	095b      	lsrs	r3, r3, #5
 802fb04:	2264      	movs	r2, #100	@ 0x64
 802fb06:	fb02 f303 	mul.w	r3, r2, r3
 802fb0a:	1acb      	subs	r3, r1, r3
 802fb0c:	00db      	lsls	r3, r3, #3
 802fb0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 802fb12:	4b36      	ldr	r3, [pc, #216]	@ (802fbec <UART_SetConfig+0x2d4>)
 802fb14:	fba3 2302 	umull	r2, r3, r3, r2
 802fb18:	095b      	lsrs	r3, r3, #5
 802fb1a:	005b      	lsls	r3, r3, #1
 802fb1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 802fb20:	441c      	add	r4, r3
 802fb22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802fb26:	2200      	movs	r2, #0
 802fb28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 802fb2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 802fb30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 802fb34:	4642      	mov	r2, r8
 802fb36:	464b      	mov	r3, r9
 802fb38:	1891      	adds	r1, r2, r2
 802fb3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 802fb3c:	415b      	adcs	r3, r3
 802fb3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802fb40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 802fb44:	4641      	mov	r1, r8
 802fb46:	1851      	adds	r1, r2, r1
 802fb48:	6339      	str	r1, [r7, #48]	@ 0x30
 802fb4a:	4649      	mov	r1, r9
 802fb4c:	414b      	adcs	r3, r1
 802fb4e:	637b      	str	r3, [r7, #52]	@ 0x34
 802fb50:	f04f 0200 	mov.w	r2, #0
 802fb54:	f04f 0300 	mov.w	r3, #0
 802fb58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 802fb5c:	4659      	mov	r1, fp
 802fb5e:	00cb      	lsls	r3, r1, #3
 802fb60:	4651      	mov	r1, sl
 802fb62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802fb66:	4651      	mov	r1, sl
 802fb68:	00ca      	lsls	r2, r1, #3
 802fb6a:	4610      	mov	r0, r2
 802fb6c:	4619      	mov	r1, r3
 802fb6e:	4603      	mov	r3, r0
 802fb70:	4642      	mov	r2, r8
 802fb72:	189b      	adds	r3, r3, r2
 802fb74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 802fb78:	464b      	mov	r3, r9
 802fb7a:	460a      	mov	r2, r1
 802fb7c:	eb42 0303 	adc.w	r3, r2, r3
 802fb80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 802fb84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802fb88:	685b      	ldr	r3, [r3, #4]
 802fb8a:	2200      	movs	r2, #0
 802fb8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 802fb90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 802fb94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 802fb98:	460b      	mov	r3, r1
 802fb9a:	18db      	adds	r3, r3, r3
 802fb9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fb9e:	4613      	mov	r3, r2
 802fba0:	eb42 0303 	adc.w	r3, r2, r3
 802fba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fba6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 802fbaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 802fbae:	f7f1 fa0d 	bl	8020fcc <__aeabi_uldivmod>
 802fbb2:	4602      	mov	r2, r0
 802fbb4:	460b      	mov	r3, r1
 802fbb6:	4b0d      	ldr	r3, [pc, #52]	@ (802fbec <UART_SetConfig+0x2d4>)
 802fbb8:	fba3 1302 	umull	r1, r3, r3, r2
 802fbbc:	095b      	lsrs	r3, r3, #5
 802fbbe:	2164      	movs	r1, #100	@ 0x64
 802fbc0:	fb01 f303 	mul.w	r3, r1, r3
 802fbc4:	1ad3      	subs	r3, r2, r3
 802fbc6:	00db      	lsls	r3, r3, #3
 802fbc8:	3332      	adds	r3, #50	@ 0x32
 802fbca:	4a08      	ldr	r2, [pc, #32]	@ (802fbec <UART_SetConfig+0x2d4>)
 802fbcc:	fba2 2303 	umull	r2, r3, r2, r3
 802fbd0:	095b      	lsrs	r3, r3, #5
 802fbd2:	f003 0207 	and.w	r2, r3, #7
 802fbd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802fbda:	681b      	ldr	r3, [r3, #0]
 802fbdc:	4422      	add	r2, r4
 802fbde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 802fbe0:	e106      	b.n	802fdf0 <UART_SetConfig+0x4d8>
 802fbe2:	bf00      	nop
 802fbe4:	40011000 	.word	0x40011000
 802fbe8:	40011400 	.word	0x40011400
 802fbec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802fbf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802fbf4:	2200      	movs	r2, #0
 802fbf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 802fbfa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 802fbfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 802fc02:	4642      	mov	r2, r8
 802fc04:	464b      	mov	r3, r9
 802fc06:	1891      	adds	r1, r2, r2
 802fc08:	6239      	str	r1, [r7, #32]
 802fc0a:	415b      	adcs	r3, r3
 802fc0c:	627b      	str	r3, [r7, #36]	@ 0x24
 802fc0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802fc12:	4641      	mov	r1, r8
 802fc14:	1854      	adds	r4, r2, r1
 802fc16:	4649      	mov	r1, r9
 802fc18:	eb43 0501 	adc.w	r5, r3, r1
 802fc1c:	f04f 0200 	mov.w	r2, #0
 802fc20:	f04f 0300 	mov.w	r3, #0
 802fc24:	00eb      	lsls	r3, r5, #3
 802fc26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802fc2a:	00e2      	lsls	r2, r4, #3
 802fc2c:	4614      	mov	r4, r2
 802fc2e:	461d      	mov	r5, r3
 802fc30:	4643      	mov	r3, r8
 802fc32:	18e3      	adds	r3, r4, r3
 802fc34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 802fc38:	464b      	mov	r3, r9
 802fc3a:	eb45 0303 	adc.w	r3, r5, r3
 802fc3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 802fc42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802fc46:	685b      	ldr	r3, [r3, #4]
 802fc48:	2200      	movs	r2, #0
 802fc4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 802fc4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 802fc52:	f04f 0200 	mov.w	r2, #0
 802fc56:	f04f 0300 	mov.w	r3, #0
 802fc5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 802fc5e:	4629      	mov	r1, r5
 802fc60:	008b      	lsls	r3, r1, #2
 802fc62:	4621      	mov	r1, r4
 802fc64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802fc68:	4621      	mov	r1, r4
 802fc6a:	008a      	lsls	r2, r1, #2
 802fc6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 802fc70:	f7f1 f9ac 	bl	8020fcc <__aeabi_uldivmod>
 802fc74:	4602      	mov	r2, r0
 802fc76:	460b      	mov	r3, r1
 802fc78:	4b60      	ldr	r3, [pc, #384]	@ (802fdfc <UART_SetConfig+0x4e4>)
 802fc7a:	fba3 2302 	umull	r2, r3, r3, r2
 802fc7e:	095b      	lsrs	r3, r3, #5
 802fc80:	011c      	lsls	r4, r3, #4
 802fc82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802fc86:	2200      	movs	r2, #0
 802fc88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 802fc8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 802fc90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 802fc94:	4642      	mov	r2, r8
 802fc96:	464b      	mov	r3, r9
 802fc98:	1891      	adds	r1, r2, r2
 802fc9a:	61b9      	str	r1, [r7, #24]
 802fc9c:	415b      	adcs	r3, r3
 802fc9e:	61fb      	str	r3, [r7, #28]
 802fca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802fca4:	4641      	mov	r1, r8
 802fca6:	1851      	adds	r1, r2, r1
 802fca8:	6139      	str	r1, [r7, #16]
 802fcaa:	4649      	mov	r1, r9
 802fcac:	414b      	adcs	r3, r1
 802fcae:	617b      	str	r3, [r7, #20]
 802fcb0:	f04f 0200 	mov.w	r2, #0
 802fcb4:	f04f 0300 	mov.w	r3, #0
 802fcb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802fcbc:	4659      	mov	r1, fp
 802fcbe:	00cb      	lsls	r3, r1, #3
 802fcc0:	4651      	mov	r1, sl
 802fcc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802fcc6:	4651      	mov	r1, sl
 802fcc8:	00ca      	lsls	r2, r1, #3
 802fcca:	4610      	mov	r0, r2
 802fccc:	4619      	mov	r1, r3
 802fcce:	4603      	mov	r3, r0
 802fcd0:	4642      	mov	r2, r8
 802fcd2:	189b      	adds	r3, r3, r2
 802fcd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 802fcd8:	464b      	mov	r3, r9
 802fcda:	460a      	mov	r2, r1
 802fcdc:	eb42 0303 	adc.w	r3, r2, r3
 802fce0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 802fce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802fce8:	685b      	ldr	r3, [r3, #4]
 802fcea:	2200      	movs	r2, #0
 802fcec:	67bb      	str	r3, [r7, #120]	@ 0x78
 802fcee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 802fcf0:	f04f 0200 	mov.w	r2, #0
 802fcf4:	f04f 0300 	mov.w	r3, #0
 802fcf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 802fcfc:	4649      	mov	r1, r9
 802fcfe:	008b      	lsls	r3, r1, #2
 802fd00:	4641      	mov	r1, r8
 802fd02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802fd06:	4641      	mov	r1, r8
 802fd08:	008a      	lsls	r2, r1, #2
 802fd0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 802fd0e:	f7f1 f95d 	bl	8020fcc <__aeabi_uldivmod>
 802fd12:	4602      	mov	r2, r0
 802fd14:	460b      	mov	r3, r1
 802fd16:	4611      	mov	r1, r2
 802fd18:	4b38      	ldr	r3, [pc, #224]	@ (802fdfc <UART_SetConfig+0x4e4>)
 802fd1a:	fba3 2301 	umull	r2, r3, r3, r1
 802fd1e:	095b      	lsrs	r3, r3, #5
 802fd20:	2264      	movs	r2, #100	@ 0x64
 802fd22:	fb02 f303 	mul.w	r3, r2, r3
 802fd26:	1acb      	subs	r3, r1, r3
 802fd28:	011b      	lsls	r3, r3, #4
 802fd2a:	3332      	adds	r3, #50	@ 0x32
 802fd2c:	4a33      	ldr	r2, [pc, #204]	@ (802fdfc <UART_SetConfig+0x4e4>)
 802fd2e:	fba2 2303 	umull	r2, r3, r2, r3
 802fd32:	095b      	lsrs	r3, r3, #5
 802fd34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 802fd38:	441c      	add	r4, r3
 802fd3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802fd3e:	2200      	movs	r2, #0
 802fd40:	673b      	str	r3, [r7, #112]	@ 0x70
 802fd42:	677a      	str	r2, [r7, #116]	@ 0x74
 802fd44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 802fd48:	4642      	mov	r2, r8
 802fd4a:	464b      	mov	r3, r9
 802fd4c:	1891      	adds	r1, r2, r2
 802fd4e:	60b9      	str	r1, [r7, #8]
 802fd50:	415b      	adcs	r3, r3
 802fd52:	60fb      	str	r3, [r7, #12]
 802fd54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802fd58:	4641      	mov	r1, r8
 802fd5a:	1851      	adds	r1, r2, r1
 802fd5c:	6039      	str	r1, [r7, #0]
 802fd5e:	4649      	mov	r1, r9
 802fd60:	414b      	adcs	r3, r1
 802fd62:	607b      	str	r3, [r7, #4]
 802fd64:	f04f 0200 	mov.w	r2, #0
 802fd68:	f04f 0300 	mov.w	r3, #0
 802fd6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802fd70:	4659      	mov	r1, fp
 802fd72:	00cb      	lsls	r3, r1, #3
 802fd74:	4651      	mov	r1, sl
 802fd76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802fd7a:	4651      	mov	r1, sl
 802fd7c:	00ca      	lsls	r2, r1, #3
 802fd7e:	4610      	mov	r0, r2
 802fd80:	4619      	mov	r1, r3
 802fd82:	4603      	mov	r3, r0
 802fd84:	4642      	mov	r2, r8
 802fd86:	189b      	adds	r3, r3, r2
 802fd88:	66bb      	str	r3, [r7, #104]	@ 0x68
 802fd8a:	464b      	mov	r3, r9
 802fd8c:	460a      	mov	r2, r1
 802fd8e:	eb42 0303 	adc.w	r3, r2, r3
 802fd92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 802fd94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802fd98:	685b      	ldr	r3, [r3, #4]
 802fd9a:	2200      	movs	r2, #0
 802fd9c:	663b      	str	r3, [r7, #96]	@ 0x60
 802fd9e:	667a      	str	r2, [r7, #100]	@ 0x64
 802fda0:	f04f 0200 	mov.w	r2, #0
 802fda4:	f04f 0300 	mov.w	r3, #0
 802fda8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 802fdac:	4649      	mov	r1, r9
 802fdae:	008b      	lsls	r3, r1, #2
 802fdb0:	4641      	mov	r1, r8
 802fdb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802fdb6:	4641      	mov	r1, r8
 802fdb8:	008a      	lsls	r2, r1, #2
 802fdba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 802fdbe:	f7f1 f905 	bl	8020fcc <__aeabi_uldivmod>
 802fdc2:	4602      	mov	r2, r0
 802fdc4:	460b      	mov	r3, r1
 802fdc6:	4b0d      	ldr	r3, [pc, #52]	@ (802fdfc <UART_SetConfig+0x4e4>)
 802fdc8:	fba3 1302 	umull	r1, r3, r3, r2
 802fdcc:	095b      	lsrs	r3, r3, #5
 802fdce:	2164      	movs	r1, #100	@ 0x64
 802fdd0:	fb01 f303 	mul.w	r3, r1, r3
 802fdd4:	1ad3      	subs	r3, r2, r3
 802fdd6:	011b      	lsls	r3, r3, #4
 802fdd8:	3332      	adds	r3, #50	@ 0x32
 802fdda:	4a08      	ldr	r2, [pc, #32]	@ (802fdfc <UART_SetConfig+0x4e4>)
 802fddc:	fba2 2303 	umull	r2, r3, r2, r3
 802fde0:	095b      	lsrs	r3, r3, #5
 802fde2:	f003 020f 	and.w	r2, r3, #15
 802fde6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802fdea:	681b      	ldr	r3, [r3, #0]
 802fdec:	4422      	add	r2, r4
 802fdee:	609a      	str	r2, [r3, #8]
}
 802fdf0:	bf00      	nop
 802fdf2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 802fdf6:	46bd      	mov	sp, r7
 802fdf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802fdfc:	51eb851f 	.word	0x51eb851f

0802fe00 <malloc>:
 802fe00:	4b02      	ldr	r3, [pc, #8]	@ (802fe0c <malloc+0xc>)
 802fe02:	4601      	mov	r1, r0
 802fe04:	6818      	ldr	r0, [r3, #0]
 802fe06:	f000 b82d 	b.w	802fe64 <_malloc_r>
 802fe0a:	bf00      	nop
 802fe0c:	2000008c 	.word	0x2000008c

0802fe10 <free>:
 802fe10:	4b02      	ldr	r3, [pc, #8]	@ (802fe1c <free+0xc>)
 802fe12:	4601      	mov	r1, r0
 802fe14:	6818      	ldr	r0, [r3, #0]
 802fe16:	f000 bb9b 	b.w	8030550 <_free_r>
 802fe1a:	bf00      	nop
 802fe1c:	2000008c 	.word	0x2000008c

0802fe20 <sbrk_aligned>:
 802fe20:	b570      	push	{r4, r5, r6, lr}
 802fe22:	4e0f      	ldr	r6, [pc, #60]	@ (802fe60 <sbrk_aligned+0x40>)
 802fe24:	460c      	mov	r4, r1
 802fe26:	6831      	ldr	r1, [r6, #0]
 802fe28:	4605      	mov	r5, r0
 802fe2a:	b911      	cbnz	r1, 802fe32 <sbrk_aligned+0x12>
 802fe2c:	f000 fb2a 	bl	8030484 <_sbrk_r>
 802fe30:	6030      	str	r0, [r6, #0]
 802fe32:	4621      	mov	r1, r4
 802fe34:	4628      	mov	r0, r5
 802fe36:	f000 fb25 	bl	8030484 <_sbrk_r>
 802fe3a:	1c43      	adds	r3, r0, #1
 802fe3c:	d103      	bne.n	802fe46 <sbrk_aligned+0x26>
 802fe3e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802fe42:	4620      	mov	r0, r4
 802fe44:	bd70      	pop	{r4, r5, r6, pc}
 802fe46:	1cc4      	adds	r4, r0, #3
 802fe48:	f024 0403 	bic.w	r4, r4, #3
 802fe4c:	42a0      	cmp	r0, r4
 802fe4e:	d0f8      	beq.n	802fe42 <sbrk_aligned+0x22>
 802fe50:	1a21      	subs	r1, r4, r0
 802fe52:	4628      	mov	r0, r5
 802fe54:	f000 fb16 	bl	8030484 <_sbrk_r>
 802fe58:	3001      	adds	r0, #1
 802fe5a:	d1f2      	bne.n	802fe42 <sbrk_aligned+0x22>
 802fe5c:	e7ef      	b.n	802fe3e <sbrk_aligned+0x1e>
 802fe5e:	bf00      	nop
 802fe60:	20001598 	.word	0x20001598

0802fe64 <_malloc_r>:
 802fe64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802fe68:	1ccd      	adds	r5, r1, #3
 802fe6a:	f025 0503 	bic.w	r5, r5, #3
 802fe6e:	3508      	adds	r5, #8
 802fe70:	2d0c      	cmp	r5, #12
 802fe72:	bf38      	it	cc
 802fe74:	250c      	movcc	r5, #12
 802fe76:	2d00      	cmp	r5, #0
 802fe78:	4606      	mov	r6, r0
 802fe7a:	db01      	blt.n	802fe80 <_malloc_r+0x1c>
 802fe7c:	42a9      	cmp	r1, r5
 802fe7e:	d904      	bls.n	802fe8a <_malloc_r+0x26>
 802fe80:	230c      	movs	r3, #12
 802fe82:	6033      	str	r3, [r6, #0]
 802fe84:	2000      	movs	r0, #0
 802fe86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802fe8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802ff60 <_malloc_r+0xfc>
 802fe8e:	f000 f869 	bl	802ff64 <__malloc_lock>
 802fe92:	f8d8 3000 	ldr.w	r3, [r8]
 802fe96:	461c      	mov	r4, r3
 802fe98:	bb44      	cbnz	r4, 802feec <_malloc_r+0x88>
 802fe9a:	4629      	mov	r1, r5
 802fe9c:	4630      	mov	r0, r6
 802fe9e:	f7ff ffbf 	bl	802fe20 <sbrk_aligned>
 802fea2:	1c43      	adds	r3, r0, #1
 802fea4:	4604      	mov	r4, r0
 802fea6:	d158      	bne.n	802ff5a <_malloc_r+0xf6>
 802fea8:	f8d8 4000 	ldr.w	r4, [r8]
 802feac:	4627      	mov	r7, r4
 802feae:	2f00      	cmp	r7, #0
 802feb0:	d143      	bne.n	802ff3a <_malloc_r+0xd6>
 802feb2:	2c00      	cmp	r4, #0
 802feb4:	d04b      	beq.n	802ff4e <_malloc_r+0xea>
 802feb6:	6823      	ldr	r3, [r4, #0]
 802feb8:	4639      	mov	r1, r7
 802feba:	4630      	mov	r0, r6
 802febc:	eb04 0903 	add.w	r9, r4, r3
 802fec0:	f000 fae0 	bl	8030484 <_sbrk_r>
 802fec4:	4581      	cmp	r9, r0
 802fec6:	d142      	bne.n	802ff4e <_malloc_r+0xea>
 802fec8:	6821      	ldr	r1, [r4, #0]
 802feca:	1a6d      	subs	r5, r5, r1
 802fecc:	4629      	mov	r1, r5
 802fece:	4630      	mov	r0, r6
 802fed0:	f7ff ffa6 	bl	802fe20 <sbrk_aligned>
 802fed4:	3001      	adds	r0, #1
 802fed6:	d03a      	beq.n	802ff4e <_malloc_r+0xea>
 802fed8:	6823      	ldr	r3, [r4, #0]
 802feda:	442b      	add	r3, r5
 802fedc:	6023      	str	r3, [r4, #0]
 802fede:	f8d8 3000 	ldr.w	r3, [r8]
 802fee2:	685a      	ldr	r2, [r3, #4]
 802fee4:	bb62      	cbnz	r2, 802ff40 <_malloc_r+0xdc>
 802fee6:	f8c8 7000 	str.w	r7, [r8]
 802feea:	e00f      	b.n	802ff0c <_malloc_r+0xa8>
 802feec:	6822      	ldr	r2, [r4, #0]
 802feee:	1b52      	subs	r2, r2, r5
 802fef0:	d420      	bmi.n	802ff34 <_malloc_r+0xd0>
 802fef2:	2a0b      	cmp	r2, #11
 802fef4:	d917      	bls.n	802ff26 <_malloc_r+0xc2>
 802fef6:	1961      	adds	r1, r4, r5
 802fef8:	42a3      	cmp	r3, r4
 802fefa:	6025      	str	r5, [r4, #0]
 802fefc:	bf18      	it	ne
 802fefe:	6059      	strne	r1, [r3, #4]
 802ff00:	6863      	ldr	r3, [r4, #4]
 802ff02:	bf08      	it	eq
 802ff04:	f8c8 1000 	streq.w	r1, [r8]
 802ff08:	5162      	str	r2, [r4, r5]
 802ff0a:	604b      	str	r3, [r1, #4]
 802ff0c:	4630      	mov	r0, r6
 802ff0e:	f000 f82f 	bl	802ff70 <__malloc_unlock>
 802ff12:	f104 000b 	add.w	r0, r4, #11
 802ff16:	1d23      	adds	r3, r4, #4
 802ff18:	f020 0007 	bic.w	r0, r0, #7
 802ff1c:	1ac2      	subs	r2, r0, r3
 802ff1e:	bf1c      	itt	ne
 802ff20:	1a1b      	subne	r3, r3, r0
 802ff22:	50a3      	strne	r3, [r4, r2]
 802ff24:	e7af      	b.n	802fe86 <_malloc_r+0x22>
 802ff26:	6862      	ldr	r2, [r4, #4]
 802ff28:	42a3      	cmp	r3, r4
 802ff2a:	bf0c      	ite	eq
 802ff2c:	f8c8 2000 	streq.w	r2, [r8]
 802ff30:	605a      	strne	r2, [r3, #4]
 802ff32:	e7eb      	b.n	802ff0c <_malloc_r+0xa8>
 802ff34:	4623      	mov	r3, r4
 802ff36:	6864      	ldr	r4, [r4, #4]
 802ff38:	e7ae      	b.n	802fe98 <_malloc_r+0x34>
 802ff3a:	463c      	mov	r4, r7
 802ff3c:	687f      	ldr	r7, [r7, #4]
 802ff3e:	e7b6      	b.n	802feae <_malloc_r+0x4a>
 802ff40:	461a      	mov	r2, r3
 802ff42:	685b      	ldr	r3, [r3, #4]
 802ff44:	42a3      	cmp	r3, r4
 802ff46:	d1fb      	bne.n	802ff40 <_malloc_r+0xdc>
 802ff48:	2300      	movs	r3, #0
 802ff4a:	6053      	str	r3, [r2, #4]
 802ff4c:	e7de      	b.n	802ff0c <_malloc_r+0xa8>
 802ff4e:	230c      	movs	r3, #12
 802ff50:	6033      	str	r3, [r6, #0]
 802ff52:	4630      	mov	r0, r6
 802ff54:	f000 f80c 	bl	802ff70 <__malloc_unlock>
 802ff58:	e794      	b.n	802fe84 <_malloc_r+0x20>
 802ff5a:	6005      	str	r5, [r0, #0]
 802ff5c:	e7d6      	b.n	802ff0c <_malloc_r+0xa8>
 802ff5e:	bf00      	nop
 802ff60:	2000159c 	.word	0x2000159c

0802ff64 <__malloc_lock>:
 802ff64:	4801      	ldr	r0, [pc, #4]	@ (802ff6c <__malloc_lock+0x8>)
 802ff66:	f000 bada 	b.w	803051e <__retarget_lock_acquire_recursive>
 802ff6a:	bf00      	nop
 802ff6c:	200016e0 	.word	0x200016e0

0802ff70 <__malloc_unlock>:
 802ff70:	4801      	ldr	r0, [pc, #4]	@ (802ff78 <__malloc_unlock+0x8>)
 802ff72:	f000 bad5 	b.w	8030520 <__retarget_lock_release_recursive>
 802ff76:	bf00      	nop
 802ff78:	200016e0 	.word	0x200016e0

0802ff7c <std>:
 802ff7c:	2300      	movs	r3, #0
 802ff7e:	b510      	push	{r4, lr}
 802ff80:	4604      	mov	r4, r0
 802ff82:	e9c0 3300 	strd	r3, r3, [r0]
 802ff86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802ff8a:	6083      	str	r3, [r0, #8]
 802ff8c:	8181      	strh	r1, [r0, #12]
 802ff8e:	6643      	str	r3, [r0, #100]	@ 0x64
 802ff90:	81c2      	strh	r2, [r0, #14]
 802ff92:	6183      	str	r3, [r0, #24]
 802ff94:	4619      	mov	r1, r3
 802ff96:	2208      	movs	r2, #8
 802ff98:	305c      	adds	r0, #92	@ 0x5c
 802ff9a:	f000 fa05 	bl	80303a8 <memset>
 802ff9e:	4b0d      	ldr	r3, [pc, #52]	@ (802ffd4 <std+0x58>)
 802ffa0:	6263      	str	r3, [r4, #36]	@ 0x24
 802ffa2:	4b0d      	ldr	r3, [pc, #52]	@ (802ffd8 <std+0x5c>)
 802ffa4:	62a3      	str	r3, [r4, #40]	@ 0x28
 802ffa6:	4b0d      	ldr	r3, [pc, #52]	@ (802ffdc <std+0x60>)
 802ffa8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802ffaa:	4b0d      	ldr	r3, [pc, #52]	@ (802ffe0 <std+0x64>)
 802ffac:	6323      	str	r3, [r4, #48]	@ 0x30
 802ffae:	4b0d      	ldr	r3, [pc, #52]	@ (802ffe4 <std+0x68>)
 802ffb0:	6224      	str	r4, [r4, #32]
 802ffb2:	429c      	cmp	r4, r3
 802ffb4:	d006      	beq.n	802ffc4 <std+0x48>
 802ffb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802ffba:	4294      	cmp	r4, r2
 802ffbc:	d002      	beq.n	802ffc4 <std+0x48>
 802ffbe:	33d0      	adds	r3, #208	@ 0xd0
 802ffc0:	429c      	cmp	r4, r3
 802ffc2:	d105      	bne.n	802ffd0 <std+0x54>
 802ffc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802ffc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ffcc:	f000 baa6 	b.w	803051c <__retarget_lock_init_recursive>
 802ffd0:	bd10      	pop	{r4, pc}
 802ffd2:	bf00      	nop
 802ffd4:	080301d9 	.word	0x080301d9
 802ffd8:	080301fb 	.word	0x080301fb
 802ffdc:	08030233 	.word	0x08030233
 802ffe0:	08030257 	.word	0x08030257
 802ffe4:	200015a0 	.word	0x200015a0

0802ffe8 <stdio_exit_handler>:
 802ffe8:	4a02      	ldr	r2, [pc, #8]	@ (802fff4 <stdio_exit_handler+0xc>)
 802ffea:	4903      	ldr	r1, [pc, #12]	@ (802fff8 <stdio_exit_handler+0x10>)
 802ffec:	4803      	ldr	r0, [pc, #12]	@ (802fffc <stdio_exit_handler+0x14>)
 802ffee:	f000 b87b 	b.w	80300e8 <_fwalk_sglue>
 802fff2:	bf00      	nop
 802fff4:	20000080 	.word	0x20000080
 802fff8:	08030c89 	.word	0x08030c89
 802fffc:	20000090 	.word	0x20000090

08030000 <cleanup_stdio>:
 8030000:	6841      	ldr	r1, [r0, #4]
 8030002:	4b0c      	ldr	r3, [pc, #48]	@ (8030034 <cleanup_stdio+0x34>)
 8030004:	4299      	cmp	r1, r3
 8030006:	b510      	push	{r4, lr}
 8030008:	4604      	mov	r4, r0
 803000a:	d001      	beq.n	8030010 <cleanup_stdio+0x10>
 803000c:	f000 fe3c 	bl	8030c88 <_fflush_r>
 8030010:	68a1      	ldr	r1, [r4, #8]
 8030012:	4b09      	ldr	r3, [pc, #36]	@ (8030038 <cleanup_stdio+0x38>)
 8030014:	4299      	cmp	r1, r3
 8030016:	d002      	beq.n	803001e <cleanup_stdio+0x1e>
 8030018:	4620      	mov	r0, r4
 803001a:	f000 fe35 	bl	8030c88 <_fflush_r>
 803001e:	68e1      	ldr	r1, [r4, #12]
 8030020:	4b06      	ldr	r3, [pc, #24]	@ (803003c <cleanup_stdio+0x3c>)
 8030022:	4299      	cmp	r1, r3
 8030024:	d004      	beq.n	8030030 <cleanup_stdio+0x30>
 8030026:	4620      	mov	r0, r4
 8030028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803002c:	f000 be2c 	b.w	8030c88 <_fflush_r>
 8030030:	bd10      	pop	{r4, pc}
 8030032:	bf00      	nop
 8030034:	200015a0 	.word	0x200015a0
 8030038:	20001608 	.word	0x20001608
 803003c:	20001670 	.word	0x20001670

08030040 <global_stdio_init.part.0>:
 8030040:	b510      	push	{r4, lr}
 8030042:	4b0b      	ldr	r3, [pc, #44]	@ (8030070 <global_stdio_init.part.0+0x30>)
 8030044:	4c0b      	ldr	r4, [pc, #44]	@ (8030074 <global_stdio_init.part.0+0x34>)
 8030046:	4a0c      	ldr	r2, [pc, #48]	@ (8030078 <global_stdio_init.part.0+0x38>)
 8030048:	601a      	str	r2, [r3, #0]
 803004a:	4620      	mov	r0, r4
 803004c:	2200      	movs	r2, #0
 803004e:	2104      	movs	r1, #4
 8030050:	f7ff ff94 	bl	802ff7c <std>
 8030054:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8030058:	2201      	movs	r2, #1
 803005a:	2109      	movs	r1, #9
 803005c:	f7ff ff8e 	bl	802ff7c <std>
 8030060:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8030064:	2202      	movs	r2, #2
 8030066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803006a:	2112      	movs	r1, #18
 803006c:	f7ff bf86 	b.w	802ff7c <std>
 8030070:	200016d8 	.word	0x200016d8
 8030074:	200015a0 	.word	0x200015a0
 8030078:	0802ffe9 	.word	0x0802ffe9

0803007c <__sfp_lock_acquire>:
 803007c:	4801      	ldr	r0, [pc, #4]	@ (8030084 <__sfp_lock_acquire+0x8>)
 803007e:	f000 ba4e 	b.w	803051e <__retarget_lock_acquire_recursive>
 8030082:	bf00      	nop
 8030084:	200016e1 	.word	0x200016e1

08030088 <__sfp_lock_release>:
 8030088:	4801      	ldr	r0, [pc, #4]	@ (8030090 <__sfp_lock_release+0x8>)
 803008a:	f000 ba49 	b.w	8030520 <__retarget_lock_release_recursive>
 803008e:	bf00      	nop
 8030090:	200016e1 	.word	0x200016e1

08030094 <__sinit>:
 8030094:	b510      	push	{r4, lr}
 8030096:	4604      	mov	r4, r0
 8030098:	f7ff fff0 	bl	803007c <__sfp_lock_acquire>
 803009c:	6a23      	ldr	r3, [r4, #32]
 803009e:	b11b      	cbz	r3, 80300a8 <__sinit+0x14>
 80300a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80300a4:	f7ff bff0 	b.w	8030088 <__sfp_lock_release>
 80300a8:	4b04      	ldr	r3, [pc, #16]	@ (80300bc <__sinit+0x28>)
 80300aa:	6223      	str	r3, [r4, #32]
 80300ac:	4b04      	ldr	r3, [pc, #16]	@ (80300c0 <__sinit+0x2c>)
 80300ae:	681b      	ldr	r3, [r3, #0]
 80300b0:	2b00      	cmp	r3, #0
 80300b2:	d1f5      	bne.n	80300a0 <__sinit+0xc>
 80300b4:	f7ff ffc4 	bl	8030040 <global_stdio_init.part.0>
 80300b8:	e7f2      	b.n	80300a0 <__sinit+0xc>
 80300ba:	bf00      	nop
 80300bc:	08030001 	.word	0x08030001
 80300c0:	200016d8 	.word	0x200016d8

080300c4 <fiprintf>:
 80300c4:	b40e      	push	{r1, r2, r3}
 80300c6:	b503      	push	{r0, r1, lr}
 80300c8:	4601      	mov	r1, r0
 80300ca:	ab03      	add	r3, sp, #12
 80300cc:	4805      	ldr	r0, [pc, #20]	@ (80300e4 <fiprintf+0x20>)
 80300ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80300d2:	6800      	ldr	r0, [r0, #0]
 80300d4:	9301      	str	r3, [sp, #4]
 80300d6:	f000 faaf 	bl	8030638 <_vfiprintf_r>
 80300da:	b002      	add	sp, #8
 80300dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80300e0:	b003      	add	sp, #12
 80300e2:	4770      	bx	lr
 80300e4:	2000008c 	.word	0x2000008c

080300e8 <_fwalk_sglue>:
 80300e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80300ec:	4607      	mov	r7, r0
 80300ee:	4688      	mov	r8, r1
 80300f0:	4614      	mov	r4, r2
 80300f2:	2600      	movs	r6, #0
 80300f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80300f8:	f1b9 0901 	subs.w	r9, r9, #1
 80300fc:	d505      	bpl.n	803010a <_fwalk_sglue+0x22>
 80300fe:	6824      	ldr	r4, [r4, #0]
 8030100:	2c00      	cmp	r4, #0
 8030102:	d1f7      	bne.n	80300f4 <_fwalk_sglue+0xc>
 8030104:	4630      	mov	r0, r6
 8030106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803010a:	89ab      	ldrh	r3, [r5, #12]
 803010c:	2b01      	cmp	r3, #1
 803010e:	d907      	bls.n	8030120 <_fwalk_sglue+0x38>
 8030110:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8030114:	3301      	adds	r3, #1
 8030116:	d003      	beq.n	8030120 <_fwalk_sglue+0x38>
 8030118:	4629      	mov	r1, r5
 803011a:	4638      	mov	r0, r7
 803011c:	47c0      	blx	r8
 803011e:	4306      	orrs	r6, r0
 8030120:	3568      	adds	r5, #104	@ 0x68
 8030122:	e7e9      	b.n	80300f8 <_fwalk_sglue+0x10>

08030124 <_fwrite_r>:
 8030124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8030128:	9c08      	ldr	r4, [sp, #32]
 803012a:	468a      	mov	sl, r1
 803012c:	4690      	mov	r8, r2
 803012e:	fb02 f903 	mul.w	r9, r2, r3
 8030132:	4606      	mov	r6, r0
 8030134:	b118      	cbz	r0, 803013e <_fwrite_r+0x1a>
 8030136:	6a03      	ldr	r3, [r0, #32]
 8030138:	b90b      	cbnz	r3, 803013e <_fwrite_r+0x1a>
 803013a:	f7ff ffab 	bl	8030094 <__sinit>
 803013e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8030140:	07dd      	lsls	r5, r3, #31
 8030142:	d405      	bmi.n	8030150 <_fwrite_r+0x2c>
 8030144:	89a3      	ldrh	r3, [r4, #12]
 8030146:	0598      	lsls	r0, r3, #22
 8030148:	d402      	bmi.n	8030150 <_fwrite_r+0x2c>
 803014a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803014c:	f000 f9e7 	bl	803051e <__retarget_lock_acquire_recursive>
 8030150:	89a3      	ldrh	r3, [r4, #12]
 8030152:	0719      	lsls	r1, r3, #28
 8030154:	d516      	bpl.n	8030184 <_fwrite_r+0x60>
 8030156:	6923      	ldr	r3, [r4, #16]
 8030158:	b1a3      	cbz	r3, 8030184 <_fwrite_r+0x60>
 803015a:	2500      	movs	r5, #0
 803015c:	454d      	cmp	r5, r9
 803015e:	d01f      	beq.n	80301a0 <_fwrite_r+0x7c>
 8030160:	68a7      	ldr	r7, [r4, #8]
 8030162:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8030166:	3f01      	subs	r7, #1
 8030168:	2f00      	cmp	r7, #0
 803016a:	60a7      	str	r7, [r4, #8]
 803016c:	da04      	bge.n	8030178 <_fwrite_r+0x54>
 803016e:	69a3      	ldr	r3, [r4, #24]
 8030170:	429f      	cmp	r7, r3
 8030172:	db0f      	blt.n	8030194 <_fwrite_r+0x70>
 8030174:	290a      	cmp	r1, #10
 8030176:	d00d      	beq.n	8030194 <_fwrite_r+0x70>
 8030178:	6823      	ldr	r3, [r4, #0]
 803017a:	1c5a      	adds	r2, r3, #1
 803017c:	6022      	str	r2, [r4, #0]
 803017e:	7019      	strb	r1, [r3, #0]
 8030180:	3501      	adds	r5, #1
 8030182:	e7eb      	b.n	803015c <_fwrite_r+0x38>
 8030184:	4621      	mov	r1, r4
 8030186:	4630      	mov	r0, r6
 8030188:	f000 f8a8 	bl	80302dc <__swsetup_r>
 803018c:	2800      	cmp	r0, #0
 803018e:	d0e4      	beq.n	803015a <_fwrite_r+0x36>
 8030190:	2500      	movs	r5, #0
 8030192:	e005      	b.n	80301a0 <_fwrite_r+0x7c>
 8030194:	4622      	mov	r2, r4
 8030196:	4630      	mov	r0, r6
 8030198:	f000 f861 	bl	803025e <__swbuf_r>
 803019c:	3001      	adds	r0, #1
 803019e:	d1ef      	bne.n	8030180 <_fwrite_r+0x5c>
 80301a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80301a2:	07da      	lsls	r2, r3, #31
 80301a4:	d405      	bmi.n	80301b2 <_fwrite_r+0x8e>
 80301a6:	89a3      	ldrh	r3, [r4, #12]
 80301a8:	059b      	lsls	r3, r3, #22
 80301aa:	d402      	bmi.n	80301b2 <_fwrite_r+0x8e>
 80301ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80301ae:	f000 f9b7 	bl	8030520 <__retarget_lock_release_recursive>
 80301b2:	fbb5 f0f8 	udiv	r0, r5, r8
 80301b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080301bc <fwrite>:
 80301bc:	b507      	push	{r0, r1, r2, lr}
 80301be:	9300      	str	r3, [sp, #0]
 80301c0:	4613      	mov	r3, r2
 80301c2:	460a      	mov	r2, r1
 80301c4:	4601      	mov	r1, r0
 80301c6:	4803      	ldr	r0, [pc, #12]	@ (80301d4 <fwrite+0x18>)
 80301c8:	6800      	ldr	r0, [r0, #0]
 80301ca:	f7ff ffab 	bl	8030124 <_fwrite_r>
 80301ce:	b003      	add	sp, #12
 80301d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80301d4:	2000008c 	.word	0x2000008c

080301d8 <__sread>:
 80301d8:	b510      	push	{r4, lr}
 80301da:	460c      	mov	r4, r1
 80301dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80301e0:	f000 f93e 	bl	8030460 <_read_r>
 80301e4:	2800      	cmp	r0, #0
 80301e6:	bfab      	itete	ge
 80301e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80301ea:	89a3      	ldrhlt	r3, [r4, #12]
 80301ec:	181b      	addge	r3, r3, r0
 80301ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80301f2:	bfac      	ite	ge
 80301f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80301f6:	81a3      	strhlt	r3, [r4, #12]
 80301f8:	bd10      	pop	{r4, pc}

080301fa <__swrite>:
 80301fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80301fe:	461f      	mov	r7, r3
 8030200:	898b      	ldrh	r3, [r1, #12]
 8030202:	05db      	lsls	r3, r3, #23
 8030204:	4605      	mov	r5, r0
 8030206:	460c      	mov	r4, r1
 8030208:	4616      	mov	r6, r2
 803020a:	d505      	bpl.n	8030218 <__swrite+0x1e>
 803020c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8030210:	2302      	movs	r3, #2
 8030212:	2200      	movs	r2, #0
 8030214:	f000 f912 	bl	803043c <_lseek_r>
 8030218:	89a3      	ldrh	r3, [r4, #12]
 803021a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803021e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8030222:	81a3      	strh	r3, [r4, #12]
 8030224:	4632      	mov	r2, r6
 8030226:	463b      	mov	r3, r7
 8030228:	4628      	mov	r0, r5
 803022a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803022e:	f000 b939 	b.w	80304a4 <_write_r>

08030232 <__sseek>:
 8030232:	b510      	push	{r4, lr}
 8030234:	460c      	mov	r4, r1
 8030236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803023a:	f000 f8ff 	bl	803043c <_lseek_r>
 803023e:	1c43      	adds	r3, r0, #1
 8030240:	89a3      	ldrh	r3, [r4, #12]
 8030242:	bf15      	itete	ne
 8030244:	6560      	strne	r0, [r4, #84]	@ 0x54
 8030246:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 803024a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 803024e:	81a3      	strheq	r3, [r4, #12]
 8030250:	bf18      	it	ne
 8030252:	81a3      	strhne	r3, [r4, #12]
 8030254:	bd10      	pop	{r4, pc}

08030256 <__sclose>:
 8030256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803025a:	f000 b8df 	b.w	803041c <_close_r>

0803025e <__swbuf_r>:
 803025e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030260:	460e      	mov	r6, r1
 8030262:	4614      	mov	r4, r2
 8030264:	4605      	mov	r5, r0
 8030266:	b118      	cbz	r0, 8030270 <__swbuf_r+0x12>
 8030268:	6a03      	ldr	r3, [r0, #32]
 803026a:	b90b      	cbnz	r3, 8030270 <__swbuf_r+0x12>
 803026c:	f7ff ff12 	bl	8030094 <__sinit>
 8030270:	69a3      	ldr	r3, [r4, #24]
 8030272:	60a3      	str	r3, [r4, #8]
 8030274:	89a3      	ldrh	r3, [r4, #12]
 8030276:	071a      	lsls	r2, r3, #28
 8030278:	d501      	bpl.n	803027e <__swbuf_r+0x20>
 803027a:	6923      	ldr	r3, [r4, #16]
 803027c:	b943      	cbnz	r3, 8030290 <__swbuf_r+0x32>
 803027e:	4621      	mov	r1, r4
 8030280:	4628      	mov	r0, r5
 8030282:	f000 f82b 	bl	80302dc <__swsetup_r>
 8030286:	b118      	cbz	r0, 8030290 <__swbuf_r+0x32>
 8030288:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 803028c:	4638      	mov	r0, r7
 803028e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8030290:	6823      	ldr	r3, [r4, #0]
 8030292:	6922      	ldr	r2, [r4, #16]
 8030294:	1a98      	subs	r0, r3, r2
 8030296:	6963      	ldr	r3, [r4, #20]
 8030298:	b2f6      	uxtb	r6, r6
 803029a:	4283      	cmp	r3, r0
 803029c:	4637      	mov	r7, r6
 803029e:	dc05      	bgt.n	80302ac <__swbuf_r+0x4e>
 80302a0:	4621      	mov	r1, r4
 80302a2:	4628      	mov	r0, r5
 80302a4:	f000 fcf0 	bl	8030c88 <_fflush_r>
 80302a8:	2800      	cmp	r0, #0
 80302aa:	d1ed      	bne.n	8030288 <__swbuf_r+0x2a>
 80302ac:	68a3      	ldr	r3, [r4, #8]
 80302ae:	3b01      	subs	r3, #1
 80302b0:	60a3      	str	r3, [r4, #8]
 80302b2:	6823      	ldr	r3, [r4, #0]
 80302b4:	1c5a      	adds	r2, r3, #1
 80302b6:	6022      	str	r2, [r4, #0]
 80302b8:	701e      	strb	r6, [r3, #0]
 80302ba:	6962      	ldr	r2, [r4, #20]
 80302bc:	1c43      	adds	r3, r0, #1
 80302be:	429a      	cmp	r2, r3
 80302c0:	d004      	beq.n	80302cc <__swbuf_r+0x6e>
 80302c2:	89a3      	ldrh	r3, [r4, #12]
 80302c4:	07db      	lsls	r3, r3, #31
 80302c6:	d5e1      	bpl.n	803028c <__swbuf_r+0x2e>
 80302c8:	2e0a      	cmp	r6, #10
 80302ca:	d1df      	bne.n	803028c <__swbuf_r+0x2e>
 80302cc:	4621      	mov	r1, r4
 80302ce:	4628      	mov	r0, r5
 80302d0:	f000 fcda 	bl	8030c88 <_fflush_r>
 80302d4:	2800      	cmp	r0, #0
 80302d6:	d0d9      	beq.n	803028c <__swbuf_r+0x2e>
 80302d8:	e7d6      	b.n	8030288 <__swbuf_r+0x2a>
	...

080302dc <__swsetup_r>:
 80302dc:	b538      	push	{r3, r4, r5, lr}
 80302de:	4b29      	ldr	r3, [pc, #164]	@ (8030384 <__swsetup_r+0xa8>)
 80302e0:	4605      	mov	r5, r0
 80302e2:	6818      	ldr	r0, [r3, #0]
 80302e4:	460c      	mov	r4, r1
 80302e6:	b118      	cbz	r0, 80302f0 <__swsetup_r+0x14>
 80302e8:	6a03      	ldr	r3, [r0, #32]
 80302ea:	b90b      	cbnz	r3, 80302f0 <__swsetup_r+0x14>
 80302ec:	f7ff fed2 	bl	8030094 <__sinit>
 80302f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80302f4:	0719      	lsls	r1, r3, #28
 80302f6:	d422      	bmi.n	803033e <__swsetup_r+0x62>
 80302f8:	06da      	lsls	r2, r3, #27
 80302fa:	d407      	bmi.n	803030c <__swsetup_r+0x30>
 80302fc:	2209      	movs	r2, #9
 80302fe:	602a      	str	r2, [r5, #0]
 8030300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8030304:	81a3      	strh	r3, [r4, #12]
 8030306:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803030a:	e033      	b.n	8030374 <__swsetup_r+0x98>
 803030c:	0758      	lsls	r0, r3, #29
 803030e:	d512      	bpl.n	8030336 <__swsetup_r+0x5a>
 8030310:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8030312:	b141      	cbz	r1, 8030326 <__swsetup_r+0x4a>
 8030314:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8030318:	4299      	cmp	r1, r3
 803031a:	d002      	beq.n	8030322 <__swsetup_r+0x46>
 803031c:	4628      	mov	r0, r5
 803031e:	f000 f917 	bl	8030550 <_free_r>
 8030322:	2300      	movs	r3, #0
 8030324:	6363      	str	r3, [r4, #52]	@ 0x34
 8030326:	89a3      	ldrh	r3, [r4, #12]
 8030328:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 803032c:	81a3      	strh	r3, [r4, #12]
 803032e:	2300      	movs	r3, #0
 8030330:	6063      	str	r3, [r4, #4]
 8030332:	6923      	ldr	r3, [r4, #16]
 8030334:	6023      	str	r3, [r4, #0]
 8030336:	89a3      	ldrh	r3, [r4, #12]
 8030338:	f043 0308 	orr.w	r3, r3, #8
 803033c:	81a3      	strh	r3, [r4, #12]
 803033e:	6923      	ldr	r3, [r4, #16]
 8030340:	b94b      	cbnz	r3, 8030356 <__swsetup_r+0x7a>
 8030342:	89a3      	ldrh	r3, [r4, #12]
 8030344:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8030348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 803034c:	d003      	beq.n	8030356 <__swsetup_r+0x7a>
 803034e:	4621      	mov	r1, r4
 8030350:	4628      	mov	r0, r5
 8030352:	f000 fce7 	bl	8030d24 <__smakebuf_r>
 8030356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803035a:	f013 0201 	ands.w	r2, r3, #1
 803035e:	d00a      	beq.n	8030376 <__swsetup_r+0x9a>
 8030360:	2200      	movs	r2, #0
 8030362:	60a2      	str	r2, [r4, #8]
 8030364:	6962      	ldr	r2, [r4, #20]
 8030366:	4252      	negs	r2, r2
 8030368:	61a2      	str	r2, [r4, #24]
 803036a:	6922      	ldr	r2, [r4, #16]
 803036c:	b942      	cbnz	r2, 8030380 <__swsetup_r+0xa4>
 803036e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8030372:	d1c5      	bne.n	8030300 <__swsetup_r+0x24>
 8030374:	bd38      	pop	{r3, r4, r5, pc}
 8030376:	0799      	lsls	r1, r3, #30
 8030378:	bf58      	it	pl
 803037a:	6962      	ldrpl	r2, [r4, #20]
 803037c:	60a2      	str	r2, [r4, #8]
 803037e:	e7f4      	b.n	803036a <__swsetup_r+0x8e>
 8030380:	2000      	movs	r0, #0
 8030382:	e7f7      	b.n	8030374 <__swsetup_r+0x98>
 8030384:	2000008c 	.word	0x2000008c

08030388 <memcmp>:
 8030388:	b510      	push	{r4, lr}
 803038a:	3901      	subs	r1, #1
 803038c:	4402      	add	r2, r0
 803038e:	4290      	cmp	r0, r2
 8030390:	d101      	bne.n	8030396 <memcmp+0xe>
 8030392:	2000      	movs	r0, #0
 8030394:	e005      	b.n	80303a2 <memcmp+0x1a>
 8030396:	7803      	ldrb	r3, [r0, #0]
 8030398:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 803039c:	42a3      	cmp	r3, r4
 803039e:	d001      	beq.n	80303a4 <memcmp+0x1c>
 80303a0:	1b18      	subs	r0, r3, r4
 80303a2:	bd10      	pop	{r4, pc}
 80303a4:	3001      	adds	r0, #1
 80303a6:	e7f2      	b.n	803038e <memcmp+0x6>

080303a8 <memset>:
 80303a8:	4402      	add	r2, r0
 80303aa:	4603      	mov	r3, r0
 80303ac:	4293      	cmp	r3, r2
 80303ae:	d100      	bne.n	80303b2 <memset+0xa>
 80303b0:	4770      	bx	lr
 80303b2:	f803 1b01 	strb.w	r1, [r3], #1
 80303b6:	e7f9      	b.n	80303ac <memset+0x4>

080303b8 <strncasecmp>:
 80303b8:	b570      	push	{r4, r5, r6, lr}
 80303ba:	4e0e      	ldr	r6, [pc, #56]	@ (80303f4 <strncasecmp+0x3c>)
 80303bc:	4605      	mov	r5, r0
 80303be:	440a      	add	r2, r1
 80303c0:	428a      	cmp	r2, r1
 80303c2:	d101      	bne.n	80303c8 <strncasecmp+0x10>
 80303c4:	2000      	movs	r0, #0
 80303c6:	e013      	b.n	80303f0 <strncasecmp+0x38>
 80303c8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80303cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80303d0:	5cf0      	ldrb	r0, [r6, r3]
 80303d2:	f000 0003 	and.w	r0, r0, #3
 80303d6:	2801      	cmp	r0, #1
 80303d8:	5d30      	ldrb	r0, [r6, r4]
 80303da:	f000 0003 	and.w	r0, r0, #3
 80303de:	bf08      	it	eq
 80303e0:	3320      	addeq	r3, #32
 80303e2:	2801      	cmp	r0, #1
 80303e4:	bf08      	it	eq
 80303e6:	3420      	addeq	r4, #32
 80303e8:	1b18      	subs	r0, r3, r4
 80303ea:	d101      	bne.n	80303f0 <strncasecmp+0x38>
 80303ec:	2c00      	cmp	r4, #0
 80303ee:	d1e7      	bne.n	80303c0 <strncasecmp+0x8>
 80303f0:	bd70      	pop	{r4, r5, r6, pc}
 80303f2:	bf00      	nop
 80303f4:	08033101 	.word	0x08033101

080303f8 <strncmp>:
 80303f8:	b510      	push	{r4, lr}
 80303fa:	b16a      	cbz	r2, 8030418 <strncmp+0x20>
 80303fc:	3901      	subs	r1, #1
 80303fe:	1884      	adds	r4, r0, r2
 8030400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8030404:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8030408:	429a      	cmp	r2, r3
 803040a:	d103      	bne.n	8030414 <strncmp+0x1c>
 803040c:	42a0      	cmp	r0, r4
 803040e:	d001      	beq.n	8030414 <strncmp+0x1c>
 8030410:	2a00      	cmp	r2, #0
 8030412:	d1f5      	bne.n	8030400 <strncmp+0x8>
 8030414:	1ad0      	subs	r0, r2, r3
 8030416:	bd10      	pop	{r4, pc}
 8030418:	4610      	mov	r0, r2
 803041a:	e7fc      	b.n	8030416 <strncmp+0x1e>

0803041c <_close_r>:
 803041c:	b538      	push	{r3, r4, r5, lr}
 803041e:	4d06      	ldr	r5, [pc, #24]	@ (8030438 <_close_r+0x1c>)
 8030420:	2300      	movs	r3, #0
 8030422:	4604      	mov	r4, r0
 8030424:	4608      	mov	r0, r1
 8030426:	602b      	str	r3, [r5, #0]
 8030428:	f7fb fdb5 	bl	802bf96 <_close>
 803042c:	1c43      	adds	r3, r0, #1
 803042e:	d102      	bne.n	8030436 <_close_r+0x1a>
 8030430:	682b      	ldr	r3, [r5, #0]
 8030432:	b103      	cbz	r3, 8030436 <_close_r+0x1a>
 8030434:	6023      	str	r3, [r4, #0]
 8030436:	bd38      	pop	{r3, r4, r5, pc}
 8030438:	200016dc 	.word	0x200016dc

0803043c <_lseek_r>:
 803043c:	b538      	push	{r3, r4, r5, lr}
 803043e:	4d07      	ldr	r5, [pc, #28]	@ (803045c <_lseek_r+0x20>)
 8030440:	4604      	mov	r4, r0
 8030442:	4608      	mov	r0, r1
 8030444:	4611      	mov	r1, r2
 8030446:	2200      	movs	r2, #0
 8030448:	602a      	str	r2, [r5, #0]
 803044a:	461a      	mov	r2, r3
 803044c:	f7fb fdca 	bl	802bfe4 <_lseek>
 8030450:	1c43      	adds	r3, r0, #1
 8030452:	d102      	bne.n	803045a <_lseek_r+0x1e>
 8030454:	682b      	ldr	r3, [r5, #0]
 8030456:	b103      	cbz	r3, 803045a <_lseek_r+0x1e>
 8030458:	6023      	str	r3, [r4, #0]
 803045a:	bd38      	pop	{r3, r4, r5, pc}
 803045c:	200016dc 	.word	0x200016dc

08030460 <_read_r>:
 8030460:	b538      	push	{r3, r4, r5, lr}
 8030462:	4d07      	ldr	r5, [pc, #28]	@ (8030480 <_read_r+0x20>)
 8030464:	4604      	mov	r4, r0
 8030466:	4608      	mov	r0, r1
 8030468:	4611      	mov	r1, r2
 803046a:	2200      	movs	r2, #0
 803046c:	602a      	str	r2, [r5, #0]
 803046e:	461a      	mov	r2, r3
 8030470:	f7fb fd58 	bl	802bf24 <_read>
 8030474:	1c43      	adds	r3, r0, #1
 8030476:	d102      	bne.n	803047e <_read_r+0x1e>
 8030478:	682b      	ldr	r3, [r5, #0]
 803047a:	b103      	cbz	r3, 803047e <_read_r+0x1e>
 803047c:	6023      	str	r3, [r4, #0]
 803047e:	bd38      	pop	{r3, r4, r5, pc}
 8030480:	200016dc 	.word	0x200016dc

08030484 <_sbrk_r>:
 8030484:	b538      	push	{r3, r4, r5, lr}
 8030486:	4d06      	ldr	r5, [pc, #24]	@ (80304a0 <_sbrk_r+0x1c>)
 8030488:	2300      	movs	r3, #0
 803048a:	4604      	mov	r4, r0
 803048c:	4608      	mov	r0, r1
 803048e:	602b      	str	r3, [r5, #0]
 8030490:	f7fb fdb6 	bl	802c000 <_sbrk>
 8030494:	1c43      	adds	r3, r0, #1
 8030496:	d102      	bne.n	803049e <_sbrk_r+0x1a>
 8030498:	682b      	ldr	r3, [r5, #0]
 803049a:	b103      	cbz	r3, 803049e <_sbrk_r+0x1a>
 803049c:	6023      	str	r3, [r4, #0]
 803049e:	bd38      	pop	{r3, r4, r5, pc}
 80304a0:	200016dc 	.word	0x200016dc

080304a4 <_write_r>:
 80304a4:	b538      	push	{r3, r4, r5, lr}
 80304a6:	4d07      	ldr	r5, [pc, #28]	@ (80304c4 <_write_r+0x20>)
 80304a8:	4604      	mov	r4, r0
 80304aa:	4608      	mov	r0, r1
 80304ac:	4611      	mov	r1, r2
 80304ae:	2200      	movs	r2, #0
 80304b0:	602a      	str	r2, [r5, #0]
 80304b2:	461a      	mov	r2, r3
 80304b4:	f7fb fd53 	bl	802bf5e <_write>
 80304b8:	1c43      	adds	r3, r0, #1
 80304ba:	d102      	bne.n	80304c2 <_write_r+0x1e>
 80304bc:	682b      	ldr	r3, [r5, #0]
 80304be:	b103      	cbz	r3, 80304c2 <_write_r+0x1e>
 80304c0:	6023      	str	r3, [r4, #0]
 80304c2:	bd38      	pop	{r3, r4, r5, pc}
 80304c4:	200016dc 	.word	0x200016dc

080304c8 <__errno>:
 80304c8:	4b01      	ldr	r3, [pc, #4]	@ (80304d0 <__errno+0x8>)
 80304ca:	6818      	ldr	r0, [r3, #0]
 80304cc:	4770      	bx	lr
 80304ce:	bf00      	nop
 80304d0:	2000008c 	.word	0x2000008c

080304d4 <__libc_init_array>:
 80304d4:	b570      	push	{r4, r5, r6, lr}
 80304d6:	4d0d      	ldr	r5, [pc, #52]	@ (803050c <__libc_init_array+0x38>)
 80304d8:	4c0d      	ldr	r4, [pc, #52]	@ (8030510 <__libc_init_array+0x3c>)
 80304da:	1b64      	subs	r4, r4, r5
 80304dc:	10a4      	asrs	r4, r4, #2
 80304de:	2600      	movs	r6, #0
 80304e0:	42a6      	cmp	r6, r4
 80304e2:	d109      	bne.n	80304f8 <__libc_init_array+0x24>
 80304e4:	4d0b      	ldr	r5, [pc, #44]	@ (8030514 <__libc_init_array+0x40>)
 80304e6:	4c0c      	ldr	r4, [pc, #48]	@ (8030518 <__libc_init_array+0x44>)
 80304e8:	f000 fc7a 	bl	8030de0 <_init>
 80304ec:	1b64      	subs	r4, r4, r5
 80304ee:	10a4      	asrs	r4, r4, #2
 80304f0:	2600      	movs	r6, #0
 80304f2:	42a6      	cmp	r6, r4
 80304f4:	d105      	bne.n	8030502 <__libc_init_array+0x2e>
 80304f6:	bd70      	pop	{r4, r5, r6, pc}
 80304f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80304fc:	4798      	blx	r3
 80304fe:	3601      	adds	r6, #1
 8030500:	e7ee      	b.n	80304e0 <__libc_init_array+0xc>
 8030502:	f855 3b04 	ldr.w	r3, [r5], #4
 8030506:	4798      	blx	r3
 8030508:	3601      	adds	r6, #1
 803050a:	e7f2      	b.n	80304f2 <__libc_init_array+0x1e>
 803050c:	0803323c 	.word	0x0803323c
 8030510:	0803323c 	.word	0x0803323c
 8030514:	0803323c 	.word	0x0803323c
 8030518:	08033240 	.word	0x08033240

0803051c <__retarget_lock_init_recursive>:
 803051c:	4770      	bx	lr

0803051e <__retarget_lock_acquire_recursive>:
 803051e:	4770      	bx	lr

08030520 <__retarget_lock_release_recursive>:
 8030520:	4770      	bx	lr

08030522 <strcpy>:
 8030522:	4603      	mov	r3, r0
 8030524:	f811 2b01 	ldrb.w	r2, [r1], #1
 8030528:	f803 2b01 	strb.w	r2, [r3], #1
 803052c:	2a00      	cmp	r2, #0
 803052e:	d1f9      	bne.n	8030524 <strcpy+0x2>
 8030530:	4770      	bx	lr

08030532 <memcpy>:
 8030532:	440a      	add	r2, r1
 8030534:	4291      	cmp	r1, r2
 8030536:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 803053a:	d100      	bne.n	803053e <memcpy+0xc>
 803053c:	4770      	bx	lr
 803053e:	b510      	push	{r4, lr}
 8030540:	f811 4b01 	ldrb.w	r4, [r1], #1
 8030544:	f803 4f01 	strb.w	r4, [r3, #1]!
 8030548:	4291      	cmp	r1, r2
 803054a:	d1f9      	bne.n	8030540 <memcpy+0xe>
 803054c:	bd10      	pop	{r4, pc}
	...

08030550 <_free_r>:
 8030550:	b538      	push	{r3, r4, r5, lr}
 8030552:	4605      	mov	r5, r0
 8030554:	2900      	cmp	r1, #0
 8030556:	d041      	beq.n	80305dc <_free_r+0x8c>
 8030558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803055c:	1f0c      	subs	r4, r1, #4
 803055e:	2b00      	cmp	r3, #0
 8030560:	bfb8      	it	lt
 8030562:	18e4      	addlt	r4, r4, r3
 8030564:	f7ff fcfe 	bl	802ff64 <__malloc_lock>
 8030568:	4a1d      	ldr	r2, [pc, #116]	@ (80305e0 <_free_r+0x90>)
 803056a:	6813      	ldr	r3, [r2, #0]
 803056c:	b933      	cbnz	r3, 803057c <_free_r+0x2c>
 803056e:	6063      	str	r3, [r4, #4]
 8030570:	6014      	str	r4, [r2, #0]
 8030572:	4628      	mov	r0, r5
 8030574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8030578:	f7ff bcfa 	b.w	802ff70 <__malloc_unlock>
 803057c:	42a3      	cmp	r3, r4
 803057e:	d908      	bls.n	8030592 <_free_r+0x42>
 8030580:	6820      	ldr	r0, [r4, #0]
 8030582:	1821      	adds	r1, r4, r0
 8030584:	428b      	cmp	r3, r1
 8030586:	bf01      	itttt	eq
 8030588:	6819      	ldreq	r1, [r3, #0]
 803058a:	685b      	ldreq	r3, [r3, #4]
 803058c:	1809      	addeq	r1, r1, r0
 803058e:	6021      	streq	r1, [r4, #0]
 8030590:	e7ed      	b.n	803056e <_free_r+0x1e>
 8030592:	461a      	mov	r2, r3
 8030594:	685b      	ldr	r3, [r3, #4]
 8030596:	b10b      	cbz	r3, 803059c <_free_r+0x4c>
 8030598:	42a3      	cmp	r3, r4
 803059a:	d9fa      	bls.n	8030592 <_free_r+0x42>
 803059c:	6811      	ldr	r1, [r2, #0]
 803059e:	1850      	adds	r0, r2, r1
 80305a0:	42a0      	cmp	r0, r4
 80305a2:	d10b      	bne.n	80305bc <_free_r+0x6c>
 80305a4:	6820      	ldr	r0, [r4, #0]
 80305a6:	4401      	add	r1, r0
 80305a8:	1850      	adds	r0, r2, r1
 80305aa:	4283      	cmp	r3, r0
 80305ac:	6011      	str	r1, [r2, #0]
 80305ae:	d1e0      	bne.n	8030572 <_free_r+0x22>
 80305b0:	6818      	ldr	r0, [r3, #0]
 80305b2:	685b      	ldr	r3, [r3, #4]
 80305b4:	6053      	str	r3, [r2, #4]
 80305b6:	4408      	add	r0, r1
 80305b8:	6010      	str	r0, [r2, #0]
 80305ba:	e7da      	b.n	8030572 <_free_r+0x22>
 80305bc:	d902      	bls.n	80305c4 <_free_r+0x74>
 80305be:	230c      	movs	r3, #12
 80305c0:	602b      	str	r3, [r5, #0]
 80305c2:	e7d6      	b.n	8030572 <_free_r+0x22>
 80305c4:	6820      	ldr	r0, [r4, #0]
 80305c6:	1821      	adds	r1, r4, r0
 80305c8:	428b      	cmp	r3, r1
 80305ca:	bf04      	itt	eq
 80305cc:	6819      	ldreq	r1, [r3, #0]
 80305ce:	685b      	ldreq	r3, [r3, #4]
 80305d0:	6063      	str	r3, [r4, #4]
 80305d2:	bf04      	itt	eq
 80305d4:	1809      	addeq	r1, r1, r0
 80305d6:	6021      	streq	r1, [r4, #0]
 80305d8:	6054      	str	r4, [r2, #4]
 80305da:	e7ca      	b.n	8030572 <_free_r+0x22>
 80305dc:	bd38      	pop	{r3, r4, r5, pc}
 80305de:	bf00      	nop
 80305e0:	2000159c 	.word	0x2000159c

080305e4 <__sfputc_r>:
 80305e4:	6893      	ldr	r3, [r2, #8]
 80305e6:	3b01      	subs	r3, #1
 80305e8:	2b00      	cmp	r3, #0
 80305ea:	b410      	push	{r4}
 80305ec:	6093      	str	r3, [r2, #8]
 80305ee:	da08      	bge.n	8030602 <__sfputc_r+0x1e>
 80305f0:	6994      	ldr	r4, [r2, #24]
 80305f2:	42a3      	cmp	r3, r4
 80305f4:	db01      	blt.n	80305fa <__sfputc_r+0x16>
 80305f6:	290a      	cmp	r1, #10
 80305f8:	d103      	bne.n	8030602 <__sfputc_r+0x1e>
 80305fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80305fe:	f7ff be2e 	b.w	803025e <__swbuf_r>
 8030602:	6813      	ldr	r3, [r2, #0]
 8030604:	1c58      	adds	r0, r3, #1
 8030606:	6010      	str	r0, [r2, #0]
 8030608:	7019      	strb	r1, [r3, #0]
 803060a:	4608      	mov	r0, r1
 803060c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030610:	4770      	bx	lr

08030612 <__sfputs_r>:
 8030612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030614:	4606      	mov	r6, r0
 8030616:	460f      	mov	r7, r1
 8030618:	4614      	mov	r4, r2
 803061a:	18d5      	adds	r5, r2, r3
 803061c:	42ac      	cmp	r4, r5
 803061e:	d101      	bne.n	8030624 <__sfputs_r+0x12>
 8030620:	2000      	movs	r0, #0
 8030622:	e007      	b.n	8030634 <__sfputs_r+0x22>
 8030624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8030628:	463a      	mov	r2, r7
 803062a:	4630      	mov	r0, r6
 803062c:	f7ff ffda 	bl	80305e4 <__sfputc_r>
 8030630:	1c43      	adds	r3, r0, #1
 8030632:	d1f3      	bne.n	803061c <__sfputs_r+0xa>
 8030634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08030638 <_vfiprintf_r>:
 8030638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803063c:	460d      	mov	r5, r1
 803063e:	b09d      	sub	sp, #116	@ 0x74
 8030640:	4614      	mov	r4, r2
 8030642:	4698      	mov	r8, r3
 8030644:	4606      	mov	r6, r0
 8030646:	b118      	cbz	r0, 8030650 <_vfiprintf_r+0x18>
 8030648:	6a03      	ldr	r3, [r0, #32]
 803064a:	b90b      	cbnz	r3, 8030650 <_vfiprintf_r+0x18>
 803064c:	f7ff fd22 	bl	8030094 <__sinit>
 8030650:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8030652:	07d9      	lsls	r1, r3, #31
 8030654:	d405      	bmi.n	8030662 <_vfiprintf_r+0x2a>
 8030656:	89ab      	ldrh	r3, [r5, #12]
 8030658:	059a      	lsls	r2, r3, #22
 803065a:	d402      	bmi.n	8030662 <_vfiprintf_r+0x2a>
 803065c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 803065e:	f7ff ff5e 	bl	803051e <__retarget_lock_acquire_recursive>
 8030662:	89ab      	ldrh	r3, [r5, #12]
 8030664:	071b      	lsls	r3, r3, #28
 8030666:	d501      	bpl.n	803066c <_vfiprintf_r+0x34>
 8030668:	692b      	ldr	r3, [r5, #16]
 803066a:	b99b      	cbnz	r3, 8030694 <_vfiprintf_r+0x5c>
 803066c:	4629      	mov	r1, r5
 803066e:	4630      	mov	r0, r6
 8030670:	f7ff fe34 	bl	80302dc <__swsetup_r>
 8030674:	b170      	cbz	r0, 8030694 <_vfiprintf_r+0x5c>
 8030676:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8030678:	07dc      	lsls	r4, r3, #31
 803067a:	d504      	bpl.n	8030686 <_vfiprintf_r+0x4e>
 803067c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8030680:	b01d      	add	sp, #116	@ 0x74
 8030682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030686:	89ab      	ldrh	r3, [r5, #12]
 8030688:	0598      	lsls	r0, r3, #22
 803068a:	d4f7      	bmi.n	803067c <_vfiprintf_r+0x44>
 803068c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 803068e:	f7ff ff47 	bl	8030520 <__retarget_lock_release_recursive>
 8030692:	e7f3      	b.n	803067c <_vfiprintf_r+0x44>
 8030694:	2300      	movs	r3, #0
 8030696:	9309      	str	r3, [sp, #36]	@ 0x24
 8030698:	2320      	movs	r3, #32
 803069a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 803069e:	f8cd 800c 	str.w	r8, [sp, #12]
 80306a2:	2330      	movs	r3, #48	@ 0x30
 80306a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8030854 <_vfiprintf_r+0x21c>
 80306a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80306ac:	f04f 0901 	mov.w	r9, #1
 80306b0:	4623      	mov	r3, r4
 80306b2:	469a      	mov	sl, r3
 80306b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80306b8:	b10a      	cbz	r2, 80306be <_vfiprintf_r+0x86>
 80306ba:	2a25      	cmp	r2, #37	@ 0x25
 80306bc:	d1f9      	bne.n	80306b2 <_vfiprintf_r+0x7a>
 80306be:	ebba 0b04 	subs.w	fp, sl, r4
 80306c2:	d00b      	beq.n	80306dc <_vfiprintf_r+0xa4>
 80306c4:	465b      	mov	r3, fp
 80306c6:	4622      	mov	r2, r4
 80306c8:	4629      	mov	r1, r5
 80306ca:	4630      	mov	r0, r6
 80306cc:	f7ff ffa1 	bl	8030612 <__sfputs_r>
 80306d0:	3001      	adds	r0, #1
 80306d2:	f000 80a7 	beq.w	8030824 <_vfiprintf_r+0x1ec>
 80306d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80306d8:	445a      	add	r2, fp
 80306da:	9209      	str	r2, [sp, #36]	@ 0x24
 80306dc:	f89a 3000 	ldrb.w	r3, [sl]
 80306e0:	2b00      	cmp	r3, #0
 80306e2:	f000 809f 	beq.w	8030824 <_vfiprintf_r+0x1ec>
 80306e6:	2300      	movs	r3, #0
 80306e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80306ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80306f0:	f10a 0a01 	add.w	sl, sl, #1
 80306f4:	9304      	str	r3, [sp, #16]
 80306f6:	9307      	str	r3, [sp, #28]
 80306f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80306fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80306fe:	4654      	mov	r4, sl
 8030700:	2205      	movs	r2, #5
 8030702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8030706:	4853      	ldr	r0, [pc, #332]	@ (8030854 <_vfiprintf_r+0x21c>)
 8030708:	f7ef ff62 	bl	80205d0 <memchr>
 803070c:	9a04      	ldr	r2, [sp, #16]
 803070e:	b9d8      	cbnz	r0, 8030748 <_vfiprintf_r+0x110>
 8030710:	06d1      	lsls	r1, r2, #27
 8030712:	bf44      	itt	mi
 8030714:	2320      	movmi	r3, #32
 8030716:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 803071a:	0713      	lsls	r3, r2, #28
 803071c:	bf44      	itt	mi
 803071e:	232b      	movmi	r3, #43	@ 0x2b
 8030720:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8030724:	f89a 3000 	ldrb.w	r3, [sl]
 8030728:	2b2a      	cmp	r3, #42	@ 0x2a
 803072a:	d015      	beq.n	8030758 <_vfiprintf_r+0x120>
 803072c:	9a07      	ldr	r2, [sp, #28]
 803072e:	4654      	mov	r4, sl
 8030730:	2000      	movs	r0, #0
 8030732:	f04f 0c0a 	mov.w	ip, #10
 8030736:	4621      	mov	r1, r4
 8030738:	f811 3b01 	ldrb.w	r3, [r1], #1
 803073c:	3b30      	subs	r3, #48	@ 0x30
 803073e:	2b09      	cmp	r3, #9
 8030740:	d94b      	bls.n	80307da <_vfiprintf_r+0x1a2>
 8030742:	b1b0      	cbz	r0, 8030772 <_vfiprintf_r+0x13a>
 8030744:	9207      	str	r2, [sp, #28]
 8030746:	e014      	b.n	8030772 <_vfiprintf_r+0x13a>
 8030748:	eba0 0308 	sub.w	r3, r0, r8
 803074c:	fa09 f303 	lsl.w	r3, r9, r3
 8030750:	4313      	orrs	r3, r2
 8030752:	9304      	str	r3, [sp, #16]
 8030754:	46a2      	mov	sl, r4
 8030756:	e7d2      	b.n	80306fe <_vfiprintf_r+0xc6>
 8030758:	9b03      	ldr	r3, [sp, #12]
 803075a:	1d19      	adds	r1, r3, #4
 803075c:	681b      	ldr	r3, [r3, #0]
 803075e:	9103      	str	r1, [sp, #12]
 8030760:	2b00      	cmp	r3, #0
 8030762:	bfbb      	ittet	lt
 8030764:	425b      	neglt	r3, r3
 8030766:	f042 0202 	orrlt.w	r2, r2, #2
 803076a:	9307      	strge	r3, [sp, #28]
 803076c:	9307      	strlt	r3, [sp, #28]
 803076e:	bfb8      	it	lt
 8030770:	9204      	strlt	r2, [sp, #16]
 8030772:	7823      	ldrb	r3, [r4, #0]
 8030774:	2b2e      	cmp	r3, #46	@ 0x2e
 8030776:	d10a      	bne.n	803078e <_vfiprintf_r+0x156>
 8030778:	7863      	ldrb	r3, [r4, #1]
 803077a:	2b2a      	cmp	r3, #42	@ 0x2a
 803077c:	d132      	bne.n	80307e4 <_vfiprintf_r+0x1ac>
 803077e:	9b03      	ldr	r3, [sp, #12]
 8030780:	1d1a      	adds	r2, r3, #4
 8030782:	681b      	ldr	r3, [r3, #0]
 8030784:	9203      	str	r2, [sp, #12]
 8030786:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 803078a:	3402      	adds	r4, #2
 803078c:	9305      	str	r3, [sp, #20]
 803078e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8030864 <_vfiprintf_r+0x22c>
 8030792:	7821      	ldrb	r1, [r4, #0]
 8030794:	2203      	movs	r2, #3
 8030796:	4650      	mov	r0, sl
 8030798:	f7ef ff1a 	bl	80205d0 <memchr>
 803079c:	b138      	cbz	r0, 80307ae <_vfiprintf_r+0x176>
 803079e:	9b04      	ldr	r3, [sp, #16]
 80307a0:	eba0 000a 	sub.w	r0, r0, sl
 80307a4:	2240      	movs	r2, #64	@ 0x40
 80307a6:	4082      	lsls	r2, r0
 80307a8:	4313      	orrs	r3, r2
 80307aa:	3401      	adds	r4, #1
 80307ac:	9304      	str	r3, [sp, #16]
 80307ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80307b2:	4829      	ldr	r0, [pc, #164]	@ (8030858 <_vfiprintf_r+0x220>)
 80307b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80307b8:	2206      	movs	r2, #6
 80307ba:	f7ef ff09 	bl	80205d0 <memchr>
 80307be:	2800      	cmp	r0, #0
 80307c0:	d03f      	beq.n	8030842 <_vfiprintf_r+0x20a>
 80307c2:	4b26      	ldr	r3, [pc, #152]	@ (803085c <_vfiprintf_r+0x224>)
 80307c4:	bb1b      	cbnz	r3, 803080e <_vfiprintf_r+0x1d6>
 80307c6:	9b03      	ldr	r3, [sp, #12]
 80307c8:	3307      	adds	r3, #7
 80307ca:	f023 0307 	bic.w	r3, r3, #7
 80307ce:	3308      	adds	r3, #8
 80307d0:	9303      	str	r3, [sp, #12]
 80307d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80307d4:	443b      	add	r3, r7
 80307d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80307d8:	e76a      	b.n	80306b0 <_vfiprintf_r+0x78>
 80307da:	fb0c 3202 	mla	r2, ip, r2, r3
 80307de:	460c      	mov	r4, r1
 80307e0:	2001      	movs	r0, #1
 80307e2:	e7a8      	b.n	8030736 <_vfiprintf_r+0xfe>
 80307e4:	2300      	movs	r3, #0
 80307e6:	3401      	adds	r4, #1
 80307e8:	9305      	str	r3, [sp, #20]
 80307ea:	4619      	mov	r1, r3
 80307ec:	f04f 0c0a 	mov.w	ip, #10
 80307f0:	4620      	mov	r0, r4
 80307f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80307f6:	3a30      	subs	r2, #48	@ 0x30
 80307f8:	2a09      	cmp	r2, #9
 80307fa:	d903      	bls.n	8030804 <_vfiprintf_r+0x1cc>
 80307fc:	2b00      	cmp	r3, #0
 80307fe:	d0c6      	beq.n	803078e <_vfiprintf_r+0x156>
 8030800:	9105      	str	r1, [sp, #20]
 8030802:	e7c4      	b.n	803078e <_vfiprintf_r+0x156>
 8030804:	fb0c 2101 	mla	r1, ip, r1, r2
 8030808:	4604      	mov	r4, r0
 803080a:	2301      	movs	r3, #1
 803080c:	e7f0      	b.n	80307f0 <_vfiprintf_r+0x1b8>
 803080e:	ab03      	add	r3, sp, #12
 8030810:	9300      	str	r3, [sp, #0]
 8030812:	462a      	mov	r2, r5
 8030814:	4b12      	ldr	r3, [pc, #72]	@ (8030860 <_vfiprintf_r+0x228>)
 8030816:	a904      	add	r1, sp, #16
 8030818:	4630      	mov	r0, r6
 803081a:	f3af 8000 	nop.w
 803081e:	4607      	mov	r7, r0
 8030820:	1c78      	adds	r0, r7, #1
 8030822:	d1d6      	bne.n	80307d2 <_vfiprintf_r+0x19a>
 8030824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8030826:	07d9      	lsls	r1, r3, #31
 8030828:	d405      	bmi.n	8030836 <_vfiprintf_r+0x1fe>
 803082a:	89ab      	ldrh	r3, [r5, #12]
 803082c:	059a      	lsls	r2, r3, #22
 803082e:	d402      	bmi.n	8030836 <_vfiprintf_r+0x1fe>
 8030830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8030832:	f7ff fe75 	bl	8030520 <__retarget_lock_release_recursive>
 8030836:	89ab      	ldrh	r3, [r5, #12]
 8030838:	065b      	lsls	r3, r3, #25
 803083a:	f53f af1f 	bmi.w	803067c <_vfiprintf_r+0x44>
 803083e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8030840:	e71e      	b.n	8030680 <_vfiprintf_r+0x48>
 8030842:	ab03      	add	r3, sp, #12
 8030844:	9300      	str	r3, [sp, #0]
 8030846:	462a      	mov	r2, r5
 8030848:	4b05      	ldr	r3, [pc, #20]	@ (8030860 <_vfiprintf_r+0x228>)
 803084a:	a904      	add	r1, sp, #16
 803084c:	4630      	mov	r0, r6
 803084e:	f000 f879 	bl	8030944 <_printf_i>
 8030852:	e7e4      	b.n	803081e <_vfiprintf_r+0x1e6>
 8030854:	08033201 	.word	0x08033201
 8030858:	0803320b 	.word	0x0803320b
 803085c:	00000000 	.word	0x00000000
 8030860:	08030613 	.word	0x08030613
 8030864:	08033207 	.word	0x08033207

08030868 <_printf_common>:
 8030868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803086c:	4616      	mov	r6, r2
 803086e:	4698      	mov	r8, r3
 8030870:	688a      	ldr	r2, [r1, #8]
 8030872:	690b      	ldr	r3, [r1, #16]
 8030874:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8030878:	4293      	cmp	r3, r2
 803087a:	bfb8      	it	lt
 803087c:	4613      	movlt	r3, r2
 803087e:	6033      	str	r3, [r6, #0]
 8030880:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8030884:	4607      	mov	r7, r0
 8030886:	460c      	mov	r4, r1
 8030888:	b10a      	cbz	r2, 803088e <_printf_common+0x26>
 803088a:	3301      	adds	r3, #1
 803088c:	6033      	str	r3, [r6, #0]
 803088e:	6823      	ldr	r3, [r4, #0]
 8030890:	0699      	lsls	r1, r3, #26
 8030892:	bf42      	ittt	mi
 8030894:	6833      	ldrmi	r3, [r6, #0]
 8030896:	3302      	addmi	r3, #2
 8030898:	6033      	strmi	r3, [r6, #0]
 803089a:	6825      	ldr	r5, [r4, #0]
 803089c:	f015 0506 	ands.w	r5, r5, #6
 80308a0:	d106      	bne.n	80308b0 <_printf_common+0x48>
 80308a2:	f104 0a19 	add.w	sl, r4, #25
 80308a6:	68e3      	ldr	r3, [r4, #12]
 80308a8:	6832      	ldr	r2, [r6, #0]
 80308aa:	1a9b      	subs	r3, r3, r2
 80308ac:	42ab      	cmp	r3, r5
 80308ae:	dc26      	bgt.n	80308fe <_printf_common+0x96>
 80308b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80308b4:	6822      	ldr	r2, [r4, #0]
 80308b6:	3b00      	subs	r3, #0
 80308b8:	bf18      	it	ne
 80308ba:	2301      	movne	r3, #1
 80308bc:	0692      	lsls	r2, r2, #26
 80308be:	d42b      	bmi.n	8030918 <_printf_common+0xb0>
 80308c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80308c4:	4641      	mov	r1, r8
 80308c6:	4638      	mov	r0, r7
 80308c8:	47c8      	blx	r9
 80308ca:	3001      	adds	r0, #1
 80308cc:	d01e      	beq.n	803090c <_printf_common+0xa4>
 80308ce:	6823      	ldr	r3, [r4, #0]
 80308d0:	6922      	ldr	r2, [r4, #16]
 80308d2:	f003 0306 	and.w	r3, r3, #6
 80308d6:	2b04      	cmp	r3, #4
 80308d8:	bf02      	ittt	eq
 80308da:	68e5      	ldreq	r5, [r4, #12]
 80308dc:	6833      	ldreq	r3, [r6, #0]
 80308de:	1aed      	subeq	r5, r5, r3
 80308e0:	68a3      	ldr	r3, [r4, #8]
 80308e2:	bf0c      	ite	eq
 80308e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80308e8:	2500      	movne	r5, #0
 80308ea:	4293      	cmp	r3, r2
 80308ec:	bfc4      	itt	gt
 80308ee:	1a9b      	subgt	r3, r3, r2
 80308f0:	18ed      	addgt	r5, r5, r3
 80308f2:	2600      	movs	r6, #0
 80308f4:	341a      	adds	r4, #26
 80308f6:	42b5      	cmp	r5, r6
 80308f8:	d11a      	bne.n	8030930 <_printf_common+0xc8>
 80308fa:	2000      	movs	r0, #0
 80308fc:	e008      	b.n	8030910 <_printf_common+0xa8>
 80308fe:	2301      	movs	r3, #1
 8030900:	4652      	mov	r2, sl
 8030902:	4641      	mov	r1, r8
 8030904:	4638      	mov	r0, r7
 8030906:	47c8      	blx	r9
 8030908:	3001      	adds	r0, #1
 803090a:	d103      	bne.n	8030914 <_printf_common+0xac>
 803090c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8030910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8030914:	3501      	adds	r5, #1
 8030916:	e7c6      	b.n	80308a6 <_printf_common+0x3e>
 8030918:	18e1      	adds	r1, r4, r3
 803091a:	1c5a      	adds	r2, r3, #1
 803091c:	2030      	movs	r0, #48	@ 0x30
 803091e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8030922:	4422      	add	r2, r4
 8030924:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8030928:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 803092c:	3302      	adds	r3, #2
 803092e:	e7c7      	b.n	80308c0 <_printf_common+0x58>
 8030930:	2301      	movs	r3, #1
 8030932:	4622      	mov	r2, r4
 8030934:	4641      	mov	r1, r8
 8030936:	4638      	mov	r0, r7
 8030938:	47c8      	blx	r9
 803093a:	3001      	adds	r0, #1
 803093c:	d0e6      	beq.n	803090c <_printf_common+0xa4>
 803093e:	3601      	adds	r6, #1
 8030940:	e7d9      	b.n	80308f6 <_printf_common+0x8e>
	...

08030944 <_printf_i>:
 8030944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8030948:	7e0f      	ldrb	r7, [r1, #24]
 803094a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 803094c:	2f78      	cmp	r7, #120	@ 0x78
 803094e:	4691      	mov	r9, r2
 8030950:	4680      	mov	r8, r0
 8030952:	460c      	mov	r4, r1
 8030954:	469a      	mov	sl, r3
 8030956:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 803095a:	d807      	bhi.n	803096c <_printf_i+0x28>
 803095c:	2f62      	cmp	r7, #98	@ 0x62
 803095e:	d80a      	bhi.n	8030976 <_printf_i+0x32>
 8030960:	2f00      	cmp	r7, #0
 8030962:	f000 80d1 	beq.w	8030b08 <_printf_i+0x1c4>
 8030966:	2f58      	cmp	r7, #88	@ 0x58
 8030968:	f000 80b8 	beq.w	8030adc <_printf_i+0x198>
 803096c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8030970:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8030974:	e03a      	b.n	80309ec <_printf_i+0xa8>
 8030976:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 803097a:	2b15      	cmp	r3, #21
 803097c:	d8f6      	bhi.n	803096c <_printf_i+0x28>
 803097e:	a101      	add	r1, pc, #4	@ (adr r1, 8030984 <_printf_i+0x40>)
 8030980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8030984:	080309dd 	.word	0x080309dd
 8030988:	080309f1 	.word	0x080309f1
 803098c:	0803096d 	.word	0x0803096d
 8030990:	0803096d 	.word	0x0803096d
 8030994:	0803096d 	.word	0x0803096d
 8030998:	0803096d 	.word	0x0803096d
 803099c:	080309f1 	.word	0x080309f1
 80309a0:	0803096d 	.word	0x0803096d
 80309a4:	0803096d 	.word	0x0803096d
 80309a8:	0803096d 	.word	0x0803096d
 80309ac:	0803096d 	.word	0x0803096d
 80309b0:	08030aef 	.word	0x08030aef
 80309b4:	08030a1b 	.word	0x08030a1b
 80309b8:	08030aa9 	.word	0x08030aa9
 80309bc:	0803096d 	.word	0x0803096d
 80309c0:	0803096d 	.word	0x0803096d
 80309c4:	08030b11 	.word	0x08030b11
 80309c8:	0803096d 	.word	0x0803096d
 80309cc:	08030a1b 	.word	0x08030a1b
 80309d0:	0803096d 	.word	0x0803096d
 80309d4:	0803096d 	.word	0x0803096d
 80309d8:	08030ab1 	.word	0x08030ab1
 80309dc:	6833      	ldr	r3, [r6, #0]
 80309de:	1d1a      	adds	r2, r3, #4
 80309e0:	681b      	ldr	r3, [r3, #0]
 80309e2:	6032      	str	r2, [r6, #0]
 80309e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80309e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80309ec:	2301      	movs	r3, #1
 80309ee:	e09c      	b.n	8030b2a <_printf_i+0x1e6>
 80309f0:	6833      	ldr	r3, [r6, #0]
 80309f2:	6820      	ldr	r0, [r4, #0]
 80309f4:	1d19      	adds	r1, r3, #4
 80309f6:	6031      	str	r1, [r6, #0]
 80309f8:	0606      	lsls	r6, r0, #24
 80309fa:	d501      	bpl.n	8030a00 <_printf_i+0xbc>
 80309fc:	681d      	ldr	r5, [r3, #0]
 80309fe:	e003      	b.n	8030a08 <_printf_i+0xc4>
 8030a00:	0645      	lsls	r5, r0, #25
 8030a02:	d5fb      	bpl.n	80309fc <_printf_i+0xb8>
 8030a04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8030a08:	2d00      	cmp	r5, #0
 8030a0a:	da03      	bge.n	8030a14 <_printf_i+0xd0>
 8030a0c:	232d      	movs	r3, #45	@ 0x2d
 8030a0e:	426d      	negs	r5, r5
 8030a10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8030a14:	4858      	ldr	r0, [pc, #352]	@ (8030b78 <_printf_i+0x234>)
 8030a16:	230a      	movs	r3, #10
 8030a18:	e011      	b.n	8030a3e <_printf_i+0xfa>
 8030a1a:	6821      	ldr	r1, [r4, #0]
 8030a1c:	6833      	ldr	r3, [r6, #0]
 8030a1e:	0608      	lsls	r0, r1, #24
 8030a20:	f853 5b04 	ldr.w	r5, [r3], #4
 8030a24:	d402      	bmi.n	8030a2c <_printf_i+0xe8>
 8030a26:	0649      	lsls	r1, r1, #25
 8030a28:	bf48      	it	mi
 8030a2a:	b2ad      	uxthmi	r5, r5
 8030a2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8030a2e:	4852      	ldr	r0, [pc, #328]	@ (8030b78 <_printf_i+0x234>)
 8030a30:	6033      	str	r3, [r6, #0]
 8030a32:	bf14      	ite	ne
 8030a34:	230a      	movne	r3, #10
 8030a36:	2308      	moveq	r3, #8
 8030a38:	2100      	movs	r1, #0
 8030a3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8030a3e:	6866      	ldr	r6, [r4, #4]
 8030a40:	60a6      	str	r6, [r4, #8]
 8030a42:	2e00      	cmp	r6, #0
 8030a44:	db05      	blt.n	8030a52 <_printf_i+0x10e>
 8030a46:	6821      	ldr	r1, [r4, #0]
 8030a48:	432e      	orrs	r6, r5
 8030a4a:	f021 0104 	bic.w	r1, r1, #4
 8030a4e:	6021      	str	r1, [r4, #0]
 8030a50:	d04b      	beq.n	8030aea <_printf_i+0x1a6>
 8030a52:	4616      	mov	r6, r2
 8030a54:	fbb5 f1f3 	udiv	r1, r5, r3
 8030a58:	fb03 5711 	mls	r7, r3, r1, r5
 8030a5c:	5dc7      	ldrb	r7, [r0, r7]
 8030a5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8030a62:	462f      	mov	r7, r5
 8030a64:	42bb      	cmp	r3, r7
 8030a66:	460d      	mov	r5, r1
 8030a68:	d9f4      	bls.n	8030a54 <_printf_i+0x110>
 8030a6a:	2b08      	cmp	r3, #8
 8030a6c:	d10b      	bne.n	8030a86 <_printf_i+0x142>
 8030a6e:	6823      	ldr	r3, [r4, #0]
 8030a70:	07df      	lsls	r7, r3, #31
 8030a72:	d508      	bpl.n	8030a86 <_printf_i+0x142>
 8030a74:	6923      	ldr	r3, [r4, #16]
 8030a76:	6861      	ldr	r1, [r4, #4]
 8030a78:	4299      	cmp	r1, r3
 8030a7a:	bfde      	ittt	le
 8030a7c:	2330      	movle	r3, #48	@ 0x30
 8030a7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8030a82:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8030a86:	1b92      	subs	r2, r2, r6
 8030a88:	6122      	str	r2, [r4, #16]
 8030a8a:	f8cd a000 	str.w	sl, [sp]
 8030a8e:	464b      	mov	r3, r9
 8030a90:	aa03      	add	r2, sp, #12
 8030a92:	4621      	mov	r1, r4
 8030a94:	4640      	mov	r0, r8
 8030a96:	f7ff fee7 	bl	8030868 <_printf_common>
 8030a9a:	3001      	adds	r0, #1
 8030a9c:	d14a      	bne.n	8030b34 <_printf_i+0x1f0>
 8030a9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8030aa2:	b004      	add	sp, #16
 8030aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8030aa8:	6823      	ldr	r3, [r4, #0]
 8030aaa:	f043 0320 	orr.w	r3, r3, #32
 8030aae:	6023      	str	r3, [r4, #0]
 8030ab0:	4832      	ldr	r0, [pc, #200]	@ (8030b7c <_printf_i+0x238>)
 8030ab2:	2778      	movs	r7, #120	@ 0x78
 8030ab4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8030ab8:	6823      	ldr	r3, [r4, #0]
 8030aba:	6831      	ldr	r1, [r6, #0]
 8030abc:	061f      	lsls	r7, r3, #24
 8030abe:	f851 5b04 	ldr.w	r5, [r1], #4
 8030ac2:	d402      	bmi.n	8030aca <_printf_i+0x186>
 8030ac4:	065f      	lsls	r7, r3, #25
 8030ac6:	bf48      	it	mi
 8030ac8:	b2ad      	uxthmi	r5, r5
 8030aca:	6031      	str	r1, [r6, #0]
 8030acc:	07d9      	lsls	r1, r3, #31
 8030ace:	bf44      	itt	mi
 8030ad0:	f043 0320 	orrmi.w	r3, r3, #32
 8030ad4:	6023      	strmi	r3, [r4, #0]
 8030ad6:	b11d      	cbz	r5, 8030ae0 <_printf_i+0x19c>
 8030ad8:	2310      	movs	r3, #16
 8030ada:	e7ad      	b.n	8030a38 <_printf_i+0xf4>
 8030adc:	4826      	ldr	r0, [pc, #152]	@ (8030b78 <_printf_i+0x234>)
 8030ade:	e7e9      	b.n	8030ab4 <_printf_i+0x170>
 8030ae0:	6823      	ldr	r3, [r4, #0]
 8030ae2:	f023 0320 	bic.w	r3, r3, #32
 8030ae6:	6023      	str	r3, [r4, #0]
 8030ae8:	e7f6      	b.n	8030ad8 <_printf_i+0x194>
 8030aea:	4616      	mov	r6, r2
 8030aec:	e7bd      	b.n	8030a6a <_printf_i+0x126>
 8030aee:	6833      	ldr	r3, [r6, #0]
 8030af0:	6825      	ldr	r5, [r4, #0]
 8030af2:	6961      	ldr	r1, [r4, #20]
 8030af4:	1d18      	adds	r0, r3, #4
 8030af6:	6030      	str	r0, [r6, #0]
 8030af8:	062e      	lsls	r6, r5, #24
 8030afa:	681b      	ldr	r3, [r3, #0]
 8030afc:	d501      	bpl.n	8030b02 <_printf_i+0x1be>
 8030afe:	6019      	str	r1, [r3, #0]
 8030b00:	e002      	b.n	8030b08 <_printf_i+0x1c4>
 8030b02:	0668      	lsls	r0, r5, #25
 8030b04:	d5fb      	bpl.n	8030afe <_printf_i+0x1ba>
 8030b06:	8019      	strh	r1, [r3, #0]
 8030b08:	2300      	movs	r3, #0
 8030b0a:	6123      	str	r3, [r4, #16]
 8030b0c:	4616      	mov	r6, r2
 8030b0e:	e7bc      	b.n	8030a8a <_printf_i+0x146>
 8030b10:	6833      	ldr	r3, [r6, #0]
 8030b12:	1d1a      	adds	r2, r3, #4
 8030b14:	6032      	str	r2, [r6, #0]
 8030b16:	681e      	ldr	r6, [r3, #0]
 8030b18:	6862      	ldr	r2, [r4, #4]
 8030b1a:	2100      	movs	r1, #0
 8030b1c:	4630      	mov	r0, r6
 8030b1e:	f7ef fd57 	bl	80205d0 <memchr>
 8030b22:	b108      	cbz	r0, 8030b28 <_printf_i+0x1e4>
 8030b24:	1b80      	subs	r0, r0, r6
 8030b26:	6060      	str	r0, [r4, #4]
 8030b28:	6863      	ldr	r3, [r4, #4]
 8030b2a:	6123      	str	r3, [r4, #16]
 8030b2c:	2300      	movs	r3, #0
 8030b2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8030b32:	e7aa      	b.n	8030a8a <_printf_i+0x146>
 8030b34:	6923      	ldr	r3, [r4, #16]
 8030b36:	4632      	mov	r2, r6
 8030b38:	4649      	mov	r1, r9
 8030b3a:	4640      	mov	r0, r8
 8030b3c:	47d0      	blx	sl
 8030b3e:	3001      	adds	r0, #1
 8030b40:	d0ad      	beq.n	8030a9e <_printf_i+0x15a>
 8030b42:	6823      	ldr	r3, [r4, #0]
 8030b44:	079b      	lsls	r3, r3, #30
 8030b46:	d413      	bmi.n	8030b70 <_printf_i+0x22c>
 8030b48:	68e0      	ldr	r0, [r4, #12]
 8030b4a:	9b03      	ldr	r3, [sp, #12]
 8030b4c:	4298      	cmp	r0, r3
 8030b4e:	bfb8      	it	lt
 8030b50:	4618      	movlt	r0, r3
 8030b52:	e7a6      	b.n	8030aa2 <_printf_i+0x15e>
 8030b54:	2301      	movs	r3, #1
 8030b56:	4632      	mov	r2, r6
 8030b58:	4649      	mov	r1, r9
 8030b5a:	4640      	mov	r0, r8
 8030b5c:	47d0      	blx	sl
 8030b5e:	3001      	adds	r0, #1
 8030b60:	d09d      	beq.n	8030a9e <_printf_i+0x15a>
 8030b62:	3501      	adds	r5, #1
 8030b64:	68e3      	ldr	r3, [r4, #12]
 8030b66:	9903      	ldr	r1, [sp, #12]
 8030b68:	1a5b      	subs	r3, r3, r1
 8030b6a:	42ab      	cmp	r3, r5
 8030b6c:	dcf2      	bgt.n	8030b54 <_printf_i+0x210>
 8030b6e:	e7eb      	b.n	8030b48 <_printf_i+0x204>
 8030b70:	2500      	movs	r5, #0
 8030b72:	f104 0619 	add.w	r6, r4, #25
 8030b76:	e7f5      	b.n	8030b64 <_printf_i+0x220>
 8030b78:	08033212 	.word	0x08033212
 8030b7c:	08033223 	.word	0x08033223

08030b80 <__sflush_r>:
 8030b80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8030b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030b88:	0716      	lsls	r6, r2, #28
 8030b8a:	4605      	mov	r5, r0
 8030b8c:	460c      	mov	r4, r1
 8030b8e:	d454      	bmi.n	8030c3a <__sflush_r+0xba>
 8030b90:	684b      	ldr	r3, [r1, #4]
 8030b92:	2b00      	cmp	r3, #0
 8030b94:	dc02      	bgt.n	8030b9c <__sflush_r+0x1c>
 8030b96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8030b98:	2b00      	cmp	r3, #0
 8030b9a:	dd48      	ble.n	8030c2e <__sflush_r+0xae>
 8030b9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8030b9e:	2e00      	cmp	r6, #0
 8030ba0:	d045      	beq.n	8030c2e <__sflush_r+0xae>
 8030ba2:	2300      	movs	r3, #0
 8030ba4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8030ba8:	682f      	ldr	r7, [r5, #0]
 8030baa:	6a21      	ldr	r1, [r4, #32]
 8030bac:	602b      	str	r3, [r5, #0]
 8030bae:	d030      	beq.n	8030c12 <__sflush_r+0x92>
 8030bb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8030bb2:	89a3      	ldrh	r3, [r4, #12]
 8030bb4:	0759      	lsls	r1, r3, #29
 8030bb6:	d505      	bpl.n	8030bc4 <__sflush_r+0x44>
 8030bb8:	6863      	ldr	r3, [r4, #4]
 8030bba:	1ad2      	subs	r2, r2, r3
 8030bbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8030bbe:	b10b      	cbz	r3, 8030bc4 <__sflush_r+0x44>
 8030bc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8030bc2:	1ad2      	subs	r2, r2, r3
 8030bc4:	2300      	movs	r3, #0
 8030bc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8030bc8:	6a21      	ldr	r1, [r4, #32]
 8030bca:	4628      	mov	r0, r5
 8030bcc:	47b0      	blx	r6
 8030bce:	1c43      	adds	r3, r0, #1
 8030bd0:	89a3      	ldrh	r3, [r4, #12]
 8030bd2:	d106      	bne.n	8030be2 <__sflush_r+0x62>
 8030bd4:	6829      	ldr	r1, [r5, #0]
 8030bd6:	291d      	cmp	r1, #29
 8030bd8:	d82b      	bhi.n	8030c32 <__sflush_r+0xb2>
 8030bda:	4a2a      	ldr	r2, [pc, #168]	@ (8030c84 <__sflush_r+0x104>)
 8030bdc:	40ca      	lsrs	r2, r1
 8030bde:	07d6      	lsls	r6, r2, #31
 8030be0:	d527      	bpl.n	8030c32 <__sflush_r+0xb2>
 8030be2:	2200      	movs	r2, #0
 8030be4:	6062      	str	r2, [r4, #4]
 8030be6:	04d9      	lsls	r1, r3, #19
 8030be8:	6922      	ldr	r2, [r4, #16]
 8030bea:	6022      	str	r2, [r4, #0]
 8030bec:	d504      	bpl.n	8030bf8 <__sflush_r+0x78>
 8030bee:	1c42      	adds	r2, r0, #1
 8030bf0:	d101      	bne.n	8030bf6 <__sflush_r+0x76>
 8030bf2:	682b      	ldr	r3, [r5, #0]
 8030bf4:	b903      	cbnz	r3, 8030bf8 <__sflush_r+0x78>
 8030bf6:	6560      	str	r0, [r4, #84]	@ 0x54
 8030bf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8030bfa:	602f      	str	r7, [r5, #0]
 8030bfc:	b1b9      	cbz	r1, 8030c2e <__sflush_r+0xae>
 8030bfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8030c02:	4299      	cmp	r1, r3
 8030c04:	d002      	beq.n	8030c0c <__sflush_r+0x8c>
 8030c06:	4628      	mov	r0, r5
 8030c08:	f7ff fca2 	bl	8030550 <_free_r>
 8030c0c:	2300      	movs	r3, #0
 8030c0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8030c10:	e00d      	b.n	8030c2e <__sflush_r+0xae>
 8030c12:	2301      	movs	r3, #1
 8030c14:	4628      	mov	r0, r5
 8030c16:	47b0      	blx	r6
 8030c18:	4602      	mov	r2, r0
 8030c1a:	1c50      	adds	r0, r2, #1
 8030c1c:	d1c9      	bne.n	8030bb2 <__sflush_r+0x32>
 8030c1e:	682b      	ldr	r3, [r5, #0]
 8030c20:	2b00      	cmp	r3, #0
 8030c22:	d0c6      	beq.n	8030bb2 <__sflush_r+0x32>
 8030c24:	2b1d      	cmp	r3, #29
 8030c26:	d001      	beq.n	8030c2c <__sflush_r+0xac>
 8030c28:	2b16      	cmp	r3, #22
 8030c2a:	d11e      	bne.n	8030c6a <__sflush_r+0xea>
 8030c2c:	602f      	str	r7, [r5, #0]
 8030c2e:	2000      	movs	r0, #0
 8030c30:	e022      	b.n	8030c78 <__sflush_r+0xf8>
 8030c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8030c36:	b21b      	sxth	r3, r3
 8030c38:	e01b      	b.n	8030c72 <__sflush_r+0xf2>
 8030c3a:	690f      	ldr	r7, [r1, #16]
 8030c3c:	2f00      	cmp	r7, #0
 8030c3e:	d0f6      	beq.n	8030c2e <__sflush_r+0xae>
 8030c40:	0793      	lsls	r3, r2, #30
 8030c42:	680e      	ldr	r6, [r1, #0]
 8030c44:	bf08      	it	eq
 8030c46:	694b      	ldreq	r3, [r1, #20]
 8030c48:	600f      	str	r7, [r1, #0]
 8030c4a:	bf18      	it	ne
 8030c4c:	2300      	movne	r3, #0
 8030c4e:	eba6 0807 	sub.w	r8, r6, r7
 8030c52:	608b      	str	r3, [r1, #8]
 8030c54:	f1b8 0f00 	cmp.w	r8, #0
 8030c58:	dde9      	ble.n	8030c2e <__sflush_r+0xae>
 8030c5a:	6a21      	ldr	r1, [r4, #32]
 8030c5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8030c5e:	4643      	mov	r3, r8
 8030c60:	463a      	mov	r2, r7
 8030c62:	4628      	mov	r0, r5
 8030c64:	47b0      	blx	r6
 8030c66:	2800      	cmp	r0, #0
 8030c68:	dc08      	bgt.n	8030c7c <__sflush_r+0xfc>
 8030c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8030c72:	81a3      	strh	r3, [r4, #12]
 8030c74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8030c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030c7c:	4407      	add	r7, r0
 8030c7e:	eba8 0800 	sub.w	r8, r8, r0
 8030c82:	e7e7      	b.n	8030c54 <__sflush_r+0xd4>
 8030c84:	20400001 	.word	0x20400001

08030c88 <_fflush_r>:
 8030c88:	b538      	push	{r3, r4, r5, lr}
 8030c8a:	690b      	ldr	r3, [r1, #16]
 8030c8c:	4605      	mov	r5, r0
 8030c8e:	460c      	mov	r4, r1
 8030c90:	b913      	cbnz	r3, 8030c98 <_fflush_r+0x10>
 8030c92:	2500      	movs	r5, #0
 8030c94:	4628      	mov	r0, r5
 8030c96:	bd38      	pop	{r3, r4, r5, pc}
 8030c98:	b118      	cbz	r0, 8030ca2 <_fflush_r+0x1a>
 8030c9a:	6a03      	ldr	r3, [r0, #32]
 8030c9c:	b90b      	cbnz	r3, 8030ca2 <_fflush_r+0x1a>
 8030c9e:	f7ff f9f9 	bl	8030094 <__sinit>
 8030ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030ca6:	2b00      	cmp	r3, #0
 8030ca8:	d0f3      	beq.n	8030c92 <_fflush_r+0xa>
 8030caa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8030cac:	07d0      	lsls	r0, r2, #31
 8030cae:	d404      	bmi.n	8030cba <_fflush_r+0x32>
 8030cb0:	0599      	lsls	r1, r3, #22
 8030cb2:	d402      	bmi.n	8030cba <_fflush_r+0x32>
 8030cb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8030cb6:	f7ff fc32 	bl	803051e <__retarget_lock_acquire_recursive>
 8030cba:	4628      	mov	r0, r5
 8030cbc:	4621      	mov	r1, r4
 8030cbe:	f7ff ff5f 	bl	8030b80 <__sflush_r>
 8030cc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8030cc4:	07da      	lsls	r2, r3, #31
 8030cc6:	4605      	mov	r5, r0
 8030cc8:	d4e4      	bmi.n	8030c94 <_fflush_r+0xc>
 8030cca:	89a3      	ldrh	r3, [r4, #12]
 8030ccc:	059b      	lsls	r3, r3, #22
 8030cce:	d4e1      	bmi.n	8030c94 <_fflush_r+0xc>
 8030cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8030cd2:	f7ff fc25 	bl	8030520 <__retarget_lock_release_recursive>
 8030cd6:	e7dd      	b.n	8030c94 <_fflush_r+0xc>

08030cd8 <__swhatbuf_r>:
 8030cd8:	b570      	push	{r4, r5, r6, lr}
 8030cda:	460c      	mov	r4, r1
 8030cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8030ce0:	2900      	cmp	r1, #0
 8030ce2:	b096      	sub	sp, #88	@ 0x58
 8030ce4:	4615      	mov	r5, r2
 8030ce6:	461e      	mov	r6, r3
 8030ce8:	da0d      	bge.n	8030d06 <__swhatbuf_r+0x2e>
 8030cea:	89a3      	ldrh	r3, [r4, #12]
 8030cec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8030cf0:	f04f 0100 	mov.w	r1, #0
 8030cf4:	bf14      	ite	ne
 8030cf6:	2340      	movne	r3, #64	@ 0x40
 8030cf8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8030cfc:	2000      	movs	r0, #0
 8030cfe:	6031      	str	r1, [r6, #0]
 8030d00:	602b      	str	r3, [r5, #0]
 8030d02:	b016      	add	sp, #88	@ 0x58
 8030d04:	bd70      	pop	{r4, r5, r6, pc}
 8030d06:	466a      	mov	r2, sp
 8030d08:	f000 f848 	bl	8030d9c <_fstat_r>
 8030d0c:	2800      	cmp	r0, #0
 8030d0e:	dbec      	blt.n	8030cea <__swhatbuf_r+0x12>
 8030d10:	9901      	ldr	r1, [sp, #4]
 8030d12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8030d16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8030d1a:	4259      	negs	r1, r3
 8030d1c:	4159      	adcs	r1, r3
 8030d1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8030d22:	e7eb      	b.n	8030cfc <__swhatbuf_r+0x24>

08030d24 <__smakebuf_r>:
 8030d24:	898b      	ldrh	r3, [r1, #12]
 8030d26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8030d28:	079d      	lsls	r5, r3, #30
 8030d2a:	4606      	mov	r6, r0
 8030d2c:	460c      	mov	r4, r1
 8030d2e:	d507      	bpl.n	8030d40 <__smakebuf_r+0x1c>
 8030d30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8030d34:	6023      	str	r3, [r4, #0]
 8030d36:	6123      	str	r3, [r4, #16]
 8030d38:	2301      	movs	r3, #1
 8030d3a:	6163      	str	r3, [r4, #20]
 8030d3c:	b003      	add	sp, #12
 8030d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8030d40:	ab01      	add	r3, sp, #4
 8030d42:	466a      	mov	r2, sp
 8030d44:	f7ff ffc8 	bl	8030cd8 <__swhatbuf_r>
 8030d48:	9f00      	ldr	r7, [sp, #0]
 8030d4a:	4605      	mov	r5, r0
 8030d4c:	4639      	mov	r1, r7
 8030d4e:	4630      	mov	r0, r6
 8030d50:	f7ff f888 	bl	802fe64 <_malloc_r>
 8030d54:	b948      	cbnz	r0, 8030d6a <__smakebuf_r+0x46>
 8030d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030d5a:	059a      	lsls	r2, r3, #22
 8030d5c:	d4ee      	bmi.n	8030d3c <__smakebuf_r+0x18>
 8030d5e:	f023 0303 	bic.w	r3, r3, #3
 8030d62:	f043 0302 	orr.w	r3, r3, #2
 8030d66:	81a3      	strh	r3, [r4, #12]
 8030d68:	e7e2      	b.n	8030d30 <__smakebuf_r+0xc>
 8030d6a:	89a3      	ldrh	r3, [r4, #12]
 8030d6c:	6020      	str	r0, [r4, #0]
 8030d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8030d72:	81a3      	strh	r3, [r4, #12]
 8030d74:	9b01      	ldr	r3, [sp, #4]
 8030d76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8030d7a:	b15b      	cbz	r3, 8030d94 <__smakebuf_r+0x70>
 8030d7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8030d80:	4630      	mov	r0, r6
 8030d82:	f000 f81d 	bl	8030dc0 <_isatty_r>
 8030d86:	b128      	cbz	r0, 8030d94 <__smakebuf_r+0x70>
 8030d88:	89a3      	ldrh	r3, [r4, #12]
 8030d8a:	f023 0303 	bic.w	r3, r3, #3
 8030d8e:	f043 0301 	orr.w	r3, r3, #1
 8030d92:	81a3      	strh	r3, [r4, #12]
 8030d94:	89a3      	ldrh	r3, [r4, #12]
 8030d96:	431d      	orrs	r5, r3
 8030d98:	81a5      	strh	r5, [r4, #12]
 8030d9a:	e7cf      	b.n	8030d3c <__smakebuf_r+0x18>

08030d9c <_fstat_r>:
 8030d9c:	b538      	push	{r3, r4, r5, lr}
 8030d9e:	4d07      	ldr	r5, [pc, #28]	@ (8030dbc <_fstat_r+0x20>)
 8030da0:	2300      	movs	r3, #0
 8030da2:	4604      	mov	r4, r0
 8030da4:	4608      	mov	r0, r1
 8030da6:	4611      	mov	r1, r2
 8030da8:	602b      	str	r3, [r5, #0]
 8030daa:	f7fb f900 	bl	802bfae <_fstat>
 8030dae:	1c43      	adds	r3, r0, #1
 8030db0:	d102      	bne.n	8030db8 <_fstat_r+0x1c>
 8030db2:	682b      	ldr	r3, [r5, #0]
 8030db4:	b103      	cbz	r3, 8030db8 <_fstat_r+0x1c>
 8030db6:	6023      	str	r3, [r4, #0]
 8030db8:	bd38      	pop	{r3, r4, r5, pc}
 8030dba:	bf00      	nop
 8030dbc:	200016dc 	.word	0x200016dc

08030dc0 <_isatty_r>:
 8030dc0:	b538      	push	{r3, r4, r5, lr}
 8030dc2:	4d06      	ldr	r5, [pc, #24]	@ (8030ddc <_isatty_r+0x1c>)
 8030dc4:	2300      	movs	r3, #0
 8030dc6:	4604      	mov	r4, r0
 8030dc8:	4608      	mov	r0, r1
 8030dca:	602b      	str	r3, [r5, #0]
 8030dcc:	f7fb f8ff 	bl	802bfce <_isatty>
 8030dd0:	1c43      	adds	r3, r0, #1
 8030dd2:	d102      	bne.n	8030dda <_isatty_r+0x1a>
 8030dd4:	682b      	ldr	r3, [r5, #0]
 8030dd6:	b103      	cbz	r3, 8030dda <_isatty_r+0x1a>
 8030dd8:	6023      	str	r3, [r4, #0]
 8030dda:	bd38      	pop	{r3, r4, r5, pc}
 8030ddc:	200016dc 	.word	0x200016dc

08030de0 <_init>:
 8030de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030de2:	bf00      	nop
 8030de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8030de6:	bc08      	pop	{r3}
 8030de8:	469e      	mov	lr, r3
 8030dea:	4770      	bx	lr

08030dec <_fini>:
 8030dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030dee:	bf00      	nop
 8030df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8030df2:	bc08      	pop	{r3}
 8030df4:	469e      	mov	lr, r3
 8030df6:	4770      	bx	lr
