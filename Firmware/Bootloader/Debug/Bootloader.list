
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e4c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .code_in_ram  000000ac  08004fdc  08004fdc  00005fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000009f4  08005088  08005088  00006088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08005a7c  08005a7c  00007088  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  08005a7c  08005a7c  00006a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08005a84  08005a84  00007088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08005a84  08005a84  00006a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08005a88  08005a88  00006a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000088  20000000  08005a8c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  00007088  2**0
                  CONTENTS
 11 .bss          00000240  20000088  20000088  00007088  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200002c8  200002c8  00007088  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010541  00000000  00000000  000070b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003458  00000000  00000000  000175f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a38  00000000  00000000  0001aa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000797  00000000  00000000  0001b490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002540d  00000000  00000000  0001bc27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011ca1  00000000  00000000  00041034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf147  00000000  00000000  00052cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00121e1c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000232c  00000000  00000000  00121e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 00003af5  00000000  00000000  0012418c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000067  00000000  00000000  00127c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004fc4 	.word	0x08004fc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08004fc4 	.word	0x08004fc4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b30:	f000 b9be 	b.w	8000eb0 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f83c 	bl	8000bb8 <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_d2lz>:
 8000b4c:	b538      	push	{r3, r4, r5, lr}
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2300      	movs	r3, #0
 8000b52:	4604      	mov	r4, r0
 8000b54:	460d      	mov	r5, r1
 8000b56:	f7ff ffb9 	bl	8000acc <__aeabi_dcmplt>
 8000b5a:	b928      	cbnz	r0, 8000b68 <__aeabi_d2lz+0x1c>
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	4629      	mov	r1, r5
 8000b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b64:	f000 b80a 	b.w	8000b7c <__aeabi_d2ulz>
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b6e:	f000 f805 	bl	8000b7c <__aeabi_d2ulz>
 8000b72:	4240      	negs	r0, r0
 8000b74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b78:	bd38      	pop	{r3, r4, r5, pc}
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2ulz>:
 8000b7c:	b5d0      	push	{r4, r6, r7, lr}
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <__aeabi_d2ulz+0x34>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	4606      	mov	r6, r0
 8000b84:	460f      	mov	r7, r1
 8000b86:	f7ff fd2f 	bl	80005e8 <__aeabi_dmul>
 8000b8a:	f000 f993 	bl	8000eb4 <__aeabi_d2uiz>
 8000b8e:	4604      	mov	r4, r0
 8000b90:	f7ff fcb0 	bl	80004f4 <__aeabi_ui2d>
 8000b94:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <__aeabi_d2ulz+0x38>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	f7ff fd26 	bl	80005e8 <__aeabi_dmul>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	4630      	mov	r0, r6
 8000ba2:	4639      	mov	r1, r7
 8000ba4:	f7ff fb68 	bl	8000278 <__aeabi_dsub>
 8000ba8:	f000 f984 	bl	8000eb4 <__aeabi_d2uiz>
 8000bac:	4621      	mov	r1, r4
 8000bae:	bdd0      	pop	{r4, r6, r7, pc}
 8000bb0:	3df00000 	.word	0x3df00000
 8000bb4:	41f00000 	.word	0x41f00000

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	468e      	mov	lr, r1
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	4688      	mov	r8, r1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d14a      	bne.n	8000c5e <__udivmoddi4+0xa6>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4617      	mov	r7, r2
 8000bcc:	d962      	bls.n	8000c94 <__udivmoddi4+0xdc>
 8000bce:	fab2 f682 	clz	r6, r2
 8000bd2:	b14e      	cbz	r6, 8000be8 <__udivmoddi4+0x30>
 8000bd4:	f1c6 0320 	rsb	r3, r6, #32
 8000bd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000be0:	40b7      	lsls	r7, r6
 8000be2:	ea43 0808 	orr.w	r8, r3, r8
 8000be6:	40b4      	lsls	r4, r6
 8000be8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bec:	fa1f fc87 	uxth.w	ip, r7
 8000bf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bf4:	0c23      	lsrs	r3, r4, #16
 8000bf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x62>
 8000c06:	18fb      	adds	r3, r7, r3
 8000c08:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c0c:	f080 80ea 	bcs.w	8000de4 <__udivmoddi4+0x22c>
 8000c10:	429a      	cmp	r2, r3
 8000c12:	f240 80e7 	bls.w	8000de4 <__udivmoddi4+0x22c>
 8000c16:	3902      	subs	r1, #2
 8000c18:	443b      	add	r3, r7
 8000c1a:	1a9a      	subs	r2, r3, r2
 8000c1c:	b2a3      	uxth	r3, r4
 8000c1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c2e:	459c      	cmp	ip, r3
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0x8e>
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c38:	f080 80d6 	bcs.w	8000de8 <__udivmoddi4+0x230>
 8000c3c:	459c      	cmp	ip, r3
 8000c3e:	f240 80d3 	bls.w	8000de8 <__udivmoddi4+0x230>
 8000c42:	443b      	add	r3, r7
 8000c44:	3802      	subs	r0, #2
 8000c46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c4a:	eba3 030c 	sub.w	r3, r3, ip
 8000c4e:	2100      	movs	r1, #0
 8000c50:	b11d      	cbz	r5, 8000c5a <__udivmoddi4+0xa2>
 8000c52:	40f3      	lsrs	r3, r6
 8000c54:	2200      	movs	r2, #0
 8000c56:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d905      	bls.n	8000c6e <__udivmoddi4+0xb6>
 8000c62:	b10d      	cbz	r5, 8000c68 <__udivmoddi4+0xb0>
 8000c64:	e9c5 0100 	strd	r0, r1, [r5]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4608      	mov	r0, r1
 8000c6c:	e7f5      	b.n	8000c5a <__udivmoddi4+0xa2>
 8000c6e:	fab3 f183 	clz	r1, r3
 8000c72:	2900      	cmp	r1, #0
 8000c74:	d146      	bne.n	8000d04 <__udivmoddi4+0x14c>
 8000c76:	4573      	cmp	r3, lr
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xc8>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 8105 	bhi.w	8000e8a <__udivmoddi4+0x2d2>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	4690      	mov	r8, r2
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e5      	beq.n	8000c5a <__udivmoddi4+0xa2>
 8000c8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000c92:	e7e2      	b.n	8000c5a <__udivmoddi4+0xa2>
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f000 8090 	beq.w	8000dba <__udivmoddi4+0x202>
 8000c9a:	fab2 f682 	clz	r6, r2
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	f040 80a4 	bne.w	8000dec <__udivmoddi4+0x234>
 8000ca4:	1a8a      	subs	r2, r1, r2
 8000ca6:	0c03      	lsrs	r3, r0, #16
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	b280      	uxth	r0, r0
 8000cae:	b2bc      	uxth	r4, r7
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cb6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x11e>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x11c>
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	f200 80e0 	bhi.w	8000e94 <__udivmoddi4+0x2dc>
 8000cd4:	46c4      	mov	ip, r8
 8000cd6:	1a9b      	subs	r3, r3, r2
 8000cd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cdc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ce0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ce4:	fb02 f404 	mul.w	r4, r2, r4
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x144>
 8000cec:	18fb      	adds	r3, r7, r3
 8000cee:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x142>
 8000cf4:	429c      	cmp	r4, r3
 8000cf6:	f200 80ca 	bhi.w	8000e8e <__udivmoddi4+0x2d6>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	1b1b      	subs	r3, r3, r4
 8000cfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d02:	e7a5      	b.n	8000c50 <__udivmoddi4+0x98>
 8000d04:	f1c1 0620 	rsb	r6, r1, #32
 8000d08:	408b      	lsls	r3, r1
 8000d0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d0e:	431f      	orrs	r7, r3
 8000d10:	fa0e f401 	lsl.w	r4, lr, r1
 8000d14:	fa20 f306 	lsr.w	r3, r0, r6
 8000d18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d20:	4323      	orrs	r3, r4
 8000d22:	fa00 f801 	lsl.w	r8, r0, r1
 8000d26:	fa1f fc87 	uxth.w	ip, r7
 8000d2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d2e:	0c1c      	lsrs	r4, r3, #16
 8000d30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x1a0>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d4a:	f080 809c 	bcs.w	8000e86 <__udivmoddi4+0x2ce>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f240 8099 	bls.w	8000e86 <__udivmoddi4+0x2ce>
 8000d54:	3802      	subs	r0, #2
 8000d56:	443c      	add	r4, r7
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	fa1f fe83 	uxth.w	lr, r3
 8000d60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d64:	fb09 4413 	mls	r4, r9, r3, r4
 8000d68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d70:	45a4      	cmp	ip, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1ce>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d7a:	f080 8082 	bcs.w	8000e82 <__udivmoddi4+0x2ca>
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d97f      	bls.n	8000e82 <__udivmoddi4+0x2ca>
 8000d82:	3b02      	subs	r3, #2
 8000d84:	443c      	add	r4, r7
 8000d86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d8a:	eba4 040c 	sub.w	r4, r4, ip
 8000d8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d92:	4564      	cmp	r4, ip
 8000d94:	4673      	mov	r3, lr
 8000d96:	46e1      	mov	r9, ip
 8000d98:	d362      	bcc.n	8000e60 <__udivmoddi4+0x2a8>
 8000d9a:	d05f      	beq.n	8000e5c <__udivmoddi4+0x2a4>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x1fe>
 8000d9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000da2:	eb64 0409 	sbc.w	r4, r4, r9
 8000da6:	fa04 f606 	lsl.w	r6, r4, r6
 8000daa:	fa22 f301 	lsr.w	r3, r2, r1
 8000dae:	431e      	orrs	r6, r3
 8000db0:	40cc      	lsrs	r4, r1
 8000db2:	e9c5 6400 	strd	r6, r4, [r5]
 8000db6:	2100      	movs	r1, #0
 8000db8:	e74f      	b.n	8000c5a <__udivmoddi4+0xa2>
 8000dba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dbe:	0c01      	lsrs	r1, r0, #16
 8000dc0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dc4:	b280      	uxth	r0, r0
 8000dc6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4638      	mov	r0, r7
 8000dce:	463c      	mov	r4, r7
 8000dd0:	46b8      	mov	r8, r7
 8000dd2:	46be      	mov	lr, r7
 8000dd4:	2620      	movs	r6, #32
 8000dd6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dda:	eba2 0208 	sub.w	r2, r2, r8
 8000dde:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000de2:	e766      	b.n	8000cb2 <__udivmoddi4+0xfa>
 8000de4:	4601      	mov	r1, r0
 8000de6:	e718      	b.n	8000c1a <__udivmoddi4+0x62>
 8000de8:	4610      	mov	r0, r2
 8000dea:	e72c      	b.n	8000c46 <__udivmoddi4+0x8e>
 8000dec:	f1c6 0220 	rsb	r2, r6, #32
 8000df0:	fa2e f302 	lsr.w	r3, lr, r2
 8000df4:	40b7      	lsls	r7, r6
 8000df6:	40b1      	lsls	r1, r6
 8000df8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dfc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e00:	430a      	orrs	r2, r1
 8000e02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e06:	b2bc      	uxth	r4, r7
 8000e08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb08 f904 	mul.w	r9, r8, r4
 8000e16:	40b0      	lsls	r0, r6
 8000e18:	4589      	cmp	r9, r1
 8000e1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e1e:	b280      	uxth	r0, r0
 8000e20:	d93e      	bls.n	8000ea0 <__udivmoddi4+0x2e8>
 8000e22:	1879      	adds	r1, r7, r1
 8000e24:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e28:	d201      	bcs.n	8000e2e <__udivmoddi4+0x276>
 8000e2a:	4589      	cmp	r9, r1
 8000e2c:	d81f      	bhi.n	8000e6e <__udivmoddi4+0x2b6>
 8000e2e:	eba1 0109 	sub.w	r1, r1, r9
 8000e32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e36:	fb09 f804 	mul.w	r8, r9, r4
 8000e3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e3e:	b292      	uxth	r2, r2
 8000e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e44:	4542      	cmp	r2, r8
 8000e46:	d229      	bcs.n	8000e9c <__udivmoddi4+0x2e4>
 8000e48:	18ba      	adds	r2, r7, r2
 8000e4a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e4e:	d2c4      	bcs.n	8000dda <__udivmoddi4+0x222>
 8000e50:	4542      	cmp	r2, r8
 8000e52:	d2c2      	bcs.n	8000dda <__udivmoddi4+0x222>
 8000e54:	f1a9 0102 	sub.w	r1, r9, #2
 8000e58:	443a      	add	r2, r7
 8000e5a:	e7be      	b.n	8000dda <__udivmoddi4+0x222>
 8000e5c:	45f0      	cmp	r8, lr
 8000e5e:	d29d      	bcs.n	8000d9c <__udivmoddi4+0x1e4>
 8000e60:	ebbe 0302 	subs.w	r3, lr, r2
 8000e64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e68:	3801      	subs	r0, #1
 8000e6a:	46e1      	mov	r9, ip
 8000e6c:	e796      	b.n	8000d9c <__udivmoddi4+0x1e4>
 8000e6e:	eba7 0909 	sub.w	r9, r7, r9
 8000e72:	4449      	add	r1, r9
 8000e74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7c:	fb09 f804 	mul.w	r8, r9, r4
 8000e80:	e7db      	b.n	8000e3a <__udivmoddi4+0x282>
 8000e82:	4673      	mov	r3, lr
 8000e84:	e77f      	b.n	8000d86 <__udivmoddi4+0x1ce>
 8000e86:	4650      	mov	r0, sl
 8000e88:	e766      	b.n	8000d58 <__udivmoddi4+0x1a0>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e6fd      	b.n	8000c8a <__udivmoddi4+0xd2>
 8000e8e:	443b      	add	r3, r7
 8000e90:	3a02      	subs	r2, #2
 8000e92:	e733      	b.n	8000cfc <__udivmoddi4+0x144>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	443b      	add	r3, r7
 8000e9a:	e71c      	b.n	8000cd6 <__udivmoddi4+0x11e>
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	e79c      	b.n	8000dda <__udivmoddi4+0x222>
 8000ea0:	eba1 0109 	sub.w	r1, r1, r9
 8000ea4:	46c4      	mov	ip, r8
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fb09 f804 	mul.w	r8, r9, r4
 8000eae:	e7c4      	b.n	8000e3a <__udivmoddi4+0x282>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_d2uiz>:
 8000eb4:	004a      	lsls	r2, r1, #1
 8000eb6:	d211      	bcs.n	8000edc <__aeabi_d2uiz+0x28>
 8000eb8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ebc:	d211      	bcs.n	8000ee2 <__aeabi_d2uiz+0x2e>
 8000ebe:	d50d      	bpl.n	8000edc <__aeabi_d2uiz+0x28>
 8000ec0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ec4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ec8:	d40e      	bmi.n	8000ee8 <__aeabi_d2uiz+0x34>
 8000eca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ece:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ed2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ed6:	fa23 f002 	lsr.w	r0, r3, r2
 8000eda:	4770      	bx	lr
 8000edc:	f04f 0000 	mov.w	r0, #0
 8000ee0:	4770      	bx	lr
 8000ee2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ee6:	d102      	bne.n	8000eee <__aeabi_d2uiz+0x3a>
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000eec:	4770      	bx	lr
 8000eee:	f04f 0000 	mov.w	r0, #0
 8000ef2:	4770      	bx	lr

08000ef4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef4:	b530      	push	{r4, r5, lr}
 8000ef6:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	2400      	movs	r4, #0
 8000efa:	9403      	str	r4, [sp, #12]
 8000efc:	9404      	str	r4, [sp, #16]
 8000efe:	9405      	str	r4, [sp, #20]
 8000f00:	9406      	str	r4, [sp, #24]
 8000f02:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f04:	9401      	str	r4, [sp, #4]
 8000f06:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <MX_GPIO_Init+0x64>)
 8000f08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f12:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000f16:	9201      	str	r2, [sp, #4]
 8000f18:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1a:	9402      	str	r4, [sp, #8]
 8000f1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f1e:	f042 0208 	orr.w	r2, r2, #8
 8000f22:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f2e:	4d0b      	ldr	r5, [pc, #44]	@ (8000f5c <MX_GPIO_Init+0x68>)
 8000f30:	4622      	mov	r2, r4
 8000f32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f36:	4628      	mov	r0, r5
 8000f38:	f000 fd88 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000f3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f40:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	a903      	add	r1, sp, #12
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	f000 fc87 	bl	8001860 <HAL_GPIO_Init>

}
 8000f52:	b009      	add	sp, #36	@ 0x24
 8000f54:	bd30      	pop	{r4, r5, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020c00 	.word	0x40020c00

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b500      	push	{lr}
 8000f62:	b085      	sub	sp, #20
  /* USER CODE BEGIN Error_Handler_Debug */
	STM32_LOGE(TAG, "%s, line: %d", __FILE__,__LINE__);
 8000f64:	f003 f860 	bl	8004028 <stm32_log_timestamp>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4906      	ldr	r1, [pc, #24]	@ (8000f84 <Error_Handler+0x24>)
 8000f6c:	22e5      	movs	r2, #229	@ 0xe5
 8000f6e:	9202      	str	r2, [sp, #8]
 8000f70:	4a05      	ldr	r2, [pc, #20]	@ (8000f88 <Error_Handler+0x28>)
 8000f72:	9201      	str	r2, [sp, #4]
 8000f74:	9100      	str	r1, [sp, #0]
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <Error_Handler+0x2c>)
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f003 f859 	bl	8004030 <stm32_log_write>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7e:	b672      	cpsid	i
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f80:	e7fe      	b.n	8000f80 <Error_Handler+0x20>
 8000f82:	bf00      	nop
 8000f84:	080050a4 	.word	0x080050a4
 8000f88:	080050ac 	.word	0x080050ac
 8000f8c:	08005088 	.word	0x08005088

08000f90 <SystemClock_Config>:
{
 8000f90:	b500      	push	{lr}
 8000f92:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f94:	2230      	movs	r2, #48	@ 0x30
 8000f96:	2100      	movs	r1, #0
 8000f98:	a808      	add	r0, sp, #32
 8000f9a:	f003 fb31 	bl	8004600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	9303      	str	r3, [sp, #12]
 8000fa2:	9304      	str	r3, [sp, #16]
 8000fa4:	9305      	str	r3, [sp, #20]
 8000fa6:	9306      	str	r3, [sp, #24]
 8000fa8:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	4a1f      	ldr	r2, [pc, #124]	@ (800102c <SystemClock_Config+0x9c>)
 8000fae:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000fb0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000fb4:	6411      	str	r1, [r2, #64]	@ 0x40
 8000fb6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000fb8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000fbc:	9201      	str	r2, [sp, #4]
 8000fbe:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8001030 <SystemClock_Config+0xa0>)
 8000fc4:	6811      	ldr	r1, [r2, #0]
 8000fc6:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8000fca:	6011      	str	r1, [r2, #0]
 8000fcc:	6812      	ldr	r2, [r2, #0]
 8000fce:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000fd2:	9202      	str	r2, [sp, #8]
 8000fd4:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fda:	2101      	movs	r1, #1
 8000fdc:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fde:	2110      	movs	r1, #16
 8000fe0:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe2:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe4:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fea:	23a8      	movs	r3, #168	@ 0xa8
 8000fec:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fee:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff4:	a808      	add	r0, sp, #32
 8000ff6:	f000 fd39 	bl	8001a6c <HAL_RCC_OscConfig>
 8000ffa:	b998      	cbnz	r0, 8001024 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001000:	2302      	movs	r3, #2
 8001002:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001008:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800100c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800100e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001012:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001014:	2105      	movs	r1, #5
 8001016:	a803      	add	r0, sp, #12
 8001018:	f000 ff92 	bl	8001f40 <HAL_RCC_ClockConfig>
 800101c:	b920      	cbnz	r0, 8001028 <SystemClock_Config+0x98>
}
 800101e:	b015      	add	sp, #84	@ 0x54
 8001020:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001024:	f7ff ff9c 	bl	8000f60 <Error_Handler>
    Error_Handler();
 8001028:	f7ff ff9a 	bl	8000f60 <Error_Handler>
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <main>:
{
 8001034:	b530      	push	{r4, r5, lr}
 8001036:	b085      	sub	sp, #20
  HAL_Init();
 8001038:	f000 f9a8 	bl	800138c <HAL_Init>
  SystemClock_Config();
 800103c:	f7ff ffa8 	bl	8000f90 <SystemClock_Config>
  MX_GPIO_Init();
 8001040:	f7ff ff58 	bl	8000ef4 <MX_GPIO_Init>
  MX_RNG_Init();
 8001044:	f000 f8aa 	bl	800119c <MX_RNG_Init>
	stm32_log_init(NULL);
 8001048:	2000      	movs	r0, #0
 800104a:	f002 ffdb 	bl	8004004 <stm32_log_init>
	STM32_LOGI(TAG, "\r\n");
 800104e:	f002 ffeb 	bl	8004028 <stm32_log_timestamp>
 8001052:	4603      	mov	r3, r0
 8001054:	4c41      	ldr	r4, [pc, #260]	@ (800115c <main+0x128>)
 8001056:	9400      	str	r4, [sp, #0]
 8001058:	4a41      	ldr	r2, [pc, #260]	@ (8001160 <main+0x12c>)
 800105a:	4621      	mov	r1, r4
 800105c:	2003      	movs	r0, #3
 800105e:	f002 ffe7 	bl	8004030 <stm32_log_write>
	STM32_LOGI(TAG, "**********************************************");
 8001062:	f002 ffe1 	bl	8004028 <stm32_log_timestamp>
 8001066:	4603      	mov	r3, r0
 8001068:	4d3e      	ldr	r5, [pc, #248]	@ (8001164 <main+0x130>)
 800106a:	9400      	str	r4, [sp, #0]
 800106c:	462a      	mov	r2, r5
 800106e:	4621      	mov	r1, r4
 8001070:	2003      	movs	r0, #3
 8001072:	f002 ffdd 	bl	8004030 <stm32_log_write>
	STM32_LOGI(TAG, "*** CycloneBOOT IAP Single-Bank Bootloader ***");
 8001076:	f002 ffd7 	bl	8004028 <stm32_log_timestamp>
 800107a:	4603      	mov	r3, r0
 800107c:	9400      	str	r4, [sp, #0]
 800107e:	4a3a      	ldr	r2, [pc, #232]	@ (8001168 <main+0x134>)
 8001080:	4621      	mov	r1, r4
 8001082:	2003      	movs	r0, #3
 8001084:	f002 ffd4 	bl	8004030 <stm32_log_write>
	STM32_LOGI(TAG, "**********************************************");
 8001088:	f002 ffce 	bl	8004028 <stm32_log_timestamp>
 800108c:	4603      	mov	r3, r0
 800108e:	9400      	str	r4, [sp, #0]
 8001090:	462a      	mov	r2, r5
 8001092:	4621      	mov	r1, r4
 8001094:	2003      	movs	r0, #3
 8001096:	f002 ffcb 	bl	8004030 <stm32_log_write>
	STM32_LOGI(TAG, "Compiled: %s %s\r\n", __DATE__, __TIME__);
 800109a:	f002 ffc5 	bl	8004028 <stm32_log_timestamp>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a32      	ldr	r2, [pc, #200]	@ (800116c <main+0x138>)
 80010a2:	9202      	str	r2, [sp, #8]
 80010a4:	4a32      	ldr	r2, [pc, #200]	@ (8001170 <main+0x13c>)
 80010a6:	9201      	str	r2, [sp, #4]
 80010a8:	9400      	str	r4, [sp, #0]
 80010aa:	4a32      	ldr	r2, [pc, #200]	@ (8001174 <main+0x140>)
 80010ac:	4621      	mov	r1, r4
 80010ae:	2003      	movs	r0, #3
 80010b0:	f002 ffbe 	bl	8004030 <stm32_log_write>
	STM32_LOGI(TAG, "Target: STM32F407");
 80010b4:	f002 ffb8 	bl	8004028 <stm32_log_timestamp>
 80010b8:	4603      	mov	r3, r0
 80010ba:	9400      	str	r4, [sp, #0]
 80010bc:	4a2e      	ldr	r2, [pc, #184]	@ (8001178 <main+0x144>)
 80010be:	4621      	mov	r1, r4
 80010c0:	2003      	movs	r0, #3
 80010c2:	f002 ffb5 	bl	8004030 <stm32_log_write>
	bootGetDefaultSettings(&bootSettings);
 80010c6:	4c2d      	ldr	r4, [pc, #180]	@ (800117c <main+0x148>)
 80010c8:	4620      	mov	r0, r4
 80010ca:	f001 f80c 	bl	80020e6 <bootGetDefaultSettings>
	bootSettings.memories[0].memoryType = MEMORY_TYPE_FLASH;
 80010ce:	2300      	movs	r3, #0
 80010d0:	7023      	strb	r3, [r4, #0]
	bootSettings.memories[0].memoryRole = MEMORY_ROLE_PRIMARY;
 80010d2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
	bootSettings.memories[0].driver = &stm32f4xxFlashDriver;
 80010d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001180 <main+0x14c>)
 80010d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
	bootSettings.memories[0].nbSlots = 2;
 80010da:	2202      	movs	r2, #2
 80010dc:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
	bootSettings.memories[0].slots[0].type = SLOT_TYPE_DIRECT;
 80010e0:	2101      	movs	r1, #1
 80010e2:	7221      	strb	r1, [r4, #8]
	bootSettings.memories[0].slots[0].cType = SLOT_CONTENT_BINARY;
 80010e4:	2308      	movs	r3, #8
 80010e6:	7263      	strb	r3, [r4, #9]
	bootSettings.memories[0].slots[0].memParent = &bootSettings.memories[0];
 80010e8:	60e4      	str	r4, [r4, #12]
	bootSettings.memories[0].slots[0].addr = 0x08020000;
 80010ea:	4b26      	ldr	r3, [pc, #152]	@ (8001184 <main+0x150>)
 80010ec:	6123      	str	r3, [r4, #16]
	bootSettings.memories[0].slots[0].size = 0x60000;
 80010ee:	f44f 23c0 	mov.w	r3, #393216	@ 0x60000
 80010f2:	6163      	str	r3, [r4, #20]
	bootSettings.memories[0].slots[1].type = SLOT_TYPE_DIRECT;
 80010f4:	7621      	strb	r1, [r4, #24]
	bootSettings.memories[0].slots[1].cType = SLOT_CONTENT_UPDATE;
 80010f6:	7662      	strb	r2, [r4, #25]
	bootSettings.memories[0].slots[1].memParent = &bootSettings.memories[0];
 80010f8:	61e4      	str	r4, [r4, #28]
	bootSettings.memories[0].slots[1].addr = 0x08080000;
 80010fa:	4a23      	ldr	r2, [pc, #140]	@ (8001188 <main+0x154>)
 80010fc:	6222      	str	r2, [r4, #32]
	bootSettings.memories[0].slots[1].size = 0x60000;
 80010fe:	6263      	str	r3, [r4, #36]	@ 0x24
	cerror = bootInit(&bootContext, &bootSettings);
 8001100:	4621      	mov	r1, r4
 8001102:	4822      	ldr	r0, [pc, #136]	@ (800118c <main+0x158>)
 8001104:	f000 fff5 	bl	80020f2 <bootInit>
	if(cerror)
 8001108:	b9a0      	cbnz	r0, 8001134 <main+0x100>
 800110a:	2400      	movs	r4, #0
		if((HAL_GetTick() - ticks)>= 100)
 800110c:	f000 f964 	bl	80013d8 <HAL_GetTick>
 8001110:	1b03      	subs	r3, r0, r4
 8001112:	2b63      	cmp	r3, #99	@ 0x63
 8001114:	d819      	bhi.n	800114a <main+0x116>
		cerror = bootTask(&bootContext);
 8001116:	481d      	ldr	r0, [pc, #116]	@ (800118c <main+0x158>)
 8001118:	f001 f816 	bl	8002148 <bootTask>
		if(cerror)
 800111c:	2800      	cmp	r0, #0
 800111e:	d0f5      	beq.n	800110c <main+0xd8>
			STM32_LOGE(TAG, "Bootloader failure!\r\n");
 8001120:	f002 ff82 	bl	8004028 <stm32_log_timestamp>
 8001124:	4603      	mov	r3, r0
 8001126:	490d      	ldr	r1, [pc, #52]	@ (800115c <main+0x128>)
 8001128:	9100      	str	r1, [sp, #0]
 800112a:	4a19      	ldr	r2, [pc, #100]	@ (8001190 <main+0x15c>)
 800112c:	2001      	movs	r0, #1
 800112e:	f002 ff7f 	bl	8004030 <stm32_log_write>
 8001132:	e7eb      	b.n	800110c <main+0xd8>
		STM32_LOGE(TAG, "Bootloader configuration failed!\r\n");
 8001134:	f002 ff78 	bl	8004028 <stm32_log_timestamp>
 8001138:	4603      	mov	r3, r0
 800113a:	4908      	ldr	r1, [pc, #32]	@ (800115c <main+0x128>)
 800113c:	9100      	str	r1, [sp, #0]
 800113e:	4a15      	ldr	r2, [pc, #84]	@ (8001194 <main+0x160>)
 8001140:	2001      	movs	r0, #1
 8001142:	f002 ff75 	bl	8004030 <stm32_log_write>
		Error_Handler();
 8001146:	f7ff ff0b 	bl	8000f60 <Error_Handler>
			ticks = HAL_GetTick();
 800114a:	f000 f945 	bl	80013d8 <HAL_GetTick>
 800114e:	4604      	mov	r4, r0
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001150:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001154:	4810      	ldr	r0, [pc, #64]	@ (8001198 <main+0x164>)
 8001156:	f000 fc7f 	bl	8001a58 <HAL_GPIO_TogglePin>
 800115a:	e7dc      	b.n	8001116 <main+0xe2>
 800115c:	080050a4 	.word	0x080050a4
 8001160:	080050c0 	.word	0x080050c0
 8001164:	080050d0 	.word	0x080050d0
 8001168:	0800510c 	.word	0x0800510c
 800116c:	08005168 	.word	0x08005168
 8001170:	08005174 	.word	0x08005174
 8001174:	08005148 	.word	0x08005148
 8001178:	08005180 	.word	0x08005180
 800117c:	20000120 	.word	0x20000120
 8001180:	08005930 	.word	0x08005930
 8001184:	08020000 	.word	0x08020000
 8001188:	08080000 	.word	0x08080000
 800118c:	200000a4 	.word	0x200000a4
 8001190:	080051d0 	.word	0x080051d0
 8001194:	080051a0 	.word	0x080051a0
 8001198:	40020c00 	.word	0x40020c00

0800119c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800119c:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800119e:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <MX_RNG_Init+0x18>)
 80011a0:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <MX_RNG_Init+0x1c>)
 80011a2:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80011a4:	f000 ff7c 	bl	80020a0 <HAL_RNG_Init>
 80011a8:	b900      	cbnz	r0, 80011ac <MX_RNG_Init+0x10>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80011aa:	bd08      	pop	{r3, pc}
    Error_Handler();
 80011ac:	f7ff fed8 	bl	8000f60 <Error_Handler>
}
 80011b0:	e7fb      	b.n	80011aa <MX_RNG_Init+0xe>
 80011b2:	bf00      	nop
 80011b4:	20000154 	.word	0x20000154
 80011b8:	50060800 	.word	0x50060800

080011bc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 80011bc:	6802      	ldr	r2, [r0, #0]
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <HAL_RNG_MspInit+0x28>)
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d000      	beq.n	80011c6 <HAL_RNG_MspInit+0xa>
 80011c4:	4770      	bx	lr
{
 80011c6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_RNG_MspInit+0x2c>)
 80011ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80011e0:	b002      	add	sp, #8
 80011e2:	4770      	bx	lr
 80011e4:	50060800 	.word	0x50060800
 80011e8:	40023800 	.word	0x40023800

080011ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ec:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	2100      	movs	r1, #0
 80011f0:	9100      	str	r1, [sp, #0]
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <HAL_MspInit+0x34>)
 80011f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011fa:	645a      	str	r2, [r3, #68]	@ 0x44
 80011fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011fe:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001202:	9200      	str	r2, [sp, #0]
 8001204:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	9101      	str	r1, [sp, #4]
 8001208:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800120a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800120e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	b002      	add	sp, #8
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800

08001224 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler>

08001226 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler>

08001228 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler>

0800122a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <BusFault_Handler>

0800122c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler>

0800122e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	4770      	bx	lr

08001230 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001230:	4770      	bx	lr

08001232 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001232:	4770      	bx	lr

08001234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001234:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001236:	f000 f8c3 	bl	80013c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123a:	bd08      	pop	{r3, pc}

0800123c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800123c:	b570      	push	{r4, r5, r6, lr}
 800123e:	460c      	mov	r4, r1
 8001240:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001242:	2500      	movs	r5, #0
 8001244:	e006      	b.n	8001254 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8001246:	f3af 8000 	nop.w
 800124a:	4621      	mov	r1, r4
 800124c:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001250:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8001252:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001254:	42b5      	cmp	r5, r6
 8001256:	dbf6      	blt.n	8001246 <_read+0xa>
  }

  return len;
}
 8001258:	4630      	mov	r0, r6
 800125a:	bd70      	pop	{r4, r5, r6, pc}

0800125c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800125c:	b570      	push	{r4, r5, r6, lr}
 800125e:	460c      	mov	r4, r1
 8001260:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	2500      	movs	r5, #0
 8001264:	e004      	b.n	8001270 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8001266:	f814 0b01 	ldrb.w	r0, [r4], #1
 800126a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	3501      	adds	r5, #1
 8001270:	42b5      	cmp	r5, r6
 8001272:	dbf8      	blt.n	8001266 <_write+0xa>
  }
  return len;
}
 8001274:	4630      	mov	r0, r6
 8001276:	bd70      	pop	{r4, r5, r6, pc}

08001278 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800127c:	4770      	bx	lr

0800127e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800127e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001282:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001284:	2000      	movs	r0, #0
 8001286:	4770      	bx	lr

08001288 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001288:	2001      	movs	r0, #1
 800128a:	4770      	bx	lr

0800128c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800128c:	2000      	movs	r0, #0
 800128e:	4770      	bx	lr

08001290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001290:	b510      	push	{r4, lr}
 8001292:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001294:	4a0c      	ldr	r2, [pc, #48]	@ (80012c8 <_sbrk+0x38>)
 8001296:	490d      	ldr	r1, [pc, #52]	@ (80012cc <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001298:	480d      	ldr	r0, [pc, #52]	@ (80012d0 <_sbrk+0x40>)
 800129a:	6800      	ldr	r0, [r0, #0]
 800129c:	b140      	cbz	r0, 80012b0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129e:	480c      	ldr	r0, [pc, #48]	@ (80012d0 <_sbrk+0x40>)
 80012a0:	6800      	ldr	r0, [r0, #0]
 80012a2:	4403      	add	r3, r0
 80012a4:	1a52      	subs	r2, r2, r1
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d806      	bhi.n	80012b8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80012aa:	4a09      	ldr	r2, [pc, #36]	@ (80012d0 <_sbrk+0x40>)
 80012ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80012ae:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80012b0:	4807      	ldr	r0, [pc, #28]	@ (80012d0 <_sbrk+0x40>)
 80012b2:	4c08      	ldr	r4, [pc, #32]	@ (80012d4 <_sbrk+0x44>)
 80012b4:	6004      	str	r4, [r0, #0]
 80012b6:	e7f2      	b.n	800129e <_sbrk+0xe>
    errno = ENOMEM;
 80012b8:	f003 fa00 	bl	80046bc <__errno>
 80012bc:	230c      	movs	r3, #12
 80012be:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c4:	e7f3      	b.n	80012ae <_sbrk+0x1e>
 80012c6:	bf00      	nop
 80012c8:	20020000 	.word	0x20020000
 80012cc:	00000400 	.word	0x00000400
 80012d0:	20000164 	.word	0x20000164
 80012d4:	200002c8 	.word	0x200002c8

080012d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d8:	4a03      	ldr	r2, [pc, #12]	@ (80012e8 <SystemInit+0x10>)
 80012da:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80012de:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012e2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <Reset_Handler>:
 80012ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001324 <LoopFillZerobss+0xe>
 80012f0:	f7ff fff2 	bl	80012d8 <SystemInit>
 80012f4:	480c      	ldr	r0, [pc, #48]	@ (8001328 <LoopFillZerobss+0x12>)
 80012f6:	490d      	ldr	r1, [pc, #52]	@ (800132c <LoopFillZerobss+0x16>)
 80012f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001330 <LoopFillZerobss+0x1a>)
 80012fa:	2300      	movs	r3, #0
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:
 80012fe:	58d4      	ldr	r4, [r2, r3]
 8001300:	50c4      	str	r4, [r0, r3]
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:
 8001304:	18c4      	adds	r4, r0, r3
 8001306:	428c      	cmp	r4, r1
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
 800130a:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <LoopFillZerobss+0x1e>)
 800130c:	4c0a      	ldr	r4, [pc, #40]	@ (8001338 <LoopFillZerobss+0x22>)
 800130e:	2300      	movs	r3, #0
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:
 8001316:	42a2      	cmp	r2, r4
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>
 800131a:	f003 f9d5 	bl	80046c8 <__libc_init_array>
 800131e:	f7ff fe89 	bl	8001034 <main>
 8001322:	4770      	bx	lr
 8001324:	20020000 	.word	0x20020000
 8001328:	20000000 	.word	0x20000000
 800132c:	20000088 	.word	0x20000088
 8001330:	08005a8c 	.word	0x08005a8c
 8001334:	20000088 	.word	0x20000088
 8001338:	200002c8 	.word	0x200002c8

0800133c <ADC_IRQHandler>:
 800133c:	e7fe      	b.n	800133c <ADC_IRQHandler>
	...

08001340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b510      	push	{r4, lr}
 8001342:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001344:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <HAL_InitTick+0x40>)
 8001346:	781a      	ldrb	r2, [r3, #0]
 8001348:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001350:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <HAL_InitTick+0x44>)
 8001352:	6810      	ldr	r0, [r2, #0]
 8001354:	fbb0 f0f3 	udiv	r0, r0, r3
 8001358:	f000 f89a 	bl	8001490 <HAL_SYSTICK_Config>
 800135c:	b968      	cbnz	r0, 800137a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	2c0f      	cmp	r4, #15
 8001360:	d901      	bls.n	8001366 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001362:	2001      	movs	r0, #1
 8001364:	e00a      	b.n	800137c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001366:	2200      	movs	r2, #0
 8001368:	4621      	mov	r1, r4
 800136a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800136e:	f000 f87f 	bl	8001470 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001372:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <HAL_InitTick+0x48>)
 8001374:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001376:	2000      	movs	r0, #0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800137a:	2001      	movs	r0, #1
}
 800137c:	bd10      	pop	{r4, pc}
 800137e:	bf00      	nop
 8001380:	20000004 	.word	0x20000004
 8001384:	20000000 	.word	0x20000000
 8001388:	20000008 	.word	0x20000008

0800138c <HAL_Init>:
{
 800138c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <HAL_Init+0x30>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001396:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800139e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80013a6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f84f 	bl	800144c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ae:	200f      	movs	r0, #15
 80013b0:	f7ff ffc6 	bl	8001340 <HAL_InitTick>
  HAL_MspInit();
 80013b4:	f7ff ff1a 	bl	80011ec <HAL_MspInit>
}
 80013b8:	2000      	movs	r0, #0
 80013ba:	bd08      	pop	{r3, pc}
 80013bc:	40023c00 	.word	0x40023c00

080013c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80013c0:	4a03      	ldr	r2, [pc, #12]	@ (80013d0 <HAL_IncTick+0x10>)
 80013c2:	6811      	ldr	r1, [r2, #0]
 80013c4:	4b03      	ldr	r3, [pc, #12]	@ (80013d4 <HAL_IncTick+0x14>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	440b      	add	r3, r1
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000168 	.word	0x20000168
 80013d4:	20000004 	.word	0x20000004

080013d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013d8:	4b01      	ldr	r3, [pc, #4]	@ (80013e0 <HAL_GetTick+0x8>)
 80013da:	6818      	ldr	r0, [r3, #0]
}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000168 	.word	0x20000168

080013e4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80013e4:	2800      	cmp	r0, #0
 80013e6:	db08      	blt.n	80013fa <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	0109      	lsls	r1, r1, #4
 80013ea:	b2c9      	uxtb	r1, r1
 80013ec:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80013f0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80013f4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80013f8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	f000 000f 	and.w	r0, r0, #15
 80013fe:	0109      	lsls	r1, r1, #4
 8001400:	b2c9      	uxtb	r1, r1
 8001402:	4b01      	ldr	r3, [pc, #4]	@ (8001408 <__NVIC_SetPriority+0x24>)
 8001404:	5419      	strb	r1, [r3, r0]
  }
}
 8001406:	4770      	bx	lr
 8001408:	e000ed14 	.word	0xe000ed14

0800140c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001412:	f1c0 0c07 	rsb	ip, r0, #7
 8001416:	f1bc 0f04 	cmp.w	ip, #4
 800141a:	bf28      	it	cs
 800141c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001420:	1d03      	adds	r3, r0, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d90f      	bls.n	8001446 <NVIC_EncodePriority+0x3a>
 8001426:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800142c:	fa0e f00c 	lsl.w	r0, lr, ip
 8001430:	ea21 0100 	bic.w	r1, r1, r0
 8001434:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001436:	fa0e fe03 	lsl.w	lr, lr, r3
 800143a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800143e:	ea41 0002 	orr.w	r0, r1, r2
 8001442:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001446:	2300      	movs	r3, #0
 8001448:	e7ee      	b.n	8001428 <NVIC_EncodePriority+0x1c>
	...

0800144c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800144c:	4a07      	ldr	r2, [pc, #28]	@ (800146c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800144e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001450:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001454:	041b      	lsls	r3, r3, #16
 8001456:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	0200      	lsls	r0, r0, #8
 800145a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001468:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001470:	b510      	push	{r4, lr}
 8001472:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_NVIC_SetPriority+0x1c>)
 8001476:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001478:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800147c:	f7ff ffc6 	bl	800140c <NVIC_EncodePriority>
 8001480:	4601      	mov	r1, r0
 8001482:	4620      	mov	r0, r4
 8001484:	f7ff ffae 	bl	80013e4 <__NVIC_SetPriority>
}
 8001488:	bd10      	pop	{r4, pc}
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	3801      	subs	r0, #1
 8001492:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001496:	d20b      	bcs.n	80014b0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001498:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800149c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	4a05      	ldr	r2, [pc, #20]	@ (80014b4 <HAL_SYSTICK_Config+0x24>)
 80014a0:	21f0      	movs	r1, #240	@ 0xf0
 80014a2:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a6:	2000      	movs	r0, #0
 80014a8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014aa:	2207      	movs	r2, #7
 80014ac:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ae:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80014b0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80014b8:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014ba:	490a      	ldr	r1, [pc, #40]	@ (80014e4 <FLASH_Program_DoubleWord+0x2c>)
 80014bc:	690c      	ldr	r4, [r1, #16]
 80014be:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
 80014c2:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80014c4:	690c      	ldr	r4, [r1, #16]
 80014c6:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
 80014ca:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014cc:	690c      	ldr	r4, [r1, #16]
 80014ce:	f044 0401 	orr.w	r4, r4, #1
 80014d2:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80014d4:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80014d6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80014da:	6043      	str	r3, [r0, #4]
}
 80014dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023c00 	.word	0x40023c00

080014e8 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014e8:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <FLASH_Program_Word+0x20>)
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80014f0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014f8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	f042 0201 	orr.w	r2, r2, #1
 8001500:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t *)Address = Data;
 8001502:	6001      	str	r1, [r0, #0]
}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023c00 	.word	0x40023c00

0800150c <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800150c:	4b07      	ldr	r3, [pc, #28]	@ (800152c <FLASH_Program_HalfWord+0x20>)
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001514:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800151c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	f042 0201 	orr.w	r2, r2, #1
 8001524:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t *)Address = Data;
 8001526:	8001      	strh	r1, [r0, #0]
}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40023c00 	.word	0x40023c00

08001530 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <FLASH_Program_Byte+0x1c>)
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001538:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	f042 0201 	orr.w	r2, r2, #1
 8001544:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t *)Address = Data;
 8001546:	7001      	strb	r1, [r0, #0]
}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40023c00 	.word	0x40023c00

08001550 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001550:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <FLASH_SetErrorCode+0x84>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f013 0f10 	tst.w	r3, #16
 8001558:	d007      	beq.n	800156a <FLASH_SetErrorCode+0x1a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800155a:	4a1f      	ldr	r2, [pc, #124]	@ (80015d8 <FLASH_SetErrorCode+0x88>)
 800155c:	69d3      	ldr	r3, [r2, #28]
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001564:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <FLASH_SetErrorCode+0x84>)
 8001566:	2210      	movs	r2, #16
 8001568:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800156a:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <FLASH_SetErrorCode+0x84>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f013 0f20 	tst.w	r3, #32
 8001572:	d007      	beq.n	8001584 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001574:	4a18      	ldr	r2, [pc, #96]	@ (80015d8 <FLASH_SetErrorCode+0x88>)
 8001576:	69d3      	ldr	r3, [r2, #28]
 8001578:	f043 0308 	orr.w	r3, r3, #8
 800157c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <FLASH_SetErrorCode+0x84>)
 8001580:	2220      	movs	r2, #32
 8001582:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <FLASH_SetErrorCode+0x84>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800158c:	d007      	beq.n	800159e <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800158e:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <FLASH_SetErrorCode+0x88>)
 8001590:	69d3      	ldr	r3, [r2, #28]
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001598:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <FLASH_SetErrorCode+0x84>)
 800159a:	2240      	movs	r2, #64	@ 0x40
 800159c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800159e:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <FLASH_SetErrorCode+0x84>)
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80015a6:	d007      	beq.n	80015b8 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80015a8:	4a0b      	ldr	r2, [pc, #44]	@ (80015d8 <FLASH_SetErrorCode+0x88>)
 80015aa:	69d3      	ldr	r3, [r2, #28]
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80015b2:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <FLASH_SetErrorCode+0x84>)
 80015b4:	2280      	movs	r2, #128	@ 0x80
 80015b6:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <FLASH_SetErrorCode+0x84>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f013 0f02 	tst.w	r3, #2
 80015c0:	d007      	beq.n	80015d2 <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80015c2:	4a05      	ldr	r2, [pc, #20]	@ (80015d8 <FLASH_SetErrorCode+0x88>)
 80015c4:	69d3      	ldr	r3, [r2, #28]
 80015c6:	f043 0320 	orr.w	r3, r3, #32
 80015ca:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80015cc:	4b01      	ldr	r3, [pc, #4]	@ (80015d4 <FLASH_SetErrorCode+0x84>)
 80015ce:	2202      	movs	r2, #2
 80015d0:	60da      	str	r2, [r3, #12]
  }
}
 80015d2:	4770      	bx	lr
 80015d4:	40023c00 	.word	0x40023c00
 80015d8:	2000000c 	.word	0x2000000c

080015dc <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80015dc:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <HAL_FLASH_Unlock+0x28>)
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db01      	blt.n	80015e8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80015e4:	2000      	movs	r0, #0
 80015e6:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_FLASH_Unlock+0x28>)
 80015ea:	4a07      	ldr	r2, [pc, #28]	@ (8001608 <HAL_FLASH_Unlock+0x2c>)
 80015ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80015ee:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 80015f2:	605a      	str	r2, [r3, #4]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db01      	blt.n	80015fe <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80015fa:	2000      	movs	r0, #0
 80015fc:	4770      	bx	lr
      status = HAL_ERROR;
 80015fe:	2001      	movs	r0, #1
}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00
 8001608:	45670123 	.word	0x45670123

0800160c <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800160c:	4a03      	ldr	r2, [pc, #12]	@ (800161c <HAL_FLASH_Lock+0x10>)
 800160e:	6913      	ldr	r3, [r2, #16]
 8001610:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001614:	6113      	str	r3, [r2, #16]
}
 8001616:	2000      	movs	r0, #0
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40023c00 	.word	0x40023c00

08001620 <FLASH_WaitForLastOperation>:
{
 8001620:	b538      	push	{r3, r4, r5, lr}
 8001622:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <FLASH_WaitForLastOperation+0x58>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 800162a:	f7ff fed5 	bl	80013d8 <HAL_GetTick>
 800162e:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <FLASH_WaitForLastOperation+0x5c>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001638:	d00a      	beq.n	8001650 <FLASH_WaitForLastOperation+0x30>
    if (Timeout != HAL_MAX_DELAY)
 800163a:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800163e:	d0f7      	beq.n	8001630 <FLASH_WaitForLastOperation+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001640:	b124      	cbz	r4, 800164c <FLASH_WaitForLastOperation+0x2c>
 8001642:	f7ff fec9 	bl	80013d8 <HAL_GetTick>
 8001646:	1b40      	subs	r0, r0, r5
 8001648:	42a0      	cmp	r0, r4
 800164a:	d9f1      	bls.n	8001630 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 800164c:	2003      	movs	r0, #3
 800164e:	e00d      	b.n	800166c <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001650:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <FLASH_WaitForLastOperation+0x5c>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f013 0f01 	tst.w	r3, #1
 8001658:	d002      	beq.n	8001660 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800165a:	4b08      	ldr	r3, [pc, #32]	@ (800167c <FLASH_WaitForLastOperation+0x5c>)
 800165c:	2201      	movs	r2, #1
 800165e:	60da      	str	r2, [r3, #12]
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <FLASH_WaitForLastOperation+0x5c>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f013 0ff2 	tst.w	r3, #242	@ 0xf2
 8001668:	d101      	bne.n	800166e <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 800166a:	2000      	movs	r0, #0
}
 800166c:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 800166e:	f7ff ff6f 	bl	8001550 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001672:	2001      	movs	r0, #1
 8001674:	e7fa      	b.n	800166c <FLASH_WaitForLastOperation+0x4c>
 8001676:	bf00      	nop
 8001678:	2000000c 	.word	0x2000000c
 800167c:	40023c00 	.word	0x40023c00

08001680 <HAL_FLASH_Program>:
{
 8001680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001682:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8001684:	4a1b      	ldr	r2, [pc, #108]	@ (80016f4 <HAL_FLASH_Program+0x74>)
 8001686:	7e12      	ldrb	r2, [r2, #24]
 8001688:	2a01      	cmp	r2, #1
 800168a:	d030      	beq.n	80016ee <HAL_FLASH_Program+0x6e>
 800168c:	4604      	mov	r4, r0
 800168e:	460d      	mov	r5, r1
 8001690:	461f      	mov	r7, r3
 8001692:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <HAL_FLASH_Program+0x74>)
 8001694:	2201      	movs	r2, #1
 8001696:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001698:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800169c:	f7ff ffc0 	bl	8001620 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80016a0:	b990      	cbnz	r0, 80016c8 <HAL_FLASH_Program+0x48>
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80016a2:	b1ac      	cbz	r4, 80016d0 <HAL_FLASH_Program+0x50>
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80016a4:	2c01      	cmp	r4, #1
 80016a6:	d018      	beq.n	80016da <HAL_FLASH_Program+0x5a>
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80016a8:	2c02      	cmp	r4, #2
 80016aa:	d01b      	beq.n	80016e4 <HAL_FLASH_Program+0x64>
      FLASH_Program_DoubleWord(Address, Data);
 80016ac:	4632      	mov	r2, r6
 80016ae:	463b      	mov	r3, r7
 80016b0:	4628      	mov	r0, r5
 80016b2:	f7ff ff01 	bl	80014b8 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016b6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80016ba:	f7ff ffb1 	bl	8001620 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 80016be:	4a0e      	ldr	r2, [pc, #56]	@ (80016f8 <HAL_FLASH_Program+0x78>)
 80016c0:	6913      	ldr	r3, [r2, #16]
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80016c8:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <HAL_FLASH_Program+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	761a      	strb	r2, [r3, #24]
}
 80016ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80016d0:	b2f1      	uxtb	r1, r6
 80016d2:	4628      	mov	r0, r5
 80016d4:	f7ff ff2c 	bl	8001530 <FLASH_Program_Byte>
 80016d8:	e7ed      	b.n	80016b6 <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80016da:	b2b1      	uxth	r1, r6
 80016dc:	4628      	mov	r0, r5
 80016de:	f7ff ff15 	bl	800150c <FLASH_Program_HalfWord>
 80016e2:	e7e8      	b.n	80016b6 <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 80016e4:	4631      	mov	r1, r6
 80016e6:	4628      	mov	r0, r5
 80016e8:	f7ff fefe 	bl	80014e8 <FLASH_Program_Word>
 80016ec:	e7e3      	b.n	80016b6 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 80016ee:	2002      	movs	r0, #2
 80016f0:	e7ed      	b.n	80016ce <HAL_FLASH_Program+0x4e>
 80016f2:	bf00      	nop
 80016f4:	2000000c 	.word	0x2000000c
 80016f8:	40023c00 	.word	0x40023c00

080016fc <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016fc:	4b07      	ldr	r3, [pc, #28]	@ (800171c <FLASH_MassErase+0x20>)
 80016fe:	691a      	ldr	r2, [r3, #16]
 8001700:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001704:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001706:	691a      	ldr	r2, [r3, #16]
 8001708:	f042 0204 	orr.w	r2, r2, #4
 800170c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001714:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001718:	611a      	str	r2, [r3, #16]
}
 800171a:	4770      	bx	lr
 800171c:	40023c00 	.word	0x40023c00

08001720 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001720:	2901      	cmp	r1, #1
 8001722:	d005      	beq.n	8001730 <FLASH_Erase_Sector+0x10>
 8001724:	2902      	cmp	r1, #2
 8001726:	d006      	beq.n	8001736 <FLASH_Erase_Sector+0x16>
 8001728:	b139      	cbz	r1, 800173a <FLASH_Erase_Sector+0x1a>
{
 800172a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800172e:	e004      	b.n	800173a <FLASH_Erase_Sector+0x1a>
 8001730:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001734:	e001      	b.n	800173a <FLASH_Erase_Sector+0x1a>
 8001736:	f44f 7100 	mov.w	r1, #512	@ 0x200
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800173a:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <FLASH_Erase_Sector+0x48>)
 800173c:	691a      	ldr	r2, [r3, #16]
 800173e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001742:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8001744:	691a      	ldr	r2, [r3, #16]
 8001746:	430a      	orrs	r2, r1
 8001748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	f022 0278 	bic.w	r2, r2, #120	@ 0x78
 8001750:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8001758:	f040 0002 	orr.w	r0, r0, #2
 800175c:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001764:	611a      	str	r2, [r3, #16]
}
 8001766:	4770      	bx	lr
 8001768:	40023c00 	.word	0x40023c00

0800176c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800176c:	4b16      	ldr	r3, [pc, #88]	@ (80017c8 <FLASH_FlushCaches+0x5c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8001774:	d010      	beq.n	8001798 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001776:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <FLASH_FlushCaches+0x5c>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800177e:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800178e:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001796:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001798:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <FLASH_FlushCaches+0x5c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80017a0:	d010      	beq.n	80017c4 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <FLASH_FlushCaches+0x5c>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017aa:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80017ba:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80017c2:	601a      	str	r2, [r3, #0]
  }
}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40023c00 	.word	0x40023c00

080017cc <HAL_FLASHEx_Erase>:
{
 80017cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80017ce:	4b22      	ldr	r3, [pc, #136]	@ (8001858 <HAL_FLASHEx_Erase+0x8c>)
 80017d0:	7e1b      	ldrb	r3, [r3, #24]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d03e      	beq.n	8001854 <HAL_FLASHEx_Erase+0x88>
 80017d6:	4604      	mov	r4, r0
 80017d8:	460e      	mov	r6, r1
 80017da:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <HAL_FLASHEx_Erase+0x8c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80017e4:	f7ff ff1c 	bl	8001620 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80017e8:	4607      	mov	r7, r0
 80017ea:	bb70      	cbnz	r0, 800184a <HAL_FLASHEx_Erase+0x7e>
    *SectorError = 0xFFFFFFFFU;
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017f0:	6033      	str	r3, [r6, #0]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d016      	beq.n	8001826 <HAL_FLASHEx_Erase+0x5a>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80017f8:	68a5      	ldr	r5, [r4, #8]
 80017fa:	68e3      	ldr	r3, [r4, #12]
 80017fc:	68a2      	ldr	r2, [r4, #8]
 80017fe:	4413      	add	r3, r2
 8001800:	42ab      	cmp	r3, r5
 8001802:	d920      	bls.n	8001846 <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001804:	7c21      	ldrb	r1, [r4, #16]
 8001806:	4628      	mov	r0, r5
 8001808:	f7ff ff8a 	bl	8001720 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800180c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001810:	f7ff ff06 	bl	8001620 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001814:	4a11      	ldr	r2, [pc, #68]	@ (800185c <HAL_FLASHEx_Erase+0x90>)
 8001816:	6913      	ldr	r3, [r2, #16]
 8001818:	f023 037a 	bic.w	r3, r3, #122	@ 0x7a
 800181c:	6113      	str	r3, [r2, #16]
        if (status != HAL_OK)
 800181e:	4607      	mov	r7, r0
 8001820:	b980      	cbnz	r0, 8001844 <HAL_FLASHEx_Erase+0x78>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001822:	3501      	adds	r5, #1
 8001824:	e7e9      	b.n	80017fa <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001826:	6861      	ldr	r1, [r4, #4]
 8001828:	7c20      	ldrb	r0, [r4, #16]
 800182a:	f7ff ff67 	bl	80016fc <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800182e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001832:	f7ff fef5 	bl	8001620 <FLASH_WaitForLastOperation>
 8001836:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8001838:	4a08      	ldr	r2, [pc, #32]	@ (800185c <HAL_FLASHEx_Erase+0x90>)
 800183a:	6913      	ldr	r3, [r2, #16]
 800183c:	f023 0304 	bic.w	r3, r3, #4
 8001840:	6113      	str	r3, [r2, #16]
 8001842:	e000      	b.n	8001846 <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 8001844:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();
 8001846:	f7ff ff91 	bl	800176c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800184a:	4b03      	ldr	r3, [pc, #12]	@ (8001858 <HAL_FLASHEx_Erase+0x8c>)
 800184c:	2200      	movs	r2, #0
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	4638      	mov	r0, r7
 8001852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8001854:	2702      	movs	r7, #2
 8001856:	e7fb      	b.n	8001850 <HAL_FLASHEx_Erase+0x84>
 8001858:	2000000c 	.word	0x2000000c
 800185c:	40023c00 	.word	0x40023c00

08001860 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001860:	2300      	movs	r3, #0
 8001862:	2b0f      	cmp	r3, #15
 8001864:	f200 80e9 	bhi.w	8001a3a <HAL_GPIO_Init+0x1da>
{
 8001868:	b570      	push	{r4, r5, r6, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	e065      	b.n	800193a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800186e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001870:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001874:	2403      	movs	r4, #3
 8001876:	fa04 f40e 	lsl.w	r4, r4, lr
 800187a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800187e:	68cc      	ldr	r4, [r1, #12]
 8001880:	fa04 f40e 	lsl.w	r4, r4, lr
 8001884:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001886:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001888:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800188a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800188e:	684a      	ldr	r2, [r1, #4]
 8001890:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001894:	409a      	lsls	r2, r3
 8001896:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001898:	6042      	str	r2, [r0, #4]
 800189a:	e05c      	b.n	8001956 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800189c:	08dc      	lsrs	r4, r3, #3
 800189e:	3408      	adds	r4, #8
 80018a0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018a4:	f003 0507 	and.w	r5, r3, #7
 80018a8:	00ad      	lsls	r5, r5, #2
 80018aa:	f04f 0e0f 	mov.w	lr, #15
 80018ae:	fa0e fe05 	lsl.w	lr, lr, r5
 80018b2:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b6:	690a      	ldr	r2, [r1, #16]
 80018b8:	40aa      	lsls	r2, r5
 80018ba:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80018be:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80018c2:	e05c      	b.n	800197e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018c4:	2207      	movs	r2, #7
 80018c6:	e000      	b.n	80018ca <HAL_GPIO_Init+0x6a>
 80018c8:	2200      	movs	r2, #0
 80018ca:	fa02 f20e 	lsl.w	r2, r2, lr
 80018ce:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d0:	3402      	adds	r4, #2
 80018d2:	4d5a      	ldr	r5, [pc, #360]	@ (8001a3c <HAL_GPIO_Init+0x1dc>)
 80018d4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018d8:	4a59      	ldr	r2, [pc, #356]	@ (8001a40 <HAL_GPIO_Init+0x1e0>)
 80018da:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	ea6f 020c 	mvn.w	r2, ip
 80018e0:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018e4:	684e      	ldr	r6, [r1, #4]
 80018e6:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80018ea:	d001      	beq.n	80018f0 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80018ec:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80018f0:	4c53      	ldr	r4, [pc, #332]	@ (8001a40 <HAL_GPIO_Init+0x1e0>)
 80018f2:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80018f4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80018f6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018fa:	684e      	ldr	r6, [r1, #4]
 80018fc:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001900:	d001      	beq.n	8001906 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001902:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001906:	4c4e      	ldr	r4, [pc, #312]	@ (8001a40 <HAL_GPIO_Init+0x1e0>)
 8001908:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800190a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800190c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001910:	684e      	ldr	r6, [r1, #4]
 8001912:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001916:	d001      	beq.n	800191c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001918:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800191c:	4c48      	ldr	r4, [pc, #288]	@ (8001a40 <HAL_GPIO_Init+0x1e0>)
 800191e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001920:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001922:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001924:	684d      	ldr	r5, [r1, #4]
 8001926:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800192a:	d001      	beq.n	8001930 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 800192c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001930:	4c43      	ldr	r4, [pc, #268]	@ (8001a40 <HAL_GPIO_Init+0x1e0>)
 8001932:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001934:	3301      	adds	r3, #1
 8001936:	2b0f      	cmp	r3, #15
 8001938:	d87d      	bhi.n	8001a36 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 800193a:	2201      	movs	r2, #1
 800193c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193e:	680c      	ldr	r4, [r1, #0]
 8001940:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001944:	ea32 0404 	bics.w	r4, r2, r4
 8001948:	d1f4      	bne.n	8001934 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800194a:	684c      	ldr	r4, [r1, #4]
 800194c:	f004 0403 	and.w	r4, r4, #3
 8001950:	3c01      	subs	r4, #1
 8001952:	2c01      	cmp	r4, #1
 8001954:	d98b      	bls.n	800186e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001956:	684a      	ldr	r2, [r1, #4]
 8001958:	f002 0203 	and.w	r2, r2, #3
 800195c:	2a03      	cmp	r2, #3
 800195e:	d009      	beq.n	8001974 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001960:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001962:	005d      	lsls	r5, r3, #1
 8001964:	2203      	movs	r2, #3
 8001966:	40aa      	lsls	r2, r5
 8001968:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800196c:	688a      	ldr	r2, [r1, #8]
 800196e:	40aa      	lsls	r2, r5
 8001970:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001972:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001974:	684a      	ldr	r2, [r1, #4]
 8001976:	f002 0203 	and.w	r2, r2, #3
 800197a:	2a02      	cmp	r2, #2
 800197c:	d08e      	beq.n	800189c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 800197e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001980:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001984:	2203      	movs	r2, #3
 8001986:	fa02 f20e 	lsl.w	r2, r2, lr
 800198a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800198e:	684a      	ldr	r2, [r1, #4]
 8001990:	f002 0203 	and.w	r2, r2, #3
 8001994:	fa02 f20e 	lsl.w	r2, r2, lr
 8001998:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800199a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800199c:	684a      	ldr	r2, [r1, #4]
 800199e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80019a2:	d0c7      	beq.n	8001934 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a4:	2200      	movs	r2, #0
 80019a6:	9201      	str	r2, [sp, #4]
 80019a8:	4a26      	ldr	r2, [pc, #152]	@ (8001a44 <HAL_GPIO_Init+0x1e4>)
 80019aa:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80019ac:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80019b0:	6454      	str	r4, [r2, #68]	@ 0x44
 80019b2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80019b4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80019b8:	9201      	str	r2, [sp, #4]
 80019ba:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80019bc:	089c      	lsrs	r4, r3, #2
 80019be:	1ca5      	adds	r5, r4, #2
 80019c0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a3c <HAL_GPIO_Init+0x1dc>)
 80019c2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019c6:	f003 0e03 	and.w	lr, r3, #3
 80019ca:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	fa02 f20e 	lsl.w	r2, r2, lr
 80019d4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a48 <HAL_GPIO_Init+0x1e8>)
 80019da:	4290      	cmp	r0, r2
 80019dc:	f43f af74 	beq.w	80018c8 <HAL_GPIO_Init+0x68>
 80019e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80019e4:	4290      	cmp	r0, r2
 80019e6:	d01a      	beq.n	8001a1e <HAL_GPIO_Init+0x1be>
 80019e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80019ec:	4290      	cmp	r0, r2
 80019ee:	d018      	beq.n	8001a22 <HAL_GPIO_Init+0x1c2>
 80019f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80019f4:	4290      	cmp	r0, r2
 80019f6:	d016      	beq.n	8001a26 <HAL_GPIO_Init+0x1c6>
 80019f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80019fc:	4290      	cmp	r0, r2
 80019fe:	d014      	beq.n	8001a2a <HAL_GPIO_Init+0x1ca>
 8001a00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001a04:	4290      	cmp	r0, r2
 8001a06:	d012      	beq.n	8001a2e <HAL_GPIO_Init+0x1ce>
 8001a08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001a0c:	4290      	cmp	r0, r2
 8001a0e:	d010      	beq.n	8001a32 <HAL_GPIO_Init+0x1d2>
 8001a10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001a14:	4290      	cmp	r0, r2
 8001a16:	f43f af55 	beq.w	80018c4 <HAL_GPIO_Init+0x64>
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	e755      	b.n	80018ca <HAL_GPIO_Init+0x6a>
 8001a1e:	2201      	movs	r2, #1
 8001a20:	e753      	b.n	80018ca <HAL_GPIO_Init+0x6a>
 8001a22:	2202      	movs	r2, #2
 8001a24:	e751      	b.n	80018ca <HAL_GPIO_Init+0x6a>
 8001a26:	2203      	movs	r2, #3
 8001a28:	e74f      	b.n	80018ca <HAL_GPIO_Init+0x6a>
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	e74d      	b.n	80018ca <HAL_GPIO_Init+0x6a>
 8001a2e:	2205      	movs	r2, #5
 8001a30:	e74b      	b.n	80018ca <HAL_GPIO_Init+0x6a>
 8001a32:	2206      	movs	r2, #6
 8001a34:	e749      	b.n	80018ca <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001a36:	b002      	add	sp, #8
 8001a38:	bd70      	pop	{r4, r5, r6, pc}
 8001a3a:	4770      	bx	lr
 8001a3c:	40013800 	.word	0x40013800
 8001a40:	40013c00 	.word	0x40013c00
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020000 	.word	0x40020000

08001a4c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a4c:	b10a      	cbz	r2, 8001a52 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4e:	6181      	str	r1, [r0, #24]
 8001a50:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a52:	0409      	lsls	r1, r1, #16
 8001a54:	6181      	str	r1, [r0, #24]
  }
}
 8001a56:	4770      	bx	lr

08001a58 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a58:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a5a:	ea01 0203 	and.w	r2, r1, r3
 8001a5e:	ea21 0103 	bic.w	r1, r1, r3
 8001a62:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001a66:	6181      	str	r1, [r0, #24]
}
 8001a68:	4770      	bx	lr
	...

08001a6c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	f000 81e0 	beq.w	8001e32 <HAL_RCC_OscConfig+0x3c6>
{
 8001a72:	b570      	push	{r4, r5, r6, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a78:	6803      	ldr	r3, [r0, #0]
 8001a7a:	f013 0f01 	tst.w	r3, #1
 8001a7e:	d03b      	beq.n	8001af8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a80:	4b9f      	ldr	r3, [pc, #636]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d02c      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a8c:	4b9c      	ldr	r3, [pc, #624]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d021      	beq.n	8001adc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a98:	6863      	ldr	r3, [r4, #4]
 8001a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a9e:	d04f      	beq.n	8001b40 <HAL_RCC_OscConfig+0xd4>
 8001aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001aa4:	d052      	beq.n	8001b4c <HAL_RCC_OscConfig+0xe0>
 8001aa6:	4b96      	ldr	r3, [pc, #600]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ab8:	6863      	ldr	r3, [r4, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d050      	beq.n	8001b60 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abe:	f7ff fc8b 	bl	80013d8 <HAL_GetTick>
 8001ac2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac4:	4b8e      	ldr	r3, [pc, #568]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001acc:	d114      	bne.n	8001af8 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ace:	f7ff fc83 	bl	80013d8 <HAL_GetTick>
 8001ad2:	1b40      	subs	r0, r0, r5
 8001ad4:	2864      	cmp	r0, #100	@ 0x64
 8001ad6:	d9f5      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001ad8:	2003      	movs	r0, #3
 8001ada:	e1b1      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001adc:	4b88      	ldr	r3, [pc, #544]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001ae4:	d0d8      	beq.n	8001a98 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae6:	4b86      	ldr	r3, [pc, #536]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001aee:	d003      	beq.n	8001af8 <HAL_RCC_OscConfig+0x8c>
 8001af0:	6863      	ldr	r3, [r4, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 819f 	beq.w	8001e36 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af8:	6823      	ldr	r3, [r4, #0]
 8001afa:	f013 0f02 	tst.w	r3, #2
 8001afe:	d054      	beq.n	8001baa <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b00:	4b7f      	ldr	r3, [pc, #508]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f013 0f0c 	tst.w	r3, #12
 8001b08:	d03e      	beq.n	8001b88 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d033      	beq.n	8001b7e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b16:	68e3      	ldr	r3, [r4, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d068      	beq.n	8001bee <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	4b79      	ldr	r3, [pc, #484]	@ (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7ff fc59 	bl	80013d8 <HAL_GetTick>
 8001b26:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	4b75      	ldr	r3, [pc, #468]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f013 0f02 	tst.w	r3, #2
 8001b30:	d154      	bne.n	8001bdc <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b32:	f7ff fc51 	bl	80013d8 <HAL_GetTick>
 8001b36:	1b40      	subs	r0, r0, r5
 8001b38:	2802      	cmp	r0, #2
 8001b3a:	d9f5      	bls.n	8001b28 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	e17f      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b40:	4a6f      	ldr	r2, [pc, #444]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b42:	6813      	ldr	r3, [r2, #0]
 8001b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e7b5      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4c>
 8001b4c:	4b6c      	ldr	r3, [pc, #432]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e7ab      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001b60:	f7ff fc3a 	bl	80013d8 <HAL_GetTick>
 8001b64:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	4b66      	ldr	r3, [pc, #408]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001b6e:	d0c3      	beq.n	8001af8 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff fc32 	bl	80013d8 <HAL_GetTick>
 8001b74:	1b40      	subs	r0, r0, r5
 8001b76:	2864      	cmp	r0, #100	@ 0x64
 8001b78:	d9f5      	bls.n	8001b66 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001b7a:	2003      	movs	r0, #3
 8001b7c:	e160      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7e:	4b60      	ldr	r3, [pc, #384]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001b86:	d1c6      	bne.n	8001b16 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b88:	4b5d      	ldr	r3, [pc, #372]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f013 0f02 	tst.w	r3, #2
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_OscConfig+0x12e>
 8001b92:	68e3      	ldr	r3, [r4, #12]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	f040 8150 	bne.w	8001e3a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9a:	4a59      	ldr	r2, [pc, #356]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b9c:	6813      	ldr	r3, [r2, #0]
 8001b9e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001ba2:	6921      	ldr	r1, [r4, #16]
 8001ba4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ba8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	f013 0f08 	tst.w	r3, #8
 8001bb0:	d042      	beq.n	8001c38 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bb2:	6963      	ldr	r3, [r4, #20]
 8001bb4:	b36b      	cbz	r3, 8001c12 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb6:	4b53      	ldr	r3, [pc, #332]	@ (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbe:	f7ff fc0b 	bl	80013d8 <HAL_GetTick>
 8001bc2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc4:	4b4e      	ldr	r3, [pc, #312]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bc8:	f013 0f02 	tst.w	r3, #2
 8001bcc:	d134      	bne.n	8001c38 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bce:	f7ff fc03 	bl	80013d8 <HAL_GetTick>
 8001bd2:	1b40      	subs	r0, r0, r5
 8001bd4:	2802      	cmp	r0, #2
 8001bd6:	d9f5      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001bd8:	2003      	movs	r0, #3
 8001bda:	e131      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	4a48      	ldr	r2, [pc, #288]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001bde:	6813      	ldr	r3, [r2, #0]
 8001be0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001be4:	6921      	ldr	r1, [r4, #16]
 8001be6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	e7dd      	b.n	8001baa <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4b45      	ldr	r3, [pc, #276]	@ (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fbf0 	bl	80013d8 <HAL_GetTick>
 8001bf8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	4b41      	ldr	r3, [pc, #260]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f013 0f02 	tst.w	r3, #2
 8001c02:	d0d2      	beq.n	8001baa <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c04:	f7ff fbe8 	bl	80013d8 <HAL_GetTick>
 8001c08:	1b40      	subs	r0, r0, r5
 8001c0a:	2802      	cmp	r0, #2
 8001c0c:	d9f5      	bls.n	8001bfa <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001c0e:	2003      	movs	r0, #3
 8001c10:	e116      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c12:	4b3c      	ldr	r3, [pc, #240]	@ (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fbdd 	bl	80013d8 <HAL_GetTick>
 8001c1e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c20:	4b37      	ldr	r3, [pc, #220]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001c22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c24:	f013 0f02 	tst.w	r3, #2
 8001c28:	d006      	beq.n	8001c38 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2a:	f7ff fbd5 	bl	80013d8 <HAL_GetTick>
 8001c2e:	1b40      	subs	r0, r0, r5
 8001c30:	2802      	cmp	r0, #2
 8001c32:	d9f5      	bls.n	8001c20 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001c34:	2003      	movs	r0, #3
 8001c36:	e103      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	f013 0f04 	tst.w	r3, #4
 8001c3e:	d077      	beq.n	8001d30 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c40:	4b2f      	ldr	r3, [pc, #188]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c44:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001c48:	d133      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001c50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c52:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001c56:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c62:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <HAL_RCC_OscConfig+0x29c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001c6c:	d023      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c6e:	68a3      	ldr	r3, [r4, #8]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d034      	beq.n	8001cde <HAL_RCC_OscConfig+0x272>
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d038      	beq.n	8001cea <HAL_RCC_OscConfig+0x27e>
 8001c78:	4b21      	ldr	r3, [pc, #132]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001c7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c7c:	f022 0201 	bic.w	r2, r2, #1
 8001c80:	671a      	str	r2, [r3, #112]	@ 0x70
 8001c82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c84:	f022 0204 	bic.w	r2, r2, #4
 8001c88:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c8a:	68a3      	ldr	r3, [r4, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d03d      	beq.n	8001d0c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7ff fba2 	bl	80013d8 <HAL_GetTick>
 8001c94:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c96:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9a:	f013 0f02 	tst.w	r3, #2
 8001c9e:	d146      	bne.n	8001d2e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca0:	f7ff fb9a 	bl	80013d8 <HAL_GetTick>
 8001ca4:	1b80      	subs	r0, r0, r6
 8001ca6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001caa:	4298      	cmp	r0, r3
 8001cac:	d9f3      	bls.n	8001c96 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001cae:	2003      	movs	r0, #3
 8001cb0:	e0c6      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001cb2:	2500      	movs	r5, #0
 8001cb4:	e7d6      	b.n	8001c64 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb6:	4a14      	ldr	r2, [pc, #80]	@ (8001d08 <HAL_RCC_OscConfig+0x29c>)
 8001cb8:	6813      	ldr	r3, [r2, #0]
 8001cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cbe:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001cc0:	f7ff fb8a 	bl	80013d8 <HAL_GetTick>
 8001cc4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <HAL_RCC_OscConfig+0x29c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001cce:	d1ce      	bne.n	8001c6e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd0:	f7ff fb82 	bl	80013d8 <HAL_GetTick>
 8001cd4:	1b80      	subs	r0, r0, r6
 8001cd6:	2802      	cmp	r0, #2
 8001cd8:	d9f5      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001cda:	2003      	movs	r0, #3
 8001cdc:	e0b0      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cde:	4a08      	ldr	r2, [pc, #32]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001ce0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ce8:	e7cf      	b.n	8001c8a <HAL_RCC_OscConfig+0x21e>
 8001cea:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001cec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001cee:	f042 0204 	orr.w	r2, r2, #4
 8001cf2:	671a      	str	r2, [r3, #112]	@ 0x70
 8001cf4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	671a      	str	r2, [r3, #112]	@ 0x70
 8001cfc:	e7c5      	b.n	8001c8a <HAL_RCC_OscConfig+0x21e>
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	42470000 	.word	0x42470000
 8001d08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0c:	f7ff fb64 	bl	80013d8 <HAL_GetTick>
 8001d10:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d12:	4b52      	ldr	r3, [pc, #328]	@ (8001e5c <HAL_RCC_OscConfig+0x3f0>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d16:	f013 0f02 	tst.w	r3, #2
 8001d1a:	d008      	beq.n	8001d2e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fb5c 	bl	80013d8 <HAL_GetTick>
 8001d20:	1b80      	subs	r0, r0, r6
 8001d22:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001d26:	4298      	cmp	r0, r3
 8001d28:	d9f3      	bls.n	8001d12 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001d2a:	2003      	movs	r0, #3
 8001d2c:	e088      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d2e:	b9ed      	cbnz	r5, 8001d6c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d30:	69a3      	ldr	r3, [r4, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8083 	beq.w	8001e3e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d38:	4a48      	ldr	r2, [pc, #288]	@ (8001e5c <HAL_RCC_OscConfig+0x3f0>)
 8001d3a:	6892      	ldr	r2, [r2, #8]
 8001d3c:	f002 020c 	and.w	r2, r2, #12
 8001d40:	2a08      	cmp	r2, #8
 8001d42:	d051      	beq.n	8001de8 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d017      	beq.n	8001d78 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d48:	4b45      	ldr	r3, [pc, #276]	@ (8001e60 <HAL_RCC_OscConfig+0x3f4>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff fb43 	bl	80013d8 <HAL_GetTick>
 8001d52:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d54:	4b41      	ldr	r3, [pc, #260]	@ (8001e5c <HAL_RCC_OscConfig+0x3f0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001d5c:	d042      	beq.n	8001de4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7ff fb3b 	bl	80013d8 <HAL_GetTick>
 8001d62:	1b00      	subs	r0, r0, r4
 8001d64:	2802      	cmp	r0, #2
 8001d66:	d9f5      	bls.n	8001d54 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d68:	2003      	movs	r0, #3
 8001d6a:	e069      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6c:	4a3b      	ldr	r2, [pc, #236]	@ (8001e5c <HAL_RCC_OscConfig+0x3f0>)
 8001d6e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001d70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d76:	e7db      	b.n	8001d30 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001d78:	4b39      	ldr	r3, [pc, #228]	@ (8001e60 <HAL_RCC_OscConfig+0x3f4>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fb2b 	bl	80013d8 <HAL_GetTick>
 8001d82:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d84:	4b35      	ldr	r3, [pc, #212]	@ (8001e5c <HAL_RCC_OscConfig+0x3f0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001d8c:	d006      	beq.n	8001d9c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7ff fb23 	bl	80013d8 <HAL_GetTick>
 8001d92:	1b40      	subs	r0, r0, r5
 8001d94:	2802      	cmp	r0, #2
 8001d96:	d9f5      	bls.n	8001d84 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001d98:	2003      	movs	r0, #3
 8001d9a:	e051      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d9c:	69e3      	ldr	r3, [r4, #28]
 8001d9e:	6a22      	ldr	r2, [r4, #32]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001da4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001da8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001daa:	0852      	lsrs	r2, r2, #1
 8001dac:	3a01      	subs	r2, #1
 8001dae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001db2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001db4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001db8:	4a28      	ldr	r2, [pc, #160]	@ (8001e5c <HAL_RCC_OscConfig+0x3f0>)
 8001dba:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001dbc:	4b28      	ldr	r3, [pc, #160]	@ (8001e60 <HAL_RCC_OscConfig+0x3f4>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fb09 	bl	80013d8 <HAL_GetTick>
 8001dc6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc8:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <HAL_RCC_OscConfig+0x3f0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001dd0:	d106      	bne.n	8001de0 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7ff fb01 	bl	80013d8 <HAL_GetTick>
 8001dd6:	1b00      	subs	r0, r0, r4
 8001dd8:	2802      	cmp	r0, #2
 8001dda:	d9f5      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001ddc:	2003      	movs	r0, #3
 8001dde:	e02f      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001de0:	2000      	movs	r0, #0
 8001de2:	e02d      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
 8001de4:	2000      	movs	r0, #0
 8001de6:	e02b      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d02b      	beq.n	8001e44 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001dec:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <HAL_RCC_OscConfig+0x3f0>)
 8001dee:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001df4:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df6:	4291      	cmp	r1, r2
 8001df8:	d126      	bne.n	8001e48 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dfe:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e00:	428a      	cmp	r2, r1
 8001e02:	d123      	bne.n	8001e4c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e04:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e06:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001e10:	d11e      	bne.n	8001e50 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e12:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001e16:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001e18:	0852      	lsrs	r2, r2, #1
 8001e1a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e1c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001e20:	d118      	bne.n	8001e54 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e22:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001e26:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e28:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001e2c:	d114      	bne.n	8001e58 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001e2e:	2000      	movs	r0, #0
 8001e30:	e006      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001e32:	2001      	movs	r0, #1
}
 8001e34:	4770      	bx	lr
        return HAL_ERROR;
 8001e36:	2001      	movs	r0, #1
 8001e38:	e002      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001e3e:	2000      	movs	r0, #0
}
 8001e40:	b002      	add	sp, #8
 8001e42:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001e44:	2001      	movs	r0, #1
 8001e46:	e7fb      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001e48:	2001      	movs	r0, #1
 8001e4a:	e7f9      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	e7f7      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
 8001e50:	2001      	movs	r0, #1
 8001e52:	e7f5      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
 8001e54:	2001      	movs	r0, #1
 8001e56:	e7f3      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
 8001e58:	2001      	movs	r0, #1
 8001e5a:	e7f1      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	42470000 	.word	0x42470000

08001e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e64:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e66:	4b33      	ldr	r3, [pc, #204]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d05b      	beq.n	8001f2a <HAL_RCC_GetSysClockFreq+0xc6>
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d15b      	bne.n	8001f2e <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e76:	4b2f      	ldr	r3, [pc, #188]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001e84:	d02c      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e86:	4b2b      	ldr	r3, [pc, #172]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e88:	6858      	ldr	r0, [r3, #4]
 8001e8a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001e8e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001e92:	ebbc 0c00 	subs.w	ip, ip, r0
 8001e96:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001e9a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001e9e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001ea2:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001ea6:	ebb1 010c 	subs.w	r1, r1, ip
 8001eaa:	eb63 030e 	sbc.w	r3, r3, lr
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001eb4:	00c9      	lsls	r1, r1, #3
 8001eb6:	eb11 0c00 	adds.w	ip, r1, r0
 8001eba:	f143 0300 	adc.w	r3, r3, #0
 8001ebe:	0259      	lsls	r1, r3, #9
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8001ec6:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8001eca:	f7fe fe27 	bl	8000b1c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ece:	4b19      	ldr	r3, [pc, #100]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001eda:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001ede:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee0:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ee2:	6858      	ldr	r0, [r3, #4]
 8001ee4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001ee8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001eec:	ebbc 0c00 	subs.w	ip, ip, r0
 8001ef0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001ef4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001ef8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001efc:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001f00:	ebb1 010c 	subs.w	r1, r1, ip
 8001f04:	eb63 030e 	sbc.w	r3, r3, lr
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f0e:	00c9      	lsls	r1, r1, #3
 8001f10:	eb11 0c00 	adds.w	ip, r1, r0
 8001f14:	f143 0300 	adc.w	r3, r3, #0
 8001f18:	0299      	lsls	r1, r3, #10
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001f20:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001f24:	f7fe fdfa 	bl	8000b1c <__aeabi_uldivmod>
 8001f28:	e7d1      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8001f2a:	4803      	ldr	r0, [pc, #12]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f2c:	e7d7      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x7a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f2e:	4803      	ldr	r0, [pc, #12]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0xd8>)
  return sysclockfreq;
 8001f30:	e7d5      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x7a>
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	007a1200 	.word	0x007a1200
 8001f3c:	00f42400 	.word	0x00f42400

08001f40 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001f40:	2800      	cmp	r0, #0
 8001f42:	f000 809b 	beq.w	800207c <HAL_RCC_ClockConfig+0x13c>
{
 8001f46:	b570      	push	{r4, r5, r6, lr}
 8001f48:	460d      	mov	r5, r1
 8001f4a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b4f      	ldr	r3, [pc, #316]	@ (800208c <HAL_RCC_ClockConfig+0x14c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	428b      	cmp	r3, r1
 8001f56:	d208      	bcs.n	8001f6a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f58:	b2cb      	uxtb	r3, r1
 8001f5a:	4a4c      	ldr	r2, [pc, #304]	@ (800208c <HAL_RCC_ClockConfig+0x14c>)
 8001f5c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5e:	6813      	ldr	r3, [r2, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	428b      	cmp	r3, r1
 8001f66:	f040 808b 	bne.w	8002080 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	f013 0f02 	tst.w	r3, #2
 8001f70:	d017      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f72:	f013 0f04 	tst.w	r3, #4
 8001f76:	d004      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f78:	4a45      	ldr	r2, [pc, #276]	@ (8002090 <HAL_RCC_ClockConfig+0x150>)
 8001f7a:	6893      	ldr	r3, [r2, #8]
 8001f7c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f80:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	f013 0f08 	tst.w	r3, #8
 8001f88:	d004      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f8a:	4a41      	ldr	r2, [pc, #260]	@ (8002090 <HAL_RCC_ClockConfig+0x150>)
 8001f8c:	6893      	ldr	r3, [r2, #8]
 8001f8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f92:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f94:	4a3e      	ldr	r2, [pc, #248]	@ (8002090 <HAL_RCC_ClockConfig+0x150>)
 8001f96:	6893      	ldr	r3, [r2, #8]
 8001f98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f9c:	68a1      	ldr	r1, [r4, #8]
 8001f9e:	430b      	orrs	r3, r1
 8001fa0:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	f013 0f01 	tst.w	r3, #1
 8001fa8:	d032      	beq.n	8002010 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001faa:	6863      	ldr	r3, [r4, #4]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d021      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fb0:	1e9a      	subs	r2, r3, #2
 8001fb2:	2a01      	cmp	r2, #1
 8001fb4:	d925      	bls.n	8002002 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb6:	4a36      	ldr	r2, [pc, #216]	@ (8002090 <HAL_RCC_ClockConfig+0x150>)
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	f012 0f02 	tst.w	r2, #2
 8001fbe:	d061      	beq.n	8002084 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc0:	4933      	ldr	r1, [pc, #204]	@ (8002090 <HAL_RCC_ClockConfig+0x150>)
 8001fc2:	688a      	ldr	r2, [r1, #8]
 8001fc4:	f022 0203 	bic.w	r2, r2, #3
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001fcc:	f7ff fa04 	bl	80013d8 <HAL_GetTick>
 8001fd0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002090 <HAL_RCC_ClockConfig+0x150>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	6862      	ldr	r2, [r4, #4]
 8001fdc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001fe0:	d016      	beq.n	8002010 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe2:	f7ff f9f9 	bl	80013d8 <HAL_GetTick>
 8001fe6:	1b80      	subs	r0, r0, r6
 8001fe8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001fec:	4298      	cmp	r0, r3
 8001fee:	d9f0      	bls.n	8001fd2 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	e042      	b.n	800207a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff4:	4a26      	ldr	r2, [pc, #152]	@ (8002090 <HAL_RCC_ClockConfig+0x150>)
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001ffc:	d1e0      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001ffe:	2001      	movs	r0, #1
 8002000:	e03b      	b.n	800207a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002002:	4a23      	ldr	r2, [pc, #140]	@ (8002090 <HAL_RCC_ClockConfig+0x150>)
 8002004:	6812      	ldr	r2, [r2, #0]
 8002006:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800200a:	d1d9      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800200c:	2001      	movs	r0, #1
 800200e:	e034      	b.n	800207a <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002010:	4b1e      	ldr	r3, [pc, #120]	@ (800208c <HAL_RCC_ClockConfig+0x14c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	42ab      	cmp	r3, r5
 800201a:	d907      	bls.n	800202c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201c:	b2ea      	uxtb	r2, r5
 800201e:	4b1b      	ldr	r3, [pc, #108]	@ (800208c <HAL_RCC_ClockConfig+0x14c>)
 8002020:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	42ab      	cmp	r3, r5
 800202a:	d12d      	bne.n	8002088 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	f013 0f04 	tst.w	r3, #4
 8002032:	d006      	beq.n	8002042 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002034:	4a16      	ldr	r2, [pc, #88]	@ (8002090 <HAL_RCC_ClockConfig+0x150>)
 8002036:	6893      	ldr	r3, [r2, #8]
 8002038:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800203c:	68e1      	ldr	r1, [r4, #12]
 800203e:	430b      	orrs	r3, r1
 8002040:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	f013 0f08 	tst.w	r3, #8
 8002048:	d007      	beq.n	800205a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800204a:	4a11      	ldr	r2, [pc, #68]	@ (8002090 <HAL_RCC_ClockConfig+0x150>)
 800204c:	6893      	ldr	r3, [r2, #8]
 800204e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002052:	6921      	ldr	r1, [r4, #16]
 8002054:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002058:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800205a:	f7ff ff03 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 800205e:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <HAL_RCC_ClockConfig+0x150>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002066:	4a0b      	ldr	r2, [pc, #44]	@ (8002094 <HAL_RCC_ClockConfig+0x154>)
 8002068:	5cd3      	ldrb	r3, [r2, r3]
 800206a:	40d8      	lsrs	r0, r3
 800206c:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <HAL_RCC_ClockConfig+0x158>)
 800206e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002070:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <HAL_RCC_ClockConfig+0x15c>)
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	f7ff f964 	bl	8001340 <HAL_InitTick>
  return HAL_OK;
 8002078:	2000      	movs	r0, #0
}
 800207a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800207c:	2001      	movs	r0, #1
}
 800207e:	4770      	bx	lr
      return HAL_ERROR;
 8002080:	2001      	movs	r0, #1
 8002082:	e7fa      	b.n	800207a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002084:	2001      	movs	r0, #1
 8002086:	e7f8      	b.n	800207a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002088:	2001      	movs	r0, #1
 800208a:	e7f6      	b.n	800207a <HAL_RCC_ClockConfig+0x13a>
 800208c:	40023c00 	.word	0x40023c00
 8002090:	40023800 	.word	0x40023800
 8002094:	080054ec 	.word	0x080054ec
 8002098:	20000000 	.word	0x20000000
 800209c:	20000008 	.word	0x20000008

080020a0 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80020a0:	b198      	cbz	r0, 80020ca <HAL_RNG_Init+0x2a>
{
 80020a2:	b510      	push	{r4, lr}
 80020a4:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80020a6:	7943      	ldrb	r3, [r0, #5]
 80020a8:	b15b      	cbz	r3, 80020c2 <HAL_RNG_Init+0x22>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80020aa:	2302      	movs	r3, #2
 80020ac:	7163      	strb	r3, [r4, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80020ae:	6822      	ldr	r2, [r4, #0]
 80020b0:	6813      	ldr	r3, [r2, #0]
 80020b2:	f043 0304 	orr.w	r3, r3, #4
 80020b6:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80020b8:	2301      	movs	r3, #1
 80020ba:	7163      	strb	r3, [r4, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80020bc:	2000      	movs	r0, #0
 80020be:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
}
 80020c0:	bd10      	pop	{r4, pc}
    hrng->Lock = HAL_UNLOCKED;
 80020c2:	7103      	strb	r3, [r0, #4]
    HAL_RNG_MspInit(hrng);
 80020c4:	f7ff f87a 	bl	80011bc <HAL_RNG_MspInit>
 80020c8:	e7ef      	b.n	80020aa <HAL_RNG_Init+0xa>
    return HAL_ERROR;
 80020ca:	2001      	movs	r0, #1
}
 80020cc:	4770      	bx	lr

080020ce <osSuspendAllTasks>:
 **/

void osSuspendAllTasks(void)
{
   //Not implemented
}
 80020ce:	4770      	bx	lr

080020d0 <osResumeAllTasks>:
 **/

void osResumeAllTasks(void)
{
   //Not implemented
}
 80020d0:	4770      	bx	lr

080020d2 <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

__weak_func void *osAllocMem(size_t size)
{
 80020d2:	b508      	push	{r3, lr}
   void *p;

   //Allocate a memory block
   p = malloc(size);
 80020d4:	f001 ffc0 	bl	8004058 <malloc>
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes at 0x%08" PRIXPTR "\r\n",
      size, (uintptr_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
}
 80020d8:	bd08      	pop	{r3, pc}

080020da <osFreeMem>:
 **/

__weak_func void osFreeMem(void *p)
{
   //Make sure the pointer is valid
   if(p != NULL)
 80020da:	b118      	cbz	r0, 80020e4 <osFreeMem+0xa>
{
 80020dc:	b508      	push	{r3, lr}
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08" PRIXPTR "\r\n", (uintptr_t) p);

      //Free memory block
      free(p);
 80020de:	f001 ffc3 	bl	8004068 <free>
   }
}
 80020e2:	bd08      	pop	{r3, pc}
 80020e4:	4770      	bx	lr

080020e6 <bootGetDefaultSettings>:
* @brief Initialize bootloader settings with default values
* @param[in,out] settings Structure that contains Bootloader settings
**/

void bootGetDefaultSettings(BootSettings *settings)
{
 80020e6:	b508      	push	{r3, lr}
   //Clear bootloader user settings structure
   memset(settings, 0x00, sizeof(BootSettings));
 80020e8:	2234      	movs	r2, #52	@ 0x34
 80020ea:	2100      	movs	r1, #0
 80020ec:	f002 fa88 	bl	8004600 <memset>
   //Secondary flash cipher key settings
   settings->psk = NULL;
   settings->pskSize = 0;
#endif
#endif
}
 80020f0:	bd08      	pop	{r3, pc}

080020f2 <bootInit>:
cboot_error_t bootInit(BootContext *context, BootSettings *settings)
{
   cboot_error_t cerror;

   //Check parameter validity
   if(context == NULL || settings == NULL)
 80020f2:	b320      	cbz	r0, 800213e <bootInit+0x4c>
{
 80020f4:	b570      	push	{r4, r5, r6, lr}
 80020f6:	460c      	mov	r4, r1
 80020f8:	4605      	mov	r5, r0
   if(context == NULL || settings == NULL)
 80020fa:	b311      	cbz	r1, 8002142 <bootInit+0x50>
      return CBOOT_ERROR_INVALID_PARAMETERS;

   //Set context fields to zero
   memset(context, 0, sizeof(BootContext));
 80020fc:	227c      	movs	r2, #124	@ 0x7c
 80020fe:	2100      	movs	r1, #0
 8002100:	f002 fa7e 	bl	8004600 <memset>

   //Save bootloader user settings
   memcpy(&context->settings, settings, sizeof(BootSettings));
 8002104:	4623      	mov	r3, r4
 8002106:	1d2a      	adds	r2, r5, #4
 8002108:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800210c:	f8d3 e000 	ldr.w	lr, [r3]
 8002110:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8002114:	6898      	ldr	r0, [r3, #8]
 8002116:	68d9      	ldr	r1, [r3, #12]
 8002118:	f8c2 e000 	str.w	lr, [r2]
 800211c:	f8c2 c004 	str.w	ip, [r2, #4]
 8002120:	6090      	str	r0, [r2, #8]
 8002122:	60d1      	str	r1, [r2, #12]
 8002124:	3310      	adds	r3, #16
 8002126:	3210      	adds	r2, #16
 8002128:	42b3      	cmp	r3, r6
 800212a:	d1ef      	bne.n	800210c <bootInit+0x1a>
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6013      	str	r3, [r2, #0]

   //Initialize a primary flash driver and slots
   cerror = bootInitPrimaryMem(context, settings);
 8002130:	4621      	mov	r1, r4
 8002132:	4628      	mov	r0, r5
 8002134:	f000 fa98 	bl	8002668 <bootInitPrimaryMem>
   //Is any error?
   if(cerror)
 8002138:	b900      	cbnz	r0, 800213c <bootInit+0x4a>
   if(cerror)
      return cerror;
#endif

   //Initialize bootloader state
   context->state = BOOT_STATE_IDLE;
 800213a:	7028      	strb	r0, [r5, #0]

   //Successful process
   return CBOOT_NO_ERROR;
}
 800213c:	bd70      	pop	{r4, r5, r6, pc}
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800213e:	2004      	movs	r0, #4
}
 8002140:	4770      	bx	lr
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8002142:	2004      	movs	r0, #4
 8002144:	e7fa      	b.n	800213c <bootInit+0x4a>
	...

08002148 <bootTask>:
 * @param[in] context Pointer to Bootloader context
 * @return None
 **/

cboot_error_t bootTask(BootContext *context)
{
 8002148:	b570      	push	{r4, r5, r6, lr}
 800214a:	4604      	mov	r4, r0

   //Initialize bootloader error status
   cerror = CBOOT_NO_ERROR;

   //Bootloader IDLE state
   if(context->state == BOOT_STATE_IDLE)
 800214c:	7803      	ldrb	r3, [r0, #0]
 800214e:	2b04      	cmp	r3, #4
 8002150:	f200 80d7 	bhi.w	8002302 <bootTask+0x1ba>
 8002154:	e8df f003 	tbb	[pc, r3]
 8002158:	d57c2b03 	.word	0xd57c2b03
 800215c:	c6          	.byte	0xc6
 800215d:	00          	.byte	0x00
      if(1)
      {
         if(1) {
#endif
             //Select update image slot
             cerror = bootSelectUpdateImageSlot(context, &context->selectedSlot);
 800215e:	f100 066c 	add.w	r6, r0, #108	@ 0x6c
 8002162:	4631      	mov	r1, r6
 8002164:	f000 fa05 	bl	8002572 <bootSelectUpdateImageSlot>

             //Is any error?
             if (cerror || context->selectedSlot.memParent == NULL)
 8002168:	4605      	mov	r5, r0
 800216a:	b968      	cbnz	r0, 8002188 <bootTask+0x40>
 800216c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800216e:	b15b      	cbz	r3, 8002188 <bootTask+0x40>
               TRACE_DEBUG("- address:  0x%08lX\r\n", (unsigned long) context->selectedSlot.addr);
               TRACE_DEBUG("- size:     0x%08X\r\n", context->selectedSlot.size);

               //Is selected slot different from slot containing current application?
               //In other words, is selected image (in selected slot) more recent than current application image?
               if(memcmp(&context->selectedSlot, &context->memories[0].slots[0],sizeof(Slot)) != 0)
 8002170:	2210      	movs	r2, #16
 8002172:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 8002176:	4630      	mov	r0, r6
 8002178:	f002 fa32 	bl	80045e0 <memcmp>
 800217c:	b190      	cbz	r0, 80021a4 <bootTask+0x5c>
               {
                  //Change bootloader state
                  bootChangeState(context, BOOT_STATE_UPDATE_APP);
 800217e:	2102      	movs	r1, #2
 8002180:	4620      	mov	r0, r4
 8002182:	f000 fa59 	bl	8002638 <bootChangeState>
 8002186:	e0ba      	b.n	80022fe <bootTask+0x1b6>
                 TRACE_ERROR("No valid image found!\r\n");
 8002188:	f7ff ffa1 	bl	80020ce <osSuspendAllTasks>
 800218c:	4b5e      	ldr	r3, [pc, #376]	@ (8002308 <bootTask+0x1c0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2217      	movs	r2, #23
 8002194:	2101      	movs	r1, #1
 8002196:	485d      	ldr	r0, [pc, #372]	@ (800230c <bootTask+0x1c4>)
 8002198:	f002 f93c 	bl	8004414 <fwrite>
 800219c:	f7ff ff98 	bl	80020d0 <osResumeAllTasks>
                 return cerror; //ERROR NO VALID IMAGE -> state error ????
 80021a0:	2501      	movs	r5, #1
 80021a2:	e0ac      	b.n	80022fe <bootTask+0x1b6>
               }
               else
               {
                  //Change bootloader state
                  bootChangeState(context, BOOT_STATE_RUN_APP);
 80021a4:	2101      	movs	r1, #1
 80021a6:	4620      	mov	r0, r4
 80021a8:	f000 fa46 	bl	8002638 <bootChangeState>
 80021ac:	e0a7      	b.n	80022fe <bootTask+0x1b6>
   }
   //Bootloader RUN APP state
   else if(context->state == BOOT_STATE_RUN_APP)
   {
      //Make sure to select first primary memory slot (contains current application)
      context->selectedSlot = context->memories[0].slots[0];
 80021ae:	f100 066c 	add.w	r6, r0, #108	@ 0x6c
 80021b2:	f100 0340 	add.w	r3, r0, #64	@ 0x40
 80021b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021b8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

      //Debug message
		TRACE_INFO("No update available...\r\n");
 80021bc:	f7ff ff87 	bl	80020ce <osSuspendAllTasks>
 80021c0:	4d51      	ldr	r5, [pc, #324]	@ (8002308 <bootTask+0x1c0>)
 80021c2:	682b      	ldr	r3, [r5, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2218      	movs	r2, #24
 80021c8:	2101      	movs	r1, #1
 80021ca:	4851      	ldr	r0, [pc, #324]	@ (8002310 <bootTask+0x1c8>)
 80021cc:	f002 f922 	bl	8004414 <fwrite>
 80021d0:	f7ff ff7e 	bl	80020d0 <osResumeAllTasks>
      TRACE_INFO("Checking current application image...\r\n");
 80021d4:	f7ff ff7b 	bl	80020ce <osSuspendAllTasks>
 80021d8:	682b      	ldr	r3, [r5, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2227      	movs	r2, #39	@ 0x27
 80021de:	2101      	movs	r1, #1
 80021e0:	484c      	ldr	r0, [pc, #304]	@ (8002314 <bootTask+0x1cc>)
 80021e2:	f002 f917 	bl	8004414 <fwrite>
 80021e6:	f7ff ff73 	bl	80020d0 <osResumeAllTasks>

      //Check current application image inside first primary memory slot
      cerror = bootCheckImage(context, &context->selectedSlot);
 80021ea:	4631      	mov	r1, r6
 80021ec:	4620      	mov	r0, r4
 80021ee:	f000 f927 	bl	8002440 <bootCheckImage>
      //Is any error?
      if(cerror)
 80021f2:	4605      	mov	r5, r0
 80021f4:	b120      	cbz	r0, 8002200 <bootTask+0xb8>
      {
         //Change bootloader state
         bootChangeState(context, BOOT_STATE_ERROR);
 80021f6:	2104      	movs	r1, #4
 80021f8:	4620      	mov	r0, r4
 80021fa:	f000 fa1d 	bl	8002638 <bootChangeState>
 80021fe:	e07e      	b.n	80022fe <bootTask+0x1b6>
      }
      else
      {
         //Check reset vector of the current application
         cerror = bootCheckSlotAppResetVector(&context->selectedSlot);
 8002200:	4630      	mov	r0, r6
 8002202:	f000 f9f2 	bl	80025ea <bootCheckSlotAppResetVector>
         //Is reset vector valid?
         if(!cerror)
 8002206:	4605      	mov	r5, r0
 8002208:	b9e8      	cbnz	r0, 8002246 <bootTask+0xfe>
         {
            //Debug message
            TRACE_INFO("Current application image is valid\r\n");
 800220a:	f7ff ff60 	bl	80020ce <osSuspendAllTasks>
 800220e:	4e3e      	ldr	r6, [pc, #248]	@ (8002308 <bootTask+0x1c0>)
 8002210:	6833      	ldr	r3, [r6, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2224      	movs	r2, #36	@ 0x24
 8002216:	2101      	movs	r1, #1
 8002218:	483f      	ldr	r0, [pc, #252]	@ (8002318 <bootTask+0x1d0>)
 800221a:	f002 f8fb 	bl	8004414 <fwrite>
 800221e:	f7ff ff57 	bl	80020d0 <osResumeAllTasks>
            TRACE_INFO("Booting to the application...\r\n");
 8002222:	f7ff ff54 	bl	80020ce <osSuspendAllTasks>
 8002226:	6833      	ldr	r3, [r6, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	221f      	movs	r2, #31
 800222c:	2101      	movs	r1, #1
 800222e:	483b      	ldr	r0, [pc, #236]	@ (800231c <bootTask+0x1d4>)
 8002230:	f002 f8f0 	bl	8004414 <fwrite>
 8002234:	f7ff ff4c 	bl	80020d0 <osResumeAllTasks>

            //Compute application start address
            appStartAddr = context->selectedSlot.addr + mcuGetVtorOffset();
 8002238:	6f64      	ldr	r4, [r4, #116]	@ 0x74
 800223a:	f000 facf 	bl	80027dc <mcuGetVtorOffset>

            //Jump to current application inside primary memory slot
            mcuJumpToApplication(appStartAddr);
 800223e:	4420      	add	r0, r4
 8002240:	f002 fecc 	bl	8004fdc <_etext>
 8002244:	e05b      	b.n	80022fe <bootTask+0x1b6>
         }
         else
         {
            //Change bootloader state
            bootChangeState(context, BOOT_STATE_ERROR);
 8002246:	2104      	movs	r1, #4
 8002248:	4620      	mov	r0, r4
 800224a:	f000 f9f5 	bl	8002638 <bootChangeState>
 800224e:	e056      	b.n	80022fe <bootTask+0x1b6>
   }
   //Bootloader UPDATE APP state
   else if(context->state == BOOT_STATE_UPDATE_APP)
   {
      //Debug message
      TRACE_INFO("Checking update application image...\r\n");
 8002250:	f7ff ff3d 	bl	80020ce <osSuspendAllTasks>
 8002254:	4b2c      	ldr	r3, [pc, #176]	@ (8002308 <bootTask+0x1c0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2226      	movs	r2, #38	@ 0x26
 800225c:	2101      	movs	r1, #1
 800225e:	4830      	ldr	r0, [pc, #192]	@ (8002320 <bootTask+0x1d8>)
 8002260:	f002 f8d8 	bl	8004414 <fwrite>
 8002264:	f7ff ff34 	bl	80020d0 <osResumeAllTasks>
#else
      if(1)
#endif

      //Check current application image inside first primary memory slot
      cerror = bootCheckImage(context, &context->selectedSlot);
 8002268:	f104 056c 	add.w	r5, r4, #108	@ 0x6c
 800226c:	4629      	mov	r1, r5
 800226e:	4620      	mov	r0, r4
 8002270:	f000 f8e6 	bl	8002440 <bootCheckImage>
      //Is any error?
      if(cerror)
 8002274:	b128      	cbz	r0, 8002282 <bootTask+0x13a>
      {
         //Discard error
         cerror = CBOOT_NO_ERROR;
         //Change bootloader state
         bootChangeState(context, BOOT_STATE_RUN_APP);
 8002276:	2101      	movs	r1, #1
 8002278:	4620      	mov	r0, r4
 800227a:	f000 f9dd 	bl	8002638 <bootChangeState>
         cerror = CBOOT_NO_ERROR;
 800227e:	2500      	movs	r5, #0
 8002280:	e03d      	b.n	80022fe <bootTask+0x1b6>
      }
      else
      {
         //Debug message
         TRACE_INFO("Starting update procedure...\r\n");
 8002282:	f7ff ff24 	bl	80020ce <osSuspendAllTasks>
 8002286:	4b20      	ldr	r3, [pc, #128]	@ (8002308 <bootTask+0x1c0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	221e      	movs	r2, #30
 800228e:	2101      	movs	r1, #1
 8002290:	4824      	ldr	r0, [pc, #144]	@ (8002324 <bootTask+0x1dc>)
 8002292:	f002 f8bf 	bl	8004414 <fwrite>
 8002296:	f7ff ff1b 	bl	80020d0 <osResumeAllTasks>

         //Start update procedure (could be a new application or because of a previous fallback procedure)
         cerror = bootUpdateApp(context, &context->selectedSlot);
 800229a:	4629      	mov	r1, r5
 800229c:	4620      	mov	r0, r4
 800229e:	f000 f849 	bl	8002334 <bootUpdateApp>
         //Is any error?
         if(cerror)
 80022a2:	4605      	mov	r5, r0
 80022a4:	b120      	cbz	r0, 80022b0 <bootTask+0x168>
         {
            //Change bootloader state
            bootChangeState(context, BOOT_STATE_ERROR);
 80022a6:	2104      	movs	r1, #4
 80022a8:	4620      	mov	r0, r4
 80022aa:	f000 f9c5 	bl	8002638 <bootChangeState>
 80022ae:	e026      	b.n	80022fe <bootTask+0x1b6>
         }
         else
         {
            //Debug message
            TRACE_INFO("Update procedure finished\r\n");
 80022b0:	f7ff ff0d 	bl	80020ce <osSuspendAllTasks>
 80022b4:	4c14      	ldr	r4, [pc, #80]	@ (8002308 <bootTask+0x1c0>)
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	221b      	movs	r2, #27
 80022bc:	2101      	movs	r1, #1
 80022be:	481a      	ldr	r0, [pc, #104]	@ (8002328 <bootTask+0x1e0>)
 80022c0:	f002 f8a8 	bl	8004414 <fwrite>
 80022c4:	f7ff ff04 	bl	80020d0 <osResumeAllTasks>
            TRACE_INFO("Rebooting...\r\n");
 80022c8:	f7ff ff01 	bl	80020ce <osSuspendAllTasks>
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	220e      	movs	r2, #14
 80022d2:	2101      	movs	r1, #1
 80022d4:	4815      	ldr	r0, [pc, #84]	@ (800232c <bootTask+0x1e4>)
 80022d6:	f002 f89d 	bl	8004414 <fwrite>
 80022da:	f7ff fef9 	bl	80020d0 <osResumeAllTasks>

            //Reset system
            mcuSystemReset();
 80022de:	f000 fa80 	bl	80027e2 <mcuSystemReset>
 80022e2:	e00c      	b.n	80022fe <bootTask+0x1b6>
#endif
   //Bootloader ERROR state
   else if(context->state == BOOT_STATE_ERROR)
   {
      //Bootloader reached error state
      TRACE_ERROR("Bootloader is in error state!\r\n");
 80022e4:	f7ff fef3 	bl	80020ce <osSuspendAllTasks>
 80022e8:	4b07      	ldr	r3, [pc, #28]	@ (8002308 <bootTask+0x1c0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	221f      	movs	r2, #31
 80022f0:	2101      	movs	r1, #1
 80022f2:	480f      	ldr	r0, [pc, #60]	@ (8002330 <bootTask+0x1e8>)
 80022f4:	f002 f88e 	bl	8004414 <fwrite>
 80022f8:	f7ff feea 	bl	80020d0 <osResumeAllTasks>
   cerror = CBOOT_NO_ERROR;
 80022fc:	2500      	movs	r5, #0
      return CBOOT_ERROR_INVALID_VALUE;
   }

   //Return bootloader status
   return cerror;
}
 80022fe:	4628      	mov	r0, r5
 8002300:	bd70      	pop	{r4, r5, r6, pc}
   if(context->state == BOOT_STATE_IDLE)
 8002302:	2506      	movs	r5, #6
 8002304:	e7fb      	b.n	80022fe <bootTask+0x1b6>
 8002306:	bf00      	nop
 8002308:	20000038 	.word	0x20000038
 800230c:	080051f4 	.word	0x080051f4
 8002310:	0800520c 	.word	0x0800520c
 8002314:	08005228 	.word	0x08005228
 8002318:	08005250 	.word	0x08005250
 800231c:	08005278 	.word	0x08005278
 8002320:	08005298 	.word	0x08005298
 8002324:	080052c0 	.word	0x080052c0
 8002328:	080052e0 	.word	0x080052e0
 800232c:	080052fc 	.word	0x080052fc
 8002330:	0800530c 	.word	0x0800530c

08002334 <bootUpdateApp>:
   uint8_t iv[INIT_VECT_SIZE];
#endif
   uint8_t buffer[512];

   // Check parameters validity?
   if (context == NULL || slot == NULL)
 8002334:	2800      	cmp	r0, #0
 8002336:	d06f      	beq.n	8002418 <bootUpdateApp+0xe4>
{
 8002338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800233c:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 8002340:	460e      	mov	r6, r1
   if (context == NULL || slot == NULL)
 8002342:	2900      	cmp	r1, #0
 8002344:	d06a      	beq.n	800241c <bootUpdateApp+0xe8>
   // Point to the slot memory descriptor
   extMem = (Memory *)slot->memParent;
#endif

   // Get slot start address
   readAddr = slot->addr;
 8002346:	688d      	ldr	r5, [r1, #8]
   // Get internal stlot address
   writeAddr = intMem->slots[0].addr;
 8002348:	f8d0 8048 	ldr.w	r8, [r0, #72]	@ 0x48
#if (EXTERNAL_MEMORY_SUPPORT == ENABLED)
   // Point to the external memory flash driver
   externalDriver = (FlashDriver *)extMem->driver;
#endif
   // Point to the internal memory flash driver
   internalDriver = (FlashDriver *)intMem->driver;
 800234c:	6e47      	ldr	r7, [r0, #100]	@ 0x64
   // Get internal driver information
   error = internalDriver->getInfo(&internalDriverInfo);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	a880      	add	r0, sp, #512	@ 0x200
 8002352:	4798      	blx	r3
   if (error)
 8002354:	2800      	cmp	r0, #0
 8002356:	d163      	bne.n	8002420 <bootUpdateApp+0xec>
#if (EXTERNAL_MEMORY_SUPPORT == ENABLED)
   // Read update image slot for secondary (external) memory slot
   error = externalDriver->read(readAddr, buffer, sizeof(ImageHeader));
#else
   // Read update image slot for primary (internal) memory slot
   error = internalDriver->read(readAddr, buffer, sizeof(ImageHeader));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2240      	movs	r2, #64	@ 0x40
 800235c:	4669      	mov	r1, sp
 800235e:	4628      	mov	r0, r5
 8002360:	4798      	blx	r3
#endif
   // Is any error?
   if (error)
 8002362:	2800      	cmp	r0, #0
 8002364:	d161      	bne.n	800242a <bootUpdateApp+0xf6>

   // Point to image header
   header = (ImageHeader *)buffer;

   // Write new image header into primary (internal) memory slot
   error = internalDriver->write(writeAddr, (uint8_t *)header, sizeof(ImageHeader));
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	2240      	movs	r2, #64	@ 0x40
 800236a:	4669      	mov	r1, sp
 800236c:	4640      	mov	r0, r8
 800236e:	4798      	blx	r3
   // Is any error?
   if (error)
 8002370:	2800      	cmp	r0, #0
 8002372:	d15c      	bne.n	800242e <bootUpdateApp+0xfa>
      return CBOOT_ERROR_FAILURE;

   // Save image application data size
   imgAppSize = header->dataSize;
 8002374:	f8dd 500d 	ldr.w	r5, [sp, #13]

   // Initialize CRC32 integrity algo context
   integrityAlgo->init(&integrityContext);
 8002378:	f8df 90c0 	ldr.w	r9, [pc, #192]	@ 800243c <bootUpdateApp+0x108>
 800237c:	f8d9 3024 	ldr.w	r3, [r9, #36]	@ 0x24
 8002380:	a881      	add	r0, sp, #516	@ 0x204
 8002382:	4798      	blx	r3

   // Start image check crc computation with image header
   integrityAlgo->update(&integrityContext,
 8002384:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8002388:	2204      	movs	r2, #4
 800238a:	a90f      	add	r1, sp, #60	@ 0x3c
 800238c:	a881      	add	r0, sp, #516	@ 0x204
 800238e:	4798      	blx	r3
                         (uint8_t *)&header->headCrc, CRC32_DIGEST_SIZE);

   // Update write address
   writeAddr += sizeof(ImageHeader);
 8002390:	f108 0840 	add.w	r8, r8, #64	@ 0x40
   ////////////////////////////////////////////////////////////////////////////
   // Transfer new application firmware data from the image slot
   //  in external flash to the image slot in internal flash.

   // Get new image application data iv start address
   readAddr = slot->addr + sizeof(ImageHeader);
 8002394:	68b6      	ldr	r6, [r6, #8]
 8002396:	3640      	adds	r6, #64	@ 0x40
   readAddr += AES_BLOCK_SIZE;

#endif

   // Loop through image application padding
   while (imgAppSize > 0)
 8002398:	e002      	b.n	80023a0 <bootUpdateApp+0x6c>
            return CBOOT_ERROR_FAILURE;
         writeAddr += n;
      }
      else
      {
         __NOP();
 800239a:	bf00      	nop
      }

      // writeAddr += n;
      readAddr += n;
 800239c:	4426      	add	r6, r4
      imgAppSize -= n;
 800239e:	1b2d      	subs	r5, r5, r4
   while (imgAppSize > 0)
 80023a0:	b315      	cbz	r5, 80023e8 <bootUpdateApp+0xb4>
      n = MIN(sizeof(buffer), imgAppSize);
 80023a2:	462c      	mov	r4, r5
 80023a4:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80023a8:	bf28      	it	cs
 80023aa:	f44f 7400 	movcs.w	r4, #512	@ 0x200
      error = internalDriver->read(readAddr, buffer, n);
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	4622      	mov	r2, r4
 80023b2:	4669      	mov	r1, sp
 80023b4:	4630      	mov	r0, r6
 80023b6:	4798      	blx	r3
      if (error)
 80023b8:	2800      	cmp	r0, #0
 80023ba:	d13a      	bne.n	8002432 <bootUpdateApp+0xfe>
      integrityAlgo->update(&integrityContext, buffer, n);
 80023bc:	4b1f      	ldr	r3, [pc, #124]	@ (800243c <bootUpdateApp+0x108>)
 80023be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c0:	4622      	mov	r2, r4
 80023c2:	4669      	mov	r1, sp
 80023c4:	a881      	add	r0, sp, #516	@ 0x204
 80023c6:	4798      	blx	r3
      if ((n % internalDriverInfo->writeSize) == 0)
 80023c8:	9b80      	ldr	r3, [sp, #512]	@ 0x200
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	fbb4 f3f2 	udiv	r3, r4, r2
 80023d0:	fb02 4313 	mls	r3, r2, r3, r4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1e0      	bne.n	800239a <bootUpdateApp+0x66>
         error = internalDriver->write(writeAddr, buffer, n);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4622      	mov	r2, r4
 80023dc:	4669      	mov	r1, sp
 80023de:	4640      	mov	r0, r8
 80023e0:	4798      	blx	r3
         if (error)
 80023e2:	bb40      	cbnz	r0, 8002436 <bootUpdateApp+0x102>
         writeAddr += n;
 80023e4:	44a0      	add	r8, r4
 80023e6:	e7d9      	b.n	800239c <bootUpdateApp+0x68>

   ////////////////////////////////////////////////////////////////////////////
   // Generate an image CRC32 integrity check section

   // Reset n if it was a multiple of internal flash minimum write size
   if ((n > 0) && ((n % internalDriverInfo->writeSize) == 0))
 80023e8:	b13c      	cbz	r4, 80023fa <bootUpdateApp+0xc6>
 80023ea:	9b80      	ldr	r3, [sp, #512]	@ 0x200
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	fbb4 f3f2 	udiv	r3, r4, r2
 80023f2:	fb02 4313 	mls	r3, r2, r3, r4
 80023f6:	b903      	cbnz	r3, 80023fa <bootUpdateApp+0xc6>
   {
      n = 0;
 80023f8:	461c      	mov	r4, r3
   }

   // Finalize crc32 integrity algo computation
   integrityAlgo->final(&integrityContext, buffer + n);
 80023fa:	4d10      	ldr	r5, [pc, #64]	@ (800243c <bootUpdateApp+0x108>)
 80023fc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80023fe:	eb0d 0104 	add.w	r1, sp, r4
 8002402:	a881      	add	r0, sp, #516	@ 0x204
 8002404:	4798      	blx	r3
   TRACE_DEBUG("\r\n");
   TRACE_DEBUG("New image application CRC:\r\n");
   TRACE_DEBUG_ARRAY("CRC RAW: ", buffer + n, integrityAlgo->digestSize);

   // Write computed image check data in primary (internal) memory slot
   error = internalDriver->write(writeAddr, buffer, n + integrityAlgo->digestSize);
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	696a      	ldr	r2, [r5, #20]
 800240a:	4422      	add	r2, r4
 800240c:	4669      	mov	r1, sp
 800240e:	4640      	mov	r0, r8
 8002410:	4798      	blx	r3
   // Is any error?
   if (error)
 8002412:	b130      	cbz	r0, 8002422 <bootUpdateApp+0xee>
      return CBOOT_ERROR_FAILURE;
 8002414:	2001      	movs	r0, #1
 8002416:	e004      	b.n	8002422 <bootUpdateApp+0xee>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8002418:	2004      	movs	r0, #4

   // Successful process
   return CBOOT_NO_ERROR;
}
 800241a:	4770      	bx	lr
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800241c:	2004      	movs	r0, #4
 800241e:	e000      	b.n	8002422 <bootUpdateApp+0xee>
      return CBOOT_ERROR_FAILURE;
 8002420:	2001      	movs	r0, #1
}
 8002422:	f50d 7d03 	add.w	sp, sp, #524	@ 0x20c
 8002426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return CBOOT_ERROR_FAILURE;
 800242a:	2001      	movs	r0, #1
 800242c:	e7f9      	b.n	8002422 <bootUpdateApp+0xee>
      return CBOOT_ERROR_FAILURE;
 800242e:	2001      	movs	r0, #1
 8002430:	e7f7      	b.n	8002422 <bootUpdateApp+0xee>
         return CBOOT_ERROR_FAILURE;
 8002432:	2001      	movs	r0, #1
 8002434:	e7f5      	b.n	8002422 <bootUpdateApp+0xee>
            return CBOOT_ERROR_FAILURE;
 8002436:	2001      	movs	r0, #1
 8002438:	e7f3      	b.n	8002422 <bootUpdateApp+0xee>
 800243a:	bf00      	nop
 800243c:	080054fc 	.word	0x080054fc

08002440 <bootCheckImage>:
 * @param[in] slot Pointer to the slot containing the image to be checked.
 * @return Error code.
 **/

cboot_error_t bootCheckImage(BootContext *context, Slot *slot)
{
 8002440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002444:	b095      	sub	sp, #84	@ 0x54
   bool_t magicNumberIsValid;
   uint32_t magicNumberCrc;
#endif

   // Check parameter validity
   if (context == NULL || slot == NULL)
 8002446:	2800      	cmp	r0, #0
 8002448:	d056      	beq.n	80024f8 <bootCheckImage+0xb8>
 800244a:	460c      	mov	r4, r1
 800244c:	2900      	cmp	r1, #0
 800244e:	d055      	beq.n	80024fc <bootCheckImage+0xbc>
      return CBOOT_ERROR_INVALID_PARAMETERS;

   // Point to slot memory descriptor
   memory = (Memory *)slot->memParent;
 8002450:	684b      	ldr	r3, [r1, #4]

   // Get memory info
   driver = (FlashDriver *)memory->driver;
 8002452:	f8d3 802c 	ldr.w	r8, [r3, #44]	@ 0x2c
   error = driver->getInfo(&info);
 8002456:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800245a:	a813      	add	r0, sp, #76	@ 0x4c
 800245c:	4798      	blx	r3
   // Is any error?
   if (error)
 800245e:	2800      	cmp	r0, #0
 8002460:	d14e      	bne.n	8002500 <bootCheckImage+0xc0>
      return CBOOT_ERROR_FAILURE;

   // Read slot data
   error = driver->read(slot->addr, buffer, sizeof(buffer));
 8002462:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8002466:	2240      	movs	r2, #64	@ 0x40
 8002468:	a901      	add	r1, sp, #4
 800246a:	68a0      	ldr	r0, [r4, #8]
 800246c:	4798      	blx	r3
   // Is any error?
   if (error)
 800246e:	b108      	cbz	r0, 8002474 <bootCheckImage+0x34>
      return CBOOT_ERROR_FAILURE;
 8002470:	2701      	movs	r7, #1
 8002472:	e046      	b.n	8002502 <bootCheckImage+0xc2>

   // Point to internal image header
   header = (ImageHeader *)buffer;

   // Check internal image header
   cerror = imageCheckHeader(header);
 8002474:	a801      	add	r0, sp, #4
 8002476:	f000 fc37 	bl	8002ce8 <imageCheckHeader>
   // Is any error?
   if (cerror)
 800247a:	4607      	mov	r7, r0
 800247c:	2800      	cmp	r0, #0
 800247e:	d140      	bne.n	8002502 <bootCheckImage+0xc2>
      TRACE_ERROR("Image header is not valid!\r\n");
      return cerror;
   }

   // Discard internal image header
   addr = slot->addr + sizeof(ImageHeader);
 8002480:	68a6      	ldr	r6, [r4, #8]
 8002482:	3640      	adds	r6, #64	@ 0x40

   // Save internal image data size
   length = header->dataSize;
 8002484:	f8dd 5011 	ldr.w	r5, [sp, #17]
      length += AES_BLOCK_SIZE;
   }
#endif

   // Check image size
   if (length + sizeof(ImageHeader) > slot->size)
 8002488:	f105 0240 	add.w	r2, r5, #64	@ 0x40
 800248c:	68e3      	ldr	r3, [r4, #12]
 800248e:	429a      	cmp	r2, r3
 8002490:	d83b      	bhi.n	800250a <bootCheckImage+0xca>
   }

   // Point to the CRC32 algorithm
   crcAlgo = (HashAlgo *)CRC32_HASH_ALGO;
   // Initialize CRC algorithm
   crcAlgo->init(&crcContext);
 8002492:	4c21      	ldr	r4, [pc, #132]	@ (8002518 <bootCheckImage+0xd8>)
 8002494:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002496:	a812      	add	r0, sp, #72	@ 0x48
 8002498:	4798      	blx	r3
   // Start image check computation with image header crc
   crcAlgo->update(&crcContext, (uint8_t *)&header->headCrc, CRC32_DIGEST_SIZE);
 800249a:	f8d4 9028 	ldr.w	r9, [r4, #40]	@ 0x28
 800249e:	2204      	movs	r2, #4
 80024a0:	a910      	add	r1, sp, #64	@ 0x40
 80024a2:	a812      	add	r0, sp, #72	@ 0x48
 80024a4:	47c8      	blx	r9

   // Process image binary data
   while (length > 0)
 80024a6:	b18d      	cbz	r5, 80024cc <bootCheckImage+0x8c>
   {
      // Prevent read operation to overflow buffer size
      n = MIN(sizeof(buffer), length);
 80024a8:	462c      	mov	r4, r5
 80024aa:	2d40      	cmp	r5, #64	@ 0x40
 80024ac:	bf28      	it	cs
 80024ae:	2440      	movcs	r4, #64	@ 0x40

      // Read image binary data
      error = driver->read(addr, buffer, n);
 80024b0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80024b4:	4622      	mov	r2, r4
 80024b6:	a901      	add	r1, sp, #4
 80024b8:	4630      	mov	r0, r6
 80024ba:	4798      	blx	r3
      // Is any error?
      if (error)
 80024bc:	bb38      	cbnz	r0, 800250e <bootCheckImage+0xce>
         return CBOOT_ERROR_FAILURE;

      // Update image binary data crc computation
      crcAlgo->update(&crcContext, buffer, n);
 80024be:	4622      	mov	r2, r4
 80024c0:	a901      	add	r1, sp, #4
 80024c2:	a812      	add	r0, sp, #72	@ 0x48
 80024c4:	47c8      	blx	r9

      // Increment external flash memory word address
      addr += n;
 80024c6:	4426      	add	r6, r4
      // Remaining bytes to be read
      length -= n;
 80024c8:	1b2d      	subs	r5, r5, r4
 80024ca:	e7ec      	b.n	80024a6 <bootCheckImage+0x66>
   }

   // Finalize image binary data crc computation
   crcAlgo->final(&crcContext, digest);
 80024cc:	4b12      	ldr	r3, [pc, #72]	@ (8002518 <bootCheckImage+0xd8>)
 80024ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d0:	a911      	add	r1, sp, #68	@ 0x44
 80024d2:	a812      	add	r0, sp, #72	@ 0x48
 80024d4:	4798      	blx	r3

   // Read given image binary crc
   error = driver->read(addr, buffer, CRC32_DIGEST_SIZE);
 80024d6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80024da:	2204      	movs	r2, #4
 80024dc:	eb0d 0102 	add.w	r1, sp, r2
 80024e0:	4630      	mov	r0, r6
 80024e2:	4798      	blx	r3
   // Is any error?
   if (error)
 80024e4:	b9a8      	cbnz	r0, 8002512 <bootCheckImage+0xd2>
      return CBOOT_ERROR_FAILURE;

   // Compare given against computed image binary crc
   if (memcmp(buffer, digest, CRC32_DIGEST_SIZE) != 0)
 80024e6:	2204      	movs	r2, #4
 80024e8:	a911      	add	r1, sp, #68	@ 0x44
 80024ea:	eb0d 0002 	add.w	r0, sp, r2
 80024ee:	f002 f877 	bl	80045e0 <memcmp>
 80024f2:	b130      	cbz	r0, 8002502 <bootCheckImage+0xc2>
      TRACE_ERROR("Image binary data is not valid!\r\n");
      TRACE_DEBUG("Computed check CRC: ");
      TRACE_DEBUG_ARRAY("", digest, CRC32_DIGEST_SIZE);
      TRACE_DEBUG("Given Check CRC: ");
      TRACE_DEBUG_ARRAY("", buffer, CRC32_DIGEST_SIZE);
      return CBOOT_ERROR_FAILURE;
 80024f4:	2701      	movs	r7, #1
 80024f6:	e004      	b.n	8002502 <bootCheckImage+0xc2>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80024f8:	2704      	movs	r7, #4
 80024fa:	e002      	b.n	8002502 <bootCheckImage+0xc2>
 80024fc:	2704      	movs	r7, #4
 80024fe:	e000      	b.n	8002502 <bootCheckImage+0xc2>
      return CBOOT_ERROR_FAILURE;
 8002500:	2701      	movs	r7, #1
   }
#endif

   // Successfully processed
   return CBOOT_NO_ERROR;
}
 8002502:	4638      	mov	r0, r7
 8002504:	b015      	add	sp, #84	@ 0x54
 8002506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return CBOOT_ERROR_INVALID_LENGTH;
 800250a:	2718      	movs	r7, #24
 800250c:	e7f9      	b.n	8002502 <bootCheckImage+0xc2>
         return CBOOT_ERROR_FAILURE;
 800250e:	2701      	movs	r7, #1
 8002510:	e7f7      	b.n	8002502 <bootCheckImage+0xc2>
      return CBOOT_ERROR_FAILURE;
 8002512:	2701      	movs	r7, #1
 8002514:	e7f5      	b.n	8002502 <bootCheckImage+0xc2>
 8002516:	bf00      	nop
 8002518:	080054fc 	.word	0x080054fc

0800251c <bootGetSlotImgHeader>:

   // Initialize status code
   cerror = CBOOT_NO_ERROR;

   // Check parameter validity
   if (slot == NULL)
 800251c:	b338      	cbz	r0, 800256e <bootGetSlotImgHeader+0x52>
{
 800251e:	b530      	push	{r4, r5, lr}
 8002520:	b093      	sub	sp, #76	@ 0x4c
 8002522:	460c      	mov	r4, r1
      return cerror;

   memory = (Memory *)slot->memParent;
 8002524:	6842      	ldr	r2, [r0, #4]
   driver = (FlashDriver *)memory->driver;
 8002526:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c

   // Read first slot data that should correspond to the image header
   error = driver->read(slot->addr, buffer, sizeof(buffer));
 8002528:	6955      	ldr	r5, [r2, #20]
 800252a:	2240      	movs	r2, #64	@ 0x40
 800252c:	a902      	add	r1, sp, #8
 800252e:	6880      	ldr	r0, [r0, #8]
 8002530:	47a8      	blx	r5
   if (error)
 8002532:	b110      	cbz	r0, 800253a <bootGetSlotImgHeader+0x1e>
      return CBOOT_ERROR_FAILURE;
 8002534:	2001      	movs	r0, #1
   // Save image header
   memcpy(header, tmpHeader, sizeof(ImageHeader));

   // Successful process
   return CBOOT_NO_ERROR;
}
 8002536:	b013      	add	sp, #76	@ 0x4c
 8002538:	bd30      	pop	{r4, r5, pc}
   cerror = imageGetHeader(buffer, sizeof(buffer), &tmpHeader);
 800253a:	aa01      	add	r2, sp, #4
 800253c:	2140      	movs	r1, #64	@ 0x40
 800253e:	a802      	add	r0, sp, #8
 8002540:	f000 fc04 	bl	8002d4c <imageGetHeader>
   if (cerror)
 8002544:	2800      	cmp	r0, #0
 8002546:	d1f6      	bne.n	8002536 <bootGetSlotImgHeader+0x1a>
   memcpy(header, tmpHeader, sizeof(ImageHeader));
 8002548:	9b01      	ldr	r3, [sp, #4]
 800254a:	4621      	mov	r1, r4
 800254c:	f103 0e40 	add.w	lr, r3, #64	@ 0x40
 8002550:	f8d3 c000 	ldr.w	ip, [r3]
 8002554:	685d      	ldr	r5, [r3, #4]
 8002556:	689c      	ldr	r4, [r3, #8]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	f8c1 c000 	str.w	ip, [r1]
 800255e:	604d      	str	r5, [r1, #4]
 8002560:	608c      	str	r4, [r1, #8]
 8002562:	60ca      	str	r2, [r1, #12]
 8002564:	3310      	adds	r3, #16
 8002566:	3110      	adds	r1, #16
 8002568:	4573      	cmp	r3, lr
 800256a:	d1f1      	bne.n	8002550 <bootGetSlotImgHeader+0x34>
 800256c:	e7e3      	b.n	8002536 <bootGetSlotImgHeader+0x1a>
      return cerror;
 800256e:	2000      	movs	r0, #0
}
 8002570:	4770      	bx	lr

08002572 <bootSelectUpdateImageSlot>:
   if (context == NULL)
 8002572:	b3c0      	cbz	r0, 80025e6 <bootSelectUpdateImageSlot+0x74>
{
 8002574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002578:	b094      	sub	sp, #80	@ 0x50
 800257a:	460c      	mov	r4, r1
 800257c:	4605      	mov	r5, r0
   tmpSlot = context->memories[0].slots[0];
 800257e:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8002582:	f100 0340 	add.w	r3, r0, #64	@ 0x40
 8002586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002588:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   cerror = bootGetSlotImgHeader(&tmpSlot, &tmpImgHeader);
 800258c:	4669      	mov	r1, sp
 800258e:	4660      	mov	r0, ip
 8002590:	f7ff ffc4 	bl	800251c <bootGetSlotImgHeader>
   if (!cerror)
 8002594:	4607      	mov	r7, r0
 8002596:	b948      	cbnz	r0, 80025ac <bootSelectUpdateImageSlot+0x3a>
      tmpImgIndex = tmpImgHeader.imgIndex;
 8002598:	f8dd 8004 	ldr.w	r8, [sp, #4]
      *selectedSlot = tmpSlot;
 800259c:	ab14      	add	r3, sp, #80	@ 0x50
 800259e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80025a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   cerror = bootGetSlotImgHeader(&tmpSlot, &tmpImgHeader);
 80025a6:	4638      	mov	r0, r7
      for (i = 0; i < 1; i++)
 80025a8:	2600      	movs	r6, #0
 80025aa:	b116      	cbz	r6, 80025b2 <bootSelectUpdateImageSlot+0x40>
}
 80025ac:	b014      	add	sp, #80	@ 0x50
 80025ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         tmpSlot = context->memories[0].slots[i + 1];
 80025b2:	3601      	adds	r6, #1
 80025b4:	1d33      	adds	r3, r6, #4
 80025b6:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80025ba:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80025be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025c0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
         cerror = bootGetSlotImgHeader(&tmpSlot, &tmpImgHeader);
 80025c4:	4669      	mov	r1, sp
 80025c6:	4660      	mov	r0, ip
 80025c8:	f7ff ffa8 	bl	800251c <bootGetSlotImgHeader>
         if (cerror)
 80025cc:	b948      	cbnz	r0, 80025e2 <bootSelectUpdateImageSlot+0x70>
            if (tmpImgHeader.imgIndex > tmpImgIndex)
 80025ce:	f8dd c004 	ldr.w	ip, [sp, #4]
 80025d2:	45c4      	cmp	ip, r8
 80025d4:	d905      	bls.n	80025e2 <bootSelectUpdateImageSlot+0x70>
               *selectedSlot = tmpSlot;
 80025d6:	ab14      	add	r3, sp, #80	@ 0x50
 80025d8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80025dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
               tmpImgIndex = tmpImgHeader.imgIndex;
 80025e0:	46e0      	mov	r8, ip
 80025e2:	4638      	mov	r0, r7
 80025e4:	e7e1      	b.n	80025aa <bootSelectUpdateImageSlot+0x38>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80025e6:	2004      	movs	r0, #4
}
 80025e8:	4770      	bx	lr

080025ea <bootCheckSlotAppResetVector>:

   // Initialize status code
   cerror = CBOOT_NO_ERROR;

   // Check parameter validity
   if (slot == NULL)
 80025ea:	b1e0      	cbz	r0, 8002626 <bootCheckSlotAppResetVector+0x3c>
{
 80025ec:	b530      	push	{r4, r5, lr}
 80025ee:	b083      	sub	sp, #12
 80025f0:	4604      	mov	r4, r0
      return CBOOT_ERROR_INVALID_PARAMETERS;

   memory = (Memory *)slot->memParent;
 80025f2:	6843      	ldr	r3, [r0, #4]
   driver = (FlashDriver *)memory->driver;
 80025f4:	6add      	ldr	r5, [r3, #44]	@ 0x2c

   // Compute reset vector address offset (slot app start address offset + 4)
   resetVectorAddrOffset = mcuGetVtorOffset() + 0x4;
 80025f6:	f000 f8f1 	bl	80027dc <mcuGetVtorOffset>
 80025fa:	3004      	adds	r0, #4

   // Check reset vector of the current application
   error = driver->read(slot->addr + resetVectorAddrOffset, (uint8_t *)&resetVector, sizeof(resetVector));
 80025fc:	696b      	ldr	r3, [r5, #20]
 80025fe:	2204      	movs	r2, #4
 8002600:	eb0d 0102 	add.w	r1, sp, r2
 8002604:	68a5      	ldr	r5, [r4, #8]
 8002606:	4428      	add	r0, r5
 8002608:	4798      	blx	r3

   // Check there is no error?
   if (!error)
 800260a:	b970      	cbnz	r0, 800262a <bootCheckSlotAppResetVector+0x40>
   {
      // Is reset vector invalid (wrong value or outside of memory)?
      if ((resetVector == 0xFFFFFFFF) || !(slot->addr <= resetVector && resetVector <= slot->addr + slot->size))
 800260c:	9b01      	ldr	r3, [sp, #4]
 800260e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002612:	d00d      	beq.n	8002630 <bootCheckSlotAppResetVector+0x46>
 8002614:	68a2      	ldr	r2, [r4, #8]
 8002616:	4293      	cmp	r3, r2
 8002618:	d30c      	bcc.n	8002634 <bootCheckSlotAppResetVector+0x4a>
 800261a:	68e1      	ldr	r1, [r4, #12]
 800261c:	440a      	add	r2, r1
 800261e:	4293      	cmp	r3, r2
 8002620:	d904      	bls.n	800262c <bootCheckSlotAppResetVector+0x42>
      {
         // Raised an error
         cerror = CBOOT_ERROR_FAILURE; // ERROR INVALID RESET VECTOR
 8002622:	2001      	movs	r0, #1
 8002624:	e002      	b.n	800262c <bootCheckSlotAppResetVector+0x42>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8002626:	2004      	movs	r0, #4
      }
   }

   // Return status code
   return cerror;
}
 8002628:	4770      	bx	lr
   cerror = CBOOT_NO_ERROR;
 800262a:	2000      	movs	r0, #0
}
 800262c:	b003      	add	sp, #12
 800262e:	bd30      	pop	{r4, r5, pc}
         cerror = CBOOT_ERROR_FAILURE; // ERROR INVALID RESET VECTOR
 8002630:	2001      	movs	r0, #1
 8002632:	e7fb      	b.n	800262c <bootCheckSlotAppResetVector+0x42>
 8002634:	2001      	movs	r0, #1
 8002636:	e7f9      	b.n	800262c <bootCheckSlotAppResetVector+0x42>

08002638 <bootChangeState>:
 **/

void bootChangeState(BootContext *context, BootState newState)
{
   // Update Bootloader state
   context->state = newState;
 8002638:	7001      	strb	r1, [r0, #0]
}
 800263a:	4770      	bx	lr

0800263c <bootCheckNoSlotOverlap>:
 * @return TRUE if slots overlap, else FALSE
 **/

bool_t bootCheckNoSlotOverlap(Slot *s1, Slot *s2)
{
   uint32_t slot1_end = s1->addr + s1->size;
 800263c:	6883      	ldr	r3, [r0, #8]
 800263e:	68c0      	ldr	r0, [r0, #12]
 8002640:	4418      	add	r0, r3
   uint32_t slot2_end = s2->addr + s2->size;
 8002642:	688a      	ldr	r2, [r1, #8]
 8002644:	68c9      	ldr	r1, [r1, #12]
 8002646:	4411      	add	r1, r2

   //Check if the given two slot overlap
   if((s2->addr >= s1->addr && s2->addr < slot1_end) ||
 8002648:	4293      	cmp	r3, r2
 800264a:	d801      	bhi.n	8002650 <bootCheckNoSlotOverlap+0x14>
 800264c:	4282      	cmp	r2, r0
 800264e:	d305      	bcc.n	800265c <bootCheckNoSlotOverlap+0x20>
 8002650:	4293      	cmp	r3, r2
 8002652:	d305      	bcc.n	8002660 <bootCheckNoSlotOverlap+0x24>
      (s1->addr >= s2->addr && s1->addr < slot2_end))
 8002654:	428b      	cmp	r3, r1
 8002656:	d305      	bcc.n	8002664 <bootCheckNoSlotOverlap+0x28>
   {
      return TRUE;
   }
   else
   {
      return FALSE;
 8002658:	2000      	movs	r0, #0
 800265a:	4770      	bx	lr
      return TRUE;
 800265c:	2001      	movs	r0, #1
 800265e:	4770      	bx	lr
      return FALSE;
 8002660:	2000      	movs	r0, #0
 8002662:	4770      	bx	lr
      return TRUE;
 8002664:	2001      	movs	r0, #1
   }
}
 8002666:	4770      	bx	lr

08002668 <bootInitPrimaryMem>:
   if (context == NULL || settings == NULL)
 8002668:	2800      	cmp	r0, #0
 800266a:	d057      	beq.n	800271c <bootInitPrimaryMem+0xb4>
{
 800266c:	b570      	push	{r4, r5, r6, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	460c      	mov	r4, r1
 8002672:	4606      	mov	r6, r0
   if (context == NULL || settings == NULL)
 8002674:	2900      	cmp	r1, #0
 8002676:	d053      	beq.n	8002720 <bootInitPrimaryMem+0xb8>
   if (settings->memories[0].driver == NULL)
 8002678:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 800267a:	2d00      	cmp	r5, #0
 800267c:	d052      	beq.n	8002724 <bootInitPrimaryMem+0xbc>
   error = flashDriver->init();
 800267e:	682b      	ldr	r3, [r5, #0]
 8002680:	4798      	blx	r3
   if (error)
 8002682:	2800      	cmp	r0, #0
 8002684:	d150      	bne.n	8002728 <bootInitPrimaryMem+0xc0>
   error = flashDriver->getInfo(&flashInfo);
 8002686:	68ab      	ldr	r3, [r5, #8]
 8002688:	a801      	add	r0, sp, #4
 800268a:	4798      	blx	r3
   if (error)
 800268c:	2800      	cmp	r0, #0
 800268e:	d14e      	bne.n	800272e <bootInitPrimaryMem+0xc6>
   ret = flashDriver->isSectorAddr(settings->memories[0].slots[0].addr);
 8002690:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002692:	6920      	ldr	r0, [r4, #16]
 8002694:	4798      	blx	r3
   if (!ret)
 8002696:	2800      	cmp	r0, #0
 8002698:	d04b      	beq.n	8002732 <bootInitPrimaryMem+0xca>
   if ((settings->memories[0].slots[0].addr + settings->memories[0].slots[0].size) >
 800269a:	6923      	ldr	r3, [r4, #16]
 800269c:	6962      	ldr	r2, [r4, #20]
 800269e:	441a      	add	r2, r3
       (flashInfo->flashAddr + flashInfo->flashSize))
 80026a0:	9901      	ldr	r1, [sp, #4]
 80026a2:	68cb      	ldr	r3, [r1, #12]
 80026a4:	6909      	ldr	r1, [r1, #16]
 80026a6:	440b      	add	r3, r1
   if ((settings->memories[0].slots[0].addr + settings->memories[0].slots[0].size) >
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d844      	bhi.n	8002736 <bootInitPrimaryMem+0xce>
   ret = flashDriver->isSectorAddr(settings->memories[0].slots[1].addr);
 80026ac:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80026ae:	6a20      	ldr	r0, [r4, #32]
 80026b0:	4798      	blx	r3
   if (!ret)
 80026b2:	2800      	cmp	r0, #0
 80026b4:	d041      	beq.n	800273a <bootInitPrimaryMem+0xd2>
   if ((settings->memories[0].slots[1].addr + settings->memories[0].slots[1].size) >
 80026b6:	6a23      	ldr	r3, [r4, #32]
 80026b8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80026ba:	441a      	add	r2, r3
       (flashInfo->flashAddr + flashInfo->flashSize))
 80026bc:	9901      	ldr	r1, [sp, #4]
 80026be:	68cb      	ldr	r3, [r1, #12]
 80026c0:	6909      	ldr	r1, [r1, #16]
 80026c2:	440b      	add	r3, r1
   if ((settings->memories[0].slots[1].addr + settings->memories[0].slots[1].size) >
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d83a      	bhi.n	800273e <bootInitPrimaryMem+0xd6>
   primaryMemory->memoryType = settings->memories[0].memoryType;
 80026c8:	7823      	ldrb	r3, [r4, #0]
 80026ca:	f886 3038 	strb.w	r3, [r6, #56]	@ 0x38
   primaryMemory->driver = settings->memories[0].driver;
 80026ce:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80026d0:	6673      	str	r3, [r6, #100]	@ 0x64
   primaryMemory->nbSlots = settings->memories[0].nbSlots;
 80026d2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80026d6:	f886 3060 	strb.w	r3, [r6, #96]	@ 0x60
   primaryMemory->slots[0].type = settings->memories[0].slots[0].type;
 80026da:	7a23      	ldrb	r3, [r4, #8]
 80026dc:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
   primaryMemory->slots[0].cType = settings->memories[0].slots[0].cType;
 80026e0:	7a63      	ldrb	r3, [r4, #9]
 80026e2:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
   primaryMemory->slots[0].addr = settings->memories[0].slots[0].addr;
 80026e6:	6923      	ldr	r3, [r4, #16]
 80026e8:	64b3      	str	r3, [r6, #72]	@ 0x48
   primaryMemory->slots[0].size = settings->memories[0].slots[0].size;
 80026ea:	6963      	ldr	r3, [r4, #20]
 80026ec:	64f3      	str	r3, [r6, #76]	@ 0x4c
   primaryMemory->slots[0].memParent = &context->memories[0];
 80026ee:	f106 0338 	add.w	r3, r6, #56	@ 0x38
 80026f2:	6473      	str	r3, [r6, #68]	@ 0x44
   primaryMemory->slots[1].type = settings->memories[0].slots[1].type;
 80026f4:	7e22      	ldrb	r2, [r4, #24]
 80026f6:	f886 2050 	strb.w	r2, [r6, #80]	@ 0x50
   primaryMemory->slots[1].cType = settings->memories[0].slots[1].cType;
 80026fa:	7e62      	ldrb	r2, [r4, #25]
 80026fc:	f886 2051 	strb.w	r2, [r6, #81]	@ 0x51
   primaryMemory->slots[1].addr = settings->memories[0].slots[1].addr;
 8002700:	6a22      	ldr	r2, [r4, #32]
 8002702:	65b2      	str	r2, [r6, #88]	@ 0x58
   primaryMemory->slots[1].size = settings->memories[0].slots[1].size;
 8002704:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002706:	65f2      	str	r2, [r6, #92]	@ 0x5c
   primaryMemory->slots[1].memParent = &context->memories[0];
 8002708:	6573      	str	r3, [r6, #84]	@ 0x54
   ret = bootCheckNoSlotOverlap(&primaryMemory->slots[0], &primaryMemory->slots[1]);
 800270a:	f106 0150 	add.w	r1, r6, #80	@ 0x50
 800270e:	f106 0040 	add.w	r0, r6, #64	@ 0x40
 8002712:	f7ff ff93 	bl	800263c <bootCheckNoSlotOverlap>
   if (ret)
 8002716:	b140      	cbz	r0, 800272a <bootInitPrimaryMem+0xc2>
      return CBOOT_ERROR_INVALID_ADDRESS;
 8002718:	2005      	movs	r0, #5
 800271a:	e006      	b.n	800272a <bootInitPrimaryMem+0xc2>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800271c:	2004      	movs	r0, #4
}
 800271e:	4770      	bx	lr
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8002720:	2004      	movs	r0, #4
 8002722:	e002      	b.n	800272a <bootInitPrimaryMem+0xc2>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8002724:	2004      	movs	r0, #4
 8002726:	e000      	b.n	800272a <bootInitPrimaryMem+0xc2>
      return CBOOT_ERROR_FAILURE;
 8002728:	2001      	movs	r0, #1
}
 800272a:	b002      	add	sp, #8
 800272c:	bd70      	pop	{r4, r5, r6, pc}
      return CBOOT_ERROR_FAILURE;
 800272e:	2001      	movs	r0, #1
 8002730:	e7fb      	b.n	800272a <bootInitPrimaryMem+0xc2>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8002732:	2004      	movs	r0, #4
 8002734:	e7f9      	b.n	800272a <bootInitPrimaryMem+0xc2>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8002736:	2004      	movs	r0, #4
 8002738:	e7f7      	b.n	800272a <bootInitPrimaryMem+0xc2>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800273a:	2004      	movs	r0, #4
 800273c:	e7f5      	b.n	800272a <bootInitPrimaryMem+0xc2>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800273e:	2004      	movs	r0, #4
 8002740:	e7f3      	b.n	800272a <bootInitPrimaryMem+0xc2>

08002742 <crc32Init>:
 **/

void crc32Init(Crc32Context *context)
{
   //CRC (digest) preset value
   context->digest = 0xFFFFFFFF;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002746:	6003      	str	r3, [r0, #0]
}
 8002748:	4770      	bx	lr
	...

0800274c <crc32Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

void crc32Update(Crc32Context *context, const void *data, size_t length)
{
 800274c:	b430      	push	{r4, r5}
   size_t i;
   const uint8_t *p;
   uint32_t crc;

   //Restaure last crc
   crc = (uint32_t)context->digest;
 800274e:	6804      	ldr	r4, [r0, #0]

   //Point to the data over which to calculate the CRC
   p = (uint8_t *) data;

   //Process the incoming data
   for(i = 0; i < length; i++)
 8002750:	2300      	movs	r3, #0
 8002752:	e00a      	b.n	800276a <crc32Update+0x1e>
   {
      //The message is processed byte by byte
      crc = (crc >> 8) ^ crc32Table[(crc & 0xFF) ^ p[i]];
 8002754:	fa5f fc84 	uxtb.w	ip, r4
 8002758:	5ccd      	ldrb	r5, [r1, r3]
 800275a:	ea8c 0c05 	eor.w	ip, ip, r5
 800275e:	4d05      	ldr	r5, [pc, #20]	@ (8002774 <crc32Update+0x28>)
 8002760:	f855 502c 	ldr.w	r5, [r5, ip, lsl #2]
 8002764:	ea85 2414 	eor.w	r4, r5, r4, lsr #8
   for(i = 0; i < length; i++)
 8002768:	3301      	adds	r3, #1
 800276a:	4293      	cmp	r3, r2
 800276c:	d3f2      	bcc.n	8002754 <crc32Update+0x8>
   }

   //Save updated crc
   context->digest = crc;
 800276e:	6004      	str	r4, [r0, #0]
}
 8002770:	bc30      	pop	{r4, r5}
 8002772:	4770      	bx	lr
 8002774:	08005530 	.word	0x08005530

08002778 <crc32Final>:
 **/

void crc32Final(Crc32Context *context, uint8_t *digest)
{
   //Copy the resulting digest
   if(digest != NULL)
 8002778:	b109      	cbz	r1, 800277e <crc32Final+0x6>
      osMemcpy(digest, (uint8_t*)&context->digest, CRC32_DIGEST_SIZE);
 800277a:	6802      	ldr	r2, [r0, #0]
 800277c:	600a      	str	r2, [r1, #0]
}
 800277e:	4770      	bx	lr

08002780 <crc32Compute>:
{
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	4606      	mov	r6, r0
 8002784:	460f      	mov	r7, r1
 8002786:	4615      	mov	r5, r2
   Crc32Context *context = cryptoAllocMem(sizeof(Crc32Context));
 8002788:	2004      	movs	r0, #4
 800278a:	f7ff fca2 	bl	80020d2 <osAllocMem>
   if(context == NULL)
 800278e:	b180      	cbz	r0, 80027b2 <crc32Compute+0x32>
 8002790:	4604      	mov	r4, r0
   crc32Init(context);
 8002792:	f7ff ffd6 	bl	8002742 <crc32Init>
   crc32Update(context, data, length);
 8002796:	463a      	mov	r2, r7
 8002798:	4631      	mov	r1, r6
 800279a:	4620      	mov	r0, r4
 800279c:	f7ff ffd6 	bl	800274c <crc32Update>
   crc32Final(context, digest);
 80027a0:	4629      	mov	r1, r5
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7ff ffe8 	bl	8002778 <crc32Final>
   cryptoFreeMem(context);
 80027a8:	4620      	mov	r0, r4
 80027aa:	f7ff fc96 	bl	80020da <osFreeMem>
   return NO_ERROR;
 80027ae:	2000      	movs	r0, #0
}
 80027b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return ERROR_OUT_OF_MEMORY;
 80027b2:	2064      	movs	r0, #100	@ 0x64
 80027b4:	e7fc      	b.n	80027b0 <crc32Compute+0x30>
	...

080027b8 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80027b8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80027bc:	4905      	ldr	r1, [pc, #20]	@ (80027d4 <__NVIC_SystemReset+0x1c>)
 80027be:	68ca      	ldr	r2, [r1, #12]
 80027c0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80027c4:	4b04      	ldr	r3, [pc, #16]	@ (80027d8 <__NVIC_SystemReset+0x20>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60cb      	str	r3, [r1, #12]
 80027ca:	f3bf 8f4f 	dsb	sy
    __NOP();
 80027ce:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80027d0:	e7fd      	b.n	80027ce <__NVIC_SystemReset+0x16>
 80027d2:	bf00      	nop
 80027d4:	e000ed00 	.word	0xe000ed00
 80027d8:	05fa0004 	.word	0x05fa0004

080027dc <mcuGetVtorOffset>:
 **/

uint32_t mcuGetVtorOffset(void)
{
   return MCU_VTOR_OFFSET;
}
 80027dc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80027e0:	4770      	bx	lr

080027e2 <mcuSystemReset>:
/**
 * @brief Reset MCU system
 **/

void mcuSystemReset(void)
{
 80027e2:	b508      	push	{r3, lr}
   NVIC_SystemReset();
 80027e4:	f7ff ffe8 	bl	80027b8 <__NVIC_SystemReset>

080027e8 <mcuBootAppImageAsm>:
 **/

#if defined(__GNUC__)
__attribute__((naked, noreturn)) void mcuBootAppImageAsm(uint32_t sp, uint32_t rh)
{
   __asm("MSR  MSP, r0");
 80027e8:	f380 8808 	msr	MSP, r0
   __asm("BX   r1");
 80027ec:	4708      	bx	r1

080027ee <stm32f4xxFlashDriverDeInit>:
 **/

error_t stm32f4xxFlashDriverDeInit(void)
{
   return ERROR_NOT_IMPLEMENTED;
}
 80027ee:	2067      	movs	r0, #103	@ 0x67
 80027f0:	4770      	bx	lr
	...

080027f4 <stm32f4xxFlashDriverGetInfo>:
 **/

error_t stm32f4xxFlashDriverGetInfo(const FlashInfo **info)
{
   //Set Memory information pointeur
   *info = (const FlashInfo*) &stm32f4xxFlashDriverInfo;
 80027f4:	4b01      	ldr	r3, [pc, #4]	@ (80027fc <stm32f4xxFlashDriverGetInfo+0x8>)
 80027f6:	6003      	str	r3, [r0, #0]

   //Successfull process
   return NO_ERROR;
}
 80027f8:	2000      	movs	r0, #0
 80027fa:	4770      	bx	lr
 80027fc:	0800595c 	.word	0x0800595c

08002800 <stm32f4xxFlashDriverGetStatus>:
error_t stm32f4xxFlashDriverGetStatus(FlashStatus *status)
{
   uint32_t flag;

   //Check parameter vailidity
   if(status == NULL)
 8002800:	4603      	mov	r3, r0
 8002802:	b1a0      	cbz	r0, 800282e <stm32f4xxFlashDriverGetStatus+0x2e>
      return ERROR_INVALID_PARAMETER;

   do
   {
      //Get Flash Memory error flags status
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR |
 8002804:	4a0b      	ldr	r2, [pc, #44]	@ (8002834 <stm32f4xxFlashDriverGetStatus+0x34>)
 8002806:	68d2      	ldr	r2, [r2, #12]
                        FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
                        FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

      //Is any error flag set?
      if(flag != RESET)
 8002808:	f012 0ff2 	tst.w	r2, #242	@ 0xf2
 800280c:	d003      	beq.n	8002816 <stm32f4xxFlashDriverGetStatus+0x16>
      {
         //Set Flash memory status
         *status = FLASH_STATUS_ERR;
 800280e:	2202      	movs	r2, #2
 8002810:	7002      	strb	r2, [r0, #0]
      //Set Flash memory status
      *status = FLASH_STATUS_OK;
   }while(0);

   //Successfull process
   return NO_ERROR;
 8002812:	2000      	movs	r0, #0
         break;
 8002814:	4770      	bx	lr
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY);
 8002816:	4a07      	ldr	r2, [pc, #28]	@ (8002834 <stm32f4xxFlashDriverGetStatus+0x34>)
 8002818:	68d2      	ldr	r2, [r2, #12]
      if(flag != RESET)
 800281a:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 800281e:	d003      	beq.n	8002828 <stm32f4xxFlashDriverGetStatus+0x28>
         *status = FLASH_STATUS_BUSY;
 8002820:	2201      	movs	r2, #1
 8002822:	7002      	strb	r2, [r0, #0]
   return NO_ERROR;
 8002824:	2000      	movs	r0, #0
         break;
 8002826:	4770      	bx	lr
      *status = FLASH_STATUS_OK;
 8002828:	2000      	movs	r0, #0
 800282a:	7018      	strb	r0, [r3, #0]
 800282c:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 800282e:	2002      	movs	r0, #2
}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40023c00 	.word	0x40023c00

08002838 <stm32f4xxFlashDriverRead>:

   //Precompute the top address
   topAddress = STM32F4xx_ADDR + STM32F4xx_SIZE;

   //Check address validity
   if(address < STM32F4xx_ADDR || address >= topAddress)
 8002838:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 800283c:	d312      	bcc.n	8002864 <stm32f4xxFlashDriverRead+0x2c>
 800283e:	f1b0 6f01 	cmp.w	r0, #135266304	@ 0x8100000
 8002842:	d211      	bcs.n	8002868 <stm32f4xxFlashDriverRead+0x30>
      return ERROR_INVALID_PARAMETER;

#ifndef FLASH_DB_MODE
   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 8002844:	b191      	cbz	r1, 800286c <stm32f4xxFlashDriverRead+0x34>
 8002846:	1883      	adds	r3, r0, r2
 8002848:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 800284c:	d810      	bhi.n	8002870 <stm32f4xxFlashDriverRead+0x38>
      (address >= STM32F4xx_BANK_2_ADDR && address + length <= topAddress)))
      return ERROR_INVALID_PARAMETER;
#endif

   //Perform read operation
   for(i = 0; i < length; i++)
 800284e:	2300      	movs	r3, #0
 8002850:	e004      	b.n	800285c <stm32f4xxFlashDriverRead+0x24>
   {
      *((uint8_t *)data + i) = *(uint8_t*)address;
 8002852:	f810 cb01 	ldrb.w	ip, [r0], #1
 8002856:	f801 c003 	strb.w	ip, [r1, r3]
   for(i = 0; i < length; i++)
 800285a:	3301      	adds	r3, #1
 800285c:	4293      	cmp	r3, r2
 800285e:	d3f8      	bcc.n	8002852 <stm32f4xxFlashDriverRead+0x1a>
      address++;
   }

   //Successfull process
   return NO_ERROR;
 8002860:	2000      	movs	r0, #0
 8002862:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8002864:	2002      	movs	r0, #2
 8002866:	4770      	bx	lr
 8002868:	2002      	movs	r0, #2
 800286a:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 800286c:	2002      	movs	r0, #2
 800286e:	4770      	bx	lr
 8002870:	2002      	movs	r0, #2
}
 8002872:	4770      	bx	lr

08002874 <stm32f4xxFlashDriverGetNextSector>:

   lastSectorAddr = sectorsList[SECTORS_LIST_LEN-1].addr +
      (sectorsList[SECTORS_LIST_LEN-1].size * (sectorsList[SECTORS_LIST_LEN-1].nb - 1));

   //Check parameters validity
   if(address < STM32F4xx_ADDR || address > lastSectorAddr || sectorAddr == NULL)
 8002874:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 8002878:	d329      	bcc.n	80028ce <stm32f4xxFlashDriverGetNextSector+0x5a>
 800287a:	4b18      	ldr	r3, [pc, #96]	@ (80028dc <stm32f4xxFlashDriverGetNextSector+0x68>)
 800287c:	4298      	cmp	r0, r3
 800287e:	d828      	bhi.n	80028d2 <stm32f4xxFlashDriverGetNextSector+0x5e>
 8002880:	b349      	cbz	r1, 80028d6 <stm32f4xxFlashDriverGetNextSector+0x62>
{
 8002882:	b4f0      	push	{r4, r5, r6, r7}
   uint32_t sAddr = 0xFFFFFFFF;
 8002884:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
      return ERROR_INVALID_PARAMETER;

   //Loop through sectors list
   for(i = 0; i < SECTORS_LIST_LEN && sAddr == 0xFFFFFFFF; i++)
 8002888:	2200      	movs	r2, #0
 800288a:	e001      	b.n	8002890 <stm32f4xxFlashDriverGetNextSector+0x1c>
         {
            //Is address located in current sector?
            if(address <= sg->addr + j*sg->size)
            {
               //Set next sector address
               sAddr = sg->addr + j*sg->size;
 800288c:	4667      	mov	r7, ip
   for(i = 0; i < SECTORS_LIST_LEN && sAddr == 0xFFFFFFFF; i++)
 800288e:	3201      	adds	r2, #1
 8002890:	2a02      	cmp	r2, #2
 8002892:	d818      	bhi.n	80028c6 <stm32f4xxFlashDriverGetNextSector+0x52>
 8002894:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 8002898:	d115      	bne.n	80028c6 <stm32f4xxFlashDriverGetNextSector+0x52>
      if(address <= sg->addr + sg->size*sg->nb)
 800289a:	4c11      	ldr	r4, [pc, #68]	@ (80028e0 <stm32f4xxFlashDriverGetNextSector+0x6c>)
 800289c:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80028a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80028a4:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 80028a8:	685e      	ldr	r6, [r3, #4]
 80028aa:	689c      	ldr	r4, [r3, #8]
 80028ac:	fb04 5306 	mla	r3, r4, r6, r5
 80028b0:	4283      	cmp	r3, r0
 80028b2:	d3ec      	bcc.n	800288e <stm32f4xxFlashDriverGetNextSector+0x1a>
         for(j = 0; j < sg->nb; j++)
 80028b4:	2300      	movs	r3, #0
 80028b6:	429c      	cmp	r4, r3
 80028b8:	d9e9      	bls.n	800288e <stm32f4xxFlashDriverGetNextSector+0x1a>
            if(address <= sg->addr + j*sg->size)
 80028ba:	fb03 5c06 	mla	ip, r3, r6, r5
 80028be:	4584      	cmp	ip, r0
 80028c0:	d2e4      	bcs.n	800288c <stm32f4xxFlashDriverGetNextSector+0x18>
         for(j = 0; j < sg->nb; j++)
 80028c2:	3301      	adds	r3, #1
 80028c4:	e7f7      	b.n	80028b6 <stm32f4xxFlashDriverGetNextSector+0x42>
         }
      }
   }

   //Save next sector addr
   *sectorAddr = sAddr;
 80028c6:	600f      	str	r7, [r1, #0]

   //Succesfull process
   return NO_ERROR;
 80028c8:	2000      	movs	r0, #0
}
 80028ca:	bcf0      	pop	{r4, r5, r6, r7}
 80028cc:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 80028ce:	2002      	movs	r0, #2
 80028d0:	4770      	bx	lr
 80028d2:	2002      	movs	r0, #2
 80028d4:	4770      	bx	lr
 80028d6:	2002      	movs	r0, #2
}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	080e0000 	.word	0x080e0000
 80028e0:	0800598c 	.word	0x0800598c

080028e4 <stm32f4xxFlashDriverInit>:
{
 80028e4:	b508      	push	{r3, lr}
   TRACE_INFO("Initializing %s memory...\r\n", STM32F4xx_NAME);
 80028e6:	f7ff fbf2 	bl	80020ce <osSuspendAllTasks>
 80028ea:	4b07      	ldr	r3, [pc, #28]	@ (8002908 <stm32f4xxFlashDriverInit+0x24>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a07      	ldr	r2, [pc, #28]	@ (800290c <stm32f4xxFlashDriverInit+0x28>)
 80028f0:	4907      	ldr	r1, [pc, #28]	@ (8002910 <stm32f4xxFlashDriverInit+0x2c>)
 80028f2:	68d8      	ldr	r0, [r3, #12]
 80028f4:	f001 fd12 	bl	800431c <fiprintf>
 80028f8:	f7ff fbea 	bl	80020d0 <osResumeAllTasks>
   FLASH_WaitForLastOperation((uint32_t)50000U);
 80028fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002900:	f7fe fe8e 	bl	8001620 <FLASH_WaitForLastOperation>
}
 8002904:	2000      	movs	r0, #0
 8002906:	bd08      	pop	{r3, pc}
 8002908:	20000038 	.word	0x20000038
 800290c:	08005334 	.word	0x08005334
 8002910:	08005350 	.word	0x08005350

08002914 <stm32f4xxFlashDriverEraseSector>:
   HAL_StatusTypeDef status;
   FLASH_EraseInitTypeDef EraseInitStruct;
   uint32_t sectorError;

   //Check parameter validity
   if((firstSector >= STM32F4xx_SECTORS_NUMBER) || (nbSectors == 0) ||
 8002914:	280b      	cmp	r0, #11
 8002916:	d85e      	bhi.n	80029d6 <stm32f4xxFlashDriverEraseSector+0xc2>
{
 8002918:	b570      	push	{r4, r5, r6, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	4604      	mov	r4, r0
 800291e:	460d      	mov	r5, r1
   if((firstSector >= STM32F4xx_SECTORS_NUMBER) || (nbSectors == 0) ||
 8002920:	2900      	cmp	r1, #0
 8002922:	d05a      	beq.n	80029da <stm32f4xxFlashDriverEraseSector+0xc6>
      ((firstSector + nbSectors - 1) >= STM32F4xx_SECTORS_NUMBER))
 8002924:	1843      	adds	r3, r0, r1
 8002926:	3b01      	subs	r3, #1
   if((firstSector >= STM32F4xx_SECTORS_NUMBER) || (nbSectors == 0) ||
 8002928:	2b0b      	cmp	r3, #11
 800292a:	d858      	bhi.n	80029de <stm32f4xxFlashDriverEraseSector+0xca>
      return ERROR_INVALID_PARAMETER;

   //Initialize FLASH flags
   //(Patch to fix STM32 HAL library wrong initial flash flags issue)
   FLASH_WaitForLastOperation((uint32_t)50000U);
 800292c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002930:	f7fe fe76 	bl	8001620 <FLASH_WaitForLastOperation>

   //Start of exception handling block
   do
   {
      //Allow access to Flash control registers and user False
      status = HAL_FLASH_Unlock();
 8002934:	f7fe fe52 	bl	80015dc <HAL_FLASH_Unlock>
      //Is any error?
      if (status != HAL_OK)
 8002938:	4606      	mov	r6, r0
 800293a:	b180      	cbz	r0, 800295e <stm32f4xxFlashDriverEraseSector+0x4a>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 800293c:	f7ff fbc7 	bl	80020ce <osSuspendAllTasks>
 8002940:	4b29      	ldr	r3, [pc, #164]	@ (80029e8 <stm32f4xxFlashDriverEraseSector+0xd4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2227      	movs	r2, #39	@ 0x27
 8002948:	2101      	movs	r1, #1
 800294a:	4828      	ldr	r0, [pc, #160]	@ (80029ec <stm32f4xxFlashDriverEraseSector+0xd8>)
 800294c:	f001 fd62 	bl	8004414 <fwrite>
 8002950:	f7ff fbbe 	bl	80020d0 <osResumeAllTasks>
         break;
      }
   }while(0);

   //Return status code
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 8002954:	2e00      	cmp	r6, #0
 8002956:	d144      	bne.n	80029e2 <stm32f4xxFlashDriverEraseSector+0xce>
 8002958:	2000      	movs	r0, #0
}
 800295a:	b006      	add	sp, #24
 800295c:	bd70      	pop	{r4, r5, r6, pc}
      status = FLASH_WaitForLastOperation((uint32_t)50000U);
 800295e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002962:	f7fe fe5d 	bl	8001620 <FLASH_WaitForLastOperation>
      if(status != HAL_OK)
 8002966:	b9e0      	cbnz	r0, 80029a2 <stm32f4xxFlashDriverEraseSector+0x8e>
      EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002968:	2302      	movs	r3, #2
 800296a:	9305      	str	r3, [sp, #20]
      EraseInitStruct.Sector = firstSector;
 800296c:	9403      	str	r4, [sp, #12]
      EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS; // Erase multiple sectors
 800296e:	2300      	movs	r3, #0
 8002970:	9301      	str	r3, [sp, #4]
      EraseInitStruct.NbSectors = nbSectors;
 8002972:	9504      	str	r5, [sp, #16]
      status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 8002974:	4669      	mov	r1, sp
 8002976:	a801      	add	r0, sp, #4
 8002978:	f7fe ff28 	bl	80017cc <HAL_FLASHEx_Erase>
      if(status != HAL_OK)
 800297c:	4606      	mov	r6, r0
 800297e:	b9e8      	cbnz	r0, 80029bc <stm32f4xxFlashDriverEraseSector+0xa8>
      if(HAL_FLASH_Lock() != HAL_OK)
 8002980:	f7fe fe44 	bl	800160c <HAL_FLASH_Lock>
 8002984:	2800      	cmp	r0, #0
 8002986:	d0e5      	beq.n	8002954 <stm32f4xxFlashDriverEraseSector+0x40>
         TRACE_ERROR("Flash Control Register lock failed!\r\n");
 8002988:	f7ff fba1 	bl	80020ce <osSuspendAllTasks>
 800298c:	4b16      	ldr	r3, [pc, #88]	@ (80029e8 <stm32f4xxFlashDriverEraseSector+0xd4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2225      	movs	r2, #37	@ 0x25
 8002994:	2101      	movs	r1, #1
 8002996:	4816      	ldr	r0, [pc, #88]	@ (80029f0 <stm32f4xxFlashDriverEraseSector+0xdc>)
 8002998:	f001 fd3c 	bl	8004414 <fwrite>
 800299c:	f7ff fb98 	bl	80020d0 <osResumeAllTasks>
         break;
 80029a0:	e7d8      	b.n	8002954 <stm32f4xxFlashDriverEraseSector+0x40>
         TRACE_ERROR("Initialize FLASH flags...\r\n");
 80029a2:	f7ff fb94 	bl	80020ce <osSuspendAllTasks>
 80029a6:	4b10      	ldr	r3, [pc, #64]	@ (80029e8 <stm32f4xxFlashDriverEraseSector+0xd4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	221b      	movs	r2, #27
 80029ae:	2101      	movs	r1, #1
 80029b0:	4810      	ldr	r0, [pc, #64]	@ (80029f4 <stm32f4xxFlashDriverEraseSector+0xe0>)
 80029b2:	f001 fd2f 	bl	8004414 <fwrite>
 80029b6:	f7ff fb8b 	bl	80020d0 <osResumeAllTasks>
 80029ba:	e7d5      	b.n	8002968 <stm32f4xxFlashDriverEraseSector+0x54>
         TRACE_ERROR("Failed to erase flash sector(s) %ld, error = 0x%08lX!\r\n", firstSector, sectorError);
 80029bc:	f7ff fb87 	bl	80020ce <osSuspendAllTasks>
 80029c0:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <stm32f4xxFlashDriverEraseSector+0xd4>)
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	9b00      	ldr	r3, [sp, #0]
 80029c6:	4622      	mov	r2, r4
 80029c8:	490b      	ldr	r1, [pc, #44]	@ (80029f8 <stm32f4xxFlashDriverEraseSector+0xe4>)
 80029ca:	68c0      	ldr	r0, [r0, #12]
 80029cc:	f001 fca6 	bl	800431c <fiprintf>
 80029d0:	f7ff fb7e 	bl	80020d0 <osResumeAllTasks>
 80029d4:	e7d4      	b.n	8002980 <stm32f4xxFlashDriverEraseSector+0x6c>
      return ERROR_INVALID_PARAMETER;
 80029d6:	2002      	movs	r0, #2
}
 80029d8:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 80029da:	2002      	movs	r0, #2
 80029dc:	e7bd      	b.n	800295a <stm32f4xxFlashDriverEraseSector+0x46>
 80029de:	2002      	movs	r0, #2
 80029e0:	e7bb      	b.n	800295a <stm32f4xxFlashDriverEraseSector+0x46>
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 80029e2:	f240 200a 	movw	r0, #522	@ 0x20a
 80029e6:	e7b8      	b.n	800295a <stm32f4xxFlashDriverEraseSector+0x46>
 80029e8:	20000038 	.word	0x20000038
 80029ec:	0800536c 	.word	0x0800536c
 80029f0:	080053e8 	.word	0x080053e8
 80029f4:	08005394 	.word	0x08005394
 80029f8:	080053b0 	.word	0x080053b0

080029fc <stm32f4xxFlashGetSector>:
 * @param[in] address Given Flash Memory address
 * @return Sector number or -1
 **/

int_t stm32f4xxFlashGetSector(uint32_t address)
{
 80029fc:	b530      	push	{r4, r5, lr}
 80029fe:	4604      	mov	r4, r0
   SectorsGroup* sGroup;
   int_t tempSector;

   //Initialize sector number
   sector = -1;
   tempSector = 0;
 8002a00:	f04f 0e00 	mov.w	lr, #0

   //Loop through flash sector group list
   for(i = 0; i < SECTORS_LIST_LEN; i++)
 8002a04:	4673      	mov	r3, lr
   sector = -1;
 8002a06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   for(i = 0; i < SECTORS_LIST_LEN; i++)
 8002a0a:	e01a      	b.n	8002a42 <stm32f4xxFlashGetSector+0x46>
      for(j = 0; j < sGroup->nb; j++)
      {
         //Is current sector address matches given address?
         if(sGroup->addr + sGroup->size*j == address)
         {
            sector = tempSector;
 8002a0c:	4670      	mov	r0, lr
      for(j = 0; j < sGroup->nb; j++)
 8002a0e:	f10c 0c01 	add.w	ip, ip, #1
 8002a12:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002a16:	4a0e      	ldr	r2, [pc, #56]	@ (8002a50 <stm32f4xxFlashGetSector+0x54>)
 8002a18:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002a1c:	6892      	ldr	r2, [r2, #8]
 8002a1e:	4562      	cmp	r2, ip
 8002a20:	d90e      	bls.n	8002a40 <stm32f4xxFlashGetSector+0x44>
         if(sGroup->addr + sGroup->size*j == address)
 8002a22:	4a0b      	ldr	r2, [pc, #44]	@ (8002a50 <stm32f4xxFlashGetSector+0x54>)
 8002a24:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002a28:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8002a2c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002a30:	6869      	ldr	r1, [r5, #4]
 8002a32:	fb0c 2201 	mla	r2, ip, r1, r2
 8002a36:	42a2      	cmp	r2, r4
 8002a38:	d0e8      	beq.n	8002a0c <stm32f4xxFlashGetSector+0x10>
         }
         else
         {
            tempSector++;
 8002a3a:	f10e 0e01 	add.w	lr, lr, #1
 8002a3e:	e7e6      	b.n	8002a0e <stm32f4xxFlashGetSector+0x12>
   for(i = 0; i < SECTORS_LIST_LEN; i++)
 8002a40:	3301      	adds	r3, #1
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d802      	bhi.n	8002a4c <stm32f4xxFlashGetSector+0x50>
      for(j = 0; j < sGroup->nb; j++)
 8002a46:	f04f 0c00 	mov.w	ip, #0
 8002a4a:	e7e2      	b.n	8002a12 <stm32f4xxFlashGetSector+0x16>
         }
      }
   }

   return sector;
}
 8002a4c:	bd30      	pop	{r4, r5, pc}
 8002a4e:	bf00      	nop
 8002a50:	0800598c 	.word	0x0800598c

08002a54 <stm32f4xxFlashDriverErase>:
   if((address < STM32F4xx_ADDR || address >= topAddress) ||
 8002a54:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 8002a58:	d325      	bcc.n	8002aa6 <stm32f4xxFlashDriverErase+0x52>
 8002a5a:	f1b0 6f01 	cmp.w	r0, #135266304	@ 0x8100000
 8002a5e:	d224      	bcs.n	8002aaa <stm32f4xxFlashDriverErase+0x56>
 8002a60:	f010 0f03 	tst.w	r0, #3
 8002a64:	d123      	bne.n	8002aae <stm32f4xxFlashDriverErase+0x5a>
   if((length == 0) || (address + length > topAddress))
 8002a66:	b321      	cbz	r1, 8002ab2 <stm32f4xxFlashDriverErase+0x5e>
{
 8002a68:	b530      	push	{r4, r5, lr}
 8002a6a:	b083      	sub	sp, #12
   if((length == 0) || (address + length > topAddress))
 8002a6c:	1844      	adds	r4, r0, r1
 8002a6e:	f1b4 6f01 	cmp.w	r4, #135266304	@ 0x8100000
 8002a72:	d820      	bhi.n	8002ab6 <stm32f4xxFlashDriverErase+0x62>
   firstSectorNumber = stm32f4xxFlashGetSector(address);
 8002a74:	f7ff ffc2 	bl	80029fc <stm32f4xxFlashGetSector>
 8002a78:	4605      	mov	r5, r0
   if(firstSectorNumber == -1)
 8002a7a:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8002a7e:	d01c      	beq.n	8002aba <stm32f4xxFlashDriverErase+0x66>
   if(address + length == STM32F4xx_ADDR + STM32F4xx_SIZE)
 8002a80:	f1b4 6f01 	cmp.w	r4, #135266304	@ 0x8100000
 8002a84:	d008      	beq.n	8002a98 <stm32f4xxFlashDriverErase+0x44>
      error = stm32f4xxFlashDriverGetNextSector(address+length, &lastSectorAddr);
 8002a86:	a901      	add	r1, sp, #4
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f7ff fef3 	bl	8002874 <stm32f4xxFlashDriverGetNextSector>
      if(error)
 8002a8e:	b940      	cbnz	r0, 8002aa2 <stm32f4xxFlashDriverErase+0x4e>
      lastSectorNumber = stm32f4xxFlashGetSector(lastSectorAddr);
 8002a90:	9801      	ldr	r0, [sp, #4]
 8002a92:	f7ff ffb3 	bl	80029fc <stm32f4xxFlashGetSector>
 8002a96:	e000      	b.n	8002a9a <stm32f4xxFlashDriverErase+0x46>
      lastSectorNumber = STM32F4xx_SECTORS_NUMBER;
 8002a98:	200c      	movs	r0, #12
   error = stm32f4xxFlashDriverEraseSector(firstSectorNumber, lastSectorNumber-firstSectorNumber);
 8002a9a:	1b41      	subs	r1, r0, r5
 8002a9c:	4628      	mov	r0, r5
 8002a9e:	f7ff ff39 	bl	8002914 <stm32f4xxFlashDriverEraseSector>
}
 8002aa2:	b003      	add	sp, #12
 8002aa4:	bd30      	pop	{r4, r5, pc}
      return ERROR_INVALID_PARAMETER;
 8002aa6:	2002      	movs	r0, #2
 8002aa8:	4770      	bx	lr
 8002aaa:	2002      	movs	r0, #2
 8002aac:	4770      	bx	lr
 8002aae:	2002      	movs	r0, #2
 8002ab0:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8002ab2:	2002      	movs	r0, #2
}
 8002ab4:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8002ab6:	2002      	movs	r0, #2
 8002ab8:	e7f3      	b.n	8002aa2 <stm32f4xxFlashDriverErase+0x4e>
      return ERROR_INVALID_PARAMETER;
 8002aba:	2002      	movs	r0, #2
 8002abc:	e7f1      	b.n	8002aa2 <stm32f4xxFlashDriverErase+0x4e>

08002abe <stm32f4xxFlashDriverIsSectorAddr>:
{
 8002abe:	b508      	push	{r3, lr}
   sector = stm32f4xxFlashGetSector(address);
 8002ac0:	f7ff ff9c 	bl	80029fc <stm32f4xxFlashGetSector>
   if(sector >= 0)
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	db01      	blt.n	8002acc <stm32f4xxFlashDriverIsSectorAddr+0xe>
      return TRUE;
 8002ac8:	2001      	movs	r0, #1
}
 8002aca:	bd08      	pop	{r3, pc}
      return FALSE;
 8002acc:	2000      	movs	r0, #0
 8002ace:	e7fc      	b.n	8002aca <stm32f4xxFlashDriverIsSectorAddr+0xc>

08002ad0 <stm32f4xxFlashDriverWriteWord>:
   if((address + sizeof(uint32_t) >= topAddress) ||
 8002ad0:	1d03      	adds	r3, r0, #4
 8002ad2:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8002ad6:	f080 809b 	bcs.w	8002c10 <stm32f4xxFlashDriverWriteWord+0x140>
{
 8002ada:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002adc:	b087      	sub	sp, #28
 8002ade:	4604      	mov	r4, r0
 8002ae0:	460d      	mov	r5, r1
   if((address + sizeof(uint32_t) >= topAddress) ||
 8002ae2:	f010 0f03 	tst.w	r0, #3
 8002ae6:	f040 8095 	bne.w	8002c14 <stm32f4xxFlashDriverWriteWord+0x144>
   FLASH_WaitForLastOperation((uint32_t)50000U);
 8002aea:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002aee:	f7fe fd97 	bl	8001620 <FLASH_WaitForLastOperation>
   sector = stm32f4xxFlashGetSector(address);
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7ff ff82 	bl	80029fc <stm32f4xxFlashGetSector>
   if(sector >= 0)
 8002af8:	1e06      	subs	r6, r0, #0
 8002afa:	db11      	blt.n	8002b20 <stm32f4xxFlashDriverWriteWord+0x50>
         status = HAL_FLASH_Unlock();
 8002afc:	f7fe fd6e 	bl	80015dc <HAL_FLASH_Unlock>
         if (status != HAL_OK)
 8002b00:	4607      	mov	r7, r0
 8002b02:	b310      	cbz	r0, 8002b4a <stm32f4xxFlashDriverWriteWord+0x7a>
            TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 8002b04:	f7ff fae3 	bl	80020ce <osSuspendAllTasks>
 8002b08:	4b47      	ldr	r3, [pc, #284]	@ (8002c28 <stm32f4xxFlashDriverWriteWord+0x158>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2227      	movs	r2, #39	@ 0x27
 8002b10:	2101      	movs	r1, #1
 8002b12:	4846      	ldr	r0, [pc, #280]	@ (8002c2c <stm32f4xxFlashDriverWriteWord+0x15c>)
 8002b14:	f001 fc7e 	bl	8004414 <fwrite>
 8002b18:	f7ff fada 	bl	80020d0 <osResumeAllTasks>
   if(status == HAL_OK)
 8002b1c:	2f00      	cmp	r7, #0
 8002b1e:	d17c      	bne.n	8002c1a <stm32f4xxFlashDriverWriteWord+0x14a>
         status = HAL_FLASH_Unlock();
 8002b20:	f7fe fd5c 	bl	80015dc <HAL_FLASH_Unlock>
         if (status != HAL_OK)
 8002b24:	4606      	mov	r6, r0
 8002b26:	2800      	cmp	r0, #0
 8002b28:	d04c      	beq.n	8002bc4 <stm32f4xxFlashDriverWriteWord+0xf4>
            TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 8002b2a:	f7ff fad0 	bl	80020ce <osSuspendAllTasks>
 8002b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c28 <stm32f4xxFlashDriverWriteWord+0x158>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2227      	movs	r2, #39	@ 0x27
 8002b36:	2101      	movs	r1, #1
 8002b38:	483c      	ldr	r0, [pc, #240]	@ (8002c2c <stm32f4xxFlashDriverWriteWord+0x15c>)
 8002b3a:	f001 fc6b 	bl	8004414 <fwrite>
 8002b3e:	f7ff fac7 	bl	80020d0 <osResumeAllTasks>
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 8002b42:	2e00      	cmp	r6, #0
 8002b44:	d16c      	bne.n	8002c20 <stm32f4xxFlashDriverWriteWord+0x150>
 8002b46:	2000      	movs	r0, #0
 8002b48:	e065      	b.n	8002c16 <stm32f4xxFlashDriverWriteWord+0x146>
         status = FLASH_WaitForLastOperation((uint32_t)50000U);
 8002b4a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b4e:	f7fe fd67 	bl	8001620 <FLASH_WaitForLastOperation>
         if(status != HAL_OK)
 8002b52:	b9e8      	cbnz	r0, 8002b90 <stm32f4xxFlashDriverWriteWord+0xc0>
         EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8002b54:	2300      	movs	r3, #0
 8002b56:	9300      	str	r3, [sp, #0]
         EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	9304      	str	r3, [sp, #16]
         EraseInitStruct.Sector = sector;
 8002b5c:	9602      	str	r6, [sp, #8]
         EraseInitStruct.NbSectors = 1;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	9303      	str	r3, [sp, #12]
         status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 8002b62:	a905      	add	r1, sp, #20
 8002b64:	4668      	mov	r0, sp
 8002b66:	f7fe fe31 	bl	80017cc <HAL_FLASHEx_Erase>
         if(status != HAL_OK)
 8002b6a:	4607      	mov	r7, r0
 8002b6c:	b9e8      	cbnz	r0, 8002baa <stm32f4xxFlashDriverWriteWord+0xda>
         if(HAL_FLASH_Lock() != HAL_OK)
 8002b6e:	f7fe fd4d 	bl	800160c <HAL_FLASH_Lock>
 8002b72:	2800      	cmp	r0, #0
 8002b74:	d0d2      	beq.n	8002b1c <stm32f4xxFlashDriverWriteWord+0x4c>
            TRACE_ERROR("Flash Control Register lock failed!\r\n");
 8002b76:	f7ff faaa 	bl	80020ce <osSuspendAllTasks>
 8002b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c28 <stm32f4xxFlashDriverWriteWord+0x158>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2225      	movs	r2, #37	@ 0x25
 8002b82:	2101      	movs	r1, #1
 8002b84:	482a      	ldr	r0, [pc, #168]	@ (8002c30 <stm32f4xxFlashDriverWriteWord+0x160>)
 8002b86:	f001 fc45 	bl	8004414 <fwrite>
 8002b8a:	f7ff faa1 	bl	80020d0 <osResumeAllTasks>
 8002b8e:	e7c5      	b.n	8002b1c <stm32f4xxFlashDriverWriteWord+0x4c>
            TRACE_ERROR("Initialize FLASH flags...\r\n");
 8002b90:	f7ff fa9d 	bl	80020ce <osSuspendAllTasks>
 8002b94:	4b24      	ldr	r3, [pc, #144]	@ (8002c28 <stm32f4xxFlashDriverWriteWord+0x158>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	221b      	movs	r2, #27
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	4825      	ldr	r0, [pc, #148]	@ (8002c34 <stm32f4xxFlashDriverWriteWord+0x164>)
 8002ba0:	f001 fc38 	bl	8004414 <fwrite>
 8002ba4:	f7ff fa94 	bl	80020d0 <osResumeAllTasks>
 8002ba8:	e7d4      	b.n	8002b54 <stm32f4xxFlashDriverWriteWord+0x84>
            TRACE_ERROR("Failed to erase flash sector %d, error = 0x%08lX!\r\n", sector, sectorError);
 8002baa:	f7ff fa90 	bl	80020ce <osSuspendAllTasks>
 8002bae:	4b1e      	ldr	r3, [pc, #120]	@ (8002c28 <stm32f4xxFlashDriverWriteWord+0x158>)
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	9b05      	ldr	r3, [sp, #20]
 8002bb4:	4632      	mov	r2, r6
 8002bb6:	4920      	ldr	r1, [pc, #128]	@ (8002c38 <stm32f4xxFlashDriverWriteWord+0x168>)
 8002bb8:	68c0      	ldr	r0, [r0, #12]
 8002bba:	f001 fbaf 	bl	800431c <fiprintf>
 8002bbe:	f7ff fa87 	bl	80020d0 <osResumeAllTasks>
 8002bc2:	e7d4      	b.n	8002b6e <stm32f4xxFlashDriverWriteWord+0x9e>
         status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, word);
 8002bc4:	462a      	mov	r2, r5
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	4621      	mov	r1, r4
 8002bca:	2002      	movs	r0, #2
 8002bcc:	f7fe fd58 	bl	8001680 <HAL_FLASH_Program>
         if(status != HAL_OK)
 8002bd0:	4606      	mov	r6, r0
 8002bd2:	b980      	cbnz	r0, 8002bf6 <stm32f4xxFlashDriverWriteWord+0x126>
         if(HAL_FLASH_Lock() != HAL_OK)
 8002bd4:	f7fe fd1a 	bl	800160c <HAL_FLASH_Lock>
 8002bd8:	2800      	cmp	r0, #0
 8002bda:	d0b2      	beq.n	8002b42 <stm32f4xxFlashDriverWriteWord+0x72>
            TRACE_ERROR("Flash Control Register lock failed!\r\n");
 8002bdc:	f7ff fa77 	bl	80020ce <osSuspendAllTasks>
 8002be0:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <stm32f4xxFlashDriverWriteWord+0x158>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	2225      	movs	r2, #37	@ 0x25
 8002be8:	2101      	movs	r1, #1
 8002bea:	4811      	ldr	r0, [pc, #68]	@ (8002c30 <stm32f4xxFlashDriverWriteWord+0x160>)
 8002bec:	f001 fc12 	bl	8004414 <fwrite>
 8002bf0:	f7ff fa6e 	bl	80020d0 <osResumeAllTasks>
 8002bf4:	e7a5      	b.n	8002b42 <stm32f4xxFlashDriverWriteWord+0x72>
            TRACE_ERROR("Failed to write word \"0x%08lX\" at 0x%08lX!\r\n", word, address);
 8002bf6:	f7ff fa6a 	bl	80020ce <osSuspendAllTasks>
 8002bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002c28 <stm32f4xxFlashDriverWriteWord+0x158>)
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	4623      	mov	r3, r4
 8002c00:	462a      	mov	r2, r5
 8002c02:	490e      	ldr	r1, [pc, #56]	@ (8002c3c <stm32f4xxFlashDriverWriteWord+0x16c>)
 8002c04:	68c0      	ldr	r0, [r0, #12]
 8002c06:	f001 fb89 	bl	800431c <fiprintf>
 8002c0a:	f7ff fa61 	bl	80020d0 <osResumeAllTasks>
 8002c0e:	e7e1      	b.n	8002bd4 <stm32f4xxFlashDriverWriteWord+0x104>
      return ERROR_INVALID_PARAMETER;
 8002c10:	2002      	movs	r0, #2
}
 8002c12:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8002c14:	2002      	movs	r0, #2
}
 8002c16:	b007      	add	sp, #28
 8002c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 8002c1a:	f240 200a 	movw	r0, #522	@ 0x20a
 8002c1e:	e7fa      	b.n	8002c16 <stm32f4xxFlashDriverWriteWord+0x146>
 8002c20:	f240 200a 	movw	r0, #522	@ 0x20a
 8002c24:	e7f7      	b.n	8002c16 <stm32f4xxFlashDriverWriteWord+0x146>
 8002c26:	bf00      	nop
 8002c28:	20000038 	.word	0x20000038
 8002c2c:	0800536c 	.word	0x0800536c
 8002c30:	080053e8 	.word	0x080053e8
 8002c34:	08005394 	.word	0x08005394
 8002c38:	08005410 	.word	0x08005410
 8002c3c:	08005444 	.word	0x08005444

08002c40 <stm32f4xxFlashDriverWrite>:
{
 8002c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c44:	b082      	sub	sp, #8
   if((address < STM32F4xx_ADDR || address >= topAddress) ||
 8002c46:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 8002c4a:	d339      	bcc.n	8002cc0 <stm32f4xxFlashDriverWrite+0x80>
 8002c4c:	4605      	mov	r5, r0
 8002c4e:	460f      	mov	r7, r1
 8002c50:	4614      	mov	r4, r2
 8002c52:	f1b0 6f01 	cmp.w	r0, #135266304	@ 0x8100000
 8002c56:	d239      	bcs.n	8002ccc <stm32f4xxFlashDriverWrite+0x8c>
 8002c58:	f010 0f03 	tst.w	r0, #3
 8002c5c:	d139      	bne.n	8002cd2 <stm32f4xxFlashDriverWrite+0x92>
   if(data == NULL || address + length > topAddress)
 8002c5e:	2900      	cmp	r1, #0
 8002c60:	d03a      	beq.n	8002cd8 <stm32f4xxFlashDriverWrite+0x98>
 8002c62:	1883      	adds	r3, r0, r2
 8002c64:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8002c68:	d910      	bls.n	8002c8c <stm32f4xxFlashDriverWrite+0x4c>
      return ERROR_INVALID_PARAMETER;
 8002c6a:	f04f 0802 	mov.w	r8, #2
 8002c6e:	e029      	b.n	8002cc4 <stm32f4xxFlashDriverWrite+0x84>
      memcpy(word, p, n);
 8002c70:	4632      	mov	r2, r6
 8002c72:	4639      	mov	r1, r7
 8002c74:	a801      	add	r0, sp, #4
 8002c76:	f001 fd4e 	bl	8004716 <memcpy>
      error = stm32f4xxFlashDriverWriteWord(address, *((uint32_t*)word));
 8002c7a:	9901      	ldr	r1, [sp, #4]
 8002c7c:	4628      	mov	r0, r5
 8002c7e:	f7ff ff27 	bl	8002ad0 <stm32f4xxFlashDriverWriteWord>
      if(error)
 8002c82:	4680      	mov	r8, r0
 8002c84:	b960      	cbnz	r0, 8002ca0 <stm32f4xxFlashDriverWrite+0x60>
      p += n;
 8002c86:	4437      	add	r7, r6
      address += n;
 8002c88:	4435      	add	r5, r6
      length -= n;
 8002c8a:	1ba4      	subs	r4, r4, r6
   while(length > 0)
 8002c8c:	b1ac      	cbz	r4, 8002cba <stm32f4xxFlashDriverWrite+0x7a>
      n = MIN(sizeof(word), length);
 8002c8e:	4626      	mov	r6, r4
 8002c90:	2c04      	cmp	r4, #4
 8002c92:	bf28      	it	cs
 8002c94:	2604      	movcs	r6, #4
      if(n < sizeof(uint32_t))
 8002c96:	2c03      	cmp	r4, #3
 8002c98:	d8ea      	bhi.n	8002c70 <stm32f4xxFlashDriverWrite+0x30>
         memset(word, 0, sizeof(word));
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	e7e7      	b.n	8002c70 <stm32f4xxFlashDriverWrite+0x30>
         TRACE_ERROR("Failed to write in flash memory!\r\n");
 8002ca0:	f7ff fa15 	bl	80020ce <osSuspendAllTasks>
 8002ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce0 <stm32f4xxFlashDriverWrite+0xa0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2222      	movs	r2, #34	@ 0x22
 8002cac:	2101      	movs	r1, #1
 8002cae:	480d      	ldr	r0, [pc, #52]	@ (8002ce4 <stm32f4xxFlashDriverWrite+0xa4>)
 8002cb0:	f001 fbb0 	bl	8004414 <fwrite>
 8002cb4:	f7ff fa0c 	bl	80020d0 <osResumeAllTasks>
         return error;
 8002cb8:	e004      	b.n	8002cc4 <stm32f4xxFlashDriverWrite+0x84>
   return NO_ERROR;
 8002cba:	f04f 0800 	mov.w	r8, #0
 8002cbe:	e001      	b.n	8002cc4 <stm32f4xxFlashDriverWrite+0x84>
      return ERROR_INVALID_PARAMETER;
 8002cc0:	f04f 0802 	mov.w	r8, #2
}
 8002cc4:	4640      	mov	r0, r8
 8002cc6:	b002      	add	sp, #8
 8002cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return ERROR_INVALID_PARAMETER;
 8002ccc:	f04f 0802 	mov.w	r8, #2
 8002cd0:	e7f8      	b.n	8002cc4 <stm32f4xxFlashDriverWrite+0x84>
 8002cd2:	f04f 0802 	mov.w	r8, #2
 8002cd6:	e7f5      	b.n	8002cc4 <stm32f4xxFlashDriverWrite+0x84>
      return ERROR_INVALID_PARAMETER;
 8002cd8:	f04f 0802 	mov.w	r8, #2
 8002cdc:	e7f2      	b.n	8002cc4 <stm32f4xxFlashDriverWrite+0x84>
 8002cde:	bf00      	nop
 8002ce0:	20000038 	.word	0x20000038
 8002ce4:	08005474 	.word	0x08005474

08002ce8 <imageCheckHeader>:
#ifndef SIMULATOR
   error_t error;
   uint32_t computedCrc;

   //Check parameter vailidty
   if(header == NULL)
 8002ce8:	b308      	cbz	r0, 8002d2e <imageCheckHeader+0x46>
{
 8002cea:	b510      	push	{r4, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	4604      	mov	r4, r0
      return CBOOT_ERROR_INVALID_PARAMETERS;

   //Compute image header crc
   error = CRC32_HASH_ALGO->compute((uint8_t*)header, sizeof(ImageHeader) - CRC32_DIGEST_SIZE, (uint8_t*)&computedCrc);
 8002cf0:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <imageCheckHeader+0x54>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	aa01      	add	r2, sp, #4
 8002cf6:	213c      	movs	r1, #60	@ 0x3c
 8002cf8:	4798      	blx	r3
   if(error)
 8002cfa:	b950      	cbnz	r0, 8002d12 <imageCheckHeader+0x2a>
      TRACE_ERROR("Failed to compute image header crc!\r\n");
      return CBOOT_ERROR_FAILURE;
   }

   //Check image header integrity
   if(header->headCrc != computedCrc)
 8002cfc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002cfe:	9b01      	ldr	r3, [sp, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d116      	bne.n	8002d32 <imageCheckHeader+0x4a>
      return CBOOT_ERROR_INVALID_IMAGE_HEADER;

   //Check image header version
   if(header->headVers != IMAGE_HEADER_VERSION)
 8002d04:	6822      	ldr	r2, [r4, #0]
 8002d06:	4b0e      	ldr	r3, [pc, #56]	@ (8002d40 <imageCheckHeader+0x58>)
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d114      	bne.n	8002d36 <imageCheckHeader+0x4e>
      return CBOOT_ERROR_INVALID_IMAGE_HEADER_VERSION;

   //Successful process
   return CBOOT_NO_ERROR;
 8002d0c:	2000      	movs	r0, #0
#else
   return CBOOT_NO_ERROR;
#endif
}
 8002d0e:	b002      	add	sp, #8
 8002d10:	bd10      	pop	{r4, pc}
      TRACE_ERROR("Failed to compute image header crc!\r\n");
 8002d12:	f7ff f9dc 	bl	80020ce <osSuspendAllTasks>
 8002d16:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <imageCheckHeader+0x5c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2225      	movs	r2, #37	@ 0x25
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4809      	ldr	r0, [pc, #36]	@ (8002d48 <imageCheckHeader+0x60>)
 8002d22:	f001 fb77 	bl	8004414 <fwrite>
 8002d26:	f7ff f9d3 	bl	80020d0 <osResumeAllTasks>
      return CBOOT_ERROR_FAILURE;
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	e7ef      	b.n	8002d0e <imageCheckHeader+0x26>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8002d2e:	2004      	movs	r0, #4
}
 8002d30:	4770      	bx	lr
      return CBOOT_ERROR_INVALID_IMAGE_HEADER;
 8002d32:	2007      	movs	r0, #7
 8002d34:	e7eb      	b.n	8002d0e <imageCheckHeader+0x26>
      return CBOOT_ERROR_INVALID_IMAGE_HEADER_VERSION;
 8002d36:	2008      	movs	r0, #8
 8002d38:	e7e9      	b.n	8002d0e <imageCheckHeader+0x26>
 8002d3a:	bf00      	nop
 8002d3c:	080054fc 	.word	0x080054fc
 8002d40:	00010100 	.word	0x00010100
 8002d44:	20000038 	.word	0x20000038
 8002d48:	08005498 	.word	0x08005498

08002d4c <imageGetHeader>:
{
   cboot_error_t cerror;
   ImageHeader *tempHeader;

   //Check parameters validity
   if(buffer == NULL || bufferLen == 0 || header == NULL)
 8002d4c:	b158      	cbz	r0, 8002d66 <imageGetHeader+0x1a>
{
 8002d4e:	b538      	push	{r3, r4, r5, lr}
 8002d50:	4614      	mov	r4, r2
 8002d52:	4605      	mov	r5, r0
   if(buffer == NULL || bufferLen == 0 || header == NULL)
 8002d54:	b149      	cbz	r1, 8002d6a <imageGetHeader+0x1e>
 8002d56:	b152      	cbz	r2, 8002d6e <imageGetHeader+0x22>
      return CBOOT_ERROR_INVALID_PARAMETERS;

   if(bufferLen < sizeof(ImageHeader))
 8002d58:	293f      	cmp	r1, #63	@ 0x3f
 8002d5a:	d90a      	bls.n	8002d72 <imageGetHeader+0x26>

   //Point to the image header
   tempHeader = (ImageHeader *)buffer;

   //Check image header
   cerror = imageCheckHeader(tempHeader);
 8002d5c:	f7ff ffc4 	bl	8002ce8 <imageCheckHeader>
   //Is any error?
   if(cerror)
 8002d60:	b900      	cbnz	r0, 8002d64 <imageGetHeader+0x18>
      return cerror;

   //Save image header
   *header = tempHeader;
 8002d62:	6025      	str	r5, [r4, #0]

   //Successful process
   return CBOOT_NO_ERROR;
}
 8002d64:	bd38      	pop	{r3, r4, r5, pc}
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8002d66:	2004      	movs	r0, #4
}
 8002d68:	4770      	bx	lr
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8002d6a:	2004      	movs	r0, #4
 8002d6c:	e7fa      	b.n	8002d64 <imageGetHeader+0x18>
 8002d6e:	2004      	movs	r0, #4
 8002d70:	e7f8      	b.n	8002d64 <imageGetHeader+0x18>
      return CBOOT_ERROR_INVALID_LENGTH;
 8002d72:	2018      	movs	r0, #24
 8002d74:	e7f6      	b.n	8002d64 <imageGetHeader+0x18>

08002d76 <prv_out_fn_print>:
 * \param[in]       ptr: LwPRINTF internal instance
 * \param[in]       chr: Character to print
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_fn_print(lwprintf_int_t* lwi, const char chr) {
 8002d76:	b538      	push	{r3, r4, r5, lr}
    if (lwi->is_print_cancelled) {
 8002d78:	7e03      	ldrb	r3, [r0, #24]
 8002d7a:	b983      	cbnz	r3, 8002d9e <prv_out_fn_print+0x28>
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	460d      	mov	r5, r1
        return 0;
    }

    /* Send character to output */
    if (!lwi->lwobj->out_fn(chr, lwi->lwobj)) {
 8002d80:	6801      	ldr	r1, [r0, #0]
 8002d82:	680b      	ldr	r3, [r1, #0]
 8002d84:	4628      	mov	r0, r5
 8002d86:	4798      	blx	r3
 8002d88:	b908      	cbnz	r0, 8002d8e <prv_out_fn_print+0x18>
        lwi->is_print_cancelled = 1;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	7623      	strb	r3, [r4, #24]
    }
    if (chr != '\0' && !lwi->is_print_cancelled) {
 8002d8e:	b145      	cbz	r5, 8002da2 <prv_out_fn_print+0x2c>
 8002d90:	7e23      	ldrb	r3, [r4, #24]
 8002d92:	b943      	cbnz	r3, 8002da6 <prv_out_fn_print+0x30>
        ++lwi->n_len;
 8002d94:	6923      	ldr	r3, [r4, #16]
 8002d96:	3301      	adds	r3, #1
 8002d98:	6123      	str	r3, [r4, #16]
    }
    return 1;
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	e000      	b.n	8002da0 <prv_out_fn_print+0x2a>
        return 0;
 8002d9e:	2000      	movs	r0, #0
}
 8002da0:	bd38      	pop	{r3, r4, r5, pc}
    return 1;
 8002da2:	2001      	movs	r0, #1
 8002da4:	e7fc      	b.n	8002da0 <prv_out_fn_print+0x2a>
 8002da6:	2001      	movs	r0, #1
 8002da8:	e7fa      	b.n	8002da0 <prv_out_fn_print+0x2a>

08002daa <prv_parse_num>:
 * \brief           Parse number from input string
 * \param[in,out]   format: Input text to process
 * \return          Parsed number
 */
static int
prv_parse_num(const char** format) {
 8002daa:	4684      	mov	ip, r0
    int num = 0;
 8002dac:	2000      	movs	r0, #0

    for (; CHARISNUM(**format); ++(*format)) {
 8002dae:	e007      	b.n	8002dc0 <prv_parse_num+0x16>
        num = (int)10 * num + CHARTONUM(**format);
 8002db0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002db4:	3b30      	subs	r3, #48	@ 0x30
 8002db6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    for (; CHARISNUM(**format); ++(*format)) {
 8002dba:	3201      	adds	r2, #1
 8002dbc:	f8cc 2000 	str.w	r2, [ip]
 8002dc0:	f8dc 2000 	ldr.w	r2, [ip]
 8002dc4:	7813      	ldrb	r3, [r2, #0]
 8002dc6:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8002dca:	b2c9      	uxtb	r1, r1
 8002dcc:	2909      	cmp	r1, #9
 8002dce:	d9ef      	bls.n	8002db0 <prv_parse_num+0x6>
    }
    return num;
}
 8002dd0:	4770      	bx	lr
	...

08002dd4 <prv_out_str_before>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_before(lwprintf_int_t* lwi, size_t buff_size) {
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	460e      	mov	r6, r1
    /* Check for width */
    if (lwi->m.width > 0
 8002dda:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8002ddc:	2a00      	cmp	r2, #0
 8002dde:	dd08      	ble.n	8002df2 <prv_out_str_before+0x1e>
        /* If number is negative, add negative sign or if positive and has plus sign forced */
        && (lwi->m.flags.is_negative || lwi->m.flags.plus)) {
 8002de0:	8b83      	ldrh	r3, [r0, #28]
 8002de2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002de6:	f023 037d 	bic.w	r3, r3, #125	@ 0x7d
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	b10b      	cbz	r3, 8002df2 <prv_out_str_before+0x1e>
        --lwi->m.width;
 8002dee:	3a01      	subs	r2, #1
 8002df0:	6242      	str	r2, [r0, #36]	@ 0x24
    }

    /* Check for alternate mode */
    if (lwi->m.flags.alt && !lwi->m.flags.is_num_zero) {
 8002df2:	69e2      	ldr	r2, [r4, #28]
 8002df4:	4b50      	ldr	r3, [pc, #320]	@ (8002f38 <prv_out_str_before+0x164>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d00f      	beq.n	8002e1c <prv_out_str_before+0x48>
            }
        }
    }

    /* Add negative sign (or positive in case of + flag or space in case of space flag) before when zeros are used to fill width */
    if (lwi->m.flags.zero) {
 8002dfc:	7f23      	ldrb	r3, [r4, #28]
 8002dfe:	f013 0f08 	tst.w	r3, #8
 8002e02:	d026      	beq.n	8002e52 <prv_out_str_before+0x7e>
        if (lwi->m.flags.is_negative) {
 8002e04:	f994 201d 	ldrsb.w	r2, [r4, #29]
 8002e08:	2a00      	cmp	r2, #0
 8002e0a:	db1e      	blt.n	8002e4a <prv_out_str_before+0x76>
            lwi->out_fn(lwi, '-');
        } else if (lwi->m.flags.plus) {
 8002e0c:	f013 0f02 	tst.w	r3, #2
 8002e10:	d02d      	beq.n	8002e6e <prv_out_str_before+0x9a>
            lwi->out_fn(lwi, '+');
 8002e12:	6963      	ldr	r3, [r4, #20]
 8002e14:	212b      	movs	r1, #43	@ 0x2b
 8002e16:	4620      	mov	r0, r4
 8002e18:	4798      	blx	r3
 8002e1a:	e01a      	b.n	8002e52 <prv_out_str_before+0x7e>
        if (lwi->m.base == 8) {
 8002e1c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d009      	beq.n	8002e38 <prv_out_str_before+0x64>
        } else if (lwi->m.base == 16 || lwi->m.base == 2) {
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d001      	beq.n	8002e2c <prv_out_str_before+0x58>
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d1e7      	bne.n	8002dfc <prv_out_str_before+0x28>
            if (lwi->m.width >= 2) {
 8002e2c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	dd08      	ble.n	8002e44 <prv_out_str_before+0x70>
                lwi->m.width -= 2;
 8002e32:	3b02      	subs	r3, #2
 8002e34:	6263      	str	r3, [r4, #36]	@ 0x24
 8002e36:	e7e1      	b.n	8002dfc <prv_out_str_before+0x28>
            if (lwi->m.width > 0) {
 8002e38:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	ddde      	ble.n	8002dfc <prv_out_str_before+0x28>
                --lwi->m.width;
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	6263      	str	r3, [r4, #36]	@ 0x24
 8002e42:	e7db      	b.n	8002dfc <prv_out_str_before+0x28>
                lwi->m.width = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	6263      	str	r3, [r4, #36]	@ 0x24
 8002e48:	e7d8      	b.n	8002dfc <prv_out_str_before+0x28>
            lwi->out_fn(lwi, '-');
 8002e4a:	6963      	ldr	r3, [r4, #20]
 8002e4c:	212d      	movs	r1, #45	@ 0x2d
 8002e4e:	4620      	mov	r0, r4
 8002e50:	4798      	blx	r3
            lwi->out_fn(lwi, ' ');
        }
    }

    /* Check for flags output */
    if (lwi->m.flags.alt && !lwi->m.flags.is_num_zero) {
 8002e52:	69e2      	ldr	r2, [r4, #28]
 8002e54:	4b38      	ldr	r3, [pc, #224]	@ (8002f38 <prv_out_str_before+0x164>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d010      	beq.n	8002e7e <prv_out_str_before+0xaa>
            lwi->out_fn(lwi, lwi->m.flags.uc ? 'B' : 'b');
        }
    }

    /* Right alignment, spaces or zeros */
    if (!lwi->m.flags.left_align && lwi->m.width > 0) {
 8002e5c:	7f23      	ldrb	r3, [r4, #28]
 8002e5e:	f013 0f01 	tst.w	r3, #1
 8002e62:	d148      	bne.n	8002ef6 <prv_out_str_before+0x122>
 8002e64:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	dd45      	ble.n	8002ef6 <prv_out_str_before+0x122>
        for (size_t idx = buff_size; !lwi->m.flags.left_align && idx < (size_t)lwi->m.width; ++idx) {
 8002e6a:	4635      	mov	r5, r6
 8002e6c:	e036      	b.n	8002edc <prv_out_str_before+0x108>
        } else if (lwi->m.flags.space) {
 8002e6e:	f013 0f04 	tst.w	r3, #4
 8002e72:	d0ee      	beq.n	8002e52 <prv_out_str_before+0x7e>
            lwi->out_fn(lwi, ' ');
 8002e74:	6963      	ldr	r3, [r4, #20]
 8002e76:	2120      	movs	r1, #32
 8002e78:	4620      	mov	r0, r4
 8002e7a:	4798      	blx	r3
 8002e7c:	e7e9      	b.n	8002e52 <prv_out_str_before+0x7e>
        if (lwi->m.base == 8) {
 8002e7e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d010      	beq.n	8002ea8 <prv_out_str_before+0xd4>
        } else if (lwi->m.base == 16) {
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d013      	beq.n	8002eb2 <prv_out_str_before+0xde>
        } else if (lwi->m.base == 2) {
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d1e6      	bne.n	8002e5c <prv_out_str_before+0x88>
            lwi->out_fn(lwi, '0');
 8002e8e:	6963      	ldr	r3, [r4, #20]
 8002e90:	2130      	movs	r1, #48	@ 0x30
 8002e92:	4620      	mov	r0, r4
 8002e94:	4798      	blx	r3
            lwi->out_fn(lwi, lwi->m.flags.uc ? 'B' : 'b');
 8002e96:	6963      	ldr	r3, [r4, #20]
 8002e98:	7f62      	ldrb	r2, [r4, #29]
 8002e9a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002e9e:	d017      	beq.n	8002ed0 <prv_out_str_before+0xfc>
 8002ea0:	2142      	movs	r1, #66	@ 0x42
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	4798      	blx	r3
 8002ea6:	e7d9      	b.n	8002e5c <prv_out_str_before+0x88>
            lwi->out_fn(lwi, '0');
 8002ea8:	6963      	ldr	r3, [r4, #20]
 8002eaa:	2130      	movs	r1, #48	@ 0x30
 8002eac:	4620      	mov	r0, r4
 8002eae:	4798      	blx	r3
 8002eb0:	e7d4      	b.n	8002e5c <prv_out_str_before+0x88>
            lwi->out_fn(lwi, '0');
 8002eb2:	6963      	ldr	r3, [r4, #20]
 8002eb4:	2130      	movs	r1, #48	@ 0x30
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	4798      	blx	r3
            lwi->out_fn(lwi, lwi->m.flags.uc ? 'X' : 'x');
 8002eba:	6963      	ldr	r3, [r4, #20]
 8002ebc:	7f62      	ldrb	r2, [r4, #29]
 8002ebe:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002ec2:	d003      	beq.n	8002ecc <prv_out_str_before+0xf8>
 8002ec4:	2158      	movs	r1, #88	@ 0x58
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	4798      	blx	r3
 8002eca:	e7c7      	b.n	8002e5c <prv_out_str_before+0x88>
 8002ecc:	2178      	movs	r1, #120	@ 0x78
 8002ece:	e7fa      	b.n	8002ec6 <prv_out_str_before+0xf2>
            lwi->out_fn(lwi, lwi->m.flags.uc ? 'B' : 'b');
 8002ed0:	2162      	movs	r1, #98	@ 0x62
 8002ed2:	e7e6      	b.n	8002ea2 <prv_out_str_before+0xce>
            lwi->out_fn(lwi, lwi->m.flags.zero ? '0' : ' ');
 8002ed4:	2120      	movs	r1, #32
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	4790      	blx	r2
        for (size_t idx = buff_size; !lwi->m.flags.left_align && idx < (size_t)lwi->m.width; ++idx) {
 8002eda:	3501      	adds	r5, #1
 8002edc:	7f23      	ldrb	r3, [r4, #28]
 8002ede:	f013 0f01 	tst.w	r3, #1
 8002ee2:	d108      	bne.n	8002ef6 <prv_out_str_before+0x122>
 8002ee4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002ee6:	42aa      	cmp	r2, r5
 8002ee8:	d905      	bls.n	8002ef6 <prv_out_str_before+0x122>
            lwi->out_fn(lwi, lwi->m.flags.zero ? '0' : ' ');
 8002eea:	6962      	ldr	r2, [r4, #20]
 8002eec:	f013 0f08 	tst.w	r3, #8
 8002ef0:	d0f0      	beq.n	8002ed4 <prv_out_str_before+0x100>
 8002ef2:	2130      	movs	r1, #48	@ 0x30
 8002ef4:	e7ef      	b.n	8002ed6 <prv_out_str_before+0x102>
        }
    }

    /* Add negative sign here when spaces are used for width */
    if (!lwi->m.flags.zero) {
 8002ef6:	7f23      	ldrb	r3, [r4, #28]
 8002ef8:	f013 0f08 	tst.w	r3, #8
 8002efc:	d10f      	bne.n	8002f1e <prv_out_str_before+0x14a>
        if (lwi->m.flags.is_negative) {
 8002efe:	f994 201d 	ldrsb.w	r2, [r4, #29]
 8002f02:	2a00      	cmp	r2, #0
 8002f04:	db07      	blt.n	8002f16 <prv_out_str_before+0x142>
            lwi->out_fn(lwi, '-');
        } else if (lwi->m.flags.plus) {
 8002f06:	f013 0f02 	tst.w	r3, #2
 8002f0a:	d00a      	beq.n	8002f22 <prv_out_str_before+0x14e>
            lwi->out_fn(lwi, '+');
 8002f0c:	6963      	ldr	r3, [r4, #20]
 8002f0e:	212b      	movs	r1, #43	@ 0x2b
 8002f10:	4620      	mov	r0, r4
 8002f12:	4798      	blx	r3
 8002f14:	e003      	b.n	8002f1e <prv_out_str_before+0x14a>
            lwi->out_fn(lwi, '-');
 8002f16:	6963      	ldr	r3, [r4, #20]
 8002f18:	212d      	movs	r1, #45	@ 0x2d
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	4798      	blx	r3
            lwi->out_fn(lwi, ' ');
        }
    }

    return 1;
}
 8002f1e:	2001      	movs	r0, #1
 8002f20:	bd70      	pop	{r4, r5, r6, pc}
        } else if (lwi->m.flags.space && buff_size >= (size_t)lwi->m.width) {
 8002f22:	f013 0f04 	tst.w	r3, #4
 8002f26:	d0fa      	beq.n	8002f1e <prv_out_str_before+0x14a>
 8002f28:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f2a:	42b3      	cmp	r3, r6
 8002f2c:	d8f7      	bhi.n	8002f1e <prv_out_str_before+0x14a>
            lwi->out_fn(lwi, ' ');
 8002f2e:	6963      	ldr	r3, [r4, #20]
 8002f30:	2120      	movs	r1, #32
 8002f32:	4620      	mov	r0, r4
 8002f34:	4798      	blx	r3
 8002f36:	e7f2      	b.n	8002f1e <prv_out_str_before+0x14a>
 8002f38:	00010020 	.word	0x00010020

08002f3c <prv_out_str_after>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_after(lwprintf_int_t* lwi, size_t buff_size) {
 8002f3c:	b538      	push	{r3, r4, r5, lr}
 8002f3e:	4604      	mov	r4, r0
 8002f40:	460d      	mov	r5, r1
    /* Left alignment, but only with spaces */
    if (lwi->m.flags.left_align) {
 8002f42:	7f03      	ldrb	r3, [r0, #28]
 8002f44:	f013 0f01 	tst.w	r3, #1
 8002f48:	d106      	bne.n	8002f58 <prv_out_str_after+0x1c>
        for (size_t idx = buff_size; idx < (size_t)lwi->m.width; ++idx) {
            lwi->out_fn(lwi, ' ');
        }
    }
    return 1;
}
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	bd38      	pop	{r3, r4, r5, pc}
            lwi->out_fn(lwi, ' ');
 8002f4e:	6963      	ldr	r3, [r4, #20]
 8002f50:	2120      	movs	r1, #32
 8002f52:	4620      	mov	r0, r4
 8002f54:	4798      	blx	r3
        for (size_t idx = buff_size; idx < (size_t)lwi->m.width; ++idx) {
 8002f56:	3501      	adds	r5, #1
 8002f58:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f5a:	42ab      	cmp	r3, r5
 8002f5c:	d8f7      	bhi.n	8002f4e <prv_out_str_after+0x12>
 8002f5e:	e7f4      	b.n	8002f4a <prv_out_str_after+0xe>

08002f60 <prv_out_str_raw>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_raw(lwprintf_int_t* lwi, const char* buff, size_t buff_size) {
 8002f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f62:	4605      	mov	r5, r0
 8002f64:	460f      	mov	r7, r1
 8002f66:	4616      	mov	r6, r2
    for (size_t idx = 0; idx < buff_size; ++idx) {
 8002f68:	2400      	movs	r4, #0
 8002f6a:	e004      	b.n	8002f76 <prv_out_str_raw+0x16>
        lwi->out_fn(lwi, buff[idx]);
 8002f6c:	696b      	ldr	r3, [r5, #20]
 8002f6e:	5d39      	ldrb	r1, [r7, r4]
 8002f70:	4628      	mov	r0, r5
 8002f72:	4798      	blx	r3
    for (size_t idx = 0; idx < buff_size; ++idx) {
 8002f74:	3401      	adds	r4, #1
 8002f76:	42b4      	cmp	r4, r6
 8002f78:	d3f8      	bcc.n	8002f6c <prv_out_str_raw+0xc>
    }
    return 1;
}
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f7e <prv_out_str>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str(lwprintf_int_t* lwi, const char* buff, size_t buff_size) {
 8002f7e:	b570      	push	{r4, r5, r6, lr}
 8002f80:	4605      	mov	r5, r0
 8002f82:	460e      	mov	r6, r1
 8002f84:	4614      	mov	r4, r2
    prv_out_str_before(lwi, buff_size);    /* Implement pre-format */
 8002f86:	4611      	mov	r1, r2
 8002f88:	f7ff ff24 	bl	8002dd4 <prv_out_str_before>
    prv_out_str_raw(lwi, buff, buff_size); /* Print actual string */
 8002f8c:	4622      	mov	r2, r4
 8002f8e:	4631      	mov	r1, r6
 8002f90:	4628      	mov	r0, r5
 8002f92:	f7ff ffe5 	bl	8002f60 <prv_out_str_raw>
    prv_out_str_after(lwi, buff_size);     /* Implement post-format */
 8002f96:	4621      	mov	r1, r4
 8002f98:	4628      	mov	r0, r5
 8002f9a:	f7ff ffcf 	bl	8002f3c <prv_out_str_after>

    return 1;
}
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	bd70      	pop	{r4, r5, r6, pc}

08002fa2 <prv_longest_unsigned_int_to_str>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_longest_unsigned_int_to_str(lwprintf_int_t* lwi, uint_maxtype_t num) {
 8002fa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa6:	b08d      	sub	sp, #52	@ 0x34
 8002fa8:	4681      	mov	r9, r0
 8002faa:	4615      	mov	r5, r2
 8002fac:	461c      	mov	r4, r3
    /* Start with digits length, support binary with int, that is 32-bits maximum width */
    char num_buf[33], *num_buf_ptr = &num_buf[sizeof(num_buf)];
    char adder_ch = (lwi->m.flags.uc ? 'A' : 'a') - 10;
 8002fae:	7f43      	ldrb	r3, [r0, #29]
 8002fb0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002fb4:	d011      	beq.n	8002fda <prv_longest_unsigned_int_to_str+0x38>
 8002fb6:	2337      	movs	r3, #55	@ 0x37
 8002fb8:	9301      	str	r3, [sp, #4]
    size_t len = 0;

    /* Check if number is zero */
    lwi->m.flags.is_num_zero = num == 0;
 8002fba:	ea55 0304 	orrs.w	r3, r5, r4
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2201      	moveq	r2, #1
 8002fc2:	2200      	movne	r2, #0
 8002fc4:	f899 301e 	ldrb.w	r3, [r9, #30]
 8002fc8:	f362 0300 	bfi	r3, r2, #0, #1
 8002fcc:	f889 301e 	strb.w	r3, [r9, #30]

    /* Fill the buffer backward */
    *--num_buf_ptr = '\0';
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8002fd6:	ae0b      	add	r6, sp, #44	@ 0x2c
 8002fd8:	e00b      	b.n	8002ff2 <prv_longest_unsigned_int_to_str+0x50>
    char adder_ch = (lwi->m.flags.uc ? 'A' : 'a') - 10;
 8002fda:	2357      	movs	r3, #87	@ 0x57
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	e7ec      	b.n	8002fba <prv_longest_unsigned_int_to_str+0x18>
    do {
        int digit = num % lwi->m.base;
        num /= lwi->m.base;
        *--num_buf_ptr = (char)digit + (char)(digit >= 10 ? adder_ch : '0');
 8002fe0:	9a01      	ldr	r2, [sp, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f806 3d01 	strb.w	r3, [r6, #-1]!
    } while (num > 0);
 8002fe8:	45c3      	cmp	fp, r8
 8002fea:	9b00      	ldr	r3, [sp, #0]
 8002fec:	f173 0300 	sbcs.w	r3, r3, #0
 8002ff0:	d319      	bcc.n	8003026 <prv_longest_unsigned_int_to_str+0x84>
        int digit = num % lwi->m.base;
 8002ff2:	f899 8028 	ldrb.w	r8, [r9, #40]	@ 0x28
 8002ff6:	f04f 0a00 	mov.w	sl, #0
 8002ffa:	4642      	mov	r2, r8
 8002ffc:	4653      	mov	r3, sl
 8002ffe:	4628      	mov	r0, r5
 8003000:	4621      	mov	r1, r4
 8003002:	f7fd fd8b 	bl	8000b1c <__aeabi_uldivmod>
 8003006:	4617      	mov	r7, r2
        num /= lwi->m.base;
 8003008:	46ab      	mov	fp, r5
 800300a:	9400      	str	r4, [sp, #0]
 800300c:	4642      	mov	r2, r8
 800300e:	4653      	mov	r3, sl
 8003010:	4628      	mov	r0, r5
 8003012:	4621      	mov	r1, r4
 8003014:	f7fd fd82 	bl	8000b1c <__aeabi_uldivmod>
 8003018:	4605      	mov	r5, r0
 800301a:	460c      	mov	r4, r1
        *--num_buf_ptr = (char)digit + (char)(digit >= 10 ? adder_ch : '0');
 800301c:	b2fb      	uxtb	r3, r7
 800301e:	2f09      	cmp	r7, #9
 8003020:	dcde      	bgt.n	8002fe0 <prv_longest_unsigned_int_to_str+0x3e>
 8003022:	2230      	movs	r2, #48	@ 0x30
 8003024:	e7dd      	b.n	8002fe2 <prv_longest_unsigned_int_to_str+0x40>

    /* Calculate and generate the output */
    len = sizeof(num_buf) - (size_t)((uintptr_t)num_buf_ptr - (uintptr_t)num_buf) - 1;
 8003026:	ac03      	add	r4, sp, #12
 8003028:	1ba4      	subs	r4, r4, r6
 800302a:	3420      	adds	r4, #32
    prv_out_str_before(lwi, len);
 800302c:	4621      	mov	r1, r4
 800302e:	4648      	mov	r0, r9
 8003030:	f7ff fed0 	bl	8002dd4 <prv_out_str_before>
    for (; *num_buf_ptr;) {
 8003034:	e004      	b.n	8003040 <prv_longest_unsigned_int_to_str+0x9e>
        lwi->out_fn(lwi, *num_buf_ptr++);
 8003036:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800303a:	3601      	adds	r6, #1
 800303c:	4648      	mov	r0, r9
 800303e:	4798      	blx	r3
    for (; *num_buf_ptr;) {
 8003040:	7831      	ldrb	r1, [r6, #0]
 8003042:	2900      	cmp	r1, #0
 8003044:	d1f7      	bne.n	8003036 <prv_longest_unsigned_int_to_str+0x94>
    }
    prv_out_str_after(lwi, len);
 8003046:	4621      	mov	r1, r4
 8003048:	4648      	mov	r0, r9
 800304a:	f7ff ff77 	bl	8002f3c <prv_out_str_after>
    return 1;
}
 800304e:	2001      	movs	r0, #1
 8003050:	b00d      	add	sp, #52	@ 0x34
 8003052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003056 <prv_longest_signed_int_to_str>:
 * \param[in,out]   lwi: LwPRINTF instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_longest_signed_int_to_str(lwprintf_int_t* lwi, int_maxtype_t num) {
 8003056:	b508      	push	{r3, lr}
    SIGNED_CHECK_NEGATIVE(lwi, num);
 8003058:	2b00      	cmp	r3, #0
 800305a:	db02      	blt.n	8003062 <prv_longest_signed_int_to_str+0xc>
    return prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)num);
 800305c:	f7ff ffa1 	bl	8002fa2 <prv_longest_unsigned_int_to_str>
}
 8003060:	bd08      	pop	{r3, pc}
    SIGNED_CHECK_NEGATIVE(lwi, num);
 8003062:	7f41      	ldrb	r1, [r0, #29]
 8003064:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8003068:	7741      	strb	r1, [r0, #29]
 800306a:	4252      	negs	r2, r2
 800306c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003070:	e7f4      	b.n	800305c <prv_longest_signed_int_to_str+0x6>
 8003072:	0000      	movs	r0, r0
 8003074:	0000      	movs	r0, r0
	...

08003078 <prv_calculate_dbl_num_data>:
 * \param[in]       n: Float number instance
 * \param[in]       num: Input number
 * \param[in]       type: Format type
 */
static void
prv_calculate_dbl_num_data(lwprintf_int_t* lwi, float_num_t* n, double num, const char type) {
 8003078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800307c:	ed2d 8b02 	vpush	{d8}
 8003080:	b083      	sub	sp, #12
 8003082:	4605      	mov	r5, r0
 8003084:	460c      	mov	r4, r1
 8003086:	ec57 6b10 	vmov	r6, r7, d0
 800308a:	9201      	str	r2, [sp, #4]
    memset(n, 0x00, sizeof(*n));
 800308c:	2228      	movs	r2, #40	@ 0x28
 800308e:	2100      	movs	r1, #0
 8003090:	4620      	mov	r0, r4
 8003092:	f001 fab5 	bl	8004600 <memset>

    if (lwi->m.precision >= (int)LWPRINTF_ARRAYSIZE(powers_of_10)) {
 8003096:	6a2b      	ldr	r3, [r5, #32]
 8003098:	2b12      	cmp	r3, #18
 800309a:	dd01      	ble.n	80030a0 <prv_calculate_dbl_num_data+0x28>
        lwi->m.precision = (int)LWPRINTF_ARRAYSIZE(powers_of_10) - 1;
 800309c:	2312      	movs	r3, #18
 800309e:	622b      	str	r3, [r5, #32]
     * decimal_part_dbl = 3456.78   -> Decimal part multiplied by 10^precision, keeping it in double format
     * decimal_part = 3456          -> Integer part of decimal number
     * diff = 0.78                  -> Difference between actual decimal and integer part of decimal
     *                                  This is used for rounding of last digit (if necessary)
     */
    num += 0.000000000000005;
 80030a0:	a3ac      	add	r3, pc, #688	@ (adr r3, 8003354 <prv_calculate_dbl_num_data+0x2dc>)
 80030a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a6:	4630      	mov	r0, r6
 80030a8:	4639      	mov	r1, r7
 80030aa:	f7fd f8e7 	bl	800027c <__adddf3>
 80030ae:	4680      	mov	r8, r0
 80030b0:	4689      	mov	r9, r1
    n->integer_part = (float_long_t)num;
 80030b2:	f7fd fd4b 	bl	8000b4c <__aeabi_d2lz>
 80030b6:	4606      	mov	r6, r0
 80030b8:	460f      	mov	r7, r1
 80030ba:	6020      	str	r0, [r4, #0]
 80030bc:	6061      	str	r1, [r4, #4]
    n->decimal_part_dbl = (num - (double)n->integer_part) * (double)powers_of_10[lwi->m.precision];
 80030be:	f7fd fa65 	bl	800058c <__aeabi_l2d>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4640      	mov	r0, r8
 80030c8:	4649      	mov	r1, r9
 80030ca:	f7fd f8d5 	bl	8000278 <__aeabi_dsub>
 80030ce:	4680      	mov	r8, r0
 80030d0:	4689      	mov	r9, r1
 80030d2:	6a2a      	ldr	r2, [r5, #32]
 80030d4:	4b9c      	ldr	r3, [pc, #624]	@ (8003348 <prv_calculate_dbl_num_data+0x2d0>)
 80030d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030de:	f7fd fa55 	bl	800058c <__aeabi_l2d>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4640      	mov	r0, r8
 80030e8:	4649      	mov	r1, r9
 80030ea:	f7fd fa7d 	bl	80005e8 <__aeabi_dmul>
 80030ee:	4682      	mov	sl, r0
 80030f0:	468b      	mov	fp, r1
 80030f2:	e9c4 ab02 	strd	sl, fp, [r4, #8]
    n->decimal_part = (float_long_t)n->decimal_part_dbl;
 80030f6:	f7fd fd29 	bl	8000b4c <__aeabi_d2lz>
 80030fa:	4680      	mov	r8, r0
 80030fc:	4689      	mov	r9, r1
 80030fe:	6120      	str	r0, [r4, #16]
 8003100:	6161      	str	r1, [r4, #20]
    n->diff = n->decimal_part_dbl - (double)((float_long_t)n->decimal_part);
 8003102:	f7fd fa43 	bl	800058c <__aeabi_l2d>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4650      	mov	r0, sl
 800310c:	4659      	mov	r1, fp
 800310e:	f7fd f8b3 	bl	8000278 <__aeabi_dsub>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	ec43 2b18 	vmov	d8, r2, r3
 800311a:	ed84 8b06 	vstr	d8, [r4, #24]

    /* Rounding check of last digit */
    if (n->diff > 0.5) {
 800311e:	2200      	movs	r2, #0
 8003120:	4b8a      	ldr	r3, [pc, #552]	@ (800334c <prv_calculate_dbl_num_data+0x2d4>)
 8003122:	f7fd fcf1 	bl	8000b08 <__aeabi_dcmpgt>
 8003126:	b378      	cbz	r0, 8003188 <prv_calculate_dbl_num_data+0x110>
        ++n->decimal_part;
 8003128:	f118 0201 	adds.w	r2, r8, #1
 800312c:	f149 0300 	adc.w	r3, r9, #0
 8003130:	6122      	str	r2, [r4, #16]
 8003132:	6163      	str	r3, [r4, #20]
        if (n->decimal_part >= powers_of_10[lwi->m.precision]) {
 8003134:	6a28      	ldr	r0, [r5, #32]
 8003136:	4984      	ldr	r1, [pc, #528]	@ (8003348 <prv_calculate_dbl_num_data+0x2d0>)
 8003138:	eb01 0cc0 	add.w	ip, r1, r0, lsl #3
 800313c:	f851 0030 	ldr.w	r0, [r1, r0, lsl #3]
 8003140:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8003144:	4282      	cmp	r2, r0
 8003146:	eb73 0901 	sbcs.w	r9, r3, r1
 800314a:	db08      	blt.n	800315e <prv_calculate_dbl_num_data+0xe6>
            n->decimal_part = 0;
 800314c:	2200      	movs	r2, #0
 800314e:	2300      	movs	r3, #0
 8003150:	e9c4 2304 	strd	r2, r3, [r4, #16]
            ++n->integer_part;
 8003154:	3601      	adds	r6, #1
 8003156:	f147 0700 	adc.w	r7, r7, #0
 800315a:	6026      	str	r6, [r4, #0]
 800315c:	6067      	str	r7, [r4, #4]
            ++n->decimal_part;
        }
    }

    /* Calculate number of digits for integer and decimal parts */
    if (n->integer_part == 0) {
 800315e:	6821      	ldr	r1, [r4, #0]
 8003160:	6863      	ldr	r3, [r4, #4]
 8003162:	ea51 0203 	orrs.w	r2, r1, r3
 8003166:	d127      	bne.n	80031b8 <prv_calculate_dbl_num_data+0x140>
        n->digits_cnt_integer_part = 1;
 8003168:	2301      	movs	r3, #1
 800316a:	8423      	strh	r3, [r4, #32]
    } else {
        float_long_t tmp;
        for (n->digits_cnt_integer_part = 0, tmp = n->integer_part; tmp > 0; ++n->digits_cnt_integer_part, tmp /= 10) {}
    }
    n->digits_cnt_decimal_part = (short)lwi->m.precision;
 800316c:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8003170:	8463      	strh	r3, [r4, #34]	@ 0x22

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Calculate minimum useful digits for decimal (excl last useless zeros) */
    if (type == 'g') {
 8003172:	9b01      	ldr	r3, [sp, #4]
 8003174:	2b67      	cmp	r3, #103	@ 0x67
 8003176:	d058      	beq.n	800322a <prv_calculate_dbl_num_data+0x1b2>
            }
        }
    } else
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    {
        n->digits_cnt_decimal_part_useful = (short)lwi->m.precision;
 8003178:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 800317c:	84a3      	strh	r3, [r4, #36]	@ 0x24
    }
}
 800317e:	b003      	add	sp, #12
 8003180:	ecbd 8b02 	vpop	{d8}
 8003184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (n->diff < 0.5) {
 8003188:	2200      	movs	r2, #0
 800318a:	4b70      	ldr	r3, [pc, #448]	@ (800334c <prv_calculate_dbl_num_data+0x2d4>)
 800318c:	ec51 0b18 	vmov	r0, r1, d8
 8003190:	f7fd fc9c 	bl	8000acc <__aeabi_dcmplt>
 8003194:	2800      	cmp	r0, #0
 8003196:	d1e2      	bne.n	800315e <prv_calculate_dbl_num_data+0xe6>
        if (n->decimal_part == 0) {
 8003198:	ea58 0309 	orrs.w	r3, r8, r9
 800319c:	d105      	bne.n	80031aa <prv_calculate_dbl_num_data+0x132>
            ++n->integer_part;
 800319e:	3601      	adds	r6, #1
 80031a0:	f147 0700 	adc.w	r7, r7, #0
 80031a4:	6026      	str	r6, [r4, #0]
 80031a6:	6067      	str	r7, [r4, #4]
 80031a8:	e7d9      	b.n	800315e <prv_calculate_dbl_num_data+0xe6>
            ++n->decimal_part;
 80031aa:	f118 0301 	adds.w	r3, r8, #1
 80031ae:	f149 0200 	adc.w	r2, r9, #0
 80031b2:	6123      	str	r3, [r4, #16]
 80031b4:	6162      	str	r2, [r4, #20]
 80031b6:	e7d2      	b.n	800315e <prv_calculate_dbl_num_data+0xe6>
        for (n->digits_cnt_integer_part = 0, tmp = n->integer_part; tmp > 0; ++n->digits_cnt_integer_part, tmp /= 10) {}
 80031b8:	2200      	movs	r2, #0
 80031ba:	8422      	strh	r2, [r4, #32]
 80031bc:	e030      	b.n	8003220 <prv_calculate_dbl_num_data+0x1a8>
 80031be:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
 80031c2:	3201      	adds	r2, #1
 80031c4:	8422      	strh	r2, [r4, #32]
 80031c6:	17de      	asrs	r6, r3, #31
 80031c8:	f006 0703 	and.w	r7, r6, #3
 80031cc:	f021 4270 	bic.w	r2, r1, #4026531840	@ 0xf0000000
 80031d0:	0f08      	lsrs	r0, r1, #28
 80031d2:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 80031d6:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
 80031da:	4402      	add	r2, r0
 80031dc:	eb02 6213 	add.w	r2, r2, r3, lsr #24
 80031e0:	443a      	add	r2, r7
 80031e2:	485b      	ldr	r0, [pc, #364]	@ (8003350 <prv_calculate_dbl_num_data+0x2d8>)
 80031e4:	fba0 7c02 	umull	r7, ip, r0, r2
 80031e8:	f02c 0703 	bic.w	r7, ip, #3
 80031ec:	eb07 079c 	add.w	r7, r7, ip, lsr #2
 80031f0:	1bd2      	subs	r2, r2, r7
 80031f2:	f026 0603 	bic.w	r6, r6, #3
 80031f6:	4432      	add	r2, r6
 80031f8:	1a89      	subs	r1, r1, r2
 80031fa:	eb63 72e2 	sbc.w	r2, r3, r2, asr #31
 80031fe:	f04f 33cc 	mov.w	r3, #3435973836	@ 0xcccccccc
 8003202:	fb01 f303 	mul.w	r3, r1, r3
 8003206:	fb00 3202 	mla	r2, r0, r2, r3
 800320a:	fba1 1300 	umull	r1, r3, r1, r0
 800320e:	4413      	add	r3, r2
 8003210:	0fda      	lsrs	r2, r3, #31
 8003212:	1852      	adds	r2, r2, r1
 8003214:	f143 0300 	adc.w	r3, r3, #0
 8003218:	0852      	lsrs	r2, r2, #1
 800321a:	ea42 71c3 	orr.w	r1, r2, r3, lsl #31
 800321e:	105b      	asrs	r3, r3, #1
 8003220:	2901      	cmp	r1, #1
 8003222:	f173 0200 	sbcs.w	r2, r3, #0
 8003226:	daca      	bge.n	80031be <prv_calculate_dbl_num_data+0x146>
 8003228:	e7a0      	b.n	800316c <prv_calculate_dbl_num_data+0xf4>
        float_long_t tmp = n->decimal_part;
 800322a:	6921      	ldr	r1, [r4, #16]
 800322c:	6963      	ldr	r3, [r4, #20]
        for (adder = 0, i = 0; tmp > 0 || i < (short)lwi->m.precision;
 800322e:	2000      	movs	r0, #0
 8003230:	4606      	mov	r6, r0
 8003232:	461f      	mov	r7, r3
 8003234:	e033      	b.n	800329e <prv_calculate_dbl_num_data+0x226>
             tmp /= 10, n->digits_cnt_decimal_part_useful += adder, ++i) {
 8003236:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800323a:	f00c 0e03 	and.w	lr, ip, #3
 800323e:	f021 4270 	bic.w	r2, r1, #4026531840	@ 0xf0000000
 8003242:	0f0b      	lsrs	r3, r1, #28
 8003244:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 8003248:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800324c:	441a      	add	r2, r3
 800324e:	eb02 6217 	add.w	r2, r2, r7, lsr #24
 8003252:	4472      	add	r2, lr
 8003254:	4b3e      	ldr	r3, [pc, #248]	@ (8003350 <prv_calculate_dbl_num_data+0x2d8>)
 8003256:	fba3 e802 	umull	lr, r8, r3, r2
 800325a:	f028 0e03 	bic.w	lr, r8, #3
 800325e:	eb0e 0e98 	add.w	lr, lr, r8, lsr #2
 8003262:	eba2 020e 	sub.w	r2, r2, lr
 8003266:	f02c 0c03 	bic.w	ip, ip, #3
 800326a:	4462      	add	r2, ip
 800326c:	1a89      	subs	r1, r1, r2
 800326e:	eb67 72e2 	sbc.w	r2, r7, r2, asr #31
 8003272:	f04f 37cc 	mov.w	r7, #3435973836	@ 0xcccccccc
 8003276:	fb01 f707 	mul.w	r7, r1, r7
 800327a:	fb03 7202 	mla	r2, r3, r2, r7
 800327e:	fba1 1303 	umull	r1, r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	0fda      	lsrs	r2, r3, #31
 8003286:	1852      	adds	r2, r2, r1
 8003288:	f143 0300 	adc.w	r3, r3, #0
 800328c:	0852      	lsrs	r2, r2, #1
 800328e:	ea42 71c3 	orr.w	r1, r2, r3, lsl #31
 8003292:	105f      	asrs	r7, r3, #1
 8003294:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 8003296:	4433      	add	r3, r6
 8003298:	84a3      	strh	r3, [r4, #36]	@ 0x24
 800329a:	3001      	adds	r0, #1
 800329c:	b200      	sxth	r0, r0
        for (adder = 0, i = 0; tmp > 0 || i < (short)lwi->m.precision;
 800329e:	2901      	cmp	r1, #1
 80032a0:	f177 0300 	sbcs.w	r3, r7, #0
 80032a4:	db4a      	blt.n	800333c <prv_calculate_dbl_num_data+0x2c4>
            if (adder == 0 && (tmp % 10) > 0) {
 80032a6:	2e00      	cmp	r6, #0
 80032a8:	d1c5      	bne.n	8003236 <prv_calculate_dbl_num_data+0x1be>
 80032aa:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 80032ae:	f00c 0e03 	and.w	lr, ip, #3
 80032b2:	f021 4370 	bic.w	r3, r1, #4026531840	@ 0xf0000000
 80032b6:	0f0a      	lsrs	r2, r1, #28
 80032b8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 80032bc:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80032c0:	4413      	add	r3, r2
 80032c2:	eb03 6317 	add.w	r3, r3, r7, lsr #24
 80032c6:	4473      	add	r3, lr
 80032c8:	4a21      	ldr	r2, [pc, #132]	@ (8003350 <prv_calculate_dbl_num_data+0x2d8>)
 80032ca:	fba2 e803 	umull	lr, r8, r2, r3
 80032ce:	f028 0e03 	bic.w	lr, r8, #3
 80032d2:	eb0e 0e98 	add.w	lr, lr, r8, lsr #2
 80032d6:	eba3 030e 	sub.w	r3, r3, lr
 80032da:	f02c 0c03 	bic.w	ip, ip, #3
 80032de:	4463      	add	r3, ip
 80032e0:	ebb1 0c03 	subs.w	ip, r1, r3
 80032e4:	eb67 73e3 	sbc.w	r3, r7, r3, asr #31
 80032e8:	f04f 3ecc 	mov.w	lr, #3435973836	@ 0xcccccccc
 80032ec:	fb0e fe0c 	mul.w	lr, lr, ip
 80032f0:	fb02 ee03 	mla	lr, r2, r3, lr
 80032f4:	fbac 3202 	umull	r3, r2, ip, r2
 80032f8:	4472      	add	r2, lr
 80032fa:	ea4f 7cd2 	mov.w	ip, r2, lsr #31
 80032fe:	eb1c 0c03 	adds.w	ip, ip, r3
 8003302:	f142 0200 	adc.w	r2, r2, #0
 8003306:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800330a:	ea4c 7cc2 	orr.w	ip, ip, r2, lsl #31
 800330e:	1052      	asrs	r2, r2, #1
 8003310:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8003314:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 8003318:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800331c:	eb13 030c 	adds.w	r3, r3, ip
 8003320:	eb42 020e 	adc.w	r2, r2, lr
 8003324:	18db      	adds	r3, r3, r3
 8003326:	4152      	adcs	r2, r2
 8003328:	1acb      	subs	r3, r1, r3
 800332a:	eb67 0202 	sbc.w	r2, r7, r2
 800332e:	2b01      	cmp	r3, #1
 8003330:	f172 0200 	sbcs.w	r2, r2, #0
 8003334:	f6ff af7f 	blt.w	8003236 <prv_calculate_dbl_num_data+0x1be>
                adder = 1;
 8003338:	2601      	movs	r6, #1
 800333a:	e77c      	b.n	8003236 <prv_calculate_dbl_num_data+0x1be>
        for (adder = 0, i = 0; tmp > 0 || i < (short)lwi->m.precision;
 800333c:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8003340:	4283      	cmp	r3, r0
 8003342:	dcb0      	bgt.n	80032a6 <prv_calculate_dbl_num_data+0x22e>
 8003344:	e71b      	b.n	800317e <prv_calculate_dbl_num_data+0x106>
 8003346:	bf00      	nop
 8003348:	080059b0 	.word	0x080059b0
 800334c:	3fe00000 	.word	0x3fe00000
 8003350:	cccccccd 	.word	0xcccccccd
 8003354:	86a12b9b 	.word	0x86a12b9b
 8003358:	3cf6849b 	.word	0x3cf6849b
 800335c:	00000000 	.word	0x00000000

08003360 <prv_double_to_str>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_double_to_str(lwprintf_int_t* lwi, double in_num) {
 8003360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003364:	b093      	sub	sp, #76	@ 0x4c
 8003366:	4604      	mov	r4, r0
 8003368:	ec59 8b10 	vmov	r8, r9, d0
    double orig_num = in_num;
    int digits_cnt, chosen_precision, i;
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    int exp_cnt = 0;
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    char def_type = lwi->m.type;
 800336c:	f890 5029 	ldrb.w	r5, [r0, #41]	@ 0x29
     * - Print negative infinity if number is less than -FLOAT_MAX_B_ENG and engineering mode is disabled
     * - Print positive infinity if number is greater than absolute minimum
     * - Print positive infinity if number is greater than FLOAT_MAX_B_ENG and engineering mode is disabled
     * - Go to engineering mode if it is enabled and `in_num < -FLOAT_MAX_B_ENG` or `in_num > FLOAT_MAX_B_ENG`
     */
    if (in_num != in_num) {
 8003370:	4642      	mov	r2, r8
 8003372:	464b      	mov	r3, r9
 8003374:	4640      	mov	r0, r8
 8003376:	4649      	mov	r1, r9
 8003378:	f7fd fb9e 	bl	8000ab8 <__aeabi_dcmpeq>
 800337c:	2800      	cmp	r0, #0
 800337e:	d063      	beq.n	8003448 <prv_double_to_str+0xe8>
        return prv_out_str(lwi, lwi->m.flags.uc ? "NAN" : "nan", 3);
    } else if (in_num < -DBL_MAX
 8003380:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003384:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 8003388:	4640      	mov	r0, r8
 800338a:	4649      	mov	r1, r9
 800338c:	f7fd fb9e 	bl	8000acc <__aeabi_dcmplt>
 8003390:	2800      	cmp	r0, #0
 8003392:	d167      	bne.n	8003464 <prv_double_to_str+0x104>
#if !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
               || in_num < -FLOAT_MAX_B_ENG
#endif /* !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    ) {
        return prv_out_str(lwi, lwi->m.flags.uc ? "-INF" : "-inf", 4);
    } else if (in_num > DBL_MAX
 8003394:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003398:	4ba7      	ldr	r3, [pc, #668]	@ (8003638 <prv_double_to_str+0x2d8>)
 800339a:	4640      	mov	r0, r8
 800339c:	4649      	mov	r1, r9
 800339e:	f7fd fbb3 	bl	8000b08 <__aeabi_dcmpgt>
 80033a2:	2800      	cmp	r0, #0
 80033a4:	d16a      	bne.n	800347c <prv_double_to_str+0x11c>
            *s_ptr++ = '+';
        }
        strcpy(s_ptr, lwi->m.flags.uc ? "INF" : "inf");
        return prv_out_str(lwi, str, lwi->m.flags.plus ? 4 : 3);
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    } else if ((in_num < -FLOAT_MAX_B_ENG || in_num > FLOAT_MAX_B_ENG) && def_type != 'g') {
 80033a6:	a3a0      	add	r3, pc, #640	@ (adr r3, 8003628 <prv_double_to_str+0x2c8>)
 80033a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ac:	4640      	mov	r0, r8
 80033ae:	4649      	mov	r1, r9
 80033b0:	f7fd fb8c 	bl	8000acc <__aeabi_dcmplt>
 80033b4:	b938      	cbnz	r0, 80033c6 <prv_double_to_str+0x66>
 80033b6:	a39e      	add	r3, pc, #632	@ (adr r3, 8003630 <prv_double_to_str+0x2d0>)
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	4640      	mov	r0, r8
 80033be:	4649      	mov	r1, r9
 80033c0:	f7fd fba2 	bl	8000b08 <__aeabi_dcmpgt>
 80033c4:	b120      	cbz	r0, 80033d0 <prv_double_to_str+0x70>
 80033c6:	2d67      	cmp	r5, #103	@ 0x67
 80033c8:	d002      	beq.n	80033d0 <prv_double_to_str+0x70>
        lwi->m.type = def_type = 'e'; /* Go to engineering mode */
 80033ca:	2565      	movs	r5, #101	@ 0x65
 80033cc:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
#endif                                /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    }

    /* Check sign of the number */
    SIGNED_CHECK_NEGATIVE(lwi, in_num);
 80033d0:	2200      	movs	r2, #0
 80033d2:	2300      	movs	r3, #0
 80033d4:	4640      	mov	r0, r8
 80033d6:	4649      	mov	r1, r9
 80033d8:	f7fd fb78 	bl	8000acc <__aeabi_dcmplt>
 80033dc:	2800      	cmp	r0, #0
 80033de:	d16d      	bne.n	80034bc <prv_double_to_str+0x15c>
    orig_num = in_num;

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Engineering mode check for number of exponents */
    if (def_type == 'e' || def_type == 'g'
 80033e0:	2d65      	cmp	r5, #101	@ 0x65
 80033e2:	d00b      	beq.n	80033fc <prv_double_to_str+0x9c>
 80033e4:	2d67      	cmp	r5, #103	@ 0x67
 80033e6:	d009      	beq.n	80033fc <prv_double_to_str+0x9c>
        || in_num > (double)(powers_of_10[LWPRINTF_ARRAYSIZE(powers_of_10) - 1])) { /* More vs what float can hold */
 80033e8:	a391      	add	r3, pc, #580	@ (adr r3, 8003630 <prv_double_to_str+0x2d0>)
 80033ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ee:	4640      	mov	r0, r8
 80033f0:	4649      	mov	r1, r9
 80033f2:	f7fd fb89 	bl	8000b08 <__aeabi_dcmpgt>
 80033f6:	2800      	cmp	r0, #0
 80033f8:	f000 8087 	beq.w	800350a <prv_double_to_str+0x1aa>
        if (lwi->m.type != 'g') {
 80033fc:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003400:	2b67      	cmp	r3, #103	@ 0x67
 8003402:	d002      	beq.n	800340a <prv_double_to_str+0xaa>
            lwi->m.type = 'e';
 8003404:	2365      	movs	r3, #101	@ 0x65
 8003406:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
        }

        /* Normalize number to be between 0 and 1 and count decimals for exponent */
        if (in_num < 1) {
 800340a:	2200      	movs	r2, #0
 800340c:	4b8b      	ldr	r3, [pc, #556]	@ (800363c <prv_double_to_str+0x2dc>)
 800340e:	4640      	mov	r0, r8
 8003410:	4649      	mov	r1, r9
 8003412:	f7fd fb5b 	bl	8000acc <__aeabi_dcmplt>
 8003416:	2800      	cmp	r0, #0
 8003418:	d172      	bne.n	8003500 <prv_double_to_str+0x1a0>
 800341a:	4646      	mov	r6, r8
 800341c:	464f      	mov	r7, r9
            for (exp_cnt = 0; in_num < 1 && in_num > 0; in_num *= 10, --exp_cnt) {}
        } else {
            for (exp_cnt = 0; in_num >= 10; in_num /= 10, ++exp_cnt) {}
 800341e:	f04f 0a00 	mov.w	sl, #0
 8003422:	2200      	movs	r2, #0
 8003424:	4b86      	ldr	r3, [pc, #536]	@ (8003640 <prv_double_to_str+0x2e0>)
 8003426:	4630      	mov	r0, r6
 8003428:	4639      	mov	r1, r7
 800342a:	f7fd fb63 	bl	8000af4 <__aeabi_dcmpge>
 800342e:	2800      	cmp	r0, #0
 8003430:	d06f      	beq.n	8003512 <prv_double_to_str+0x1b2>
 8003432:	2200      	movs	r2, #0
 8003434:	4b82      	ldr	r3, [pc, #520]	@ (8003640 <prv_double_to_str+0x2e0>)
 8003436:	4630      	mov	r0, r6
 8003438:	4639      	mov	r1, r7
 800343a:	f7fd f9ff 	bl	800083c <__aeabi_ddiv>
 800343e:	4606      	mov	r6, r0
 8003440:	460f      	mov	r7, r1
 8003442:	f10a 0a01 	add.w	sl, sl, #1
 8003446:	e7ec      	b.n	8003422 <prv_double_to_str+0xc2>
        return prv_out_str(lwi, lwi->m.flags.uc ? "NAN" : "nan", 3);
 8003448:	7f63      	ldrb	r3, [r4, #29]
 800344a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800344e:	d007      	beq.n	8003460 <prv_double_to_str+0x100>
 8003450:	497c      	ldr	r1, [pc, #496]	@ (8003644 <prv_double_to_str+0x2e4>)
 8003452:	2203      	movs	r2, #3
 8003454:	4620      	mov	r0, r4
 8003456:	f7ff fd92 	bl	8002f7e <prv_out_str>
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    prv_out_str_after(lwi, digits_cnt);

    return 1;
}
 800345a:	b013      	add	sp, #76	@ 0x4c
 800345c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return prv_out_str(lwi, lwi->m.flags.uc ? "NAN" : "nan", 3);
 8003460:	4979      	ldr	r1, [pc, #484]	@ (8003648 <prv_double_to_str+0x2e8>)
 8003462:	e7f6      	b.n	8003452 <prv_double_to_str+0xf2>
        return prv_out_str(lwi, lwi->m.flags.uc ? "-INF" : "-inf", 4);
 8003464:	7f63      	ldrb	r3, [r4, #29]
 8003466:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800346a:	d005      	beq.n	8003478 <prv_double_to_str+0x118>
 800346c:	4977      	ldr	r1, [pc, #476]	@ (800364c <prv_double_to_str+0x2ec>)
 800346e:	2204      	movs	r2, #4
 8003470:	4620      	mov	r0, r4
 8003472:	f7ff fd84 	bl	8002f7e <prv_out_str>
 8003476:	e7f0      	b.n	800345a <prv_double_to_str+0xfa>
 8003478:	4975      	ldr	r1, [pc, #468]	@ (8003650 <prv_double_to_str+0x2f0>)
 800347a:	e7f8      	b.n	800346e <prv_double_to_str+0x10e>
        if (lwi->m.flags.plus) {
 800347c:	7f23      	ldrb	r3, [r4, #28]
 800347e:	f013 0f02 	tst.w	r3, #2
 8003482:	d015      	beq.n	80034b0 <prv_double_to_str+0x150>
            *s_ptr++ = '+';
 8003484:	232b      	movs	r3, #43	@ 0x2b
 8003486:	f88d 3000 	strb.w	r3, [sp]
 800348a:	f10d 0201 	add.w	r2, sp, #1
        strcpy(s_ptr, lwi->m.flags.uc ? "INF" : "inf");
 800348e:	7f63      	ldrb	r3, [r4, #29]
 8003490:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003494:	d00e      	beq.n	80034b4 <prv_double_to_str+0x154>
 8003496:	4b6f      	ldr	r3, [pc, #444]	@ (8003654 <prv_double_to_str+0x2f4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6013      	str	r3, [r2, #0]
        return prv_out_str(lwi, str, lwi->m.flags.plus ? 4 : 3);
 800349c:	7f23      	ldrb	r3, [r4, #28]
 800349e:	f013 0f02 	tst.w	r3, #2
 80034a2:	d009      	beq.n	80034b8 <prv_double_to_str+0x158>
 80034a4:	2204      	movs	r2, #4
 80034a6:	4669      	mov	r1, sp
 80034a8:	4620      	mov	r0, r4
 80034aa:	f7ff fd68 	bl	8002f7e <prv_out_str>
 80034ae:	e7d4      	b.n	800345a <prv_double_to_str+0xfa>
        char str[5], *s_ptr = str;
 80034b0:	466a      	mov	r2, sp
 80034b2:	e7ec      	b.n	800348e <prv_double_to_str+0x12e>
        strcpy(s_ptr, lwi->m.flags.uc ? "INF" : "inf");
 80034b4:	4b68      	ldr	r3, [pc, #416]	@ (8003658 <prv_double_to_str+0x2f8>)
 80034b6:	e7ef      	b.n	8003498 <prv_double_to_str+0x138>
        return prv_out_str(lwi, str, lwi->m.flags.plus ? 4 : 3);
 80034b8:	2203      	movs	r2, #3
 80034ba:	e7f4      	b.n	80034a6 <prv_double_to_str+0x146>
    SIGNED_CHECK_NEGATIVE(lwi, in_num);
 80034bc:	7f63      	ldrb	r3, [r4, #29]
 80034be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034c2:	7763      	strb	r3, [r4, #29]
 80034c4:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80034c8:	4699      	mov	r9, r3
 80034ca:	e789      	b.n	80033e0 <prv_double_to_str+0x80>
            for (exp_cnt = 0; in_num < 1 && in_num > 0; in_num *= 10, --exp_cnt) {}
 80034cc:	2200      	movs	r2, #0
 80034ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003640 <prv_double_to_str+0x2e0>)
 80034d0:	4630      	mov	r0, r6
 80034d2:	4639      	mov	r1, r7
 80034d4:	f7fd f888 	bl	80005e8 <__aeabi_dmul>
 80034d8:	4606      	mov	r6, r0
 80034da:	460f      	mov	r7, r1
 80034dc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80034e0:	2200      	movs	r2, #0
 80034e2:	4b56      	ldr	r3, [pc, #344]	@ (800363c <prv_double_to_str+0x2dc>)
 80034e4:	4630      	mov	r0, r6
 80034e6:	4639      	mov	r1, r7
 80034e8:	f7fd faf0 	bl	8000acc <__aeabi_dcmplt>
 80034ec:	b188      	cbz	r0, 8003512 <prv_double_to_str+0x1b2>
 80034ee:	2200      	movs	r2, #0
 80034f0:	2300      	movs	r3, #0
 80034f2:	4630      	mov	r0, r6
 80034f4:	4639      	mov	r1, r7
 80034f6:	f7fd fb07 	bl	8000b08 <__aeabi_dcmpgt>
 80034fa:	2800      	cmp	r0, #0
 80034fc:	d1e6      	bne.n	80034cc <prv_double_to_str+0x16c>
 80034fe:	e008      	b.n	8003512 <prv_double_to_str+0x1b2>
 8003500:	4646      	mov	r6, r8
 8003502:	464f      	mov	r7, r9
 8003504:	f04f 0a00 	mov.w	sl, #0
 8003508:	e7ea      	b.n	80034e0 <prv_double_to_str+0x180>
 800350a:	4646      	mov	r6, r8
 800350c:	464f      	mov	r7, r9
    int exp_cnt = 0;
 800350e:	f04f 0a00 	mov.w	sl, #0
    chosen_precision = lwi->m.precision; /* This is default value coming from app */
 8003512:	f8d4 b020 	ldr.w	fp, [r4, #32]
    if (lwi->m.precision >= (int)LWPRINTF_ARRAYSIZE(powers_of_10)) {
 8003516:	f1bb 0f12 	cmp.w	fp, #18
 800351a:	dd36      	ble.n	800358a <prv_double_to_str+0x22a>
        lwi->m.precision = (int)LWPRINTF_ARRAYSIZE(powers_of_10) - 1; /* Limit to maximum precision */
 800351c:	2312      	movs	r3, #18
 800351e:	6223      	str	r3, [r4, #32]
    prv_calculate_dbl_num_data(lwi, &dblnum, def_type == 'e' ? in_num : orig_num, def_type);
 8003520:	2d65      	cmp	r5, #101	@ 0x65
 8003522:	d044      	beq.n	80035ae <prv_double_to_str+0x24e>
 8003524:	ec49 8b10 	vmov	d0, r8, r9
 8003528:	462a      	mov	r2, r5
 800352a:	a908      	add	r1, sp, #32
 800352c:	4620      	mov	r0, r4
 800352e:	f7ff fda3 	bl	8003078 <prv_calculate_dbl_num_data>
    if (def_type == 'g') {
 8003532:	2d67      	cmp	r5, #103	@ 0x67
 8003534:	d03e      	beq.n	80035b4 <prv_double_to_str+0x254>
    digits_cnt = dblnum.digits_cnt_integer_part;
 8003536:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
        if (chosen_precision > 0 && lwi->m.flags.precision) {
 800353a:	f1bb 0f00 	cmp.w	fp, #0
 800353e:	dd06      	ble.n	800354e <prv_double_to_str+0x1ee>
 8003540:	7f23      	ldrb	r3, [r4, #28]
 8003542:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003546:	d002      	beq.n	800354e <prv_double_to_str+0x1ee>
            digits_cnt += chosen_precision + 1;
 8003548:	f10b 0301 	add.w	r3, fp, #1
 800354c:	4419      	add	r1, r3
    if (lwi->m.type == 'e') {
 800354e:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003552:	2b65      	cmp	r3, #101	@ 0x65
 8003554:	d05d      	beq.n	8003612 <prv_double_to_str+0x2b2>
    prv_out_str_before(lwi, digits_cnt);
 8003556:	460f      	mov	r7, r1
 8003558:	4620      	mov	r0, r4
 800355a:	f7ff fc3b 	bl	8002dd4 <prv_out_str_before>
    if (dblnum.integer_part == 0) {
 800355e:	9b08      	ldr	r3, [sp, #32]
 8003560:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003562:	4313      	orrs	r3, r2
 8003564:	d17a      	bne.n	800365c <prv_double_to_str+0x2fc>
        lwi->out_fn(lwi, '0');
 8003566:	6963      	ldr	r3, [r4, #20]
 8003568:	2130      	movs	r1, #48	@ 0x30
 800356a:	4620      	mov	r0, r4
 800356c:	4798      	blx	r3
    if (lwi->m.precision > 0) {
 800356e:	6a23      	ldr	r3, [r4, #32]
 8003570:	2b00      	cmp	r3, #0
 8003572:	f340 81a8 	ble.w	80038c6 <prv_double_to_str+0x566>
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 8003576:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 800357a:	2b00      	cmp	r3, #0
 800357c:	dd03      	ble.n	8003586 <prv_double_to_str+0x226>
            lwi->out_fn(lwi, '.');
 800357e:	6963      	ldr	r3, [r4, #20]
 8003580:	212e      	movs	r1, #46	@ 0x2e
 8003582:	4620      	mov	r0, r4
 8003584:	4798      	blx	r3
        for (i = 0; dblnum.integer_part > 0; dblnum.integer_part /= 10, ++i) {
 8003586:	2600      	movs	r6, #0
 8003588:	e153      	b.n	8003832 <prv_double_to_str+0x4d2>
    } else if (!lwi->m.flags.precision) {
 800358a:	7f23      	ldrb	r3, [r4, #28]
 800358c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003590:	d103      	bne.n	800359a <prv_double_to_str+0x23a>
        lwi->m.precision = LWPRINTF_CFG_FLOAT_DEFAULT_PRECISION; /* Default precision when not used */
 8003592:	2306      	movs	r3, #6
 8003594:	6223      	str	r3, [r4, #32]
        chosen_precision = lwi->m.precision;                     /* There was no precision, update chosen precision */
 8003596:	469b      	mov	fp, r3
 8003598:	e7c2      	b.n	8003520 <prv_double_to_str+0x1c0>
    } else if (lwi->m.flags.precision && lwi->m.precision == 0) {
 800359a:	f1bb 0f00 	cmp.w	fp, #0
 800359e:	d1bf      	bne.n	8003520 <prv_double_to_str+0x1c0>
        if (def_type == 'g') {
 80035a0:	2d67      	cmp	r5, #103	@ 0x67
 80035a2:	d1bd      	bne.n	8003520 <prv_double_to_str+0x1c0>
            lwi->m.precision = 1;
 80035a4:	2301      	movs	r3, #1
 80035a6:	6223      	str	r3, [r4, #32]
    prv_calculate_dbl_num_data(lwi, &dblnum, def_type == 'e' ? in_num : orig_num, def_type);
 80035a8:	ec49 8b10 	vmov	d0, r8, r9
 80035ac:	e7bc      	b.n	8003528 <prv_double_to_str+0x1c8>
 80035ae:	ec47 6b10 	vmov	d0, r6, r7
 80035b2:	e7b9      	b.n	8003528 <prv_double_to_str+0x1c8>
        if (exp_cnt >= -4 && exp_cnt < lwi->m.precision) {
 80035b4:	f11a 0f04 	cmn.w	sl, #4
 80035b8:	db0e      	blt.n	80035d8 <prv_double_to_str+0x278>
 80035ba:	6a23      	ldr	r3, [r4, #32]
 80035bc:	4553      	cmp	r3, sl
 80035be:	dd0b      	ble.n	80035d8 <prv_double_to_str+0x278>
            lwi->m.precision -= exp_cnt + 1;
 80035c0:	f10a 0201 	add.w	r2, sl, #1
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	6223      	str	r3, [r4, #32]
            chosen_precision -= exp_cnt + 1;
 80035c8:	ebab 0b02 	sub.w	fp, fp, r2
            lwi->m.type = 'f';
 80035cc:	2366      	movs	r3, #102	@ 0x66
 80035ce:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
            in_num = orig_num;
 80035d2:	4646      	mov	r6, r8
 80035d4:	464f      	mov	r7, r9
 80035d6:	e009      	b.n	80035ec <prv_double_to_str+0x28c>
            lwi->m.type = 'e';
 80035d8:	2365      	movs	r3, #101	@ 0x65
 80035da:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
            if (lwi->m.precision > 0) {
 80035de:	6a23      	ldr	r3, [r4, #32]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	dd03      	ble.n	80035ec <prv_double_to_str+0x28c>
                --lwi->m.precision;
 80035e4:	3b01      	subs	r3, #1
 80035e6:	6223      	str	r3, [r4, #32]
                --chosen_precision;
 80035e8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
        prv_calculate_dbl_num_data(lwi, &dblnum, in_num, def_type);
 80035ec:	462a      	mov	r2, r5
 80035ee:	ec47 6b10 	vmov	d0, r6, r7
 80035f2:	a908      	add	r1, sp, #32
 80035f4:	4620      	mov	r0, r4
 80035f6:	f7ff fd3f 	bl	8003078 <prv_calculate_dbl_num_data>
    digits_cnt = dblnum.digits_cnt_integer_part;
 80035fa:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
    } else if (def_type == 'g' && lwi->m.precision > 0) {
 80035fe:	6a23      	ldr	r3, [r4, #32]
 8003600:	2b00      	cmp	r3, #0
 8003602:	dd9a      	ble.n	800353a <prv_double_to_str+0x1da>
        digits_cnt += dblnum.digits_cnt_decimal_part_useful;
 8003604:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8003608:	4419      	add	r1, r3
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 800360a:	2b00      	cmp	r3, #0
 800360c:	dd9f      	ble.n	800354e <prv_double_to_str+0x1ee>
            ++digits_cnt;
 800360e:	3101      	adds	r1, #1
 8003610:	e79d      	b.n	800354e <prv_double_to_str+0x1ee>
        digits_cnt += 4 + (exp_cnt >= 100 || exp_cnt <= -100);
 8003612:	f10a 0363 	add.w	r3, sl, #99	@ 0x63
 8003616:	2bc6      	cmp	r3, #198	@ 0xc6
 8003618:	d902      	bls.n	8003620 <prv_double_to_str+0x2c0>
 800361a:	2305      	movs	r3, #5
 800361c:	4419      	add	r1, r3
 800361e:	e79a      	b.n	8003556 <prv_double_to_str+0x1f6>
 8003620:	2304      	movs	r3, #4
 8003622:	e7fb      	b.n	800361c <prv_double_to_str+0x2bc>
 8003624:	f3af 8000 	nop.w
 8003628:	674ec800 	.word	0x674ec800
 800362c:	c3abc16d 	.word	0xc3abc16d
 8003630:	674ec800 	.word	0x674ec800
 8003634:	43abc16d 	.word	0x43abc16d
 8003638:	7fefffff 	.word	0x7fefffff
 800363c:	3ff00000 	.word	0x3ff00000
 8003640:	40240000 	.word	0x40240000
 8003644:	080054c0 	.word	0x080054c0
 8003648:	080054c4 	.word	0x080054c4
 800364c:	080054c8 	.word	0x080054c8
 8003650:	080054d0 	.word	0x080054d0
 8003654:	080054d8 	.word	0x080054d8
 8003658:	080054dc 	.word	0x080054dc
        for (i = 0; dblnum.integer_part > 0; dblnum.integer_part /= 10, ++i) {
 800365c:	2600      	movs	r6, #0
 800365e:	9a08      	ldr	r2, [sp, #32]
 8003660:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003662:	2a01      	cmp	r2, #1
 8003664:	f171 0300 	sbcs.w	r3, r1, #0
 8003668:	db6b      	blt.n	8003742 <prv_double_to_str+0x3e2>
            str[i] = (char)'0' + (char)(dblnum.integer_part % 10);
 800366a:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 800366e:	f00c 0e03 	and.w	lr, ip, #3
 8003672:	f022 4370 	bic.w	r3, r2, #4026531840	@ 0xf0000000
 8003676:	0f10      	lsrs	r0, r2, #28
 8003678:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 800367c:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
 8003680:	4403      	add	r3, r0
 8003682:	eb03 6311 	add.w	r3, r3, r1, lsr #24
 8003686:	4473      	add	r3, lr
 8003688:	48b4      	ldr	r0, [pc, #720]	@ (800395c <prv_double_to_str+0x5fc>)
 800368a:	fba0 e803 	umull	lr, r8, r0, r3
 800368e:	f028 0e03 	bic.w	lr, r8, #3
 8003692:	eb0e 0e98 	add.w	lr, lr, r8, lsr #2
 8003696:	eba3 030e 	sub.w	r3, r3, lr
 800369a:	f02c 0c03 	bic.w	ip, ip, #3
 800369e:	4463      	add	r3, ip
 80036a0:	ebb2 0c03 	subs.w	ip, r2, r3
 80036a4:	eb61 73e3 	sbc.w	r3, r1, r3, asr #31
 80036a8:	f04f 3ecc 	mov.w	lr, #3435973836	@ 0xcccccccc
 80036ac:	fb0e fe0c 	mul.w	lr, lr, ip
 80036b0:	fb00 e303 	mla	r3, r0, r3, lr
 80036b4:	fbac c000 	umull	ip, r0, ip, r0
 80036b8:	4418      	add	r0, r3
 80036ba:	0fc3      	lsrs	r3, r0, #31
 80036bc:	eb13 030c 	adds.w	r3, r3, ip
 80036c0:	f140 0000 	adc.w	r0, r0, #0
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80036ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80036ce:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	3330      	adds	r3, #48	@ 0x30
 80036d6:	f106 0048 	add.w	r0, r6, #72	@ 0x48
 80036da:	4468      	add	r0, sp
 80036dc:	f800 3c40 	strb.w	r3, [r0, #-64]
        for (i = 0; dblnum.integer_part > 0; dblnum.integer_part /= 10, ++i) {
 80036e0:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 80036e4:	f00c 0e03 	and.w	lr, ip, #3
 80036e8:	f022 4070 	bic.w	r0, r2, #4026531840	@ 0xf0000000
 80036ec:	0f13      	lsrs	r3, r2, #28
 80036ee:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80036f2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80036f6:	4418      	add	r0, r3
 80036f8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
 80036fc:	4470      	add	r0, lr
 80036fe:	4b97      	ldr	r3, [pc, #604]	@ (800395c <prv_double_to_str+0x5fc>)
 8003700:	f028 0e03 	bic.w	lr, r8, #3
 8003704:	eb0e 0e98 	add.w	lr, lr, r8, lsr #2
 8003708:	eba0 000e 	sub.w	r0, r0, lr
 800370c:	f02c 0c03 	bic.w	ip, ip, #3
 8003710:	4460      	add	r0, ip
 8003712:	1a12      	subs	r2, r2, r0
 8003714:	eb61 70e0 	sbc.w	r0, r1, r0, asr #31
 8003718:	f04f 31cc 	mov.w	r1, #3435973836	@ 0xcccccccc
 800371c:	fb02 f101 	mul.w	r1, r2, r1
 8003720:	fb03 1000 	mla	r0, r3, r0, r1
 8003724:	fba2 1303 	umull	r1, r3, r2, r3
 8003728:	4403      	add	r3, r0
 800372a:	0fda      	lsrs	r2, r3, #31
 800372c:	1852      	adds	r2, r2, r1
 800372e:	f143 0300 	adc.w	r3, r3, #0
 8003732:	0852      	lsrs	r2, r2, #1
 8003734:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8003738:	105b      	asrs	r3, r3, #1
 800373a:	9208      	str	r2, [sp, #32]
 800373c:	9309      	str	r3, [sp, #36]	@ 0x24
 800373e:	3601      	adds	r6, #1
 8003740:	e78d      	b.n	800365e <prv_double_to_str+0x2fe>
        for (; i > 0; --i) {
 8003742:	2e00      	cmp	r6, #0
 8003744:	f77f af13 	ble.w	800356e <prv_double_to_str+0x20e>
            lwi->out_fn(lwi, str[i - 1]);
 8003748:	6963      	ldr	r3, [r4, #20]
 800374a:	3e01      	subs	r6, #1
 800374c:	f106 0248 	add.w	r2, r6, #72	@ 0x48
 8003750:	446a      	add	r2, sp
 8003752:	f812 1c40 	ldrb.w	r1, [r2, #-64]
 8003756:	4620      	mov	r0, r4
 8003758:	4798      	blx	r3
        for (; i > 0; --i) {
 800375a:	e7f2      	b.n	8003742 <prv_double_to_str+0x3e2>
            str[i] = (char)'0' + (char)(dblnum.decimal_part % 10);
 800375c:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8003760:	f00c 0e03 	and.w	lr, ip, #3
 8003764:	f022 4370 	bic.w	r3, r2, #4026531840	@ 0xf0000000
 8003768:	0f10      	lsrs	r0, r2, #28
 800376a:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 800376e:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
 8003772:	4403      	add	r3, r0
 8003774:	eb03 6311 	add.w	r3, r3, r1, lsr #24
 8003778:	4473      	add	r3, lr
 800377a:	4878      	ldr	r0, [pc, #480]	@ (800395c <prv_double_to_str+0x5fc>)
 800377c:	fba0 e803 	umull	lr, r8, r0, r3
 8003780:	f028 0e03 	bic.w	lr, r8, #3
 8003784:	eb0e 0e98 	add.w	lr, lr, r8, lsr #2
 8003788:	eba3 030e 	sub.w	r3, r3, lr
 800378c:	f02c 0c03 	bic.w	ip, ip, #3
 8003790:	4463      	add	r3, ip
 8003792:	ebb2 0c03 	subs.w	ip, r2, r3
 8003796:	eb61 73e3 	sbc.w	r3, r1, r3, asr #31
 800379a:	f04f 3ecc 	mov.w	lr, #3435973836	@ 0xcccccccc
 800379e:	fb0e fe0c 	mul.w	lr, lr, ip
 80037a2:	fb00 e303 	mla	r3, r0, r3, lr
 80037a6:	fbac c000 	umull	ip, r0, ip, r0
 80037aa:	4418      	add	r0, r3
 80037ac:	0fc3      	lsrs	r3, r0, #31
 80037ae:	eb13 030c 	adds.w	r3, r3, ip
 80037b2:	f140 0000 	adc.w	r0, r0, #0
 80037b6:	085b      	lsrs	r3, r3, #1
 80037b8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80037bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80037c0:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	3330      	adds	r3, #48	@ 0x30
 80037c8:	f106 0048 	add.w	r0, r6, #72	@ 0x48
 80037cc:	4468      	add	r0, sp
 80037ce:	f800 3c40 	strb.w	r3, [r0, #-64]
        for (i = 0; dblnum.decimal_part > 0; dblnum.decimal_part /= 10, ++i) {
 80037d2:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 80037d6:	f00c 0e03 	and.w	lr, ip, #3
 80037da:	f022 4070 	bic.w	r0, r2, #4026531840	@ 0xf0000000
 80037de:	0f13      	lsrs	r3, r2, #28
 80037e0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80037e4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80037e8:	4418      	add	r0, r3
 80037ea:	eb00 6011 	add.w	r0, r0, r1, lsr #24
 80037ee:	4470      	add	r0, lr
 80037f0:	4b5a      	ldr	r3, [pc, #360]	@ (800395c <prv_double_to_str+0x5fc>)
 80037f2:	f028 0e03 	bic.w	lr, r8, #3
 80037f6:	eb0e 0e98 	add.w	lr, lr, r8, lsr #2
 80037fa:	eba0 000e 	sub.w	r0, r0, lr
 80037fe:	f02c 0c03 	bic.w	ip, ip, #3
 8003802:	4460      	add	r0, ip
 8003804:	1a12      	subs	r2, r2, r0
 8003806:	eb61 70e0 	sbc.w	r0, r1, r0, asr #31
 800380a:	f04f 31cc 	mov.w	r1, #3435973836	@ 0xcccccccc
 800380e:	fb02 f101 	mul.w	r1, r2, r1
 8003812:	fb03 1100 	mla	r1, r3, r0, r1
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	440b      	add	r3, r1
 800381c:	0fd9      	lsrs	r1, r3, #31
 800381e:	188a      	adds	r2, r1, r2
 8003820:	f143 0300 	adc.w	r3, r3, #0
 8003824:	0852      	lsrs	r2, r2, #1
 8003826:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800382a:	105b      	asrs	r3, r3, #1
 800382c:	920c      	str	r2, [sp, #48]	@ 0x30
 800382e:	930d      	str	r3, [sp, #52]	@ 0x34
 8003830:	3601      	adds	r6, #1
 8003832:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003834:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003836:	2a01      	cmp	r2, #1
 8003838:	f171 0300 	sbcs.w	r3, r1, #0
 800383c:	da8e      	bge.n	800375c <prv_double_to_str+0x3fc>
        if (def_type == 'g') {
 800383e:	2d67      	cmp	r5, #103	@ 0x67
 8003840:	d015      	beq.n	800386e <prv_double_to_str+0x50e>
            for (x = i; x < lwi->m.precision; ++x) {
 8003842:	46b0      	mov	r8, r6
 8003844:	e01c      	b.n	8003880 <prv_double_to_str+0x520>
                lwi->out_fn(lwi, '0');
 8003846:	6963      	ldr	r3, [r4, #20]
 8003848:	2130      	movs	r1, #48	@ 0x30
 800384a:	4620      	mov	r0, r4
 800384c:	4798      	blx	r3
                 ++x, --dblnum.digits_cnt_decimal_part_useful) {
 800384e:	f108 0801 	add.w	r8, r8, #1
 8003852:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8003856:	3b01      	subs	r3, #1
 8003858:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
            for (x = 0; x < (lwi->m.precision - i) && dblnum.digits_cnt_decimal_part_useful > 0;
 800385c:	6a23      	ldr	r3, [r4, #32]
 800385e:	1b9b      	subs	r3, r3, r6
 8003860:	4543      	cmp	r3, r8
 8003862:	dd10      	ble.n	8003886 <prv_double_to_str+0x526>
 8003864:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8003868:	2b00      	cmp	r3, #0
 800386a:	dcec      	bgt.n	8003846 <prv_double_to_str+0x4e6>
 800386c:	e00b      	b.n	8003886 <prv_double_to_str+0x526>
 800386e:	f04f 0800 	mov.w	r8, #0
 8003872:	e7f3      	b.n	800385c <prv_double_to_str+0x4fc>
                lwi->out_fn(lwi, '0');
 8003874:	6963      	ldr	r3, [r4, #20]
 8003876:	2130      	movs	r1, #48	@ 0x30
 8003878:	4620      	mov	r0, r4
 800387a:	4798      	blx	r3
            for (x = i; x < lwi->m.precision; ++x) {
 800387c:	f108 0801 	add.w	r8, r8, #1
 8003880:	6a23      	ldr	r3, [r4, #32]
 8003882:	4543      	cmp	r3, r8
 8003884:	dcf6      	bgt.n	8003874 <prv_double_to_str+0x514>
        for (; i > 0; --i) {
 8003886:	2e00      	cmp	r6, #0
 8003888:	dd12      	ble.n	80038b0 <prv_double_to_str+0x550>
            lwi->out_fn(lwi, str[i - 1]);
 800388a:	6963      	ldr	r3, [r4, #20]
 800388c:	3e01      	subs	r6, #1
 800388e:	f106 0248 	add.w	r2, r6, #72	@ 0x48
 8003892:	446a      	add	r2, sp
 8003894:	f812 1c40 	ldrb.w	r1, [r2, #-64]
 8003898:	4620      	mov	r0, r4
 800389a:	4798      	blx	r3
            if (def_type == 'g' && --dblnum.digits_cnt_decimal_part_useful == 0) {
 800389c:	2d67      	cmp	r5, #103	@ 0x67
 800389e:	d1f2      	bne.n	8003886 <prv_double_to_str+0x526>
 80038a0:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b21b      	sxth	r3, r3
 80038a8:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1ea      	bne.n	8003886 <prv_double_to_str+0x526>
        if (def_type != 'g') {
 80038b0:	2d67      	cmp	r5, #103	@ 0x67
 80038b2:	d106      	bne.n	80038c2 <prv_double_to_str+0x562>
 80038b4:	e007      	b.n	80038c6 <prv_double_to_str+0x566>
                lwi->out_fn(lwi, '0');
 80038b6:	6963      	ldr	r3, [r4, #20]
 80038b8:	2130      	movs	r1, #48	@ 0x30
 80038ba:	4620      	mov	r0, r4
 80038bc:	4798      	blx	r3
            for (; x < chosen_precision; ++x) {
 80038be:	f108 0801 	add.w	r8, r8, #1
 80038c2:	45c3      	cmp	fp, r8
 80038c4:	dcf7      	bgt.n	80038b6 <prv_double_to_str+0x556>
    if (lwi->m.type == 'e') {
 80038c6:	f894 1029 	ldrb.w	r1, [r4, #41]	@ 0x29
 80038ca:	2965      	cmp	r1, #101	@ 0x65
 80038cc:	d005      	beq.n	80038da <prv_double_to_str+0x57a>
    prv_out_str_after(lwi, digits_cnt);
 80038ce:	4639      	mov	r1, r7
 80038d0:	4620      	mov	r0, r4
 80038d2:	f7ff fb33 	bl	8002f3c <prv_out_str_after>
    return 1;
 80038d6:	2001      	movs	r0, #1
 80038d8:	e5bf      	b.n	800345a <prv_double_to_str+0xfa>
        lwi->out_fn(lwi, lwi->m.flags.uc ? 'E' : 'e');
 80038da:	6963      	ldr	r3, [r4, #20]
 80038dc:	7f62      	ldrb	r2, [r4, #29]
 80038de:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80038e2:	d000      	beq.n	80038e6 <prv_double_to_str+0x586>
 80038e4:	2145      	movs	r1, #69	@ 0x45
 80038e6:	4620      	mov	r0, r4
 80038e8:	4798      	blx	r3
        lwi->out_fn(lwi, exp_cnt >= 0 ? '+' : '-');
 80038ea:	6963      	ldr	r3, [r4, #20]
 80038ec:	f1ba 0f00 	cmp.w	sl, #0
 80038f0:	db2e      	blt.n	8003950 <prv_double_to_str+0x5f0>
 80038f2:	212b      	movs	r1, #43	@ 0x2b
 80038f4:	4620      	mov	r0, r4
 80038f6:	4798      	blx	r3
        if (exp_cnt < 0) {
 80038f8:	f1ba 0f00 	cmp.w	sl, #0
 80038fc:	db2a      	blt.n	8003954 <prv_double_to_str+0x5f4>
        if (exp_cnt >= 100) {
 80038fe:	f1ba 0f63 	cmp.w	sl, #99	@ 0x63
 8003902:	dd0d      	ble.n	8003920 <prv_double_to_str+0x5c0>
            lwi->out_fn(lwi, (char)'0' + (char)(exp_cnt / 100));
 8003904:	6963      	ldr	r3, [r4, #20]
 8003906:	4a16      	ldr	r2, [pc, #88]	@ (8003960 <prv_double_to_str+0x600>)
 8003908:	fb82 120a 	smull	r1, r2, r2, sl
 800390c:	ea4f 7aea 	mov.w	sl, sl, asr #31
 8003910:	ebca 1a62 	rsb	sl, sl, r2, asr #5
 8003914:	fa5f f18a 	uxtb.w	r1, sl
 8003918:	3130      	adds	r1, #48	@ 0x30
 800391a:	b2c9      	uxtb	r1, r1
 800391c:	4620      	mov	r0, r4
 800391e:	4798      	blx	r3
        lwi->out_fn(lwi, (char)'0' + (char)(exp_cnt / 10));
 8003920:	6963      	ldr	r3, [r4, #20]
 8003922:	4a10      	ldr	r2, [pc, #64]	@ (8003964 <prv_double_to_str+0x604>)
 8003924:	fb82 120a 	smull	r1, r2, r2, sl
 8003928:	ea4f 75ea 	mov.w	r5, sl, asr #31
 800392c:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
 8003930:	b2e9      	uxtb	r1, r5
 8003932:	3130      	adds	r1, #48	@ 0x30
 8003934:	b2c9      	uxtb	r1, r1
 8003936:	4620      	mov	r0, r4
 8003938:	4798      	blx	r3
        lwi->out_fn(lwi, (char)'0' + (char)(exp_cnt % 10));
 800393a:	6963      	ldr	r3, [r4, #20]
 800393c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003940:	ebaa 0145 	sub.w	r1, sl, r5, lsl #1
 8003944:	b2c9      	uxtb	r1, r1
 8003946:	3130      	adds	r1, #48	@ 0x30
 8003948:	b2c9      	uxtb	r1, r1
 800394a:	4620      	mov	r0, r4
 800394c:	4798      	blx	r3
 800394e:	e7be      	b.n	80038ce <prv_double_to_str+0x56e>
        lwi->out_fn(lwi, exp_cnt >= 0 ? '+' : '-');
 8003950:	212d      	movs	r1, #45	@ 0x2d
 8003952:	e7cf      	b.n	80038f4 <prv_double_to_str+0x594>
            exp_cnt = -exp_cnt;
 8003954:	f1ca 0a00 	rsb	sl, sl, #0
 8003958:	e7d1      	b.n	80038fe <prv_double_to_str+0x59e>
 800395a:	bf00      	nop
 800395c:	cccccccd 	.word	0xcccccccd
 8003960:	51eb851f 	.word	0x51eb851f
 8003964:	66666667 	.word	0x66666667

08003968 <prv_strnlen>:
prv_strnlen(const char* str, size_t max_n) {
 8003968:	4603      	mov	r3, r0
    size_t length = 0;
 800396a:	2000      	movs	r0, #0
    for (; *str != '\0' && length < max_n; ++length, ++str) {}
 800396c:	e001      	b.n	8003972 <prv_strnlen+0xa>
 800396e:	3001      	adds	r0, #1
 8003970:	3301      	adds	r3, #1
 8003972:	781a      	ldrb	r2, [r3, #0]
 8003974:	b10a      	cbz	r2, 800397a <prv_strnlen+0x12>
 8003976:	4288      	cmp	r0, r1
 8003978:	d3f9      	bcc.n	800396e <prv_strnlen+0x6>
}
 800397a:	4770      	bx	lr

0800397c <prv_format>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       arg: Variable parameters list
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_format(lwprintf_int_t* lwi, va_list arg) {
 800397c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003980:	b085      	sub	sp, #20
 8003982:	4604      	mov	r4, r0
 8003984:	9101      	str	r1, [sp, #4]
    uint8_t detected = 0;
    const char* fmt = lwi->fmt;
 8003986:	6843      	ldr	r3, [r0, #4]
 8003988:	9303      	str	r3, [sp, #12]
         || !lwprintf_sys_mutex_wait(&lwi->lwobj->mutex))) { /* Cannot acquire mutex */
        return 0;
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */

    while (fmt != NULL && *fmt != '\0') {
 800398a:	e161      	b.n	8003c50 <prv_format+0x2d4>
        if (*fmt != '%') {
            lwi->out_fn(lwi, *fmt); /* Output character */
            ++fmt;
            continue;
        }
        ++fmt;
 800398c:	3301      	adds	r3, #1
 800398e:	9303      	str	r3, [sp, #12]
        memset(&lwi->m, 0x00, sizeof(lwi->m)); /* Reset structure */
 8003990:	2300      	movs	r3, #0
 8003992:	61e3      	str	r3, [r4, #28]
 8003994:	6223      	str	r3, [r4, #32]
 8003996:	6263      	str	r3, [r4, #36]	@ 0x24
 8003998:	62a3      	str	r3, [r4, #40]	@ 0x28
        /* %[flags][width][.precision][length]type */
        /* Go to https://docs.majerle.eu for more info about supported features */

        /* Check [flags] */
        /* It can have multiple flags in any order */
        detected = 1;
 800399a:	2501      	movs	r5, #1
 800399c:	e022      	b.n	80039e4 <prv_format+0x68>
        do {
            switch (*fmt) {
                case '-': lwi->m.flags.left_align = 1; break;
 800399e:	7f23      	ldrb	r3, [r4, #28]
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	7723      	strb	r3, [r4, #28]
                case '0': lwi->m.flags.zero = 1; break;
                case '\'': lwi->m.flags.thousands = 1; break;
                case '#': lwi->m.flags.alt = 1; break;
                default: detected = 0; break;
            }
            if (detected) {
 80039a6:	b1e5      	cbz	r5, 80039e2 <prv_format+0x66>
                ++fmt;
 80039a8:	3201      	adds	r2, #1
 80039aa:	9203      	str	r2, [sp, #12]
 80039ac:	e019      	b.n	80039e2 <prv_format+0x66>
                case '+': lwi->m.flags.plus = 1; break;
 80039ae:	7f23      	ldrb	r3, [r4, #28]
 80039b0:	f043 0302 	orr.w	r3, r3, #2
 80039b4:	7723      	strb	r3, [r4, #28]
 80039b6:	e7f6      	b.n	80039a6 <prv_format+0x2a>
                case ' ': lwi->m.flags.space = 1; break;
 80039b8:	7f23      	ldrb	r3, [r4, #28]
 80039ba:	f043 0304 	orr.w	r3, r3, #4
 80039be:	7723      	strb	r3, [r4, #28]
 80039c0:	e7f1      	b.n	80039a6 <prv_format+0x2a>
                case '0': lwi->m.flags.zero = 1; break;
 80039c2:	7f23      	ldrb	r3, [r4, #28]
 80039c4:	f043 0308 	orr.w	r3, r3, #8
 80039c8:	7723      	strb	r3, [r4, #28]
 80039ca:	e7ec      	b.n	80039a6 <prv_format+0x2a>
                case '\'': lwi->m.flags.thousands = 1; break;
 80039cc:	7f23      	ldrb	r3, [r4, #28]
 80039ce:	f043 0310 	orr.w	r3, r3, #16
 80039d2:	7723      	strb	r3, [r4, #28]
 80039d4:	e7e7      	b.n	80039a6 <prv_format+0x2a>
                case '#': lwi->m.flags.alt = 1; break;
 80039d6:	7f23      	ldrb	r3, [r4, #28]
 80039d8:	f043 0320 	orr.w	r3, r3, #32
 80039dc:	7723      	strb	r3, [r4, #28]
 80039de:	e7e2      	b.n	80039a6 <prv_format+0x2a>
            switch (*fmt) {
 80039e0:	4605      	mov	r5, r0
            }
        } while (detected);
 80039e2:	b34d      	cbz	r5, 8003a38 <prv_format+0xbc>
            switch (*fmt) {
 80039e4:	9a03      	ldr	r2, [sp, #12]
 80039e6:	7813      	ldrb	r3, [r2, #0]
 80039e8:	3b20      	subs	r3, #32
 80039ea:	2b10      	cmp	r3, #16
 80039ec:	d8f8      	bhi.n	80039e0 <prv_format+0x64>
 80039ee:	a101      	add	r1, pc, #4	@ (adr r1, 80039f4 <prv_format+0x78>)
 80039f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039f4:	080039b9 	.word	0x080039b9
 80039f8:	080039e1 	.word	0x080039e1
 80039fc:	080039e1 	.word	0x080039e1
 8003a00:	080039d7 	.word	0x080039d7
 8003a04:	080039e1 	.word	0x080039e1
 8003a08:	080039e1 	.word	0x080039e1
 8003a0c:	080039e1 	.word	0x080039e1
 8003a10:	080039cd 	.word	0x080039cd
 8003a14:	080039e1 	.word	0x080039e1
 8003a18:	080039e1 	.word	0x080039e1
 8003a1c:	080039e1 	.word	0x080039e1
 8003a20:	080039af 	.word	0x080039af
 8003a24:	080039e1 	.word	0x080039e1
 8003a28:	0800399f 	.word	0x0800399f
 8003a2c:	080039e1 	.word	0x080039e1
 8003a30:	080039e1 	.word	0x080039e1
 8003a34:	080039c3 	.word	0x080039c3

        /* Check [width] */
        lwi->m.width = 0;
        if (CHARISNUM(*fmt)) { /* Fixed width check */
 8003a38:	9b03      	ldr	r3, [sp, #12]
 8003a3a:	781a      	ldrb	r2, [r3, #0]
 8003a3c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b09      	cmp	r3, #9
 8003a44:	d921      	bls.n	8003a8a <prv_format+0x10e>
            /* If number is negative, it has been captured from previous step (left align) */
            lwi->m.width = prv_parse_num(&fmt); /* Number from string directly */
        } else if (*fmt == '*') {               /* Or variable check */
 8003a46:	2a2a      	cmp	r2, #42	@ 0x2a
 8003a48:	d024      	beq.n	8003a94 <prv_format+0x118>
            }
            ++fmt;
        }

        /* Check [.precision] */
        lwi->m.precision = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	6223      	str	r3, [r4, #32]
        if (*fmt == '.') { /* Precision flag is detected */
 8003a4e:	9b03      	ldr	r3, [sp, #12]
 8003a50:	781a      	ldrb	r2, [r3, #0]
 8003a52:	2a2e      	cmp	r2, #46	@ 0x2e
 8003a54:	d030      	beq.n	8003ab8 <prv_format+0x13c>
            }
        }

        /* Check [length] */
        detected = 1;
        switch (*fmt) {
 8003a56:	9a03      	ldr	r2, [sp, #12]
 8003a58:	7813      	ldrb	r3, [r2, #0]
 8003a5a:	3b68      	subs	r3, #104	@ 0x68
 8003a5c:	2b12      	cmp	r3, #18
 8003a5e:	d872      	bhi.n	8003b46 <prv_format+0x1ca>
 8003a60:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003a64:	00710047 	.word	0x00710047
 8003a68:	007100e1 	.word	0x007100e1
 8003a6c:	00710059 	.word	0x00710059
 8003a70:	00710071 	.word	0x00710071
 8003a74:	00710071 	.word	0x00710071
 8003a78:	00710071 	.word	0x00710071
 8003a7c:	00710071 	.word	0x00710071
 8003a80:	00710071 	.word	0x00710071
 8003a84:	00710071 	.word	0x00710071
 8003a88:	006b      	.short	0x006b
            lwi->m.width = prv_parse_num(&fmt); /* Number from string directly */
 8003a8a:	a803      	add	r0, sp, #12
 8003a8c:	f7ff f98d 	bl	8002daa <prv_parse_num>
 8003a90:	6260      	str	r0, [r4, #36]	@ 0x24
 8003a92:	e7da      	b.n	8003a4a <prv_format+0xce>
            const int w = (int)va_arg(arg, int);
 8003a94:	9b01      	ldr	r3, [sp, #4]
 8003a96:	1d1a      	adds	r2, r3, #4
 8003a98:	9201      	str	r2, [sp, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
            if (w < 0) {
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	db04      	blt.n	8003aaa <prv_format+0x12e>
                lwi->m.width = w;
 8003aa0:	6263      	str	r3, [r4, #36]	@ 0x24
            ++fmt;
 8003aa2:	9b03      	ldr	r3, [sp, #12]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	9303      	str	r3, [sp, #12]
 8003aa8:	e7cf      	b.n	8003a4a <prv_format+0xce>
                lwi->m.flags.left_align = 1; /* Negative width means left aligned */
 8003aaa:	7f22      	ldrb	r2, [r4, #28]
 8003aac:	f042 0201 	orr.w	r2, r2, #1
 8003ab0:	7722      	strb	r2, [r4, #28]
                lwi->m.width = -w;
 8003ab2:	425b      	negs	r3, r3
 8003ab4:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ab6:	e7f4      	b.n	8003aa2 <prv_format+0x126>
            lwi->m.flags.precision = 1;
 8003ab8:	7f22      	ldrb	r2, [r4, #28]
 8003aba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003abe:	7722      	strb	r2, [r4, #28]
            if (*++fmt == '*') { /* Variable check */
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	9203      	str	r2, [sp, #12]
 8003ac4:	785b      	ldrb	r3, [r3, #1]
 8003ac6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ac8:	d008      	beq.n	8003adc <prv_format+0x160>
            } else if (CHARISNUM(*fmt)) { /* Directly in the string */
 8003aca:	3b30      	subs	r3, #48	@ 0x30
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b09      	cmp	r3, #9
 8003ad0:	d8c1      	bhi.n	8003a56 <prv_format+0xda>
                lwi->m.precision = prv_parse_num(&fmt);
 8003ad2:	a803      	add	r0, sp, #12
 8003ad4:	f7ff f969 	bl	8002daa <prv_parse_num>
 8003ad8:	6220      	str	r0, [r4, #32]
 8003ada:	e7bc      	b.n	8003a56 <prv_format+0xda>
                const int pr = (int)va_arg(arg, int);
 8003adc:	9b01      	ldr	r3, [sp, #4]
 8003ade:	1d1a      	adds	r2, r3, #4
 8003ae0:	9201      	str	r2, [sp, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
                lwi->m.precision = pr > 0 ? pr : 0;
 8003ae4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003ae8:	6223      	str	r3, [r4, #32]
                ++fmt;
 8003aea:	9b03      	ldr	r3, [sp, #12]
 8003aec:	3301      	adds	r3, #1
 8003aee:	9303      	str	r3, [sp, #12]
 8003af0:	e7b1      	b.n	8003a56 <prv_format+0xda>
            case 'h':
                lwi->m.flags.char_short = 1;     /* Single h detected */
 8003af2:	7f63      	ldrb	r3, [r4, #29]
 8003af4:	2101      	movs	r1, #1
 8003af6:	f361 0383 	bfi	r3, r1, #2, #2
 8003afa:	7763      	strb	r3, [r4, #29]
                if (*++fmt == 'h') {             /* Does it follow by another h? */
 8003afc:	1853      	adds	r3, r2, r1
 8003afe:	9303      	str	r3, [sp, #12]
 8003b00:	7853      	ldrb	r3, [r2, #1]
 8003b02:	2b68      	cmp	r3, #104	@ 0x68
 8003b04:	d11f      	bne.n	8003b46 <prv_format+0x1ca>
                    lwi->m.flags.char_short = 2; /* Second h detected */
 8003b06:	7f63      	ldrb	r3, [r4, #29]
 8003b08:	2102      	movs	r1, #2
 8003b0a:	f361 0383 	bfi	r3, r1, #2, #2
 8003b0e:	7763      	strb	r3, [r4, #29]
                    ++fmt;
 8003b10:	440a      	add	r2, r1
 8003b12:	9203      	str	r2, [sp, #12]
 8003b14:	e017      	b.n	8003b46 <prv_format+0x1ca>
                }
                break;
            case 'l':
                lwi->m.flags.longlong = 1;     /* Single l detected */
 8003b16:	7f63      	ldrb	r3, [r4, #29]
 8003b18:	2101      	movs	r1, #1
 8003b1a:	f361 0301 	bfi	r3, r1, #0, #2
 8003b1e:	7763      	strb	r3, [r4, #29]
                if (*++fmt == 'l') {           /* Does it follow by another l? */
 8003b20:	1853      	adds	r3, r2, r1
 8003b22:	9303      	str	r3, [sp, #12]
 8003b24:	7853      	ldrb	r3, [r2, #1]
 8003b26:	2b6c      	cmp	r3, #108	@ 0x6c
 8003b28:	d10d      	bne.n	8003b46 <prv_format+0x1ca>
                    lwi->m.flags.longlong = 2; /* Second l detected */
 8003b2a:	7f63      	ldrb	r3, [r4, #29]
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	f361 0301 	bfi	r3, r1, #0, #2
 8003b32:	7763      	strb	r3, [r4, #29]
                    ++fmt;
 8003b34:	440a      	add	r2, r1
 8003b36:	9203      	str	r2, [sp, #12]
 8003b38:	e005      	b.n	8003b46 <prv_format+0x1ca>
                }
                break;
            case 'L': break;
            case 'z':
                lwi->m.flags.sz_t = 1; /* Size T flag */
 8003b3a:	7f63      	ldrb	r3, [r4, #29]
 8003b3c:	f043 0310 	orr.w	r3, r3, #16
 8003b40:	7763      	strb	r3, [r4, #29]
                ++fmt;
 8003b42:	3201      	adds	r2, #1
 8003b44:	9203      	str	r2, [sp, #12]
            case 't': break;
            default: detected = 0;
        }

        /* Check type */
        lwi->m.type = *fmt + (char)((*fmt >= 'A' && *fmt <= 'Z') ? 0x20 : 0x00);
 8003b46:	9a03      	ldr	r2, [sp, #12]
 8003b48:	7813      	ldrb	r3, [r2, #0]
 8003b4a:	f1a3 0141 	sub.w	r1, r3, #65	@ 0x41
 8003b4e:	b2c9      	uxtb	r1, r1
 8003b50:	2919      	cmp	r1, #25
 8003b52:	d800      	bhi.n	8003b56 <prv_format+0x1da>
 8003b54:	2520      	movs	r5, #32
 8003b56:	442b      	add	r3, r5
 8003b58:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
        if (*fmt >= 'A' && *fmt <= 'Z') {
 8003b5c:	7813      	ldrb	r3, [r2, #0]
 8003b5e:	3b41      	subs	r3, #65	@ 0x41
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b19      	cmp	r3, #25
 8003b64:	d803      	bhi.n	8003b6e <prv_format+0x1f2>
            lwi->m.flags.uc = 1;
 8003b66:	7f63      	ldrb	r3, [r4, #29]
 8003b68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b6c:	7763      	strb	r3, [r4, #29]
        }
        switch (*fmt) {
 8003b6e:	7811      	ldrb	r1, [r2, #0]
 8003b70:	f1a1 0325 	sub.w	r3, r1, #37	@ 0x25
 8003b74:	2b53      	cmp	r3, #83	@ 0x53
 8003b76:	f200 81e7 	bhi.w	8003f48 <prv_format+0x5cc>
 8003b7a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003b7e:	0179      	.short	0x0179
 8003b80:	01e501e5 	.word	0x01e501e5
 8003b84:	01e501e5 	.word	0x01e501e5
 8003b88:	01e501e5 	.word	0x01e501e5
 8003b8c:	01e501e5 	.word	0x01e501e5
 8003b90:	01e501e5 	.word	0x01e501e5
 8003b94:	01e501e5 	.word	0x01e501e5
 8003b98:	01e501e5 	.word	0x01e501e5
 8003b9c:	01e501e5 	.word	0x01e501e5
 8003ba0:	01e501e5 	.word	0x01e501e5
 8003ba4:	01e501e5 	.word	0x01e501e5
 8003ba8:	01e501e5 	.word	0x01e501e5
 8003bac:	01e501e5 	.word	0x01e501e5
 8003bb0:	01e501e5 	.word	0x01e501e5
 8003bb4:	005b01e5 	.word	0x005b01e5
 8003bb8:	01e500b2 	.word	0x01e500b2
 8003bbc:	016501e5 	.word	0x016501e5
 8003bc0:	01650165 	.word	0x01650165
 8003bc4:	01e501e5 	.word	0x01e501e5
 8003bc8:	018301e5 	.word	0x018301e5
 8003bcc:	01e501e5 	.word	0x01e501e5
 8003bd0:	01e501e5 	.word	0x01e501e5
 8003bd4:	01e501e5 	.word	0x01e501e5
 8003bd8:	01e501e5 	.word	0x01e501e5
 8003bdc:	01e501e5 	.word	0x01e501e5
 8003be0:	01e501e5 	.word	0x01e501e5
 8003be4:	01e500b2 	.word	0x01e500b2
 8003be8:	01e501e5 	.word	0x01e501e5
 8003bec:	01e501e5 	.word	0x01e501e5
 8003bf0:	01e501e5 	.word	0x01e501e5
 8003bf4:	005b01e5 	.word	0x005b01e5
 8003bf8:	007f00b2 	.word	0x007f00b2
 8003bfc:	01650087 	.word	0x01650087
 8003c00:	01650165 	.word	0x01650165
 8003c04:	008701e5 	.word	0x008701e5
 8003c08:	018301e5 	.word	0x018301e5
 8003c0c:	01e501e5 	.word	0x01e501e5
 8003c10:	00b20172 	.word	0x00b20172
 8003c14:	01e5014f 	.word	0x01e5014f
 8003c18:	013701e5 	.word	0x013701e5
 8003c1c:	00b201e5 	.word	0x00b201e5
 8003c20:	01e501e5 	.word	0x01e501e5
 8003c24:	00b2      	.short	0x00b2
                lwi->m.flags.umax_t = 1; /* uintmax_t flag */
 8003c26:	7f63      	ldrb	r3, [r4, #29]
 8003c28:	f043 0320 	orr.w	r3, r3, #32
 8003c2c:	7763      	strb	r3, [r4, #29]
                ++fmt;
 8003c2e:	3201      	adds	r2, #1
 8003c30:	9203      	str	r2, [sp, #12]
                break;
 8003c32:	e788      	b.n	8003b46 <prv_format+0x1ca>
            case 'a':
            case 'A':
                /* Double in hexadecimal notation */
                (void)va_arg(arg, double);      /* Read argument to ignore it and move to next one */
 8003c34:	9b01      	ldr	r3, [sp, #4]
 8003c36:	3307      	adds	r3, #7
 8003c38:	f023 0307 	bic.w	r3, r3, #7
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	9301      	str	r3, [sp, #4]
                prv_out_str_raw(lwi, "NaN", 3); /* Print string */
 8003c40:	2203      	movs	r2, #3
 8003c42:	498e      	ldr	r1, [pc, #568]	@ (8003e7c <prv_format+0x500>)
 8003c44:	4620      	mov	r0, r4
 8003c46:	f7ff f98b 	bl	8002f60 <prv_out_str_raw>
                break;
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_BYTE_ARRAY */
            default: lwi->out_fn(lwi, *fmt);
        }
        ++fmt;
 8003c4a:	9b03      	ldr	r3, [sp, #12]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	9303      	str	r3, [sp, #12]
    while (fmt != NULL && *fmt != '\0') {
 8003c50:	9b03      	ldr	r3, [sp, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 817c 	beq.w	8003f50 <prv_format+0x5d4>
 8003c58:	7819      	ldrb	r1, [r3, #0]
 8003c5a:	2900      	cmp	r1, #0
 8003c5c:	f000 8178 	beq.w	8003f50 <prv_format+0x5d4>
        if (lwi->is_print_cancelled) {
 8003c60:	7e20      	ldrb	r0, [r4, #24]
 8003c62:	2800      	cmp	r0, #0
 8003c64:	f040 8174 	bne.w	8003f50 <prv_format+0x5d4>
        if (*fmt != '%') {
 8003c68:	2925      	cmp	r1, #37	@ 0x25
 8003c6a:	f43f ae8f 	beq.w	800398c <prv_format+0x10>
            lwi->out_fn(lwi, *fmt); /* Output character */
 8003c6e:	6963      	ldr	r3, [r4, #20]
 8003c70:	4620      	mov	r0, r4
 8003c72:	4798      	blx	r3
            ++fmt;
 8003c74:	9b03      	ldr	r3, [sp, #12]
 8003c76:	3301      	adds	r3, #1
 8003c78:	9303      	str	r3, [sp, #12]
            continue;
 8003c7a:	e7e9      	b.n	8003c50 <prv_format+0x2d4>
            case 'c': lwi->out_fn(lwi, (char)va_arg(arg, int)); break;
 8003c7c:	6962      	ldr	r2, [r4, #20]
 8003c7e:	9b01      	ldr	r3, [sp, #4]
 8003c80:	1d19      	adds	r1, r3, #4
 8003c82:	9101      	str	r1, [sp, #4]
 8003c84:	7819      	ldrb	r1, [r3, #0]
 8003c86:	4620      	mov	r0, r4
 8003c88:	4790      	blx	r2
 8003c8a:	e7de      	b.n	8003c4a <prv_format+0x2ce>
                lwi->m.base = 10;
 8003c8c:	230a      	movs	r3, #10
 8003c8e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                if (lwi->m.flags.longlong == 0) {
 8003c92:	7f63      	ldrb	r3, [r4, #29]
 8003c94:	f013 0303 	ands.w	r3, r3, #3
 8003c98:	d010      	beq.n	8003cbc <prv_format+0x340>
                } else if (lwi->m.flags.longlong == 1) {
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d017      	beq.n	8003cce <prv_format+0x352>
                } else if (lwi->m.flags.longlong == 2) {
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d1d3      	bne.n	8003c4a <prv_format+0x2ce>
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed long long int));
 8003ca2:	9b01      	ldr	r3, [sp, #4]
 8003ca4:	3307      	adds	r3, #7
 8003ca6:	f023 0307 	bic.w	r3, r3, #7
 8003caa:	f103 0208 	add.w	r2, r3, #8
 8003cae:	9201      	str	r2, [sp, #4]
 8003cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f7ff f9ce 	bl	8003056 <prv_longest_signed_int_to_str>
 8003cba:	e7c6      	b.n	8003c4a <prv_format+0x2ce>
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed int));
 8003cbc:	9b01      	ldr	r3, [sp, #4]
 8003cbe:	1d1a      	adds	r2, r3, #4
 8003cc0:	9201      	str	r2, [sp, #4]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	17d3      	asrs	r3, r2, #31
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f7ff f9c5 	bl	8003056 <prv_longest_signed_int_to_str>
 8003ccc:	e7bd      	b.n	8003c4a <prv_format+0x2ce>
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed long int));
 8003cce:	9b01      	ldr	r3, [sp, #4]
 8003cd0:	1d1a      	adds	r2, r3, #4
 8003cd2:	9201      	str	r2, [sp, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	17db      	asrs	r3, r3, #31
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f7ff f9bb 	bl	8003056 <prv_longest_signed_int_to_str>
 8003ce0:	e7b3      	b.n	8003c4a <prv_format+0x2ce>
                if (*fmt == 'b' || *fmt == 'B') {
 8003ce2:	2942      	cmp	r1, #66	@ 0x42
 8003ce4:	d01a      	beq.n	8003d1c <prv_format+0x3a0>
 8003ce6:	d31c      	bcc.n	8003d22 <prv_format+0x3a6>
 8003ce8:	2978      	cmp	r1, #120	@ 0x78
 8003cea:	d81a      	bhi.n	8003d22 <prv_format+0x3a6>
 8003cec:	2958      	cmp	r1, #88	@ 0x58
 8003cee:	d318      	bcc.n	8003d22 <prv_format+0x3a6>
 8003cf0:	3958      	subs	r1, #88	@ 0x58
 8003cf2:	2920      	cmp	r1, #32
 8003cf4:	d815      	bhi.n	8003d22 <prv_format+0x3a6>
 8003cf6:	e8df f001 	tbb	[pc, r1]
 8003cfa:	1440      	.short	0x1440
 8003cfc:	14141414 	.word	0x14141414
 8003d00:	14141414 	.word	0x14141414
 8003d04:	14141411 	.word	0x14141411
 8003d08:	14141414 	.word	0x14141414
 8003d0c:	14141414 	.word	0x14141414
 8003d10:	14143814 	.word	0x14143814
 8003d14:	3c141414 	.word	0x3c141414
 8003d18:	1414      	.short	0x1414
 8003d1a:	40          	.byte	0x40
 8003d1b:	00          	.byte	0x00
                    lwi->m.base = 2;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                lwi->m.flags.space = 0; /* Space flag has no meaning here */
 8003d22:	7f23      	ldrb	r3, [r4, #28]
 8003d24:	f023 0304 	bic.w	r3, r3, #4
 8003d28:	7723      	strb	r3, [r4, #28]
                } else if (lwi->m.flags.sz_t) {
 8003d2a:	7f63      	ldrb	r3, [r4, #29]
 8003d2c:	f013 0f10 	tst.w	r3, #16
 8003d30:	d127      	bne.n	8003d82 <prv_format+0x406>
                } else if (lwi->m.flags.umax_t) {
 8003d32:	f013 0f20 	tst.w	r3, #32
 8003d36:	d12d      	bne.n	8003d94 <prv_format+0x418>
                } else if (lwi->m.flags.longlong == 0 || lwi->m.base == 2) {
 8003d38:	f013 0303 	ands.w	r3, r3, #3
 8003d3c:	d037      	beq.n	8003dae <prv_format+0x432>
 8003d3e:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8003d42:	2a02      	cmp	r2, #2
 8003d44:	d033      	beq.n	8003dae <prv_format+0x432>
                } else if (lwi->m.flags.longlong == 1) {
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d047      	beq.n	8003dda <prv_format+0x45e>
                } else if (lwi->m.flags.longlong == 2) {
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	f47f af7d 	bne.w	8003c4a <prv_format+0x2ce>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, unsigned long long int));
 8003d50:	9b01      	ldr	r3, [sp, #4]
 8003d52:	3307      	adds	r3, #7
 8003d54:	f023 0307 	bic.w	r3, r3, #7
 8003d58:	f103 0208 	add.w	r2, r3, #8
 8003d5c:	9201      	str	r2, [sp, #4]
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	4620      	mov	r0, r4
 8003d64:	f7ff f91d 	bl	8002fa2 <prv_longest_unsigned_int_to_str>
 8003d68:	e76f      	b.n	8003c4a <prv_format+0x2ce>
                    lwi->m.base = 8;
 8003d6a:	2308      	movs	r3, #8
 8003d6c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8003d70:	e7d7      	b.n	8003d22 <prv_format+0x3a6>
                    lwi->m.base = 10;
 8003d72:	230a      	movs	r3, #10
 8003d74:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8003d78:	e7d3      	b.n	8003d22 <prv_format+0x3a6>
                    lwi->m.base = 16;
 8003d7a:	2310      	movs	r3, #16
 8003d7c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8003d80:	e7cf      	b.n	8003d22 <prv_format+0x3a6>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, size_t));
 8003d82:	9b01      	ldr	r3, [sp, #4]
 8003d84:	1d1a      	adds	r2, r3, #4
 8003d86:	9201      	str	r2, [sp, #4]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f7ff f908 	bl	8002fa2 <prv_longest_unsigned_int_to_str>
 8003d92:	e75a      	b.n	8003c4a <prv_format+0x2ce>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, uintmax_t));
 8003d94:	9b01      	ldr	r3, [sp, #4]
 8003d96:	3307      	adds	r3, #7
 8003d98:	f023 0307 	bic.w	r3, r3, #7
 8003d9c:	f103 0208 	add.w	r2, r3, #8
 8003da0:	9201      	str	r2, [sp, #4]
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	4620      	mov	r0, r4
 8003da8:	f7ff f8fb 	bl	8002fa2 <prv_longest_unsigned_int_to_str>
 8003dac:	e74d      	b.n	8003c4a <prv_format+0x2ce>
                    uint_maxtype_t v = va_arg(arg, unsigned int);
 8003dae:	9b01      	ldr	r3, [sp, #4]
 8003db0:	1d1a      	adds	r2, r3, #4
 8003db2:	9201      	str	r2, [sp, #4]
 8003db4:	681a      	ldr	r2, [r3, #0]
                    switch (lwi->m.flags.char_short) {
 8003db6:	7f63      	ldrb	r3, [r4, #29]
 8003db8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d007      	beq.n	8003dd0 <prv_format+0x454>
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d108      	bne.n	8003dd6 <prv_format+0x45a>
                        case 2: v = (uint_maxtype_t)((unsigned char)v); break;
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	2300      	movs	r3, #0
                    prv_longest_unsigned_int_to_str(lwi, v);
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f7ff f8ea 	bl	8002fa2 <prv_longest_unsigned_int_to_str>
                } else if (lwi->m.flags.longlong == 0 || lwi->m.base == 2) {
 8003dce:	e73c      	b.n	8003c4a <prv_format+0x2ce>
                        case 1: v = (uint_maxtype_t)((unsigned short int)v); break;
 8003dd0:	b292      	uxth	r2, r2
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e7f8      	b.n	8003dc8 <prv_format+0x44c>
                        default: v = (uint_maxtype_t)((unsigned int)v); break;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e7f6      	b.n	8003dc8 <prv_format+0x44c>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, unsigned long int));
 8003dda:	9b01      	ldr	r3, [sp, #4]
 8003ddc:	1d1a      	adds	r2, r3, #4
 8003dde:	9201      	str	r2, [sp, #4]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	2300      	movs	r3, #0
 8003de4:	4620      	mov	r0, r4
 8003de6:	f7ff f8dc 	bl	8002fa2 <prv_longest_unsigned_int_to_str>
 8003dea:	e72e      	b.n	8003c4a <prv_format+0x2ce>
                const char* b = va_arg(arg, const char*);
 8003dec:	9b01      	ldr	r3, [sp, #4]
 8003dee:	1d1a      	adds	r2, r3, #4
 8003df0:	9201      	str	r2, [sp, #4]
 8003df2:	681d      	ldr	r5, [r3, #0]
                if (b == NULL) {
 8003df4:	b12d      	cbz	r5, 8003e02 <prv_format+0x486>
                prv_out_str(lwi, b, prv_strnlen(b, lwi->m.flags.precision ? (size_t)lwi->m.precision : (SIZE_MAX)));
 8003df6:	7f23      	ldrb	r3, [r4, #28]
 8003df8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003dfc:	d003      	beq.n	8003e06 <prv_format+0x48a>
 8003dfe:	6a21      	ldr	r1, [r4, #32]
 8003e00:	e003      	b.n	8003e0a <prv_format+0x48e>
                    b = "(null)";
 8003e02:	4d1f      	ldr	r5, [pc, #124]	@ (8003e80 <prv_format+0x504>)
 8003e04:	e7f7      	b.n	8003df6 <prv_format+0x47a>
                prv_out_str(lwi, b, prv_strnlen(b, lwi->m.flags.precision ? (size_t)lwi->m.precision : (SIZE_MAX)));
 8003e06:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	f7ff fdac 	bl	8003968 <prv_strnlen>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4629      	mov	r1, r5
 8003e14:	4620      	mov	r0, r4
 8003e16:	f7ff f8b2 	bl	8002f7e <prv_out_str>
                break;
 8003e1a:	e716      	b.n	8003c4a <prv_format+0x2ce>
                lwi->m.base = 16;      /* Go to hex format */
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                lwi->m.flags.uc = 0;   /* Uppercase characters */
 8003e22:	7f63      	ldrb	r3, [r4, #29]
 8003e24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e28:	7763      	strb	r3, [r4, #29]
                lwi->m.flags.zero = 1; /* Zero padding */
 8003e2a:	7f23      	ldrb	r3, [r4, #28]
 8003e2c:	f043 0308 	orr.w	r3, r3, #8
 8003e30:	7723      	strb	r3, [r4, #28]
                lwi->m.width =
 8003e32:	2308      	movs	r3, #8
 8003e34:	6263      	str	r3, [r4, #36]	@ 0x24
                prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, uintptr_t));
 8003e36:	9b01      	ldr	r3, [sp, #4]
 8003e38:	1d1a      	adds	r2, r3, #4
 8003e3a:	9201      	str	r2, [sp, #4]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	4620      	mov	r0, r4
 8003e42:	f7ff f8ae 	bl	8002fa2 <prv_longest_unsigned_int_to_str>
                break;
 8003e46:	e700      	b.n	8003c4a <prv_format+0x2ce>
                prv_double_to_str(lwi, (double)va_arg(arg, double));
 8003e48:	9b01      	ldr	r3, [sp, #4]
 8003e4a:	3307      	adds	r3, #7
 8003e4c:	f023 0307 	bic.w	r3, r3, #7
 8003e50:	f103 0208 	add.w	r2, r3, #8
 8003e54:	9201      	str	r2, [sp, #4]
 8003e56:	ed93 0b00 	vldr	d0, [r3]
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	f7ff fa80 	bl	8003360 <prv_double_to_str>
                break;
 8003e60:	e6f3      	b.n	8003c4a <prv_format+0x2ce>
                int* ptr = (void*)va_arg(arg, int*);
 8003e62:	9b01      	ldr	r3, [sp, #4]
 8003e64:	1d1a      	adds	r2, r3, #4
 8003e66:	9201      	str	r2, [sp, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
                *ptr = (int)lwi->n_len; /* Write current length */
 8003e6a:	6922      	ldr	r2, [r4, #16]
 8003e6c:	601a      	str	r2, [r3, #0]
                break;
 8003e6e:	e6ec      	b.n	8003c4a <prv_format+0x2ce>
            case '%': lwi->out_fn(lwi, '%'); break;
 8003e70:	6963      	ldr	r3, [r4, #20]
 8003e72:	2125      	movs	r1, #37	@ 0x25
 8003e74:	4620      	mov	r0, r4
 8003e76:	4798      	blx	r3
 8003e78:	e6e7      	b.n	8003c4a <prv_format+0x2ce>
 8003e7a:	bf00      	nop
 8003e7c:	080054e8 	.word	0x080054e8
 8003e80:	080054e0 	.word	0x080054e0
                unsigned char* ptr =
 8003e84:	9b01      	ldr	r3, [sp, #4]
 8003e86:	1d1a      	adds	r2, r3, #4
 8003e88:	9201      	str	r2, [sp, #4]
 8003e8a:	681d      	ldr	r5, [r3, #0]
                int len = lwi->m.width, full_width;
 8003e8c:	6a67      	ldr	r7, [r4, #36]	@ 0x24
                uint8_t is_space = lwi->m.flags.space == 1;
 8003e8e:	7f23      	ldrb	r3, [r4, #28]
 8003e90:	f003 0804 	and.w	r8, r3, #4
 8003e94:	f3c3 0380 	ubfx	r3, r3, #2, #1
                if (ptr == NULL || len == 0) {
 8003e98:	2d00      	cmp	r5, #0
 8003e9a:	f43f aed6 	beq.w	8003c4a <prv_format+0x2ce>
 8003e9e:	2f00      	cmp	r7, #0
 8003ea0:	f43f aed3 	beq.w	8003c4a <prv_format+0x2ce>
                lwi->m.flags.zero = 1;  /* Prepend with zeros if necessary */
 8003ea4:	7f22      	ldrb	r2, [r4, #28]
 8003ea6:	f042 0208 	orr.w	r2, r2, #8
 8003eaa:	7722      	strb	r2, [r4, #28]
                lwi->m.width = 0;       /* No width parameter */
 8003eac:	2100      	movs	r1, #0
 8003eae:	6261      	str	r1, [r4, #36]	@ 0x24
                lwi->m.base = 16;       /* Hex format */
 8003eb0:	2210      	movs	r2, #16
 8003eb2:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
                lwi->m.flags.space = 0; /* Delete any flag for space */
 8003eb6:	7f22      	ldrb	r2, [r4, #28]
 8003eb8:	f361 0282 	bfi	r2, r1, #2, #1
 8003ebc:	7722      	strb	r2, [r4, #28]
                full_width = len * (2 + (int)is_space);
 8003ebe:	3302      	adds	r3, #2
 8003ec0:	fb07 f103 	mul.w	r1, r7, r3
                if (is_space && full_width > 0) {
 8003ec4:	f1b8 0f00 	cmp.w	r8, #0
 8003ec8:	d002      	beq.n	8003ed0 <prv_format+0x554>
 8003eca:	2900      	cmp	r1, #0
 8003ecc:	dd00      	ble.n	8003ed0 <prv_format+0x554>
                    --full_width; /* Remove space after last number */
 8003ece:	3901      	subs	r1, #1
                prv_out_str_before(lwi, full_width);
 8003ed0:	4689      	mov	r9, r1
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f7fe ff7e 	bl	8002dd4 <prv_out_str_before>
                for (int i = 0; i < len; ++i, ++ptr) {
 8003ed8:	2600      	movs	r6, #0
 8003eda:	e021      	b.n	8003f20 <prv_format+0x5a4>
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 8003edc:	2330      	movs	r3, #48	@ 0x30
 8003ede:	4419      	add	r1, r3
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	4790      	blx	r2
                    d = *ptr & 0x0F; /* Print LSB */
 8003ee4:	782b      	ldrb	r3, [r5, #0]
 8003ee6:	f003 030f 	and.w	r3, r3, #15
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 8003eea:	6962      	ldr	r2, [r4, #20]
 8003eec:	2b09      	cmp	r3, #9
 8003eee:	d907      	bls.n	8003f00 <prv_format+0x584>
 8003ef0:	7f61      	ldrb	r1, [r4, #29]
 8003ef2:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8003ef6:	d020      	beq.n	8003f3a <prv_format+0x5be>
 8003ef8:	2137      	movs	r1, #55	@ 0x37
 8003efa:	e002      	b.n	8003f02 <prv_format+0x586>
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 8003efc:	2357      	movs	r3, #87	@ 0x57
 8003efe:	e7ee      	b.n	8003ede <prv_format+0x562>
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 8003f00:	2130      	movs	r1, #48	@ 0x30
 8003f02:	4419      	add	r1, r3
 8003f04:	4620      	mov	r0, r4
 8003f06:	4790      	blx	r2
                    if (is_space && i < (len - 1)) {
 8003f08:	f1b8 0f00 	cmp.w	r8, #0
 8003f0c:	d006      	beq.n	8003f1c <prv_format+0x5a0>
 8003f0e:	1e7b      	subs	r3, r7, #1
 8003f10:	42b3      	cmp	r3, r6
 8003f12:	dd03      	ble.n	8003f1c <prv_format+0x5a0>
                        lwi->out_fn(lwi, ' '); /* Generate space between numbers */
 8003f14:	6963      	ldr	r3, [r4, #20]
 8003f16:	2120      	movs	r1, #32
 8003f18:	4620      	mov	r0, r4
 8003f1a:	4798      	blx	r3
                for (int i = 0; i < len; ++i, ++ptr) {
 8003f1c:	3601      	adds	r6, #1
 8003f1e:	3501      	adds	r5, #1
 8003f20:	42be      	cmp	r6, r7
 8003f22:	da0c      	bge.n	8003f3e <prv_format+0x5c2>
                    d = (*ptr >> 0x04) & 0x0F; /* Print MSB */
 8003f24:	782b      	ldrb	r3, [r5, #0]
 8003f26:	0919      	lsrs	r1, r3, #4
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 8003f28:	6962      	ldr	r2, [r4, #20]
 8003f2a:	2b9f      	cmp	r3, #159	@ 0x9f
 8003f2c:	d9d6      	bls.n	8003edc <prv_format+0x560>
 8003f2e:	7f63      	ldrb	r3, [r4, #29]
 8003f30:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003f34:	d0e2      	beq.n	8003efc <prv_format+0x580>
 8003f36:	2337      	movs	r3, #55	@ 0x37
 8003f38:	e7d1      	b.n	8003ede <prv_format+0x562>
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 8003f3a:	2157      	movs	r1, #87	@ 0x57
 8003f3c:	e7e1      	b.n	8003f02 <prv_format+0x586>
                prv_out_str_after(lwi, full_width);
 8003f3e:	4649      	mov	r1, r9
 8003f40:	4620      	mov	r0, r4
 8003f42:	f7fe fffb 	bl	8002f3c <prv_out_str_after>
                break;
 8003f46:	e680      	b.n	8003c4a <prv_format+0x2ce>
            default: lwi->out_fn(lwi, *fmt);
 8003f48:	6963      	ldr	r3, [r4, #20]
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	4798      	blx	r3
 8003f4e:	e67c      	b.n	8003c4a <prv_format+0x2ce>
    }
    lwi->out_fn(lwi, '\0'); /* Output last zero number */
 8003f50:	6963      	ldr	r3, [r4, #20]
 8003f52:	2100      	movs	r1, #0
 8003f54:	4620      	mov	r0, r4
 8003f56:	4798      	blx	r3
    if (IS_PRINT_MODE(lwi)) { /* Mutex only for print operation */
        lwprintf_sys_mutex_release(&lwi->lwobj->mutex);
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */
    return 1;
}
 8003f58:	2001      	movs	r0, #1
 8003f5a:	b005      	add	sp, #20
 8003f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003f60 <lwprintf_init_ex>:
 *                      are thread safe. Library utilizes stack-based variables
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwprintf_init_ex(lwprintf_t* lwobj, lwprintf_output_fn out_fn) {
    LWPRINTF_GET_LWOBJ(lwobj)->out_fn = out_fn;
 8003f60:	4603      	mov	r3, r0
 8003f62:	b110      	cbz	r0, 8003f6a <lwprintf_init_ex+0xa>
 8003f64:	6019      	str	r1, [r3, #0]
            || !lwprintf_sys_mutex_create(&LWPRINTF_GET_LWOBJ(lwobj)->mutex))) {
        return 0;
    }
#endif /* LWPRINTF_CFG_OS */
    return 1;
}
 8003f66:	2001      	movs	r0, #1
 8003f68:	4770      	bx	lr
    LWPRINTF_GET_LWOBJ(lwobj)->out_fn = out_fn;
 8003f6a:	4b01      	ldr	r3, [pc, #4]	@ (8003f70 <lwprintf_init_ex+0x10>)
 8003f6c:	e7fa      	b.n	8003f64 <lwprintf_init_ex+0x4>
 8003f6e:	bf00      	nop
 8003f70:	2000016c 	.word	0x2000016c

08003f74 <lwprintf_vprintf_ex>:
 *                      `va_list` is a special type defined in `<cstdarg>`.
 * \return          The number of characters that would have been written if `n` had been sufficiently large,
 *                      not counting the terminating null character.
 */
int
lwprintf_vprintf_ex(lwprintf_t* const lwobj, const char* format, va_list arg) {
 8003f74:	b570      	push	{r4, r5, r6, lr}
 8003f76:	b08c      	sub	sp, #48	@ 0x30
 8003f78:	4604      	mov	r4, r0
 8003f7a:	460d      	mov	r5, r1
 8003f7c:	4616      	mov	r6, r2
    lwprintf_int_t fobj = {
 8003f7e:	222c      	movs	r2, #44	@ 0x2c
 8003f80:	2100      	movs	r1, #0
 8003f82:	a801      	add	r0, sp, #4
 8003f84:	f000 fb3c 	bl	8004600 <memset>
        .lwobj = LWPRINTF_GET_LWOBJ(lwobj),
 8003f88:	b16c      	cbz	r4, 8003fa6 <lwprintf_vprintf_ex+0x32>
    lwprintf_int_t fobj = {
 8003f8a:	9401      	str	r4, [sp, #4]
 8003f8c:	9502      	str	r5, [sp, #8]
 8003f8e:	4b09      	ldr	r3, [pc, #36]	@ (8003fb4 <lwprintf_vprintf_ex+0x40>)
 8003f90:	9306      	str	r3, [sp, #24]
        .fmt = format,
        .buff = NULL,
        .buff_size = 0,
    };
    /* For direct print, output function must be set by user */
    if (fobj.lwobj->out_fn == NULL) {
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	b15b      	cbz	r3, 8003fae <lwprintf_vprintf_ex+0x3a>
        return 0;
    }
    if (prv_format(&fobj, arg)) {
 8003f96:	4631      	mov	r1, r6
 8003f98:	a801      	add	r0, sp, #4
 8003f9a:	f7ff fcef 	bl	800397c <prv_format>
 8003f9e:	b920      	cbnz	r0, 8003faa <lwprintf_vprintf_ex+0x36>
        return (int)fobj.n_len;
    }
    return 0;
 8003fa0:	2000      	movs	r0, #0
}
 8003fa2:	b00c      	add	sp, #48	@ 0x30
 8003fa4:	bd70      	pop	{r4, r5, r6, pc}
        .lwobj = LWPRINTF_GET_LWOBJ(lwobj),
 8003fa6:	4c04      	ldr	r4, [pc, #16]	@ (8003fb8 <lwprintf_vprintf_ex+0x44>)
 8003fa8:	e7ef      	b.n	8003f8a <lwprintf_vprintf_ex+0x16>
        return (int)fobj.n_len;
 8003faa:	9805      	ldr	r0, [sp, #20]
 8003fac:	e7f9      	b.n	8003fa2 <lwprintf_vprintf_ex+0x2e>
        return 0;
 8003fae:	2000      	movs	r0, #0
 8003fb0:	e7f7      	b.n	8003fa2 <lwprintf_vprintf_ex+0x2e>
 8003fb2:	bf00      	nop
 8003fb4:	08002d77 	.word	0x08002d77
 8003fb8:	2000016c 	.word	0x2000016c

08003fbc <ITM_SendChar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003fbc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003fc0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8003fc4:	f013 0f01 	tst.w	r3, #1
 8003fc8:	d011      	beq.n	8003fee <ITM_SendChar+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003fca:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003fce:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003fd2:	f013 0f01 	tst.w	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <ITM_SendChar+0x20>
 8003fd8:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8003fda:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003fdc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f9      	beq.n	8003fda <ITM_SendChar+0x1e>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003fe6:	b2c3      	uxtb	r3, r0
 8003fe8:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8003fec:	7013      	strb	r3, [r2, #0]
  }
  return (ch);
}
 8003fee:	4770      	bx	lr

08003ff0 <stm32_log_out>:
    }
    return;
}


__weak int stm32_log_out(int ch, lwprintf_t* p) {
 8003ff0:	b510      	push	{r4, lr}
 8003ff2:	4604      	mov	r4, r0

    uint8_t c = (uint8_t)ch;

    /* Don't print zero */
    if (c == '\0') {
 8003ff4:	f010 0fff 	tst.w	r0, #255	@ 0xff
 8003ff8:	d101      	bne.n	8003ffe <stm32_log_out+0xe>
        return ch;
    }
    ITM_SendChar(ch);
    return ch;
}
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	bd10      	pop	{r4, pc}
    ITM_SendChar(ch);
 8003ffe:	f7ff ffdd 	bl	8003fbc <ITM_SendChar>
    return ch;
 8004002:	e7fa      	b.n	8003ffa <stm32_log_out+0xa>

08004004 <stm32_log_init>:
{
 8004004:	b508      	push	{r3, lr}
	if(out_fn == NULL)
 8004006:	b128      	cbz	r0, 8004014 <stm32_log_init+0x10>
 8004008:	4601      	mov	r1, r0
		lwprintf_init_ex(&debug, out_fn);
 800400a:	4805      	ldr	r0, [pc, #20]	@ (8004020 <stm32_log_init+0x1c>)
 800400c:	f7ff ffa8 	bl	8003f60 <lwprintf_init_ex>
}
 8004010:	2000      	movs	r0, #0
 8004012:	bd08      	pop	{r3, pc}
		lwprintf_init_ex(&debug, stm32_log_out);
 8004014:	4903      	ldr	r1, [pc, #12]	@ (8004024 <stm32_log_init+0x20>)
 8004016:	4802      	ldr	r0, [pc, #8]	@ (8004020 <stm32_log_init+0x1c>)
 8004018:	f7ff ffa2 	bl	8003f60 <lwprintf_init_ex>
 800401c:	e7f8      	b.n	8004010 <stm32_log_init+0xc>
 800401e:	bf00      	nop
 8004020:	20000174 	.word	0x20000174
 8004024:	08003ff1 	.word	0x08003ff1

08004028 <stm32_log_timestamp>:
__attribute__((weak)) uint32_t stm32_log_timestamp(void) {
 8004028:	b508      	push	{r3, lr}
    return HAL_GetTick() ;
 800402a:	f7fd f9d5 	bl	80013d8 <HAL_GetTick>
}
 800402e:	bd08      	pop	{r3, pc}

08004030 <stm32_log_write>:
    if (level <= STM32_LOG_LEVEL) {
 8004030:	2804      	cmp	r0, #4
 8004032:	dd00      	ble.n	8004036 <stm32_log_write+0x6>
 8004034:	4770      	bx	lr
void stm32_log_write(int level, const char* tag, const char* format, ...) {
 8004036:	b40c      	push	{r2, r3}
 8004038:	b500      	push	{lr}
 800403a:	b083      	sub	sp, #12
        va_start(args, format);
 800403c:	aa05      	add	r2, sp, #20
 800403e:	9201      	str	r2, [sp, #4]
        lwprintf_vprintf_ex(&debug, format, args);
 8004040:	9904      	ldr	r1, [sp, #16]
 8004042:	4804      	ldr	r0, [pc, #16]	@ (8004054 <stm32_log_write+0x24>)
 8004044:	f7ff ff96 	bl	8003f74 <lwprintf_vprintf_ex>
}
 8004048:	b003      	add	sp, #12
 800404a:	f85d eb04 	ldr.w	lr, [sp], #4
 800404e:	b002      	add	sp, #8
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	20000174 	.word	0x20000174

08004058 <malloc>:
 8004058:	4b02      	ldr	r3, [pc, #8]	@ (8004064 <malloc+0xc>)
 800405a:	4601      	mov	r1, r0
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	f000 b82d 	b.w	80040bc <_malloc_r>
 8004062:	bf00      	nop
 8004064:	20000038 	.word	0x20000038

08004068 <free>:
 8004068:	4b02      	ldr	r3, [pc, #8]	@ (8004074 <free+0xc>)
 800406a:	4601      	mov	r1, r0
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	f000 bb61 	b.w	8004734 <_free_r>
 8004072:	bf00      	nop
 8004074:	20000038 	.word	0x20000038

08004078 <sbrk_aligned>:
 8004078:	b570      	push	{r4, r5, r6, lr}
 800407a:	4e0f      	ldr	r6, [pc, #60]	@ (80040b8 <sbrk_aligned+0x40>)
 800407c:	460c      	mov	r4, r1
 800407e:	6831      	ldr	r1, [r6, #0]
 8004080:	4605      	mov	r5, r0
 8004082:	b911      	cbnz	r1, 800408a <sbrk_aligned+0x12>
 8004084:	f000 faf8 	bl	8004678 <_sbrk_r>
 8004088:	6030      	str	r0, [r6, #0]
 800408a:	4621      	mov	r1, r4
 800408c:	4628      	mov	r0, r5
 800408e:	f000 faf3 	bl	8004678 <_sbrk_r>
 8004092:	1c43      	adds	r3, r0, #1
 8004094:	d103      	bne.n	800409e <sbrk_aligned+0x26>
 8004096:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800409a:	4620      	mov	r0, r4
 800409c:	bd70      	pop	{r4, r5, r6, pc}
 800409e:	1cc4      	adds	r4, r0, #3
 80040a0:	f024 0403 	bic.w	r4, r4, #3
 80040a4:	42a0      	cmp	r0, r4
 80040a6:	d0f8      	beq.n	800409a <sbrk_aligned+0x22>
 80040a8:	1a21      	subs	r1, r4, r0
 80040aa:	4628      	mov	r0, r5
 80040ac:	f000 fae4 	bl	8004678 <_sbrk_r>
 80040b0:	3001      	adds	r0, #1
 80040b2:	d1f2      	bne.n	800409a <sbrk_aligned+0x22>
 80040b4:	e7ef      	b.n	8004096 <sbrk_aligned+0x1e>
 80040b6:	bf00      	nop
 80040b8:	2000017c 	.word	0x2000017c

080040bc <_malloc_r>:
 80040bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040c0:	1ccd      	adds	r5, r1, #3
 80040c2:	f025 0503 	bic.w	r5, r5, #3
 80040c6:	3508      	adds	r5, #8
 80040c8:	2d0c      	cmp	r5, #12
 80040ca:	bf38      	it	cc
 80040cc:	250c      	movcc	r5, #12
 80040ce:	2d00      	cmp	r5, #0
 80040d0:	4606      	mov	r6, r0
 80040d2:	db01      	blt.n	80040d8 <_malloc_r+0x1c>
 80040d4:	42a9      	cmp	r1, r5
 80040d6:	d904      	bls.n	80040e2 <_malloc_r+0x26>
 80040d8:	230c      	movs	r3, #12
 80040da:	6033      	str	r3, [r6, #0]
 80040dc:	2000      	movs	r0, #0
 80040de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80041b8 <_malloc_r+0xfc>
 80040e6:	f000 f869 	bl	80041bc <__malloc_lock>
 80040ea:	f8d8 3000 	ldr.w	r3, [r8]
 80040ee:	461c      	mov	r4, r3
 80040f0:	bb44      	cbnz	r4, 8004144 <_malloc_r+0x88>
 80040f2:	4629      	mov	r1, r5
 80040f4:	4630      	mov	r0, r6
 80040f6:	f7ff ffbf 	bl	8004078 <sbrk_aligned>
 80040fa:	1c43      	adds	r3, r0, #1
 80040fc:	4604      	mov	r4, r0
 80040fe:	d158      	bne.n	80041b2 <_malloc_r+0xf6>
 8004100:	f8d8 4000 	ldr.w	r4, [r8]
 8004104:	4627      	mov	r7, r4
 8004106:	2f00      	cmp	r7, #0
 8004108:	d143      	bne.n	8004192 <_malloc_r+0xd6>
 800410a:	2c00      	cmp	r4, #0
 800410c:	d04b      	beq.n	80041a6 <_malloc_r+0xea>
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	4639      	mov	r1, r7
 8004112:	4630      	mov	r0, r6
 8004114:	eb04 0903 	add.w	r9, r4, r3
 8004118:	f000 faae 	bl	8004678 <_sbrk_r>
 800411c:	4581      	cmp	r9, r0
 800411e:	d142      	bne.n	80041a6 <_malloc_r+0xea>
 8004120:	6821      	ldr	r1, [r4, #0]
 8004122:	1a6d      	subs	r5, r5, r1
 8004124:	4629      	mov	r1, r5
 8004126:	4630      	mov	r0, r6
 8004128:	f7ff ffa6 	bl	8004078 <sbrk_aligned>
 800412c:	3001      	adds	r0, #1
 800412e:	d03a      	beq.n	80041a6 <_malloc_r+0xea>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	442b      	add	r3, r5
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	f8d8 3000 	ldr.w	r3, [r8]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	bb62      	cbnz	r2, 8004198 <_malloc_r+0xdc>
 800413e:	f8c8 7000 	str.w	r7, [r8]
 8004142:	e00f      	b.n	8004164 <_malloc_r+0xa8>
 8004144:	6822      	ldr	r2, [r4, #0]
 8004146:	1b52      	subs	r2, r2, r5
 8004148:	d420      	bmi.n	800418c <_malloc_r+0xd0>
 800414a:	2a0b      	cmp	r2, #11
 800414c:	d917      	bls.n	800417e <_malloc_r+0xc2>
 800414e:	1961      	adds	r1, r4, r5
 8004150:	42a3      	cmp	r3, r4
 8004152:	6025      	str	r5, [r4, #0]
 8004154:	bf18      	it	ne
 8004156:	6059      	strne	r1, [r3, #4]
 8004158:	6863      	ldr	r3, [r4, #4]
 800415a:	bf08      	it	eq
 800415c:	f8c8 1000 	streq.w	r1, [r8]
 8004160:	5162      	str	r2, [r4, r5]
 8004162:	604b      	str	r3, [r1, #4]
 8004164:	4630      	mov	r0, r6
 8004166:	f000 f82f 	bl	80041c8 <__malloc_unlock>
 800416a:	f104 000b 	add.w	r0, r4, #11
 800416e:	1d23      	adds	r3, r4, #4
 8004170:	f020 0007 	bic.w	r0, r0, #7
 8004174:	1ac2      	subs	r2, r0, r3
 8004176:	bf1c      	itt	ne
 8004178:	1a1b      	subne	r3, r3, r0
 800417a:	50a3      	strne	r3, [r4, r2]
 800417c:	e7af      	b.n	80040de <_malloc_r+0x22>
 800417e:	6862      	ldr	r2, [r4, #4]
 8004180:	42a3      	cmp	r3, r4
 8004182:	bf0c      	ite	eq
 8004184:	f8c8 2000 	streq.w	r2, [r8]
 8004188:	605a      	strne	r2, [r3, #4]
 800418a:	e7eb      	b.n	8004164 <_malloc_r+0xa8>
 800418c:	4623      	mov	r3, r4
 800418e:	6864      	ldr	r4, [r4, #4]
 8004190:	e7ae      	b.n	80040f0 <_malloc_r+0x34>
 8004192:	463c      	mov	r4, r7
 8004194:	687f      	ldr	r7, [r7, #4]
 8004196:	e7b6      	b.n	8004106 <_malloc_r+0x4a>
 8004198:	461a      	mov	r2, r3
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	42a3      	cmp	r3, r4
 800419e:	d1fb      	bne.n	8004198 <_malloc_r+0xdc>
 80041a0:	2300      	movs	r3, #0
 80041a2:	6053      	str	r3, [r2, #4]
 80041a4:	e7de      	b.n	8004164 <_malloc_r+0xa8>
 80041a6:	230c      	movs	r3, #12
 80041a8:	6033      	str	r3, [r6, #0]
 80041aa:	4630      	mov	r0, r6
 80041ac:	f000 f80c 	bl	80041c8 <__malloc_unlock>
 80041b0:	e794      	b.n	80040dc <_malloc_r+0x20>
 80041b2:	6005      	str	r5, [r0, #0]
 80041b4:	e7d6      	b.n	8004164 <_malloc_r+0xa8>
 80041b6:	bf00      	nop
 80041b8:	20000180 	.word	0x20000180

080041bc <__malloc_lock>:
 80041bc:	4801      	ldr	r0, [pc, #4]	@ (80041c4 <__malloc_lock+0x8>)
 80041be:	f000 baa8 	b.w	8004712 <__retarget_lock_acquire_recursive>
 80041c2:	bf00      	nop
 80041c4:	200002c4 	.word	0x200002c4

080041c8 <__malloc_unlock>:
 80041c8:	4801      	ldr	r0, [pc, #4]	@ (80041d0 <__malloc_unlock+0x8>)
 80041ca:	f000 baa3 	b.w	8004714 <__retarget_lock_release_recursive>
 80041ce:	bf00      	nop
 80041d0:	200002c4 	.word	0x200002c4

080041d4 <std>:
 80041d4:	2300      	movs	r3, #0
 80041d6:	b510      	push	{r4, lr}
 80041d8:	4604      	mov	r4, r0
 80041da:	e9c0 3300 	strd	r3, r3, [r0]
 80041de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041e2:	6083      	str	r3, [r0, #8]
 80041e4:	8181      	strh	r1, [r0, #12]
 80041e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80041e8:	81c2      	strh	r2, [r0, #14]
 80041ea:	6183      	str	r3, [r0, #24]
 80041ec:	4619      	mov	r1, r3
 80041ee:	2208      	movs	r2, #8
 80041f0:	305c      	adds	r0, #92	@ 0x5c
 80041f2:	f000 fa05 	bl	8004600 <memset>
 80041f6:	4b0d      	ldr	r3, [pc, #52]	@ (800422c <std+0x58>)
 80041f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80041fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004230 <std+0x5c>)
 80041fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004234 <std+0x60>)
 8004200:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004202:	4b0d      	ldr	r3, [pc, #52]	@ (8004238 <std+0x64>)
 8004204:	6323      	str	r3, [r4, #48]	@ 0x30
 8004206:	4b0d      	ldr	r3, [pc, #52]	@ (800423c <std+0x68>)
 8004208:	6224      	str	r4, [r4, #32]
 800420a:	429c      	cmp	r4, r3
 800420c:	d006      	beq.n	800421c <std+0x48>
 800420e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004212:	4294      	cmp	r4, r2
 8004214:	d002      	beq.n	800421c <std+0x48>
 8004216:	33d0      	adds	r3, #208	@ 0xd0
 8004218:	429c      	cmp	r4, r3
 800421a:	d105      	bne.n	8004228 <std+0x54>
 800421c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004224:	f000 ba74 	b.w	8004710 <__retarget_lock_init_recursive>
 8004228:	bd10      	pop	{r4, pc}
 800422a:	bf00      	nop
 800422c:	08004431 	.word	0x08004431
 8004230:	08004453 	.word	0x08004453
 8004234:	0800448b 	.word	0x0800448b
 8004238:	080044af 	.word	0x080044af
 800423c:	20000184 	.word	0x20000184

08004240 <stdio_exit_handler>:
 8004240:	4a02      	ldr	r2, [pc, #8]	@ (800424c <stdio_exit_handler+0xc>)
 8004242:	4903      	ldr	r1, [pc, #12]	@ (8004250 <stdio_exit_handler+0x10>)
 8004244:	4803      	ldr	r0, [pc, #12]	@ (8004254 <stdio_exit_handler+0x14>)
 8004246:	f000 b87b 	b.w	8004340 <_fwalk_sglue>
 800424a:	bf00      	nop
 800424c:	2000002c 	.word	0x2000002c
 8004250:	08004e6d 	.word	0x08004e6d
 8004254:	2000003c 	.word	0x2000003c

08004258 <cleanup_stdio>:
 8004258:	6841      	ldr	r1, [r0, #4]
 800425a:	4b0c      	ldr	r3, [pc, #48]	@ (800428c <cleanup_stdio+0x34>)
 800425c:	4299      	cmp	r1, r3
 800425e:	b510      	push	{r4, lr}
 8004260:	4604      	mov	r4, r0
 8004262:	d001      	beq.n	8004268 <cleanup_stdio+0x10>
 8004264:	f000 fe02 	bl	8004e6c <_fflush_r>
 8004268:	68a1      	ldr	r1, [r4, #8]
 800426a:	4b09      	ldr	r3, [pc, #36]	@ (8004290 <cleanup_stdio+0x38>)
 800426c:	4299      	cmp	r1, r3
 800426e:	d002      	beq.n	8004276 <cleanup_stdio+0x1e>
 8004270:	4620      	mov	r0, r4
 8004272:	f000 fdfb 	bl	8004e6c <_fflush_r>
 8004276:	68e1      	ldr	r1, [r4, #12]
 8004278:	4b06      	ldr	r3, [pc, #24]	@ (8004294 <cleanup_stdio+0x3c>)
 800427a:	4299      	cmp	r1, r3
 800427c:	d004      	beq.n	8004288 <cleanup_stdio+0x30>
 800427e:	4620      	mov	r0, r4
 8004280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004284:	f000 bdf2 	b.w	8004e6c <_fflush_r>
 8004288:	bd10      	pop	{r4, pc}
 800428a:	bf00      	nop
 800428c:	20000184 	.word	0x20000184
 8004290:	200001ec 	.word	0x200001ec
 8004294:	20000254 	.word	0x20000254

08004298 <global_stdio_init.part.0>:
 8004298:	b510      	push	{r4, lr}
 800429a:	4b0b      	ldr	r3, [pc, #44]	@ (80042c8 <global_stdio_init.part.0+0x30>)
 800429c:	4c0b      	ldr	r4, [pc, #44]	@ (80042cc <global_stdio_init.part.0+0x34>)
 800429e:	4a0c      	ldr	r2, [pc, #48]	@ (80042d0 <global_stdio_init.part.0+0x38>)
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	4620      	mov	r0, r4
 80042a4:	2200      	movs	r2, #0
 80042a6:	2104      	movs	r1, #4
 80042a8:	f7ff ff94 	bl	80041d4 <std>
 80042ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80042b0:	2201      	movs	r2, #1
 80042b2:	2109      	movs	r1, #9
 80042b4:	f7ff ff8e 	bl	80041d4 <std>
 80042b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80042bc:	2202      	movs	r2, #2
 80042be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042c2:	2112      	movs	r1, #18
 80042c4:	f7ff bf86 	b.w	80041d4 <std>
 80042c8:	200002bc 	.word	0x200002bc
 80042cc:	20000184 	.word	0x20000184
 80042d0:	08004241 	.word	0x08004241

080042d4 <__sfp_lock_acquire>:
 80042d4:	4801      	ldr	r0, [pc, #4]	@ (80042dc <__sfp_lock_acquire+0x8>)
 80042d6:	f000 ba1c 	b.w	8004712 <__retarget_lock_acquire_recursive>
 80042da:	bf00      	nop
 80042dc:	200002c5 	.word	0x200002c5

080042e0 <__sfp_lock_release>:
 80042e0:	4801      	ldr	r0, [pc, #4]	@ (80042e8 <__sfp_lock_release+0x8>)
 80042e2:	f000 ba17 	b.w	8004714 <__retarget_lock_release_recursive>
 80042e6:	bf00      	nop
 80042e8:	200002c5 	.word	0x200002c5

080042ec <__sinit>:
 80042ec:	b510      	push	{r4, lr}
 80042ee:	4604      	mov	r4, r0
 80042f0:	f7ff fff0 	bl	80042d4 <__sfp_lock_acquire>
 80042f4:	6a23      	ldr	r3, [r4, #32]
 80042f6:	b11b      	cbz	r3, 8004300 <__sinit+0x14>
 80042f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042fc:	f7ff bff0 	b.w	80042e0 <__sfp_lock_release>
 8004300:	4b04      	ldr	r3, [pc, #16]	@ (8004314 <__sinit+0x28>)
 8004302:	6223      	str	r3, [r4, #32]
 8004304:	4b04      	ldr	r3, [pc, #16]	@ (8004318 <__sinit+0x2c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1f5      	bne.n	80042f8 <__sinit+0xc>
 800430c:	f7ff ffc4 	bl	8004298 <global_stdio_init.part.0>
 8004310:	e7f2      	b.n	80042f8 <__sinit+0xc>
 8004312:	bf00      	nop
 8004314:	08004259 	.word	0x08004259
 8004318:	200002bc 	.word	0x200002bc

0800431c <fiprintf>:
 800431c:	b40e      	push	{r1, r2, r3}
 800431e:	b503      	push	{r0, r1, lr}
 8004320:	4601      	mov	r1, r0
 8004322:	ab03      	add	r3, sp, #12
 8004324:	4805      	ldr	r0, [pc, #20]	@ (800433c <fiprintf+0x20>)
 8004326:	f853 2b04 	ldr.w	r2, [r3], #4
 800432a:	6800      	ldr	r0, [r0, #0]
 800432c:	9301      	str	r3, [sp, #4]
 800432e:	f000 fa75 	bl	800481c <_vfiprintf_r>
 8004332:	b002      	add	sp, #8
 8004334:	f85d eb04 	ldr.w	lr, [sp], #4
 8004338:	b003      	add	sp, #12
 800433a:	4770      	bx	lr
 800433c:	20000038 	.word	0x20000038

08004340 <_fwalk_sglue>:
 8004340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004344:	4607      	mov	r7, r0
 8004346:	4688      	mov	r8, r1
 8004348:	4614      	mov	r4, r2
 800434a:	2600      	movs	r6, #0
 800434c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004350:	f1b9 0901 	subs.w	r9, r9, #1
 8004354:	d505      	bpl.n	8004362 <_fwalk_sglue+0x22>
 8004356:	6824      	ldr	r4, [r4, #0]
 8004358:	2c00      	cmp	r4, #0
 800435a:	d1f7      	bne.n	800434c <_fwalk_sglue+0xc>
 800435c:	4630      	mov	r0, r6
 800435e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004362:	89ab      	ldrh	r3, [r5, #12]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d907      	bls.n	8004378 <_fwalk_sglue+0x38>
 8004368:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800436c:	3301      	adds	r3, #1
 800436e:	d003      	beq.n	8004378 <_fwalk_sglue+0x38>
 8004370:	4629      	mov	r1, r5
 8004372:	4638      	mov	r0, r7
 8004374:	47c0      	blx	r8
 8004376:	4306      	orrs	r6, r0
 8004378:	3568      	adds	r5, #104	@ 0x68
 800437a:	e7e9      	b.n	8004350 <_fwalk_sglue+0x10>

0800437c <_fwrite_r>:
 800437c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004380:	9c08      	ldr	r4, [sp, #32]
 8004382:	468a      	mov	sl, r1
 8004384:	4690      	mov	r8, r2
 8004386:	fb02 f903 	mul.w	r9, r2, r3
 800438a:	4606      	mov	r6, r0
 800438c:	b118      	cbz	r0, 8004396 <_fwrite_r+0x1a>
 800438e:	6a03      	ldr	r3, [r0, #32]
 8004390:	b90b      	cbnz	r3, 8004396 <_fwrite_r+0x1a>
 8004392:	f7ff ffab 	bl	80042ec <__sinit>
 8004396:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004398:	07dd      	lsls	r5, r3, #31
 800439a:	d405      	bmi.n	80043a8 <_fwrite_r+0x2c>
 800439c:	89a3      	ldrh	r3, [r4, #12]
 800439e:	0598      	lsls	r0, r3, #22
 80043a0:	d402      	bmi.n	80043a8 <_fwrite_r+0x2c>
 80043a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043a4:	f000 f9b5 	bl	8004712 <__retarget_lock_acquire_recursive>
 80043a8:	89a3      	ldrh	r3, [r4, #12]
 80043aa:	0719      	lsls	r1, r3, #28
 80043ac:	d516      	bpl.n	80043dc <_fwrite_r+0x60>
 80043ae:	6923      	ldr	r3, [r4, #16]
 80043b0:	b1a3      	cbz	r3, 80043dc <_fwrite_r+0x60>
 80043b2:	2500      	movs	r5, #0
 80043b4:	454d      	cmp	r5, r9
 80043b6:	d01f      	beq.n	80043f8 <_fwrite_r+0x7c>
 80043b8:	68a7      	ldr	r7, [r4, #8]
 80043ba:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80043be:	3f01      	subs	r7, #1
 80043c0:	2f00      	cmp	r7, #0
 80043c2:	60a7      	str	r7, [r4, #8]
 80043c4:	da04      	bge.n	80043d0 <_fwrite_r+0x54>
 80043c6:	69a3      	ldr	r3, [r4, #24]
 80043c8:	429f      	cmp	r7, r3
 80043ca:	db0f      	blt.n	80043ec <_fwrite_r+0x70>
 80043cc:	290a      	cmp	r1, #10
 80043ce:	d00d      	beq.n	80043ec <_fwrite_r+0x70>
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	6022      	str	r2, [r4, #0]
 80043d6:	7019      	strb	r1, [r3, #0]
 80043d8:	3501      	adds	r5, #1
 80043da:	e7eb      	b.n	80043b4 <_fwrite_r+0x38>
 80043dc:	4621      	mov	r1, r4
 80043de:	4630      	mov	r0, r6
 80043e0:	f000 f8a8 	bl	8004534 <__swsetup_r>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d0e4      	beq.n	80043b2 <_fwrite_r+0x36>
 80043e8:	2500      	movs	r5, #0
 80043ea:	e005      	b.n	80043f8 <_fwrite_r+0x7c>
 80043ec:	4622      	mov	r2, r4
 80043ee:	4630      	mov	r0, r6
 80043f0:	f000 f861 	bl	80044b6 <__swbuf_r>
 80043f4:	3001      	adds	r0, #1
 80043f6:	d1ef      	bne.n	80043d8 <_fwrite_r+0x5c>
 80043f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043fa:	07da      	lsls	r2, r3, #31
 80043fc:	d405      	bmi.n	800440a <_fwrite_r+0x8e>
 80043fe:	89a3      	ldrh	r3, [r4, #12]
 8004400:	059b      	lsls	r3, r3, #22
 8004402:	d402      	bmi.n	800440a <_fwrite_r+0x8e>
 8004404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004406:	f000 f985 	bl	8004714 <__retarget_lock_release_recursive>
 800440a:	fbb5 f0f8 	udiv	r0, r5, r8
 800440e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004414 <fwrite>:
 8004414:	b507      	push	{r0, r1, r2, lr}
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	460a      	mov	r2, r1
 800441c:	4601      	mov	r1, r0
 800441e:	4803      	ldr	r0, [pc, #12]	@ (800442c <fwrite+0x18>)
 8004420:	6800      	ldr	r0, [r0, #0]
 8004422:	f7ff ffab 	bl	800437c <_fwrite_r>
 8004426:	b003      	add	sp, #12
 8004428:	f85d fb04 	ldr.w	pc, [sp], #4
 800442c:	20000038 	.word	0x20000038

08004430 <__sread>:
 8004430:	b510      	push	{r4, lr}
 8004432:	460c      	mov	r4, r1
 8004434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004438:	f000 f90c 	bl	8004654 <_read_r>
 800443c:	2800      	cmp	r0, #0
 800443e:	bfab      	itete	ge
 8004440:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004442:	89a3      	ldrhlt	r3, [r4, #12]
 8004444:	181b      	addge	r3, r3, r0
 8004446:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800444a:	bfac      	ite	ge
 800444c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800444e:	81a3      	strhlt	r3, [r4, #12]
 8004450:	bd10      	pop	{r4, pc}

08004452 <__swrite>:
 8004452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004456:	461f      	mov	r7, r3
 8004458:	898b      	ldrh	r3, [r1, #12]
 800445a:	05db      	lsls	r3, r3, #23
 800445c:	4605      	mov	r5, r0
 800445e:	460c      	mov	r4, r1
 8004460:	4616      	mov	r6, r2
 8004462:	d505      	bpl.n	8004470 <__swrite+0x1e>
 8004464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004468:	2302      	movs	r3, #2
 800446a:	2200      	movs	r2, #0
 800446c:	f000 f8e0 	bl	8004630 <_lseek_r>
 8004470:	89a3      	ldrh	r3, [r4, #12]
 8004472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004476:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800447a:	81a3      	strh	r3, [r4, #12]
 800447c:	4632      	mov	r2, r6
 800447e:	463b      	mov	r3, r7
 8004480:	4628      	mov	r0, r5
 8004482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004486:	f000 b907 	b.w	8004698 <_write_r>

0800448a <__sseek>:
 800448a:	b510      	push	{r4, lr}
 800448c:	460c      	mov	r4, r1
 800448e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004492:	f000 f8cd 	bl	8004630 <_lseek_r>
 8004496:	1c43      	adds	r3, r0, #1
 8004498:	89a3      	ldrh	r3, [r4, #12]
 800449a:	bf15      	itete	ne
 800449c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800449e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80044a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80044a6:	81a3      	strheq	r3, [r4, #12]
 80044a8:	bf18      	it	ne
 80044aa:	81a3      	strhne	r3, [r4, #12]
 80044ac:	bd10      	pop	{r4, pc}

080044ae <__sclose>:
 80044ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044b2:	f000 b8ad 	b.w	8004610 <_close_r>

080044b6 <__swbuf_r>:
 80044b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b8:	460e      	mov	r6, r1
 80044ba:	4614      	mov	r4, r2
 80044bc:	4605      	mov	r5, r0
 80044be:	b118      	cbz	r0, 80044c8 <__swbuf_r+0x12>
 80044c0:	6a03      	ldr	r3, [r0, #32]
 80044c2:	b90b      	cbnz	r3, 80044c8 <__swbuf_r+0x12>
 80044c4:	f7ff ff12 	bl	80042ec <__sinit>
 80044c8:	69a3      	ldr	r3, [r4, #24]
 80044ca:	60a3      	str	r3, [r4, #8]
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	071a      	lsls	r2, r3, #28
 80044d0:	d501      	bpl.n	80044d6 <__swbuf_r+0x20>
 80044d2:	6923      	ldr	r3, [r4, #16]
 80044d4:	b943      	cbnz	r3, 80044e8 <__swbuf_r+0x32>
 80044d6:	4621      	mov	r1, r4
 80044d8:	4628      	mov	r0, r5
 80044da:	f000 f82b 	bl	8004534 <__swsetup_r>
 80044de:	b118      	cbz	r0, 80044e8 <__swbuf_r+0x32>
 80044e0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80044e4:	4638      	mov	r0, r7
 80044e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	6922      	ldr	r2, [r4, #16]
 80044ec:	1a98      	subs	r0, r3, r2
 80044ee:	6963      	ldr	r3, [r4, #20]
 80044f0:	b2f6      	uxtb	r6, r6
 80044f2:	4283      	cmp	r3, r0
 80044f4:	4637      	mov	r7, r6
 80044f6:	dc05      	bgt.n	8004504 <__swbuf_r+0x4e>
 80044f8:	4621      	mov	r1, r4
 80044fa:	4628      	mov	r0, r5
 80044fc:	f000 fcb6 	bl	8004e6c <_fflush_r>
 8004500:	2800      	cmp	r0, #0
 8004502:	d1ed      	bne.n	80044e0 <__swbuf_r+0x2a>
 8004504:	68a3      	ldr	r3, [r4, #8]
 8004506:	3b01      	subs	r3, #1
 8004508:	60a3      	str	r3, [r4, #8]
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	6022      	str	r2, [r4, #0]
 8004510:	701e      	strb	r6, [r3, #0]
 8004512:	6962      	ldr	r2, [r4, #20]
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	429a      	cmp	r2, r3
 8004518:	d004      	beq.n	8004524 <__swbuf_r+0x6e>
 800451a:	89a3      	ldrh	r3, [r4, #12]
 800451c:	07db      	lsls	r3, r3, #31
 800451e:	d5e1      	bpl.n	80044e4 <__swbuf_r+0x2e>
 8004520:	2e0a      	cmp	r6, #10
 8004522:	d1df      	bne.n	80044e4 <__swbuf_r+0x2e>
 8004524:	4621      	mov	r1, r4
 8004526:	4628      	mov	r0, r5
 8004528:	f000 fca0 	bl	8004e6c <_fflush_r>
 800452c:	2800      	cmp	r0, #0
 800452e:	d0d9      	beq.n	80044e4 <__swbuf_r+0x2e>
 8004530:	e7d6      	b.n	80044e0 <__swbuf_r+0x2a>
	...

08004534 <__swsetup_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	4b29      	ldr	r3, [pc, #164]	@ (80045dc <__swsetup_r+0xa8>)
 8004538:	4605      	mov	r5, r0
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	460c      	mov	r4, r1
 800453e:	b118      	cbz	r0, 8004548 <__swsetup_r+0x14>
 8004540:	6a03      	ldr	r3, [r0, #32]
 8004542:	b90b      	cbnz	r3, 8004548 <__swsetup_r+0x14>
 8004544:	f7ff fed2 	bl	80042ec <__sinit>
 8004548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800454c:	0719      	lsls	r1, r3, #28
 800454e:	d422      	bmi.n	8004596 <__swsetup_r+0x62>
 8004550:	06da      	lsls	r2, r3, #27
 8004552:	d407      	bmi.n	8004564 <__swsetup_r+0x30>
 8004554:	2209      	movs	r2, #9
 8004556:	602a      	str	r2, [r5, #0]
 8004558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800455c:	81a3      	strh	r3, [r4, #12]
 800455e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004562:	e033      	b.n	80045cc <__swsetup_r+0x98>
 8004564:	0758      	lsls	r0, r3, #29
 8004566:	d512      	bpl.n	800458e <__swsetup_r+0x5a>
 8004568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800456a:	b141      	cbz	r1, 800457e <__swsetup_r+0x4a>
 800456c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004570:	4299      	cmp	r1, r3
 8004572:	d002      	beq.n	800457a <__swsetup_r+0x46>
 8004574:	4628      	mov	r0, r5
 8004576:	f000 f8dd 	bl	8004734 <_free_r>
 800457a:	2300      	movs	r3, #0
 800457c:	6363      	str	r3, [r4, #52]	@ 0x34
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004584:	81a3      	strh	r3, [r4, #12]
 8004586:	2300      	movs	r3, #0
 8004588:	6063      	str	r3, [r4, #4]
 800458a:	6923      	ldr	r3, [r4, #16]
 800458c:	6023      	str	r3, [r4, #0]
 800458e:	89a3      	ldrh	r3, [r4, #12]
 8004590:	f043 0308 	orr.w	r3, r3, #8
 8004594:	81a3      	strh	r3, [r4, #12]
 8004596:	6923      	ldr	r3, [r4, #16]
 8004598:	b94b      	cbnz	r3, 80045ae <__swsetup_r+0x7a>
 800459a:	89a3      	ldrh	r3, [r4, #12]
 800459c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80045a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045a4:	d003      	beq.n	80045ae <__swsetup_r+0x7a>
 80045a6:	4621      	mov	r1, r4
 80045a8:	4628      	mov	r0, r5
 80045aa:	f000 fcad 	bl	8004f08 <__smakebuf_r>
 80045ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045b2:	f013 0201 	ands.w	r2, r3, #1
 80045b6:	d00a      	beq.n	80045ce <__swsetup_r+0x9a>
 80045b8:	2200      	movs	r2, #0
 80045ba:	60a2      	str	r2, [r4, #8]
 80045bc:	6962      	ldr	r2, [r4, #20]
 80045be:	4252      	negs	r2, r2
 80045c0:	61a2      	str	r2, [r4, #24]
 80045c2:	6922      	ldr	r2, [r4, #16]
 80045c4:	b942      	cbnz	r2, 80045d8 <__swsetup_r+0xa4>
 80045c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80045ca:	d1c5      	bne.n	8004558 <__swsetup_r+0x24>
 80045cc:	bd38      	pop	{r3, r4, r5, pc}
 80045ce:	0799      	lsls	r1, r3, #30
 80045d0:	bf58      	it	pl
 80045d2:	6962      	ldrpl	r2, [r4, #20]
 80045d4:	60a2      	str	r2, [r4, #8]
 80045d6:	e7f4      	b.n	80045c2 <__swsetup_r+0x8e>
 80045d8:	2000      	movs	r0, #0
 80045da:	e7f7      	b.n	80045cc <__swsetup_r+0x98>
 80045dc:	20000038 	.word	0x20000038

080045e0 <memcmp>:
 80045e0:	b510      	push	{r4, lr}
 80045e2:	3901      	subs	r1, #1
 80045e4:	4402      	add	r2, r0
 80045e6:	4290      	cmp	r0, r2
 80045e8:	d101      	bne.n	80045ee <memcmp+0xe>
 80045ea:	2000      	movs	r0, #0
 80045ec:	e005      	b.n	80045fa <memcmp+0x1a>
 80045ee:	7803      	ldrb	r3, [r0, #0]
 80045f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80045f4:	42a3      	cmp	r3, r4
 80045f6:	d001      	beq.n	80045fc <memcmp+0x1c>
 80045f8:	1b18      	subs	r0, r3, r4
 80045fa:	bd10      	pop	{r4, pc}
 80045fc:	3001      	adds	r0, #1
 80045fe:	e7f2      	b.n	80045e6 <memcmp+0x6>

08004600 <memset>:
 8004600:	4402      	add	r2, r0
 8004602:	4603      	mov	r3, r0
 8004604:	4293      	cmp	r3, r2
 8004606:	d100      	bne.n	800460a <memset+0xa>
 8004608:	4770      	bx	lr
 800460a:	f803 1b01 	strb.w	r1, [r3], #1
 800460e:	e7f9      	b.n	8004604 <memset+0x4>

08004610 <_close_r>:
 8004610:	b538      	push	{r3, r4, r5, lr}
 8004612:	4d06      	ldr	r5, [pc, #24]	@ (800462c <_close_r+0x1c>)
 8004614:	2300      	movs	r3, #0
 8004616:	4604      	mov	r4, r0
 8004618:	4608      	mov	r0, r1
 800461a:	602b      	str	r3, [r5, #0]
 800461c:	f7fc fe2c 	bl	8001278 <_close>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d102      	bne.n	800462a <_close_r+0x1a>
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	b103      	cbz	r3, 800462a <_close_r+0x1a>
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	bd38      	pop	{r3, r4, r5, pc}
 800462c:	200002c0 	.word	0x200002c0

08004630 <_lseek_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4d07      	ldr	r5, [pc, #28]	@ (8004650 <_lseek_r+0x20>)
 8004634:	4604      	mov	r4, r0
 8004636:	4608      	mov	r0, r1
 8004638:	4611      	mov	r1, r2
 800463a:	2200      	movs	r2, #0
 800463c:	602a      	str	r2, [r5, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	f7fc fe24 	bl	800128c <_lseek>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d102      	bne.n	800464e <_lseek_r+0x1e>
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	b103      	cbz	r3, 800464e <_lseek_r+0x1e>
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	bd38      	pop	{r3, r4, r5, pc}
 8004650:	200002c0 	.word	0x200002c0

08004654 <_read_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4d07      	ldr	r5, [pc, #28]	@ (8004674 <_read_r+0x20>)
 8004658:	4604      	mov	r4, r0
 800465a:	4608      	mov	r0, r1
 800465c:	4611      	mov	r1, r2
 800465e:	2200      	movs	r2, #0
 8004660:	602a      	str	r2, [r5, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	f7fc fdea 	bl	800123c <_read>
 8004668:	1c43      	adds	r3, r0, #1
 800466a:	d102      	bne.n	8004672 <_read_r+0x1e>
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	b103      	cbz	r3, 8004672 <_read_r+0x1e>
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	bd38      	pop	{r3, r4, r5, pc}
 8004674:	200002c0 	.word	0x200002c0

08004678 <_sbrk_r>:
 8004678:	b538      	push	{r3, r4, r5, lr}
 800467a:	4d06      	ldr	r5, [pc, #24]	@ (8004694 <_sbrk_r+0x1c>)
 800467c:	2300      	movs	r3, #0
 800467e:	4604      	mov	r4, r0
 8004680:	4608      	mov	r0, r1
 8004682:	602b      	str	r3, [r5, #0]
 8004684:	f7fc fe04 	bl	8001290 <_sbrk>
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	d102      	bne.n	8004692 <_sbrk_r+0x1a>
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	b103      	cbz	r3, 8004692 <_sbrk_r+0x1a>
 8004690:	6023      	str	r3, [r4, #0]
 8004692:	bd38      	pop	{r3, r4, r5, pc}
 8004694:	200002c0 	.word	0x200002c0

08004698 <_write_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	4d07      	ldr	r5, [pc, #28]	@ (80046b8 <_write_r+0x20>)
 800469c:	4604      	mov	r4, r0
 800469e:	4608      	mov	r0, r1
 80046a0:	4611      	mov	r1, r2
 80046a2:	2200      	movs	r2, #0
 80046a4:	602a      	str	r2, [r5, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	f7fc fdd8 	bl	800125c <_write>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d102      	bne.n	80046b6 <_write_r+0x1e>
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	b103      	cbz	r3, 80046b6 <_write_r+0x1e>
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	bd38      	pop	{r3, r4, r5, pc}
 80046b8:	200002c0 	.word	0x200002c0

080046bc <__errno>:
 80046bc:	4b01      	ldr	r3, [pc, #4]	@ (80046c4 <__errno+0x8>)
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	20000038 	.word	0x20000038

080046c8 <__libc_init_array>:
 80046c8:	b570      	push	{r4, r5, r6, lr}
 80046ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004700 <__libc_init_array+0x38>)
 80046cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004704 <__libc_init_array+0x3c>)
 80046ce:	1b64      	subs	r4, r4, r5
 80046d0:	10a4      	asrs	r4, r4, #2
 80046d2:	2600      	movs	r6, #0
 80046d4:	42a6      	cmp	r6, r4
 80046d6:	d109      	bne.n	80046ec <__libc_init_array+0x24>
 80046d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004708 <__libc_init_array+0x40>)
 80046da:	4c0c      	ldr	r4, [pc, #48]	@ (800470c <__libc_init_array+0x44>)
 80046dc:	f000 fc72 	bl	8004fc4 <_init>
 80046e0:	1b64      	subs	r4, r4, r5
 80046e2:	10a4      	asrs	r4, r4, #2
 80046e4:	2600      	movs	r6, #0
 80046e6:	42a6      	cmp	r6, r4
 80046e8:	d105      	bne.n	80046f6 <__libc_init_array+0x2e>
 80046ea:	bd70      	pop	{r4, r5, r6, pc}
 80046ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f0:	4798      	blx	r3
 80046f2:	3601      	adds	r6, #1
 80046f4:	e7ee      	b.n	80046d4 <__libc_init_array+0xc>
 80046f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fa:	4798      	blx	r3
 80046fc:	3601      	adds	r6, #1
 80046fe:	e7f2      	b.n	80046e6 <__libc_init_array+0x1e>
 8004700:	08005a84 	.word	0x08005a84
 8004704:	08005a84 	.word	0x08005a84
 8004708:	08005a84 	.word	0x08005a84
 800470c:	08005a88 	.word	0x08005a88

08004710 <__retarget_lock_init_recursive>:
 8004710:	4770      	bx	lr

08004712 <__retarget_lock_acquire_recursive>:
 8004712:	4770      	bx	lr

08004714 <__retarget_lock_release_recursive>:
 8004714:	4770      	bx	lr

08004716 <memcpy>:
 8004716:	440a      	add	r2, r1
 8004718:	4291      	cmp	r1, r2
 800471a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800471e:	d100      	bne.n	8004722 <memcpy+0xc>
 8004720:	4770      	bx	lr
 8004722:	b510      	push	{r4, lr}
 8004724:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004728:	f803 4f01 	strb.w	r4, [r3, #1]!
 800472c:	4291      	cmp	r1, r2
 800472e:	d1f9      	bne.n	8004724 <memcpy+0xe>
 8004730:	bd10      	pop	{r4, pc}
	...

08004734 <_free_r>:
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	4605      	mov	r5, r0
 8004738:	2900      	cmp	r1, #0
 800473a:	d041      	beq.n	80047c0 <_free_r+0x8c>
 800473c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004740:	1f0c      	subs	r4, r1, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	bfb8      	it	lt
 8004746:	18e4      	addlt	r4, r4, r3
 8004748:	f7ff fd38 	bl	80041bc <__malloc_lock>
 800474c:	4a1d      	ldr	r2, [pc, #116]	@ (80047c4 <_free_r+0x90>)
 800474e:	6813      	ldr	r3, [r2, #0]
 8004750:	b933      	cbnz	r3, 8004760 <_free_r+0x2c>
 8004752:	6063      	str	r3, [r4, #4]
 8004754:	6014      	str	r4, [r2, #0]
 8004756:	4628      	mov	r0, r5
 8004758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800475c:	f7ff bd34 	b.w	80041c8 <__malloc_unlock>
 8004760:	42a3      	cmp	r3, r4
 8004762:	d908      	bls.n	8004776 <_free_r+0x42>
 8004764:	6820      	ldr	r0, [r4, #0]
 8004766:	1821      	adds	r1, r4, r0
 8004768:	428b      	cmp	r3, r1
 800476a:	bf01      	itttt	eq
 800476c:	6819      	ldreq	r1, [r3, #0]
 800476e:	685b      	ldreq	r3, [r3, #4]
 8004770:	1809      	addeq	r1, r1, r0
 8004772:	6021      	streq	r1, [r4, #0]
 8004774:	e7ed      	b.n	8004752 <_free_r+0x1e>
 8004776:	461a      	mov	r2, r3
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	b10b      	cbz	r3, 8004780 <_free_r+0x4c>
 800477c:	42a3      	cmp	r3, r4
 800477e:	d9fa      	bls.n	8004776 <_free_r+0x42>
 8004780:	6811      	ldr	r1, [r2, #0]
 8004782:	1850      	adds	r0, r2, r1
 8004784:	42a0      	cmp	r0, r4
 8004786:	d10b      	bne.n	80047a0 <_free_r+0x6c>
 8004788:	6820      	ldr	r0, [r4, #0]
 800478a:	4401      	add	r1, r0
 800478c:	1850      	adds	r0, r2, r1
 800478e:	4283      	cmp	r3, r0
 8004790:	6011      	str	r1, [r2, #0]
 8004792:	d1e0      	bne.n	8004756 <_free_r+0x22>
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	6053      	str	r3, [r2, #4]
 800479a:	4408      	add	r0, r1
 800479c:	6010      	str	r0, [r2, #0]
 800479e:	e7da      	b.n	8004756 <_free_r+0x22>
 80047a0:	d902      	bls.n	80047a8 <_free_r+0x74>
 80047a2:	230c      	movs	r3, #12
 80047a4:	602b      	str	r3, [r5, #0]
 80047a6:	e7d6      	b.n	8004756 <_free_r+0x22>
 80047a8:	6820      	ldr	r0, [r4, #0]
 80047aa:	1821      	adds	r1, r4, r0
 80047ac:	428b      	cmp	r3, r1
 80047ae:	bf04      	itt	eq
 80047b0:	6819      	ldreq	r1, [r3, #0]
 80047b2:	685b      	ldreq	r3, [r3, #4]
 80047b4:	6063      	str	r3, [r4, #4]
 80047b6:	bf04      	itt	eq
 80047b8:	1809      	addeq	r1, r1, r0
 80047ba:	6021      	streq	r1, [r4, #0]
 80047bc:	6054      	str	r4, [r2, #4]
 80047be:	e7ca      	b.n	8004756 <_free_r+0x22>
 80047c0:	bd38      	pop	{r3, r4, r5, pc}
 80047c2:	bf00      	nop
 80047c4:	20000180 	.word	0x20000180

080047c8 <__sfputc_r>:
 80047c8:	6893      	ldr	r3, [r2, #8]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	b410      	push	{r4}
 80047d0:	6093      	str	r3, [r2, #8]
 80047d2:	da08      	bge.n	80047e6 <__sfputc_r+0x1e>
 80047d4:	6994      	ldr	r4, [r2, #24]
 80047d6:	42a3      	cmp	r3, r4
 80047d8:	db01      	blt.n	80047de <__sfputc_r+0x16>
 80047da:	290a      	cmp	r1, #10
 80047dc:	d103      	bne.n	80047e6 <__sfputc_r+0x1e>
 80047de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047e2:	f7ff be68 	b.w	80044b6 <__swbuf_r>
 80047e6:	6813      	ldr	r3, [r2, #0]
 80047e8:	1c58      	adds	r0, r3, #1
 80047ea:	6010      	str	r0, [r2, #0]
 80047ec:	7019      	strb	r1, [r3, #0]
 80047ee:	4608      	mov	r0, r1
 80047f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <__sfputs_r>:
 80047f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f8:	4606      	mov	r6, r0
 80047fa:	460f      	mov	r7, r1
 80047fc:	4614      	mov	r4, r2
 80047fe:	18d5      	adds	r5, r2, r3
 8004800:	42ac      	cmp	r4, r5
 8004802:	d101      	bne.n	8004808 <__sfputs_r+0x12>
 8004804:	2000      	movs	r0, #0
 8004806:	e007      	b.n	8004818 <__sfputs_r+0x22>
 8004808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800480c:	463a      	mov	r2, r7
 800480e:	4630      	mov	r0, r6
 8004810:	f7ff ffda 	bl	80047c8 <__sfputc_r>
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	d1f3      	bne.n	8004800 <__sfputs_r+0xa>
 8004818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800481c <_vfiprintf_r>:
 800481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004820:	460d      	mov	r5, r1
 8004822:	b09d      	sub	sp, #116	@ 0x74
 8004824:	4614      	mov	r4, r2
 8004826:	4698      	mov	r8, r3
 8004828:	4606      	mov	r6, r0
 800482a:	b118      	cbz	r0, 8004834 <_vfiprintf_r+0x18>
 800482c:	6a03      	ldr	r3, [r0, #32]
 800482e:	b90b      	cbnz	r3, 8004834 <_vfiprintf_r+0x18>
 8004830:	f7ff fd5c 	bl	80042ec <__sinit>
 8004834:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004836:	07d9      	lsls	r1, r3, #31
 8004838:	d405      	bmi.n	8004846 <_vfiprintf_r+0x2a>
 800483a:	89ab      	ldrh	r3, [r5, #12]
 800483c:	059a      	lsls	r2, r3, #22
 800483e:	d402      	bmi.n	8004846 <_vfiprintf_r+0x2a>
 8004840:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004842:	f7ff ff66 	bl	8004712 <__retarget_lock_acquire_recursive>
 8004846:	89ab      	ldrh	r3, [r5, #12]
 8004848:	071b      	lsls	r3, r3, #28
 800484a:	d501      	bpl.n	8004850 <_vfiprintf_r+0x34>
 800484c:	692b      	ldr	r3, [r5, #16]
 800484e:	b99b      	cbnz	r3, 8004878 <_vfiprintf_r+0x5c>
 8004850:	4629      	mov	r1, r5
 8004852:	4630      	mov	r0, r6
 8004854:	f7ff fe6e 	bl	8004534 <__swsetup_r>
 8004858:	b170      	cbz	r0, 8004878 <_vfiprintf_r+0x5c>
 800485a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800485c:	07dc      	lsls	r4, r3, #31
 800485e:	d504      	bpl.n	800486a <_vfiprintf_r+0x4e>
 8004860:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004864:	b01d      	add	sp, #116	@ 0x74
 8004866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800486a:	89ab      	ldrh	r3, [r5, #12]
 800486c:	0598      	lsls	r0, r3, #22
 800486e:	d4f7      	bmi.n	8004860 <_vfiprintf_r+0x44>
 8004870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004872:	f7ff ff4f 	bl	8004714 <__retarget_lock_release_recursive>
 8004876:	e7f3      	b.n	8004860 <_vfiprintf_r+0x44>
 8004878:	2300      	movs	r3, #0
 800487a:	9309      	str	r3, [sp, #36]	@ 0x24
 800487c:	2320      	movs	r3, #32
 800487e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004882:	f8cd 800c 	str.w	r8, [sp, #12]
 8004886:	2330      	movs	r3, #48	@ 0x30
 8004888:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004a38 <_vfiprintf_r+0x21c>
 800488c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004890:	f04f 0901 	mov.w	r9, #1
 8004894:	4623      	mov	r3, r4
 8004896:	469a      	mov	sl, r3
 8004898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800489c:	b10a      	cbz	r2, 80048a2 <_vfiprintf_r+0x86>
 800489e:	2a25      	cmp	r2, #37	@ 0x25
 80048a0:	d1f9      	bne.n	8004896 <_vfiprintf_r+0x7a>
 80048a2:	ebba 0b04 	subs.w	fp, sl, r4
 80048a6:	d00b      	beq.n	80048c0 <_vfiprintf_r+0xa4>
 80048a8:	465b      	mov	r3, fp
 80048aa:	4622      	mov	r2, r4
 80048ac:	4629      	mov	r1, r5
 80048ae:	4630      	mov	r0, r6
 80048b0:	f7ff ffa1 	bl	80047f6 <__sfputs_r>
 80048b4:	3001      	adds	r0, #1
 80048b6:	f000 80a7 	beq.w	8004a08 <_vfiprintf_r+0x1ec>
 80048ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048bc:	445a      	add	r2, fp
 80048be:	9209      	str	r2, [sp, #36]	@ 0x24
 80048c0:	f89a 3000 	ldrb.w	r3, [sl]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 809f 	beq.w	8004a08 <_vfiprintf_r+0x1ec>
 80048ca:	2300      	movs	r3, #0
 80048cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048d4:	f10a 0a01 	add.w	sl, sl, #1
 80048d8:	9304      	str	r3, [sp, #16]
 80048da:	9307      	str	r3, [sp, #28]
 80048dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80048e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80048e2:	4654      	mov	r4, sl
 80048e4:	2205      	movs	r2, #5
 80048e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ea:	4853      	ldr	r0, [pc, #332]	@ (8004a38 <_vfiprintf_r+0x21c>)
 80048ec:	f7fb fc70 	bl	80001d0 <memchr>
 80048f0:	9a04      	ldr	r2, [sp, #16]
 80048f2:	b9d8      	cbnz	r0, 800492c <_vfiprintf_r+0x110>
 80048f4:	06d1      	lsls	r1, r2, #27
 80048f6:	bf44      	itt	mi
 80048f8:	2320      	movmi	r3, #32
 80048fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048fe:	0713      	lsls	r3, r2, #28
 8004900:	bf44      	itt	mi
 8004902:	232b      	movmi	r3, #43	@ 0x2b
 8004904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004908:	f89a 3000 	ldrb.w	r3, [sl]
 800490c:	2b2a      	cmp	r3, #42	@ 0x2a
 800490e:	d015      	beq.n	800493c <_vfiprintf_r+0x120>
 8004910:	9a07      	ldr	r2, [sp, #28]
 8004912:	4654      	mov	r4, sl
 8004914:	2000      	movs	r0, #0
 8004916:	f04f 0c0a 	mov.w	ip, #10
 800491a:	4621      	mov	r1, r4
 800491c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004920:	3b30      	subs	r3, #48	@ 0x30
 8004922:	2b09      	cmp	r3, #9
 8004924:	d94b      	bls.n	80049be <_vfiprintf_r+0x1a2>
 8004926:	b1b0      	cbz	r0, 8004956 <_vfiprintf_r+0x13a>
 8004928:	9207      	str	r2, [sp, #28]
 800492a:	e014      	b.n	8004956 <_vfiprintf_r+0x13a>
 800492c:	eba0 0308 	sub.w	r3, r0, r8
 8004930:	fa09 f303 	lsl.w	r3, r9, r3
 8004934:	4313      	orrs	r3, r2
 8004936:	9304      	str	r3, [sp, #16]
 8004938:	46a2      	mov	sl, r4
 800493a:	e7d2      	b.n	80048e2 <_vfiprintf_r+0xc6>
 800493c:	9b03      	ldr	r3, [sp, #12]
 800493e:	1d19      	adds	r1, r3, #4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	9103      	str	r1, [sp, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	bfbb      	ittet	lt
 8004948:	425b      	neglt	r3, r3
 800494a:	f042 0202 	orrlt.w	r2, r2, #2
 800494e:	9307      	strge	r3, [sp, #28]
 8004950:	9307      	strlt	r3, [sp, #28]
 8004952:	bfb8      	it	lt
 8004954:	9204      	strlt	r2, [sp, #16]
 8004956:	7823      	ldrb	r3, [r4, #0]
 8004958:	2b2e      	cmp	r3, #46	@ 0x2e
 800495a:	d10a      	bne.n	8004972 <_vfiprintf_r+0x156>
 800495c:	7863      	ldrb	r3, [r4, #1]
 800495e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004960:	d132      	bne.n	80049c8 <_vfiprintf_r+0x1ac>
 8004962:	9b03      	ldr	r3, [sp, #12]
 8004964:	1d1a      	adds	r2, r3, #4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	9203      	str	r2, [sp, #12]
 800496a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800496e:	3402      	adds	r4, #2
 8004970:	9305      	str	r3, [sp, #20]
 8004972:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004a48 <_vfiprintf_r+0x22c>
 8004976:	7821      	ldrb	r1, [r4, #0]
 8004978:	2203      	movs	r2, #3
 800497a:	4650      	mov	r0, sl
 800497c:	f7fb fc28 	bl	80001d0 <memchr>
 8004980:	b138      	cbz	r0, 8004992 <_vfiprintf_r+0x176>
 8004982:	9b04      	ldr	r3, [sp, #16]
 8004984:	eba0 000a 	sub.w	r0, r0, sl
 8004988:	2240      	movs	r2, #64	@ 0x40
 800498a:	4082      	lsls	r2, r0
 800498c:	4313      	orrs	r3, r2
 800498e:	3401      	adds	r4, #1
 8004990:	9304      	str	r3, [sp, #16]
 8004992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004996:	4829      	ldr	r0, [pc, #164]	@ (8004a3c <_vfiprintf_r+0x220>)
 8004998:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800499c:	2206      	movs	r2, #6
 800499e:	f7fb fc17 	bl	80001d0 <memchr>
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d03f      	beq.n	8004a26 <_vfiprintf_r+0x20a>
 80049a6:	4b26      	ldr	r3, [pc, #152]	@ (8004a40 <_vfiprintf_r+0x224>)
 80049a8:	bb1b      	cbnz	r3, 80049f2 <_vfiprintf_r+0x1d6>
 80049aa:	9b03      	ldr	r3, [sp, #12]
 80049ac:	3307      	adds	r3, #7
 80049ae:	f023 0307 	bic.w	r3, r3, #7
 80049b2:	3308      	adds	r3, #8
 80049b4:	9303      	str	r3, [sp, #12]
 80049b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049b8:	443b      	add	r3, r7
 80049ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80049bc:	e76a      	b.n	8004894 <_vfiprintf_r+0x78>
 80049be:	fb0c 3202 	mla	r2, ip, r2, r3
 80049c2:	460c      	mov	r4, r1
 80049c4:	2001      	movs	r0, #1
 80049c6:	e7a8      	b.n	800491a <_vfiprintf_r+0xfe>
 80049c8:	2300      	movs	r3, #0
 80049ca:	3401      	adds	r4, #1
 80049cc:	9305      	str	r3, [sp, #20]
 80049ce:	4619      	mov	r1, r3
 80049d0:	f04f 0c0a 	mov.w	ip, #10
 80049d4:	4620      	mov	r0, r4
 80049d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049da:	3a30      	subs	r2, #48	@ 0x30
 80049dc:	2a09      	cmp	r2, #9
 80049de:	d903      	bls.n	80049e8 <_vfiprintf_r+0x1cc>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0c6      	beq.n	8004972 <_vfiprintf_r+0x156>
 80049e4:	9105      	str	r1, [sp, #20]
 80049e6:	e7c4      	b.n	8004972 <_vfiprintf_r+0x156>
 80049e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80049ec:	4604      	mov	r4, r0
 80049ee:	2301      	movs	r3, #1
 80049f0:	e7f0      	b.n	80049d4 <_vfiprintf_r+0x1b8>
 80049f2:	ab03      	add	r3, sp, #12
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	462a      	mov	r2, r5
 80049f8:	4b12      	ldr	r3, [pc, #72]	@ (8004a44 <_vfiprintf_r+0x228>)
 80049fa:	a904      	add	r1, sp, #16
 80049fc:	4630      	mov	r0, r6
 80049fe:	f3af 8000 	nop.w
 8004a02:	4607      	mov	r7, r0
 8004a04:	1c78      	adds	r0, r7, #1
 8004a06:	d1d6      	bne.n	80049b6 <_vfiprintf_r+0x19a>
 8004a08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a0a:	07d9      	lsls	r1, r3, #31
 8004a0c:	d405      	bmi.n	8004a1a <_vfiprintf_r+0x1fe>
 8004a0e:	89ab      	ldrh	r3, [r5, #12]
 8004a10:	059a      	lsls	r2, r3, #22
 8004a12:	d402      	bmi.n	8004a1a <_vfiprintf_r+0x1fe>
 8004a14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a16:	f7ff fe7d 	bl	8004714 <__retarget_lock_release_recursive>
 8004a1a:	89ab      	ldrh	r3, [r5, #12]
 8004a1c:	065b      	lsls	r3, r3, #25
 8004a1e:	f53f af1f 	bmi.w	8004860 <_vfiprintf_r+0x44>
 8004a22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a24:	e71e      	b.n	8004864 <_vfiprintf_r+0x48>
 8004a26:	ab03      	add	r3, sp, #12
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	462a      	mov	r2, r5
 8004a2c:	4b05      	ldr	r3, [pc, #20]	@ (8004a44 <_vfiprintf_r+0x228>)
 8004a2e:	a904      	add	r1, sp, #16
 8004a30:	4630      	mov	r0, r6
 8004a32:	f000 f879 	bl	8004b28 <_printf_i>
 8004a36:	e7e4      	b.n	8004a02 <_vfiprintf_r+0x1e6>
 8004a38:	08005a48 	.word	0x08005a48
 8004a3c:	08005a52 	.word	0x08005a52
 8004a40:	00000000 	.word	0x00000000
 8004a44:	080047f7 	.word	0x080047f7
 8004a48:	08005a4e 	.word	0x08005a4e

08004a4c <_printf_common>:
 8004a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a50:	4616      	mov	r6, r2
 8004a52:	4698      	mov	r8, r3
 8004a54:	688a      	ldr	r2, [r1, #8]
 8004a56:	690b      	ldr	r3, [r1, #16]
 8004a58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	bfb8      	it	lt
 8004a60:	4613      	movlt	r3, r2
 8004a62:	6033      	str	r3, [r6, #0]
 8004a64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a68:	4607      	mov	r7, r0
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	b10a      	cbz	r2, 8004a72 <_printf_common+0x26>
 8004a6e:	3301      	adds	r3, #1
 8004a70:	6033      	str	r3, [r6, #0]
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	0699      	lsls	r1, r3, #26
 8004a76:	bf42      	ittt	mi
 8004a78:	6833      	ldrmi	r3, [r6, #0]
 8004a7a:	3302      	addmi	r3, #2
 8004a7c:	6033      	strmi	r3, [r6, #0]
 8004a7e:	6825      	ldr	r5, [r4, #0]
 8004a80:	f015 0506 	ands.w	r5, r5, #6
 8004a84:	d106      	bne.n	8004a94 <_printf_common+0x48>
 8004a86:	f104 0a19 	add.w	sl, r4, #25
 8004a8a:	68e3      	ldr	r3, [r4, #12]
 8004a8c:	6832      	ldr	r2, [r6, #0]
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	42ab      	cmp	r3, r5
 8004a92:	dc26      	bgt.n	8004ae2 <_printf_common+0x96>
 8004a94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a98:	6822      	ldr	r2, [r4, #0]
 8004a9a:	3b00      	subs	r3, #0
 8004a9c:	bf18      	it	ne
 8004a9e:	2301      	movne	r3, #1
 8004aa0:	0692      	lsls	r2, r2, #26
 8004aa2:	d42b      	bmi.n	8004afc <_printf_common+0xb0>
 8004aa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004aa8:	4641      	mov	r1, r8
 8004aaa:	4638      	mov	r0, r7
 8004aac:	47c8      	blx	r9
 8004aae:	3001      	adds	r0, #1
 8004ab0:	d01e      	beq.n	8004af0 <_printf_common+0xa4>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	6922      	ldr	r2, [r4, #16]
 8004ab6:	f003 0306 	and.w	r3, r3, #6
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	bf02      	ittt	eq
 8004abe:	68e5      	ldreq	r5, [r4, #12]
 8004ac0:	6833      	ldreq	r3, [r6, #0]
 8004ac2:	1aed      	subeq	r5, r5, r3
 8004ac4:	68a3      	ldr	r3, [r4, #8]
 8004ac6:	bf0c      	ite	eq
 8004ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004acc:	2500      	movne	r5, #0
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	bfc4      	itt	gt
 8004ad2:	1a9b      	subgt	r3, r3, r2
 8004ad4:	18ed      	addgt	r5, r5, r3
 8004ad6:	2600      	movs	r6, #0
 8004ad8:	341a      	adds	r4, #26
 8004ada:	42b5      	cmp	r5, r6
 8004adc:	d11a      	bne.n	8004b14 <_printf_common+0xc8>
 8004ade:	2000      	movs	r0, #0
 8004ae0:	e008      	b.n	8004af4 <_printf_common+0xa8>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	4652      	mov	r2, sl
 8004ae6:	4641      	mov	r1, r8
 8004ae8:	4638      	mov	r0, r7
 8004aea:	47c8      	blx	r9
 8004aec:	3001      	adds	r0, #1
 8004aee:	d103      	bne.n	8004af8 <_printf_common+0xac>
 8004af0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af8:	3501      	adds	r5, #1
 8004afa:	e7c6      	b.n	8004a8a <_printf_common+0x3e>
 8004afc:	18e1      	adds	r1, r4, r3
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	2030      	movs	r0, #48	@ 0x30
 8004b02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b06:	4422      	add	r2, r4
 8004b08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b10:	3302      	adds	r3, #2
 8004b12:	e7c7      	b.n	8004aa4 <_printf_common+0x58>
 8004b14:	2301      	movs	r3, #1
 8004b16:	4622      	mov	r2, r4
 8004b18:	4641      	mov	r1, r8
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	47c8      	blx	r9
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d0e6      	beq.n	8004af0 <_printf_common+0xa4>
 8004b22:	3601      	adds	r6, #1
 8004b24:	e7d9      	b.n	8004ada <_printf_common+0x8e>
	...

08004b28 <_printf_i>:
 8004b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b2c:	7e0f      	ldrb	r7, [r1, #24]
 8004b2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b30:	2f78      	cmp	r7, #120	@ 0x78
 8004b32:	4691      	mov	r9, r2
 8004b34:	4680      	mov	r8, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	469a      	mov	sl, r3
 8004b3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b3e:	d807      	bhi.n	8004b50 <_printf_i+0x28>
 8004b40:	2f62      	cmp	r7, #98	@ 0x62
 8004b42:	d80a      	bhi.n	8004b5a <_printf_i+0x32>
 8004b44:	2f00      	cmp	r7, #0
 8004b46:	f000 80d1 	beq.w	8004cec <_printf_i+0x1c4>
 8004b4a:	2f58      	cmp	r7, #88	@ 0x58
 8004b4c:	f000 80b8 	beq.w	8004cc0 <_printf_i+0x198>
 8004b50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b58:	e03a      	b.n	8004bd0 <_printf_i+0xa8>
 8004b5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b5e:	2b15      	cmp	r3, #21
 8004b60:	d8f6      	bhi.n	8004b50 <_printf_i+0x28>
 8004b62:	a101      	add	r1, pc, #4	@ (adr r1, 8004b68 <_printf_i+0x40>)
 8004b64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b68:	08004bc1 	.word	0x08004bc1
 8004b6c:	08004bd5 	.word	0x08004bd5
 8004b70:	08004b51 	.word	0x08004b51
 8004b74:	08004b51 	.word	0x08004b51
 8004b78:	08004b51 	.word	0x08004b51
 8004b7c:	08004b51 	.word	0x08004b51
 8004b80:	08004bd5 	.word	0x08004bd5
 8004b84:	08004b51 	.word	0x08004b51
 8004b88:	08004b51 	.word	0x08004b51
 8004b8c:	08004b51 	.word	0x08004b51
 8004b90:	08004b51 	.word	0x08004b51
 8004b94:	08004cd3 	.word	0x08004cd3
 8004b98:	08004bff 	.word	0x08004bff
 8004b9c:	08004c8d 	.word	0x08004c8d
 8004ba0:	08004b51 	.word	0x08004b51
 8004ba4:	08004b51 	.word	0x08004b51
 8004ba8:	08004cf5 	.word	0x08004cf5
 8004bac:	08004b51 	.word	0x08004b51
 8004bb0:	08004bff 	.word	0x08004bff
 8004bb4:	08004b51 	.word	0x08004b51
 8004bb8:	08004b51 	.word	0x08004b51
 8004bbc:	08004c95 	.word	0x08004c95
 8004bc0:	6833      	ldr	r3, [r6, #0]
 8004bc2:	1d1a      	adds	r2, r3, #4
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6032      	str	r2, [r6, #0]
 8004bc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e09c      	b.n	8004d0e <_printf_i+0x1e6>
 8004bd4:	6833      	ldr	r3, [r6, #0]
 8004bd6:	6820      	ldr	r0, [r4, #0]
 8004bd8:	1d19      	adds	r1, r3, #4
 8004bda:	6031      	str	r1, [r6, #0]
 8004bdc:	0606      	lsls	r6, r0, #24
 8004bde:	d501      	bpl.n	8004be4 <_printf_i+0xbc>
 8004be0:	681d      	ldr	r5, [r3, #0]
 8004be2:	e003      	b.n	8004bec <_printf_i+0xc4>
 8004be4:	0645      	lsls	r5, r0, #25
 8004be6:	d5fb      	bpl.n	8004be0 <_printf_i+0xb8>
 8004be8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004bec:	2d00      	cmp	r5, #0
 8004bee:	da03      	bge.n	8004bf8 <_printf_i+0xd0>
 8004bf0:	232d      	movs	r3, #45	@ 0x2d
 8004bf2:	426d      	negs	r5, r5
 8004bf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bf8:	4858      	ldr	r0, [pc, #352]	@ (8004d5c <_printf_i+0x234>)
 8004bfa:	230a      	movs	r3, #10
 8004bfc:	e011      	b.n	8004c22 <_printf_i+0xfa>
 8004bfe:	6821      	ldr	r1, [r4, #0]
 8004c00:	6833      	ldr	r3, [r6, #0]
 8004c02:	0608      	lsls	r0, r1, #24
 8004c04:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c08:	d402      	bmi.n	8004c10 <_printf_i+0xe8>
 8004c0a:	0649      	lsls	r1, r1, #25
 8004c0c:	bf48      	it	mi
 8004c0e:	b2ad      	uxthmi	r5, r5
 8004c10:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c12:	4852      	ldr	r0, [pc, #328]	@ (8004d5c <_printf_i+0x234>)
 8004c14:	6033      	str	r3, [r6, #0]
 8004c16:	bf14      	ite	ne
 8004c18:	230a      	movne	r3, #10
 8004c1a:	2308      	moveq	r3, #8
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c22:	6866      	ldr	r6, [r4, #4]
 8004c24:	60a6      	str	r6, [r4, #8]
 8004c26:	2e00      	cmp	r6, #0
 8004c28:	db05      	blt.n	8004c36 <_printf_i+0x10e>
 8004c2a:	6821      	ldr	r1, [r4, #0]
 8004c2c:	432e      	orrs	r6, r5
 8004c2e:	f021 0104 	bic.w	r1, r1, #4
 8004c32:	6021      	str	r1, [r4, #0]
 8004c34:	d04b      	beq.n	8004cce <_printf_i+0x1a6>
 8004c36:	4616      	mov	r6, r2
 8004c38:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c3c:	fb03 5711 	mls	r7, r3, r1, r5
 8004c40:	5dc7      	ldrb	r7, [r0, r7]
 8004c42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c46:	462f      	mov	r7, r5
 8004c48:	42bb      	cmp	r3, r7
 8004c4a:	460d      	mov	r5, r1
 8004c4c:	d9f4      	bls.n	8004c38 <_printf_i+0x110>
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d10b      	bne.n	8004c6a <_printf_i+0x142>
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	07df      	lsls	r7, r3, #31
 8004c56:	d508      	bpl.n	8004c6a <_printf_i+0x142>
 8004c58:	6923      	ldr	r3, [r4, #16]
 8004c5a:	6861      	ldr	r1, [r4, #4]
 8004c5c:	4299      	cmp	r1, r3
 8004c5e:	bfde      	ittt	le
 8004c60:	2330      	movle	r3, #48	@ 0x30
 8004c62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c66:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004c6a:	1b92      	subs	r2, r2, r6
 8004c6c:	6122      	str	r2, [r4, #16]
 8004c6e:	f8cd a000 	str.w	sl, [sp]
 8004c72:	464b      	mov	r3, r9
 8004c74:	aa03      	add	r2, sp, #12
 8004c76:	4621      	mov	r1, r4
 8004c78:	4640      	mov	r0, r8
 8004c7a:	f7ff fee7 	bl	8004a4c <_printf_common>
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d14a      	bne.n	8004d18 <_printf_i+0x1f0>
 8004c82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c86:	b004      	add	sp, #16
 8004c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	f043 0320 	orr.w	r3, r3, #32
 8004c92:	6023      	str	r3, [r4, #0]
 8004c94:	4832      	ldr	r0, [pc, #200]	@ (8004d60 <_printf_i+0x238>)
 8004c96:	2778      	movs	r7, #120	@ 0x78
 8004c98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	6831      	ldr	r1, [r6, #0]
 8004ca0:	061f      	lsls	r7, r3, #24
 8004ca2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ca6:	d402      	bmi.n	8004cae <_printf_i+0x186>
 8004ca8:	065f      	lsls	r7, r3, #25
 8004caa:	bf48      	it	mi
 8004cac:	b2ad      	uxthmi	r5, r5
 8004cae:	6031      	str	r1, [r6, #0]
 8004cb0:	07d9      	lsls	r1, r3, #31
 8004cb2:	bf44      	itt	mi
 8004cb4:	f043 0320 	orrmi.w	r3, r3, #32
 8004cb8:	6023      	strmi	r3, [r4, #0]
 8004cba:	b11d      	cbz	r5, 8004cc4 <_printf_i+0x19c>
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	e7ad      	b.n	8004c1c <_printf_i+0xf4>
 8004cc0:	4826      	ldr	r0, [pc, #152]	@ (8004d5c <_printf_i+0x234>)
 8004cc2:	e7e9      	b.n	8004c98 <_printf_i+0x170>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	f023 0320 	bic.w	r3, r3, #32
 8004cca:	6023      	str	r3, [r4, #0]
 8004ccc:	e7f6      	b.n	8004cbc <_printf_i+0x194>
 8004cce:	4616      	mov	r6, r2
 8004cd0:	e7bd      	b.n	8004c4e <_printf_i+0x126>
 8004cd2:	6833      	ldr	r3, [r6, #0]
 8004cd4:	6825      	ldr	r5, [r4, #0]
 8004cd6:	6961      	ldr	r1, [r4, #20]
 8004cd8:	1d18      	adds	r0, r3, #4
 8004cda:	6030      	str	r0, [r6, #0]
 8004cdc:	062e      	lsls	r6, r5, #24
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	d501      	bpl.n	8004ce6 <_printf_i+0x1be>
 8004ce2:	6019      	str	r1, [r3, #0]
 8004ce4:	e002      	b.n	8004cec <_printf_i+0x1c4>
 8004ce6:	0668      	lsls	r0, r5, #25
 8004ce8:	d5fb      	bpl.n	8004ce2 <_printf_i+0x1ba>
 8004cea:	8019      	strh	r1, [r3, #0]
 8004cec:	2300      	movs	r3, #0
 8004cee:	6123      	str	r3, [r4, #16]
 8004cf0:	4616      	mov	r6, r2
 8004cf2:	e7bc      	b.n	8004c6e <_printf_i+0x146>
 8004cf4:	6833      	ldr	r3, [r6, #0]
 8004cf6:	1d1a      	adds	r2, r3, #4
 8004cf8:	6032      	str	r2, [r6, #0]
 8004cfa:	681e      	ldr	r6, [r3, #0]
 8004cfc:	6862      	ldr	r2, [r4, #4]
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4630      	mov	r0, r6
 8004d02:	f7fb fa65 	bl	80001d0 <memchr>
 8004d06:	b108      	cbz	r0, 8004d0c <_printf_i+0x1e4>
 8004d08:	1b80      	subs	r0, r0, r6
 8004d0a:	6060      	str	r0, [r4, #4]
 8004d0c:	6863      	ldr	r3, [r4, #4]
 8004d0e:	6123      	str	r3, [r4, #16]
 8004d10:	2300      	movs	r3, #0
 8004d12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d16:	e7aa      	b.n	8004c6e <_printf_i+0x146>
 8004d18:	6923      	ldr	r3, [r4, #16]
 8004d1a:	4632      	mov	r2, r6
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	4640      	mov	r0, r8
 8004d20:	47d0      	blx	sl
 8004d22:	3001      	adds	r0, #1
 8004d24:	d0ad      	beq.n	8004c82 <_printf_i+0x15a>
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	079b      	lsls	r3, r3, #30
 8004d2a:	d413      	bmi.n	8004d54 <_printf_i+0x22c>
 8004d2c:	68e0      	ldr	r0, [r4, #12]
 8004d2e:	9b03      	ldr	r3, [sp, #12]
 8004d30:	4298      	cmp	r0, r3
 8004d32:	bfb8      	it	lt
 8004d34:	4618      	movlt	r0, r3
 8004d36:	e7a6      	b.n	8004c86 <_printf_i+0x15e>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	4632      	mov	r2, r6
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	4640      	mov	r0, r8
 8004d40:	47d0      	blx	sl
 8004d42:	3001      	adds	r0, #1
 8004d44:	d09d      	beq.n	8004c82 <_printf_i+0x15a>
 8004d46:	3501      	adds	r5, #1
 8004d48:	68e3      	ldr	r3, [r4, #12]
 8004d4a:	9903      	ldr	r1, [sp, #12]
 8004d4c:	1a5b      	subs	r3, r3, r1
 8004d4e:	42ab      	cmp	r3, r5
 8004d50:	dcf2      	bgt.n	8004d38 <_printf_i+0x210>
 8004d52:	e7eb      	b.n	8004d2c <_printf_i+0x204>
 8004d54:	2500      	movs	r5, #0
 8004d56:	f104 0619 	add.w	r6, r4, #25
 8004d5a:	e7f5      	b.n	8004d48 <_printf_i+0x220>
 8004d5c:	08005a59 	.word	0x08005a59
 8004d60:	08005a6a 	.word	0x08005a6a

08004d64 <__sflush_r>:
 8004d64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d6c:	0716      	lsls	r6, r2, #28
 8004d6e:	4605      	mov	r5, r0
 8004d70:	460c      	mov	r4, r1
 8004d72:	d454      	bmi.n	8004e1e <__sflush_r+0xba>
 8004d74:	684b      	ldr	r3, [r1, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	dc02      	bgt.n	8004d80 <__sflush_r+0x1c>
 8004d7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	dd48      	ble.n	8004e12 <__sflush_r+0xae>
 8004d80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d82:	2e00      	cmp	r6, #0
 8004d84:	d045      	beq.n	8004e12 <__sflush_r+0xae>
 8004d86:	2300      	movs	r3, #0
 8004d88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004d8c:	682f      	ldr	r7, [r5, #0]
 8004d8e:	6a21      	ldr	r1, [r4, #32]
 8004d90:	602b      	str	r3, [r5, #0]
 8004d92:	d030      	beq.n	8004df6 <__sflush_r+0x92>
 8004d94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004d96:	89a3      	ldrh	r3, [r4, #12]
 8004d98:	0759      	lsls	r1, r3, #29
 8004d9a:	d505      	bpl.n	8004da8 <__sflush_r+0x44>
 8004d9c:	6863      	ldr	r3, [r4, #4]
 8004d9e:	1ad2      	subs	r2, r2, r3
 8004da0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004da2:	b10b      	cbz	r3, 8004da8 <__sflush_r+0x44>
 8004da4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004da6:	1ad2      	subs	r2, r2, r3
 8004da8:	2300      	movs	r3, #0
 8004daa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004dac:	6a21      	ldr	r1, [r4, #32]
 8004dae:	4628      	mov	r0, r5
 8004db0:	47b0      	blx	r6
 8004db2:	1c43      	adds	r3, r0, #1
 8004db4:	89a3      	ldrh	r3, [r4, #12]
 8004db6:	d106      	bne.n	8004dc6 <__sflush_r+0x62>
 8004db8:	6829      	ldr	r1, [r5, #0]
 8004dba:	291d      	cmp	r1, #29
 8004dbc:	d82b      	bhi.n	8004e16 <__sflush_r+0xb2>
 8004dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8004e68 <__sflush_r+0x104>)
 8004dc0:	40ca      	lsrs	r2, r1
 8004dc2:	07d6      	lsls	r6, r2, #31
 8004dc4:	d527      	bpl.n	8004e16 <__sflush_r+0xb2>
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	6062      	str	r2, [r4, #4]
 8004dca:	04d9      	lsls	r1, r3, #19
 8004dcc:	6922      	ldr	r2, [r4, #16]
 8004dce:	6022      	str	r2, [r4, #0]
 8004dd0:	d504      	bpl.n	8004ddc <__sflush_r+0x78>
 8004dd2:	1c42      	adds	r2, r0, #1
 8004dd4:	d101      	bne.n	8004dda <__sflush_r+0x76>
 8004dd6:	682b      	ldr	r3, [r5, #0]
 8004dd8:	b903      	cbnz	r3, 8004ddc <__sflush_r+0x78>
 8004dda:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ddc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dde:	602f      	str	r7, [r5, #0]
 8004de0:	b1b9      	cbz	r1, 8004e12 <__sflush_r+0xae>
 8004de2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004de6:	4299      	cmp	r1, r3
 8004de8:	d002      	beq.n	8004df0 <__sflush_r+0x8c>
 8004dea:	4628      	mov	r0, r5
 8004dec:	f7ff fca2 	bl	8004734 <_free_r>
 8004df0:	2300      	movs	r3, #0
 8004df2:	6363      	str	r3, [r4, #52]	@ 0x34
 8004df4:	e00d      	b.n	8004e12 <__sflush_r+0xae>
 8004df6:	2301      	movs	r3, #1
 8004df8:	4628      	mov	r0, r5
 8004dfa:	47b0      	blx	r6
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	1c50      	adds	r0, r2, #1
 8004e00:	d1c9      	bne.n	8004d96 <__sflush_r+0x32>
 8004e02:	682b      	ldr	r3, [r5, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0c6      	beq.n	8004d96 <__sflush_r+0x32>
 8004e08:	2b1d      	cmp	r3, #29
 8004e0a:	d001      	beq.n	8004e10 <__sflush_r+0xac>
 8004e0c:	2b16      	cmp	r3, #22
 8004e0e:	d11e      	bne.n	8004e4e <__sflush_r+0xea>
 8004e10:	602f      	str	r7, [r5, #0]
 8004e12:	2000      	movs	r0, #0
 8004e14:	e022      	b.n	8004e5c <__sflush_r+0xf8>
 8004e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e1a:	b21b      	sxth	r3, r3
 8004e1c:	e01b      	b.n	8004e56 <__sflush_r+0xf2>
 8004e1e:	690f      	ldr	r7, [r1, #16]
 8004e20:	2f00      	cmp	r7, #0
 8004e22:	d0f6      	beq.n	8004e12 <__sflush_r+0xae>
 8004e24:	0793      	lsls	r3, r2, #30
 8004e26:	680e      	ldr	r6, [r1, #0]
 8004e28:	bf08      	it	eq
 8004e2a:	694b      	ldreq	r3, [r1, #20]
 8004e2c:	600f      	str	r7, [r1, #0]
 8004e2e:	bf18      	it	ne
 8004e30:	2300      	movne	r3, #0
 8004e32:	eba6 0807 	sub.w	r8, r6, r7
 8004e36:	608b      	str	r3, [r1, #8]
 8004e38:	f1b8 0f00 	cmp.w	r8, #0
 8004e3c:	dde9      	ble.n	8004e12 <__sflush_r+0xae>
 8004e3e:	6a21      	ldr	r1, [r4, #32]
 8004e40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e42:	4643      	mov	r3, r8
 8004e44:	463a      	mov	r2, r7
 8004e46:	4628      	mov	r0, r5
 8004e48:	47b0      	blx	r6
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	dc08      	bgt.n	8004e60 <__sflush_r+0xfc>
 8004e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e56:	81a3      	strh	r3, [r4, #12]
 8004e58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e60:	4407      	add	r7, r0
 8004e62:	eba8 0800 	sub.w	r8, r8, r0
 8004e66:	e7e7      	b.n	8004e38 <__sflush_r+0xd4>
 8004e68:	20400001 	.word	0x20400001

08004e6c <_fflush_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	690b      	ldr	r3, [r1, #16]
 8004e70:	4605      	mov	r5, r0
 8004e72:	460c      	mov	r4, r1
 8004e74:	b913      	cbnz	r3, 8004e7c <_fflush_r+0x10>
 8004e76:	2500      	movs	r5, #0
 8004e78:	4628      	mov	r0, r5
 8004e7a:	bd38      	pop	{r3, r4, r5, pc}
 8004e7c:	b118      	cbz	r0, 8004e86 <_fflush_r+0x1a>
 8004e7e:	6a03      	ldr	r3, [r0, #32]
 8004e80:	b90b      	cbnz	r3, 8004e86 <_fflush_r+0x1a>
 8004e82:	f7ff fa33 	bl	80042ec <__sinit>
 8004e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f3      	beq.n	8004e76 <_fflush_r+0xa>
 8004e8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004e90:	07d0      	lsls	r0, r2, #31
 8004e92:	d404      	bmi.n	8004e9e <_fflush_r+0x32>
 8004e94:	0599      	lsls	r1, r3, #22
 8004e96:	d402      	bmi.n	8004e9e <_fflush_r+0x32>
 8004e98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e9a:	f7ff fc3a 	bl	8004712 <__retarget_lock_acquire_recursive>
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	f7ff ff5f 	bl	8004d64 <__sflush_r>
 8004ea6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ea8:	07da      	lsls	r2, r3, #31
 8004eaa:	4605      	mov	r5, r0
 8004eac:	d4e4      	bmi.n	8004e78 <_fflush_r+0xc>
 8004eae:	89a3      	ldrh	r3, [r4, #12]
 8004eb0:	059b      	lsls	r3, r3, #22
 8004eb2:	d4e1      	bmi.n	8004e78 <_fflush_r+0xc>
 8004eb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004eb6:	f7ff fc2d 	bl	8004714 <__retarget_lock_release_recursive>
 8004eba:	e7dd      	b.n	8004e78 <_fflush_r+0xc>

08004ebc <__swhatbuf_r>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec4:	2900      	cmp	r1, #0
 8004ec6:	b096      	sub	sp, #88	@ 0x58
 8004ec8:	4615      	mov	r5, r2
 8004eca:	461e      	mov	r6, r3
 8004ecc:	da0d      	bge.n	8004eea <__swhatbuf_r+0x2e>
 8004ece:	89a3      	ldrh	r3, [r4, #12]
 8004ed0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004ed4:	f04f 0100 	mov.w	r1, #0
 8004ed8:	bf14      	ite	ne
 8004eda:	2340      	movne	r3, #64	@ 0x40
 8004edc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	6031      	str	r1, [r6, #0]
 8004ee4:	602b      	str	r3, [r5, #0]
 8004ee6:	b016      	add	sp, #88	@ 0x58
 8004ee8:	bd70      	pop	{r4, r5, r6, pc}
 8004eea:	466a      	mov	r2, sp
 8004eec:	f000 f848 	bl	8004f80 <_fstat_r>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	dbec      	blt.n	8004ece <__swhatbuf_r+0x12>
 8004ef4:	9901      	ldr	r1, [sp, #4]
 8004ef6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004efa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004efe:	4259      	negs	r1, r3
 8004f00:	4159      	adcs	r1, r3
 8004f02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f06:	e7eb      	b.n	8004ee0 <__swhatbuf_r+0x24>

08004f08 <__smakebuf_r>:
 8004f08:	898b      	ldrh	r3, [r1, #12]
 8004f0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f0c:	079d      	lsls	r5, r3, #30
 8004f0e:	4606      	mov	r6, r0
 8004f10:	460c      	mov	r4, r1
 8004f12:	d507      	bpl.n	8004f24 <__smakebuf_r+0x1c>
 8004f14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f18:	6023      	str	r3, [r4, #0]
 8004f1a:	6123      	str	r3, [r4, #16]
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	6163      	str	r3, [r4, #20]
 8004f20:	b003      	add	sp, #12
 8004f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f24:	ab01      	add	r3, sp, #4
 8004f26:	466a      	mov	r2, sp
 8004f28:	f7ff ffc8 	bl	8004ebc <__swhatbuf_r>
 8004f2c:	9f00      	ldr	r7, [sp, #0]
 8004f2e:	4605      	mov	r5, r0
 8004f30:	4639      	mov	r1, r7
 8004f32:	4630      	mov	r0, r6
 8004f34:	f7ff f8c2 	bl	80040bc <_malloc_r>
 8004f38:	b948      	cbnz	r0, 8004f4e <__smakebuf_r+0x46>
 8004f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f3e:	059a      	lsls	r2, r3, #22
 8004f40:	d4ee      	bmi.n	8004f20 <__smakebuf_r+0x18>
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	f043 0302 	orr.w	r3, r3, #2
 8004f4a:	81a3      	strh	r3, [r4, #12]
 8004f4c:	e7e2      	b.n	8004f14 <__smakebuf_r+0xc>
 8004f4e:	89a3      	ldrh	r3, [r4, #12]
 8004f50:	6020      	str	r0, [r4, #0]
 8004f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f56:	81a3      	strh	r3, [r4, #12]
 8004f58:	9b01      	ldr	r3, [sp, #4]
 8004f5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004f5e:	b15b      	cbz	r3, 8004f78 <__smakebuf_r+0x70>
 8004f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f64:	4630      	mov	r0, r6
 8004f66:	f000 f81d 	bl	8004fa4 <_isatty_r>
 8004f6a:	b128      	cbz	r0, 8004f78 <__smakebuf_r+0x70>
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	f023 0303 	bic.w	r3, r3, #3
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	81a3      	strh	r3, [r4, #12]
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	431d      	orrs	r5, r3
 8004f7c:	81a5      	strh	r5, [r4, #12]
 8004f7e:	e7cf      	b.n	8004f20 <__smakebuf_r+0x18>

08004f80 <_fstat_r>:
 8004f80:	b538      	push	{r3, r4, r5, lr}
 8004f82:	4d07      	ldr	r5, [pc, #28]	@ (8004fa0 <_fstat_r+0x20>)
 8004f84:	2300      	movs	r3, #0
 8004f86:	4604      	mov	r4, r0
 8004f88:	4608      	mov	r0, r1
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	602b      	str	r3, [r5, #0]
 8004f8e:	f7fc f976 	bl	800127e <_fstat>
 8004f92:	1c43      	adds	r3, r0, #1
 8004f94:	d102      	bne.n	8004f9c <_fstat_r+0x1c>
 8004f96:	682b      	ldr	r3, [r5, #0]
 8004f98:	b103      	cbz	r3, 8004f9c <_fstat_r+0x1c>
 8004f9a:	6023      	str	r3, [r4, #0]
 8004f9c:	bd38      	pop	{r3, r4, r5, pc}
 8004f9e:	bf00      	nop
 8004fa0:	200002c0 	.word	0x200002c0

08004fa4 <_isatty_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	4d06      	ldr	r5, [pc, #24]	@ (8004fc0 <_isatty_r+0x1c>)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	4604      	mov	r4, r0
 8004fac:	4608      	mov	r0, r1
 8004fae:	602b      	str	r3, [r5, #0]
 8004fb0:	f7fc f96a 	bl	8001288 <_isatty>
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	d102      	bne.n	8004fbe <_isatty_r+0x1a>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	b103      	cbz	r3, 8004fbe <_isatty_r+0x1a>
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	bd38      	pop	{r3, r4, r5, pc}
 8004fc0:	200002c0 	.word	0x200002c0

08004fc4 <_init>:
 8004fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc6:	bf00      	nop
 8004fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fca:	bc08      	pop	{r3}
 8004fcc:	469e      	mov	lr, r3
 8004fce:	4770      	bx	lr

08004fd0 <_fini>:
 8004fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd2:	bf00      	nop
 8004fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd6:	bc08      	pop	{r3}
 8004fd8:	469e      	mov	lr, r3
 8004fda:	4770      	bx	lr

Disassembly of section .code_in_ram:

08004fdc <mcuJumpToApplication>:
{
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	4604      	mov	r4, r0
   FLASH->CR |= FLASH_CR_LOCK;
 8004fe0:	4a26      	ldr	r2, [pc, #152]	@ (800507c <mcuJumpToApplication+0xa0>)
 8004fe2:	6913      	ldr	r3, [r2, #16]
 8004fe4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004fe8:	6113      	str	r3, [r2, #16]
   NVIC->ICER[0] = 0xFFFFFFFF;
 8004fea:	4b25      	ldr	r3, [pc, #148]	@ (8005080 <mcuJumpToApplication+0xa4>)
 8004fec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ff0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
   NVIC->ICER[1] = 0xFFFFFFFF;
 8004ff4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   NVIC->ICER[2] = 0xFFFFFFFF;
 8004ff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
   NVIC->ICER[3] = 0xFFFFFFFF;
 8004ffc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
   NVIC->ICER[4] = 0xFFFFFFFF;
 8005000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
   NVIC->ICER[5] = 0xFFFFFFFF;
 8005004:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
   NVIC->ICER[6] = 0xFFFFFFFF;
 8005008:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
   NVIC->ICER[7] = 0xFFFFFFFF;
 800500c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
   NVIC->ICPR[0] = 0xFFFFFFFF;
 8005010:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
   NVIC->ICPR[1] = 0xFFFFFFFF;
 8005014:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
   NVIC->ICPR[2] = 0xFFFFFFFF;
 8005018:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
   NVIC->ICPR[3] = 0xFFFFFFFF;
 800501c:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
   NVIC->ICPR[4] = 0xFFFFFFFF;
 8005020:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
   NVIC->ICPR[5] = 0xFFFFFFFF;
 8005024:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
   NVIC->ICPR[6] = 0xFFFFFFFF;
 8005028:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
   NVIC->ICPR[7] = 0xFFFFFFFF;
 800502c:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
   SysTick->CTRL = 0;
 8005030:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005034:	2200      	movs	r2, #0
 8005036:	611a      	str	r2, [r3, #16]
   SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;
 8005038:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8005042:	605a      	str	r2, [r3, #4]
   SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk |
 8005044:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005046:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 800504a:	625a      	str	r2, [r3, #36]	@ 0x24
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800504c:	f3ef 8314 	mrs	r3, CONTROL
   if(__get_CONTROL() & CONTROL_SPSEL_Msk)
 8005050:	f013 0f02 	tst.w	r3, #2
 8005054:	d00b      	beq.n	800506e <mcuJumpToApplication+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8005056:	f3ef 8309 	mrs	r3, PSP
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800505a:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800505e:	f3ef 8314 	mrs	r3, CONTROL
     __set_CONTROL( __get_CONTROL() & ~CONTROL_SPSEL_Msk);
 8005062:	f023 0302 	bic.w	r3, r3, #2
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8005066:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 800506a:	f3bf 8f6f 	isb	sy
   stackPointer = *((uint32_t*)address);
 800506e:	6820      	ldr	r0, [r4, #0]
   programCounter = *((uint32_t*)(address+4));
 8005070:	6861      	ldr	r1, [r4, #4]
   SCB->VTOR = (uint32_t) address;
 8005072:	4b04      	ldr	r3, [pc, #16]	@ (8005084 <mcuJumpToApplication+0xa8>)
 8005074:	609c      	str	r4, [r3, #8]
   mcuBootAppImageAsm(stackPointer, programCounter);
 8005076:	f7fd fbb7 	bl	80027e8 <mcuBootAppImageAsm>
 800507a:	bf00      	nop
 800507c:	40023c00 	.word	0x40023c00
 8005080:	e000e100 	.word	0xe000e100
 8005084:	e000ed00 	.word	0xe000ed00
