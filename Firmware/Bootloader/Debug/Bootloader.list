
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .code_in_ram  000000ac  08006b70  08006b70  00007b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000dc4  08006c20  08006c20  00007c20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080079e4  080079e4  000090b8  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  080079e4  080079e4  000089e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080079ec  080079ec  000090b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080079ec  080079ec  000089ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  080079f0  080079f0  000089f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         000000b8  20000000  080079f4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  000090b8  2**0
                  CONTENTS
 11 .bss          00000410  200000b8  200000b8  000090b8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200004c8  200004c8  000090b8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000090b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ba3b  00000000  00000000  000090e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000455a  00000000  00000000  00024b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001060  00000000  00000000  00029080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c75  00000000  00000000  0002a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000267fa  00000000  00000000  0002ad55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bb05  00000000  00000000  0005154f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d46ad  00000000  00000000  0006d054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00141701  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003694  00000000  00000000  00141744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 00009702  00000000  00000000  00144dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000067  00000000  00000000  0014e4da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b58 	.word	0x08006b58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	08006b58 	.word	0x08006b58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b30:	f000 b9be 	b.w	8000eb0 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f83c 	bl	8000bb8 <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_d2lz>:
 8000b4c:	b538      	push	{r3, r4, r5, lr}
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2300      	movs	r3, #0
 8000b52:	4604      	mov	r4, r0
 8000b54:	460d      	mov	r5, r1
 8000b56:	f7ff ffb9 	bl	8000acc <__aeabi_dcmplt>
 8000b5a:	b928      	cbnz	r0, 8000b68 <__aeabi_d2lz+0x1c>
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	4629      	mov	r1, r5
 8000b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b64:	f000 b80a 	b.w	8000b7c <__aeabi_d2ulz>
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b6e:	f000 f805 	bl	8000b7c <__aeabi_d2ulz>
 8000b72:	4240      	negs	r0, r0
 8000b74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b78:	bd38      	pop	{r3, r4, r5, pc}
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2ulz>:
 8000b7c:	b5d0      	push	{r4, r6, r7, lr}
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <__aeabi_d2ulz+0x34>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	4606      	mov	r6, r0
 8000b84:	460f      	mov	r7, r1
 8000b86:	f7ff fd2f 	bl	80005e8 <__aeabi_dmul>
 8000b8a:	f000 f993 	bl	8000eb4 <__aeabi_d2uiz>
 8000b8e:	4604      	mov	r4, r0
 8000b90:	f7ff fcb0 	bl	80004f4 <__aeabi_ui2d>
 8000b94:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <__aeabi_d2ulz+0x38>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	f7ff fd26 	bl	80005e8 <__aeabi_dmul>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	4630      	mov	r0, r6
 8000ba2:	4639      	mov	r1, r7
 8000ba4:	f7ff fb68 	bl	8000278 <__aeabi_dsub>
 8000ba8:	f000 f984 	bl	8000eb4 <__aeabi_d2uiz>
 8000bac:	4621      	mov	r1, r4
 8000bae:	bdd0      	pop	{r4, r6, r7, pc}
 8000bb0:	3df00000 	.word	0x3df00000
 8000bb4:	41f00000 	.word	0x41f00000

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	468e      	mov	lr, r1
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	4688      	mov	r8, r1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d14a      	bne.n	8000c5e <__udivmoddi4+0xa6>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4617      	mov	r7, r2
 8000bcc:	d962      	bls.n	8000c94 <__udivmoddi4+0xdc>
 8000bce:	fab2 f682 	clz	r6, r2
 8000bd2:	b14e      	cbz	r6, 8000be8 <__udivmoddi4+0x30>
 8000bd4:	f1c6 0320 	rsb	r3, r6, #32
 8000bd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000be0:	40b7      	lsls	r7, r6
 8000be2:	ea43 0808 	orr.w	r8, r3, r8
 8000be6:	40b4      	lsls	r4, r6
 8000be8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bec:	fa1f fc87 	uxth.w	ip, r7
 8000bf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bf4:	0c23      	lsrs	r3, r4, #16
 8000bf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x62>
 8000c06:	18fb      	adds	r3, r7, r3
 8000c08:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c0c:	f080 80ea 	bcs.w	8000de4 <__udivmoddi4+0x22c>
 8000c10:	429a      	cmp	r2, r3
 8000c12:	f240 80e7 	bls.w	8000de4 <__udivmoddi4+0x22c>
 8000c16:	3902      	subs	r1, #2
 8000c18:	443b      	add	r3, r7
 8000c1a:	1a9a      	subs	r2, r3, r2
 8000c1c:	b2a3      	uxth	r3, r4
 8000c1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c2e:	459c      	cmp	ip, r3
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0x8e>
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c38:	f080 80d6 	bcs.w	8000de8 <__udivmoddi4+0x230>
 8000c3c:	459c      	cmp	ip, r3
 8000c3e:	f240 80d3 	bls.w	8000de8 <__udivmoddi4+0x230>
 8000c42:	443b      	add	r3, r7
 8000c44:	3802      	subs	r0, #2
 8000c46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c4a:	eba3 030c 	sub.w	r3, r3, ip
 8000c4e:	2100      	movs	r1, #0
 8000c50:	b11d      	cbz	r5, 8000c5a <__udivmoddi4+0xa2>
 8000c52:	40f3      	lsrs	r3, r6
 8000c54:	2200      	movs	r2, #0
 8000c56:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d905      	bls.n	8000c6e <__udivmoddi4+0xb6>
 8000c62:	b10d      	cbz	r5, 8000c68 <__udivmoddi4+0xb0>
 8000c64:	e9c5 0100 	strd	r0, r1, [r5]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4608      	mov	r0, r1
 8000c6c:	e7f5      	b.n	8000c5a <__udivmoddi4+0xa2>
 8000c6e:	fab3 f183 	clz	r1, r3
 8000c72:	2900      	cmp	r1, #0
 8000c74:	d146      	bne.n	8000d04 <__udivmoddi4+0x14c>
 8000c76:	4573      	cmp	r3, lr
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xc8>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 8105 	bhi.w	8000e8a <__udivmoddi4+0x2d2>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	4690      	mov	r8, r2
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e5      	beq.n	8000c5a <__udivmoddi4+0xa2>
 8000c8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000c92:	e7e2      	b.n	8000c5a <__udivmoddi4+0xa2>
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f000 8090 	beq.w	8000dba <__udivmoddi4+0x202>
 8000c9a:	fab2 f682 	clz	r6, r2
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	f040 80a4 	bne.w	8000dec <__udivmoddi4+0x234>
 8000ca4:	1a8a      	subs	r2, r1, r2
 8000ca6:	0c03      	lsrs	r3, r0, #16
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	b280      	uxth	r0, r0
 8000cae:	b2bc      	uxth	r4, r7
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cb6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x11e>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x11c>
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	f200 80e0 	bhi.w	8000e94 <__udivmoddi4+0x2dc>
 8000cd4:	46c4      	mov	ip, r8
 8000cd6:	1a9b      	subs	r3, r3, r2
 8000cd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cdc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ce0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ce4:	fb02 f404 	mul.w	r4, r2, r4
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x144>
 8000cec:	18fb      	adds	r3, r7, r3
 8000cee:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x142>
 8000cf4:	429c      	cmp	r4, r3
 8000cf6:	f200 80ca 	bhi.w	8000e8e <__udivmoddi4+0x2d6>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	1b1b      	subs	r3, r3, r4
 8000cfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d02:	e7a5      	b.n	8000c50 <__udivmoddi4+0x98>
 8000d04:	f1c1 0620 	rsb	r6, r1, #32
 8000d08:	408b      	lsls	r3, r1
 8000d0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d0e:	431f      	orrs	r7, r3
 8000d10:	fa0e f401 	lsl.w	r4, lr, r1
 8000d14:	fa20 f306 	lsr.w	r3, r0, r6
 8000d18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d20:	4323      	orrs	r3, r4
 8000d22:	fa00 f801 	lsl.w	r8, r0, r1
 8000d26:	fa1f fc87 	uxth.w	ip, r7
 8000d2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d2e:	0c1c      	lsrs	r4, r3, #16
 8000d30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x1a0>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d4a:	f080 809c 	bcs.w	8000e86 <__udivmoddi4+0x2ce>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f240 8099 	bls.w	8000e86 <__udivmoddi4+0x2ce>
 8000d54:	3802      	subs	r0, #2
 8000d56:	443c      	add	r4, r7
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	fa1f fe83 	uxth.w	lr, r3
 8000d60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d64:	fb09 4413 	mls	r4, r9, r3, r4
 8000d68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d70:	45a4      	cmp	ip, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1ce>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d7a:	f080 8082 	bcs.w	8000e82 <__udivmoddi4+0x2ca>
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d97f      	bls.n	8000e82 <__udivmoddi4+0x2ca>
 8000d82:	3b02      	subs	r3, #2
 8000d84:	443c      	add	r4, r7
 8000d86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d8a:	eba4 040c 	sub.w	r4, r4, ip
 8000d8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d92:	4564      	cmp	r4, ip
 8000d94:	4673      	mov	r3, lr
 8000d96:	46e1      	mov	r9, ip
 8000d98:	d362      	bcc.n	8000e60 <__udivmoddi4+0x2a8>
 8000d9a:	d05f      	beq.n	8000e5c <__udivmoddi4+0x2a4>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x1fe>
 8000d9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000da2:	eb64 0409 	sbc.w	r4, r4, r9
 8000da6:	fa04 f606 	lsl.w	r6, r4, r6
 8000daa:	fa22 f301 	lsr.w	r3, r2, r1
 8000dae:	431e      	orrs	r6, r3
 8000db0:	40cc      	lsrs	r4, r1
 8000db2:	e9c5 6400 	strd	r6, r4, [r5]
 8000db6:	2100      	movs	r1, #0
 8000db8:	e74f      	b.n	8000c5a <__udivmoddi4+0xa2>
 8000dba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dbe:	0c01      	lsrs	r1, r0, #16
 8000dc0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dc4:	b280      	uxth	r0, r0
 8000dc6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4638      	mov	r0, r7
 8000dce:	463c      	mov	r4, r7
 8000dd0:	46b8      	mov	r8, r7
 8000dd2:	46be      	mov	lr, r7
 8000dd4:	2620      	movs	r6, #32
 8000dd6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dda:	eba2 0208 	sub.w	r2, r2, r8
 8000dde:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000de2:	e766      	b.n	8000cb2 <__udivmoddi4+0xfa>
 8000de4:	4601      	mov	r1, r0
 8000de6:	e718      	b.n	8000c1a <__udivmoddi4+0x62>
 8000de8:	4610      	mov	r0, r2
 8000dea:	e72c      	b.n	8000c46 <__udivmoddi4+0x8e>
 8000dec:	f1c6 0220 	rsb	r2, r6, #32
 8000df0:	fa2e f302 	lsr.w	r3, lr, r2
 8000df4:	40b7      	lsls	r7, r6
 8000df6:	40b1      	lsls	r1, r6
 8000df8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dfc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e00:	430a      	orrs	r2, r1
 8000e02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e06:	b2bc      	uxth	r4, r7
 8000e08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb08 f904 	mul.w	r9, r8, r4
 8000e16:	40b0      	lsls	r0, r6
 8000e18:	4589      	cmp	r9, r1
 8000e1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e1e:	b280      	uxth	r0, r0
 8000e20:	d93e      	bls.n	8000ea0 <__udivmoddi4+0x2e8>
 8000e22:	1879      	adds	r1, r7, r1
 8000e24:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e28:	d201      	bcs.n	8000e2e <__udivmoddi4+0x276>
 8000e2a:	4589      	cmp	r9, r1
 8000e2c:	d81f      	bhi.n	8000e6e <__udivmoddi4+0x2b6>
 8000e2e:	eba1 0109 	sub.w	r1, r1, r9
 8000e32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e36:	fb09 f804 	mul.w	r8, r9, r4
 8000e3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e3e:	b292      	uxth	r2, r2
 8000e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e44:	4542      	cmp	r2, r8
 8000e46:	d229      	bcs.n	8000e9c <__udivmoddi4+0x2e4>
 8000e48:	18ba      	adds	r2, r7, r2
 8000e4a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e4e:	d2c4      	bcs.n	8000dda <__udivmoddi4+0x222>
 8000e50:	4542      	cmp	r2, r8
 8000e52:	d2c2      	bcs.n	8000dda <__udivmoddi4+0x222>
 8000e54:	f1a9 0102 	sub.w	r1, r9, #2
 8000e58:	443a      	add	r2, r7
 8000e5a:	e7be      	b.n	8000dda <__udivmoddi4+0x222>
 8000e5c:	45f0      	cmp	r8, lr
 8000e5e:	d29d      	bcs.n	8000d9c <__udivmoddi4+0x1e4>
 8000e60:	ebbe 0302 	subs.w	r3, lr, r2
 8000e64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e68:	3801      	subs	r0, #1
 8000e6a:	46e1      	mov	r9, ip
 8000e6c:	e796      	b.n	8000d9c <__udivmoddi4+0x1e4>
 8000e6e:	eba7 0909 	sub.w	r9, r7, r9
 8000e72:	4449      	add	r1, r9
 8000e74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7c:	fb09 f804 	mul.w	r8, r9, r4
 8000e80:	e7db      	b.n	8000e3a <__udivmoddi4+0x282>
 8000e82:	4673      	mov	r3, lr
 8000e84:	e77f      	b.n	8000d86 <__udivmoddi4+0x1ce>
 8000e86:	4650      	mov	r0, sl
 8000e88:	e766      	b.n	8000d58 <__udivmoddi4+0x1a0>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e6fd      	b.n	8000c8a <__udivmoddi4+0xd2>
 8000e8e:	443b      	add	r3, r7
 8000e90:	3a02      	subs	r2, #2
 8000e92:	e733      	b.n	8000cfc <__udivmoddi4+0x144>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	443b      	add	r3, r7
 8000e9a:	e71c      	b.n	8000cd6 <__udivmoddi4+0x11e>
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	e79c      	b.n	8000dda <__udivmoddi4+0x222>
 8000ea0:	eba1 0109 	sub.w	r1, r1, r9
 8000ea4:	46c4      	mov	ip, r8
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fb09 f804 	mul.w	r8, r9, r4
 8000eae:	e7c4      	b.n	8000e3a <__udivmoddi4+0x282>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_d2uiz>:
 8000eb4:	004a      	lsls	r2, r1, #1
 8000eb6:	d211      	bcs.n	8000edc <__aeabi_d2uiz+0x28>
 8000eb8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ebc:	d211      	bcs.n	8000ee2 <__aeabi_d2uiz+0x2e>
 8000ebe:	d50d      	bpl.n	8000edc <__aeabi_d2uiz+0x28>
 8000ec0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ec4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ec8:	d40e      	bmi.n	8000ee8 <__aeabi_d2uiz+0x34>
 8000eca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ece:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ed2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ed6:	fa23 f002 	lsr.w	r0, r3, r2
 8000eda:	4770      	bx	lr
 8000edc:	f04f 0000 	mov.w	r0, #0
 8000ee0:	4770      	bx	lr
 8000ee2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ee6:	d102      	bne.n	8000eee <__aeabi_d2uiz+0x3a>
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000eec:	4770      	bx	lr
 8000eee:	f04f 0000 	mov.w	r0, #0
 8000ef2:	4770      	bx	lr

08000ef4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef6:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	2400      	movs	r4, #0
 8000efa:	9405      	str	r4, [sp, #20]
 8000efc:	9406      	str	r4, [sp, #24]
 8000efe:	9407      	str	r4, [sp, #28]
 8000f00:	9408      	str	r4, [sp, #32]
 8000f02:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f04:	9400      	str	r4, [sp, #0]
 8000f06:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f12:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000f16:	9200      	str	r2, [sp, #0]
 8000f18:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	9401      	str	r4, [sp, #4]
 8000f1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f1e:	f042 0201 	orr.w	r2, r2, #1
 8000f22:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f26:	f002 0201 	and.w	r2, r2, #1
 8000f2a:	9201      	str	r2, [sp, #4]
 8000f2c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	9402      	str	r4, [sp, #8]
 8000f30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f32:	f042 0204 	orr.w	r2, r2, #4
 8000f36:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f3a:	f002 0204 	and.w	r2, r2, #4
 8000f3e:	9202      	str	r2, [sp, #8]
 8000f40:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f42:	9403      	str	r4, [sp, #12]
 8000f44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f46:	f042 0208 	orr.w	r2, r2, #8
 8000f4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f4e:	f002 0208 	and.w	r2, r2, #8
 8000f52:	9203      	str	r2, [sp, #12]
 8000f54:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	9404      	str	r4, [sp, #16]
 8000f58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f5a:	f042 0202 	orr.w	r2, r2, #2
 8000f5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	9304      	str	r3, [sp, #16]
 8000f68:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000f6a:	4f12      	ldr	r7, [pc, #72]	@ (8000fb4 <MX_GPIO_Init+0xc0>)
 8000f6c:	4622      	mov	r2, r4
 8000f6e:	2110      	movs	r1, #16
 8000f70:	4638      	mov	r0, r7
 8000f72:	f000 ff2f 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f76:	4d10      	ldr	r5, [pc, #64]	@ (8000fb8 <MX_GPIO_Init+0xc4>)
 8000f78:	4622      	mov	r2, r4
 8000f7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f7e:	4628      	mov	r0, r5
 8000f80:	f000 ff28 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000f84:	2310      	movs	r3, #16
 8000f86:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2601      	movs	r6, #1
 8000f8a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000f90:	a905      	add	r1, sp, #20
 8000f92:	4638      	mov	r0, r7
 8000f94:	f000 fe28 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000f98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f9c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	a905      	add	r1, sp, #20
 8000fa6:	4628      	mov	r0, r5
 8000fa8:	f000 fe1e 	bl	8001be8 <HAL_GPIO_Init>

}
 8000fac:	b00b      	add	sp, #44	@ 0x2c
 8000fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40020c00 	.word	0x40020c00

08000fbc <ITM_SendChar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fbc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fc0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000fc4:	f013 0f01 	tst.w	r3, #1
 8000fc8:	d011      	beq.n	8000fee <ITM_SendChar+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fca:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fce:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fd2:	f013 0f01 	tst.w	r3, #1
 8000fd6:	d101      	bne.n	8000fdc <ITM_SendChar+0x20>
 8000fd8:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8000fda:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fdc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f9      	beq.n	8000fda <ITM_SendChar+0x1e>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fe6:	b2c3      	uxtb	r3, r0
 8000fe8:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000fec:	7013      	strb	r3, [r2, #0]
  }
  return (ch);
}
 8000fee:	4770      	bx	lr

08000ff0 <w25q_lock>:
	HAL_Delay(ms);
}

static void w25q_lock(void *user_ctx) {

}
 8000ff0:	4770      	bx	lr

08000ff2 <w25q_unlock>:
static void w25q_unlock(void *user_ctx) {

}
 8000ff2:	4770      	bx	lr

08000ff4 <w25q_spi_init>:
{
 8000ff4:	b500      	push	{lr}
 8000ff6:	b083      	sub	sp, #12
	MX_SPI1_Init();
 8000ff8:	f000 f9b8 	bl	800136c <MX_SPI1_Init>
	STM32_LOGI(TAG, "SPI inicializado\r\n");
 8000ffc:	f004 f9e4 	bl	80053c8 <stm32_log_timestamp>
 8001000:	4603      	mov	r3, r0
 8001002:	4905      	ldr	r1, [pc, #20]	@ (8001018 <w25q_spi_init+0x24>)
 8001004:	9100      	str	r1, [sp, #0]
 8001006:	4a05      	ldr	r2, [pc, #20]	@ (800101c <w25q_spi_init+0x28>)
 8001008:	2003      	movs	r0, #3
 800100a:	f004 f9e1 	bl	80053d0 <stm32_log_write>
}
 800100e:	2000      	movs	r0, #0
 8001010:	b003      	add	sp, #12
 8001012:	f85d fb04 	ldr.w	pc, [sp], #4
 8001016:	bf00      	nop
 8001018:	08006c40 	.word	0x08006c40
 800101c:	08006c20 	.word	0x08006c20

08001020 <w25q_delay_ms>:
{
 8001020:	b508      	push	{r3, lr}
	HAL_Delay(ms);
 8001022:	f000 fb8f 	bl	8001744 <HAL_Delay>
}
 8001026:	bd08      	pop	{r3, pc}

08001028 <w25q_cs_control>:
{
 8001028:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, level ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800102a:	f081 0201 	eor.w	r2, r1, #1
 800102e:	2110      	movs	r1, #16
 8001030:	4801      	ldr	r0, [pc, #4]	@ (8001038 <w25q_cs_control+0x10>)
 8001032:	f000 fecf 	bl	8001dd4 <HAL_GPIO_WritePin>
}
 8001036:	bd08      	pop	{r3, pc}
 8001038:	40020800 	.word	0x40020800

0800103c <w25q_spi_write_read>:
{
 800103c:	b500      	push	{lr}
 800103e:	b083      	sub	sp, #12
 8001040:	4610      	mov	r0, r2
 8001042:	461a      	mov	r2, r3
	if(tx == NULL)
 8001044:	b159      	cbz	r1, 800105e <w25q_spi_write_read+0x22>
	else if(rx == NULL)
 8001046:	b190      	cbz	r0, 800106e <w25q_spi_write_read+0x32>
		ret = HAL_SPI_TransmitReceive(&hspi1, tx, rx, len, HAL_MAX_DELAY);
 8001048:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	b293      	uxth	r3, r2
 8001050:	4602      	mov	r2, r0
 8001052:	480a      	ldr	r0, [pc, #40]	@ (800107c <w25q_spi_write_read+0x40>)
 8001054:	f001 fc51 	bl	80028fa <HAL_SPI_TransmitReceive>
}
 8001058:	b003      	add	sp, #12
 800105a:	f85d fb04 	ldr.w	pc, [sp], #4
		ret = HAL_SPI_Receive(&hspi1, rx, len, HAL_MAX_DELAY);
 800105e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001062:	b292      	uxth	r2, r2
 8001064:	4601      	mov	r1, r0
 8001066:	4805      	ldr	r0, [pc, #20]	@ (800107c <w25q_spi_write_read+0x40>)
 8001068:	f001 fd71 	bl	8002b4e <HAL_SPI_Receive>
 800106c:	e7f4      	b.n	8001058 <w25q_spi_write_read+0x1c>
		ret = HAL_SPI_Transmit(&hspi1, tx, len, HAL_MAX_DELAY);
 800106e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001072:	b292      	uxth	r2, r2
 8001074:	4801      	ldr	r0, [pc, #4]	@ (800107c <w25q_spi_write_read+0x40>)
 8001076:	f001 fb5e 	bl	8002736 <HAL_SPI_Transmit>
 800107a:	e7ed      	b.n	8001058 <w25q_spi_write_read+0x1c>
 800107c:	20000230 	.word	0x20000230

08001080 <stm32_log_out>:
int stm32_log_out(int ch, lwprintf_t* p) {
 8001080:	b510      	push	{r4, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	4604      	mov	r4, r0
	uint8_t c = (uint8_t)ch;
 8001086:	b2c3      	uxtb	r3, r0
 8001088:	f88d 3007 	strb.w	r3, [sp, #7]
	if (c == '\0') {
 800108c:	b913      	cbnz	r3, 8001094 <stm32_log_out+0x14>
}
 800108e:	4620      	mov	r0, r4
 8001090:	b002      	add	sp, #8
 8001092:	bd10      	pop	{r4, pc}
	ITM_SendChar(ch);
 8001094:	f7ff ff92 	bl	8000fbc <ITM_SendChar>
	HAL_UART_Transmit(&huart1, &c, 1, 1);
 8001098:	2301      	movs	r3, #1
 800109a:	461a      	mov	r2, r3
 800109c:	f10d 0107 	add.w	r1, sp, #7
 80010a0:	4801      	ldr	r0, [pc, #4]	@ (80010a8 <stm32_log_out+0x28>)
 80010a2:	f001 ff40 	bl	8002f26 <HAL_UART_Transmit>
	return ch;
 80010a6:	e7f2      	b.n	800108e <stm32_log_out+0xe>
 80010a8:	200002d4 	.word	0x200002d4

080010ac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80010ac:	b500      	push	{lr}
 80010ae:	b085      	sub	sp, #20
	/* USER CODE BEGIN Error_Handler_Debug */
	STM32_LOGE(TAG, "%s, line: %d", __FILE__,__LINE__);
 80010b0:	f004 f98a 	bl	80053c8 <stm32_log_timestamp>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4906      	ldr	r1, [pc, #24]	@ (80010d0 <Error_Handler+0x24>)
 80010b8:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80010bc:	9202      	str	r2, [sp, #8]
 80010be:	4a05      	ldr	r2, [pc, #20]	@ (80010d4 <Error_Handler+0x28>)
 80010c0:	9201      	str	r2, [sp, #4]
 80010c2:	9100      	str	r1, [sp, #0]
 80010c4:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <Error_Handler+0x2c>)
 80010c6:	2001      	movs	r0, #1
 80010c8:	f004 f982 	bl	80053d0 <stm32_log_write>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010ce:	e7fe      	b.n	80010ce <Error_Handler+0x22>
 80010d0:	08006c40 	.word	0x08006c40
 80010d4:	08006c64 	.word	0x08006c64
 80010d8:	08006c48 	.word	0x08006c48

080010dc <SystemClock_Config>:
{
 80010dc:	b500      	push	{lr}
 80010de:	b095      	sub	sp, #84	@ 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e0:	2230      	movs	r2, #48	@ 0x30
 80010e2:	2100      	movs	r1, #0
 80010e4:	a808      	add	r0, sp, #32
 80010e6:	f005 f855 	bl	8006194 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ea:	2300      	movs	r3, #0
 80010ec:	9303      	str	r3, [sp, #12]
 80010ee:	9304      	str	r3, [sp, #16]
 80010f0:	9305      	str	r3, [sp, #20]
 80010f2:	9306      	str	r3, [sp, #24]
 80010f4:	9307      	str	r3, [sp, #28]
	__HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001178 <SystemClock_Config+0x9c>)
 80010fa:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80010fc:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001100:	6411      	str	r1, [r2, #64]	@ 0x40
 8001102:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001104:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001108:	9201      	str	r2, [sp, #4]
 800110a:	9a01      	ldr	r2, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	4a1b      	ldr	r2, [pc, #108]	@ (800117c <SystemClock_Config+0xa0>)
 8001110:	6811      	ldr	r1, [r2, #0]
 8001112:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8001116:	6011      	str	r1, [r2, #0]
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800111e:	9202      	str	r2, [sp, #8]
 8001120:	9a02      	ldr	r2, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001122:	2202      	movs	r2, #2
 8001124:	9208      	str	r2, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001126:	2101      	movs	r1, #1
 8001128:	910b      	str	r1, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112a:	2110      	movs	r1, #16
 800112c:	910c      	str	r1, [sp, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112e:	920e      	str	r2, [sp, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001130:	930f      	str	r3, [sp, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001132:	2308      	movs	r3, #8
 8001134:	9310      	str	r3, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001136:	23a8      	movs	r3, #168	@ 0xa8
 8001138:	9311      	str	r3, [sp, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800113a:	9212      	str	r2, [sp, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800113c:	2307      	movs	r3, #7
 800113e:	9313      	str	r3, [sp, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001140:	a808      	add	r0, sp, #32
 8001142:	f000 fe57 	bl	8001df4 <HAL_RCC_OscConfig>
 8001146:	b998      	cbnz	r0, 8001170 <SystemClock_Config+0x94>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001148:	230f      	movs	r3, #15
 800114a:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114c:	2302      	movs	r3, #2
 800114e:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001154:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001158:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800115a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800115e:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001160:	2105      	movs	r1, #5
 8001162:	a803      	add	r0, sp, #12
 8001164:	f001 f8b0 	bl	80022c8 <HAL_RCC_ClockConfig>
 8001168:	b920      	cbnz	r0, 8001174 <SystemClock_Config+0x98>
}
 800116a:	b015      	add	sp, #84	@ 0x54
 800116c:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001170:	f7ff ff9c 	bl	80010ac <Error_Handler>
		Error_Handler();
 8001174:	f7ff ff9a 	bl	80010ac <Error_Handler>
 8001178:	40023800 	.word	0x40023800
 800117c:	40007000 	.word	0x40007000

08001180 <main>:
{
 8001180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001182:	b08f      	sub	sp, #60	@ 0x3c
	w25q_driver_config_t config = {
 8001184:	ac05      	add	r4, sp, #20
 8001186:	4d55      	ldr	r5, [pc, #340]	@ (80012dc <main+0x15c>)
 8001188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001190:	e884 0003 	stmia.w	r4, {r0, r1}
 8001194:	2500      	movs	r5, #0
 8001196:	950b      	str	r5, [sp, #44]	@ 0x2c
 8001198:	f241 3388 	movw	r3, #5000	@ 0x1388
 800119c:	930c      	str	r3, [sp, #48]	@ 0x30
 800119e:	2601      	movs	r6, #1
 80011a0:	f88d 6034 	strb.w	r6, [sp, #52]	@ 0x34
	HAL_Init();
 80011a4:	f000 faa2 	bl	80016ec <HAL_Init>
	SystemClock_Config();
 80011a8:	f7ff ff98 	bl	80010dc <SystemClock_Config>
	MX_GPIO_Init();
 80011ac:	f7ff fea2 	bl	8000ef4 <MX_GPIO_Init>
	MX_RNG_Init();
 80011b0:	f000 f8b4 	bl	800131c <MX_RNG_Init>
	MX_SPI1_Init();
 80011b4:	f000 f8da 	bl	800136c <MX_SPI1_Init>
	MX_USART1_UART_Init();
 80011b8:	f000 f9b2 	bl	8001520 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80011bc:	f000 f9ca 	bl	8001554 <MX_USART2_UART_Init>
	stm32_log_init(NULL);
 80011c0:	4628      	mov	r0, r5
 80011c2:	f004 f8ef 	bl	80053a4 <stm32_log_init>
	STM32_LOGI(TAG, "\r\n");
 80011c6:	f004 f8ff 	bl	80053c8 <stm32_log_timestamp>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4c44      	ldr	r4, [pc, #272]	@ (80012e0 <main+0x160>)
 80011ce:	9400      	str	r4, [sp, #0]
 80011d0:	4a44      	ldr	r2, [pc, #272]	@ (80012e4 <main+0x164>)
 80011d2:	4621      	mov	r1, r4
 80011d4:	2003      	movs	r0, #3
 80011d6:	f004 f8fb 	bl	80053d0 <stm32_log_write>
	STM32_LOGI(TAG, "**********************************************");
 80011da:	f004 f8f5 	bl	80053c8 <stm32_log_timestamp>
 80011de:	4603      	mov	r3, r0
 80011e0:	4f41      	ldr	r7, [pc, #260]	@ (80012e8 <main+0x168>)
 80011e2:	9400      	str	r4, [sp, #0]
 80011e4:	463a      	mov	r2, r7
 80011e6:	4621      	mov	r1, r4
 80011e8:	2003      	movs	r0, #3
 80011ea:	f004 f8f1 	bl	80053d0 <stm32_log_write>
	STM32_LOGI(TAG, "*** CycloneBOOT IAP Single-Bank Bootloader ***");
 80011ee:	f004 f8eb 	bl	80053c8 <stm32_log_timestamp>
 80011f2:	4603      	mov	r3, r0
 80011f4:	9400      	str	r4, [sp, #0]
 80011f6:	4a3d      	ldr	r2, [pc, #244]	@ (80012ec <main+0x16c>)
 80011f8:	4621      	mov	r1, r4
 80011fa:	2003      	movs	r0, #3
 80011fc:	f004 f8e8 	bl	80053d0 <stm32_log_write>
	STM32_LOGI(TAG, "**********************************************");
 8001200:	f004 f8e2 	bl	80053c8 <stm32_log_timestamp>
 8001204:	4603      	mov	r3, r0
 8001206:	9400      	str	r4, [sp, #0]
 8001208:	463a      	mov	r2, r7
 800120a:	4621      	mov	r1, r4
 800120c:	2003      	movs	r0, #3
 800120e:	f004 f8df 	bl	80053d0 <stm32_log_write>
	STM32_LOGI(TAG, "Compiled: %s %s\r\n", __DATE__, __TIME__);
 8001212:	f004 f8d9 	bl	80053c8 <stm32_log_timestamp>
 8001216:	4603      	mov	r3, r0
 8001218:	4a35      	ldr	r2, [pc, #212]	@ (80012f0 <main+0x170>)
 800121a:	9202      	str	r2, [sp, #8]
 800121c:	4a35      	ldr	r2, [pc, #212]	@ (80012f4 <main+0x174>)
 800121e:	9201      	str	r2, [sp, #4]
 8001220:	9400      	str	r4, [sp, #0]
 8001222:	4a35      	ldr	r2, [pc, #212]	@ (80012f8 <main+0x178>)
 8001224:	4621      	mov	r1, r4
 8001226:	2003      	movs	r0, #3
 8001228:	f004 f8d2 	bl	80053d0 <stm32_log_write>
	STM32_LOGI(TAG, "Target: STM32F407");
 800122c:	f004 f8cc 	bl	80053c8 <stm32_log_timestamp>
 8001230:	4603      	mov	r3, r0
 8001232:	9400      	str	r4, [sp, #0]
 8001234:	4a31      	ldr	r2, [pc, #196]	@ (80012fc <main+0x17c>)
 8001236:	4621      	mov	r1, r4
 8001238:	2003      	movs	r0, #3
 800123a:	f004 f8c9 	bl	80053d0 <stm32_log_write>
	w25qFlashSetConfig(&config);
 800123e:	a805      	add	r0, sp, #20
 8001240:	f002 fcae 	bl	8003ba0 <w25qFlashSetConfig>
	bootGetDefaultSettings(&bootSettings);
 8001244:	4c2e      	ldr	r4, [pc, #184]	@ (8001300 <main+0x180>)
 8001246:	4620      	mov	r0, r4
 8001248:	f001 fee0 	bl	800300c <bootGetDefaultSettings>
	bootSettings.memories[0].memoryType = MEMORY_TYPE_FLASH;
 800124c:	7025      	strb	r5, [r4, #0]
	bootSettings.memories[0].memoryRole = MEMORY_ROLE_PRIMARY;
 800124e:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
	bootSettings.memories[0].driver = &stm32f4xxFlashDriver;
 8001252:	4b2c      	ldr	r3, [pc, #176]	@ (8001304 <main+0x184>)
 8001254:	62e3      	str	r3, [r4, #44]	@ 0x2c
	bootSettings.memories[0].nbSlots = 1;
 8001256:	f884 6028 	strb.w	r6, [r4, #40]	@ 0x28
	bootSettings.memories[0].slots[0].type = SLOT_TYPE_DIRECT;
 800125a:	7226      	strb	r6, [r4, #8]
	bootSettings.memories[0].slots[0].cType = SLOT_CONTENT_BINARY;
 800125c:	2308      	movs	r3, #8
 800125e:	7263      	strb	r3, [r4, #9]
	bootSettings.memories[0].slots[0].memParent = &bootSettings.memories[0];
 8001260:	60e4      	str	r4, [r4, #12]
	bootSettings.memories[0].slots[0].addr = 0x08020000;
 8001262:	4b29      	ldr	r3, [pc, #164]	@ (8001308 <main+0x188>)
 8001264:	6123      	str	r3, [r4, #16]
	bootSettings.memories[0].slots[0].size = 0xE0000;
 8001266:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 800126a:	6163      	str	r3, [r4, #20]
	bootSettings.memories[1].memoryRole 			   = MEMORY_ROLE_SECONDARY;
 800126c:	f884 6064 	strb.w	r6, [r4, #100]	@ 0x64
	bootSettings.memories[1].memoryType 			   = MEMORY_TYPE_FLASH;
 8001270:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
	bootSettings.memories[1].driver 				   = &w25qFlashDriver;
 8001274:	4b25      	ldr	r3, [pc, #148]	@ (800130c <main+0x18c>)
 8001276:	6623      	str	r3, [r4, #96]	@ 0x60
	bootSettings.memories[1].nbSlots 				   = 1;
 8001278:	f884 605c 	strb.w	r6, [r4, #92]	@ 0x5c
	bootSettings.memories[1].slots[0].type 		   = SLOT_TYPE_DIRECT;
 800127c:	f884 603c 	strb.w	r6, [r4, #60]	@ 0x3c
	bootSettings.memories[1].slots[0].cType 		= SLOT_CONTENT_APP | SLOT_CONTENT_BACKUP;
 8001280:	2305      	movs	r3, #5
 8001282:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
	bootSettings.memories[1].slots[0].memParent 	= &bootSettings.memories[1];
 8001286:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 800128a:	6423      	str	r3, [r4, #64]	@ 0x40
	bootSettings.memories[1].slots[0].addr 		   = 0x00000000;
 800128c:	6465      	str	r5, [r4, #68]	@ 0x44
	bootSettings.memories[1].slots[0].size 		   = 0x200000;
 800128e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001292:	64a3      	str	r3, [r4, #72]	@ 0x48
	cerror = bootInit(&bootContext, &bootSettings);
 8001294:	4621      	mov	r1, r4
 8001296:	481e      	ldr	r0, [pc, #120]	@ (8001310 <main+0x190>)
 8001298:	f001 febe 	bl	8003018 <bootInit>
	if(cerror)
 800129c:	b908      	cbnz	r0, 80012a2 <main+0x122>
 800129e:	2400      	movs	r4, #0
 80012a0:	e015      	b.n	80012ce <main+0x14e>
		STM32_LOGE(TAG, "Bootloader configuration failed!\r\n");
 80012a2:	f004 f891 	bl	80053c8 <stm32_log_timestamp>
 80012a6:	4603      	mov	r3, r0
 80012a8:	490d      	ldr	r1, [pc, #52]	@ (80012e0 <main+0x160>)
 80012aa:	9100      	str	r1, [sp, #0]
 80012ac:	4a19      	ldr	r2, [pc, #100]	@ (8001314 <main+0x194>)
 80012ae:	4630      	mov	r0, r6
 80012b0:	f004 f88e 	bl	80053d0 <stm32_log_write>
		Error_Handler();
 80012b4:	f7ff fefa 	bl	80010ac <Error_Handler>
			ticks = HAL_GetTick();
 80012b8:	f000 fa3e 	bl	8001738 <HAL_GetTick>
 80012bc:	4604      	mov	r4, r0
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80012be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012c2:	4815      	ldr	r0, [pc, #84]	@ (8001318 <main+0x198>)
 80012c4:	f000 fd8c 	bl	8001de0 <HAL_GPIO_TogglePin>
		cerror = bootTask(&bootContext);
 80012c8:	4811      	ldr	r0, [pc, #68]	@ (8001310 <main+0x190>)
 80012ca:	f001 fec9 	bl	8003060 <bootTask>
		if((HAL_GetTick() - ticks)>= 100)
 80012ce:	f000 fa33 	bl	8001738 <HAL_GetTick>
 80012d2:	1b03      	subs	r3, r0, r4
 80012d4:	2b63      	cmp	r3, #99	@ 0x63
 80012d6:	d8ef      	bhi.n	80012b8 <main+0x138>
 80012d8:	e7f6      	b.n	80012c8 <main+0x148>
 80012da:	bf00      	nop
 80012dc:	08007408 	.word	0x08007408
 80012e0:	08006c40 	.word	0x08006c40
 80012e4:	08006c78 	.word	0x08006c78
 80012e8:	08006c88 	.word	0x08006c88
 80012ec:	08006cc4 	.word	0x08006cc4
 80012f0:	08006d20 	.word	0x08006d20
 80012f4:	08006d2c 	.word	0x08006d2c
 80012f8:	08006d00 	.word	0x08006d00
 80012fc:	08006d38 	.word	0x08006d38
 8001300:	200001b8 	.word	0x200001b8
 8001304:	08007898 	.word	0x08007898
 8001308:	08020000 	.word	0x08020000
 800130c:	0800786c 	.word	0x0800786c
 8001310:	200000d4 	.word	0x200000d4
 8001314:	08006d58 	.word	0x08006d58
 8001318:	40020c00 	.word	0x40020c00

0800131c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800131c:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800131e:	4805      	ldr	r0, [pc, #20]	@ (8001334 <MX_RNG_Init+0x18>)
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <MX_RNG_Init+0x1c>)
 8001322:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001324:	f001 f8a6 	bl	8002474 <HAL_RNG_Init>
 8001328:	b900      	cbnz	r0, 800132c <MX_RNG_Init+0x10>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800132a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800132c:	f7ff febe 	bl	80010ac <Error_Handler>
}
 8001330:	e7fb      	b.n	800132a <MX_RNG_Init+0xe>
 8001332:	bf00      	nop
 8001334:	20000220 	.word	0x20000220
 8001338:	50060800 	.word	0x50060800

0800133c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 800133c:	6802      	ldr	r2, [r0, #0]
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <HAL_RNG_MspInit+0x28>)
 8001340:	429a      	cmp	r2, r3
 8001342:	d000      	beq.n	8001346 <HAL_RNG_MspInit+0xa>
 8001344:	4770      	bx	lr
{
 8001346:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001348:	2300      	movs	r3, #0
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_RNG_MspInit+0x2c>)
 800134e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001350:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001354:	635a      	str	r2, [r3, #52]	@ 0x34
 8001356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001360:	b002      	add	sp, #8
 8001362:	4770      	bx	lr
 8001364:	50060800 	.word	0x50060800
 8001368:	40023800 	.word	0x40023800

0800136c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800136c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800136e:	480e      	ldr	r0, [pc, #56]	@ (80013a8 <MX_SPI1_Init+0x3c>)
 8001370:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <MX_SPI1_Init+0x40>)
 8001372:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001374:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001378:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800137a:	2300      	movs	r3, #0
 800137c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800137e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001380:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001382:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001384:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001388:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800138a:	2218      	movs	r2, #24
 800138c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800138e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001390:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001392:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001394:	230a      	movs	r3, #10
 8001396:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001398:	f001 f96e 	bl	8002678 <HAL_SPI_Init>
 800139c:	b900      	cbnz	r0, 80013a0 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800139e:	bd08      	pop	{r3, pc}
    Error_Handler();
 80013a0:	f7ff fe84 	bl	80010ac <Error_Handler>
}
 80013a4:	e7fb      	b.n	800139e <MX_SPI1_Init+0x32>
 80013a6:	bf00      	nop
 80013a8:	20000230 	.word	0x20000230
 80013ac:	40013000 	.word	0x40013000

080013b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013b0:	b500      	push	{lr}
 80013b2:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	2300      	movs	r3, #0
 80013b6:	9303      	str	r3, [sp, #12]
 80013b8:	9304      	str	r3, [sp, #16]
 80013ba:	9305      	str	r3, [sp, #20]
 80013bc:	9306      	str	r3, [sp, #24]
 80013be:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 80013c0:	6802      	ldr	r2, [r0, #0]
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <HAL_SPI_MspInit+0x68>)
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d002      	beq.n	80013ce <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013c8:	b009      	add	sp, #36	@ 0x24
 80013ca:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ce:	2100      	movs	r1, #0
 80013d0:	9101      	str	r1, [sp, #4]
 80013d2:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80013d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80013d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80013dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80013de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80013e0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80013e4:	9201      	str	r2, [sp, #4]
 80013e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	9102      	str	r1, [sp, #8]
 80013ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013ec:	f042 0201 	orr.w	r2, r2, #1
 80013f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80013f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	9302      	str	r3, [sp, #8]
 80013fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013fc:	23e0      	movs	r3, #224	@ 0xe0
 80013fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001408:	2305      	movs	r3, #5
 800140a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	a903      	add	r1, sp, #12
 800140e:	4803      	ldr	r0, [pc, #12]	@ (800141c <HAL_SPI_MspInit+0x6c>)
 8001410:	f000 fbea 	bl	8001be8 <HAL_GPIO_Init>
}
 8001414:	e7d8      	b.n	80013c8 <HAL_SPI_MspInit+0x18>
 8001416:	bf00      	nop
 8001418:	40013000 	.word	0x40013000
 800141c:	40020000 	.word	0x40020000

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	2100      	movs	r1, #0
 8001424:	9100      	str	r1, [sp, #0]
 8001426:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <HAL_MspInit+0x34>)
 8001428:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800142a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800142e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001430:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001432:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001436:	9200      	str	r2, [sp, #0]
 8001438:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	9101      	str	r1, [sp, #4]
 800143c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800143e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001442:	641a      	str	r2, [r3, #64]	@ 0x40
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	b002      	add	sp, #8
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800

08001458 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001458:	e7fe      	b.n	8001458 <NMI_Handler>

0800145a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <HardFault_Handler>

0800145c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <MemManage_Handler>

0800145e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <BusFault_Handler>

08001460 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <UsageFault_Handler>

08001462 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001462:	4770      	bx	lr

08001464 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001464:	4770      	bx	lr

08001466 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001466:	4770      	bx	lr

08001468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001468:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146a:	f000 f959 	bl	8001720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146e:	bd08      	pop	{r3, pc}

08001470 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001470:	b570      	push	{r4, r5, r6, lr}
 8001472:	460c      	mov	r4, r1
 8001474:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001476:	2500      	movs	r5, #0
 8001478:	e006      	b.n	8001488 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800147a:	f3af 8000 	nop.w
 800147e:	4621      	mov	r1, r4
 8001480:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001484:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8001486:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001488:	42b5      	cmp	r5, r6
 800148a:	dbf6      	blt.n	800147a <_read+0xa>
  }

  return len;
}
 800148c:	4630      	mov	r0, r6
 800148e:	bd70      	pop	{r4, r5, r6, pc}

08001490 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001490:	b570      	push	{r4, r5, r6, lr}
 8001492:	460c      	mov	r4, r1
 8001494:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	2500      	movs	r5, #0
 8001498:	e004      	b.n	80014a4 <_write+0x14>
  {
    __io_putchar(*ptr++);
 800149a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800149e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	3501      	adds	r5, #1
 80014a4:	42b5      	cmp	r5, r6
 80014a6:	dbf8      	blt.n	800149a <_write+0xa>
  }
  return len;
}
 80014a8:	4630      	mov	r0, r6
 80014aa:	bd70      	pop	{r4, r5, r6, pc}

080014ac <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014b0:	4770      	bx	lr

080014b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80014b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014b6:	604b      	str	r3, [r1, #4]
  return 0;
}
 80014b8:	2000      	movs	r0, #0
 80014ba:	4770      	bx	lr

080014bc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80014bc:	2001      	movs	r0, #1
 80014be:	4770      	bx	lr

080014c0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80014c0:	2000      	movs	r0, #0
 80014c2:	4770      	bx	lr

080014c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c4:	b510      	push	{r4, lr}
 80014c6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c8:	4a0c      	ldr	r2, [pc, #48]	@ (80014fc <_sbrk+0x38>)
 80014ca:	490d      	ldr	r1, [pc, #52]	@ (8001500 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014cc:	480d      	ldr	r0, [pc, #52]	@ (8001504 <_sbrk+0x40>)
 80014ce:	6800      	ldr	r0, [r0, #0]
 80014d0:	b140      	cbz	r0, 80014e4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d2:	480c      	ldr	r0, [pc, #48]	@ (8001504 <_sbrk+0x40>)
 80014d4:	6800      	ldr	r0, [r0, #0]
 80014d6:	4403      	add	r3, r0
 80014d8:	1a52      	subs	r2, r2, r1
 80014da:	4293      	cmp	r3, r2
 80014dc:	d806      	bhi.n	80014ec <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80014de:	4a09      	ldr	r2, [pc, #36]	@ (8001504 <_sbrk+0x40>)
 80014e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80014e2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80014e4:	4807      	ldr	r0, [pc, #28]	@ (8001504 <_sbrk+0x40>)
 80014e6:	4c08      	ldr	r4, [pc, #32]	@ (8001508 <_sbrk+0x44>)
 80014e8:	6004      	str	r4, [r0, #0]
 80014ea:	e7f2      	b.n	80014d2 <_sbrk+0xe>
    errno = ENOMEM;
 80014ec:	f004 feb0 	bl	8006250 <__errno>
 80014f0:	230c      	movs	r3, #12
 80014f2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014f8:	e7f3      	b.n	80014e2 <_sbrk+0x1e>
 80014fa:	bf00      	nop
 80014fc:	20020000 	.word	0x20020000
 8001500:	00000400 	.word	0x00000400
 8001504:	20000288 	.word	0x20000288
 8001508:	200004c8 	.word	0x200004c8

0800150c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800150c:	4a03      	ldr	r2, [pc, #12]	@ (800151c <SystemInit+0x10>)
 800150e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001512:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001516:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001520:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001522:	480a      	ldr	r0, [pc, #40]	@ (800154c <MX_USART1_UART_Init+0x2c>)
 8001524:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <MX_USART1_UART_Init+0x30>)
 8001526:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001528:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800152c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	2300      	movs	r3, #0
 8001530:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001532:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001534:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001536:	220c      	movs	r2, #12
 8001538:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800153c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800153e:	f001 fcc2 	bl	8002ec6 <HAL_UART_Init>
 8001542:	b900      	cbnz	r0, 8001546 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001544:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001546:	f7ff fdb1 	bl	80010ac <Error_Handler>
}
 800154a:	e7fb      	b.n	8001544 <MX_USART1_UART_Init+0x24>
 800154c:	200002d4 	.word	0x200002d4
 8001550:	40011000 	.word	0x40011000

08001554 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001554:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001556:	480a      	ldr	r0, [pc, #40]	@ (8001580 <MX_USART2_UART_Init+0x2c>)
 8001558:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <MX_USART2_UART_Init+0x30>)
 800155a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800155c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001560:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	2300      	movs	r3, #0
 8001564:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001566:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001568:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800156a:	220c      	movs	r2, #12
 800156c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001572:	f001 fca8 	bl	8002ec6 <HAL_UART_Init>
 8001576:	b900      	cbnz	r0, 800157a <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001578:	bd08      	pop	{r3, pc}
    Error_Handler();
 800157a:	f7ff fd97 	bl	80010ac <Error_Handler>
}
 800157e:	e7fb      	b.n	8001578 <MX_USART2_UART_Init+0x24>
 8001580:	2000028c 	.word	0x2000028c
 8001584:	40004400 	.word	0x40004400

08001588 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001588:	b500      	push	{lr}
 800158a:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	2300      	movs	r3, #0
 800158e:	9305      	str	r3, [sp, #20]
 8001590:	9306      	str	r3, [sp, #24]
 8001592:	9307      	str	r3, [sp, #28]
 8001594:	9308      	str	r3, [sp, #32]
 8001596:	9309      	str	r3, [sp, #36]	@ 0x24
  if(uartHandle->Instance==USART1)
 8001598:	6803      	ldr	r3, [r0, #0]
 800159a:	4a27      	ldr	r2, [pc, #156]	@ (8001638 <HAL_UART_MspInit+0xb0>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d005      	beq.n	80015ac <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 80015a0:	4a26      	ldr	r2, [pc, #152]	@ (800163c <HAL_UART_MspInit+0xb4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d025      	beq.n	80015f2 <HAL_UART_MspInit+0x6a>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015a6:	b00b      	add	sp, #44	@ 0x2c
 80015a8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80015ac:	2100      	movs	r1, #0
 80015ae:	9101      	str	r1, [sp, #4]
 80015b0:	4b23      	ldr	r3, [pc, #140]	@ (8001640 <HAL_UART_MspInit+0xb8>)
 80015b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80015b4:	f042 0210 	orr.w	r2, r2, #16
 80015b8:	645a      	str	r2, [r3, #68]	@ 0x44
 80015ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80015bc:	f002 0210 	and.w	r2, r2, #16
 80015c0:	9201      	str	r2, [sp, #4]
 80015c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c4:	9102      	str	r1, [sp, #8]
 80015c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015c8:	f042 0202 	orr.w	r2, r2, #2
 80015cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80015ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015d8:	23c0      	movs	r3, #192	@ 0xc0
 80015da:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015e4:	2307      	movs	r3, #7
 80015e6:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	a905      	add	r1, sp, #20
 80015ea:	4816      	ldr	r0, [pc, #88]	@ (8001644 <HAL_UART_MspInit+0xbc>)
 80015ec:	f000 fafc 	bl	8001be8 <HAL_GPIO_Init>
 80015f0:	e7d9      	b.n	80015a6 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015f2:	2100      	movs	r1, #0
 80015f4:	9103      	str	r1, [sp, #12]
 80015f6:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <HAL_UART_MspInit+0xb8>)
 80015f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015fa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80015fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8001600:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001602:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001606:	9203      	str	r2, [sp, #12]
 8001608:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	9104      	str	r1, [sp, #16]
 800160c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	631a      	str	r2, [r3, #48]	@ 0x30
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	9304      	str	r3, [sp, #16]
 800161c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800161e:	230c      	movs	r3, #12
 8001620:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001626:	2303      	movs	r3, #3
 8001628:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800162a:	2307      	movs	r3, #7
 800162c:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	a905      	add	r1, sp, #20
 8001630:	4805      	ldr	r0, [pc, #20]	@ (8001648 <HAL_UART_MspInit+0xc0>)
 8001632:	f000 fad9 	bl	8001be8 <HAL_GPIO_Init>
}
 8001636:	e7b6      	b.n	80015a6 <HAL_UART_MspInit+0x1e>
 8001638:	40011000 	.word	0x40011000
 800163c:	40004400 	.word	0x40004400
 8001640:	40023800 	.word	0x40023800
 8001644:	40020400 	.word	0x40020400
 8001648:	40020000 	.word	0x40020000

0800164c <Reset_Handler>:
 800164c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001684 <LoopFillZerobss+0xe>
 8001650:	f7ff ff5c 	bl	800150c <SystemInit>
 8001654:	480c      	ldr	r0, [pc, #48]	@ (8001688 <LoopFillZerobss+0x12>)
 8001656:	490d      	ldr	r1, [pc, #52]	@ (800168c <LoopFillZerobss+0x16>)
 8001658:	4a0d      	ldr	r2, [pc, #52]	@ (8001690 <LoopFillZerobss+0x1a>)
 800165a:	2300      	movs	r3, #0
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:
 800165e:	58d4      	ldr	r4, [r2, r3]
 8001660:	50c4      	str	r4, [r0, r3]
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:
 8001664:	18c4      	adds	r4, r0, r3
 8001666:	428c      	cmp	r4, r1
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <LoopFillZerobss+0x1e>)
 800166c:	4c0a      	ldr	r4, [pc, #40]	@ (8001698 <LoopFillZerobss+0x22>)
 800166e:	2300      	movs	r3, #0
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:
 8001676:	42a2      	cmp	r2, r4
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>
 800167a:	f004 fdef 	bl	800625c <__libc_init_array>
 800167e:	f7ff fd7f 	bl	8001180 <main>
 8001682:	4770      	bx	lr
 8001684:	20020000 	.word	0x20020000
 8001688:	20000000 	.word	0x20000000
 800168c:	200000b8 	.word	0x200000b8
 8001690:	080079f4 	.word	0x080079f4
 8001694:	200000b8 	.word	0x200000b8
 8001698:	200004c8 	.word	0x200004c8

0800169c <ADC_IRQHandler>:
 800169c:	e7fe      	b.n	800169c <ADC_IRQHandler>
	...

080016a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b510      	push	{r4, lr}
 80016a2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a4:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <HAL_InitTick+0x40>)
 80016a6:	781a      	ldrb	r2, [r3, #0]
 80016a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80016b0:	4a0c      	ldr	r2, [pc, #48]	@ (80016e4 <HAL_InitTick+0x44>)
 80016b2:	6810      	ldr	r0, [r2, #0]
 80016b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80016b8:	f000 f8ae 	bl	8001818 <HAL_SYSTICK_Config>
 80016bc:	b968      	cbnz	r0, 80016da <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016be:	2c0f      	cmp	r4, #15
 80016c0:	d901      	bls.n	80016c6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80016c2:	2001      	movs	r0, #1
 80016c4:	e00a      	b.n	80016dc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c6:	2200      	movs	r2, #0
 80016c8:	4621      	mov	r1, r4
 80016ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016ce:	f000 f893 	bl	80017f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d2:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <HAL_InitTick+0x48>)
 80016d4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016d6:	2000      	movs	r0, #0
 80016d8:	e000      	b.n	80016dc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80016da:	2001      	movs	r0, #1
}
 80016dc:	bd10      	pop	{r4, pc}
 80016de:	bf00      	nop
 80016e0:	20000004 	.word	0x20000004
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000008 	.word	0x20000008

080016ec <HAL_Init>:
{
 80016ec:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ee:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <HAL_Init+0x30>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016f6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80016fe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001706:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 f863 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	200f      	movs	r0, #15
 8001710:	f7ff ffc6 	bl	80016a0 <HAL_InitTick>
  HAL_MspInit();
 8001714:	f7ff fe84 	bl	8001420 <HAL_MspInit>
}
 8001718:	2000      	movs	r0, #0
 800171a:	bd08      	pop	{r3, pc}
 800171c:	40023c00 	.word	0x40023c00

08001720 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001720:	4a03      	ldr	r2, [pc, #12]	@ (8001730 <HAL_IncTick+0x10>)
 8001722:	6811      	ldr	r1, [r2, #0]
 8001724:	4b03      	ldr	r3, [pc, #12]	@ (8001734 <HAL_IncTick+0x14>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	440b      	add	r3, r1
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	2000031c 	.word	0x2000031c
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001738:	4b01      	ldr	r3, [pc, #4]	@ (8001740 <HAL_GetTick+0x8>)
 800173a:	6818      	ldr	r0, [r3, #0]
}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	2000031c 	.word	0x2000031c

08001744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001744:	b538      	push	{r3, r4, r5, lr}
 8001746:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff fff6 	bl	8001738 <HAL_GetTick>
 800174c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8001752:	d002      	beq.n	800175a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001754:	4b04      	ldr	r3, [pc, #16]	@ (8001768 <HAL_Delay+0x24>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800175a:	f7ff ffed 	bl	8001738 <HAL_GetTick>
 800175e:	1b40      	subs	r0, r0, r5
 8001760:	42a0      	cmp	r0, r4
 8001762:	d3fa      	bcc.n	800175a <HAL_Delay+0x16>
  {
  }
}
 8001764:	bd38      	pop	{r3, r4, r5, pc}
 8001766:	bf00      	nop
 8001768:	20000004 	.word	0x20000004

0800176c <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 800176c:	2800      	cmp	r0, #0
 800176e:	db08      	blt.n	8001782 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001770:	0109      	lsls	r1, r1, #4
 8001772:	b2c9      	uxtb	r1, r1
 8001774:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001778:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800177c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001780:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001782:	f000 000f 	and.w	r0, r0, #15
 8001786:	0109      	lsls	r1, r1, #4
 8001788:	b2c9      	uxtb	r1, r1
 800178a:	4b01      	ldr	r3, [pc, #4]	@ (8001790 <__NVIC_SetPriority+0x24>)
 800178c:	5419      	strb	r1, [r3, r0]
}
 800178e:	4770      	bx	lr
 8001790:	e000ed14 	.word	0xe000ed14

08001794 <NVIC_EncodePriority>:
{
 8001794:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001796:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179a:	f1c0 0c07 	rsb	ip, r0, #7
 800179e:	f1bc 0f04 	cmp.w	ip, #4
 80017a2:	bf28      	it	cs
 80017a4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a8:	1d03      	adds	r3, r0, #4
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d90f      	bls.n	80017ce <NVIC_EncodePriority+0x3a>
 80017ae:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80017b4:	fa0e f00c 	lsl.w	r0, lr, ip
 80017b8:	ea21 0100 	bic.w	r1, r1, r0
 80017bc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017be:	fa0e fe03 	lsl.w	lr, lr, r3
 80017c2:	ea22 020e 	bic.w	r2, r2, lr
}
 80017c6:	ea41 0002 	orr.w	r0, r1, r2
 80017ca:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ce:	2300      	movs	r3, #0
 80017d0:	e7ee      	b.n	80017b0 <NVIC_EncodePriority+0x1c>
	...

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4a07      	ldr	r2, [pc, #28]	@ (80017f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80017d6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80017dc:	041b      	lsls	r3, r3, #16
 80017de:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e0:	0200      	lsls	r0, r0, #8
 80017e2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80017e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80017f0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f8:	b510      	push	{r4, lr}
 80017fa:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <HAL_NVIC_SetPriority+0x1c>)
 80017fe:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001800:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001804:	f7ff ffc6 	bl	8001794 <NVIC_EncodePriority>
 8001808:	4601      	mov	r1, r0
 800180a:	4620      	mov	r0, r4
 800180c:	f7ff ffae 	bl	800176c <__NVIC_SetPriority>
}
 8001810:	bd10      	pop	{r4, pc}
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001818:	3801      	subs	r0, #1
 800181a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800181e:	d20b      	bcs.n	8001838 <HAL_SYSTICK_Config+0x20>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001820:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001824:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	4a05      	ldr	r2, [pc, #20]	@ (800183c <HAL_SYSTICK_Config+0x24>)
 8001828:	21f0      	movs	r1, #240	@ 0xf0
 800182a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182e:	2000      	movs	r0, #0
 8001830:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	2207      	movs	r2, #7
 8001834:	611a      	str	r2, [r3, #16]
  return (0UL);                                                     /* Function successful */
 8001836:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001838:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001840:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001842:	490a      	ldr	r1, [pc, #40]	@ (800186c <FLASH_Program_DoubleWord+0x2c>)
 8001844:	690c      	ldr	r4, [r1, #16]
 8001846:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
 800184a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800184c:	690c      	ldr	r4, [r1, #16]
 800184e:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
 8001852:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001854:	690c      	ldr	r4, [r1, #16]
 8001856:	f044 0401 	orr.w	r4, r4, #1
 800185a:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800185c:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800185e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001862:	6043      	str	r3, [r0, #4]
}
 8001864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40023c00 	.word	0x40023c00

08001870 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001870:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <FLASH_Program_Word+0x20>)
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001878:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001880:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	f042 0201 	orr.w	r2, r2, #1
 8001888:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t *)Address = Data;
 800188a:	6001      	str	r1, [r0, #0]
}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40023c00 	.word	0x40023c00

08001894 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001894:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <FLASH_Program_HalfWord+0x20>)
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800189c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018a4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	f042 0201 	orr.w	r2, r2, #1
 80018ac:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t *)Address = Data;
 80018ae:	8001      	strh	r1, [r0, #0]
}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40023c00 	.word	0x40023c00

080018b8 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <FLASH_Program_Byte+0x1c>)
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80018c0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	f042 0201 	orr.w	r2, r2, #1
 80018cc:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t *)Address = Data;
 80018ce:	7001      	strb	r1, [r0, #0]
}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40023c00 	.word	0x40023c00

080018d8 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80018d8:	4b20      	ldr	r3, [pc, #128]	@ (800195c <FLASH_SetErrorCode+0x84>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f013 0f10 	tst.w	r3, #16
 80018e0:	d007      	beq.n	80018f2 <FLASH_SetErrorCode+0x1a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80018e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001960 <FLASH_SetErrorCode+0x88>)
 80018e4:	69d3      	ldr	r3, [r2, #28]
 80018e6:	f043 0310 	orr.w	r3, r3, #16
 80018ea:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <FLASH_SetErrorCode+0x84>)
 80018ee:	2210      	movs	r2, #16
 80018f0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80018f2:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <FLASH_SetErrorCode+0x84>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f013 0f20 	tst.w	r3, #32
 80018fa:	d007      	beq.n	800190c <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80018fc:	4a18      	ldr	r2, [pc, #96]	@ (8001960 <FLASH_SetErrorCode+0x88>)
 80018fe:	69d3      	ldr	r3, [r2, #28]
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <FLASH_SetErrorCode+0x84>)
 8001908:	2220      	movs	r2, #32
 800190a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <FLASH_SetErrorCode+0x84>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001914:	d007      	beq.n	8001926 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001916:	4a12      	ldr	r2, [pc, #72]	@ (8001960 <FLASH_SetErrorCode+0x88>)
 8001918:	69d3      	ldr	r3, [r2, #28]
 800191a:	f043 0304 	orr.w	r3, r3, #4
 800191e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001920:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <FLASH_SetErrorCode+0x84>)
 8001922:	2240      	movs	r2, #64	@ 0x40
 8001924:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001926:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <FLASH_SetErrorCode+0x84>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800192e:	d007      	beq.n	8001940 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001930:	4a0b      	ldr	r2, [pc, #44]	@ (8001960 <FLASH_SetErrorCode+0x88>)
 8001932:	69d3      	ldr	r3, [r2, #28]
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800193a:	4b08      	ldr	r3, [pc, #32]	@ (800195c <FLASH_SetErrorCode+0x84>)
 800193c:	2280      	movs	r2, #128	@ 0x80
 800193e:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <FLASH_SetErrorCode+0x84>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f013 0f02 	tst.w	r3, #2
 8001948:	d007      	beq.n	800195a <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800194a:	4a05      	ldr	r2, [pc, #20]	@ (8001960 <FLASH_SetErrorCode+0x88>)
 800194c:	69d3      	ldr	r3, [r2, #28]
 800194e:	f043 0320 	orr.w	r3, r3, #32
 8001952:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001954:	4b01      	ldr	r3, [pc, #4]	@ (800195c <FLASH_SetErrorCode+0x84>)
 8001956:	2202      	movs	r2, #2
 8001958:	60da      	str	r2, [r3, #12]
  }
}
 800195a:	4770      	bx	lr
 800195c:	40023c00 	.word	0x40023c00
 8001960:	2000000c 	.word	0x2000000c

08001964 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001964:	4b09      	ldr	r3, [pc, #36]	@ (800198c <HAL_FLASH_Unlock+0x28>)
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db01      	blt.n	8001970 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800196c:	2000      	movs	r0, #0
 800196e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_FLASH_Unlock+0x28>)
 8001972:	4a07      	ldr	r2, [pc, #28]	@ (8001990 <HAL_FLASH_Unlock+0x2c>)
 8001974:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001976:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 800197a:	605a      	str	r2, [r3, #4]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	2b00      	cmp	r3, #0
 8001980:	db01      	blt.n	8001986 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8001982:	2000      	movs	r0, #0
 8001984:	4770      	bx	lr
      status = HAL_ERROR;
 8001986:	2001      	movs	r0, #1
}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40023c00 	.word	0x40023c00
 8001990:	45670123 	.word	0x45670123

08001994 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8001994:	4a03      	ldr	r2, [pc, #12]	@ (80019a4 <HAL_FLASH_Lock+0x10>)
 8001996:	6913      	ldr	r3, [r2, #16]
 8001998:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800199c:	6113      	str	r3, [r2, #16]
}
 800199e:	2000      	movs	r0, #0
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40023c00 	.word	0x40023c00

080019a8 <FLASH_WaitForLastOperation>:
{
 80019a8:	b538      	push	{r3, r4, r5, lr}
 80019aa:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019ac:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <FLASH_WaitForLastOperation+0x58>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 80019b2:	f7ff fec1 	bl	8001738 <HAL_GetTick>
 80019b6:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80019b8:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <FLASH_WaitForLastOperation+0x5c>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80019c0:	d00a      	beq.n	80019d8 <FLASH_WaitForLastOperation+0x30>
    if (Timeout != HAL_MAX_DELAY)
 80019c2:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80019c6:	d0f7      	beq.n	80019b8 <FLASH_WaitForLastOperation+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80019c8:	b124      	cbz	r4, 80019d4 <FLASH_WaitForLastOperation+0x2c>
 80019ca:	f7ff feb5 	bl	8001738 <HAL_GetTick>
 80019ce:	1b40      	subs	r0, r0, r5
 80019d0:	42a0      	cmp	r0, r4
 80019d2:	d9f1      	bls.n	80019b8 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 80019d4:	2003      	movs	r0, #3
 80019d6:	e00d      	b.n	80019f4 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80019d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <FLASH_WaitForLastOperation+0x5c>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f013 0f01 	tst.w	r3, #1
 80019e0:	d002      	beq.n	80019e8 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <FLASH_WaitForLastOperation+0x5c>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	60da      	str	r2, [r3, #12]
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <FLASH_WaitForLastOperation+0x5c>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f013 0ff2 	tst.w	r3, #242	@ 0xf2
 80019f0:	d101      	bne.n	80019f6 <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 80019f2:	2000      	movs	r0, #0
}
 80019f4:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 80019f6:	f7ff ff6f 	bl	80018d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80019fa:	2001      	movs	r0, #1
 80019fc:	e7fa      	b.n	80019f4 <FLASH_WaitForLastOperation+0x4c>
 80019fe:	bf00      	nop
 8001a00:	2000000c 	.word	0x2000000c
 8001a04:	40023c00 	.word	0x40023c00

08001a08 <HAL_FLASH_Program>:
{
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0a:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8001a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001a7c <HAL_FLASH_Program+0x74>)
 8001a0e:	7e12      	ldrb	r2, [r2, #24]
 8001a10:	2a01      	cmp	r2, #1
 8001a12:	d030      	beq.n	8001a76 <HAL_FLASH_Program+0x6e>
 8001a14:	4604      	mov	r4, r0
 8001a16:	460d      	mov	r5, r1
 8001a18:	461f      	mov	r7, r3
 8001a1a:	4b18      	ldr	r3, [pc, #96]	@ (8001a7c <HAL_FLASH_Program+0x74>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a20:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001a24:	f7ff ffc0 	bl	80019a8 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8001a28:	b990      	cbnz	r0, 8001a50 <HAL_FLASH_Program+0x48>
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a2a:	b1ac      	cbz	r4, 8001a58 <HAL_FLASH_Program+0x50>
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a2c:	2c01      	cmp	r4, #1
 8001a2e:	d018      	beq.n	8001a62 <HAL_FLASH_Program+0x5a>
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a30:	2c02      	cmp	r4, #2
 8001a32:	d01b      	beq.n	8001a6c <HAL_FLASH_Program+0x64>
      FLASH_Program_DoubleWord(Address, Data);
 8001a34:	4632      	mov	r2, r6
 8001a36:	463b      	mov	r3, r7
 8001a38:	4628      	mov	r0, r5
 8001a3a:	f7ff ff01 	bl	8001840 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a3e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001a42:	f7ff ffb1 	bl	80019a8 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 8001a46:	4a0e      	ldr	r2, [pc, #56]	@ (8001a80 <HAL_FLASH_Program+0x78>)
 8001a48:	6913      	ldr	r3, [r2, #16]
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8001a50:	4b0a      	ldr	r3, [pc, #40]	@ (8001a7c <HAL_FLASH_Program+0x74>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	761a      	strb	r2, [r3, #24]
}
 8001a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a58:	b2f1      	uxtb	r1, r6
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	f7ff ff2c 	bl	80018b8 <FLASH_Program_Byte>
 8001a60:	e7ed      	b.n	8001a3e <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a62:	b2b1      	uxth	r1, r6
 8001a64:	4628      	mov	r0, r5
 8001a66:	f7ff ff15 	bl	8001894 <FLASH_Program_HalfWord>
 8001a6a:	e7e8      	b.n	8001a3e <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a6c:	4631      	mov	r1, r6
 8001a6e:	4628      	mov	r0, r5
 8001a70:	f7ff fefe 	bl	8001870 <FLASH_Program_Word>
 8001a74:	e7e3      	b.n	8001a3e <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 8001a76:	2002      	movs	r0, #2
 8001a78:	e7ed      	b.n	8001a56 <HAL_FLASH_Program+0x4e>
 8001a7a:	bf00      	nop
 8001a7c:	2000000c 	.word	0x2000000c
 8001a80:	40023c00 	.word	0x40023c00

08001a84 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a84:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <FLASH_MassErase+0x20>)
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001a8c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	f042 0204 	orr.w	r2, r2, #4
 8001a94:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001a9c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001aa0:	611a      	str	r2, [r3, #16]
}
 8001aa2:	4770      	bx	lr
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d005      	beq.n	8001ab8 <FLASH_Erase_Sector+0x10>
 8001aac:	2902      	cmp	r1, #2
 8001aae:	d006      	beq.n	8001abe <FLASH_Erase_Sector+0x16>
 8001ab0:	b139      	cbz	r1, 8001ac2 <FLASH_Erase_Sector+0x1a>
{
 8001ab2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001ab6:	e004      	b.n	8001ac2 <FLASH_Erase_Sector+0x1a>
 8001ab8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001abc:	e001      	b.n	8001ac2 <FLASH_Erase_Sector+0x1a>
 8001abe:	f44f 7100 	mov.w	r1, #512	@ 0x200
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <FLASH_Erase_Sector+0x48>)
 8001ac4:	691a      	ldr	r2, [r3, #16]
 8001ac6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001aca:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8001acc:	691a      	ldr	r2, [r3, #16]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	f022 0278 	bic.w	r2, r2, #120	@ 0x78
 8001ad8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8001ae0:	f040 0002 	orr.w	r0, r0, #2
 8001ae4:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001aec:	611a      	str	r2, [r3, #16]
}
 8001aee:	4770      	bx	lr
 8001af0:	40023c00 	.word	0x40023c00

08001af4 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001af4:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <FLASH_FlushCaches+0x5c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8001afc:	d010      	beq.n	8001b20 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001afe:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <FLASH_FlushCaches+0x5c>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b06:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b16:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b1e:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001b20:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <FLASH_FlushCaches+0x5c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001b28:	d010      	beq.n	8001b4c <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <FLASH_FlushCaches+0x5c>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b32:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b42:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b4a:	601a      	str	r2, [r3, #0]
  }
}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023c00 	.word	0x40023c00

08001b54 <HAL_FLASHEx_Erase>:
{
 8001b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8001b56:	4b22      	ldr	r3, [pc, #136]	@ (8001be0 <HAL_FLASHEx_Erase+0x8c>)
 8001b58:	7e1b      	ldrb	r3, [r3, #24]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d03e      	beq.n	8001bdc <HAL_FLASHEx_Erase+0x88>
 8001b5e:	4604      	mov	r4, r0
 8001b60:	460e      	mov	r6, r1
 8001b62:	4b1f      	ldr	r3, [pc, #124]	@ (8001be0 <HAL_FLASHEx_Erase+0x8c>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b68:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001b6c:	f7ff ff1c 	bl	80019a8 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8001b70:	4607      	mov	r7, r0
 8001b72:	bb70      	cbnz	r0, 8001bd2 <HAL_FLASHEx_Erase+0x7e>
    *SectorError = 0xFFFFFFFFU;
 8001b74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b78:	6033      	str	r3, [r6, #0]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d016      	beq.n	8001bae <HAL_FLASHEx_Erase+0x5a>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001b80:	68a5      	ldr	r5, [r4, #8]
 8001b82:	68e3      	ldr	r3, [r4, #12]
 8001b84:	68a2      	ldr	r2, [r4, #8]
 8001b86:	4413      	add	r3, r2
 8001b88:	42ab      	cmp	r3, r5
 8001b8a:	d920      	bls.n	8001bce <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001b8c:	7c21      	ldrb	r1, [r4, #16]
 8001b8e:	4628      	mov	r0, r5
 8001b90:	f7ff ff8a 	bl	8001aa8 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b94:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001b98:	f7ff ff06 	bl	80019a8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001b9c:	4a11      	ldr	r2, [pc, #68]	@ (8001be4 <HAL_FLASHEx_Erase+0x90>)
 8001b9e:	6913      	ldr	r3, [r2, #16]
 8001ba0:	f023 037a 	bic.w	r3, r3, #122	@ 0x7a
 8001ba4:	6113      	str	r3, [r2, #16]
        if (status != HAL_OK)
 8001ba6:	4607      	mov	r7, r0
 8001ba8:	b980      	cbnz	r0, 8001bcc <HAL_FLASHEx_Erase+0x78>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001baa:	3501      	adds	r5, #1
 8001bac:	e7e9      	b.n	8001b82 <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001bae:	6861      	ldr	r1, [r4, #4]
 8001bb0:	7c20      	ldrb	r0, [r4, #16]
 8001bb2:	f7ff ff67 	bl	8001a84 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bb6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001bba:	f7ff fef5 	bl	80019a8 <FLASH_WaitForLastOperation>
 8001bbe:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8001bc0:	4a08      	ldr	r2, [pc, #32]	@ (8001be4 <HAL_FLASHEx_Erase+0x90>)
 8001bc2:	6913      	ldr	r3, [r2, #16]
 8001bc4:	f023 0304 	bic.w	r3, r3, #4
 8001bc8:	6113      	str	r3, [r2, #16]
 8001bca:	e000      	b.n	8001bce <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 8001bcc:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();
 8001bce:	f7ff ff91 	bl	8001af4 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8001bd2:	4b03      	ldr	r3, [pc, #12]	@ (8001be0 <HAL_FLASHEx_Erase+0x8c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	4638      	mov	r0, r7
 8001bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8001bdc:	2702      	movs	r7, #2
 8001bde:	e7fb      	b.n	8001bd8 <HAL_FLASHEx_Erase+0x84>
 8001be0:	2000000c 	.word	0x2000000c
 8001be4:	40023c00 	.word	0x40023c00

08001be8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	2b0f      	cmp	r3, #15
 8001bec:	f200 80e9 	bhi.w	8001dc2 <HAL_GPIO_Init+0x1da>
{
 8001bf0:	b570      	push	{r4, r5, r6, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	e065      	b.n	8001cc2 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001bfc:	2403      	movs	r4, #3
 8001bfe:	fa04 f40e 	lsl.w	r4, r4, lr
 8001c02:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c06:	68cc      	ldr	r4, [r1, #12]
 8001c08:	fa04 f40e 	lsl.w	r4, r4, lr
 8001c0c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001c0e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c10:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c12:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c16:	684a      	ldr	r2, [r1, #4]
 8001c18:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001c20:	6042      	str	r2, [r0, #4]
 8001c22:	e05c      	b.n	8001cde <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c24:	08dc      	lsrs	r4, r3, #3
 8001c26:	3408      	adds	r4, #8
 8001c28:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c2c:	f003 0507 	and.w	r5, r3, #7
 8001c30:	00ad      	lsls	r5, r5, #2
 8001c32:	f04f 0e0f 	mov.w	lr, #15
 8001c36:	fa0e fe05 	lsl.w	lr, lr, r5
 8001c3a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c3e:	690a      	ldr	r2, [r1, #16]
 8001c40:	40aa      	lsls	r2, r5
 8001c42:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001c46:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001c4a:	e05c      	b.n	8001d06 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	e000      	b.n	8001c52 <HAL_GPIO_Init+0x6a>
 8001c50:	2200      	movs	r2, #0
 8001c52:	fa02 f20e 	lsl.w	r2, r2, lr
 8001c56:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c58:	3402      	adds	r4, #2
 8001c5a:	4d5a      	ldr	r5, [pc, #360]	@ (8001dc4 <HAL_GPIO_Init+0x1dc>)
 8001c5c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c60:	4a59      	ldr	r2, [pc, #356]	@ (8001dc8 <HAL_GPIO_Init+0x1e0>)
 8001c62:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001c64:	ea6f 020c 	mvn.w	r2, ip
 8001c68:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c6c:	684e      	ldr	r6, [r1, #4]
 8001c6e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001c72:	d001      	beq.n	8001c78 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001c74:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001c78:	4c53      	ldr	r4, [pc, #332]	@ (8001dc8 <HAL_GPIO_Init+0x1e0>)
 8001c7a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001c7c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001c7e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c82:	684e      	ldr	r6, [r1, #4]
 8001c84:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001c88:	d001      	beq.n	8001c8e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001c8a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001c8e:	4c4e      	ldr	r4, [pc, #312]	@ (8001dc8 <HAL_GPIO_Init+0x1e0>)
 8001c90:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001c92:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001c94:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c98:	684e      	ldr	r6, [r1, #4]
 8001c9a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001c9e:	d001      	beq.n	8001ca4 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001ca0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001ca4:	4c48      	ldr	r4, [pc, #288]	@ (8001dc8 <HAL_GPIO_Init+0x1e0>)
 8001ca6:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca8:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001caa:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cac:	684d      	ldr	r5, [r1, #4]
 8001cae:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001cb2:	d001      	beq.n	8001cb8 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001cb4:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001cb8:	4c43      	ldr	r4, [pc, #268]	@ (8001dc8 <HAL_GPIO_Init+0x1e0>)
 8001cba:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	2b0f      	cmp	r3, #15
 8001cc0:	d87d      	bhi.n	8001dbe <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc6:	680c      	ldr	r4, [r1, #0]
 8001cc8:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001ccc:	ea32 0404 	bics.w	r4, r2, r4
 8001cd0:	d1f4      	bne.n	8001cbc <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd2:	684c      	ldr	r4, [r1, #4]
 8001cd4:	f004 0403 	and.w	r4, r4, #3
 8001cd8:	3c01      	subs	r4, #1
 8001cda:	2c01      	cmp	r4, #1
 8001cdc:	d98b      	bls.n	8001bf6 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cde:	684a      	ldr	r2, [r1, #4]
 8001ce0:	f002 0203 	and.w	r2, r2, #3
 8001ce4:	2a03      	cmp	r2, #3
 8001ce6:	d009      	beq.n	8001cfc <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001ce8:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cea:	005d      	lsls	r5, r3, #1
 8001cec:	2203      	movs	r2, #3
 8001cee:	40aa      	lsls	r2, r5
 8001cf0:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	688a      	ldr	r2, [r1, #8]
 8001cf6:	40aa      	lsls	r2, r5
 8001cf8:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001cfa:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfc:	684a      	ldr	r2, [r1, #4]
 8001cfe:	f002 0203 	and.w	r2, r2, #3
 8001d02:	2a02      	cmp	r2, #2
 8001d04:	d08e      	beq.n	8001c24 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001d06:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d08:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001d12:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d16:	684a      	ldr	r2, [r1, #4]
 8001d18:	f002 0203 	and.w	r2, r2, #3
 8001d1c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001d20:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001d22:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d24:	684a      	ldr	r2, [r1, #4]
 8001d26:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001d2a:	d0c7      	beq.n	8001cbc <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	9201      	str	r2, [sp, #4]
 8001d30:	4a26      	ldr	r2, [pc, #152]	@ (8001dcc <HAL_GPIO_Init+0x1e4>)
 8001d32:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001d34:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001d38:	6454      	str	r4, [r2, #68]	@ 0x44
 8001d3a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d3c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001d40:	9201      	str	r2, [sp, #4]
 8001d42:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001d44:	089c      	lsrs	r4, r3, #2
 8001d46:	1ca5      	adds	r5, r4, #2
 8001d48:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc4 <HAL_GPIO_Init+0x1dc>)
 8001d4a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d4e:	f003 0e03 	and.w	lr, r3, #3
 8001d52:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f20e 	lsl.w	r2, r2, lr
 8001d5c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d60:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd0 <HAL_GPIO_Init+0x1e8>)
 8001d62:	4290      	cmp	r0, r2
 8001d64:	f43f af74 	beq.w	8001c50 <HAL_GPIO_Init+0x68>
 8001d68:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001d6c:	4290      	cmp	r0, r2
 8001d6e:	d01a      	beq.n	8001da6 <HAL_GPIO_Init+0x1be>
 8001d70:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001d74:	4290      	cmp	r0, r2
 8001d76:	d018      	beq.n	8001daa <HAL_GPIO_Init+0x1c2>
 8001d78:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001d7c:	4290      	cmp	r0, r2
 8001d7e:	d016      	beq.n	8001dae <HAL_GPIO_Init+0x1c6>
 8001d80:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001d84:	4290      	cmp	r0, r2
 8001d86:	d014      	beq.n	8001db2 <HAL_GPIO_Init+0x1ca>
 8001d88:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001d8c:	4290      	cmp	r0, r2
 8001d8e:	d012      	beq.n	8001db6 <HAL_GPIO_Init+0x1ce>
 8001d90:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001d94:	4290      	cmp	r0, r2
 8001d96:	d010      	beq.n	8001dba <HAL_GPIO_Init+0x1d2>
 8001d98:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001d9c:	4290      	cmp	r0, r2
 8001d9e:	f43f af55 	beq.w	8001c4c <HAL_GPIO_Init+0x64>
 8001da2:	2208      	movs	r2, #8
 8001da4:	e755      	b.n	8001c52 <HAL_GPIO_Init+0x6a>
 8001da6:	2201      	movs	r2, #1
 8001da8:	e753      	b.n	8001c52 <HAL_GPIO_Init+0x6a>
 8001daa:	2202      	movs	r2, #2
 8001dac:	e751      	b.n	8001c52 <HAL_GPIO_Init+0x6a>
 8001dae:	2203      	movs	r2, #3
 8001db0:	e74f      	b.n	8001c52 <HAL_GPIO_Init+0x6a>
 8001db2:	2204      	movs	r2, #4
 8001db4:	e74d      	b.n	8001c52 <HAL_GPIO_Init+0x6a>
 8001db6:	2205      	movs	r2, #5
 8001db8:	e74b      	b.n	8001c52 <HAL_GPIO_Init+0x6a>
 8001dba:	2206      	movs	r2, #6
 8001dbc:	e749      	b.n	8001c52 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001dbe:	b002      	add	sp, #8
 8001dc0:	bd70      	pop	{r4, r5, r6, pc}
 8001dc2:	4770      	bx	lr
 8001dc4:	40013800 	.word	0x40013800
 8001dc8:	40013c00 	.word	0x40013c00
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020000 	.word	0x40020000

08001dd4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd4:	b10a      	cbz	r2, 8001dda <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd6:	6181      	str	r1, [r0, #24]
 8001dd8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dda:	0409      	lsls	r1, r1, #16
 8001ddc:	6181      	str	r1, [r0, #24]
  }
}
 8001dde:	4770      	bx	lr

08001de0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001de0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001de2:	ea01 0203 	and.w	r2, r1, r3
 8001de6:	ea21 0103 	bic.w	r1, r1, r3
 8001dea:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001dee:	6181      	str	r1, [r0, #24]
}
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001df4:	2800      	cmp	r0, #0
 8001df6:	f000 81e0 	beq.w	80021ba <HAL_RCC_OscConfig+0x3c6>
{
 8001dfa:	b570      	push	{r4, r5, r6, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e00:	6803      	ldr	r3, [r0, #0]
 8001e02:	f013 0f01 	tst.w	r3, #1
 8001e06:	d03b      	beq.n	8001e80 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e08:	4b9f      	ldr	r3, [pc, #636]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d02c      	beq.n	8001e6e <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e14:	4b9c      	ldr	r3, [pc, #624]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d021      	beq.n	8001e64 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e20:	6863      	ldr	r3, [r4, #4]
 8001e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e26:	d04f      	beq.n	8001ec8 <HAL_RCC_OscConfig+0xd4>
 8001e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e2c:	d052      	beq.n	8001ed4 <HAL_RCC_OscConfig+0xe0>
 8001e2e:	4b96      	ldr	r3, [pc, #600]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e40:	6863      	ldr	r3, [r4, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d050      	beq.n	8001ee8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7ff fc77 	bl	8001738 <HAL_GetTick>
 8001e4a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4c:	4b8e      	ldr	r3, [pc, #568]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001e54:	d114      	bne.n	8001e80 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e56:	f7ff fc6f 	bl	8001738 <HAL_GetTick>
 8001e5a:	1b40      	subs	r0, r0, r5
 8001e5c:	2864      	cmp	r0, #100	@ 0x64
 8001e5e:	d9f5      	bls.n	8001e4c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001e60:	2003      	movs	r0, #3
 8001e62:	e1b1      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e64:	4b88      	ldr	r3, [pc, #544]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001e6c:	d0d8      	beq.n	8001e20 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6e:	4b86      	ldr	r3, [pc, #536]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001e76:	d003      	beq.n	8001e80 <HAL_RCC_OscConfig+0x8c>
 8001e78:	6863      	ldr	r3, [r4, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 819f 	beq.w	80021be <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	f013 0f02 	tst.w	r3, #2
 8001e86:	d054      	beq.n	8001f32 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e88:	4b7f      	ldr	r3, [pc, #508]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f013 0f0c 	tst.w	r3, #12
 8001e90:	d03e      	beq.n	8001f10 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e92:	4b7d      	ldr	r3, [pc, #500]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d033      	beq.n	8001f06 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e9e:	68e3      	ldr	r3, [r4, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d068      	beq.n	8001f76 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea4:	4b79      	ldr	r3, [pc, #484]	@ (800208c <HAL_RCC_OscConfig+0x298>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eaa:	f7ff fc45 	bl	8001738 <HAL_GetTick>
 8001eae:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb0:	4b75      	ldr	r3, [pc, #468]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f013 0f02 	tst.w	r3, #2
 8001eb8:	d154      	bne.n	8001f64 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eba:	f7ff fc3d 	bl	8001738 <HAL_GetTick>
 8001ebe:	1b40      	subs	r0, r0, r5
 8001ec0:	2802      	cmp	r0, #2
 8001ec2:	d9f5      	bls.n	8001eb0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	e17f      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec8:	4a6f      	ldr	r2, [pc, #444]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001eca:	6813      	ldr	r3, [r2, #0]
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e7b5      	b.n	8001e40 <HAL_RCC_OscConfig+0x4c>
 8001ed4:	4b6c      	ldr	r3, [pc, #432]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	e7ab      	b.n	8001e40 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fc26 	bl	8001738 <HAL_GetTick>
 8001eec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eee:	4b66      	ldr	r3, [pc, #408]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001ef6:	d0c3      	beq.n	8001e80 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff fc1e 	bl	8001738 <HAL_GetTick>
 8001efc:	1b40      	subs	r0, r0, r5
 8001efe:	2864      	cmp	r0, #100	@ 0x64
 8001f00:	d9f5      	bls.n	8001eee <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001f02:	2003      	movs	r0, #3
 8001f04:	e160      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f06:	4b60      	ldr	r3, [pc, #384]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001f0e:	d1c6      	bne.n	8001e9e <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f10:	4b5d      	ldr	r3, [pc, #372]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f013 0f02 	tst.w	r3, #2
 8001f18:	d003      	beq.n	8001f22 <HAL_RCC_OscConfig+0x12e>
 8001f1a:	68e3      	ldr	r3, [r4, #12]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	f040 8150 	bne.w	80021c2 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f22:	4a59      	ldr	r2, [pc, #356]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001f24:	6813      	ldr	r3, [r2, #0]
 8001f26:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001f2a:	6921      	ldr	r1, [r4, #16]
 8001f2c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f30:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	f013 0f08 	tst.w	r3, #8
 8001f38:	d042      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f3a:	6963      	ldr	r3, [r4, #20]
 8001f3c:	b36b      	cbz	r3, 8001f9a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3e:	4b53      	ldr	r3, [pc, #332]	@ (800208c <HAL_RCC_OscConfig+0x298>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f46:	f7ff fbf7 	bl	8001738 <HAL_GetTick>
 8001f4a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4c:	4b4e      	ldr	r3, [pc, #312]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f50:	f013 0f02 	tst.w	r3, #2
 8001f54:	d134      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f56:	f7ff fbef 	bl	8001738 <HAL_GetTick>
 8001f5a:	1b40      	subs	r0, r0, r5
 8001f5c:	2802      	cmp	r0, #2
 8001f5e:	d9f5      	bls.n	8001f4c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001f60:	2003      	movs	r0, #3
 8001f62:	e131      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4a48      	ldr	r2, [pc, #288]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001f66:	6813      	ldr	r3, [r2, #0]
 8001f68:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001f6c:	6921      	ldr	r1, [r4, #16]
 8001f6e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	e7dd      	b.n	8001f32 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001f76:	4b45      	ldr	r3, [pc, #276]	@ (800208c <HAL_RCC_OscConfig+0x298>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fbdc 	bl	8001738 <HAL_GetTick>
 8001f80:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f82:	4b41      	ldr	r3, [pc, #260]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f013 0f02 	tst.w	r3, #2
 8001f8a:	d0d2      	beq.n	8001f32 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8c:	f7ff fbd4 	bl	8001738 <HAL_GetTick>
 8001f90:	1b40      	subs	r0, r0, r5
 8001f92:	2802      	cmp	r0, #2
 8001f94:	d9f5      	bls.n	8001f82 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001f96:	2003      	movs	r0, #3
 8001f98:	e116      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f9a:	4b3c      	ldr	r3, [pc, #240]	@ (800208c <HAL_RCC_OscConfig+0x298>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa2:	f7ff fbc9 	bl	8001738 <HAL_GetTick>
 8001fa6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa8:	4b37      	ldr	r3, [pc, #220]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fac:	f013 0f02 	tst.w	r3, #2
 8001fb0:	d006      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb2:	f7ff fbc1 	bl	8001738 <HAL_GetTick>
 8001fb6:	1b40      	subs	r0, r0, r5
 8001fb8:	2802      	cmp	r0, #2
 8001fba:	d9f5      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	e103      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc0:	6823      	ldr	r3, [r4, #0]
 8001fc2:	f013 0f04 	tst.w	r3, #4
 8001fc6:	d077      	beq.n	80020b8 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc8:	4b2f      	ldr	r3, [pc, #188]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fcc:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001fd0:	d133      	bne.n	800203a <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8001fd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fda:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001fde:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001fea:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fec:	4b28      	ldr	r3, [pc, #160]	@ (8002090 <HAL_RCC_OscConfig+0x29c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001ff4:	d023      	beq.n	800203e <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff6:	68a3      	ldr	r3, [r4, #8]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d034      	beq.n	8002066 <HAL_RCC_OscConfig+0x272>
 8001ffc:	2b05      	cmp	r3, #5
 8001ffe:	d038      	beq.n	8002072 <HAL_RCC_OscConfig+0x27e>
 8002000:	4b21      	ldr	r3, [pc, #132]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8002002:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002004:	f022 0201 	bic.w	r2, r2, #1
 8002008:	671a      	str	r2, [r3, #112]	@ 0x70
 800200a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800200c:	f022 0204 	bic.w	r2, r2, #4
 8002010:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002012:	68a3      	ldr	r3, [r4, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d03d      	beq.n	8002094 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7ff fb8e 	bl	8001738 <HAL_GetTick>
 800201c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201e:	4b1a      	ldr	r3, [pc, #104]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8002020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002022:	f013 0f02 	tst.w	r3, #2
 8002026:	d146      	bne.n	80020b6 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7ff fb86 	bl	8001738 <HAL_GetTick>
 800202c:	1b80      	subs	r0, r0, r6
 800202e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002032:	4298      	cmp	r0, r3
 8002034:	d9f3      	bls.n	800201e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002036:	2003      	movs	r0, #3
 8002038:	e0c6      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 800203a:	2500      	movs	r5, #0
 800203c:	e7d6      	b.n	8001fec <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203e:	4a14      	ldr	r2, [pc, #80]	@ (8002090 <HAL_RCC_OscConfig+0x29c>)
 8002040:	6813      	ldr	r3, [r2, #0]
 8002042:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002046:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002048:	f7ff fb76 	bl	8001738 <HAL_GetTick>
 800204c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204e:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <HAL_RCC_OscConfig+0x29c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002056:	d1ce      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002058:	f7ff fb6e 	bl	8001738 <HAL_GetTick>
 800205c:	1b80      	subs	r0, r0, r6
 800205e:	2802      	cmp	r0, #2
 8002060:	d9f5      	bls.n	800204e <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002062:	2003      	movs	r0, #3
 8002064:	e0b0      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002066:	4a08      	ldr	r2, [pc, #32]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8002068:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002070:	e7cf      	b.n	8002012 <HAL_RCC_OscConfig+0x21e>
 8002072:	4b05      	ldr	r3, [pc, #20]	@ (8002088 <HAL_RCC_OscConfig+0x294>)
 8002074:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002076:	f042 0204 	orr.w	r2, r2, #4
 800207a:	671a      	str	r2, [r3, #112]	@ 0x70
 800207c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	671a      	str	r2, [r3, #112]	@ 0x70
 8002084:	e7c5      	b.n	8002012 <HAL_RCC_OscConfig+0x21e>
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	42470000 	.word	0x42470000
 8002090:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002094:	f7ff fb50 	bl	8001738 <HAL_GetTick>
 8002098:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209a:	4b52      	ldr	r3, [pc, #328]	@ (80021e4 <HAL_RCC_OscConfig+0x3f0>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209e:	f013 0f02 	tst.w	r3, #2
 80020a2:	d008      	beq.n	80020b6 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f7ff fb48 	bl	8001738 <HAL_GetTick>
 80020a8:	1b80      	subs	r0, r0, r6
 80020aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80020ae:	4298      	cmp	r0, r3
 80020b0:	d9f3      	bls.n	800209a <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80020b2:	2003      	movs	r0, #3
 80020b4:	e088      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020b6:	b9ed      	cbnz	r5, 80020f4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b8:	69a3      	ldr	r3, [r4, #24]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8083 	beq.w	80021c6 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020c0:	4a48      	ldr	r2, [pc, #288]	@ (80021e4 <HAL_RCC_OscConfig+0x3f0>)
 80020c2:	6892      	ldr	r2, [r2, #8]
 80020c4:	f002 020c 	and.w	r2, r2, #12
 80020c8:	2a08      	cmp	r2, #8
 80020ca:	d051      	beq.n	8002170 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d017      	beq.n	8002100 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d0:	4b45      	ldr	r3, [pc, #276]	@ (80021e8 <HAL_RCC_OscConfig+0x3f4>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7ff fb2f 	bl	8001738 <HAL_GetTick>
 80020da:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020dc:	4b41      	ldr	r3, [pc, #260]	@ (80021e4 <HAL_RCC_OscConfig+0x3f0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80020e4:	d042      	beq.n	800216c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e6:	f7ff fb27 	bl	8001738 <HAL_GetTick>
 80020ea:	1b00      	subs	r0, r0, r4
 80020ec:	2802      	cmp	r0, #2
 80020ee:	d9f5      	bls.n	80020dc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80020f0:	2003      	movs	r0, #3
 80020f2:	e069      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f4:	4a3b      	ldr	r2, [pc, #236]	@ (80021e4 <HAL_RCC_OscConfig+0x3f0>)
 80020f6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80020f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020fe:	e7db      	b.n	80020b8 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002100:	4b39      	ldr	r3, [pc, #228]	@ (80021e8 <HAL_RCC_OscConfig+0x3f4>)
 8002102:	2200      	movs	r2, #0
 8002104:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002106:	f7ff fb17 	bl	8001738 <HAL_GetTick>
 800210a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210c:	4b35      	ldr	r3, [pc, #212]	@ (80021e4 <HAL_RCC_OscConfig+0x3f0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002114:	d006      	beq.n	8002124 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002116:	f7ff fb0f 	bl	8001738 <HAL_GetTick>
 800211a:	1b40      	subs	r0, r0, r5
 800211c:	2802      	cmp	r0, #2
 800211e:	d9f5      	bls.n	800210c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002120:	2003      	movs	r0, #3
 8002122:	e051      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002124:	69e3      	ldr	r3, [r4, #28]
 8002126:	6a22      	ldr	r2, [r4, #32]
 8002128:	4313      	orrs	r3, r2
 800212a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800212c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002130:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002132:	0852      	lsrs	r2, r2, #1
 8002134:	3a01      	subs	r2, #1
 8002136:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800213a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800213c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002140:	4a28      	ldr	r2, [pc, #160]	@ (80021e4 <HAL_RCC_OscConfig+0x3f0>)
 8002142:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002144:	4b28      	ldr	r3, [pc, #160]	@ (80021e8 <HAL_RCC_OscConfig+0x3f4>)
 8002146:	2201      	movs	r2, #1
 8002148:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800214a:	f7ff faf5 	bl	8001738 <HAL_GetTick>
 800214e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002150:	4b24      	ldr	r3, [pc, #144]	@ (80021e4 <HAL_RCC_OscConfig+0x3f0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002158:	d106      	bne.n	8002168 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215a:	f7ff faed 	bl	8001738 <HAL_GetTick>
 800215e:	1b00      	subs	r0, r0, r4
 8002160:	2802      	cmp	r0, #2
 8002162:	d9f5      	bls.n	8002150 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002164:	2003      	movs	r0, #3
 8002166:	e02f      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002168:	2000      	movs	r0, #0
 800216a:	e02d      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
 800216c:	2000      	movs	r0, #0
 800216e:	e02b      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002170:	2b01      	cmp	r3, #1
 8002172:	d02b      	beq.n	80021cc <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002174:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <HAL_RCC_OscConfig+0x3f0>)
 8002176:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002178:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 800217c:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800217e:	4291      	cmp	r1, r2
 8002180:	d126      	bne.n	80021d0 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002182:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002186:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002188:	428a      	cmp	r2, r1
 800218a:	d123      	bne.n	80021d4 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800218c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800218e:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002192:	401a      	ands	r2, r3
 8002194:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002198:	d11e      	bne.n	80021d8 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800219a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800219e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80021a0:	0852      	lsrs	r2, r2, #1
 80021a2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80021a8:	d118      	bne.n	80021dc <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021aa:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80021ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b0:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80021b4:	d114      	bne.n	80021e0 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80021b6:	2000      	movs	r0, #0
 80021b8:	e006      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80021ba:	2001      	movs	r0, #1
}
 80021bc:	4770      	bx	lr
        return HAL_ERROR;
 80021be:	2001      	movs	r0, #1
 80021c0:	e002      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80021c2:	2001      	movs	r0, #1
 80021c4:	e000      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80021c6:	2000      	movs	r0, #0
}
 80021c8:	b002      	add	sp, #8
 80021ca:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80021cc:	2001      	movs	r0, #1
 80021ce:	e7fb      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80021d0:	2001      	movs	r0, #1
 80021d2:	e7f9      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
 80021d4:	2001      	movs	r0, #1
 80021d6:	e7f7      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
 80021d8:	2001      	movs	r0, #1
 80021da:	e7f5      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
 80021dc:	2001      	movs	r0, #1
 80021de:	e7f3      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
 80021e0:	2001      	movs	r0, #1
 80021e2:	e7f1      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
 80021e4:	40023800 	.word	0x40023800
 80021e8:	42470000 	.word	0x42470000

080021ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ec:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ee:	4b33      	ldr	r3, [pc, #204]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xd0>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d05b      	beq.n	80022b2 <HAL_RCC_GetSysClockFreq+0xc6>
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d15b      	bne.n	80022b6 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021fe:	4b2f      	ldr	r3, [pc, #188]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800220c:	d02c      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220e:	4b2b      	ldr	r3, [pc, #172]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002210:	6858      	ldr	r0, [r3, #4]
 8002212:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002216:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800221a:	ebbc 0c00 	subs.w	ip, ip, r0
 800221e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002222:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002226:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800222a:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800222e:	ebb1 010c 	subs.w	r1, r1, ip
 8002232:	eb63 030e 	sbc.w	r3, r3, lr
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800223c:	00c9      	lsls	r1, r1, #3
 800223e:	eb11 0c00 	adds.w	ip, r1, r0
 8002242:	f143 0300 	adc.w	r3, r3, #0
 8002246:	0259      	lsls	r1, r3, #9
 8002248:	2300      	movs	r3, #0
 800224a:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800224e:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002252:	f7fe fc63 	bl	8000b1c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002256:	4b19      	ldr	r3, [pc, #100]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800225e:	3301      	adds	r3, #1
 8002260:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002262:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002266:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002268:	4b14      	ldr	r3, [pc, #80]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800226a:	6858      	ldr	r0, [r3, #4]
 800226c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002270:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002274:	ebbc 0c00 	subs.w	ip, ip, r0
 8002278:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800227c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002280:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002284:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002288:	ebb1 010c 	subs.w	r1, r1, ip
 800228c:	eb63 030e 	sbc.w	r3, r3, lr
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002296:	00c9      	lsls	r1, r1, #3
 8002298:	eb11 0c00 	adds.w	ip, r1, r0
 800229c:	f143 0300 	adc.w	r3, r3, #0
 80022a0:	0299      	lsls	r1, r3, #10
 80022a2:	2300      	movs	r3, #0
 80022a4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80022a8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80022ac:	f7fe fc36 	bl	8000b1c <__aeabi_uldivmod>
 80022b0:	e7d1      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 80022b2:	4803      	ldr	r0, [pc, #12]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80022b4:	e7d7      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x7a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022b6:	4803      	ldr	r0, [pc, #12]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0xd8>)
  return sysclockfreq;
 80022b8:	e7d5      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x7a>
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	007a1200 	.word	0x007a1200
 80022c4:	00f42400 	.word	0x00f42400

080022c8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80022c8:	2800      	cmp	r0, #0
 80022ca:	f000 809b 	beq.w	8002404 <HAL_RCC_ClockConfig+0x13c>
{
 80022ce:	b570      	push	{r4, r5, r6, lr}
 80022d0:	460d      	mov	r5, r1
 80022d2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002414 <HAL_RCC_ClockConfig+0x14c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	428b      	cmp	r3, r1
 80022de:	d208      	bcs.n	80022f2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e0:	b2cb      	uxtb	r3, r1
 80022e2:	4a4c      	ldr	r2, [pc, #304]	@ (8002414 <HAL_RCC_ClockConfig+0x14c>)
 80022e4:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	6813      	ldr	r3, [r2, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	428b      	cmp	r3, r1
 80022ee:	f040 808b 	bne.w	8002408 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	f013 0f02 	tst.w	r3, #2
 80022f8:	d017      	beq.n	800232a <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fa:	f013 0f04 	tst.w	r3, #4
 80022fe:	d004      	beq.n	800230a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002300:	4a45      	ldr	r2, [pc, #276]	@ (8002418 <HAL_RCC_ClockConfig+0x150>)
 8002302:	6893      	ldr	r3, [r2, #8]
 8002304:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002308:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230a:	6823      	ldr	r3, [r4, #0]
 800230c:	f013 0f08 	tst.w	r3, #8
 8002310:	d004      	beq.n	800231c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002312:	4a41      	ldr	r2, [pc, #260]	@ (8002418 <HAL_RCC_ClockConfig+0x150>)
 8002314:	6893      	ldr	r3, [r2, #8]
 8002316:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800231a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231c:	4a3e      	ldr	r2, [pc, #248]	@ (8002418 <HAL_RCC_ClockConfig+0x150>)
 800231e:	6893      	ldr	r3, [r2, #8]
 8002320:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002324:	68a1      	ldr	r1, [r4, #8]
 8002326:	430b      	orrs	r3, r1
 8002328:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	f013 0f01 	tst.w	r3, #1
 8002330:	d032      	beq.n	8002398 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002332:	6863      	ldr	r3, [r4, #4]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d021      	beq.n	800237c <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002338:	1e9a      	subs	r2, r3, #2
 800233a:	2a01      	cmp	r2, #1
 800233c:	d925      	bls.n	800238a <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233e:	4a36      	ldr	r2, [pc, #216]	@ (8002418 <HAL_RCC_ClockConfig+0x150>)
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	f012 0f02 	tst.w	r2, #2
 8002346:	d061      	beq.n	800240c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002348:	4933      	ldr	r1, [pc, #204]	@ (8002418 <HAL_RCC_ClockConfig+0x150>)
 800234a:	688a      	ldr	r2, [r1, #8]
 800234c:	f022 0203 	bic.w	r2, r2, #3
 8002350:	4313      	orrs	r3, r2
 8002352:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002354:	f7ff f9f0 	bl	8001738 <HAL_GetTick>
 8002358:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	4b2f      	ldr	r3, [pc, #188]	@ (8002418 <HAL_RCC_ClockConfig+0x150>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	6862      	ldr	r2, [r4, #4]
 8002364:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002368:	d016      	beq.n	8002398 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236a:	f7ff f9e5 	bl	8001738 <HAL_GetTick>
 800236e:	1b80      	subs	r0, r0, r6
 8002370:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002374:	4298      	cmp	r0, r3
 8002376:	d9f0      	bls.n	800235a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002378:	2003      	movs	r0, #3
 800237a:	e042      	b.n	8002402 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237c:	4a26      	ldr	r2, [pc, #152]	@ (8002418 <HAL_RCC_ClockConfig+0x150>)
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002384:	d1e0      	bne.n	8002348 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002386:	2001      	movs	r0, #1
 8002388:	e03b      	b.n	8002402 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238a:	4a23      	ldr	r2, [pc, #140]	@ (8002418 <HAL_RCC_ClockConfig+0x150>)
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002392:	d1d9      	bne.n	8002348 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002394:	2001      	movs	r0, #1
 8002396:	e034      	b.n	8002402 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002398:	4b1e      	ldr	r3, [pc, #120]	@ (8002414 <HAL_RCC_ClockConfig+0x14c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	42ab      	cmp	r3, r5
 80023a2:	d907      	bls.n	80023b4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a4:	b2ea      	uxtb	r2, r5
 80023a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <HAL_RCC_ClockConfig+0x14c>)
 80023a8:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	42ab      	cmp	r3, r5
 80023b2:	d12d      	bne.n	8002410 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	f013 0f04 	tst.w	r3, #4
 80023ba:	d006      	beq.n	80023ca <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023bc:	4a16      	ldr	r2, [pc, #88]	@ (8002418 <HAL_RCC_ClockConfig+0x150>)
 80023be:	6893      	ldr	r3, [r2, #8]
 80023c0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80023c4:	68e1      	ldr	r1, [r4, #12]
 80023c6:	430b      	orrs	r3, r1
 80023c8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	f013 0f08 	tst.w	r3, #8
 80023d0:	d007      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023d2:	4a11      	ldr	r2, [pc, #68]	@ (8002418 <HAL_RCC_ClockConfig+0x150>)
 80023d4:	6893      	ldr	r3, [r2, #8]
 80023d6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80023da:	6921      	ldr	r1, [r4, #16]
 80023dc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023e0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023e2:	f7ff ff03 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 80023e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <HAL_RCC_ClockConfig+0x150>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80023ee:	4a0b      	ldr	r2, [pc, #44]	@ (800241c <HAL_RCC_ClockConfig+0x154>)
 80023f0:	5cd3      	ldrb	r3, [r2, r3]
 80023f2:	40d8      	lsrs	r0, r3
 80023f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <HAL_RCC_ClockConfig+0x158>)
 80023f6:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80023f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002424 <HAL_RCC_ClockConfig+0x15c>)
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	f7ff f950 	bl	80016a0 <HAL_InitTick>
  return HAL_OK;
 8002400:	2000      	movs	r0, #0
}
 8002402:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002404:	2001      	movs	r0, #1
}
 8002406:	4770      	bx	lr
      return HAL_ERROR;
 8002408:	2001      	movs	r0, #1
 800240a:	e7fa      	b.n	8002402 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 800240c:	2001      	movs	r0, #1
 800240e:	e7f8      	b.n	8002402 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002410:	2001      	movs	r0, #1
 8002412:	e7f6      	b.n	8002402 <HAL_RCC_ClockConfig+0x13a>
 8002414:	40023c00 	.word	0x40023c00
 8002418:	40023800 	.word	0x40023800
 800241c:	08007428 	.word	0x08007428
 8002420:	20000000 	.word	0x20000000
 8002424:	20000008 	.word	0x20000008

08002428 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002428:	4b01      	ldr	r3, [pc, #4]	@ (8002430 <HAL_RCC_GetHCLKFreq+0x8>)
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000000 	.word	0x20000000

08002434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002434:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002436:	f7ff fff7 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 800243a:	4b04      	ldr	r3, [pc, #16]	@ (800244c <HAL_RCC_GetPCLK1Freq+0x18>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002442:	4a03      	ldr	r2, [pc, #12]	@ (8002450 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002444:	5cd3      	ldrb	r3, [r2, r3]
}
 8002446:	40d8      	lsrs	r0, r3
 8002448:	bd08      	pop	{r3, pc}
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800
 8002450:	08007420 	.word	0x08007420

08002454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002454:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002456:	f7ff ffe7 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 800245a:	4b04      	ldr	r3, [pc, #16]	@ (800246c <HAL_RCC_GetPCLK2Freq+0x18>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002462:	4a03      	ldr	r2, [pc, #12]	@ (8002470 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002464:	5cd3      	ldrb	r3, [r2, r3]
}
 8002466:	40d8      	lsrs	r0, r3
 8002468:	bd08      	pop	{r3, pc}
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800
 8002470:	08007420 	.word	0x08007420

08002474 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002474:	b198      	cbz	r0, 800249e <HAL_RNG_Init+0x2a>
{
 8002476:	b510      	push	{r4, lr}
 8002478:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800247a:	7943      	ldrb	r3, [r0, #5]
 800247c:	b15b      	cbz	r3, 8002496 <HAL_RNG_Init+0x22>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800247e:	2302      	movs	r3, #2
 8002480:	7163      	strb	r3, [r4, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002482:	6822      	ldr	r2, [r4, #0]
 8002484:	6813      	ldr	r3, [r2, #0]
 8002486:	f043 0304 	orr.w	r3, r3, #4
 800248a:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800248c:	2301      	movs	r3, #1
 800248e:	7163      	strb	r3, [r4, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002490:	2000      	movs	r0, #0
 8002492:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
}
 8002494:	bd10      	pop	{r4, pc}
    hrng->Lock = HAL_UNLOCKED;
 8002496:	7103      	strb	r3, [r0, #4]
    HAL_RNG_MspInit(hrng);
 8002498:	f7fe ff50 	bl	800133c <HAL_RNG_MspInit>
 800249c:	e7ef      	b.n	800247e <HAL_RNG_Init+0xa>
    return HAL_ERROR;
 800249e:	2001      	movs	r0, #1
}
 80024a0:	4770      	bx	lr
	...

080024a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	4605      	mov	r5, r0
 80024ac:	4688      	mov	r8, r1
 80024ae:	4617      	mov	r7, r2
 80024b0:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024b2:	f7ff f941 	bl	8001738 <HAL_GetTick>
 80024b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80024b8:	1a1b      	subs	r3, r3, r0
 80024ba:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80024be:	f7ff f93b 	bl	8001738 <HAL_GetTick>
 80024c2:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024c4:	4b28      	ldr	r3, [pc, #160]	@ (8002568 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80024cc:	fb09 f303 	mul.w	r3, r9, r3
 80024d0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024d2:	682b      	ldr	r3, [r5, #0]
 80024d4:	689c      	ldr	r4, [r3, #8]
 80024d6:	ea38 0404 	bics.w	r4, r8, r4
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	42bb      	cmp	r3, r7
 80024e2:	d03d      	beq.n	8002560 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024e4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80024e8:	d0f3      	beq.n	80024d2 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024ea:	f7ff f925 	bl	8001738 <HAL_GetTick>
 80024ee:	eba0 000a 	sub.w	r0, r0, sl
 80024f2:	4548      	cmp	r0, r9
 80024f4:	d203      	bcs.n	80024fe <SPI_WaitFlagStateUntilTimeout+0x5a>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80024f6:	9b01      	ldr	r3, [sp, #4]
 80024f8:	bb73      	cbnz	r3, 8002558 <SPI_WaitFlagStateUntilTimeout+0xb4>
      {
        tmp_timeout = 0U;
 80024fa:	4699      	mov	r9, r3
 80024fc:	e7e9      	b.n	80024d2 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024fe:	682a      	ldr	r2, [r5, #0]
 8002500:	6853      	ldr	r3, [r2, #4]
 8002502:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8002506:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002508:	686b      	ldr	r3, [r5, #4]
 800250a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800250e:	d00b      	beq.n	8002528 <SPI_WaitFlagStateUntilTimeout+0x84>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002510:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002516:	d014      	beq.n	8002542 <SPI_WaitFlagStateUntilTimeout+0x9e>
        hspi->State = HAL_SPI_STATE_READY;
 8002518:	2301      	movs	r3, #1
 800251a:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800251e:	2300      	movs	r3, #0
 8002520:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002524:	2003      	movs	r0, #3
 8002526:	e01c      	b.n	8002562 <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002528:	68ab      	ldr	r3, [r5, #8]
 800252a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800252e:	d002      	beq.n	8002536 <SPI_WaitFlagStateUntilTimeout+0x92>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002534:	d1ec      	bne.n	8002510 <SPI_WaitFlagStateUntilTimeout+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8002536:	682a      	ldr	r2, [r5, #0]
 8002538:	6813      	ldr	r3, [r2, #0]
 800253a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	e7e6      	b.n	8002510 <SPI_WaitFlagStateUntilTimeout+0x6c>
          SPI_RESET_CRC(hspi);
 8002542:	682a      	ldr	r2, [r5, #0]
 8002544:	6813      	ldr	r3, [r2, #0]
 8002546:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	682a      	ldr	r2, [r5, #0]
 800254e:	6813      	ldr	r3, [r2, #0]
 8002550:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e7df      	b.n	8002518 <SPI_WaitFlagStateUntilTimeout+0x74>
      }
      else
      {
        count--;
 8002558:	9b01      	ldr	r3, [sp, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	e7b8      	b.n	80024d2 <SPI_WaitFlagStateUntilTimeout+0x2e>
      }
    }
  }

  return HAL_OK;
 8002560:	2000      	movs	r0, #0
}
 8002562:	b002      	add	sp, #8
 8002564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002568:	20000000 	.word	0x20000000

0800256c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800256c:	b570      	push	{r4, r5, r6, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	4604      	mov	r4, r0
 8002572:	460d      	mov	r5, r1
 8002574:	4616      	mov	r6, r2
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002576:	9200      	str	r2, [sp, #0]
 8002578:	460b      	mov	r3, r1
 800257a:	2201      	movs	r2, #1
 800257c:	2102      	movs	r1, #2
 800257e:	f7ff ff91 	bl	80024a4 <SPI_WaitFlagStateUntilTimeout>
 8002582:	b9d0      	cbnz	r0, 80025ba <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002584:	4b17      	ldr	r3, [pc, #92]	@ (80025e4 <SPI_EndRxTxTransaction+0x78>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a17      	ldr	r2, [pc, #92]	@ (80025e8 <SPI_EndRxTxTransaction+0x7c>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002594:	fb02 f303 	mul.w	r3, r2, r3
 8002598:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800259a:	6863      	ldr	r3, [r4, #4]
 800259c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025a0:	d011      	beq.n	80025c6 <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80025a2:	9b03      	ldr	r3, [sp, #12]
 80025a4:	b13b      	cbz	r3, 80025b6 <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 80025a6:	9b03      	ldr	r3, [sp, #12]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80025b4:	d1f5      	bne.n	80025a2 <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 80025b6:	b004      	add	sp, #16
 80025b8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025ba:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80025bc:	f043 0320 	orr.w	r3, r3, #32
 80025c0:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 80025c2:	2003      	movs	r0, #3
 80025c4:	e7f7      	b.n	80025b6 <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025c6:	9600      	str	r6, [sp, #0]
 80025c8:	462b      	mov	r3, r5
 80025ca:	2200      	movs	r2, #0
 80025cc:	2180      	movs	r1, #128	@ 0x80
 80025ce:	4620      	mov	r0, r4
 80025d0:	f7ff ff68 	bl	80024a4 <SPI_WaitFlagStateUntilTimeout>
 80025d4:	2800      	cmp	r0, #0
 80025d6:	d0ee      	beq.n	80025b6 <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80025da:	f043 0320 	orr.w	r3, r3, #32
 80025de:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 80025e0:	2003      	movs	r0, #3
 80025e2:	e7e8      	b.n	80025b6 <SPI_EndRxTxTransaction+0x4a>
 80025e4:	20000000 	.word	0x20000000
 80025e8:	165e9f81 	.word	0x165e9f81

080025ec <SPI_EndRxTransaction>:
{
 80025ec:	b510      	push	{r4, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	4604      	mov	r4, r0
 80025f2:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025f4:	6841      	ldr	r1, [r0, #4]
 80025f6:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 80025fa:	d014      	beq.n	8002626 <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025fc:	6861      	ldr	r1, [r4, #4]
 80025fe:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8002602:	d12a      	bne.n	800265a <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002604:	68a1      	ldr	r1, [r4, #8]
 8002606:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800260a:	d019      	beq.n	8002640 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800260c:	9200      	str	r2, [sp, #0]
 800260e:	2200      	movs	r2, #0
 8002610:	2180      	movs	r1, #128	@ 0x80
 8002612:	4620      	mov	r0, r4
 8002614:	f7ff ff46 	bl	80024a4 <SPI_WaitFlagStateUntilTimeout>
 8002618:	b330      	cbz	r0, 8002668 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800261a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800261c:	f043 0320 	orr.w	r3, r3, #32
 8002620:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002622:	2003      	movs	r0, #3
 8002624:	e020      	b.n	8002668 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002626:	6881      	ldr	r1, [r0, #8]
 8002628:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800262c:	d002      	beq.n	8002634 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800262e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8002632:	d1e3      	bne.n	80025fc <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8002634:	6820      	ldr	r0, [r4, #0]
 8002636:	6801      	ldr	r1, [r0, #0]
 8002638:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 800263c:	6001      	str	r1, [r0, #0]
 800263e:	e7dd      	b.n	80025fc <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002640:	9200      	str	r2, [sp, #0]
 8002642:	2200      	movs	r2, #0
 8002644:	2101      	movs	r1, #1
 8002646:	4620      	mov	r0, r4
 8002648:	f7ff ff2c 	bl	80024a4 <SPI_WaitFlagStateUntilTimeout>
 800264c:	b160      	cbz	r0, 8002668 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800264e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002650:	f043 0320 	orr.w	r3, r3, #32
 8002654:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002656:	2003      	movs	r0, #3
 8002658:	e006      	b.n	8002668 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800265a:	9200      	str	r2, [sp, #0]
 800265c:	2200      	movs	r2, #0
 800265e:	2101      	movs	r1, #1
 8002660:	4620      	mov	r0, r4
 8002662:	f7ff ff1f 	bl	80024a4 <SPI_WaitFlagStateUntilTimeout>
 8002666:	b908      	cbnz	r0, 800266c <SPI_EndRxTransaction+0x80>
}
 8002668:	b002      	add	sp, #8
 800266a:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800266c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800266e:	f043 0320 	orr.w	r3, r3, #32
 8002672:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002674:	2003      	movs	r0, #3
 8002676:	e7f7      	b.n	8002668 <SPI_EndRxTransaction+0x7c>

08002678 <HAL_SPI_Init>:
  if (hspi == NULL)
 8002678:	2800      	cmp	r0, #0
 800267a:	d05a      	beq.n	8002732 <HAL_SPI_Init+0xba>
{
 800267c:	b510      	push	{r4, lr}
 800267e:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002680:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002682:	b933      	cbnz	r3, 8002692 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002684:	6843      	ldr	r3, [r0, #4]
 8002686:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800268a:	d005      	beq.n	8002698 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800268c:	2300      	movs	r3, #0
 800268e:	61c3      	str	r3, [r0, #28]
 8002690:	e002      	b.n	8002698 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002692:	2300      	movs	r3, #0
 8002694:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002696:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002698:	2300      	movs	r3, #0
 800269a:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800269c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d040      	beq.n	8002726 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 80026a4:	2302      	movs	r3, #2
 80026a6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80026aa:	6822      	ldr	r2, [r4, #0]
 80026ac:	6813      	ldr	r3, [r2, #0]
 80026ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026b2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026b4:	6863      	ldr	r3, [r4, #4]
 80026b6:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80026ba:	68a2      	ldr	r2, [r4, #8]
 80026bc:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 80026c0:	4313      	orrs	r3, r2
 80026c2:	68e2      	ldr	r2, [r4, #12]
 80026c4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80026c8:	4313      	orrs	r3, r2
 80026ca:	6922      	ldr	r2, [r4, #16]
 80026cc:	f002 0202 	and.w	r2, r2, #2
 80026d0:	4313      	orrs	r3, r2
 80026d2:	6962      	ldr	r2, [r4, #20]
 80026d4:	f002 0201 	and.w	r2, r2, #1
 80026d8:	4313      	orrs	r3, r2
 80026da:	69a2      	ldr	r2, [r4, #24]
 80026dc:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80026e0:	4313      	orrs	r3, r2
 80026e2:	69e2      	ldr	r2, [r4, #28]
 80026e4:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80026e8:	4313      	orrs	r3, r2
 80026ea:	6a22      	ldr	r2, [r4, #32]
 80026ec:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80026f0:	4313      	orrs	r3, r2
 80026f2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80026f4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80026f8:	6821      	ldr	r1, [r4, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80026fe:	8b63      	ldrh	r3, [r4, #26]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002706:	f002 0210 	and.w	r2, r2, #16
 800270a:	6821      	ldr	r1, [r4, #0]
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002710:	6822      	ldr	r2, [r4, #0]
 8002712:	69d3      	ldr	r3, [r2, #28]
 8002714:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002718:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800271a:	2000      	movs	r0, #0
 800271c:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800271e:	2301      	movs	r3, #1
 8002720:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8002724:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002726:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 800272a:	4620      	mov	r0, r4
 800272c:	f7fe fe40 	bl	80013b0 <HAL_SPI_MspInit>
 8002730:	e7b8      	b.n	80026a4 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8002732:	2001      	movs	r0, #1
}
 8002734:	4770      	bx	lr

08002736 <HAL_SPI_Transmit>:
{
 8002736:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800273a:	b083      	sub	sp, #12
 800273c:	4604      	mov	r4, r0
 800273e:	4689      	mov	r9, r1
 8002740:	4690      	mov	r8, r2
 8002742:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 8002744:	f7fe fff8 	bl	8001738 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002748:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 800274c:	b2f6      	uxtb	r6, r6
 800274e:	2e01      	cmp	r6, #1
 8002750:	f040 80cc 	bne.w	80028ec <HAL_SPI_Transmit+0x1b6>
 8002754:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8002756:	f1b9 0f00 	cmp.w	r9, #0
 800275a:	f000 80c8 	beq.w	80028ee <HAL_SPI_Transmit+0x1b8>
 800275e:	f1b8 0f00 	cmp.w	r8, #0
 8002762:	f000 80c4 	beq.w	80028ee <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 8002766:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800276a:	2b01      	cmp	r3, #1
 800276c:	f000 80c3 	beq.w	80028f6 <HAL_SPI_Transmit+0x1c0>
 8002770:	2301      	movs	r3, #1
 8002772:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002776:	2303      	movs	r3, #3
 8002778:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800277c:	2300      	movs	r3, #0
 800277e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002780:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002784:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002788:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800278c:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800278e:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002790:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002792:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002794:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002796:	68a3      	ldr	r3, [r4, #8]
 8002798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800279c:	d01e      	beq.n	80027dc <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80027a6:	d103      	bne.n	80027b0 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027ae:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027b0:	68e3      	ldr	r3, [r4, #12]
 80027b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027b6:	d01c      	beq.n	80027f2 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027b8:	6863      	ldr	r3, [r4, #4]
 80027ba:	b113      	cbz	r3, 80027c2 <HAL_SPI_Transmit+0x8c>
 80027bc:	f1b8 0f01 	cmp.w	r8, #1
 80027c0:	d15f      	bne.n	8002882 <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80027c2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	7812      	ldrb	r2, [r2, #0]
 80027c8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80027cc:	3301      	adds	r3, #1
 80027ce:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80027d0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80027da:	e052      	b.n	8002882 <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 80027dc:	6822      	ldr	r2, [r4, #0]
 80027de:	6813      	ldr	r3, [r2, #0]
 80027e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027e4:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80027e6:	6822      	ldr	r2, [r4, #0]
 80027e8:	6813      	ldr	r3, [r2, #0]
 80027ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	e7d5      	b.n	800279e <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027f2:	6863      	ldr	r3, [r4, #4]
 80027f4:	b113      	cbz	r3, 80027fc <HAL_SPI_Transmit+0xc6>
 80027f6:	f1b8 0f01 	cmp.w	r8, #1
 80027fa:	d115      	bne.n	8002828 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027fc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80027fe:	6823      	ldr	r3, [r4, #0]
 8002800:	8812      	ldrh	r2, [r2, #0]
 8002802:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002804:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002806:	3302      	adds	r3, #2
 8002808:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800280a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29b      	uxth	r3, r3
 8002812:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8002814:	e008      	b.n	8002828 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002816:	f7fe ff8f 	bl	8001738 <HAL_GetTick>
 800281a:	1bc0      	subs	r0, r0, r7
 800281c:	42a8      	cmp	r0, r5
 800281e:	d302      	bcc.n	8002826 <HAL_SPI_Transmit+0xf0>
 8002820:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8002824:	d115      	bne.n	8002852 <HAL_SPI_Transmit+0x11c>
 8002826:	b1a5      	cbz	r5, 8002852 <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8002828:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d042      	beq.n	80028b6 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	f012 0f02 	tst.w	r2, #2
 8002838:	d0ed      	beq.n	8002816 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800283a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800283c:	8812      	ldrh	r2, [r2, #0]
 800283e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002840:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002842:	3302      	adds	r3, #2
 8002844:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8002846:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29b      	uxth	r3, r3
 800284e:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8002850:	e7ea      	b.n	8002828 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8002852:	2301      	movs	r3, #1
 8002854:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002858:	2300      	movs	r3, #0
 800285a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 800285e:	2603      	movs	r6, #3
 8002860:	e045      	b.n	80028ee <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002862:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002864:	7812      	ldrb	r2, [r2, #0]
 8002866:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002868:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800286a:	3301      	adds	r3, #1
 800286c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800286e:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 8002872:	fa1f fc8c 	uxth.w	ip, ip
 8002876:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800287a:	fa1f fc8c 	uxth.w	ip, ip
 800287e:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8002882:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002884:	b29b      	uxth	r3, r3
 8002886:	b1b3      	cbz	r3, 80028b6 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	f012 0f02 	tst.w	r2, #2
 8002890:	d1e7      	bne.n	8002862 <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002892:	f7fe ff51 	bl	8001738 <HAL_GetTick>
 8002896:	1bc0      	subs	r0, r0, r7
 8002898:	42a8      	cmp	r0, r5
 800289a:	d302      	bcc.n	80028a2 <HAL_SPI_Transmit+0x16c>
 800289c:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80028a0:	d101      	bne.n	80028a6 <HAL_SPI_Transmit+0x170>
 80028a2:	2d00      	cmp	r5, #0
 80028a4:	d1ed      	bne.n	8002882 <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80028ac:	2300      	movs	r3, #0
 80028ae:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80028b2:	2603      	movs	r6, #3
 80028b4:	e01b      	b.n	80028ee <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028b6:	463a      	mov	r2, r7
 80028b8:	4629      	mov	r1, r5
 80028ba:	4620      	mov	r0, r4
 80028bc:	f7ff fe56 	bl	800256c <SPI_EndRxTxTransaction>
 80028c0:	b108      	cbz	r0, 80028c6 <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028c2:	2320      	movs	r3, #32
 80028c4:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028c6:	68a3      	ldr	r3, [r4, #8]
 80028c8:	b933      	cbnz	r3, 80028d8 <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	9201      	str	r2, [sp, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80028d8:	2301      	movs	r3, #1
 80028da:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80028de:	2300      	movs	r3, #0
 80028e0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80028e6:	b913      	cbnz	r3, 80028ee <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 80028e8:	2600      	movs	r6, #0
 80028ea:	e000      	b.n	80028ee <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 80028ec:	2602      	movs	r6, #2
}
 80028ee:	4630      	mov	r0, r6
 80028f0:	b003      	add	sp, #12
 80028f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80028f6:	2602      	movs	r6, #2
 80028f8:	e7f9      	b.n	80028ee <HAL_SPI_Transmit+0x1b8>

080028fa <HAL_SPI_TransmitReceive>:
{
 80028fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028fe:	b083      	sub	sp, #12
 8002900:	4604      	mov	r4, r0
 8002902:	4688      	mov	r8, r1
 8002904:	4691      	mov	r9, r2
 8002906:	461f      	mov	r7, r3
 8002908:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 800290a:	f7fe ff15 	bl	8001738 <HAL_GetTick>
 800290e:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8002910:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8002914:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8002916:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002918:	2b01      	cmp	r3, #1
 800291a:	d00a      	beq.n	8002932 <HAL_SPI_TransmitReceive+0x38>
 800291c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8002920:	f040 8105 	bne.w	8002b2e <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002924:	68a2      	ldr	r2, [r4, #8]
 8002926:	2a00      	cmp	r2, #0
 8002928:	f040 8105 	bne.w	8002b36 <HAL_SPI_TransmitReceive+0x23c>
 800292c:	2b04      	cmp	r3, #4
 800292e:	f040 8104 	bne.w	8002b3a <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002932:	f1b8 0f00 	cmp.w	r8, #0
 8002936:	f000 8102 	beq.w	8002b3e <HAL_SPI_TransmitReceive+0x244>
 800293a:	f1b9 0f00 	cmp.w	r9, #0
 800293e:	f000 8100 	beq.w	8002b42 <HAL_SPI_TransmitReceive+0x248>
 8002942:	2f00      	cmp	r7, #0
 8002944:	f000 80ff 	beq.w	8002b46 <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 8002948:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800294c:	2b01      	cmp	r3, #1
 800294e:	f000 80fc 	beq.w	8002b4a <HAL_SPI_TransmitReceive+0x250>
 8002952:	2301      	movs	r3, #1
 8002954:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002958:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b04      	cmp	r3, #4
 8002960:	d002      	beq.n	8002968 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002962:	2305      	movs	r3, #5
 8002964:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002968:	2300      	movs	r3, #0
 800296a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800296c:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002970:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002972:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002974:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002978:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800297a:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 800297c:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800297e:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002988:	d103      	bne.n	8002992 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002990:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002992:	68e3      	ldr	r3, [r4, #12]
 8002994:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002998:	d011      	beq.n	80029be <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800299a:	6863      	ldr	r3, [r4, #4]
 800299c:	b10b      	cbz	r3, 80029a2 <HAL_SPI_TransmitReceive+0xa8>
 800299e:	2f01      	cmp	r7, #1
 80029a0:	d10b      	bne.n	80029ba <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80029a2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	7812      	ldrb	r2, [r2, #0]
 80029a8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80029ac:	3301      	adds	r3, #1
 80029ae:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80029b0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80029ba:	2701      	movs	r7, #1
 80029bc:	e071      	b.n	8002aa2 <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029be:	6863      	ldr	r3, [r4, #4]
 80029c0:	b10b      	cbz	r3, 80029c6 <HAL_SPI_TransmitReceive+0xcc>
 80029c2:	2f01      	cmp	r7, #1
 80029c4:	d10b      	bne.n	80029de <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029c6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	8812      	ldrh	r2, [r2, #0]
 80029cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80029d0:	3302      	adds	r3, #2
 80029d2:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80029d4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29b      	uxth	r3, r3
 80029dc:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80029de:	2701      	movs	r7, #1
 80029e0:	e01b      	b.n	8002a1a <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	f012 0f01 	tst.w	r2, #1
 80029ea:	d00e      	beq.n	8002a0a <HAL_SPI_TransmitReceive+0x110>
 80029ec:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80029ee:	b292      	uxth	r2, r2
 80029f0:	b15a      	cbz	r2, 8002a0a <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80029f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029f8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80029fa:	3302      	adds	r3, #2
 80029fc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80029fe:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8002a08:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a0a:	f7fe fe95 	bl	8001738 <HAL_GetTick>
 8002a0e:	1b80      	subs	r0, r0, r6
 8002a10:	42a8      	cmp	r0, r5
 8002a12:	d302      	bcc.n	8002a1a <HAL_SPI_TransmitReceive+0x120>
 8002a14:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8002a18:	d11e      	bne.n	8002a58 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a1a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	b91b      	cbnz	r3, 8002a28 <HAL_SPI_TransmitReceive+0x12e>
 8002a20:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d062      	beq.n	8002aee <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	f012 0f02 	tst.w	r2, #2
 8002a30:	d0d7      	beq.n	80029e2 <HAL_SPI_TransmitReceive+0xe8>
 8002a32:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8002a34:	b292      	uxth	r2, r2
 8002a36:	2a00      	cmp	r2, #0
 8002a38:	d0d3      	beq.n	80029e2 <HAL_SPI_TransmitReceive+0xe8>
 8002a3a:	2f00      	cmp	r7, #0
 8002a3c:	d0d1      	beq.n	80029e2 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a3e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002a40:	8812      	ldrh	r2, [r2, #0]
 8002a42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a44:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002a46:	3302      	adds	r3, #2
 8002a48:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a4a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8002a54:	2700      	movs	r7, #0
 8002a56:	e7c4      	b.n	80029e2 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002a64:	2003      	movs	r0, #3
 8002a66:	e063      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	f012 0f01 	tst.w	r2, #1
 8002a70:	d00e      	beq.n	8002a90 <HAL_SPI_TransmitReceive+0x196>
 8002a72:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8002a74:	b292      	uxth	r2, r2
 8002a76:	b15a      	cbz	r2, 8002a90 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002a7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a7e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002a80:	3301      	adds	r3, #1
 8002a82:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a84:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8002a8e:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a90:	f7fe fe52 	bl	8001738 <HAL_GetTick>
 8002a94:	1b83      	subs	r3, r0, r6
 8002a96:	42ab      	cmp	r3, r5
 8002a98:	d302      	bcc.n	8002aa0 <HAL_SPI_TransmitReceive+0x1a6>
 8002a9a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8002a9e:	d11e      	bne.n	8002ade <HAL_SPI_TransmitReceive+0x1e4>
 8002aa0:	b1ed      	cbz	r5, 8002ade <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aa2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	b913      	cbnz	r3, 8002aae <HAL_SPI_TransmitReceive+0x1b4>
 8002aa8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	b1fb      	cbz	r3, 8002aee <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	f012 0f02 	tst.w	r2, #2
 8002ab6:	d0d7      	beq.n	8002a68 <HAL_SPI_TransmitReceive+0x16e>
 8002ab8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8002aba:	b292      	uxth	r2, r2
 8002abc:	2a00      	cmp	r2, #0
 8002abe:	d0d3      	beq.n	8002a68 <HAL_SPI_TransmitReceive+0x16e>
 8002ac0:	2f00      	cmp	r7, #0
 8002ac2:	d0d1      	beq.n	8002a68 <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ac4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002ac6:	7812      	ldrb	r2, [r2, #0]
 8002ac8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002aca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002acc:	3301      	adds	r3, #1
 8002ace:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ad0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8002ada:	2700      	movs	r7, #0
 8002adc:	e7c4      	b.n	8002a68 <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002aea:	2003      	movs	r0, #3
 8002aec:	e020      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002aee:	4632      	mov	r2, r6
 8002af0:	4629      	mov	r1, r5
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7ff fd3a 	bl	800256c <SPI_EndRxTxTransaction>
 8002af8:	b990      	cbnz	r0, 8002b20 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002afa:	68a3      	ldr	r3, [r4, #8]
 8002afc:	b933      	cbnz	r3, 8002b0c <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	9201      	str	r2, [sp, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	9301      	str	r3, [sp, #4]
 8002b0a:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8002b12:	2300      	movs	r3, #0
 8002b14:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b18:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002b1a:	b14b      	cbz	r3, 8002b30 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	e007      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b20:	2320      	movs	r3, #32
 8002b22:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002b24:	2300      	movs	r3, #0
 8002b26:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8002b2a:	2001      	movs	r0, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 8002b2e:	2002      	movs	r0, #2
}
 8002b30:	b003      	add	sp, #12
 8002b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8002b36:	2002      	movs	r0, #2
 8002b38:	e7fa      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x236>
 8002b3a:	2002      	movs	r0, #2
 8002b3c:	e7f8      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8002b3e:	2001      	movs	r0, #1
 8002b40:	e7f6      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x236>
 8002b42:	2001      	movs	r0, #1
 8002b44:	e7f4      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x236>
 8002b46:	2001      	movs	r0, #1
 8002b48:	e7f2      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 8002b4a:	2002      	movs	r0, #2
 8002b4c:	e7f0      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x236>

08002b4e <HAL_SPI_Receive>:
{
 8002b4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b52:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 8002b54:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 8002b58:	b2f6      	uxtb	r6, r6
 8002b5a:	2e01      	cmp	r6, #1
 8002b5c:	f040 80b2 	bne.w	8002cc4 <HAL_SPI_Receive+0x176>
 8002b60:	4604      	mov	r4, r0
 8002b62:	4689      	mov	r9, r1
 8002b64:	4690      	mov	r8, r2
 8002b66:	461d      	mov	r5, r3
  if ((pData == NULL) || (Size == 0U))
 8002b68:	2900      	cmp	r1, #0
 8002b6a:	f000 80ac 	beq.w	8002cc6 <HAL_SPI_Receive+0x178>
 8002b6e:	2a00      	cmp	r2, #0
 8002b70:	f000 80a9 	beq.w	8002cc6 <HAL_SPI_Receive+0x178>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b74:	6843      	ldr	r3, [r0, #4]
 8002b76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b7a:	d101      	bne.n	8002b80 <HAL_SPI_Receive+0x32>
 8002b7c:	6883      	ldr	r3, [r0, #8]
 8002b7e:	b353      	cbz	r3, 8002bd6 <HAL_SPI_Receive+0x88>
  tickstart = HAL_GetTick();
 8002b80:	f7fe fdda 	bl	8001738 <HAL_GetTick>
 8002b84:	4607      	mov	r7, r0
  __HAL_LOCK(hspi);
 8002b86:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	f000 809f 	beq.w	8002cce <HAL_SPI_Receive+0x180>
 8002b90:	2301      	movs	r3, #1
 8002b92:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b96:	2304      	movs	r3, #4
 8002b98:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ba0:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002ba4:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002ba8:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002bac:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002bae:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002bb0:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002bb2:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002bb4:	6463      	str	r3, [r4, #68]	@ 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bb6:	68a3      	ldr	r3, [r4, #8]
 8002bb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bbc:	d015      	beq.n	8002bea <HAL_SPI_Receive+0x9c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002bc6:	d103      	bne.n	8002bd0 <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bce:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002bd0:	68e3      	ldr	r3, [r4, #12]
 8002bd2:	b1f3      	cbz	r3, 8002c12 <HAL_SPI_Receive+0xc4>
 8002bd4:	e043      	b.n	8002c5e <HAL_SPI_Receive+0x110>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002bdc:	9500      	str	r5, [sp, #0]
 8002bde:	4613      	mov	r3, r2
 8002be0:	460a      	mov	r2, r1
 8002be2:	f7ff fe8a 	bl	80028fa <HAL_SPI_TransmitReceive>
 8002be6:	4606      	mov	r6, r0
 8002be8:	e06d      	b.n	8002cc6 <HAL_SPI_Receive+0x178>
    __HAL_SPI_DISABLE(hspi);
 8002bea:	6822      	ldr	r2, [r4, #0]
 8002bec:	6813      	ldr	r3, [r2, #0]
 8002bee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bf2:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8002bf4:	6822      	ldr	r2, [r4, #0]
 8002bf6:	6813      	ldr	r3, [r2, #0]
 8002bf8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e7de      	b.n	8002bbe <HAL_SPI_Receive+0x70>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c00:	f7fe fd9a 	bl	8001738 <HAL_GetTick>
 8002c04:	1bc0      	subs	r0, r0, r7
 8002c06:	42a8      	cmp	r0, r5
 8002c08:	d302      	bcc.n	8002c10 <HAL_SPI_Receive+0xc2>
 8002c0a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8002c0e:	d115      	bne.n	8002c3c <HAL_SPI_Receive+0xee>
 8002c10:	b1a5      	cbz	r5, 8002c3c <HAL_SPI_Receive+0xee>
    while (hspi->RxXferCount > 0U)
 8002c12:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d042      	beq.n	8002ca0 <HAL_SPI_Receive+0x152>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	f012 0f01 	tst.w	r2, #1
 8002c22:	d0ed      	beq.n	8002c00 <HAL_SPI_Receive+0xb2>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c24:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002c26:	7b1b      	ldrb	r3, [r3, #12]
 8002c28:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c2a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8002c30:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002c3a:	e7ea      	b.n	8002c12 <HAL_SPI_Receive+0xc4>
          hspi->State = HAL_SPI_STATE_READY;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002c42:	2300      	movs	r3, #0
 8002c44:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c48:	2603      	movs	r6, #3
 8002c4a:	e03c      	b.n	8002cc6 <HAL_SPI_Receive+0x178>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c4c:	f7fe fd74 	bl	8001738 <HAL_GetTick>
 8002c50:	1bc0      	subs	r0, r0, r7
 8002c52:	42a8      	cmp	r0, r5
 8002c54:	d302      	bcc.n	8002c5c <HAL_SPI_Receive+0x10e>
 8002c56:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8002c5a:	d119      	bne.n	8002c90 <HAL_SPI_Receive+0x142>
 8002c5c:	b1c5      	cbz	r5, 8002c90 <HAL_SPI_Receive+0x142>
    while (hspi->RxXferCount > 0U)
 8002c5e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	b1eb      	cbz	r3, 8002ca0 <HAL_SPI_Receive+0x152>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c64:	6823      	ldr	r3, [r4, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	f012 0f01 	tst.w	r2, #1
 8002c6c:	d0ee      	beq.n	8002c4c <HAL_SPI_Receive+0xfe>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002c72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c74:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002c76:	3302      	adds	r3, #2
 8002c78:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8002c7a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8002c7e:	fa1f fc8c 	uxth.w	ip, ip
 8002c82:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8002c86:	fa1f fc8c 	uxth.w	ip, ip
 8002c8a:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8002c8e:	e7e6      	b.n	8002c5e <HAL_SPI_Receive+0x110>
          hspi->State = HAL_SPI_STATE_READY;
 8002c90:	2301      	movs	r3, #1
 8002c92:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002c96:	2300      	movs	r3, #0
 8002c98:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c9c:	2603      	movs	r6, #3
 8002c9e:	e012      	b.n	8002cc6 <HAL_SPI_Receive+0x178>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ca0:	463a      	mov	r2, r7
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	f7ff fca1 	bl	80025ec <SPI_EndRxTransaction>
 8002caa:	b108      	cbz	r0, 8002cb0 <HAL_SPI_Receive+0x162>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cac:	2320      	movs	r3, #32
 8002cae:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cbc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002cbe:	b913      	cbnz	r3, 8002cc6 <HAL_SPI_Receive+0x178>
    return HAL_OK;
 8002cc0:	2600      	movs	r6, #0
 8002cc2:	e000      	b.n	8002cc6 <HAL_SPI_Receive+0x178>
    return HAL_BUSY;
 8002cc4:	2602      	movs	r6, #2
}
 8002cc6:	4630      	mov	r0, r6
 8002cc8:	b003      	add	sp, #12
 8002cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8002cce:	2602      	movs	r6, #2
 8002cd0:	e7f9      	b.n	8002cc6 <HAL_SPI_Receive+0x178>

08002cd2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd4:	f102 030c 	add.w	r3, r2, #12
 8002cd8:	e853 3f00 	ldrex	r3, [r3]
 8002cdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce0:	320c      	adds	r2, #12
 8002ce2:	e842 3100 	strex	r1, r3, [r2]
 8002ce6:	2900      	cmp	r1, #0
 8002ce8:	d1f3      	bne.n	8002cd2 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	f102 0314 	add.w	r3, r2, #20
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf8:	3214      	adds	r2, #20
 8002cfa:	e842 3100 	strex	r1, r3, [r2]
 8002cfe:	2900      	cmp	r1, #0
 8002d00:	d1f3      	bne.n	8002cea <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d02:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d005      	beq.n	8002d14 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d08:	2320      	movs	r3, #32
 8002d0a:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002d12:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d14:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d16:	f102 030c 	add.w	r3, r2, #12
 8002d1a:	e853 3f00 	ldrex	r3, [r3]
 8002d1e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d22:	320c      	adds	r2, #12
 8002d24:	e842 3100 	strex	r1, r3, [r2]
 8002d28:	2900      	cmp	r1, #0
 8002d2a:	d1f3      	bne.n	8002d14 <UART_EndRxTransfer+0x42>
 8002d2c:	e7ec      	b.n	8002d08 <UART_EndRxTransfer+0x36>
	...

08002d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d30:	b510      	push	{r4, lr}
 8002d32:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d34:	6802      	ldr	r2, [r0, #0]
 8002d36:	6913      	ldr	r3, [r2, #16]
 8002d38:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d3c:	68c1      	ldr	r1, [r0, #12]
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d42:	6883      	ldr	r3, [r0, #8]
 8002d44:	6902      	ldr	r2, [r0, #16]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	6943      	ldr	r3, [r0, #20]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	69c3      	ldr	r3, [r0, #28]
 8002d4e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002d50:	6801      	ldr	r1, [r0, #0]
 8002d52:	68cb      	ldr	r3, [r1, #12]
 8002d54:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002d58:	f023 030c 	bic.w	r3, r3, #12
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d60:	6802      	ldr	r2, [r0, #0]
 8002d62:	6953      	ldr	r3, [r2, #20]
 8002d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d68:	6981      	ldr	r1, [r0, #24]
 8002d6a:	430b      	orrs	r3, r1
 8002d6c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d6e:	6803      	ldr	r3, [r0, #0]
 8002d70:	4a31      	ldr	r2, [pc, #196]	@ (8002e38 <UART_SetConfig+0x108>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d006      	beq.n	8002d84 <UART_SetConfig+0x54>
 8002d76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d002      	beq.n	8002d84 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d7e:	f7ff fb59 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8002d82:	e001      	b.n	8002d88 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d84:	f7ff fb66 	bl	8002454 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d88:	69e3      	ldr	r3, [r4, #28]
 8002d8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d8e:	d029      	beq.n	8002de4 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d90:	2100      	movs	r1, #0
 8002d92:	1803      	adds	r3, r0, r0
 8002d94:	4149      	adcs	r1, r1
 8002d96:	181b      	adds	r3, r3, r0
 8002d98:	f141 0100 	adc.w	r1, r1, #0
 8002d9c:	00c9      	lsls	r1, r1, #3
 8002d9e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	1818      	adds	r0, r3, r0
 8002da6:	6863      	ldr	r3, [r4, #4]
 8002da8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002dac:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002db0:	f141 0100 	adc.w	r1, r1, #0
 8002db4:	f7fd feb2 	bl	8000b1c <__aeabi_uldivmod>
 8002db8:	4a20      	ldr	r2, [pc, #128]	@ (8002e3c <UART_SetConfig+0x10c>)
 8002dba:	fba2 3100 	umull	r3, r1, r2, r0
 8002dbe:	0949      	lsrs	r1, r1, #5
 8002dc0:	2364      	movs	r3, #100	@ 0x64
 8002dc2:	fb03 0311 	mls	r3, r3, r1, r0
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	3332      	adds	r3, #50	@ 0x32
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002dd4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	6821      	ldr	r1, [r4, #0]
 8002dde:	4413      	add	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }
}
 8002de2:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002de4:	2300      	movs	r3, #0
 8002de6:	1802      	adds	r2, r0, r0
 8002de8:	eb43 0103 	adc.w	r1, r3, r3
 8002dec:	1812      	adds	r2, r2, r0
 8002dee:	f141 0100 	adc.w	r1, r1, #0
 8002df2:	00c9      	lsls	r1, r1, #3
 8002df4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002df8:	00d2      	lsls	r2, r2, #3
 8002dfa:	1810      	adds	r0, r2, r0
 8002dfc:	f141 0100 	adc.w	r1, r1, #0
 8002e00:	6862      	ldr	r2, [r4, #4]
 8002e02:	1892      	adds	r2, r2, r2
 8002e04:	415b      	adcs	r3, r3
 8002e06:	f7fd fe89 	bl	8000b1c <__aeabi_uldivmod>
 8002e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e3c <UART_SetConfig+0x10c>)
 8002e0c:	fba2 3100 	umull	r3, r1, r2, r0
 8002e10:	0949      	lsrs	r1, r1, #5
 8002e12:	2364      	movs	r3, #100	@ 0x64
 8002e14:	fb03 0311 	mls	r3, r3, r1, r0
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	3332      	adds	r3, #50	@ 0x32
 8002e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e20:	095b      	lsrs	r3, r3, #5
 8002e22:	005a      	lsls	r2, r3, #1
 8002e24:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002e28:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	6821      	ldr	r1, [r4, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
 8002e36:	e7d4      	b.n	8002de2 <UART_SetConfig+0xb2>
 8002e38:	40011000 	.word	0x40011000
 8002e3c:	51eb851f 	.word	0x51eb851f

08002e40 <UART_WaitOnFlagUntilTimeout>:
{
 8002e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e44:	b083      	sub	sp, #12
 8002e46:	4605      	mov	r5, r0
 8002e48:	460e      	mov	r6, r1
 8002e4a:	4617      	mov	r7, r2
 8002e4c:	4699      	mov	r9, r3
 8002e4e:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e52:	682b      	ldr	r3, [r5, #0]
 8002e54:	681c      	ldr	r4, [r3, #0]
 8002e56:	ea36 0404 	bics.w	r4, r6, r4
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2401      	moveq	r4, #1
 8002e5e:	2400      	movne	r4, #0
 8002e60:	42bc      	cmp	r4, r7
 8002e62:	d128      	bne.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002e64:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002e68:	d0f3      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6a:	f7fe fc65 	bl	8001738 <HAL_GetTick>
 8002e6e:	eba0 0009 	sub.w	r0, r0, r9
 8002e72:	4540      	cmp	r0, r8
 8002e74:	d823      	bhi.n	8002ebe <UART_WaitOnFlagUntilTimeout+0x7e>
 8002e76:	f1b8 0f00 	cmp.w	r8, #0
 8002e7a:	d022      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e7c:	682b      	ldr	r3, [r5, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	f012 0f04 	tst.w	r2, #4
 8002e84:	d0e5      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x12>
 8002e86:	2e80      	cmp	r6, #128	@ 0x80
 8002e88:	d0e3      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x12>
 8002e8a:	2e40      	cmp	r6, #64	@ 0x40
 8002e8c:	d0e1      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	f012 0f08 	tst.w	r2, #8
 8002e94:	d0dd      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e96:	2400      	movs	r4, #0
 8002e98:	9401      	str	r4, [sp, #4]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	9201      	str	r2, [sp, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002ea4:	4628      	mov	r0, r5
 8002ea6:	f7ff ff14 	bl	8002cd2 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002eaa:	2308      	movs	r3, #8
 8002eac:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002eae:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	e000      	b.n	8002eb8 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8002eb6:	2000      	movs	r0, #0
}
 8002eb8:	b003      	add	sp, #12
 8002eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002ebe:	2003      	movs	r0, #3
 8002ec0:	e7fa      	b.n	8002eb8 <UART_WaitOnFlagUntilTimeout+0x78>
 8002ec2:	2003      	movs	r0, #3
 8002ec4:	e7f8      	b.n	8002eb8 <UART_WaitOnFlagUntilTimeout+0x78>

08002ec6 <HAL_UART_Init>:
  if (huart == NULL)
 8002ec6:	b360      	cbz	r0, 8002f22 <HAL_UART_Init+0x5c>
{
 8002ec8:	b510      	push	{r4, lr}
 8002eca:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002ecc:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002ed0:	b313      	cbz	r3, 8002f18 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002ed2:	2324      	movs	r3, #36	@ 0x24
 8002ed4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002ed8:	6822      	ldr	r2, [r4, #0]
 8002eda:	68d3      	ldr	r3, [r2, #12]
 8002edc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ee0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f7ff ff24 	bl	8002d30 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee8:	6822      	ldr	r2, [r4, #0]
 8002eea:	6913      	ldr	r3, [r2, #16]
 8002eec:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002ef0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef2:	6822      	ldr	r2, [r4, #0]
 8002ef4:	6953      	ldr	r3, [r2, #20]
 8002ef6:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002efa:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002efc:	6822      	ldr	r2, [r4, #0]
 8002efe:	68d3      	ldr	r3, [r2, #12]
 8002f00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f04:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f06:	2000      	movs	r0, #0
 8002f08:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f14:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002f16:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002f18:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002f1c:	f7fe fb34 	bl	8001588 <HAL_UART_MspInit>
 8002f20:	e7d7      	b.n	8002ed2 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002f22:	2001      	movs	r0, #1
}
 8002f24:	4770      	bx	lr

08002f26 <HAL_UART_Transmit>:
{
 8002f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002f2e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d156      	bne.n	8002fe6 <HAL_UART_Transmit+0xc0>
 8002f38:	4604      	mov	r4, r0
 8002f3a:	460d      	mov	r5, r1
 8002f3c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002f3e:	2900      	cmp	r1, #0
 8002f40:	d055      	beq.n	8002fee <HAL_UART_Transmit+0xc8>
 8002f42:	b90a      	cbnz	r2, 8002f48 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8002f44:	2001      	movs	r0, #1
 8002f46:	e04f      	b.n	8002fe8 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f4c:	2321      	movs	r3, #33	@ 0x21
 8002f4e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002f52:	f7fe fbf1 	bl	8001738 <HAL_GetTick>
 8002f56:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002f58:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f5c:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f60:	68a3      	ldr	r3, [r4, #8]
 8002f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f66:	d002      	beq.n	8002f6e <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8002f68:	f04f 0800 	mov.w	r8, #0
 8002f6c:	e014      	b.n	8002f98 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f6e:	6923      	ldr	r3, [r4, #16]
 8002f70:	b32b      	cbz	r3, 8002fbe <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8002f72:	f04f 0800 	mov.w	r8, #0
 8002f76:	e00f      	b.n	8002f98 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8002f78:	2320      	movs	r3, #32
 8002f7a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8002f7e:	2003      	movs	r0, #3
 8002f80:	e032      	b.n	8002fe8 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f82:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002f86:	6822      	ldr	r2, [r4, #0]
 8002f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002f8e:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002f90:	b292      	uxth	r2, r2
 8002f92:	3a01      	subs	r2, #1
 8002f94:	b292      	uxth	r2, r2
 8002f96:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f98:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	b193      	cbz	r3, 8002fc4 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f9e:	9600      	str	r6, [sp, #0]
 8002fa0:	463b      	mov	r3, r7
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2180      	movs	r1, #128	@ 0x80
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f7ff ff4a 	bl	8002e40 <UART_WaitOnFlagUntilTimeout>
 8002fac:	2800      	cmp	r0, #0
 8002fae:	d1e3      	bne.n	8002f78 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8002fb0:	2d00      	cmp	r5, #0
 8002fb2:	d0e6      	beq.n	8002f82 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fb4:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fbc:	e7e7      	b.n	8002f8e <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8002fbe:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002fc0:	2500      	movs	r5, #0
 8002fc2:	e7e9      	b.n	8002f98 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fc4:	9600      	str	r6, [sp, #0]
 8002fc6:	463b      	mov	r3, r7
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2140      	movs	r1, #64	@ 0x40
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f7ff ff37 	bl	8002e40 <UART_WaitOnFlagUntilTimeout>
 8002fd2:	b918      	cbnz	r0, 8002fdc <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8002fd4:	2320      	movs	r3, #32
 8002fd6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002fda:	e005      	b.n	8002fe8 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8002fdc:	2320      	movs	r3, #32
 8002fde:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8002fe2:	2003      	movs	r0, #3
 8002fe4:	e000      	b.n	8002fe8 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8002fe6:	2002      	movs	r0, #2
}
 8002fe8:	b002      	add	sp, #8
 8002fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002fee:	2001      	movs	r0, #1
 8002ff0:	e7fa      	b.n	8002fe8 <HAL_UART_Transmit+0xc2>

08002ff2 <osDelayTask>:
 **/

void osDelayTask(systime_t delay)
{
   //Not implemented
}
 8002ff2:	4770      	bx	lr

08002ff4 <osSuspendAllTasks>:
 **/

void osSuspendAllTasks(void)
{
   //Not implemented
}
 8002ff4:	4770      	bx	lr

08002ff6 <osResumeAllTasks>:
 **/

void osResumeAllTasks(void)
{
   //Not implemented
}
 8002ff6:	4770      	bx	lr

08002ff8 <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

__weak_func void *osAllocMem(size_t size)
{
 8002ff8:	b508      	push	{r3, lr}
   void *p;

   //Allocate a memory block
   p = malloc(size);
 8002ffa:	f002 fdf7 	bl	8005bec <malloc>
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes at 0x%08" PRIXPTR "\r\n",
      size, (uintptr_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
}
 8002ffe:	bd08      	pop	{r3, pc}

08003000 <osFreeMem>:
 **/

__weak_func void osFreeMem(void *p)
{
   //Make sure the pointer is valid
   if(p != NULL)
 8003000:	b118      	cbz	r0, 800300a <osFreeMem+0xa>
{
 8003002:	b508      	push	{r3, lr}
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08" PRIXPTR "\r\n", (uintptr_t) p);

      //Free memory block
      free(p);
 8003004:	f002 fdfa 	bl	8005bfc <free>
   }
}
 8003008:	bd08      	pop	{r3, pc}
 800300a:	4770      	bx	lr

0800300c <bootGetDefaultSettings>:
* @brief Initialize bootloader settings with default values
* @param[in,out] settings Structure that contains Bootloader settings
**/

void bootGetDefaultSettings(BootSettings *settings)
{
 800300c:	b508      	push	{r3, lr}
   //Clear bootloader user settings structure
   memset(settings, 0x00, sizeof(BootSettings));
 800300e:	2268      	movs	r2, #104	@ 0x68
 8003010:	2100      	movs	r1, #0
 8003012:	f003 f8bf 	bl	8006194 <memset>
   //Secondary flash cipher key settings
   settings->psk = NULL;
   settings->pskSize = 0;
#endif
#endif
}
 8003016:	bd08      	pop	{r3, pc}

08003018 <bootInit>:
 * @param[in] settings Bootloader user settings
 * @return Status code
 **/

cboot_error_t bootInit(BootContext *context, BootSettings *settings)
{
 8003018:	b538      	push	{r3, r4, r5, lr}
   cboot_error_t cerror;

   //Check parameter validity
   if(context == NULL || settings == NULL)
 800301a:	b1e8      	cbz	r0, 8003058 <bootInit+0x40>
 800301c:	460c      	mov	r4, r1
 800301e:	4605      	mov	r5, r0
 8003020:	b1e1      	cbz	r1, 800305c <bootInit+0x44>
      return CBOOT_ERROR_INVALID_PARAMETERS;

   //Set context fields to zero
   memset(context, 0, sizeof(BootContext));
 8003022:	22e4      	movs	r2, #228	@ 0xe4
 8003024:	2100      	movs	r1, #0
 8003026:	f003 f8b5 	bl	8006194 <memset>

   //Save bootloader user settings
   memcpy(&context->settings, settings, sizeof(BootSettings));
 800302a:	2268      	movs	r2, #104	@ 0x68
 800302c:	4621      	mov	r1, r4
 800302e:	1d28      	adds	r0, r5, #4
 8003030:	f003 f93b 	bl	80062aa <memcpy>

   //Initialize a primary flash driver and slots
   cerror = bootInitPrimaryMem(context, settings);
 8003034:	4621      	mov	r1, r4
 8003036:	4628      	mov	r0, r5
 8003038:	f000 f90a 	bl	8003250 <bootInitPrimaryMem>
   //Is any error?
   if(cerror)
 800303c:	4603      	mov	r3, r0
 800303e:	b108      	cbz	r0, 8003044 <bootInit+0x2c>
   //Initialize bootloader state
   context->state = BOOT_STATE_IDLE;

   //Successful process
   return CBOOT_NO_ERROR;
}
 8003040:	4618      	mov	r0, r3
 8003042:	bd38      	pop	{r3, r4, r5, pc}
   cerror = bootInitSecondaryMem(context, settings);
 8003044:	4621      	mov	r1, r4
 8003046:	4628      	mov	r0, r5
 8003048:	f000 f94c 	bl	80032e4 <bootInitSecondaryMem>
   if(cerror)
 800304c:	4603      	mov	r3, r0
 800304e:	2800      	cmp	r0, #0
 8003050:	d1f6      	bne.n	8003040 <bootInit+0x28>
   context->state = BOOT_STATE_IDLE;
 8003052:	2200      	movs	r2, #0
 8003054:	702a      	strb	r2, [r5, #0]
   return CBOOT_NO_ERROR;
 8003056:	e7f3      	b.n	8003040 <bootInit+0x28>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8003058:	2304      	movs	r3, #4
 800305a:	e7f1      	b.n	8003040 <bootInit+0x28>
 800305c:	2304      	movs	r3, #4
 800305e:	e7ef      	b.n	8003040 <bootInit+0x28>

08003060 <bootTask>:
 * @param[in] context Pointer to Bootloader context
 * @return None
 **/

cboot_error_t bootTask(BootContext *context)
{
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	4604      	mov	r4, r0

   //Initialize bootloader error status
   cerror = CBOOT_NO_ERROR;

   //Bootloader IDLE state
   if(context->state == BOOT_STATE_IDLE)
 8003064:	7803      	ldrb	r3, [r0, #0]
 8003066:	2b04      	cmp	r3, #4
 8003068:	f200 80d9 	bhi.w	800321e <bootTask+0x1be>
 800306c:	e8df f003 	tbb	[pc, r3]
 8003070:	d77e2c03 	.word	0xd77e2c03
 8003074:	c8          	.byte	0xc8
 8003075:	00          	.byte	0x00
      if(1)
      {
         if(1) {
#endif
             //Select update image slot
             cerror = bootSelectUpdateImageSlot(context, &context->selectedSlot);
 8003076:	f100 06d4 	add.w	r6, r0, #212	@ 0xd4
 800307a:	4631      	mov	r1, r6
 800307c:	f000 faa9 	bl	80035d2 <bootSelectUpdateImageSlot>

             //Is any error?
             if (cerror || context->selectedSlot.memParent == NULL)
 8003080:	4605      	mov	r5, r0
 8003082:	b970      	cbnz	r0, 80030a2 <bootTask+0x42>
 8003084:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8003088:	b15b      	cbz	r3, 80030a2 <bootTask+0x42>
               TRACE_DEBUG("- address:  0x%08lX\r\n", (unsigned long) context->selectedSlot.addr);
               TRACE_DEBUG("- size:     0x%08X\r\n", context->selectedSlot.size);

               //Is selected slot different from slot containing current application?
               //In other words, is selected image (in selected slot) more recent than current application image?
               if(memcmp(&context->selectedSlot, &context->memories[0].slots[0],sizeof(Slot)) != 0)
 800308a:	2210      	movs	r2, #16
 800308c:	f104 0174 	add.w	r1, r4, #116	@ 0x74
 8003090:	4630      	mov	r0, r6
 8003092:	f003 f86f 	bl	8006174 <memcmp>
 8003096:	b190      	cbz	r0, 80030be <bootTask+0x5e>
               {
                  //Change bootloader state
                  bootChangeState(context, BOOT_STATE_UPDATE_APP);
 8003098:	2102      	movs	r1, #2
 800309a:	4620      	mov	r0, r4
 800309c:	f000 fafc 	bl	8003698 <bootChangeState>
 80030a0:	e0bb      	b.n	800321a <bootTask+0x1ba>
                 TRACE_ERROR("No valid image found!\r\n");
 80030a2:	f7ff ffa7 	bl	8002ff4 <osSuspendAllTasks>
 80030a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003224 <bootTask+0x1c4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	2217      	movs	r2, #23
 80030ae:	2101      	movs	r1, #1
 80030b0:	485d      	ldr	r0, [pc, #372]	@ (8003228 <bootTask+0x1c8>)
 80030b2:	f002 ff79 	bl	8005fa8 <fwrite>
 80030b6:	f7ff ff9e 	bl	8002ff6 <osResumeAllTasks>
                 return cerror; //ERROR NO VALID IMAGE -> state error ????
 80030ba:	2501      	movs	r5, #1
 80030bc:	e0ad      	b.n	800321a <bootTask+0x1ba>
               }
               else
               {
                  //Change bootloader state
                  bootChangeState(context, BOOT_STATE_RUN_APP);
 80030be:	2101      	movs	r1, #1
 80030c0:	4620      	mov	r0, r4
 80030c2:	f000 fae9 	bl	8003698 <bootChangeState>
 80030c6:	e0a8      	b.n	800321a <bootTask+0x1ba>
   }
   //Bootloader RUN APP state
   else if(context->state == BOOT_STATE_RUN_APP)
   {
      //Make sure to select first primary memory slot (contains current application)
      context->selectedSlot = context->memories[0].slots[0];
 80030c8:	f100 06d4 	add.w	r6, r0, #212	@ 0xd4
 80030cc:	f100 0374 	add.w	r3, r0, #116	@ 0x74
 80030d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030d2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

      //Debug message
		TRACE_INFO("No update available...\r\n");
 80030d6:	f7ff ff8d 	bl	8002ff4 <osSuspendAllTasks>
 80030da:	4d52      	ldr	r5, [pc, #328]	@ (8003224 <bootTask+0x1c4>)
 80030dc:	682b      	ldr	r3, [r5, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2218      	movs	r2, #24
 80030e2:	2101      	movs	r1, #1
 80030e4:	4851      	ldr	r0, [pc, #324]	@ (800322c <bootTask+0x1cc>)
 80030e6:	f002 ff5f 	bl	8005fa8 <fwrite>
 80030ea:	f7ff ff84 	bl	8002ff6 <osResumeAllTasks>
      TRACE_INFO("Checking current application image...\r\n");
 80030ee:	f7ff ff81 	bl	8002ff4 <osSuspendAllTasks>
 80030f2:	682b      	ldr	r3, [r5, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2227      	movs	r2, #39	@ 0x27
 80030f8:	2101      	movs	r1, #1
 80030fa:	484d      	ldr	r0, [pc, #308]	@ (8003230 <bootTask+0x1d0>)
 80030fc:	f002 ff54 	bl	8005fa8 <fwrite>
 8003100:	f7ff ff79 	bl	8002ff6 <osResumeAllTasks>

      //Check current application image inside first primary memory slot
      cerror = bootCheckImage(context, &context->selectedSlot);
 8003104:	4631      	mov	r1, r6
 8003106:	4620      	mov	r0, r4
 8003108:	f000 f9ca 	bl	80034a0 <bootCheckImage>
      //Is any error?
      if(cerror)
 800310c:	4605      	mov	r5, r0
 800310e:	b120      	cbz	r0, 800311a <bootTask+0xba>
      {
         //Change bootloader state
         bootChangeState(context, BOOT_STATE_ERROR);
 8003110:	2104      	movs	r1, #4
 8003112:	4620      	mov	r0, r4
 8003114:	f000 fac0 	bl	8003698 <bootChangeState>
 8003118:	e07f      	b.n	800321a <bootTask+0x1ba>
      }
      else
      {
         //Check reset vector of the current application
         cerror = bootCheckSlotAppResetVector(&context->selectedSlot);
 800311a:	4630      	mov	r0, r6
 800311c:	f000 fa95 	bl	800364a <bootCheckSlotAppResetVector>
         //Is reset vector valid?
         if(!cerror)
 8003120:	4605      	mov	r5, r0
 8003122:	b9f0      	cbnz	r0, 8003162 <bootTask+0x102>
         {
            //Debug message
            TRACE_INFO("Current application image is valid\r\n");
 8003124:	f7ff ff66 	bl	8002ff4 <osSuspendAllTasks>
 8003128:	4e3e      	ldr	r6, [pc, #248]	@ (8003224 <bootTask+0x1c4>)
 800312a:	6833      	ldr	r3, [r6, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2224      	movs	r2, #36	@ 0x24
 8003130:	2101      	movs	r1, #1
 8003132:	4840      	ldr	r0, [pc, #256]	@ (8003234 <bootTask+0x1d4>)
 8003134:	f002 ff38 	bl	8005fa8 <fwrite>
 8003138:	f7ff ff5d 	bl	8002ff6 <osResumeAllTasks>
            TRACE_INFO("Booting to the application...\r\n");
 800313c:	f7ff ff5a 	bl	8002ff4 <osSuspendAllTasks>
 8003140:	6833      	ldr	r3, [r6, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	221f      	movs	r2, #31
 8003146:	2101      	movs	r1, #1
 8003148:	483b      	ldr	r0, [pc, #236]	@ (8003238 <bootTask+0x1d8>)
 800314a:	f002 ff2d 	bl	8005fa8 <fwrite>
 800314e:	f7ff ff52 	bl	8002ff6 <osResumeAllTasks>

            //Compute application start address
            appStartAddr = context->selectedSlot.addr + mcuGetVtorOffset();
 8003152:	f8d4 40dc 	ldr.w	r4, [r4, #220]	@ 0xdc
 8003156:	f000 faed 	bl	8003734 <mcuGetVtorOffset>

            //Jump to current application inside primary memory slot
            mcuJumpToApplication(appStartAddr);
 800315a:	4420      	add	r0, r4
 800315c:	f003 fd08 	bl	8006b70 <_etext>
 8003160:	e05b      	b.n	800321a <bootTask+0x1ba>
         }
         else
         {
            //Change bootloader state
            bootChangeState(context, BOOT_STATE_ERROR);
 8003162:	2104      	movs	r1, #4
 8003164:	4620      	mov	r0, r4
 8003166:	f000 fa97 	bl	8003698 <bootChangeState>
 800316a:	e056      	b.n	800321a <bootTask+0x1ba>
   }
   //Bootloader UPDATE APP state
   else if(context->state == BOOT_STATE_UPDATE_APP)
   {
      //Debug message
      TRACE_INFO("Checking update application image...\r\n");
 800316c:	f7ff ff42 	bl	8002ff4 <osSuspendAllTasks>
 8003170:	4b2c      	ldr	r3, [pc, #176]	@ (8003224 <bootTask+0x1c4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	2226      	movs	r2, #38	@ 0x26
 8003178:	2101      	movs	r1, #1
 800317a:	4830      	ldr	r0, [pc, #192]	@ (800323c <bootTask+0x1dc>)
 800317c:	f002 ff14 	bl	8005fa8 <fwrite>
 8003180:	f7ff ff39 	bl	8002ff6 <osResumeAllTasks>
#else
      if(1)
#endif

      //Check current application image inside first primary memory slot
      cerror = bootCheckImage(context, &context->selectedSlot);
 8003184:	f104 05d4 	add.w	r5, r4, #212	@ 0xd4
 8003188:	4629      	mov	r1, r5
 800318a:	4620      	mov	r0, r4
 800318c:	f000 f988 	bl	80034a0 <bootCheckImage>
      //Is any error?
      if(cerror)
 8003190:	b128      	cbz	r0, 800319e <bootTask+0x13e>
      {
         //Discard error
         cerror = CBOOT_NO_ERROR;
         //Change bootloader state
         bootChangeState(context, BOOT_STATE_RUN_APP);
 8003192:	2101      	movs	r1, #1
 8003194:	4620      	mov	r0, r4
 8003196:	f000 fa7f 	bl	8003698 <bootChangeState>
         cerror = CBOOT_NO_ERROR;
 800319a:	2500      	movs	r5, #0
 800319c:	e03d      	b.n	800321a <bootTask+0x1ba>
      }
      else
      {
         //Debug message
         TRACE_INFO("Starting update procedure...\r\n");
 800319e:	f7ff ff29 	bl	8002ff4 <osSuspendAllTasks>
 80031a2:	4b20      	ldr	r3, [pc, #128]	@ (8003224 <bootTask+0x1c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	221e      	movs	r2, #30
 80031aa:	2101      	movs	r1, #1
 80031ac:	4824      	ldr	r0, [pc, #144]	@ (8003240 <bootTask+0x1e0>)
 80031ae:	f002 fefb 	bl	8005fa8 <fwrite>
 80031b2:	f7ff ff20 	bl	8002ff6 <osResumeAllTasks>

         //Start update procedure (could be a new application or because of a previous fallback procedure)
         cerror = bootUpdateApp(context, &context->selectedSlot);
 80031b6:	4629      	mov	r1, r5
 80031b8:	4620      	mov	r0, r4
 80031ba:	f000 f8e3 	bl	8003384 <bootUpdateApp>
         //Is any error?
         if(cerror)
 80031be:	4605      	mov	r5, r0
 80031c0:	b120      	cbz	r0, 80031cc <bootTask+0x16c>
         {
            //Change bootloader state
            bootChangeState(context, BOOT_STATE_ERROR);
 80031c2:	2104      	movs	r1, #4
 80031c4:	4620      	mov	r0, r4
 80031c6:	f000 fa67 	bl	8003698 <bootChangeState>
 80031ca:	e026      	b.n	800321a <bootTask+0x1ba>
         }
         else
         {
            //Debug message
            TRACE_INFO("Update procedure finished\r\n");
 80031cc:	f7ff ff12 	bl	8002ff4 <osSuspendAllTasks>
 80031d0:	4c14      	ldr	r4, [pc, #80]	@ (8003224 <bootTask+0x1c4>)
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	221b      	movs	r2, #27
 80031d8:	2101      	movs	r1, #1
 80031da:	481a      	ldr	r0, [pc, #104]	@ (8003244 <bootTask+0x1e4>)
 80031dc:	f002 fee4 	bl	8005fa8 <fwrite>
 80031e0:	f7ff ff09 	bl	8002ff6 <osResumeAllTasks>
            TRACE_INFO("Rebooting...\r\n");
 80031e4:	f7ff ff06 	bl	8002ff4 <osSuspendAllTasks>
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	220e      	movs	r2, #14
 80031ee:	2101      	movs	r1, #1
 80031f0:	4815      	ldr	r0, [pc, #84]	@ (8003248 <bootTask+0x1e8>)
 80031f2:	f002 fed9 	bl	8005fa8 <fwrite>
 80031f6:	f7ff fefe 	bl	8002ff6 <osResumeAllTasks>

            //Reset system
            mcuSystemReset();
 80031fa:	f000 fa9e 	bl	800373a <mcuSystemReset>
 80031fe:	e00c      	b.n	800321a <bootTask+0x1ba>
#endif
   //Bootloader ERROR state
   else if(context->state == BOOT_STATE_ERROR)
   {
      //Bootloader reached error state
      TRACE_ERROR("Bootloader is in error state!\r\n");
 8003200:	f7ff fef8 	bl	8002ff4 <osSuspendAllTasks>
 8003204:	4b07      	ldr	r3, [pc, #28]	@ (8003224 <bootTask+0x1c4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	221f      	movs	r2, #31
 800320c:	2101      	movs	r1, #1
 800320e:	480f      	ldr	r0, [pc, #60]	@ (800324c <bootTask+0x1ec>)
 8003210:	f002 feca 	bl	8005fa8 <fwrite>
 8003214:	f7ff feef 	bl	8002ff6 <osResumeAllTasks>
   cerror = CBOOT_NO_ERROR;
 8003218:	2500      	movs	r5, #0
      return CBOOT_ERROR_INVALID_VALUE;
   }

   //Return bootloader status
   return cerror;
}
 800321a:	4628      	mov	r0, r5
 800321c:	bd70      	pop	{r4, r5, r6, pc}
   if(context->state == BOOT_STATE_IDLE)
 800321e:	2506      	movs	r5, #6
 8003220:	e7fb      	b.n	800321a <bootTask+0x1ba>
 8003222:	bf00      	nop
 8003224:	20000068 	.word	0x20000068
 8003228:	08006d88 	.word	0x08006d88
 800322c:	08006da0 	.word	0x08006da0
 8003230:	08006dbc 	.word	0x08006dbc
 8003234:	08006de4 	.word	0x08006de4
 8003238:	08006e0c 	.word	0x08006e0c
 800323c:	08006e2c 	.word	0x08006e2c
 8003240:	08006e54 	.word	0x08006e54
 8003244:	08006e74 	.word	0x08006e74
 8003248:	08006e90 	.word	0x08006e90
 800324c:	08006ea0 	.word	0x08006ea0

08003250 <bootInitPrimaryMem>:
   FlashDriver *flashDriver;
   const FlashInfo *flashInfo;
   bool_t ret;

   // Check parameters validity
   if (context == NULL || settings == NULL)
 8003250:	2800      	cmp	r0, #0
 8003252:	d038      	beq.n	80032c6 <bootInitPrimaryMem+0x76>
{
 8003254:	b570      	push	{r4, r5, r6, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	460c      	mov	r4, r1
 800325a:	4606      	mov	r6, r0
   if (context == NULL || settings == NULL)
 800325c:	2900      	cmp	r1, #0
 800325e:	d034      	beq.n	80032ca <bootInitPrimaryMem+0x7a>
      return CBOOT_ERROR_INVALID_PARAMETERS;

   // Check a primary flash driver is valid
   if (settings->memories[0].driver == NULL)
 8003260:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 8003262:	2d00      	cmp	r5, #0
 8003264:	d033      	beq.n	80032ce <bootInitPrimaryMem+0x7e>

   // Point to a memory driver
   flashDriver = (FlashDriver *)settings->memories[0].driver;

   // Initialize primary (internal) a memory flash driver
   error = flashDriver->init();
 8003266:	682b      	ldr	r3, [r5, #0]
 8003268:	4798      	blx	r3
   // Is any error?
   if (error)
 800326a:	2800      	cmp	r0, #0
 800326c:	d131      	bne.n	80032d2 <bootInitPrimaryMem+0x82>
      return CBOOT_ERROR_FAILURE;

   // Get memory driver information
   error = flashDriver->getInfo(&flashInfo);
 800326e:	68ab      	ldr	r3, [r5, #8]
 8003270:	a801      	add	r0, sp, #4
 8003272:	4798      	blx	r3
   // Is any error?
   if (error)
 8003274:	2800      	cmp	r0, #0
 8003276:	d12f      	bne.n	80032d8 <bootInitPrimaryMem+0x88>
      return CBOOT_ERROR_FAILURE;

   // Check if user primary flash slot 0 address matches a flash sector address
   ret = flashDriver->isSectorAddr(settings->memories[0].slots[0].addr);
 8003278:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800327a:	6920      	ldr	r0, [r4, #16]
 800327c:	4798      	blx	r3
   if (!ret)
 800327e:	b368      	cbz	r0, 80032dc <bootInitPrimaryMem+0x8c>
      return CBOOT_ERROR_INVALID_PARAMETERS;

   // Check primary flash slot 0 fits in primary flash
   if ((settings->memories[0].slots[0].addr + settings->memories[0].slots[0].size) >
 8003280:	6923      	ldr	r3, [r4, #16]
 8003282:	6962      	ldr	r2, [r4, #20]
 8003284:	441a      	add	r2, r3
       (flashInfo->flashAddr + flashInfo->flashSize))
 8003286:	9901      	ldr	r1, [sp, #4]
 8003288:	68cb      	ldr	r3, [r1, #12]
 800328a:	6909      	ldr	r1, [r1, #16]
 800328c:	440b      	add	r3, r1
   if ((settings->memories[0].slots[0].addr + settings->memories[0].slots[0].size) >
 800328e:	429a      	cmp	r2, r3
 8003290:	d826      	bhi.n	80032e0 <bootInitPrimaryMem+0x90>
      return CBOOT_ERROR_INVALID_PARAMETERS;
#endif
#endif

   //Initialize primary memory
   primaryMemory->memoryType = settings->memories[0].memoryType;
 8003292:	7823      	ldrb	r3, [r4, #0]
 8003294:	f886 306c 	strb.w	r3, [r6, #108]	@ 0x6c
   primaryMemory->driver = settings->memories[0].driver;
 8003298:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800329a:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
   primaryMemory->nbSlots = settings->memories[0].nbSlots;
 800329e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80032a2:	f886 3094 	strb.w	r3, [r6, #148]	@ 0x94

   // Set the primary flash memory slot 0 which hold current running application
   // This slot MUST be located after the bootloader at the beginning of the next available flash sector
   primaryMemory->slots[0].type = settings->memories[0].slots[0].type;
 80032a6:	7a23      	ldrb	r3, [r4, #8]
 80032a8:	f886 3074 	strb.w	r3, [r6, #116]	@ 0x74
   primaryMemory->slots[0].cType = settings->memories[0].slots[0].cType;
 80032ac:	7a63      	ldrb	r3, [r4, #9]
 80032ae:	f886 3075 	strb.w	r3, [r6, #117]	@ 0x75
   primaryMemory->slots[0].addr = settings->memories[0].slots[0].addr;
 80032b2:	6923      	ldr	r3, [r4, #16]
 80032b4:	67f3      	str	r3, [r6, #124]	@ 0x7c
   primaryMemory->slots[0].size = settings->memories[0].slots[0].size;
 80032b6:	6963      	ldr	r3, [r4, #20]
 80032b8:	f8c6 3080 	str.w	r3, [r6, #128]	@ 0x80
   primaryMemory->slots[0].memParent = &context->memories[0];
 80032bc:	f106 036c 	add.w	r3, r6, #108	@ 0x6c
 80032c0:	67b3      	str	r3, [r6, #120]	@ 0x78
   }
#endif
#endif

   // Successful process
   return CBOOT_NO_ERROR;
 80032c2:	2000      	movs	r0, #0
 80032c4:	e006      	b.n	80032d4 <bootInitPrimaryMem+0x84>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80032c6:	2004      	movs	r0, #4
}
 80032c8:	4770      	bx	lr
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80032ca:	2004      	movs	r0, #4
 80032cc:	e002      	b.n	80032d4 <bootInitPrimaryMem+0x84>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80032ce:	2004      	movs	r0, #4
 80032d0:	e000      	b.n	80032d4 <bootInitPrimaryMem+0x84>
      return CBOOT_ERROR_FAILURE;
 80032d2:	2001      	movs	r0, #1
}
 80032d4:	b002      	add	sp, #8
 80032d6:	bd70      	pop	{r4, r5, r6, pc}
      return CBOOT_ERROR_FAILURE;
 80032d8:	2001      	movs	r0, #1
 80032da:	e7fb      	b.n	80032d4 <bootInitPrimaryMem+0x84>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80032dc:	2004      	movs	r0, #4
 80032de:	e7f9      	b.n	80032d4 <bootInitPrimaryMem+0x84>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 80032e0:	2004      	movs	r0, #4
 80032e2:	e7f7      	b.n	80032d4 <bootInitPrimaryMem+0x84>

080032e4 <bootInitSecondaryMem>:
   FlashDriver *flashDriver;
   const FlashInfo *flashInfo;
   bool_t ret;

   // Check parameters validity
   if (context == NULL || settings == NULL)
 80032e4:	2800      	cmp	r0, #0
 80032e6:	d03e      	beq.n	8003366 <bootInitSecondaryMem+0x82>
{
 80032e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ea:	b083      	sub	sp, #12
 80032ec:	460c      	mov	r4, r1
 80032ee:	4605      	mov	r5, r0
   if (context == NULL || settings == NULL)
 80032f0:	2900      	cmp	r1, #0
 80032f2:	d03a      	beq.n	800336a <bootInitSecondaryMem+0x86>
      return CBOOT_ERROR_INVALID_PARAMETERS;

   // Check if the secondary flash driver is valid
   if (settings->memories[1].driver == NULL)
 80032f4:	6e0e      	ldr	r6, [r1, #96]	@ 0x60
 80032f6:	2e00      	cmp	r6, #0
 80032f8:	d039      	beq.n	800336e <bootInitSecondaryMem+0x8a>
      return CBOOT_ERROR_INVALID_PARAMETERS;

   // Point to the secondary memory context
   secondaryMemory = (Memory *)&context->memories[1];
 80032fa:	f100 07a0 	add.w	r7, r0, #160	@ 0xa0

   // Set secondary flash memory driver
   secondaryMemory->driver = settings->memories[1].driver;
 80032fe:	f8c0 60cc 	str.w	r6, [r0, #204]	@ 0xcc

   // Point to a memory driver
   flashDriver = (FlashDriver *)secondaryMemory->driver;

   // Initialize a secondary (internal) memory flash driver
   error = flashDriver->init();
 8003302:	6833      	ldr	r3, [r6, #0]
 8003304:	4798      	blx	r3
   // Is any error?
   if (error)
 8003306:	2800      	cmp	r0, #0
 8003308:	d133      	bne.n	8003372 <bootInitSecondaryMem+0x8e>
      return CBOOT_ERROR_FAILURE;

   // Get memory driver information
   error = flashDriver->getInfo(&flashInfo);
 800330a:	68b3      	ldr	r3, [r6, #8]
 800330c:	a801      	add	r0, sp, #4
 800330e:	4798      	blx	r3
   // Is any error?
   if (error)
 8003310:	bb90      	cbnz	r0, 8003378 <bootInitSecondaryMem+0x94>
      return CBOOT_ERROR_FAILURE;

   // Check if user secondary flash slot 1 address matches a flash sector address
   ret = flashDriver->isSectorAddr(settings->memories[1].slots[0].addr);
 8003312:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8003314:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003316:	4798      	blx	r3
   if (!ret)
 8003318:	b380      	cbz	r0, 800337c <bootInitSecondaryMem+0x98>
      return CBOOT_ERROR_INVALID_PARAMETERS;

   // Check secondary flash slot 1 fits in secondary flash
   if ((settings->memories[1].slots[0].addr + settings->memories[1].slots[0].size) >
 800331a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800331c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800331e:	441a      	add	r2, r3
       (flashInfo->flashAddr + flashInfo->flashSize))
 8003320:	9901      	ldr	r1, [sp, #4]
 8003322:	68cb      	ldr	r3, [r1, #12]
 8003324:	6909      	ldr	r1, [r1, #16]
 8003326:	440b      	add	r3, r1
   if ((settings->memories[1].slots[0].addr + settings->memories[1].slots[0].size) >
 8003328:	429a      	cmp	r2, r3
 800332a:	d829      	bhi.n	8003380 <bootInitSecondaryMem+0x9c>
#endif

   // Set secondary flash memory slot 1 which will hold the new update image
   // If fallback support is enabled, slot 1 could also hold the
   // backup image of the current running application
   secondaryMemory->memoryType = settings->memories[1].memoryType;
 800332c:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 8003330:	f885 30a0 	strb.w	r3, [r5, #160]	@ 0xa0
   secondaryMemory->driver = settings->memories[1].driver;
 8003334:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003336:	f8c5 30cc 	str.w	r3, [r5, #204]	@ 0xcc
   secondaryMemory->nbSlots = settings->memories[1].nbSlots;
 800333a:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 800333e:	f885 30c8 	strb.w	r3, [r5, #200]	@ 0xc8

   secondaryMemory->slots[0].type = settings->memories[1].slots[0].type;
 8003342:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8003346:	f885 30a8 	strb.w	r3, [r5, #168]	@ 0xa8
   secondaryMemory->slots[0].cType = settings->memories[1].slots[0].cType;
 800334a:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800334e:	f885 30a9 	strb.w	r3, [r5, #169]	@ 0xa9
   secondaryMemory->slots[0].addr = settings->memories[1].slots[0].addr;
 8003352:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003354:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
   secondaryMemory->slots[0].size = settings->memories[1].slots[0].size;
 8003358:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800335a:	f8c5 30b4 	str.w	r3, [r5, #180]	@ 0xb4
   secondaryMemory->slots[0].memParent = secondaryMemory;
 800335e:	f8c5 70ac 	str.w	r7, [r5, #172]	@ 0xac
      return CBOOT_ERROR_INVALID_ADDRESS;
   }
#endif

   // Successful process
   return CBOOT_NO_ERROR;
 8003362:	2000      	movs	r0, #0
 8003364:	e006      	b.n	8003374 <bootInitSecondaryMem+0x90>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8003366:	2004      	movs	r0, #4
}
 8003368:	4770      	bx	lr
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800336a:	2004      	movs	r0, #4
 800336c:	e002      	b.n	8003374 <bootInitSecondaryMem+0x90>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800336e:	2004      	movs	r0, #4
 8003370:	e000      	b.n	8003374 <bootInitSecondaryMem+0x90>
      return CBOOT_ERROR_FAILURE;
 8003372:	2001      	movs	r0, #1
}
 8003374:	b003      	add	sp, #12
 8003376:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return CBOOT_ERROR_FAILURE;
 8003378:	2001      	movs	r0, #1
 800337a:	e7fb      	b.n	8003374 <bootInitSecondaryMem+0x90>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800337c:	2004      	movs	r0, #4
 800337e:	e7f9      	b.n	8003374 <bootInitSecondaryMem+0x90>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8003380:	2004      	movs	r0, #4
 8003382:	e7f7      	b.n	8003374 <bootInitSecondaryMem+0x90>

08003384 <bootUpdateApp>:
   uint8_t iv[INIT_VECT_SIZE];
#endif
   uint8_t buffer[512];

   // Check parameters validity?
   if (context == NULL || slot == NULL)
 8003384:	2800      	cmp	r0, #0
 8003386:	d077      	beq.n	8003478 <bootUpdateApp+0xf4>
{
 8003388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800338c:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8003390:	460e      	mov	r6, r1
   if (context == NULL || slot == NULL)
 8003392:	2900      	cmp	r1, #0
 8003394:	d072      	beq.n	800347c <bootUpdateApp+0xf8>

   // Point to the internal slot memory descriptor
   intMem = &context->memories[0];
#if (EXTERNAL_MEMORY_SUPPORT == ENABLED)
   // Point to the slot memory descriptor
   extMem = (Memory *)slot->memParent;
 8003396:	684a      	ldr	r2, [r1, #4]
#endif

   // Get slot start address
   readAddr = slot->addr;
 8003398:	688d      	ldr	r5, [r1, #8]
   // Get internal stlot address
   writeAddr = intMem->slots[0].addr;
 800339a:	6fc7      	ldr	r7, [r0, #124]	@ 0x7c
   // Select CRC32 integrity algo
   integrityAlgo = CRC32_HASH_ALGO;

#if (EXTERNAL_MEMORY_SUPPORT == ENABLED)
   // Point to the external memory flash driver
   externalDriver = (FlashDriver *)extMem->driver;
 800339c:	f8d2 802c 	ldr.w	r8, [r2, #44]	@ 0x2c
#endif
   // Point to the internal memory flash driver
   internalDriver = (FlashDriver *)intMem->driver;
 80033a0:	f8d0 9098 	ldr.w	r9, [r0, #152]	@ 0x98
   // Get internal driver information
   error = internalDriver->getInfo(&internalDriverInfo);
 80033a4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80033a8:	a880      	add	r0, sp, #512	@ 0x200
 80033aa:	4798      	blx	r3
   if (error)
 80033ac:	2800      	cmp	r0, #0
 80033ae:	d167      	bne.n	8003480 <bootUpdateApp+0xfc>
   ////////////////////////////////////////////////////////////////////////////
   // Read header of the image containing the new application firmware

#if (EXTERNAL_MEMORY_SUPPORT == ENABLED)
   // Read update image slot for secondary (external) memory slot
   error = externalDriver->read(readAddr, buffer, sizeof(ImageHeader));
 80033b0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80033b4:	2240      	movs	r2, #64	@ 0x40
 80033b6:	4669      	mov	r1, sp
 80033b8:	4628      	mov	r0, r5
 80033ba:	4798      	blx	r3
#else
   // Read update image slot for primary (internal) memory slot
   error = internalDriver->read(readAddr, buffer, sizeof(ImageHeader));
#endif
   // Is any error?
   if (error)
 80033bc:	2800      	cmp	r0, #0
 80033be:	d164      	bne.n	800348a <bootUpdateApp+0x106>

   // Point to image header
   header = (ImageHeader *)buffer;

   // Write new image header into primary (internal) memory slot
   error = internalDriver->write(writeAddr, (uint8_t *)header, sizeof(ImageHeader));
 80033c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80033c4:	2240      	movs	r2, #64	@ 0x40
 80033c6:	4669      	mov	r1, sp
 80033c8:	4638      	mov	r0, r7
 80033ca:	4798      	blx	r3
   // Is any error?
   if (error)
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d15e      	bne.n	800348e <bootUpdateApp+0x10a>
      return CBOOT_ERROR_FAILURE;

   // Save image application data size
   imgAppSize = header->dataSize;
 80033d0:	f8dd 500d 	ldr.w	r5, [sp, #13]

   // Initialize CRC32 integrity algo context
   integrityAlgo->init(&integrityContext);
 80033d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	@ 800349c <bootUpdateApp+0x118>
 80033d8:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 80033dc:	a881      	add	r0, sp, #516	@ 0x204
 80033de:	4798      	blx	r3

   // Start image check crc computation with image header
   integrityAlgo->update(&integrityContext,
 80033e0:	f8da 3028 	ldr.w	r3, [sl, #40]	@ 0x28
 80033e4:	2204      	movs	r2, #4
 80033e6:	a90f      	add	r1, sp, #60	@ 0x3c
 80033e8:	a881      	add	r0, sp, #516	@ 0x204
 80033ea:	4798      	blx	r3
                         (uint8_t *)&header->headCrc, CRC32_DIGEST_SIZE);

   // Update write address
   writeAddr += sizeof(ImageHeader);
 80033ec:	3740      	adds	r7, #64	@ 0x40
   ////////////////////////////////////////////////////////////////////////////
   // Transfer new application firmware data from the image slot
   //  in external flash to the image slot in internal flash.

   // Get new image application data iv start address
   readAddr = slot->addr + sizeof(ImageHeader);
 80033ee:	68b6      	ldr	r6, [r6, #8]
 80033f0:	3640      	adds	r6, #64	@ 0x40
   readAddr += AES_BLOCK_SIZE;

#endif

   // Loop through image application padding
   while (imgAppSize > 0)
 80033f2:	e002      	b.n	80033fa <bootUpdateApp+0x76>
            return CBOOT_ERROR_FAILURE;
         writeAddr += n;
      }
      else
      {
         __NOP();
 80033f4:	bf00      	nop
      }

      // writeAddr += n;
      readAddr += n;
 80033f6:	4426      	add	r6, r4
      imgAppSize -= n;
 80033f8:	1b2d      	subs	r5, r5, r4
   while (imgAppSize > 0)
 80033fa:	b325      	cbz	r5, 8003446 <bootUpdateApp+0xc2>
      n = MIN(sizeof(buffer), imgAppSize);
 80033fc:	462c      	mov	r4, r5
 80033fe:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8003402:	bf28      	it	cs
 8003404:	f44f 7400 	movcs.w	r4, #512	@ 0x200
      error = externalDriver->read(readAddr, buffer, n);
 8003408:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800340c:	4622      	mov	r2, r4
 800340e:	4669      	mov	r1, sp
 8003410:	4630      	mov	r0, r6
 8003412:	4798      	blx	r3
      if (error)
 8003414:	2800      	cmp	r0, #0
 8003416:	d13c      	bne.n	8003492 <bootUpdateApp+0x10e>
      integrityAlgo->update(&integrityContext, buffer, n);
 8003418:	4b20      	ldr	r3, [pc, #128]	@ (800349c <bootUpdateApp+0x118>)
 800341a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341c:	4622      	mov	r2, r4
 800341e:	4669      	mov	r1, sp
 8003420:	a881      	add	r0, sp, #516	@ 0x204
 8003422:	4798      	blx	r3
      if ((n % internalDriverInfo->writeSize) == 0)
 8003424:	9b80      	ldr	r3, [sp, #512]	@ 0x200
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	fbb4 f3f2 	udiv	r3, r4, r2
 800342c:	fb02 4313 	mls	r3, r2, r3, r4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1df      	bne.n	80033f4 <bootUpdateApp+0x70>
         error = internalDriver->write(writeAddr, buffer, n);
 8003434:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003438:	4622      	mov	r2, r4
 800343a:	4669      	mov	r1, sp
 800343c:	4638      	mov	r0, r7
 800343e:	4798      	blx	r3
         if (error)
 8003440:	bb48      	cbnz	r0, 8003496 <bootUpdateApp+0x112>
         writeAddr += n;
 8003442:	4427      	add	r7, r4
 8003444:	e7d7      	b.n	80033f6 <bootUpdateApp+0x72>

   ////////////////////////////////////////////////////////////////////////////
   // Generate an image CRC32 integrity check section

   // Reset n if it was a multiple of internal flash minimum write size
   if ((n > 0) && ((n % internalDriverInfo->writeSize) == 0))
 8003446:	b13c      	cbz	r4, 8003458 <bootUpdateApp+0xd4>
 8003448:	9b80      	ldr	r3, [sp, #512]	@ 0x200
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	fbb4 f3f2 	udiv	r3, r4, r2
 8003450:	fb02 4313 	mls	r3, r2, r3, r4
 8003454:	b903      	cbnz	r3, 8003458 <bootUpdateApp+0xd4>
   {
      n = 0;
 8003456:	461c      	mov	r4, r3
   }

   // Finalize crc32 integrity algo computation
   integrityAlgo->final(&integrityContext, buffer + n);
 8003458:	4d10      	ldr	r5, [pc, #64]	@ (800349c <bootUpdateApp+0x118>)
 800345a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800345c:	eb0d 0104 	add.w	r1, sp, r4
 8003460:	a881      	add	r0, sp, #516	@ 0x204
 8003462:	4798      	blx	r3
   TRACE_DEBUG("\r\n");
   TRACE_DEBUG("New image application CRC:\r\n");
   TRACE_DEBUG_ARRAY("CRC RAW: ", buffer + n, integrityAlgo->digestSize);

   // Write computed image check data in primary (internal) memory slot
   error = internalDriver->write(writeAddr, buffer, n + integrityAlgo->digestSize);
 8003464:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003468:	696a      	ldr	r2, [r5, #20]
 800346a:	4422      	add	r2, r4
 800346c:	4669      	mov	r1, sp
 800346e:	4638      	mov	r0, r7
 8003470:	4798      	blx	r3
   // Is any error?
   if (error)
 8003472:	b130      	cbz	r0, 8003482 <bootUpdateApp+0xfe>
      return CBOOT_ERROR_FAILURE;
 8003474:	2001      	movs	r0, #1
 8003476:	e004      	b.n	8003482 <bootUpdateApp+0xfe>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8003478:	2004      	movs	r0, #4

   // Successful process
   return CBOOT_NO_ERROR;
}
 800347a:	4770      	bx	lr
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800347c:	2004      	movs	r0, #4
 800347e:	e000      	b.n	8003482 <bootUpdateApp+0xfe>
      return CBOOT_ERROR_FAILURE;
 8003480:	2001      	movs	r0, #1
}
 8003482:	f50d 7d02 	add.w	sp, sp, #520	@ 0x208
 8003486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return CBOOT_ERROR_FAILURE;
 800348a:	2001      	movs	r0, #1
 800348c:	e7f9      	b.n	8003482 <bootUpdateApp+0xfe>
      return CBOOT_ERROR_FAILURE;
 800348e:	2001      	movs	r0, #1
 8003490:	e7f7      	b.n	8003482 <bootUpdateApp+0xfe>
         return CBOOT_ERROR_FAILURE;
 8003492:	2001      	movs	r0, #1
 8003494:	e7f5      	b.n	8003482 <bootUpdateApp+0xfe>
            return CBOOT_ERROR_FAILURE;
 8003496:	2001      	movs	r0, #1
 8003498:	e7f3      	b.n	8003482 <bootUpdateApp+0xfe>
 800349a:	bf00      	nop
 800349c:	08007438 	.word	0x08007438

080034a0 <bootCheckImage>:
 * @param[in] slot Pointer to the slot containing the image to be checked.
 * @return Error code.
 **/

cboot_error_t bootCheckImage(BootContext *context, Slot *slot)
{
 80034a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034a4:	b095      	sub	sp, #84	@ 0x54
   bool_t magicNumberIsValid;
   uint32_t magicNumberCrc;
#endif

   // Check parameter validity
   if (context == NULL || slot == NULL)
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d056      	beq.n	8003558 <bootCheckImage+0xb8>
 80034aa:	460c      	mov	r4, r1
 80034ac:	2900      	cmp	r1, #0
 80034ae:	d055      	beq.n	800355c <bootCheckImage+0xbc>
      return CBOOT_ERROR_INVALID_PARAMETERS;

   // Point to slot memory descriptor
   memory = (Memory *)slot->memParent;
 80034b0:	684b      	ldr	r3, [r1, #4]

   // Get memory info
   driver = (FlashDriver *)memory->driver;
 80034b2:	f8d3 802c 	ldr.w	r8, [r3, #44]	@ 0x2c
   error = driver->getInfo(&info);
 80034b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80034ba:	a813      	add	r0, sp, #76	@ 0x4c
 80034bc:	4798      	blx	r3
   // Is any error?
   if (error)
 80034be:	2800      	cmp	r0, #0
 80034c0:	d14e      	bne.n	8003560 <bootCheckImage+0xc0>
      return CBOOT_ERROR_FAILURE;

   // Read slot data
   error = driver->read(slot->addr, buffer, sizeof(buffer));
 80034c2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80034c6:	2240      	movs	r2, #64	@ 0x40
 80034c8:	a901      	add	r1, sp, #4
 80034ca:	68a0      	ldr	r0, [r4, #8]
 80034cc:	4798      	blx	r3
   // Is any error?
   if (error)
 80034ce:	b108      	cbz	r0, 80034d4 <bootCheckImage+0x34>
      return CBOOT_ERROR_FAILURE;
 80034d0:	2701      	movs	r7, #1
 80034d2:	e046      	b.n	8003562 <bootCheckImage+0xc2>

   // Point to internal image header
   header = (ImageHeader *)buffer;

   // Check internal image header
   cerror = imageCheckHeader(header);
 80034d4:	a801      	add	r0, sp, #4
 80034d6:	f000 fdfd 	bl	80040d4 <imageCheckHeader>
   // Is any error?
   if (cerror)
 80034da:	4607      	mov	r7, r0
 80034dc:	2800      	cmp	r0, #0
 80034de:	d140      	bne.n	8003562 <bootCheckImage+0xc2>
      TRACE_ERROR("Image header is not valid!\r\n");
      return cerror;
   }

   // Discard internal image header
   addr = slot->addr + sizeof(ImageHeader);
 80034e0:	68a6      	ldr	r6, [r4, #8]
 80034e2:	3640      	adds	r6, #64	@ 0x40

   // Save internal image data size
   length = header->dataSize;
 80034e4:	f8dd 5011 	ldr.w	r5, [sp, #17]
      length += AES_BLOCK_SIZE;
   }
#endif

   // Check image size
   if (length + sizeof(ImageHeader) > slot->size)
 80034e8:	f105 0240 	add.w	r2, r5, #64	@ 0x40
 80034ec:	68e3      	ldr	r3, [r4, #12]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d83b      	bhi.n	800356a <bootCheckImage+0xca>
   }

   // Point to the CRC32 algorithm
   crcAlgo = (HashAlgo *)CRC32_HASH_ALGO;
   // Initialize CRC algorithm
   crcAlgo->init(&crcContext);
 80034f2:	4c21      	ldr	r4, [pc, #132]	@ (8003578 <bootCheckImage+0xd8>)
 80034f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80034f6:	a812      	add	r0, sp, #72	@ 0x48
 80034f8:	4798      	blx	r3
   // Start image check computation with image header crc
   crcAlgo->update(&crcContext, (uint8_t *)&header->headCrc, CRC32_DIGEST_SIZE);
 80034fa:	f8d4 9028 	ldr.w	r9, [r4, #40]	@ 0x28
 80034fe:	2204      	movs	r2, #4
 8003500:	a910      	add	r1, sp, #64	@ 0x40
 8003502:	a812      	add	r0, sp, #72	@ 0x48
 8003504:	47c8      	blx	r9

   // Process image binary data
   while (length > 0)
 8003506:	b18d      	cbz	r5, 800352c <bootCheckImage+0x8c>
   {
      // Prevent read operation to overflow buffer size
      n = MIN(sizeof(buffer), length);
 8003508:	462c      	mov	r4, r5
 800350a:	2d40      	cmp	r5, #64	@ 0x40
 800350c:	bf28      	it	cs
 800350e:	2440      	movcs	r4, #64	@ 0x40

      // Read image binary data
      error = driver->read(addr, buffer, n);
 8003510:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8003514:	4622      	mov	r2, r4
 8003516:	a901      	add	r1, sp, #4
 8003518:	4630      	mov	r0, r6
 800351a:	4798      	blx	r3
      // Is any error?
      if (error)
 800351c:	bb38      	cbnz	r0, 800356e <bootCheckImage+0xce>
         return CBOOT_ERROR_FAILURE;

      // Update image binary data crc computation
      crcAlgo->update(&crcContext, buffer, n);
 800351e:	4622      	mov	r2, r4
 8003520:	a901      	add	r1, sp, #4
 8003522:	a812      	add	r0, sp, #72	@ 0x48
 8003524:	47c8      	blx	r9

      // Increment external flash memory word address
      addr += n;
 8003526:	4426      	add	r6, r4
      // Remaining bytes to be read
      length -= n;
 8003528:	1b2d      	subs	r5, r5, r4
 800352a:	e7ec      	b.n	8003506 <bootCheckImage+0x66>
   }

   // Finalize image binary data crc computation
   crcAlgo->final(&crcContext, digest);
 800352c:	4b12      	ldr	r3, [pc, #72]	@ (8003578 <bootCheckImage+0xd8>)
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	a911      	add	r1, sp, #68	@ 0x44
 8003532:	a812      	add	r0, sp, #72	@ 0x48
 8003534:	4798      	blx	r3

   // Read given image binary crc
   error = driver->read(addr, buffer, CRC32_DIGEST_SIZE);
 8003536:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800353a:	2204      	movs	r2, #4
 800353c:	eb0d 0102 	add.w	r1, sp, r2
 8003540:	4630      	mov	r0, r6
 8003542:	4798      	blx	r3
   // Is any error?
   if (error)
 8003544:	b9a8      	cbnz	r0, 8003572 <bootCheckImage+0xd2>
      return CBOOT_ERROR_FAILURE;

   // Compare given against computed image binary crc
   if (memcmp(buffer, digest, CRC32_DIGEST_SIZE) != 0)
 8003546:	2204      	movs	r2, #4
 8003548:	a911      	add	r1, sp, #68	@ 0x44
 800354a:	eb0d 0002 	add.w	r0, sp, r2
 800354e:	f002 fe11 	bl	8006174 <memcmp>
 8003552:	b130      	cbz	r0, 8003562 <bootCheckImage+0xc2>
      TRACE_ERROR("Image binary data is not valid!\r\n");
      TRACE_DEBUG("Computed check CRC: ");
      TRACE_DEBUG_ARRAY("", digest, CRC32_DIGEST_SIZE);
      TRACE_DEBUG("Given Check CRC: ");
      TRACE_DEBUG_ARRAY("", buffer, CRC32_DIGEST_SIZE);
      return CBOOT_ERROR_FAILURE;
 8003554:	2701      	movs	r7, #1
 8003556:	e004      	b.n	8003562 <bootCheckImage+0xc2>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8003558:	2704      	movs	r7, #4
 800355a:	e002      	b.n	8003562 <bootCheckImage+0xc2>
 800355c:	2704      	movs	r7, #4
 800355e:	e000      	b.n	8003562 <bootCheckImage+0xc2>
      return CBOOT_ERROR_FAILURE;
 8003560:	2701      	movs	r7, #1
   }
#endif

   // Successfully processed
   return CBOOT_NO_ERROR;
}
 8003562:	4638      	mov	r0, r7
 8003564:	b015      	add	sp, #84	@ 0x54
 8003566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return CBOOT_ERROR_INVALID_LENGTH;
 800356a:	2718      	movs	r7, #24
 800356c:	e7f9      	b.n	8003562 <bootCheckImage+0xc2>
         return CBOOT_ERROR_FAILURE;
 800356e:	2701      	movs	r7, #1
 8003570:	e7f7      	b.n	8003562 <bootCheckImage+0xc2>
      return CBOOT_ERROR_FAILURE;
 8003572:	2701      	movs	r7, #1
 8003574:	e7f5      	b.n	8003562 <bootCheckImage+0xc2>
 8003576:	bf00      	nop
 8003578:	08007438 	.word	0x08007438

0800357c <bootGetSlotImgHeader>:

   // Initialize status code
   cerror = CBOOT_NO_ERROR;

   // Check parameter validity
   if (slot == NULL)
 800357c:	b338      	cbz	r0, 80035ce <bootGetSlotImgHeader+0x52>
{
 800357e:	b530      	push	{r4, r5, lr}
 8003580:	b093      	sub	sp, #76	@ 0x4c
 8003582:	460c      	mov	r4, r1
      return cerror;

   memory = (Memory *)slot->memParent;
 8003584:	6842      	ldr	r2, [r0, #4]
   driver = (FlashDriver *)memory->driver;
 8003586:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c

   // Read first slot data that should correspond to the image header
   error = driver->read(slot->addr, buffer, sizeof(buffer));
 8003588:	6955      	ldr	r5, [r2, #20]
 800358a:	2240      	movs	r2, #64	@ 0x40
 800358c:	a902      	add	r1, sp, #8
 800358e:	6880      	ldr	r0, [r0, #8]
 8003590:	47a8      	blx	r5
   if (error)
 8003592:	b110      	cbz	r0, 800359a <bootGetSlotImgHeader+0x1e>
      return CBOOT_ERROR_FAILURE;
 8003594:	2001      	movs	r0, #1
   // Save image header
   memcpy(header, tmpHeader, sizeof(ImageHeader));

   // Successful process
   return CBOOT_NO_ERROR;
}
 8003596:	b013      	add	sp, #76	@ 0x4c
 8003598:	bd30      	pop	{r4, r5, pc}
   cerror = imageGetHeader(buffer, sizeof(buffer), &tmpHeader);
 800359a:	aa01      	add	r2, sp, #4
 800359c:	2140      	movs	r1, #64	@ 0x40
 800359e:	a802      	add	r0, sp, #8
 80035a0:	f000 fdca 	bl	8004138 <imageGetHeader>
   if (cerror)
 80035a4:	2800      	cmp	r0, #0
 80035a6:	d1f6      	bne.n	8003596 <bootGetSlotImgHeader+0x1a>
   memcpy(header, tmpHeader, sizeof(ImageHeader));
 80035a8:	9b01      	ldr	r3, [sp, #4]
 80035aa:	4621      	mov	r1, r4
 80035ac:	f103 0e40 	add.w	lr, r3, #64	@ 0x40
 80035b0:	f8d3 c000 	ldr.w	ip, [r3]
 80035b4:	685d      	ldr	r5, [r3, #4]
 80035b6:	689c      	ldr	r4, [r3, #8]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	f8c1 c000 	str.w	ip, [r1]
 80035be:	604d      	str	r5, [r1, #4]
 80035c0:	608c      	str	r4, [r1, #8]
 80035c2:	60ca      	str	r2, [r1, #12]
 80035c4:	3310      	adds	r3, #16
 80035c6:	3110      	adds	r1, #16
 80035c8:	4573      	cmp	r3, lr
 80035ca:	d1f1      	bne.n	80035b0 <bootGetSlotImgHeader+0x34>
 80035cc:	e7e3      	b.n	8003596 <bootGetSlotImgHeader+0x1a>
      return cerror;
 80035ce:	2000      	movs	r0, #0
}
 80035d0:	4770      	bx	lr

080035d2 <bootSelectUpdateImageSlot>:
   if (context == NULL)
 80035d2:	b3c0      	cbz	r0, 8003646 <bootSelectUpdateImageSlot+0x74>
{
 80035d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035d8:	b094      	sub	sp, #80	@ 0x50
 80035da:	460c      	mov	r4, r1
 80035dc:	4605      	mov	r5, r0
   tmpSlot = context->memories[0].slots[0];
 80035de:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80035e2:	f100 0374 	add.w	r3, r0, #116	@ 0x74
 80035e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   cerror = bootGetSlotImgHeader(&tmpSlot, &tmpImgHeader);
 80035ec:	4669      	mov	r1, sp
 80035ee:	4660      	mov	r0, ip
 80035f0:	f7ff ffc4 	bl	800357c <bootGetSlotImgHeader>
   if (!cerror)
 80035f4:	4607      	mov	r7, r0
 80035f6:	b948      	cbnz	r0, 800360c <bootSelectUpdateImageSlot+0x3a>
      tmpImgIndex = tmpImgHeader.imgIndex;
 80035f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
      *selectedSlot = tmpSlot;
 80035fc:	ab14      	add	r3, sp, #80	@ 0x50
 80035fe:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8003602:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   cerror = bootGetSlotImgHeader(&tmpSlot, &tmpImgHeader);
 8003606:	4638      	mov	r0, r7
      for (i = 0; i < 1; i++)
 8003608:	2600      	movs	r6, #0
 800360a:	b116      	cbz	r6, 8003612 <bootSelectUpdateImageSlot+0x40>
}
 800360c:	b014      	add	sp, #80	@ 0x50
 800360e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         tmpSlot = context->memories[1].slots[i];
 8003612:	eb05 1306 	add.w	r3, r5, r6, lsl #4
 8003616:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800361a:	33a8      	adds	r3, #168	@ 0xa8
 800361c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800361e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
         cerror = bootGetSlotImgHeader(&tmpSlot, &tmpImgHeader);
 8003622:	4669      	mov	r1, sp
 8003624:	4660      	mov	r0, ip
 8003626:	f7ff ffa9 	bl	800357c <bootGetSlotImgHeader>
         if (cerror)
 800362a:	b948      	cbnz	r0, 8003640 <bootSelectUpdateImageSlot+0x6e>
            if (tmpImgHeader.imgIndex > tmpImgIndex)
 800362c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8003630:	45c4      	cmp	ip, r8
 8003632:	d905      	bls.n	8003640 <bootSelectUpdateImageSlot+0x6e>
               *selectedSlot = tmpSlot;
 8003634:	ab14      	add	r3, sp, #80	@ 0x50
 8003636:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800363a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
               tmpImgIndex = tmpImgHeader.imgIndex;
 800363e:	46e0      	mov	r8, ip
      for (i = 0; i < 1; i++)
 8003640:	3601      	adds	r6, #1
 8003642:	4638      	mov	r0, r7
 8003644:	e7e1      	b.n	800360a <bootSelectUpdateImageSlot+0x38>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8003646:	2004      	movs	r0, #4
}
 8003648:	4770      	bx	lr

0800364a <bootCheckSlotAppResetVector>:

   // Initialize status code
   cerror = CBOOT_NO_ERROR;

   // Check parameter validity
   if (slot == NULL)
 800364a:	b1e0      	cbz	r0, 8003686 <bootCheckSlotAppResetVector+0x3c>
{
 800364c:	b530      	push	{r4, r5, lr}
 800364e:	b083      	sub	sp, #12
 8003650:	4604      	mov	r4, r0
      return CBOOT_ERROR_INVALID_PARAMETERS;

   memory = (Memory *)slot->memParent;
 8003652:	6843      	ldr	r3, [r0, #4]
   driver = (FlashDriver *)memory->driver;
 8003654:	6add      	ldr	r5, [r3, #44]	@ 0x2c

   // Compute reset vector address offset (slot app start address offset + 4)
   resetVectorAddrOffset = mcuGetVtorOffset() + 0x4;
 8003656:	f000 f86d 	bl	8003734 <mcuGetVtorOffset>
 800365a:	3004      	adds	r0, #4

   // Check reset vector of the current application
   error = driver->read(slot->addr + resetVectorAddrOffset, (uint8_t *)&resetVector, sizeof(resetVector));
 800365c:	696b      	ldr	r3, [r5, #20]
 800365e:	2204      	movs	r2, #4
 8003660:	eb0d 0102 	add.w	r1, sp, r2
 8003664:	68a5      	ldr	r5, [r4, #8]
 8003666:	4428      	add	r0, r5
 8003668:	4798      	blx	r3

   // Check there is no error?
   if (!error)
 800366a:	b970      	cbnz	r0, 800368a <bootCheckSlotAppResetVector+0x40>
   {
      // Is reset vector invalid (wrong value or outside of memory)?
      if ((resetVector == 0xFFFFFFFF) || !(slot->addr <= resetVector && resetVector <= slot->addr + slot->size))
 800366c:	9b01      	ldr	r3, [sp, #4]
 800366e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003672:	d00d      	beq.n	8003690 <bootCheckSlotAppResetVector+0x46>
 8003674:	68a2      	ldr	r2, [r4, #8]
 8003676:	4293      	cmp	r3, r2
 8003678:	d30c      	bcc.n	8003694 <bootCheckSlotAppResetVector+0x4a>
 800367a:	68e1      	ldr	r1, [r4, #12]
 800367c:	440a      	add	r2, r1
 800367e:	4293      	cmp	r3, r2
 8003680:	d904      	bls.n	800368c <bootCheckSlotAppResetVector+0x42>
      {
         // Raised an error
         cerror = CBOOT_ERROR_FAILURE; // ERROR INVALID RESET VECTOR
 8003682:	2001      	movs	r0, #1
 8003684:	e002      	b.n	800368c <bootCheckSlotAppResetVector+0x42>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8003686:	2004      	movs	r0, #4
      }
   }

   // Return status code
   return cerror;
}
 8003688:	4770      	bx	lr
   cerror = CBOOT_NO_ERROR;
 800368a:	2000      	movs	r0, #0
}
 800368c:	b003      	add	sp, #12
 800368e:	bd30      	pop	{r4, r5, pc}
         cerror = CBOOT_ERROR_FAILURE; // ERROR INVALID RESET VECTOR
 8003690:	2001      	movs	r0, #1
 8003692:	e7fb      	b.n	800368c <bootCheckSlotAppResetVector+0x42>
 8003694:	2001      	movs	r0, #1
 8003696:	e7f9      	b.n	800368c <bootCheckSlotAppResetVector+0x42>

08003698 <bootChangeState>:
 **/

void bootChangeState(BootContext *context, BootState newState)
{
   // Update Bootloader state
   context->state = newState;
 8003698:	7001      	strb	r1, [r0, #0]
}
 800369a:	4770      	bx	lr

0800369c <crc32Init>:
 **/

void crc32Init(Crc32Context *context)
{
   //CRC (digest) preset value
   context->digest = 0xFFFFFFFF;
 800369c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036a0:	6003      	str	r3, [r0, #0]
}
 80036a2:	4770      	bx	lr

080036a4 <crc32Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

void crc32Update(Crc32Context *context, const void *data, size_t length)
{
 80036a4:	b430      	push	{r4, r5}
   size_t i;
   const uint8_t *p;
   uint32_t crc;

   //Restaure last crc
   crc = (uint32_t)context->digest;
 80036a6:	6804      	ldr	r4, [r0, #0]

   //Point to the data over which to calculate the CRC
   p = (uint8_t *) data;

   //Process the incoming data
   for(i = 0; i < length; i++)
 80036a8:	2300      	movs	r3, #0
 80036aa:	e00a      	b.n	80036c2 <crc32Update+0x1e>
   {
      //The message is processed byte by byte
      crc = (crc >> 8) ^ crc32Table[(crc & 0xFF) ^ p[i]];
 80036ac:	fa5f fc84 	uxtb.w	ip, r4
 80036b0:	5ccd      	ldrb	r5, [r1, r3]
 80036b2:	ea8c 0c05 	eor.w	ip, ip, r5
 80036b6:	4d05      	ldr	r5, [pc, #20]	@ (80036cc <crc32Update+0x28>)
 80036b8:	f855 502c 	ldr.w	r5, [r5, ip, lsl #2]
 80036bc:	ea85 2414 	eor.w	r4, r5, r4, lsr #8
   for(i = 0; i < length; i++)
 80036c0:	3301      	adds	r3, #1
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d3f2      	bcc.n	80036ac <crc32Update+0x8>
   }

   //Save updated crc
   context->digest = crc;
 80036c6:	6004      	str	r4, [r0, #0]
}
 80036c8:	bc30      	pop	{r4, r5}
 80036ca:	4770      	bx	lr
 80036cc:	0800746c 	.word	0x0800746c

080036d0 <crc32Final>:
 **/

void crc32Final(Crc32Context *context, uint8_t *digest)
{
   //Copy the resulting digest
   if(digest != NULL)
 80036d0:	b109      	cbz	r1, 80036d6 <crc32Final+0x6>
      osMemcpy(digest, (uint8_t*)&context->digest, CRC32_DIGEST_SIZE);
 80036d2:	6802      	ldr	r2, [r0, #0]
 80036d4:	600a      	str	r2, [r1, #0]
}
 80036d6:	4770      	bx	lr

080036d8 <crc32Compute>:
{
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	4606      	mov	r6, r0
 80036dc:	460f      	mov	r7, r1
 80036de:	4615      	mov	r5, r2
   Crc32Context *context = cryptoAllocMem(sizeof(Crc32Context));
 80036e0:	2004      	movs	r0, #4
 80036e2:	f7ff fc89 	bl	8002ff8 <osAllocMem>
   if(context == NULL)
 80036e6:	b180      	cbz	r0, 800370a <crc32Compute+0x32>
 80036e8:	4604      	mov	r4, r0
   crc32Init(context);
 80036ea:	f7ff ffd7 	bl	800369c <crc32Init>
   crc32Update(context, data, length);
 80036ee:	463a      	mov	r2, r7
 80036f0:	4631      	mov	r1, r6
 80036f2:	4620      	mov	r0, r4
 80036f4:	f7ff ffd6 	bl	80036a4 <crc32Update>
   crc32Final(context, digest);
 80036f8:	4629      	mov	r1, r5
 80036fa:	4620      	mov	r0, r4
 80036fc:	f7ff ffe8 	bl	80036d0 <crc32Final>
   cryptoFreeMem(context);
 8003700:	4620      	mov	r0, r4
 8003702:	f7ff fc7d 	bl	8003000 <osFreeMem>
   return NO_ERROR;
 8003706:	2000      	movs	r0, #0
}
 8003708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return ERROR_OUT_OF_MEMORY;
 800370a:	2064      	movs	r0, #100	@ 0x64
 800370c:	e7fc      	b.n	8003708 <crc32Compute+0x30>
	...

08003710 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8003710:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003714:	4905      	ldr	r1, [pc, #20]	@ (800372c <__NVIC_SystemReset+0x1c>)
 8003716:	68ca      	ldr	r2, [r1, #12]
 8003718:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800371c:	4b04      	ldr	r3, [pc, #16]	@ (8003730 <__NVIC_SystemReset+0x20>)
 800371e:	4313      	orrs	r3, r2
 8003720:	60cb      	str	r3, [r1, #12]
 8003722:	f3bf 8f4f 	dsb	sy
    __NOP();
 8003726:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003728:	e7fd      	b.n	8003726 <__NVIC_SystemReset+0x16>
 800372a:	bf00      	nop
 800372c:	e000ed00 	.word	0xe000ed00
 8003730:	05fa0004 	.word	0x05fa0004

08003734 <mcuGetVtorOffset>:
 **/

uint32_t mcuGetVtorOffset(void)
{
   return MCU_VTOR_OFFSET;
}
 8003734:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003738:	4770      	bx	lr

0800373a <mcuSystemReset>:
/**
 * @brief Reset MCU system
 **/

void mcuSystemReset(void)
{
 800373a:	b508      	push	{r3, lr}
   NVIC_SystemReset();
 800373c:	f7ff ffe8 	bl	8003710 <__NVIC_SystemReset>

08003740 <mcuBootAppImageAsm>:
 **/

#if defined(__GNUC__)
__attribute__((naked, noreturn)) void mcuBootAppImageAsm(uint32_t sp, uint32_t rh)
{
   __asm("MSR  MSP, r0");
 8003740:	f380 8808 	msr	MSP, r0
   __asm("BX   r1");
 8003744:	4708      	bx	r1

08003746 <default_cs_control>:

// Default CS control callback
static void default_cs_control(void *user_ctx, bool level)
{
    // User must implement this based on their hardware
}
 8003746:	4770      	bx	lr

08003748 <default_lock>:
    // User must implement this based on their hardware
	osDelayTask(ms);
}

// Default lock/unlock callbacks (for thread safety)
static void default_lock(void *user_ctx) {}
 8003748:	4770      	bx	lr

0800374a <default_unlock>:
static void default_unlock(void *user_ctx) {}
 800374a:	4770      	bx	lr

0800374c <w25qFlashDriverGetInfo>:
 * @param[in,out] info Pointer to the Memory information structure to be returned
 * @return Error code
 */
error_t w25qFlashDriverGetInfo(const FlashInfo **info)
{
    if (!driver_initialized) {
 800374c:	4b04      	ldr	r3, [pc, #16]	@ (8003760 <w25qFlashDriverGetInfo+0x14>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	b11b      	cbz	r3, 800375a <w25qFlashDriverGetInfo+0xe>
        return ERROR_FAILURE;
    }

    // Set Memory information pointer
    *info = (const FlashInfo*) &w25qFlashDriverInfo;
 8003752:	4b04      	ldr	r3, [pc, #16]	@ (8003764 <w25qFlashDriverGetInfo+0x18>)
 8003754:	6003      	str	r3, [r0, #0]
    return NO_ERROR;
 8003756:	2000      	movs	r0, #0
 8003758:	4770      	bx	lr
        return ERROR_FAILURE;
 800375a:	2001      	movs	r0, #1
}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000324 	.word	0x20000324
 8003764:	2000002c 	.word	0x2000002c

08003768 <w25qFlashDriverSectorAddr>:
 * @return TRUE if sector address, FALSE otherwise
 */
bool_t w25qFlashDriverSectorAddr(uint32_t address)
{
    // Check if address is aligned to 4KB sector boundary
    return (address % 4096 == 0) ? TRUE : FALSE;
 8003768:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 800376c:	fab0 f080 	clz	r0, r0
 8003770:	0940      	lsrs	r0, r0, #5
 8003772:	4770      	bx	lr

08003774 <default_spi_write_read>:
{
 8003774:	b500      	push	{lr}
 8003776:	b083      	sub	sp, #12
    STM32_LOGI(TAG, "Default SPI transfer called - implement in application");
 8003778:	f001 fe26 	bl	80053c8 <stm32_log_timestamp>
 800377c:	4603      	mov	r3, r0
 800377e:	4905      	ldr	r1, [pc, #20]	@ (8003794 <default_spi_write_read+0x20>)
 8003780:	9100      	str	r1, [sp, #0]
 8003782:	4a05      	ldr	r2, [pc, #20]	@ (8003798 <default_spi_write_read+0x24>)
 8003784:	2003      	movs	r0, #3
 8003786:	f001 fe23 	bl	80053d0 <stm32_log_write>
}
 800378a:	2000      	movs	r0, #0
 800378c:	b003      	add	sp, #12
 800378e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003792:	bf00      	nop
 8003794:	08006f0c 	.word	0x08006f0c
 8003798:	08006ec8 	.word	0x08006ec8

0800379c <default_spi_init>:
{
 800379c:	b500      	push	{lr}
 800379e:	b083      	sub	sp, #12
    STM32_LOGI(TAG, "Default SPI init called - implement in application");
 80037a0:	f001 fe12 	bl	80053c8 <stm32_log_timestamp>
 80037a4:	4603      	mov	r3, r0
 80037a6:	4905      	ldr	r1, [pc, #20]	@ (80037bc <default_spi_init+0x20>)
 80037a8:	9100      	str	r1, [sp, #0]
 80037aa:	4a05      	ldr	r2, [pc, #20]	@ (80037c0 <default_spi_init+0x24>)
 80037ac:	2003      	movs	r0, #3
 80037ae:	f001 fe0f 	bl	80053d0 <stm32_log_write>
}
 80037b2:	2000      	movs	r0, #0
 80037b4:	b003      	add	sp, #12
 80037b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80037ba:	bf00      	nop
 80037bc:	08006f0c 	.word	0x08006f0c
 80037c0:	08006f18 	.word	0x08006f18

080037c4 <w25qFlashDriverErase>:
    if (!driver_initialized) {
 80037c4:	4b27      	ldr	r3, [pc, #156]	@ (8003864 <w25qFlashDriverErase+0xa0>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d044      	beq.n	8003856 <w25qFlashDriverErase+0x92>
{
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	4606      	mov	r6, r0
 80037d2:	460d      	mov	r5, r1
    top_address = W25Q_FLASH_ADDR + flash_capacity;
 80037d4:	4b24      	ldr	r3, [pc, #144]	@ (8003868 <w25qFlashDriverErase+0xa4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
    if (address >= top_address) {
 80037d8:	4283      	cmp	r3, r0
 80037da:	d93e      	bls.n	800385a <w25qFlashDriverErase+0x96>
    if (address + length > top_address) {
 80037dc:	1844      	adds	r4, r0, r1
 80037de:	429c      	cmp	r4, r3
 80037e0:	d83d      	bhi.n	800385e <w25qFlashDriverErase+0x9a>
    STM32_LOGI(TAG, "Erase process: 0x%lX (%lu bytes)", address, length);
 80037e2:	f001 fdf1 	bl	80053c8 <stm32_log_timestamp>
 80037e6:	4603      	mov	r3, r0
 80037e8:	4920      	ldr	r1, [pc, #128]	@ (800386c <w25qFlashDriverErase+0xa8>)
 80037ea:	9502      	str	r5, [sp, #8]
 80037ec:	9601      	str	r6, [sp, #4]
 80037ee:	9100      	str	r1, [sp, #0]
 80037f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003870 <w25qFlashDriverErase+0xac>)
 80037f2:	2003      	movs	r0, #3
 80037f4:	f001 fdec 	bl	80053d0 <stm32_log_write>
    uint32_t end_sector = (address + length - 1) / sector_size;
 80037f8:	3c01      	subs	r4, #1
 80037fa:	0b24      	lsrs	r4, r4, #12
    current_addr = start_sector * sector_size;
 80037fc:	f426 657f 	bic.w	r5, r6, #4080	@ 0xff0
 8003800:	f025 050f 	bic.w	r5, r5, #15
    remaining = (end_sector - start_sector + 1) * sector_size;
 8003804:	eba4 3416 	sub.w	r4, r4, r6, lsr #12
 8003808:	3401      	adds	r4, #1
 800380a:	0324      	lsls	r4, r4, #12
    while (remaining > 0) {
 800380c:	b30c      	cbz	r4, 8003852 <w25qFlashDriverErase+0x8e>
        STM32_LOGD(TAG, "Erasing sector: 0x%lX", current_addr);
 800380e:	f001 fddb 	bl	80053c8 <stm32_log_timestamp>
 8003812:	4603      	mov	r3, r0
 8003814:	4915      	ldr	r1, [pc, #84]	@ (800386c <w25qFlashDriverErase+0xa8>)
 8003816:	9501      	str	r5, [sp, #4]
 8003818:	9100      	str	r1, [sp, #0]
 800381a:	4a16      	ldr	r2, [pc, #88]	@ (8003874 <w25qFlashDriverErase+0xb0>)
 800381c:	2004      	movs	r0, #4
 800381e:	f001 fdd7 	bl	80053d0 <stm32_log_write>
        ret = w25q_erase_sector(&w25q_handle, current_addr);
 8003822:	4629      	mov	r1, r5
 8003824:	4814      	ldr	r0, [pc, #80]	@ (8003878 <w25qFlashDriverErase+0xb4>)
 8003826:	f002 f8fa 	bl	8005a1e <w25q_erase_sector>
        if (ret != W25Q_OK) {
 800382a:	4606      	mov	r6, r0
 800382c:	b920      	cbnz	r0, 8003838 <w25qFlashDriverErase+0x74>
        current_addr += sector_size;
 800382e:	f505 5580 	add.w	r5, r5, #4096	@ 0x1000
        remaining -= sector_size;
 8003832:	f5a4 5480 	sub.w	r4, r4, #4096	@ 0x1000
 8003836:	e7e9      	b.n	800380c <w25qFlashDriverErase+0x48>
            STM32_LOGE(TAG, "Failed to erase sector 0x%lX: %d", current_addr, ret);
 8003838:	f001 fdc6 	bl	80053c8 <stm32_log_timestamp>
 800383c:	4603      	mov	r3, r0
 800383e:	490b      	ldr	r1, [pc, #44]	@ (800386c <w25qFlashDriverErase+0xa8>)
 8003840:	9602      	str	r6, [sp, #8]
 8003842:	9501      	str	r5, [sp, #4]
 8003844:	9100      	str	r1, [sp, #0]
 8003846:	4a0d      	ldr	r2, [pc, #52]	@ (800387c <w25qFlashDriverErase+0xb8>)
 8003848:	2001      	movs	r0, #1
 800384a:	f001 fdc1 	bl	80053d0 <stm32_log_write>
            return ERROR_FAILURE;
 800384e:	2001      	movs	r0, #1
 8003850:	e006      	b.n	8003860 <w25qFlashDriverErase+0x9c>
    return NO_ERROR;
 8003852:	2000      	movs	r0, #0
 8003854:	e004      	b.n	8003860 <w25qFlashDriverErase+0x9c>
        return ERROR_FAILURE;
 8003856:	2001      	movs	r0, #1
}
 8003858:	4770      	bx	lr
        return ERROR_INVALID_PARAMETER;
 800385a:	2002      	movs	r0, #2
 800385c:	e000      	b.n	8003860 <w25qFlashDriverErase+0x9c>
        return ERROR_INVALID_PARAMETER;
 800385e:	2002      	movs	r0, #2
}
 8003860:	b004      	add	sp, #16
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	20000324 	.word	0x20000324
 8003868:	20000320 	.word	0x20000320
 800386c:	08006f0c 	.word	0x08006f0c
 8003870:	08006f58 	.word	0x08006f58
 8003874:	08006f88 	.word	0x08006f88
 8003878:	2000034c 	.word	0x2000034c
 800387c:	08006fac 	.word	0x08006fac

08003880 <w25qFlashDriverRead>:
    if (!driver_initialized) {
 8003880:	4b1c      	ldr	r3, [pc, #112]	@ (80038f4 <w25qFlashDriverRead+0x74>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	b373      	cbz	r3, 80038e4 <w25qFlashDriverRead+0x64>
{
 8003886:	b570      	push	{r4, r5, r6, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	4604      	mov	r4, r0
 800388c:	460e      	mov	r6, r1
 800388e:	4615      	mov	r5, r2
    top_address = W25Q_FLASH_ADDR + flash_capacity;
 8003890:	4b19      	ldr	r3, [pc, #100]	@ (80038f8 <w25qFlashDriverRead+0x78>)
 8003892:	681b      	ldr	r3, [r3, #0]
    if (address >= top_address) {
 8003894:	4283      	cmp	r3, r0
 8003896:	d927      	bls.n	80038e8 <w25qFlashDriverRead+0x68>
    if (data == NULL || address + length > top_address) {
 8003898:	b341      	cbz	r1, 80038ec <w25qFlashDriverRead+0x6c>
 800389a:	1882      	adds	r2, r0, r2
 800389c:	429a      	cmp	r2, r3
 800389e:	d827      	bhi.n	80038f0 <w25qFlashDriverRead+0x70>
    STM32_LOGD(TAG, "Read process: 0x%lX (%lu bytes)", address, length);
 80038a0:	f001 fd92 	bl	80053c8 <stm32_log_timestamp>
 80038a4:	4603      	mov	r3, r0
 80038a6:	4915      	ldr	r1, [pc, #84]	@ (80038fc <w25qFlashDriverRead+0x7c>)
 80038a8:	9502      	str	r5, [sp, #8]
 80038aa:	9401      	str	r4, [sp, #4]
 80038ac:	9100      	str	r1, [sp, #0]
 80038ae:	4a14      	ldr	r2, [pc, #80]	@ (8003900 <w25qFlashDriverRead+0x80>)
 80038b0:	2004      	movs	r0, #4
 80038b2:	f001 fd8d 	bl	80053d0 <stm32_log_write>
    ret = w25q_read(&w25q_handle, address, data, length);
 80038b6:	462b      	mov	r3, r5
 80038b8:	4632      	mov	r2, r6
 80038ba:	4621      	mov	r1, r4
 80038bc:	4811      	ldr	r0, [pc, #68]	@ (8003904 <w25qFlashDriverRead+0x84>)
 80038be:	f001 ff7c 	bl	80057ba <w25q_read>
    if (ret != W25Q_OK) {
 80038c2:	4604      	mov	r4, r0
 80038c4:	b910      	cbnz	r0, 80038cc <w25qFlashDriverRead+0x4c>
    return NO_ERROR;
 80038c6:	2000      	movs	r0, #0
}
 80038c8:	b004      	add	sp, #16
 80038ca:	bd70      	pop	{r4, r5, r6, pc}
        STM32_LOGE(TAG, "Failed to read flash: %d", ret);
 80038cc:	f001 fd7c 	bl	80053c8 <stm32_log_timestamp>
 80038d0:	4603      	mov	r3, r0
 80038d2:	490a      	ldr	r1, [pc, #40]	@ (80038fc <w25qFlashDriverRead+0x7c>)
 80038d4:	9401      	str	r4, [sp, #4]
 80038d6:	9100      	str	r1, [sp, #0]
 80038d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003908 <w25qFlashDriverRead+0x88>)
 80038da:	2001      	movs	r0, #1
 80038dc:	f001 fd78 	bl	80053d0 <stm32_log_write>
        return ERROR_FAILURE;
 80038e0:	2001      	movs	r0, #1
 80038e2:	e7f1      	b.n	80038c8 <w25qFlashDriverRead+0x48>
        return ERROR_FAILURE;
 80038e4:	2001      	movs	r0, #1
}
 80038e6:	4770      	bx	lr
        return ERROR_INVALID_PARAMETER;
 80038e8:	2002      	movs	r0, #2
 80038ea:	e7ed      	b.n	80038c8 <w25qFlashDriverRead+0x48>
        return ERROR_INVALID_PARAMETER;
 80038ec:	2002      	movs	r0, #2
 80038ee:	e7eb      	b.n	80038c8 <w25qFlashDriverRead+0x48>
 80038f0:	2002      	movs	r0, #2
 80038f2:	e7e9      	b.n	80038c8 <w25qFlashDriverRead+0x48>
 80038f4:	20000324 	.word	0x20000324
 80038f8:	20000320 	.word	0x20000320
 80038fc:	08006f0c 	.word	0x08006f0c
 8003900:	08006fdc 	.word	0x08006fdc
 8003904:	2000034c 	.word	0x2000034c
 8003908:	0800700c 	.word	0x0800700c

0800390c <w25qFlashDriverWrite>:
    if (!driver_initialized) {
 800390c:	4b1c      	ldr	r3, [pc, #112]	@ (8003980 <w25qFlashDriverWrite+0x74>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	b373      	cbz	r3, 8003970 <w25qFlashDriverWrite+0x64>
{
 8003912:	b570      	push	{r4, r5, r6, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	4604      	mov	r4, r0
 8003918:	460e      	mov	r6, r1
 800391a:	4615      	mov	r5, r2
    top_address = W25Q_FLASH_ADDR + flash_capacity;
 800391c:	4b19      	ldr	r3, [pc, #100]	@ (8003984 <w25qFlashDriverWrite+0x78>)
 800391e:	681b      	ldr	r3, [r3, #0]
    if (address >= top_address) {
 8003920:	4283      	cmp	r3, r0
 8003922:	d927      	bls.n	8003974 <w25qFlashDriverWrite+0x68>
    if (data == NULL || address + length > top_address) {
 8003924:	b341      	cbz	r1, 8003978 <w25qFlashDriverWrite+0x6c>
 8003926:	1882      	adds	r2, r0, r2
 8003928:	429a      	cmp	r2, r3
 800392a:	d827      	bhi.n	800397c <w25qFlashDriverWrite+0x70>
    STM32_LOGD(TAG, "Write process: 0x%lX (%lu bytes)", address, length);
 800392c:	f001 fd4c 	bl	80053c8 <stm32_log_timestamp>
 8003930:	4603      	mov	r3, r0
 8003932:	4915      	ldr	r1, [pc, #84]	@ (8003988 <w25qFlashDriverWrite+0x7c>)
 8003934:	9502      	str	r5, [sp, #8]
 8003936:	9401      	str	r4, [sp, #4]
 8003938:	9100      	str	r1, [sp, #0]
 800393a:	4a14      	ldr	r2, [pc, #80]	@ (800398c <w25qFlashDriverWrite+0x80>)
 800393c:	2004      	movs	r0, #4
 800393e:	f001 fd47 	bl	80053d0 <stm32_log_write>
    ret = w25q_write(&w25q_handle, address, data, length);
 8003942:	462b      	mov	r3, r5
 8003944:	4632      	mov	r2, r6
 8003946:	4621      	mov	r1, r4
 8003948:	4811      	ldr	r0, [pc, #68]	@ (8003990 <w25qFlashDriverWrite+0x84>)
 800394a:	f002 f833 	bl	80059b4 <w25q_write>
    if (ret != W25Q_OK) {
 800394e:	4604      	mov	r4, r0
 8003950:	b910      	cbnz	r0, 8003958 <w25qFlashDriverWrite+0x4c>
    return NO_ERROR;
 8003952:	2000      	movs	r0, #0
}
 8003954:	b004      	add	sp, #16
 8003956:	bd70      	pop	{r4, r5, r6, pc}
        STM32_LOGE(TAG, "Failed to write flash: %d", ret);
 8003958:	f001 fd36 	bl	80053c8 <stm32_log_timestamp>
 800395c:	4603      	mov	r3, r0
 800395e:	490a      	ldr	r1, [pc, #40]	@ (8003988 <w25qFlashDriverWrite+0x7c>)
 8003960:	9401      	str	r4, [sp, #4]
 8003962:	9100      	str	r1, [sp, #0]
 8003964:	4a0b      	ldr	r2, [pc, #44]	@ (8003994 <w25qFlashDriverWrite+0x88>)
 8003966:	2001      	movs	r0, #1
 8003968:	f001 fd32 	bl	80053d0 <stm32_log_write>
        return ERROR_FAILURE;
 800396c:	2001      	movs	r0, #1
 800396e:	e7f1      	b.n	8003954 <w25qFlashDriverWrite+0x48>
        return ERROR_FAILURE;
 8003970:	2001      	movs	r0, #1
}
 8003972:	4770      	bx	lr
        return ERROR_INVALID_PARAMETER;
 8003974:	2002      	movs	r0, #2
 8003976:	e7ed      	b.n	8003954 <w25qFlashDriverWrite+0x48>
        return ERROR_INVALID_PARAMETER;
 8003978:	2002      	movs	r0, #2
 800397a:	e7eb      	b.n	8003954 <w25qFlashDriverWrite+0x48>
 800397c:	2002      	movs	r0, #2
 800397e:	e7e9      	b.n	8003954 <w25qFlashDriverWrite+0x48>
 8003980:	20000324 	.word	0x20000324
 8003984:	20000320 	.word	0x20000320
 8003988:	08006f0c 	.word	0x08006f0c
 800398c:	08007034 	.word	0x08007034
 8003990:	2000034c 	.word	0x2000034c
 8003994:	08007064 	.word	0x08007064

08003998 <w25qFlashDriverGetStatus>:
    if (!driver_initialized) {
 8003998:	4b15      	ldr	r3, [pc, #84]	@ (80039f0 <w25qFlashDriverGetStatus+0x58>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	b31b      	cbz	r3, 80039e6 <w25qFlashDriverGetStatus+0x4e>
{
 800399e:	b530      	push	{r4, r5, lr}
 80039a0:	b085      	sub	sp, #20
 80039a2:	4604      	mov	r4, r0
    if (status == NULL) {
 80039a4:	b308      	cbz	r0, 80039ea <w25qFlashDriverGetStatus+0x52>
    ret = w25q_read_status(&w25q_handle, &sr);
 80039a6:	f10d 010f 	add.w	r1, sp, #15
 80039aa:	4812      	ldr	r0, [pc, #72]	@ (80039f4 <w25qFlashDriverGetStatus+0x5c>)
 80039ac:	f001 fe89 	bl	80056c2 <w25q_read_status>
    if (ret != W25Q_OK) {
 80039b0:	4605      	mov	r5, r0
 80039b2:	b948      	cbnz	r0, 80039c8 <w25qFlashDriverGetStatus+0x30>
    if (sr & 0x01) {  // BUSY bit
 80039b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80039b8:	f013 0f01 	tst.w	r3, #1
 80039bc:	d010      	beq.n	80039e0 <w25qFlashDriverGetStatus+0x48>
        *status = FLASH_STATUS_BUSY;
 80039be:	2301      	movs	r3, #1
 80039c0:	7023      	strb	r3, [r4, #0]
    return NO_ERROR;
 80039c2:	2000      	movs	r0, #0
}
 80039c4:	b005      	add	sp, #20
 80039c6:	bd30      	pop	{r4, r5, pc}
        STM32_LOGE(TAG, "Failed to read status register: %d", ret);
 80039c8:	f001 fcfe 	bl	80053c8 <stm32_log_timestamp>
 80039cc:	4603      	mov	r3, r0
 80039ce:	490a      	ldr	r1, [pc, #40]	@ (80039f8 <w25qFlashDriverGetStatus+0x60>)
 80039d0:	9501      	str	r5, [sp, #4]
 80039d2:	9100      	str	r1, [sp, #0]
 80039d4:	4a09      	ldr	r2, [pc, #36]	@ (80039fc <w25qFlashDriverGetStatus+0x64>)
 80039d6:	2001      	movs	r0, #1
 80039d8:	f001 fcfa 	bl	80053d0 <stm32_log_write>
        return ERROR_FAILURE;
 80039dc:	2001      	movs	r0, #1
 80039de:	e7f1      	b.n	80039c4 <w25qFlashDriverGetStatus+0x2c>
        *status = FLASH_STATUS_OK;
 80039e0:	2000      	movs	r0, #0
 80039e2:	7020      	strb	r0, [r4, #0]
 80039e4:	e7ee      	b.n	80039c4 <w25qFlashDriverGetStatus+0x2c>
        return ERROR_FAILURE;
 80039e6:	2001      	movs	r0, #1
}
 80039e8:	4770      	bx	lr
        return ERROR_INVALID_PARAMETER;
 80039ea:	2002      	movs	r0, #2
 80039ec:	e7ea      	b.n	80039c4 <w25qFlashDriverGetStatus+0x2c>
 80039ee:	bf00      	nop
 80039f0:	20000324 	.word	0x20000324
 80039f4:	2000034c 	.word	0x2000034c
 80039f8:	08006f0c 	.word	0x08006f0c
 80039fc:	0800708c 	.word	0x0800708c

08003a00 <w25qFlashDriverDeInit>:
    if (!driver_initialized) {
 8003a00:	4b13      	ldr	r3, [pc, #76]	@ (8003a50 <w25qFlashDriverDeInit+0x50>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	b90b      	cbnz	r3, 8003a0a <w25qFlashDriverDeInit+0xa>
        return NO_ERROR;
 8003a06:	2000      	movs	r0, #0
}
 8003a08:	4770      	bx	lr
{
 8003a0a:	b510      	push	{r4, lr}
 8003a0c:	b082      	sub	sp, #8
    w25q_err_t ret = w25q_deinit(&w25q_handle);
 8003a0e:	4811      	ldr	r0, [pc, #68]	@ (8003a54 <w25qFlashDriverDeInit+0x54>)
 8003a10:	f002 f853 	bl	8005aba <w25q_deinit>
    if (ret != W25Q_OK) {
 8003a14:	4604      	mov	r4, r0
 8003a16:	b970      	cbnz	r0, 8003a36 <w25qFlashDriverDeInit+0x36>
    driver_initialized = false;
 8003a18:	2400      	movs	r4, #0
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a50 <w25qFlashDriverDeInit+0x50>)
 8003a1c:	701c      	strb	r4, [r3, #0]
    STM32_LOGI(TAG, "W25Q flash deinitialized");
 8003a1e:	f001 fcd3 	bl	80053c8 <stm32_log_timestamp>
 8003a22:	4603      	mov	r3, r0
 8003a24:	490c      	ldr	r1, [pc, #48]	@ (8003a58 <w25qFlashDriverDeInit+0x58>)
 8003a26:	9100      	str	r1, [sp, #0]
 8003a28:	4a0c      	ldr	r2, [pc, #48]	@ (8003a5c <w25qFlashDriverDeInit+0x5c>)
 8003a2a:	2003      	movs	r0, #3
 8003a2c:	f001 fcd0 	bl	80053d0 <stm32_log_write>
    return NO_ERROR;
 8003a30:	4620      	mov	r0, r4
}
 8003a32:	b002      	add	sp, #8
 8003a34:	bd10      	pop	{r4, pc}
        STM32_LOGE(TAG, "Failed to deinitialize W25Q flash: %d", ret);
 8003a36:	f001 fcc7 	bl	80053c8 <stm32_log_timestamp>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4906      	ldr	r1, [pc, #24]	@ (8003a58 <w25qFlashDriverDeInit+0x58>)
 8003a3e:	9401      	str	r4, [sp, #4]
 8003a40:	9100      	str	r1, [sp, #0]
 8003a42:	4a07      	ldr	r2, [pc, #28]	@ (8003a60 <w25qFlashDriverDeInit+0x60>)
 8003a44:	2001      	movs	r0, #1
 8003a46:	f001 fcc3 	bl	80053d0 <stm32_log_write>
        return ERROR_FAILURE;
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	e7f1      	b.n	8003a32 <w25qFlashDriverDeInit+0x32>
 8003a4e:	bf00      	nop
 8003a50:	20000324 	.word	0x20000324
 8003a54:	2000034c 	.word	0x2000034c
 8003a58:	08006f0c 	.word	0x08006f0c
 8003a5c:	080070f0 	.word	0x080070f0
 8003a60:	080070bc 	.word	0x080070bc

08003a64 <w25qFlashDriverInit>:
{
 8003a64:	b510      	push	{r4, lr}
 8003a66:	b08c      	sub	sp, #48	@ 0x30
    STM32_LOGI(TAG, "Initializing W25Q flash memory...");
 8003a68:	f001 fcae 	bl	80053c8 <stm32_log_timestamp>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	4938      	ldr	r1, [pc, #224]	@ (8003b50 <w25qFlashDriverInit+0xec>)
 8003a70:	9100      	str	r1, [sp, #0]
 8003a72:	4a38      	ldr	r2, [pc, #224]	@ (8003b54 <w25qFlashDriverInit+0xf0>)
 8003a74:	2003      	movs	r0, #3
 8003a76:	f001 fcab 	bl	80053d0 <stm32_log_write>
    if (driver_config.hw_callbacks.spi_write_read == NULL) {
 8003a7a:	4b37      	ldr	r3, [pc, #220]	@ (8003b58 <w25qFlashDriverInit+0xf4>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d02f      	beq.n	8003ae2 <w25qFlashDriverInit+0x7e>
    config.hw = &driver_config.hw_callbacks;
 8003a82:	4b35      	ldr	r3, [pc, #212]	@ (8003b58 <w25qFlashDriverInit+0xf4>)
 8003a84:	9308      	str	r3, [sp, #32]
    config.user_ctx = driver_config.user_ctx;
 8003a86:	699a      	ldr	r2, [r3, #24]
 8003a88:	9209      	str	r2, [sp, #36]	@ 0x24
    config.timeout_ms = driver_config.timeout_ms;
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	920a      	str	r2, [sp, #40]	@ 0x28
    config.software_cs = driver_config.software_cs;
 8003a8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a92:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    ret = w25q_init(&w25q_handle, &config);
 8003a96:	a908      	add	r1, sp, #32
 8003a98:	4830      	ldr	r0, [pc, #192]	@ (8003b5c <w25qFlashDriverInit+0xf8>)
 8003a9a:	f002 f836 	bl	8005b0a <w25q_init>
    if (ret != W25Q_OK) {
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d13d      	bne.n	8003b20 <w25qFlashDriverInit+0xbc>
    ret = w25q_get_info(&w25q_handle, &info);
 8003aa4:	a904      	add	r1, sp, #16
 8003aa6:	482d      	ldr	r0, [pc, #180]	@ (8003b5c <w25qFlashDriverInit+0xf8>)
 8003aa8:	f001 fd9b 	bl	80055e2 <w25q_get_info>
    if (ret != W25Q_OK) {
 8003aac:	4604      	mov	r4, r0
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d142      	bne.n	8003b38 <w25qFlashDriverInit+0xd4>
    w25qFlashDriverInfo.flashSize = info.capacity_bytes;
 8003ab2:	9b04      	ldr	r3, [sp, #16]
 8003ab4:	4a2a      	ldr	r2, [pc, #168]	@ (8003b60 <w25qFlashDriverInit+0xfc>)
 8003ab6:	6113      	str	r3, [r2, #16]
    flash_capacity = info.capacity_bytes;
 8003ab8:	4a2a      	ldr	r2, [pc, #168]	@ (8003b64 <w25qFlashDriverInit+0x100>)
 8003aba:	6013      	str	r3, [r2, #0]
    STM32_LOGI(TAG, "W25Q flash initialized: %s, Capacity: %lu bytes",
 8003abc:	f001 fc84 	bl	80053c8 <stm32_log_timestamp>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4923      	ldr	r1, [pc, #140]	@ (8003b50 <w25qFlashDriverInit+0xec>)
 8003ac4:	9a04      	ldr	r2, [sp, #16]
 8003ac6:	9202      	str	r2, [sp, #8]
 8003ac8:	4a27      	ldr	r2, [pc, #156]	@ (8003b68 <w25qFlashDriverInit+0x104>)
 8003aca:	9201      	str	r2, [sp, #4]
 8003acc:	9100      	str	r1, [sp, #0]
 8003ace:	4a27      	ldr	r2, [pc, #156]	@ (8003b6c <w25qFlashDriverInit+0x108>)
 8003ad0:	2003      	movs	r0, #3
 8003ad2:	f001 fc7d 	bl	80053d0 <stm32_log_write>
    driver_initialized = true;
 8003ad6:	4b26      	ldr	r3, [pc, #152]	@ (8003b70 <w25qFlashDriverInit+0x10c>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8003adc:	2000      	movs	r0, #0
}
 8003ade:	b00c      	add	sp, #48	@ 0x30
 8003ae0:	bd10      	pop	{r4, pc}
        driver_config.hw_callbacks.spi_init = default_spi_init;
 8003ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b58 <w25qFlashDriverInit+0xf4>)
 8003ae4:	4a23      	ldr	r2, [pc, #140]	@ (8003b74 <w25qFlashDriverInit+0x110>)
 8003ae6:	601a      	str	r2, [r3, #0]
        driver_config.hw_callbacks.spi_write_read = default_spi_write_read;
 8003ae8:	4a23      	ldr	r2, [pc, #140]	@ (8003b78 <w25qFlashDriverInit+0x114>)
 8003aea:	605a      	str	r2, [r3, #4]
        driver_config.hw_callbacks.cs_control = default_cs_control;
 8003aec:	4a23      	ldr	r2, [pc, #140]	@ (8003b7c <w25qFlashDriverInit+0x118>)
 8003aee:	609a      	str	r2, [r3, #8]
        driver_config.hw_callbacks.delay_ms = default_delay_ms;
 8003af0:	4a23      	ldr	r2, [pc, #140]	@ (8003b80 <w25qFlashDriverInit+0x11c>)
 8003af2:	60da      	str	r2, [r3, #12]
        driver_config.hw_callbacks.lock = default_lock;
 8003af4:	4a23      	ldr	r2, [pc, #140]	@ (8003b84 <w25qFlashDriverInit+0x120>)
 8003af6:	611a      	str	r2, [r3, #16]
        driver_config.hw_callbacks.unlock = default_unlock;
 8003af8:	4a23      	ldr	r2, [pc, #140]	@ (8003b88 <w25qFlashDriverInit+0x124>)
 8003afa:	615a      	str	r2, [r3, #20]
        driver_config.user_ctx = NULL;
 8003afc:	2200      	movs	r2, #0
 8003afe:	619a      	str	r2, [r3, #24]
        driver_config.timeout_ms = 5000;
 8003b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b04:	61da      	str	r2, [r3, #28]
        driver_config.software_cs = true;
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2020 	strb.w	r2, [r3, #32]
        STM32_LOGW(TAG, "Using default callbacks - configure with w25qFlashSetConfig()");
 8003b0c:	f001 fc5c 	bl	80053c8 <stm32_log_timestamp>
 8003b10:	4603      	mov	r3, r0
 8003b12:	490f      	ldr	r1, [pc, #60]	@ (8003b50 <w25qFlashDriverInit+0xec>)
 8003b14:	9100      	str	r1, [sp, #0]
 8003b16:	4a1d      	ldr	r2, [pc, #116]	@ (8003b8c <w25qFlashDriverInit+0x128>)
 8003b18:	2002      	movs	r0, #2
 8003b1a:	f001 fc59 	bl	80053d0 <stm32_log_write>
 8003b1e:	e7b0      	b.n	8003a82 <w25qFlashDriverInit+0x1e>
        STM32_LOGE(TAG, "Failed to initialize W25Q flash: %d", ret);
 8003b20:	f001 fc52 	bl	80053c8 <stm32_log_timestamp>
 8003b24:	4603      	mov	r3, r0
 8003b26:	490a      	ldr	r1, [pc, #40]	@ (8003b50 <w25qFlashDriverInit+0xec>)
 8003b28:	9401      	str	r4, [sp, #4]
 8003b2a:	9100      	str	r1, [sp, #0]
 8003b2c:	4a18      	ldr	r2, [pc, #96]	@ (8003b90 <w25qFlashDriverInit+0x12c>)
 8003b2e:	2001      	movs	r0, #1
 8003b30:	f001 fc4e 	bl	80053d0 <stm32_log_write>
        return ERROR_FAILURE;
 8003b34:	2001      	movs	r0, #1
 8003b36:	e7d2      	b.n	8003ade <w25qFlashDriverInit+0x7a>
        STM32_LOGE(TAG, "Failed to get W25Q info: %d", ret);
 8003b38:	f001 fc46 	bl	80053c8 <stm32_log_timestamp>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	4904      	ldr	r1, [pc, #16]	@ (8003b50 <w25qFlashDriverInit+0xec>)
 8003b40:	9401      	str	r4, [sp, #4]
 8003b42:	9100      	str	r1, [sp, #0]
 8003b44:	4a13      	ldr	r2, [pc, #76]	@ (8003b94 <w25qFlashDriverInit+0x130>)
 8003b46:	2001      	movs	r0, #1
 8003b48:	f001 fc42 	bl	80053d0 <stm32_log_write>
        return ERROR_FAILURE;
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	e7c6      	b.n	8003ade <w25qFlashDriverInit+0x7a>
 8003b50:	08006f0c 	.word	0x08006f0c
 8003b54:	08007118 	.word	0x08007118
 8003b58:	20000328 	.word	0x20000328
 8003b5c:	2000034c 	.word	0x2000034c
 8003b60:	2000002c 	.word	0x2000002c
 8003b64:	20000320 	.word	0x20000320
 8003b68:	08007234 	.word	0x08007234
 8003b6c:	080071f4 	.word	0x080071f4
 8003b70:	20000324 	.word	0x20000324
 8003b74:	0800379d 	.word	0x0800379d
 8003b78:	08003775 	.word	0x08003775
 8003b7c:	08003747 	.word	0x08003747
 8003b80:	08003b99 	.word	0x08003b99
 8003b84:	08003749 	.word	0x08003749
 8003b88:	0800374b 	.word	0x0800374b
 8003b8c:	08007148 	.word	0x08007148
 8003b90:	08007194 	.word	0x08007194
 8003b94:	080071c8 	.word	0x080071c8

08003b98 <default_delay_ms>:
{
 8003b98:	b508      	push	{r3, lr}
	osDelayTask(ms);
 8003b9a:	f7ff fa2a 	bl	8002ff2 <osDelayTask>
}
 8003b9e:	bd08      	pop	{r3, pc}

08003ba0 <w25qFlashSetConfig>:
    if (config != NULL) {
 8003ba0:	b1c8      	cbz	r0, 8003bd6 <w25qFlashSetConfig+0x36>
{
 8003ba2:	b530      	push	{r4, r5, lr}
        memcpy(&driver_config, config, sizeof(w25q_driver_config_t));
 8003ba4:	4684      	mov	ip, r0
 8003ba6:	4c0c      	ldr	r4, [pc, #48]	@ (8003bd8 <w25qFlashSetConfig+0x38>)
 8003ba8:	f100 0520 	add.w	r5, r0, #32
 8003bac:	46a6      	mov	lr, r4
 8003bae:	f8dc 0000 	ldr.w	r0, [ip]
 8003bb2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8003bb6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8003bba:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8003bbe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003bc2:	f10c 0c10 	add.w	ip, ip, #16
 8003bc6:	4674      	mov	r4, lr
 8003bc8:	45ac      	cmp	ip, r5
 8003bca:	d1ef      	bne.n	8003bac <w25qFlashSetConfig+0xc>
 8003bcc:	f8dc 0000 	ldr.w	r0, [ip]
 8003bd0:	f8ce 0000 	str.w	r0, [lr]
}
 8003bd4:	bd30      	pop	{r4, r5, pc}
 8003bd6:	4770      	bx	lr
 8003bd8:	20000328 	.word	0x20000328

08003bdc <stm32f4xxFlashDriverDeInit>:
 **/

error_t stm32f4xxFlashDriverDeInit(void)
{
   return ERROR_NOT_IMPLEMENTED;
}
 8003bdc:	2067      	movs	r0, #103	@ 0x67
 8003bde:	4770      	bx	lr

08003be0 <stm32f4xxFlashDriverGetInfo>:
 **/

error_t stm32f4xxFlashDriverGetInfo(const FlashInfo **info)
{
   //Set Memory information pointeur
   *info = (const FlashInfo*) &stm32f4xxFlashDriverInfo;
 8003be0:	4b01      	ldr	r3, [pc, #4]	@ (8003be8 <stm32f4xxFlashDriverGetInfo+0x8>)
 8003be2:	6003      	str	r3, [r0, #0]

   //Successfull process
   return NO_ERROR;
}
 8003be4:	2000      	movs	r0, #0
 8003be6:	4770      	bx	lr
 8003be8:	080078c4 	.word	0x080078c4

08003bec <stm32f4xxFlashDriverGetStatus>:
error_t stm32f4xxFlashDriverGetStatus(FlashStatus *status)
{
   uint32_t flag;

   //Check parameter vailidity
   if(status == NULL)
 8003bec:	4603      	mov	r3, r0
 8003bee:	b1a0      	cbz	r0, 8003c1a <stm32f4xxFlashDriverGetStatus+0x2e>
      return ERROR_INVALID_PARAMETER;

   do
   {
      //Get Flash Memory error flags status
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR |
 8003bf0:	4a0b      	ldr	r2, [pc, #44]	@ (8003c20 <stm32f4xxFlashDriverGetStatus+0x34>)
 8003bf2:	68d2      	ldr	r2, [r2, #12]
                        FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
                        FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

      //Is any error flag set?
      if(flag != RESET)
 8003bf4:	f012 0ff2 	tst.w	r2, #242	@ 0xf2
 8003bf8:	d003      	beq.n	8003c02 <stm32f4xxFlashDriverGetStatus+0x16>
      {
         //Set Flash memory status
         *status = FLASH_STATUS_ERR;
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	7002      	strb	r2, [r0, #0]
      //Set Flash memory status
      *status = FLASH_STATUS_OK;
   }while(0);

   //Successfull process
   return NO_ERROR;
 8003bfe:	2000      	movs	r0, #0
         break;
 8003c00:	4770      	bx	lr
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY);
 8003c02:	4a07      	ldr	r2, [pc, #28]	@ (8003c20 <stm32f4xxFlashDriverGetStatus+0x34>)
 8003c04:	68d2      	ldr	r2, [r2, #12]
      if(flag != RESET)
 8003c06:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8003c0a:	d003      	beq.n	8003c14 <stm32f4xxFlashDriverGetStatus+0x28>
         *status = FLASH_STATUS_BUSY;
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	7002      	strb	r2, [r0, #0]
   return NO_ERROR;
 8003c10:	2000      	movs	r0, #0
         break;
 8003c12:	4770      	bx	lr
      *status = FLASH_STATUS_OK;
 8003c14:	2000      	movs	r0, #0
 8003c16:	7018      	strb	r0, [r3, #0]
 8003c18:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8003c1a:	2002      	movs	r0, #2
}
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40023c00 	.word	0x40023c00

08003c24 <stm32f4xxFlashDriverRead>:

   //Precompute the top address
   topAddress = STM32F4xx_ADDR + STM32F4xx_SIZE;

   //Check address validity
   if(address < STM32F4xx_ADDR || address >= topAddress)
 8003c24:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 8003c28:	d312      	bcc.n	8003c50 <stm32f4xxFlashDriverRead+0x2c>
 8003c2a:	f1b0 6f01 	cmp.w	r0, #135266304	@ 0x8100000
 8003c2e:	d211      	bcs.n	8003c54 <stm32f4xxFlashDriverRead+0x30>
      return ERROR_INVALID_PARAMETER;

#ifndef FLASH_DB_MODE
   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 8003c30:	b191      	cbz	r1, 8003c58 <stm32f4xxFlashDriverRead+0x34>
 8003c32:	1883      	adds	r3, r0, r2
 8003c34:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8003c38:	d810      	bhi.n	8003c5c <stm32f4xxFlashDriverRead+0x38>
      (address >= STM32F4xx_BANK_2_ADDR && address + length <= topAddress)))
      return ERROR_INVALID_PARAMETER;
#endif

   //Perform read operation
   for(i = 0; i < length; i++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	e004      	b.n	8003c48 <stm32f4xxFlashDriverRead+0x24>
   {
      *((uint8_t *)data + i) = *(uint8_t*)address;
 8003c3e:	f810 cb01 	ldrb.w	ip, [r0], #1
 8003c42:	f801 c003 	strb.w	ip, [r1, r3]
   for(i = 0; i < length; i++)
 8003c46:	3301      	adds	r3, #1
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d3f8      	bcc.n	8003c3e <stm32f4xxFlashDriverRead+0x1a>
      address++;
   }

   //Successfull process
   return NO_ERROR;
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8003c50:	2002      	movs	r0, #2
 8003c52:	4770      	bx	lr
 8003c54:	2002      	movs	r0, #2
 8003c56:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8003c58:	2002      	movs	r0, #2
 8003c5a:	4770      	bx	lr
 8003c5c:	2002      	movs	r0, #2
}
 8003c5e:	4770      	bx	lr

08003c60 <stm32f4xxFlashDriverGetNextSector>:

   lastSectorAddr = sectorsList[SECTORS_LIST_LEN-1].addr +
      (sectorsList[SECTORS_LIST_LEN-1].size * (sectorsList[SECTORS_LIST_LEN-1].nb - 1));

   //Check parameters validity
   if(address < STM32F4xx_ADDR || address > lastSectorAddr || sectorAddr == NULL)
 8003c60:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 8003c64:	d329      	bcc.n	8003cba <stm32f4xxFlashDriverGetNextSector+0x5a>
 8003c66:	4b18      	ldr	r3, [pc, #96]	@ (8003cc8 <stm32f4xxFlashDriverGetNextSector+0x68>)
 8003c68:	4298      	cmp	r0, r3
 8003c6a:	d828      	bhi.n	8003cbe <stm32f4xxFlashDriverGetNextSector+0x5e>
 8003c6c:	b349      	cbz	r1, 8003cc2 <stm32f4xxFlashDriverGetNextSector+0x62>
{
 8003c6e:	b4f0      	push	{r4, r5, r6, r7}
   uint32_t sAddr = 0xFFFFFFFF;
 8003c70:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
      return ERROR_INVALID_PARAMETER;

   //Loop through sectors list
   for(i = 0; i < SECTORS_LIST_LEN && sAddr == 0xFFFFFFFF; i++)
 8003c74:	2200      	movs	r2, #0
 8003c76:	e001      	b.n	8003c7c <stm32f4xxFlashDriverGetNextSector+0x1c>
         {
            //Is address located in current sector?
            if(address <= sg->addr + j*sg->size)
            {
               //Set next sector address
               sAddr = sg->addr + j*sg->size;
 8003c78:	4667      	mov	r7, ip
   for(i = 0; i < SECTORS_LIST_LEN && sAddr == 0xFFFFFFFF; i++)
 8003c7a:	3201      	adds	r2, #1
 8003c7c:	2a02      	cmp	r2, #2
 8003c7e:	d818      	bhi.n	8003cb2 <stm32f4xxFlashDriverGetNextSector+0x52>
 8003c80:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 8003c84:	d115      	bne.n	8003cb2 <stm32f4xxFlashDriverGetNextSector+0x52>
      if(address <= sg->addr + sg->size*sg->nb)
 8003c86:	4c11      	ldr	r4, [pc, #68]	@ (8003ccc <stm32f4xxFlashDriverGetNextSector+0x6c>)
 8003c88:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8003c8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003c90:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8003c94:	685e      	ldr	r6, [r3, #4]
 8003c96:	689c      	ldr	r4, [r3, #8]
 8003c98:	fb04 5306 	mla	r3, r4, r6, r5
 8003c9c:	4283      	cmp	r3, r0
 8003c9e:	d3ec      	bcc.n	8003c7a <stm32f4xxFlashDriverGetNextSector+0x1a>
         for(j = 0; j < sg->nb; j++)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	429c      	cmp	r4, r3
 8003ca4:	d9e9      	bls.n	8003c7a <stm32f4xxFlashDriverGetNextSector+0x1a>
            if(address <= sg->addr + j*sg->size)
 8003ca6:	fb03 5c06 	mla	ip, r3, r6, r5
 8003caa:	4584      	cmp	ip, r0
 8003cac:	d2e4      	bcs.n	8003c78 <stm32f4xxFlashDriverGetNextSector+0x18>
         for(j = 0; j < sg->nb; j++)
 8003cae:	3301      	adds	r3, #1
 8003cb0:	e7f7      	b.n	8003ca2 <stm32f4xxFlashDriverGetNextSector+0x42>
         }
      }
   }

   //Save next sector addr
   *sectorAddr = sAddr;
 8003cb2:	600f      	str	r7, [r1, #0]

   //Succesfull process
   return NO_ERROR;
 8003cb4:	2000      	movs	r0, #0
}
 8003cb6:	bcf0      	pop	{r4, r5, r6, r7}
 8003cb8:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8003cba:	2002      	movs	r0, #2
 8003cbc:	4770      	bx	lr
 8003cbe:	2002      	movs	r0, #2
 8003cc0:	4770      	bx	lr
 8003cc2:	2002      	movs	r0, #2
}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	080e0000 	.word	0x080e0000
 8003ccc:	080078f4 	.word	0x080078f4

08003cd0 <stm32f4xxFlashDriverInit>:
{
 8003cd0:	b508      	push	{r3, lr}
   TRACE_INFO("Initializing %s memory...\r\n", STM32F4xx_NAME);
 8003cd2:	f7ff f98f 	bl	8002ff4 <osSuspendAllTasks>
 8003cd6:	4b07      	ldr	r3, [pc, #28]	@ (8003cf4 <stm32f4xxFlashDriverInit+0x24>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a07      	ldr	r2, [pc, #28]	@ (8003cf8 <stm32f4xxFlashDriverInit+0x28>)
 8003cdc:	4907      	ldr	r1, [pc, #28]	@ (8003cfc <stm32f4xxFlashDriverInit+0x2c>)
 8003cde:	68d8      	ldr	r0, [r3, #12]
 8003ce0:	f002 f8e6 	bl	8005eb0 <fiprintf>
 8003ce4:	f7ff f987 	bl	8002ff6 <osResumeAllTasks>
   FLASH_WaitForLastOperation((uint32_t)50000U);
 8003ce8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003cec:	f7fd fe5c 	bl	80019a8 <FLASH_WaitForLastOperation>
}
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	bd08      	pop	{r3, pc}
 8003cf4:	20000068 	.word	0x20000068
 8003cf8:	08007250 	.word	0x08007250
 8003cfc:	0800726c 	.word	0x0800726c

08003d00 <stm32f4xxFlashDriverEraseSector>:
   HAL_StatusTypeDef status;
   FLASH_EraseInitTypeDef EraseInitStruct;
   uint32_t sectorError;

   //Check parameter validity
   if((firstSector >= STM32F4xx_SECTORS_NUMBER) || (nbSectors == 0) ||
 8003d00:	280b      	cmp	r0, #11
 8003d02:	d85e      	bhi.n	8003dc2 <stm32f4xxFlashDriverEraseSector+0xc2>
{
 8003d04:	b570      	push	{r4, r5, r6, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	4604      	mov	r4, r0
 8003d0a:	460d      	mov	r5, r1
   if((firstSector >= STM32F4xx_SECTORS_NUMBER) || (nbSectors == 0) ||
 8003d0c:	2900      	cmp	r1, #0
 8003d0e:	d05a      	beq.n	8003dc6 <stm32f4xxFlashDriverEraseSector+0xc6>
      ((firstSector + nbSectors - 1) >= STM32F4xx_SECTORS_NUMBER))
 8003d10:	1843      	adds	r3, r0, r1
 8003d12:	3b01      	subs	r3, #1
   if((firstSector >= STM32F4xx_SECTORS_NUMBER) || (nbSectors == 0) ||
 8003d14:	2b0b      	cmp	r3, #11
 8003d16:	d858      	bhi.n	8003dca <stm32f4xxFlashDriverEraseSector+0xca>
      return ERROR_INVALID_PARAMETER;

   //Initialize FLASH flags
   //(Patch to fix STM32 HAL library wrong initial flash flags issue)
   FLASH_WaitForLastOperation((uint32_t)50000U);
 8003d18:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003d1c:	f7fd fe44 	bl	80019a8 <FLASH_WaitForLastOperation>

   //Start of exception handling block
   do
   {
      //Allow access to Flash control registers and user False
      status = HAL_FLASH_Unlock();
 8003d20:	f7fd fe20 	bl	8001964 <HAL_FLASH_Unlock>
      //Is any error?
      if (status != HAL_OK)
 8003d24:	4606      	mov	r6, r0
 8003d26:	b180      	cbz	r0, 8003d4a <stm32f4xxFlashDriverEraseSector+0x4a>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 8003d28:	f7ff f964 	bl	8002ff4 <osSuspendAllTasks>
 8003d2c:	4b29      	ldr	r3, [pc, #164]	@ (8003dd4 <stm32f4xxFlashDriverEraseSector+0xd4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	2227      	movs	r2, #39	@ 0x27
 8003d34:	2101      	movs	r1, #1
 8003d36:	4828      	ldr	r0, [pc, #160]	@ (8003dd8 <stm32f4xxFlashDriverEraseSector+0xd8>)
 8003d38:	f002 f936 	bl	8005fa8 <fwrite>
 8003d3c:	f7ff f95b 	bl	8002ff6 <osResumeAllTasks>
         break;
      }
   }while(0);

   //Return status code
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 8003d40:	2e00      	cmp	r6, #0
 8003d42:	d144      	bne.n	8003dce <stm32f4xxFlashDriverEraseSector+0xce>
 8003d44:	2000      	movs	r0, #0
}
 8003d46:	b006      	add	sp, #24
 8003d48:	bd70      	pop	{r4, r5, r6, pc}
      status = FLASH_WaitForLastOperation((uint32_t)50000U);
 8003d4a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003d4e:	f7fd fe2b 	bl	80019a8 <FLASH_WaitForLastOperation>
      if(status != HAL_OK)
 8003d52:	b9e0      	cbnz	r0, 8003d8e <stm32f4xxFlashDriverEraseSector+0x8e>
      EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8003d54:	2302      	movs	r3, #2
 8003d56:	9305      	str	r3, [sp, #20]
      EraseInitStruct.Sector = firstSector;
 8003d58:	9403      	str	r4, [sp, #12]
      EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS; // Erase multiple sectors
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	9301      	str	r3, [sp, #4]
      EraseInitStruct.NbSectors = nbSectors;
 8003d5e:	9504      	str	r5, [sp, #16]
      status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 8003d60:	4669      	mov	r1, sp
 8003d62:	a801      	add	r0, sp, #4
 8003d64:	f7fd fef6 	bl	8001b54 <HAL_FLASHEx_Erase>
      if(status != HAL_OK)
 8003d68:	4606      	mov	r6, r0
 8003d6a:	b9e8      	cbnz	r0, 8003da8 <stm32f4xxFlashDriverEraseSector+0xa8>
      if(HAL_FLASH_Lock() != HAL_OK)
 8003d6c:	f7fd fe12 	bl	8001994 <HAL_FLASH_Lock>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d0e5      	beq.n	8003d40 <stm32f4xxFlashDriverEraseSector+0x40>
         TRACE_ERROR("Flash Control Register lock failed!\r\n");
 8003d74:	f7ff f93e 	bl	8002ff4 <osSuspendAllTasks>
 8003d78:	4b16      	ldr	r3, [pc, #88]	@ (8003dd4 <stm32f4xxFlashDriverEraseSector+0xd4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	2225      	movs	r2, #37	@ 0x25
 8003d80:	2101      	movs	r1, #1
 8003d82:	4816      	ldr	r0, [pc, #88]	@ (8003ddc <stm32f4xxFlashDriverEraseSector+0xdc>)
 8003d84:	f002 f910 	bl	8005fa8 <fwrite>
 8003d88:	f7ff f935 	bl	8002ff6 <osResumeAllTasks>
         break;
 8003d8c:	e7d8      	b.n	8003d40 <stm32f4xxFlashDriverEraseSector+0x40>
         TRACE_ERROR("Initialize FLASH flags...\r\n");
 8003d8e:	f7ff f931 	bl	8002ff4 <osSuspendAllTasks>
 8003d92:	4b10      	ldr	r3, [pc, #64]	@ (8003dd4 <stm32f4xxFlashDriverEraseSector+0xd4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	221b      	movs	r2, #27
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	4810      	ldr	r0, [pc, #64]	@ (8003de0 <stm32f4xxFlashDriverEraseSector+0xe0>)
 8003d9e:	f002 f903 	bl	8005fa8 <fwrite>
 8003da2:	f7ff f928 	bl	8002ff6 <osResumeAllTasks>
 8003da6:	e7d5      	b.n	8003d54 <stm32f4xxFlashDriverEraseSector+0x54>
         TRACE_ERROR("Failed to erase flash sector(s) %ld, error = 0x%08lX!\r\n", firstSector, sectorError);
 8003da8:	f7ff f924 	bl	8002ff4 <osSuspendAllTasks>
 8003dac:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <stm32f4xxFlashDriverEraseSector+0xd4>)
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	9b00      	ldr	r3, [sp, #0]
 8003db2:	4622      	mov	r2, r4
 8003db4:	490b      	ldr	r1, [pc, #44]	@ (8003de4 <stm32f4xxFlashDriverEraseSector+0xe4>)
 8003db6:	68c0      	ldr	r0, [r0, #12]
 8003db8:	f002 f87a 	bl	8005eb0 <fiprintf>
 8003dbc:	f7ff f91b 	bl	8002ff6 <osResumeAllTasks>
 8003dc0:	e7d4      	b.n	8003d6c <stm32f4xxFlashDriverEraseSector+0x6c>
      return ERROR_INVALID_PARAMETER;
 8003dc2:	2002      	movs	r0, #2
}
 8003dc4:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8003dc6:	2002      	movs	r0, #2
 8003dc8:	e7bd      	b.n	8003d46 <stm32f4xxFlashDriverEraseSector+0x46>
 8003dca:	2002      	movs	r0, #2
 8003dcc:	e7bb      	b.n	8003d46 <stm32f4xxFlashDriverEraseSector+0x46>
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 8003dce:	f240 200a 	movw	r0, #522	@ 0x20a
 8003dd2:	e7b8      	b.n	8003d46 <stm32f4xxFlashDriverEraseSector+0x46>
 8003dd4:	20000068 	.word	0x20000068
 8003dd8:	08007288 	.word	0x08007288
 8003ddc:	08007304 	.word	0x08007304
 8003de0:	080072b0 	.word	0x080072b0
 8003de4:	080072cc 	.word	0x080072cc

08003de8 <stm32f4xxFlashGetSector>:
 * @param[in] address Given Flash Memory address
 * @return Sector number or -1
 **/

int_t stm32f4xxFlashGetSector(uint32_t address)
{
 8003de8:	b530      	push	{r4, r5, lr}
 8003dea:	4604      	mov	r4, r0
   SectorsGroup* sGroup;
   int_t tempSector;

   //Initialize sector number
   sector = -1;
   tempSector = 0;
 8003dec:	f04f 0e00 	mov.w	lr, #0

   //Loop through flash sector group list
   for(i = 0; i < SECTORS_LIST_LEN; i++)
 8003df0:	4673      	mov	r3, lr
   sector = -1;
 8003df2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   for(i = 0; i < SECTORS_LIST_LEN; i++)
 8003df6:	e01a      	b.n	8003e2e <stm32f4xxFlashGetSector+0x46>
      for(j = 0; j < sGroup->nb; j++)
      {
         //Is current sector address matches given address?
         if(sGroup->addr + sGroup->size*j == address)
         {
            sector = tempSector;
 8003df8:	4670      	mov	r0, lr
      for(j = 0; j < sGroup->nb; j++)
 8003dfa:	f10c 0c01 	add.w	ip, ip, #1
 8003dfe:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003e02:	4a0e      	ldr	r2, [pc, #56]	@ (8003e3c <stm32f4xxFlashGetSector+0x54>)
 8003e04:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003e08:	6892      	ldr	r2, [r2, #8]
 8003e0a:	4562      	cmp	r2, ip
 8003e0c:	d90e      	bls.n	8003e2c <stm32f4xxFlashGetSector+0x44>
         if(sGroup->addr + sGroup->size*j == address)
 8003e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8003e3c <stm32f4xxFlashGetSector+0x54>)
 8003e10:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003e14:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8003e18:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003e1c:	6869      	ldr	r1, [r5, #4]
 8003e1e:	fb0c 2201 	mla	r2, ip, r1, r2
 8003e22:	42a2      	cmp	r2, r4
 8003e24:	d0e8      	beq.n	8003df8 <stm32f4xxFlashGetSector+0x10>
         }
         else
         {
            tempSector++;
 8003e26:	f10e 0e01 	add.w	lr, lr, #1
 8003e2a:	e7e6      	b.n	8003dfa <stm32f4xxFlashGetSector+0x12>
   for(i = 0; i < SECTORS_LIST_LEN; i++)
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d802      	bhi.n	8003e38 <stm32f4xxFlashGetSector+0x50>
      for(j = 0; j < sGroup->nb; j++)
 8003e32:	f04f 0c00 	mov.w	ip, #0
 8003e36:	e7e2      	b.n	8003dfe <stm32f4xxFlashGetSector+0x16>
         }
      }
   }

   return sector;
}
 8003e38:	bd30      	pop	{r4, r5, pc}
 8003e3a:	bf00      	nop
 8003e3c:	080078f4 	.word	0x080078f4

08003e40 <stm32f4xxFlashDriverErase>:
   if((address < STM32F4xx_ADDR || address >= topAddress) ||
 8003e40:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 8003e44:	d325      	bcc.n	8003e92 <stm32f4xxFlashDriverErase+0x52>
 8003e46:	f1b0 6f01 	cmp.w	r0, #135266304	@ 0x8100000
 8003e4a:	d224      	bcs.n	8003e96 <stm32f4xxFlashDriverErase+0x56>
 8003e4c:	f010 0f03 	tst.w	r0, #3
 8003e50:	d123      	bne.n	8003e9a <stm32f4xxFlashDriverErase+0x5a>
   if((length == 0) || (address + length > topAddress))
 8003e52:	b321      	cbz	r1, 8003e9e <stm32f4xxFlashDriverErase+0x5e>
{
 8003e54:	b530      	push	{r4, r5, lr}
 8003e56:	b083      	sub	sp, #12
   if((length == 0) || (address + length > topAddress))
 8003e58:	1844      	adds	r4, r0, r1
 8003e5a:	f1b4 6f01 	cmp.w	r4, #135266304	@ 0x8100000
 8003e5e:	d820      	bhi.n	8003ea2 <stm32f4xxFlashDriverErase+0x62>
   firstSectorNumber = stm32f4xxFlashGetSector(address);
 8003e60:	f7ff ffc2 	bl	8003de8 <stm32f4xxFlashGetSector>
 8003e64:	4605      	mov	r5, r0
   if(firstSectorNumber == -1)
 8003e66:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8003e6a:	d01c      	beq.n	8003ea6 <stm32f4xxFlashDriverErase+0x66>
   if(address + length == STM32F4xx_ADDR + STM32F4xx_SIZE)
 8003e6c:	f1b4 6f01 	cmp.w	r4, #135266304	@ 0x8100000
 8003e70:	d008      	beq.n	8003e84 <stm32f4xxFlashDriverErase+0x44>
      error = stm32f4xxFlashDriverGetNextSector(address+length, &lastSectorAddr);
 8003e72:	a901      	add	r1, sp, #4
 8003e74:	4620      	mov	r0, r4
 8003e76:	f7ff fef3 	bl	8003c60 <stm32f4xxFlashDriverGetNextSector>
      if(error)
 8003e7a:	b940      	cbnz	r0, 8003e8e <stm32f4xxFlashDriverErase+0x4e>
      lastSectorNumber = stm32f4xxFlashGetSector(lastSectorAddr);
 8003e7c:	9801      	ldr	r0, [sp, #4]
 8003e7e:	f7ff ffb3 	bl	8003de8 <stm32f4xxFlashGetSector>
 8003e82:	e000      	b.n	8003e86 <stm32f4xxFlashDriverErase+0x46>
      lastSectorNumber = STM32F4xx_SECTORS_NUMBER;
 8003e84:	200c      	movs	r0, #12
   error = stm32f4xxFlashDriverEraseSector(firstSectorNumber, lastSectorNumber-firstSectorNumber);
 8003e86:	1b41      	subs	r1, r0, r5
 8003e88:	4628      	mov	r0, r5
 8003e8a:	f7ff ff39 	bl	8003d00 <stm32f4xxFlashDriverEraseSector>
}
 8003e8e:	b003      	add	sp, #12
 8003e90:	bd30      	pop	{r4, r5, pc}
      return ERROR_INVALID_PARAMETER;
 8003e92:	2002      	movs	r0, #2
 8003e94:	4770      	bx	lr
 8003e96:	2002      	movs	r0, #2
 8003e98:	4770      	bx	lr
 8003e9a:	2002      	movs	r0, #2
 8003e9c:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8003e9e:	2002      	movs	r0, #2
}
 8003ea0:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8003ea2:	2002      	movs	r0, #2
 8003ea4:	e7f3      	b.n	8003e8e <stm32f4xxFlashDriverErase+0x4e>
      return ERROR_INVALID_PARAMETER;
 8003ea6:	2002      	movs	r0, #2
 8003ea8:	e7f1      	b.n	8003e8e <stm32f4xxFlashDriverErase+0x4e>

08003eaa <stm32f4xxFlashDriverIsSectorAddr>:
{
 8003eaa:	b508      	push	{r3, lr}
   sector = stm32f4xxFlashGetSector(address);
 8003eac:	f7ff ff9c 	bl	8003de8 <stm32f4xxFlashGetSector>
   if(sector >= 0)
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	db01      	blt.n	8003eb8 <stm32f4xxFlashDriverIsSectorAddr+0xe>
      return TRUE;
 8003eb4:	2001      	movs	r0, #1
}
 8003eb6:	bd08      	pop	{r3, pc}
      return FALSE;
 8003eb8:	2000      	movs	r0, #0
 8003eba:	e7fc      	b.n	8003eb6 <stm32f4xxFlashDriverIsSectorAddr+0xc>

08003ebc <stm32f4xxFlashDriverWriteWord>:
   if((address + sizeof(uint32_t) >= topAddress) ||
 8003ebc:	1d03      	adds	r3, r0, #4
 8003ebe:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8003ec2:	f080 809b 	bcs.w	8003ffc <stm32f4xxFlashDriverWriteWord+0x140>
{
 8003ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ec8:	b087      	sub	sp, #28
 8003eca:	4604      	mov	r4, r0
 8003ecc:	460d      	mov	r5, r1
   if((address + sizeof(uint32_t) >= topAddress) ||
 8003ece:	f010 0f03 	tst.w	r0, #3
 8003ed2:	f040 8095 	bne.w	8004000 <stm32f4xxFlashDriverWriteWord+0x144>
   FLASH_WaitForLastOperation((uint32_t)50000U);
 8003ed6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003eda:	f7fd fd65 	bl	80019a8 <FLASH_WaitForLastOperation>
   sector = stm32f4xxFlashGetSector(address);
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f7ff ff82 	bl	8003de8 <stm32f4xxFlashGetSector>
   if(sector >= 0)
 8003ee4:	1e06      	subs	r6, r0, #0
 8003ee6:	db11      	blt.n	8003f0c <stm32f4xxFlashDriverWriteWord+0x50>
         status = HAL_FLASH_Unlock();
 8003ee8:	f7fd fd3c 	bl	8001964 <HAL_FLASH_Unlock>
         if (status != HAL_OK)
 8003eec:	4607      	mov	r7, r0
 8003eee:	b310      	cbz	r0, 8003f36 <stm32f4xxFlashDriverWriteWord+0x7a>
            TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 8003ef0:	f7ff f880 	bl	8002ff4 <osSuspendAllTasks>
 8003ef4:	4b47      	ldr	r3, [pc, #284]	@ (8004014 <stm32f4xxFlashDriverWriteWord+0x158>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2227      	movs	r2, #39	@ 0x27
 8003efc:	2101      	movs	r1, #1
 8003efe:	4846      	ldr	r0, [pc, #280]	@ (8004018 <stm32f4xxFlashDriverWriteWord+0x15c>)
 8003f00:	f002 f852 	bl	8005fa8 <fwrite>
 8003f04:	f7ff f877 	bl	8002ff6 <osResumeAllTasks>
   if(status == HAL_OK)
 8003f08:	2f00      	cmp	r7, #0
 8003f0a:	d17c      	bne.n	8004006 <stm32f4xxFlashDriverWriteWord+0x14a>
         status = HAL_FLASH_Unlock();
 8003f0c:	f7fd fd2a 	bl	8001964 <HAL_FLASH_Unlock>
         if (status != HAL_OK)
 8003f10:	4606      	mov	r6, r0
 8003f12:	2800      	cmp	r0, #0
 8003f14:	d04c      	beq.n	8003fb0 <stm32f4xxFlashDriverWriteWord+0xf4>
            TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 8003f16:	f7ff f86d 	bl	8002ff4 <osSuspendAllTasks>
 8003f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8004014 <stm32f4xxFlashDriverWriteWord+0x158>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2227      	movs	r2, #39	@ 0x27
 8003f22:	2101      	movs	r1, #1
 8003f24:	483c      	ldr	r0, [pc, #240]	@ (8004018 <stm32f4xxFlashDriverWriteWord+0x15c>)
 8003f26:	f002 f83f 	bl	8005fa8 <fwrite>
 8003f2a:	f7ff f864 	bl	8002ff6 <osResumeAllTasks>
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 8003f2e:	2e00      	cmp	r6, #0
 8003f30:	d16c      	bne.n	800400c <stm32f4xxFlashDriverWriteWord+0x150>
 8003f32:	2000      	movs	r0, #0
 8003f34:	e065      	b.n	8004002 <stm32f4xxFlashDriverWriteWord+0x146>
         status = FLASH_WaitForLastOperation((uint32_t)50000U);
 8003f36:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003f3a:	f7fd fd35 	bl	80019a8 <FLASH_WaitForLastOperation>
         if(status != HAL_OK)
 8003f3e:	b9e8      	cbnz	r0, 8003f7c <stm32f4xxFlashDriverWriteWord+0xc0>
         EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8003f40:	2300      	movs	r3, #0
 8003f42:	9300      	str	r3, [sp, #0]
         EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8003f44:	2302      	movs	r3, #2
 8003f46:	9304      	str	r3, [sp, #16]
         EraseInitStruct.Sector = sector;
 8003f48:	9602      	str	r6, [sp, #8]
         EraseInitStruct.NbSectors = 1;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	9303      	str	r3, [sp, #12]
         status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 8003f4e:	a905      	add	r1, sp, #20
 8003f50:	4668      	mov	r0, sp
 8003f52:	f7fd fdff 	bl	8001b54 <HAL_FLASHEx_Erase>
         if(status != HAL_OK)
 8003f56:	4607      	mov	r7, r0
 8003f58:	b9e8      	cbnz	r0, 8003f96 <stm32f4xxFlashDriverWriteWord+0xda>
         if(HAL_FLASH_Lock() != HAL_OK)
 8003f5a:	f7fd fd1b 	bl	8001994 <HAL_FLASH_Lock>
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d0d2      	beq.n	8003f08 <stm32f4xxFlashDriverWriteWord+0x4c>
            TRACE_ERROR("Flash Control Register lock failed!\r\n");
 8003f62:	f7ff f847 	bl	8002ff4 <osSuspendAllTasks>
 8003f66:	4b2b      	ldr	r3, [pc, #172]	@ (8004014 <stm32f4xxFlashDriverWriteWord+0x158>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	2225      	movs	r2, #37	@ 0x25
 8003f6e:	2101      	movs	r1, #1
 8003f70:	482a      	ldr	r0, [pc, #168]	@ (800401c <stm32f4xxFlashDriverWriteWord+0x160>)
 8003f72:	f002 f819 	bl	8005fa8 <fwrite>
 8003f76:	f7ff f83e 	bl	8002ff6 <osResumeAllTasks>
 8003f7a:	e7c5      	b.n	8003f08 <stm32f4xxFlashDriverWriteWord+0x4c>
            TRACE_ERROR("Initialize FLASH flags...\r\n");
 8003f7c:	f7ff f83a 	bl	8002ff4 <osSuspendAllTasks>
 8003f80:	4b24      	ldr	r3, [pc, #144]	@ (8004014 <stm32f4xxFlashDriverWriteWord+0x158>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	221b      	movs	r2, #27
 8003f88:	2101      	movs	r1, #1
 8003f8a:	4825      	ldr	r0, [pc, #148]	@ (8004020 <stm32f4xxFlashDriverWriteWord+0x164>)
 8003f8c:	f002 f80c 	bl	8005fa8 <fwrite>
 8003f90:	f7ff f831 	bl	8002ff6 <osResumeAllTasks>
 8003f94:	e7d4      	b.n	8003f40 <stm32f4xxFlashDriverWriteWord+0x84>
            TRACE_ERROR("Failed to erase flash sector %d, error = 0x%08lX!\r\n", sector, sectorError);
 8003f96:	f7ff f82d 	bl	8002ff4 <osSuspendAllTasks>
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004014 <stm32f4xxFlashDriverWriteWord+0x158>)
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	9b05      	ldr	r3, [sp, #20]
 8003fa0:	4632      	mov	r2, r6
 8003fa2:	4920      	ldr	r1, [pc, #128]	@ (8004024 <stm32f4xxFlashDriverWriteWord+0x168>)
 8003fa4:	68c0      	ldr	r0, [r0, #12]
 8003fa6:	f001 ff83 	bl	8005eb0 <fiprintf>
 8003faa:	f7ff f824 	bl	8002ff6 <osResumeAllTasks>
 8003fae:	e7d4      	b.n	8003f5a <stm32f4xxFlashDriverWriteWord+0x9e>
         status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, word);
 8003fb0:	462a      	mov	r2, r5
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	2002      	movs	r0, #2
 8003fb8:	f7fd fd26 	bl	8001a08 <HAL_FLASH_Program>
         if(status != HAL_OK)
 8003fbc:	4606      	mov	r6, r0
 8003fbe:	b980      	cbnz	r0, 8003fe2 <stm32f4xxFlashDriverWriteWord+0x126>
         if(HAL_FLASH_Lock() != HAL_OK)
 8003fc0:	f7fd fce8 	bl	8001994 <HAL_FLASH_Lock>
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d0b2      	beq.n	8003f2e <stm32f4xxFlashDriverWriteWord+0x72>
            TRACE_ERROR("Flash Control Register lock failed!\r\n");
 8003fc8:	f7ff f814 	bl	8002ff4 <osSuspendAllTasks>
 8003fcc:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <stm32f4xxFlashDriverWriteWord+0x158>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	2225      	movs	r2, #37	@ 0x25
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	4811      	ldr	r0, [pc, #68]	@ (800401c <stm32f4xxFlashDriverWriteWord+0x160>)
 8003fd8:	f001 ffe6 	bl	8005fa8 <fwrite>
 8003fdc:	f7ff f80b 	bl	8002ff6 <osResumeAllTasks>
 8003fe0:	e7a5      	b.n	8003f2e <stm32f4xxFlashDriverWriteWord+0x72>
            TRACE_ERROR("Failed to write word \"0x%08lX\" at 0x%08lX!\r\n", word, address);
 8003fe2:	f7ff f807 	bl	8002ff4 <osSuspendAllTasks>
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <stm32f4xxFlashDriverWriteWord+0x158>)
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	4623      	mov	r3, r4
 8003fec:	462a      	mov	r2, r5
 8003fee:	490e      	ldr	r1, [pc, #56]	@ (8004028 <stm32f4xxFlashDriverWriteWord+0x16c>)
 8003ff0:	68c0      	ldr	r0, [r0, #12]
 8003ff2:	f001 ff5d 	bl	8005eb0 <fiprintf>
 8003ff6:	f7fe fffe 	bl	8002ff6 <osResumeAllTasks>
 8003ffa:	e7e1      	b.n	8003fc0 <stm32f4xxFlashDriverWriteWord+0x104>
      return ERROR_INVALID_PARAMETER;
 8003ffc:	2002      	movs	r0, #2
}
 8003ffe:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8004000:	2002      	movs	r0, #2
}
 8004002:	b007      	add	sp, #28
 8004004:	bdf0      	pop	{r4, r5, r6, r7, pc}
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 8004006:	f240 200a 	movw	r0, #522	@ 0x20a
 800400a:	e7fa      	b.n	8004002 <stm32f4xxFlashDriverWriteWord+0x146>
 800400c:	f240 200a 	movw	r0, #522	@ 0x20a
 8004010:	e7f7      	b.n	8004002 <stm32f4xxFlashDriverWriteWord+0x146>
 8004012:	bf00      	nop
 8004014:	20000068 	.word	0x20000068
 8004018:	08007288 	.word	0x08007288
 800401c:	08007304 	.word	0x08007304
 8004020:	080072b0 	.word	0x080072b0
 8004024:	0800732c 	.word	0x0800732c
 8004028:	08007360 	.word	0x08007360

0800402c <stm32f4xxFlashDriverWrite>:
{
 800402c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004030:	b082      	sub	sp, #8
   if((address < STM32F4xx_ADDR || address >= topAddress) ||
 8004032:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 8004036:	d339      	bcc.n	80040ac <stm32f4xxFlashDriverWrite+0x80>
 8004038:	4605      	mov	r5, r0
 800403a:	460f      	mov	r7, r1
 800403c:	4614      	mov	r4, r2
 800403e:	f1b0 6f01 	cmp.w	r0, #135266304	@ 0x8100000
 8004042:	d239      	bcs.n	80040b8 <stm32f4xxFlashDriverWrite+0x8c>
 8004044:	f010 0f03 	tst.w	r0, #3
 8004048:	d139      	bne.n	80040be <stm32f4xxFlashDriverWrite+0x92>
   if(data == NULL || address + length > topAddress)
 800404a:	2900      	cmp	r1, #0
 800404c:	d03a      	beq.n	80040c4 <stm32f4xxFlashDriverWrite+0x98>
 800404e:	1883      	adds	r3, r0, r2
 8004050:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8004054:	d910      	bls.n	8004078 <stm32f4xxFlashDriverWrite+0x4c>
      return ERROR_INVALID_PARAMETER;
 8004056:	f04f 0802 	mov.w	r8, #2
 800405a:	e029      	b.n	80040b0 <stm32f4xxFlashDriverWrite+0x84>
      memcpy(word, p, n);
 800405c:	4632      	mov	r2, r6
 800405e:	4639      	mov	r1, r7
 8004060:	a801      	add	r0, sp, #4
 8004062:	f002 f922 	bl	80062aa <memcpy>
      error = stm32f4xxFlashDriverWriteWord(address, *((uint32_t*)word));
 8004066:	9901      	ldr	r1, [sp, #4]
 8004068:	4628      	mov	r0, r5
 800406a:	f7ff ff27 	bl	8003ebc <stm32f4xxFlashDriverWriteWord>
      if(error)
 800406e:	4680      	mov	r8, r0
 8004070:	b960      	cbnz	r0, 800408c <stm32f4xxFlashDriverWrite+0x60>
      p += n;
 8004072:	4437      	add	r7, r6
      address += n;
 8004074:	4435      	add	r5, r6
      length -= n;
 8004076:	1ba4      	subs	r4, r4, r6
   while(length > 0)
 8004078:	b1ac      	cbz	r4, 80040a6 <stm32f4xxFlashDriverWrite+0x7a>
      n = MIN(sizeof(word), length);
 800407a:	4626      	mov	r6, r4
 800407c:	2c04      	cmp	r4, #4
 800407e:	bf28      	it	cs
 8004080:	2604      	movcs	r6, #4
      if(n < sizeof(uint32_t))
 8004082:	2c03      	cmp	r4, #3
 8004084:	d8ea      	bhi.n	800405c <stm32f4xxFlashDriverWrite+0x30>
         memset(word, 0, sizeof(word));
 8004086:	2300      	movs	r3, #0
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	e7e7      	b.n	800405c <stm32f4xxFlashDriverWrite+0x30>
         TRACE_ERROR("Failed to write in flash memory!\r\n");
 800408c:	f7fe ffb2 	bl	8002ff4 <osSuspendAllTasks>
 8004090:	4b0e      	ldr	r3, [pc, #56]	@ (80040cc <stm32f4xxFlashDriverWrite+0xa0>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	2222      	movs	r2, #34	@ 0x22
 8004098:	2101      	movs	r1, #1
 800409a:	480d      	ldr	r0, [pc, #52]	@ (80040d0 <stm32f4xxFlashDriverWrite+0xa4>)
 800409c:	f001 ff84 	bl	8005fa8 <fwrite>
 80040a0:	f7fe ffa9 	bl	8002ff6 <osResumeAllTasks>
         return error;
 80040a4:	e004      	b.n	80040b0 <stm32f4xxFlashDriverWrite+0x84>
   return NO_ERROR;
 80040a6:	f04f 0800 	mov.w	r8, #0
 80040aa:	e001      	b.n	80040b0 <stm32f4xxFlashDriverWrite+0x84>
      return ERROR_INVALID_PARAMETER;
 80040ac:	f04f 0802 	mov.w	r8, #2
}
 80040b0:	4640      	mov	r0, r8
 80040b2:	b002      	add	sp, #8
 80040b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return ERROR_INVALID_PARAMETER;
 80040b8:	f04f 0802 	mov.w	r8, #2
 80040bc:	e7f8      	b.n	80040b0 <stm32f4xxFlashDriverWrite+0x84>
 80040be:	f04f 0802 	mov.w	r8, #2
 80040c2:	e7f5      	b.n	80040b0 <stm32f4xxFlashDriverWrite+0x84>
      return ERROR_INVALID_PARAMETER;
 80040c4:	f04f 0802 	mov.w	r8, #2
 80040c8:	e7f2      	b.n	80040b0 <stm32f4xxFlashDriverWrite+0x84>
 80040ca:	bf00      	nop
 80040cc:	20000068 	.word	0x20000068
 80040d0:	08007390 	.word	0x08007390

080040d4 <imageCheckHeader>:
#ifndef SIMULATOR
   error_t error;
   uint32_t computedCrc;

   //Check parameter vailidty
   if(header == NULL)
 80040d4:	b308      	cbz	r0, 800411a <imageCheckHeader+0x46>
{
 80040d6:	b510      	push	{r4, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	4604      	mov	r4, r0
      return CBOOT_ERROR_INVALID_PARAMETERS;

   //Compute image header crc
   error = CRC32_HASH_ALGO->compute((uint8_t*)header, sizeof(ImageHeader) - CRC32_DIGEST_SIZE, (uint8_t*)&computedCrc);
 80040dc:	4b12      	ldr	r3, [pc, #72]	@ (8004128 <imageCheckHeader+0x54>)
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	aa01      	add	r2, sp, #4
 80040e2:	213c      	movs	r1, #60	@ 0x3c
 80040e4:	4798      	blx	r3
   if(error)
 80040e6:	b950      	cbnz	r0, 80040fe <imageCheckHeader+0x2a>
      TRACE_ERROR("Failed to compute image header crc!\r\n");
      return CBOOT_ERROR_FAILURE;
   }

   //Check image header integrity
   if(header->headCrc != computedCrc)
 80040e8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80040ea:	9b01      	ldr	r3, [sp, #4]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d116      	bne.n	800411e <imageCheckHeader+0x4a>
      return CBOOT_ERROR_INVALID_IMAGE_HEADER;

   //Check image header version
   if(header->headVers != IMAGE_HEADER_VERSION)
 80040f0:	6822      	ldr	r2, [r4, #0]
 80040f2:	4b0e      	ldr	r3, [pc, #56]	@ (800412c <imageCheckHeader+0x58>)
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d114      	bne.n	8004122 <imageCheckHeader+0x4e>
      return CBOOT_ERROR_INVALID_IMAGE_HEADER_VERSION;

   //Successful process
   return CBOOT_NO_ERROR;
 80040f8:	2000      	movs	r0, #0
#else
   return CBOOT_NO_ERROR;
#endif
}
 80040fa:	b002      	add	sp, #8
 80040fc:	bd10      	pop	{r4, pc}
      TRACE_ERROR("Failed to compute image header crc!\r\n");
 80040fe:	f7fe ff79 	bl	8002ff4 <osSuspendAllTasks>
 8004102:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <imageCheckHeader+0x5c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2225      	movs	r2, #37	@ 0x25
 800410a:	2101      	movs	r1, #1
 800410c:	4809      	ldr	r0, [pc, #36]	@ (8004134 <imageCheckHeader+0x60>)
 800410e:	f001 ff4b 	bl	8005fa8 <fwrite>
 8004112:	f7fe ff70 	bl	8002ff6 <osResumeAllTasks>
      return CBOOT_ERROR_FAILURE;
 8004116:	2001      	movs	r0, #1
 8004118:	e7ef      	b.n	80040fa <imageCheckHeader+0x26>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800411a:	2004      	movs	r0, #4
}
 800411c:	4770      	bx	lr
      return CBOOT_ERROR_INVALID_IMAGE_HEADER;
 800411e:	2007      	movs	r0, #7
 8004120:	e7eb      	b.n	80040fa <imageCheckHeader+0x26>
      return CBOOT_ERROR_INVALID_IMAGE_HEADER_VERSION;
 8004122:	2008      	movs	r0, #8
 8004124:	e7e9      	b.n	80040fa <imageCheckHeader+0x26>
 8004126:	bf00      	nop
 8004128:	08007438 	.word	0x08007438
 800412c:	00010100 	.word	0x00010100
 8004130:	20000068 	.word	0x20000068
 8004134:	080073b4 	.word	0x080073b4

08004138 <imageGetHeader>:
{
   cboot_error_t cerror;
   ImageHeader *tempHeader;

   //Check parameters validity
   if(buffer == NULL || bufferLen == 0 || header == NULL)
 8004138:	b158      	cbz	r0, 8004152 <imageGetHeader+0x1a>
{
 800413a:	b538      	push	{r3, r4, r5, lr}
 800413c:	4614      	mov	r4, r2
 800413e:	4605      	mov	r5, r0
   if(buffer == NULL || bufferLen == 0 || header == NULL)
 8004140:	b149      	cbz	r1, 8004156 <imageGetHeader+0x1e>
 8004142:	b152      	cbz	r2, 800415a <imageGetHeader+0x22>
      return CBOOT_ERROR_INVALID_PARAMETERS;

   if(bufferLen < sizeof(ImageHeader))
 8004144:	293f      	cmp	r1, #63	@ 0x3f
 8004146:	d90a      	bls.n	800415e <imageGetHeader+0x26>

   //Point to the image header
   tempHeader = (ImageHeader *)buffer;

   //Check image header
   cerror = imageCheckHeader(tempHeader);
 8004148:	f7ff ffc4 	bl	80040d4 <imageCheckHeader>
   //Is any error?
   if(cerror)
 800414c:	b900      	cbnz	r0, 8004150 <imageGetHeader+0x18>
      return cerror;

   //Save image header
   *header = tempHeader;
 800414e:	6025      	str	r5, [r4, #0]

   //Successful process
   return CBOOT_NO_ERROR;
}
 8004150:	bd38      	pop	{r3, r4, r5, pc}
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8004152:	2004      	movs	r0, #4
}
 8004154:	4770      	bx	lr
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8004156:	2004      	movs	r0, #4
 8004158:	e7fa      	b.n	8004150 <imageGetHeader+0x18>
 800415a:	2004      	movs	r0, #4
 800415c:	e7f8      	b.n	8004150 <imageGetHeader+0x18>
      return CBOOT_ERROR_INVALID_LENGTH;
 800415e:	2018      	movs	r0, #24
 8004160:	e7f6      	b.n	8004150 <imageGetHeader+0x18>

08004162 <prv_out_fn_print>:
 * \param[in]       ptr: LwPRINTF internal instance
 * \param[in]       chr: Character to print
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_fn_print(lwprintf_int_t* lwi, const char chr) {
 8004162:	b538      	push	{r3, r4, r5, lr}
    if (lwi->is_print_cancelled) {
 8004164:	7e03      	ldrb	r3, [r0, #24]
 8004166:	b983      	cbnz	r3, 800418a <prv_out_fn_print+0x28>
 8004168:	4604      	mov	r4, r0
 800416a:	460d      	mov	r5, r1
        return 0;
    }

    /* Send character to output */
    if (!lwi->lwobj->out_fn(chr, lwi->lwobj)) {
 800416c:	6801      	ldr	r1, [r0, #0]
 800416e:	680b      	ldr	r3, [r1, #0]
 8004170:	4628      	mov	r0, r5
 8004172:	4798      	blx	r3
 8004174:	b908      	cbnz	r0, 800417a <prv_out_fn_print+0x18>
        lwi->is_print_cancelled = 1;
 8004176:	2301      	movs	r3, #1
 8004178:	7623      	strb	r3, [r4, #24]
    }
    if (chr != '\0' && !lwi->is_print_cancelled) {
 800417a:	b145      	cbz	r5, 800418e <prv_out_fn_print+0x2c>
 800417c:	7e23      	ldrb	r3, [r4, #24]
 800417e:	b943      	cbnz	r3, 8004192 <prv_out_fn_print+0x30>
        ++lwi->n_len;
 8004180:	6923      	ldr	r3, [r4, #16]
 8004182:	3301      	adds	r3, #1
 8004184:	6123      	str	r3, [r4, #16]
    }
    return 1;
 8004186:	2001      	movs	r0, #1
 8004188:	e000      	b.n	800418c <prv_out_fn_print+0x2a>
        return 0;
 800418a:	2000      	movs	r0, #0
}
 800418c:	bd38      	pop	{r3, r4, r5, pc}
    return 1;
 800418e:	2001      	movs	r0, #1
 8004190:	e7fc      	b.n	800418c <prv_out_fn_print+0x2a>
 8004192:	2001      	movs	r0, #1
 8004194:	e7fa      	b.n	800418c <prv_out_fn_print+0x2a>

08004196 <prv_parse_num>:
 * \brief           Parse number from input string
 * \param[in,out]   format: Input text to process
 * \return          Parsed number
 */
static int
prv_parse_num(const char** format) {
 8004196:	4684      	mov	ip, r0
    int num = 0;
 8004198:	2000      	movs	r0, #0

    for (; CHARISNUM(**format); ++(*format)) {
 800419a:	e007      	b.n	80041ac <prv_parse_num+0x16>
        num = (int)10 * num + CHARTONUM(**format);
 800419c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041a0:	3b30      	subs	r3, #48	@ 0x30
 80041a2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    for (; CHARISNUM(**format); ++(*format)) {
 80041a6:	3201      	adds	r2, #1
 80041a8:	f8cc 2000 	str.w	r2, [ip]
 80041ac:	f8dc 2000 	ldr.w	r2, [ip]
 80041b0:	7813      	ldrb	r3, [r2, #0]
 80041b2:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80041b6:	b2c9      	uxtb	r1, r1
 80041b8:	2909      	cmp	r1, #9
 80041ba:	d9ef      	bls.n	800419c <prv_parse_num+0x6>
    }
    return num;
}
 80041bc:	4770      	bx	lr
	...

080041c0 <prv_out_str_before>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_before(lwprintf_int_t* lwi, size_t buff_size) {
 80041c0:	b570      	push	{r4, r5, r6, lr}
 80041c2:	4604      	mov	r4, r0
 80041c4:	460e      	mov	r6, r1
    /* Check for width */
    if (lwi->m.width > 0
 80041c6:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80041c8:	2a00      	cmp	r2, #0
 80041ca:	dd08      	ble.n	80041de <prv_out_str_before+0x1e>
        /* If number is negative, add negative sign or if positive and has plus sign forced */
        && (lwi->m.flags.is_negative || lwi->m.flags.plus)) {
 80041cc:	8b83      	ldrh	r3, [r0, #28]
 80041ce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80041d2:	f023 037d 	bic.w	r3, r3, #125	@ 0x7d
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	b10b      	cbz	r3, 80041de <prv_out_str_before+0x1e>
        --lwi->m.width;
 80041da:	3a01      	subs	r2, #1
 80041dc:	6242      	str	r2, [r0, #36]	@ 0x24
    }

    /* Check for alternate mode */
    if (lwi->m.flags.alt && !lwi->m.flags.is_num_zero) {
 80041de:	69e2      	ldr	r2, [r4, #28]
 80041e0:	4b50      	ldr	r3, [pc, #320]	@ (8004324 <prv_out_str_before+0x164>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d00f      	beq.n	8004208 <prv_out_str_before+0x48>
            }
        }
    }

    /* Add negative sign (or positive in case of + flag or space in case of space flag) before when zeros are used to fill width */
    if (lwi->m.flags.zero) {
 80041e8:	7f23      	ldrb	r3, [r4, #28]
 80041ea:	f013 0f08 	tst.w	r3, #8
 80041ee:	d026      	beq.n	800423e <prv_out_str_before+0x7e>
        if (lwi->m.flags.is_negative) {
 80041f0:	f994 201d 	ldrsb.w	r2, [r4, #29]
 80041f4:	2a00      	cmp	r2, #0
 80041f6:	db1e      	blt.n	8004236 <prv_out_str_before+0x76>
            lwi->out_fn(lwi, '-');
        } else if (lwi->m.flags.plus) {
 80041f8:	f013 0f02 	tst.w	r3, #2
 80041fc:	d02d      	beq.n	800425a <prv_out_str_before+0x9a>
            lwi->out_fn(lwi, '+');
 80041fe:	6963      	ldr	r3, [r4, #20]
 8004200:	212b      	movs	r1, #43	@ 0x2b
 8004202:	4620      	mov	r0, r4
 8004204:	4798      	blx	r3
 8004206:	e01a      	b.n	800423e <prv_out_str_before+0x7e>
        if (lwi->m.base == 8) {
 8004208:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800420c:	2b08      	cmp	r3, #8
 800420e:	d009      	beq.n	8004224 <prv_out_str_before+0x64>
        } else if (lwi->m.base == 16 || lwi->m.base == 2) {
 8004210:	2b10      	cmp	r3, #16
 8004212:	d001      	beq.n	8004218 <prv_out_str_before+0x58>
 8004214:	2b02      	cmp	r3, #2
 8004216:	d1e7      	bne.n	80041e8 <prv_out_str_before+0x28>
            if (lwi->m.width >= 2) {
 8004218:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800421a:	2b01      	cmp	r3, #1
 800421c:	dd08      	ble.n	8004230 <prv_out_str_before+0x70>
                lwi->m.width -= 2;
 800421e:	3b02      	subs	r3, #2
 8004220:	6263      	str	r3, [r4, #36]	@ 0x24
 8004222:	e7e1      	b.n	80041e8 <prv_out_str_before+0x28>
            if (lwi->m.width > 0) {
 8004224:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004226:	2b00      	cmp	r3, #0
 8004228:	ddde      	ble.n	80041e8 <prv_out_str_before+0x28>
                --lwi->m.width;
 800422a:	3b01      	subs	r3, #1
 800422c:	6263      	str	r3, [r4, #36]	@ 0x24
 800422e:	e7db      	b.n	80041e8 <prv_out_str_before+0x28>
                lwi->m.width = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	6263      	str	r3, [r4, #36]	@ 0x24
 8004234:	e7d8      	b.n	80041e8 <prv_out_str_before+0x28>
            lwi->out_fn(lwi, '-');
 8004236:	6963      	ldr	r3, [r4, #20]
 8004238:	212d      	movs	r1, #45	@ 0x2d
 800423a:	4620      	mov	r0, r4
 800423c:	4798      	blx	r3
            lwi->out_fn(lwi, ' ');
        }
    }

    /* Check for flags output */
    if (lwi->m.flags.alt && !lwi->m.flags.is_num_zero) {
 800423e:	69e2      	ldr	r2, [r4, #28]
 8004240:	4b38      	ldr	r3, [pc, #224]	@ (8004324 <prv_out_str_before+0x164>)
 8004242:	4013      	ands	r3, r2
 8004244:	2b20      	cmp	r3, #32
 8004246:	d010      	beq.n	800426a <prv_out_str_before+0xaa>
            lwi->out_fn(lwi, lwi->m.flags.uc ? 'B' : 'b');
        }
    }

    /* Right alignment, spaces or zeros */
    if (!lwi->m.flags.left_align && lwi->m.width > 0) {
 8004248:	7f23      	ldrb	r3, [r4, #28]
 800424a:	f013 0f01 	tst.w	r3, #1
 800424e:	d148      	bne.n	80042e2 <prv_out_str_before+0x122>
 8004250:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004252:	2b00      	cmp	r3, #0
 8004254:	dd45      	ble.n	80042e2 <prv_out_str_before+0x122>
        for (size_t idx = buff_size; !lwi->m.flags.left_align && idx < (size_t)lwi->m.width; ++idx) {
 8004256:	4635      	mov	r5, r6
 8004258:	e036      	b.n	80042c8 <prv_out_str_before+0x108>
        } else if (lwi->m.flags.space) {
 800425a:	f013 0f04 	tst.w	r3, #4
 800425e:	d0ee      	beq.n	800423e <prv_out_str_before+0x7e>
            lwi->out_fn(lwi, ' ');
 8004260:	6963      	ldr	r3, [r4, #20]
 8004262:	2120      	movs	r1, #32
 8004264:	4620      	mov	r0, r4
 8004266:	4798      	blx	r3
 8004268:	e7e9      	b.n	800423e <prv_out_str_before+0x7e>
        if (lwi->m.base == 8) {
 800426a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800426e:	2b08      	cmp	r3, #8
 8004270:	d010      	beq.n	8004294 <prv_out_str_before+0xd4>
        } else if (lwi->m.base == 16) {
 8004272:	2b10      	cmp	r3, #16
 8004274:	d013      	beq.n	800429e <prv_out_str_before+0xde>
        } else if (lwi->m.base == 2) {
 8004276:	2b02      	cmp	r3, #2
 8004278:	d1e6      	bne.n	8004248 <prv_out_str_before+0x88>
            lwi->out_fn(lwi, '0');
 800427a:	6963      	ldr	r3, [r4, #20]
 800427c:	2130      	movs	r1, #48	@ 0x30
 800427e:	4620      	mov	r0, r4
 8004280:	4798      	blx	r3
            lwi->out_fn(lwi, lwi->m.flags.uc ? 'B' : 'b');
 8004282:	6963      	ldr	r3, [r4, #20]
 8004284:	7f62      	ldrb	r2, [r4, #29]
 8004286:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800428a:	d017      	beq.n	80042bc <prv_out_str_before+0xfc>
 800428c:	2142      	movs	r1, #66	@ 0x42
 800428e:	4620      	mov	r0, r4
 8004290:	4798      	blx	r3
 8004292:	e7d9      	b.n	8004248 <prv_out_str_before+0x88>
            lwi->out_fn(lwi, '0');
 8004294:	6963      	ldr	r3, [r4, #20]
 8004296:	2130      	movs	r1, #48	@ 0x30
 8004298:	4620      	mov	r0, r4
 800429a:	4798      	blx	r3
 800429c:	e7d4      	b.n	8004248 <prv_out_str_before+0x88>
            lwi->out_fn(lwi, '0');
 800429e:	6963      	ldr	r3, [r4, #20]
 80042a0:	2130      	movs	r1, #48	@ 0x30
 80042a2:	4620      	mov	r0, r4
 80042a4:	4798      	blx	r3
            lwi->out_fn(lwi, lwi->m.flags.uc ? 'X' : 'x');
 80042a6:	6963      	ldr	r3, [r4, #20]
 80042a8:	7f62      	ldrb	r2, [r4, #29]
 80042aa:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80042ae:	d003      	beq.n	80042b8 <prv_out_str_before+0xf8>
 80042b0:	2158      	movs	r1, #88	@ 0x58
 80042b2:	4620      	mov	r0, r4
 80042b4:	4798      	blx	r3
 80042b6:	e7c7      	b.n	8004248 <prv_out_str_before+0x88>
 80042b8:	2178      	movs	r1, #120	@ 0x78
 80042ba:	e7fa      	b.n	80042b2 <prv_out_str_before+0xf2>
            lwi->out_fn(lwi, lwi->m.flags.uc ? 'B' : 'b');
 80042bc:	2162      	movs	r1, #98	@ 0x62
 80042be:	e7e6      	b.n	800428e <prv_out_str_before+0xce>
            lwi->out_fn(lwi, lwi->m.flags.zero ? '0' : ' ');
 80042c0:	2120      	movs	r1, #32
 80042c2:	4620      	mov	r0, r4
 80042c4:	4790      	blx	r2
        for (size_t idx = buff_size; !lwi->m.flags.left_align && idx < (size_t)lwi->m.width; ++idx) {
 80042c6:	3501      	adds	r5, #1
 80042c8:	7f23      	ldrb	r3, [r4, #28]
 80042ca:	f013 0f01 	tst.w	r3, #1
 80042ce:	d108      	bne.n	80042e2 <prv_out_str_before+0x122>
 80042d0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80042d2:	42aa      	cmp	r2, r5
 80042d4:	d905      	bls.n	80042e2 <prv_out_str_before+0x122>
            lwi->out_fn(lwi, lwi->m.flags.zero ? '0' : ' ');
 80042d6:	6962      	ldr	r2, [r4, #20]
 80042d8:	f013 0f08 	tst.w	r3, #8
 80042dc:	d0f0      	beq.n	80042c0 <prv_out_str_before+0x100>
 80042de:	2130      	movs	r1, #48	@ 0x30
 80042e0:	e7ef      	b.n	80042c2 <prv_out_str_before+0x102>
        }
    }

    /* Add negative sign here when spaces are used for width */
    if (!lwi->m.flags.zero) {
 80042e2:	7f23      	ldrb	r3, [r4, #28]
 80042e4:	f013 0f08 	tst.w	r3, #8
 80042e8:	d10f      	bne.n	800430a <prv_out_str_before+0x14a>
        if (lwi->m.flags.is_negative) {
 80042ea:	f994 201d 	ldrsb.w	r2, [r4, #29]
 80042ee:	2a00      	cmp	r2, #0
 80042f0:	db07      	blt.n	8004302 <prv_out_str_before+0x142>
            lwi->out_fn(lwi, '-');
        } else if (lwi->m.flags.plus) {
 80042f2:	f013 0f02 	tst.w	r3, #2
 80042f6:	d00a      	beq.n	800430e <prv_out_str_before+0x14e>
            lwi->out_fn(lwi, '+');
 80042f8:	6963      	ldr	r3, [r4, #20]
 80042fa:	212b      	movs	r1, #43	@ 0x2b
 80042fc:	4620      	mov	r0, r4
 80042fe:	4798      	blx	r3
 8004300:	e003      	b.n	800430a <prv_out_str_before+0x14a>
            lwi->out_fn(lwi, '-');
 8004302:	6963      	ldr	r3, [r4, #20]
 8004304:	212d      	movs	r1, #45	@ 0x2d
 8004306:	4620      	mov	r0, r4
 8004308:	4798      	blx	r3
            lwi->out_fn(lwi, ' ');
        }
    }

    return 1;
}
 800430a:	2001      	movs	r0, #1
 800430c:	bd70      	pop	{r4, r5, r6, pc}
        } else if (lwi->m.flags.space && buff_size >= (size_t)lwi->m.width) {
 800430e:	f013 0f04 	tst.w	r3, #4
 8004312:	d0fa      	beq.n	800430a <prv_out_str_before+0x14a>
 8004314:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004316:	42b3      	cmp	r3, r6
 8004318:	d8f7      	bhi.n	800430a <prv_out_str_before+0x14a>
            lwi->out_fn(lwi, ' ');
 800431a:	6963      	ldr	r3, [r4, #20]
 800431c:	2120      	movs	r1, #32
 800431e:	4620      	mov	r0, r4
 8004320:	4798      	blx	r3
 8004322:	e7f2      	b.n	800430a <prv_out_str_before+0x14a>
 8004324:	00010020 	.word	0x00010020

08004328 <prv_out_str_after>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_after(lwprintf_int_t* lwi, size_t buff_size) {
 8004328:	b538      	push	{r3, r4, r5, lr}
 800432a:	4604      	mov	r4, r0
 800432c:	460d      	mov	r5, r1
    /* Left alignment, but only with spaces */
    if (lwi->m.flags.left_align) {
 800432e:	7f03      	ldrb	r3, [r0, #28]
 8004330:	f013 0f01 	tst.w	r3, #1
 8004334:	d106      	bne.n	8004344 <prv_out_str_after+0x1c>
        for (size_t idx = buff_size; idx < (size_t)lwi->m.width; ++idx) {
            lwi->out_fn(lwi, ' ');
        }
    }
    return 1;
}
 8004336:	2001      	movs	r0, #1
 8004338:	bd38      	pop	{r3, r4, r5, pc}
            lwi->out_fn(lwi, ' ');
 800433a:	6963      	ldr	r3, [r4, #20]
 800433c:	2120      	movs	r1, #32
 800433e:	4620      	mov	r0, r4
 8004340:	4798      	blx	r3
        for (size_t idx = buff_size; idx < (size_t)lwi->m.width; ++idx) {
 8004342:	3501      	adds	r5, #1
 8004344:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004346:	42ab      	cmp	r3, r5
 8004348:	d8f7      	bhi.n	800433a <prv_out_str_after+0x12>
 800434a:	e7f4      	b.n	8004336 <prv_out_str_after+0xe>

0800434c <prv_out_str_raw>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_raw(lwprintf_int_t* lwi, const char* buff, size_t buff_size) {
 800434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434e:	4605      	mov	r5, r0
 8004350:	460f      	mov	r7, r1
 8004352:	4616      	mov	r6, r2
    for (size_t idx = 0; idx < buff_size; ++idx) {
 8004354:	2400      	movs	r4, #0
 8004356:	e004      	b.n	8004362 <prv_out_str_raw+0x16>
        lwi->out_fn(lwi, buff[idx]);
 8004358:	696b      	ldr	r3, [r5, #20]
 800435a:	5d39      	ldrb	r1, [r7, r4]
 800435c:	4628      	mov	r0, r5
 800435e:	4798      	blx	r3
    for (size_t idx = 0; idx < buff_size; ++idx) {
 8004360:	3401      	adds	r4, #1
 8004362:	42b4      	cmp	r4, r6
 8004364:	d3f8      	bcc.n	8004358 <prv_out_str_raw+0xc>
    }
    return 1;
}
 8004366:	2001      	movs	r0, #1
 8004368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800436a <prv_out_str>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str(lwprintf_int_t* lwi, const char* buff, size_t buff_size) {
 800436a:	b570      	push	{r4, r5, r6, lr}
 800436c:	4605      	mov	r5, r0
 800436e:	460e      	mov	r6, r1
 8004370:	4614      	mov	r4, r2
    prv_out_str_before(lwi, buff_size);    /* Implement pre-format */
 8004372:	4611      	mov	r1, r2
 8004374:	f7ff ff24 	bl	80041c0 <prv_out_str_before>
    prv_out_str_raw(lwi, buff, buff_size); /* Print actual string */
 8004378:	4622      	mov	r2, r4
 800437a:	4631      	mov	r1, r6
 800437c:	4628      	mov	r0, r5
 800437e:	f7ff ffe5 	bl	800434c <prv_out_str_raw>
    prv_out_str_after(lwi, buff_size);     /* Implement post-format */
 8004382:	4621      	mov	r1, r4
 8004384:	4628      	mov	r0, r5
 8004386:	f7ff ffcf 	bl	8004328 <prv_out_str_after>

    return 1;
}
 800438a:	2001      	movs	r0, #1
 800438c:	bd70      	pop	{r4, r5, r6, pc}

0800438e <prv_longest_unsigned_int_to_str>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_longest_unsigned_int_to_str(lwprintf_int_t* lwi, uint_maxtype_t num) {
 800438e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004392:	b08d      	sub	sp, #52	@ 0x34
 8004394:	4681      	mov	r9, r0
 8004396:	4615      	mov	r5, r2
 8004398:	461c      	mov	r4, r3
    /* Start with digits length, support binary with int, that is 32-bits maximum width */
    char num_buf[33], *num_buf_ptr = &num_buf[sizeof(num_buf)];
    char adder_ch = (lwi->m.flags.uc ? 'A' : 'a') - 10;
 800439a:	7f43      	ldrb	r3, [r0, #29]
 800439c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80043a0:	d011      	beq.n	80043c6 <prv_longest_unsigned_int_to_str+0x38>
 80043a2:	2337      	movs	r3, #55	@ 0x37
 80043a4:	9301      	str	r3, [sp, #4]
    size_t len = 0;

    /* Check if number is zero */
    lwi->m.flags.is_num_zero = num == 0;
 80043a6:	ea55 0304 	orrs.w	r3, r5, r4
 80043aa:	bf0c      	ite	eq
 80043ac:	2201      	moveq	r2, #1
 80043ae:	2200      	movne	r2, #0
 80043b0:	f899 301e 	ldrb.w	r3, [r9, #30]
 80043b4:	f362 0300 	bfi	r3, r2, #0, #1
 80043b8:	f889 301e 	strb.w	r3, [r9, #30]

    /* Fill the buffer backward */
    *--num_buf_ptr = '\0';
 80043bc:	2300      	movs	r3, #0
 80043be:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80043c2:	ae0b      	add	r6, sp, #44	@ 0x2c
 80043c4:	e00b      	b.n	80043de <prv_longest_unsigned_int_to_str+0x50>
    char adder_ch = (lwi->m.flags.uc ? 'A' : 'a') - 10;
 80043c6:	2357      	movs	r3, #87	@ 0x57
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	e7ec      	b.n	80043a6 <prv_longest_unsigned_int_to_str+0x18>
    do {
        int digit = num % lwi->m.base;
        num /= lwi->m.base;
        *--num_buf_ptr = (char)digit + (char)(digit >= 10 ? adder_ch : '0');
 80043cc:	9a01      	ldr	r2, [sp, #4]
 80043ce:	4413      	add	r3, r2
 80043d0:	f806 3d01 	strb.w	r3, [r6, #-1]!
    } while (num > 0);
 80043d4:	45c3      	cmp	fp, r8
 80043d6:	9b00      	ldr	r3, [sp, #0]
 80043d8:	f173 0300 	sbcs.w	r3, r3, #0
 80043dc:	d319      	bcc.n	8004412 <prv_longest_unsigned_int_to_str+0x84>
        int digit = num % lwi->m.base;
 80043de:	f899 8028 	ldrb.w	r8, [r9, #40]	@ 0x28
 80043e2:	f04f 0a00 	mov.w	sl, #0
 80043e6:	4642      	mov	r2, r8
 80043e8:	4653      	mov	r3, sl
 80043ea:	4628      	mov	r0, r5
 80043ec:	4621      	mov	r1, r4
 80043ee:	f7fc fb95 	bl	8000b1c <__aeabi_uldivmod>
 80043f2:	4617      	mov	r7, r2
        num /= lwi->m.base;
 80043f4:	46ab      	mov	fp, r5
 80043f6:	9400      	str	r4, [sp, #0]
 80043f8:	4642      	mov	r2, r8
 80043fa:	4653      	mov	r3, sl
 80043fc:	4628      	mov	r0, r5
 80043fe:	4621      	mov	r1, r4
 8004400:	f7fc fb8c 	bl	8000b1c <__aeabi_uldivmod>
 8004404:	4605      	mov	r5, r0
 8004406:	460c      	mov	r4, r1
        *--num_buf_ptr = (char)digit + (char)(digit >= 10 ? adder_ch : '0');
 8004408:	b2fb      	uxtb	r3, r7
 800440a:	2f09      	cmp	r7, #9
 800440c:	dcde      	bgt.n	80043cc <prv_longest_unsigned_int_to_str+0x3e>
 800440e:	2230      	movs	r2, #48	@ 0x30
 8004410:	e7dd      	b.n	80043ce <prv_longest_unsigned_int_to_str+0x40>

    /* Calculate and generate the output */
    len = sizeof(num_buf) - (size_t)((uintptr_t)num_buf_ptr - (uintptr_t)num_buf) - 1;
 8004412:	ac03      	add	r4, sp, #12
 8004414:	1ba4      	subs	r4, r4, r6
 8004416:	3420      	adds	r4, #32
    prv_out_str_before(lwi, len);
 8004418:	4621      	mov	r1, r4
 800441a:	4648      	mov	r0, r9
 800441c:	f7ff fed0 	bl	80041c0 <prv_out_str_before>
    for (; *num_buf_ptr;) {
 8004420:	e004      	b.n	800442c <prv_longest_unsigned_int_to_str+0x9e>
        lwi->out_fn(lwi, *num_buf_ptr++);
 8004422:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004426:	3601      	adds	r6, #1
 8004428:	4648      	mov	r0, r9
 800442a:	4798      	blx	r3
    for (; *num_buf_ptr;) {
 800442c:	7831      	ldrb	r1, [r6, #0]
 800442e:	2900      	cmp	r1, #0
 8004430:	d1f7      	bne.n	8004422 <prv_longest_unsigned_int_to_str+0x94>
    }
    prv_out_str_after(lwi, len);
 8004432:	4621      	mov	r1, r4
 8004434:	4648      	mov	r0, r9
 8004436:	f7ff ff77 	bl	8004328 <prv_out_str_after>
    return 1;
}
 800443a:	2001      	movs	r0, #1
 800443c:	b00d      	add	sp, #52	@ 0x34
 800443e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004442 <prv_longest_signed_int_to_str>:
 * \param[in,out]   lwi: LwPRINTF instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_longest_signed_int_to_str(lwprintf_int_t* lwi, int_maxtype_t num) {
 8004442:	b508      	push	{r3, lr}
    SIGNED_CHECK_NEGATIVE(lwi, num);
 8004444:	2b00      	cmp	r3, #0
 8004446:	db02      	blt.n	800444e <prv_longest_signed_int_to_str+0xc>
    return prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)num);
 8004448:	f7ff ffa1 	bl	800438e <prv_longest_unsigned_int_to_str>
}
 800444c:	bd08      	pop	{r3, pc}
    SIGNED_CHECK_NEGATIVE(lwi, num);
 800444e:	7f41      	ldrb	r1, [r0, #29]
 8004450:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004454:	7741      	strb	r1, [r0, #29]
 8004456:	4252      	negs	r2, r2
 8004458:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800445c:	e7f4      	b.n	8004448 <prv_longest_signed_int_to_str+0x6>
	...

08004460 <prv_calculate_dbl_num_data>:
 * \param[in]       n: Float number instance
 * \param[in]       num: Input number
 * \param[in]       type: Format type
 */
static void
prv_calculate_dbl_num_data(lwprintf_int_t* lwi, float_num_t* n, double num, const char type) {
 8004460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004464:	ed2d 8b02 	vpush	{d8}
 8004468:	b083      	sub	sp, #12
 800446a:	4605      	mov	r5, r0
 800446c:	460c      	mov	r4, r1
 800446e:	ec57 6b10 	vmov	r6, r7, d0
 8004472:	9201      	str	r2, [sp, #4]
    memset(n, 0x00, sizeof(*n));
 8004474:	2228      	movs	r2, #40	@ 0x28
 8004476:	2100      	movs	r1, #0
 8004478:	4620      	mov	r0, r4
 800447a:	f001 fe8b 	bl	8006194 <memset>

    if (lwi->m.precision >= (int)LWPRINTF_ARRAYSIZE(powers_of_10)) {
 800447e:	6a2b      	ldr	r3, [r5, #32]
 8004480:	2b12      	cmp	r3, #18
 8004482:	dd01      	ble.n	8004488 <prv_calculate_dbl_num_data+0x28>
        lwi->m.precision = (int)LWPRINTF_ARRAYSIZE(powers_of_10) - 1;
 8004484:	2312      	movs	r3, #18
 8004486:	622b      	str	r3, [r5, #32]
     * decimal_part_dbl = 3456.78   -> Decimal part multiplied by 10^precision, keeping it in double format
     * decimal_part = 3456          -> Integer part of decimal number
     * diff = 0.78                  -> Difference between actual decimal and integer part of decimal
     *                                  This is used for rounding of last digit (if necessary)
     */
    num += 0.000000000000005;
 8004488:	a3ac      	add	r3, pc, #688	@ (adr r3, 800473c <prv_calculate_dbl_num_data+0x2dc>)
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	4630      	mov	r0, r6
 8004490:	4639      	mov	r1, r7
 8004492:	f7fb fef3 	bl	800027c <__adddf3>
 8004496:	4680      	mov	r8, r0
 8004498:	4689      	mov	r9, r1
    n->integer_part = (float_long_t)num;
 800449a:	f7fc fb57 	bl	8000b4c <__aeabi_d2lz>
 800449e:	4606      	mov	r6, r0
 80044a0:	460f      	mov	r7, r1
 80044a2:	6020      	str	r0, [r4, #0]
 80044a4:	6061      	str	r1, [r4, #4]
    n->decimal_part_dbl = (num - (double)n->integer_part) * (double)powers_of_10[lwi->m.precision];
 80044a6:	f7fc f871 	bl	800058c <__aeabi_l2d>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4640      	mov	r0, r8
 80044b0:	4649      	mov	r1, r9
 80044b2:	f7fb fee1 	bl	8000278 <__aeabi_dsub>
 80044b6:	4680      	mov	r8, r0
 80044b8:	4689      	mov	r9, r1
 80044ba:	6a2a      	ldr	r2, [r5, #32]
 80044bc:	4b9c      	ldr	r3, [pc, #624]	@ (8004730 <prv_calculate_dbl_num_data+0x2d0>)
 80044be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044c6:	f7fc f861 	bl	800058c <__aeabi_l2d>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4640      	mov	r0, r8
 80044d0:	4649      	mov	r1, r9
 80044d2:	f7fc f889 	bl	80005e8 <__aeabi_dmul>
 80044d6:	4682      	mov	sl, r0
 80044d8:	468b      	mov	fp, r1
 80044da:	e9c4 ab02 	strd	sl, fp, [r4, #8]
    n->decimal_part = (float_long_t)n->decimal_part_dbl;
 80044de:	f7fc fb35 	bl	8000b4c <__aeabi_d2lz>
 80044e2:	4680      	mov	r8, r0
 80044e4:	4689      	mov	r9, r1
 80044e6:	6120      	str	r0, [r4, #16]
 80044e8:	6161      	str	r1, [r4, #20]
    n->diff = n->decimal_part_dbl - (double)((float_long_t)n->decimal_part);
 80044ea:	f7fc f84f 	bl	800058c <__aeabi_l2d>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4650      	mov	r0, sl
 80044f4:	4659      	mov	r1, fp
 80044f6:	f7fb febf 	bl	8000278 <__aeabi_dsub>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	ec43 2b18 	vmov	d8, r2, r3
 8004502:	ed84 8b06 	vstr	d8, [r4, #24]

    /* Rounding check of last digit */
    if (n->diff > 0.5) {
 8004506:	2200      	movs	r2, #0
 8004508:	4b8a      	ldr	r3, [pc, #552]	@ (8004734 <prv_calculate_dbl_num_data+0x2d4>)
 800450a:	f7fc fafd 	bl	8000b08 <__aeabi_dcmpgt>
 800450e:	b378      	cbz	r0, 8004570 <prv_calculate_dbl_num_data+0x110>
        ++n->decimal_part;
 8004510:	f118 0201 	adds.w	r2, r8, #1
 8004514:	f149 0300 	adc.w	r3, r9, #0
 8004518:	6122      	str	r2, [r4, #16]
 800451a:	6163      	str	r3, [r4, #20]
        if (n->decimal_part >= powers_of_10[lwi->m.precision]) {
 800451c:	6a28      	ldr	r0, [r5, #32]
 800451e:	4984      	ldr	r1, [pc, #528]	@ (8004730 <prv_calculate_dbl_num_data+0x2d0>)
 8004520:	eb01 0cc0 	add.w	ip, r1, r0, lsl #3
 8004524:	f851 0030 	ldr.w	r0, [r1, r0, lsl #3]
 8004528:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800452c:	4282      	cmp	r2, r0
 800452e:	eb73 0901 	sbcs.w	r9, r3, r1
 8004532:	db08      	blt.n	8004546 <prv_calculate_dbl_num_data+0xe6>
            n->decimal_part = 0;
 8004534:	2200      	movs	r2, #0
 8004536:	2300      	movs	r3, #0
 8004538:	e9c4 2304 	strd	r2, r3, [r4, #16]
            ++n->integer_part;
 800453c:	3601      	adds	r6, #1
 800453e:	f147 0700 	adc.w	r7, r7, #0
 8004542:	6026      	str	r6, [r4, #0]
 8004544:	6067      	str	r7, [r4, #4]
            ++n->decimal_part;
        }
    }

    /* Calculate number of digits for integer and decimal parts */
    if (n->integer_part == 0) {
 8004546:	6821      	ldr	r1, [r4, #0]
 8004548:	6863      	ldr	r3, [r4, #4]
 800454a:	ea51 0203 	orrs.w	r2, r1, r3
 800454e:	d127      	bne.n	80045a0 <prv_calculate_dbl_num_data+0x140>
        n->digits_cnt_integer_part = 1;
 8004550:	2301      	movs	r3, #1
 8004552:	8423      	strh	r3, [r4, #32]
    } else {
        float_long_t tmp;
        for (n->digits_cnt_integer_part = 0, tmp = n->integer_part; tmp > 0; ++n->digits_cnt_integer_part, tmp /= 10) {}
    }
    n->digits_cnt_decimal_part = (short)lwi->m.precision;
 8004554:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8004558:	8463      	strh	r3, [r4, #34]	@ 0x22

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Calculate minimum useful digits for decimal (excl last useless zeros) */
    if (type == 'g') {
 800455a:	9b01      	ldr	r3, [sp, #4]
 800455c:	2b67      	cmp	r3, #103	@ 0x67
 800455e:	d058      	beq.n	8004612 <prv_calculate_dbl_num_data+0x1b2>
            }
        }
    } else
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    {
        n->digits_cnt_decimal_part_useful = (short)lwi->m.precision;
 8004560:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8004564:	84a3      	strh	r3, [r4, #36]	@ 0x24
    }
}
 8004566:	b003      	add	sp, #12
 8004568:	ecbd 8b02 	vpop	{d8}
 800456c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (n->diff < 0.5) {
 8004570:	2200      	movs	r2, #0
 8004572:	4b70      	ldr	r3, [pc, #448]	@ (8004734 <prv_calculate_dbl_num_data+0x2d4>)
 8004574:	ec51 0b18 	vmov	r0, r1, d8
 8004578:	f7fc faa8 	bl	8000acc <__aeabi_dcmplt>
 800457c:	2800      	cmp	r0, #0
 800457e:	d1e2      	bne.n	8004546 <prv_calculate_dbl_num_data+0xe6>
        if (n->decimal_part == 0) {
 8004580:	ea58 0309 	orrs.w	r3, r8, r9
 8004584:	d105      	bne.n	8004592 <prv_calculate_dbl_num_data+0x132>
            ++n->integer_part;
 8004586:	3601      	adds	r6, #1
 8004588:	f147 0700 	adc.w	r7, r7, #0
 800458c:	6026      	str	r6, [r4, #0]
 800458e:	6067      	str	r7, [r4, #4]
 8004590:	e7d9      	b.n	8004546 <prv_calculate_dbl_num_data+0xe6>
            ++n->decimal_part;
 8004592:	f118 0301 	adds.w	r3, r8, #1
 8004596:	f149 0200 	adc.w	r2, r9, #0
 800459a:	6123      	str	r3, [r4, #16]
 800459c:	6162      	str	r2, [r4, #20]
 800459e:	e7d2      	b.n	8004546 <prv_calculate_dbl_num_data+0xe6>
        for (n->digits_cnt_integer_part = 0, tmp = n->integer_part; tmp > 0; ++n->digits_cnt_integer_part, tmp /= 10) {}
 80045a0:	2200      	movs	r2, #0
 80045a2:	8422      	strh	r2, [r4, #32]
 80045a4:	e030      	b.n	8004608 <prv_calculate_dbl_num_data+0x1a8>
 80045a6:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
 80045aa:	3201      	adds	r2, #1
 80045ac:	8422      	strh	r2, [r4, #32]
 80045ae:	17de      	asrs	r6, r3, #31
 80045b0:	f006 0703 	and.w	r7, r6, #3
 80045b4:	f021 4270 	bic.w	r2, r1, #4026531840	@ 0xf0000000
 80045b8:	0f08      	lsrs	r0, r1, #28
 80045ba:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 80045be:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
 80045c2:	4402      	add	r2, r0
 80045c4:	eb02 6213 	add.w	r2, r2, r3, lsr #24
 80045c8:	443a      	add	r2, r7
 80045ca:	485b      	ldr	r0, [pc, #364]	@ (8004738 <prv_calculate_dbl_num_data+0x2d8>)
 80045cc:	fba0 7c02 	umull	r7, ip, r0, r2
 80045d0:	f02c 0703 	bic.w	r7, ip, #3
 80045d4:	eb07 079c 	add.w	r7, r7, ip, lsr #2
 80045d8:	1bd2      	subs	r2, r2, r7
 80045da:	f026 0603 	bic.w	r6, r6, #3
 80045de:	4432      	add	r2, r6
 80045e0:	1a89      	subs	r1, r1, r2
 80045e2:	eb63 72e2 	sbc.w	r2, r3, r2, asr #31
 80045e6:	f04f 33cc 	mov.w	r3, #3435973836	@ 0xcccccccc
 80045ea:	fb01 f303 	mul.w	r3, r1, r3
 80045ee:	fb00 3202 	mla	r2, r0, r2, r3
 80045f2:	fba1 1300 	umull	r1, r3, r1, r0
 80045f6:	4413      	add	r3, r2
 80045f8:	0fda      	lsrs	r2, r3, #31
 80045fa:	1852      	adds	r2, r2, r1
 80045fc:	f143 0300 	adc.w	r3, r3, #0
 8004600:	0852      	lsrs	r2, r2, #1
 8004602:	ea42 71c3 	orr.w	r1, r2, r3, lsl #31
 8004606:	105b      	asrs	r3, r3, #1
 8004608:	2901      	cmp	r1, #1
 800460a:	f173 0200 	sbcs.w	r2, r3, #0
 800460e:	daca      	bge.n	80045a6 <prv_calculate_dbl_num_data+0x146>
 8004610:	e7a0      	b.n	8004554 <prv_calculate_dbl_num_data+0xf4>
        float_long_t tmp = n->decimal_part;
 8004612:	6921      	ldr	r1, [r4, #16]
 8004614:	6963      	ldr	r3, [r4, #20]
        for (adder = 0, i = 0; tmp > 0 || i < (short)lwi->m.precision;
 8004616:	2000      	movs	r0, #0
 8004618:	4606      	mov	r6, r0
 800461a:	461f      	mov	r7, r3
 800461c:	e033      	b.n	8004686 <prv_calculate_dbl_num_data+0x226>
             tmp /= 10, n->digits_cnt_decimal_part_useful += adder, ++i) {
 800461e:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 8004622:	f00c 0e03 	and.w	lr, ip, #3
 8004626:	f021 4270 	bic.w	r2, r1, #4026531840	@ 0xf0000000
 800462a:	0f0b      	lsrs	r3, r1, #28
 800462c:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 8004630:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004634:	441a      	add	r2, r3
 8004636:	eb02 6217 	add.w	r2, r2, r7, lsr #24
 800463a:	4472      	add	r2, lr
 800463c:	4b3e      	ldr	r3, [pc, #248]	@ (8004738 <prv_calculate_dbl_num_data+0x2d8>)
 800463e:	fba3 e802 	umull	lr, r8, r3, r2
 8004642:	f028 0e03 	bic.w	lr, r8, #3
 8004646:	eb0e 0e98 	add.w	lr, lr, r8, lsr #2
 800464a:	eba2 020e 	sub.w	r2, r2, lr
 800464e:	f02c 0c03 	bic.w	ip, ip, #3
 8004652:	4462      	add	r2, ip
 8004654:	1a89      	subs	r1, r1, r2
 8004656:	eb67 72e2 	sbc.w	r2, r7, r2, asr #31
 800465a:	f04f 37cc 	mov.w	r7, #3435973836	@ 0xcccccccc
 800465e:	fb01 f707 	mul.w	r7, r1, r7
 8004662:	fb03 7202 	mla	r2, r3, r2, r7
 8004666:	fba1 1303 	umull	r1, r3, r1, r3
 800466a:	4413      	add	r3, r2
 800466c:	0fda      	lsrs	r2, r3, #31
 800466e:	1852      	adds	r2, r2, r1
 8004670:	f143 0300 	adc.w	r3, r3, #0
 8004674:	0852      	lsrs	r2, r2, #1
 8004676:	ea42 71c3 	orr.w	r1, r2, r3, lsl #31
 800467a:	105f      	asrs	r7, r3, #1
 800467c:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 800467e:	4433      	add	r3, r6
 8004680:	84a3      	strh	r3, [r4, #36]	@ 0x24
 8004682:	3001      	adds	r0, #1
 8004684:	b200      	sxth	r0, r0
        for (adder = 0, i = 0; tmp > 0 || i < (short)lwi->m.precision;
 8004686:	2901      	cmp	r1, #1
 8004688:	f177 0300 	sbcs.w	r3, r7, #0
 800468c:	db4a      	blt.n	8004724 <prv_calculate_dbl_num_data+0x2c4>
            if (adder == 0 && (tmp % 10) > 0) {
 800468e:	2e00      	cmp	r6, #0
 8004690:	d1c5      	bne.n	800461e <prv_calculate_dbl_num_data+0x1be>
 8004692:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 8004696:	f00c 0e03 	and.w	lr, ip, #3
 800469a:	f021 4370 	bic.w	r3, r1, #4026531840	@ 0xf0000000
 800469e:	0f0a      	lsrs	r2, r1, #28
 80046a0:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 80046a4:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80046a8:	4413      	add	r3, r2
 80046aa:	eb03 6317 	add.w	r3, r3, r7, lsr #24
 80046ae:	4473      	add	r3, lr
 80046b0:	4a21      	ldr	r2, [pc, #132]	@ (8004738 <prv_calculate_dbl_num_data+0x2d8>)
 80046b2:	fba2 e803 	umull	lr, r8, r2, r3
 80046b6:	f028 0e03 	bic.w	lr, r8, #3
 80046ba:	eb0e 0e98 	add.w	lr, lr, r8, lsr #2
 80046be:	eba3 030e 	sub.w	r3, r3, lr
 80046c2:	f02c 0c03 	bic.w	ip, ip, #3
 80046c6:	4463      	add	r3, ip
 80046c8:	ebb1 0c03 	subs.w	ip, r1, r3
 80046cc:	eb67 73e3 	sbc.w	r3, r7, r3, asr #31
 80046d0:	f04f 3ecc 	mov.w	lr, #3435973836	@ 0xcccccccc
 80046d4:	fb0e fe0c 	mul.w	lr, lr, ip
 80046d8:	fb02 ee03 	mla	lr, r2, r3, lr
 80046dc:	fbac 3202 	umull	r3, r2, ip, r2
 80046e0:	4472      	add	r2, lr
 80046e2:	ea4f 7cd2 	mov.w	ip, r2, lsr #31
 80046e6:	eb1c 0c03 	adds.w	ip, ip, r3
 80046ea:	f142 0200 	adc.w	r2, r2, #0
 80046ee:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80046f2:	ea4c 7cc2 	orr.w	ip, ip, r2, lsl #31
 80046f6:	1052      	asrs	r2, r2, #1
 80046f8:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 80046fc:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 8004700:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8004704:	eb13 030c 	adds.w	r3, r3, ip
 8004708:	eb42 020e 	adc.w	r2, r2, lr
 800470c:	18db      	adds	r3, r3, r3
 800470e:	4152      	adcs	r2, r2
 8004710:	1acb      	subs	r3, r1, r3
 8004712:	eb67 0202 	sbc.w	r2, r7, r2
 8004716:	2b01      	cmp	r3, #1
 8004718:	f172 0200 	sbcs.w	r2, r2, #0
 800471c:	f6ff af7f 	blt.w	800461e <prv_calculate_dbl_num_data+0x1be>
                adder = 1;
 8004720:	2601      	movs	r6, #1
 8004722:	e77c      	b.n	800461e <prv_calculate_dbl_num_data+0x1be>
        for (adder = 0, i = 0; tmp > 0 || i < (short)lwi->m.precision;
 8004724:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8004728:	4283      	cmp	r3, r0
 800472a:	dcb0      	bgt.n	800468e <prv_calculate_dbl_num_data+0x22e>
 800472c:	e71b      	b.n	8004566 <prv_calculate_dbl_num_data+0x106>
 800472e:	bf00      	nop
 8004730:	08007918 	.word	0x08007918
 8004734:	3fe00000 	.word	0x3fe00000
 8004738:	cccccccd 	.word	0xcccccccd
 800473c:	86a12b9b 	.word	0x86a12b9b
 8004740:	3cf6849b 	.word	0x3cf6849b
 8004744:	00000000 	.word	0x00000000

08004748 <prv_double_to_str>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_double_to_str(lwprintf_int_t* lwi, double in_num) {
 8004748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474c:	b093      	sub	sp, #76	@ 0x4c
 800474e:	4604      	mov	r4, r0
 8004750:	ec59 8b10 	vmov	r8, r9, d0
    double orig_num = in_num;
    int digits_cnt, chosen_precision, i;
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    int exp_cnt = 0;
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    char def_type = lwi->m.type;
 8004754:	f890 5029 	ldrb.w	r5, [r0, #41]	@ 0x29
     * - Print negative infinity if number is less than -FLOAT_MAX_B_ENG and engineering mode is disabled
     * - Print positive infinity if number is greater than absolute minimum
     * - Print positive infinity if number is greater than FLOAT_MAX_B_ENG and engineering mode is disabled
     * - Go to engineering mode if it is enabled and `in_num < -FLOAT_MAX_B_ENG` or `in_num > FLOAT_MAX_B_ENG`
     */
    if (in_num != in_num) {
 8004758:	4642      	mov	r2, r8
 800475a:	464b      	mov	r3, r9
 800475c:	4640      	mov	r0, r8
 800475e:	4649      	mov	r1, r9
 8004760:	f7fc f9aa 	bl	8000ab8 <__aeabi_dcmpeq>
 8004764:	2800      	cmp	r0, #0
 8004766:	d063      	beq.n	8004830 <prv_double_to_str+0xe8>
        return prv_out_str(lwi, lwi->m.flags.uc ? "NAN" : "nan", 3);
    } else if (in_num < -DBL_MAX
 8004768:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800476c:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 8004770:	4640      	mov	r0, r8
 8004772:	4649      	mov	r1, r9
 8004774:	f7fc f9aa 	bl	8000acc <__aeabi_dcmplt>
 8004778:	2800      	cmp	r0, #0
 800477a:	d167      	bne.n	800484c <prv_double_to_str+0x104>
#if !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
               || in_num < -FLOAT_MAX_B_ENG
#endif /* !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    ) {
        return prv_out_str(lwi, lwi->m.flags.uc ? "-INF" : "-inf", 4);
    } else if (in_num > DBL_MAX
 800477c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004780:	4ba7      	ldr	r3, [pc, #668]	@ (8004a20 <prv_double_to_str+0x2d8>)
 8004782:	4640      	mov	r0, r8
 8004784:	4649      	mov	r1, r9
 8004786:	f7fc f9bf 	bl	8000b08 <__aeabi_dcmpgt>
 800478a:	2800      	cmp	r0, #0
 800478c:	d16a      	bne.n	8004864 <prv_double_to_str+0x11c>
            *s_ptr++ = '+';
        }
        strcpy(s_ptr, lwi->m.flags.uc ? "INF" : "inf");
        return prv_out_str(lwi, str, lwi->m.flags.plus ? 4 : 3);
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    } else if ((in_num < -FLOAT_MAX_B_ENG || in_num > FLOAT_MAX_B_ENG) && def_type != 'g') {
 800478e:	a3a0      	add	r3, pc, #640	@ (adr r3, 8004a10 <prv_double_to_str+0x2c8>)
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	4640      	mov	r0, r8
 8004796:	4649      	mov	r1, r9
 8004798:	f7fc f998 	bl	8000acc <__aeabi_dcmplt>
 800479c:	b938      	cbnz	r0, 80047ae <prv_double_to_str+0x66>
 800479e:	a39e      	add	r3, pc, #632	@ (adr r3, 8004a18 <prv_double_to_str+0x2d0>)
 80047a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a4:	4640      	mov	r0, r8
 80047a6:	4649      	mov	r1, r9
 80047a8:	f7fc f9ae 	bl	8000b08 <__aeabi_dcmpgt>
 80047ac:	b120      	cbz	r0, 80047b8 <prv_double_to_str+0x70>
 80047ae:	2d67      	cmp	r5, #103	@ 0x67
 80047b0:	d002      	beq.n	80047b8 <prv_double_to_str+0x70>
        lwi->m.type = def_type = 'e'; /* Go to engineering mode */
 80047b2:	2565      	movs	r5, #101	@ 0x65
 80047b4:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
#endif                                /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    }

    /* Check sign of the number */
    SIGNED_CHECK_NEGATIVE(lwi, in_num);
 80047b8:	2200      	movs	r2, #0
 80047ba:	2300      	movs	r3, #0
 80047bc:	4640      	mov	r0, r8
 80047be:	4649      	mov	r1, r9
 80047c0:	f7fc f984 	bl	8000acc <__aeabi_dcmplt>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	d16d      	bne.n	80048a4 <prv_double_to_str+0x15c>
    orig_num = in_num;

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Engineering mode check for number of exponents */
    if (def_type == 'e' || def_type == 'g'
 80047c8:	2d65      	cmp	r5, #101	@ 0x65
 80047ca:	d00b      	beq.n	80047e4 <prv_double_to_str+0x9c>
 80047cc:	2d67      	cmp	r5, #103	@ 0x67
 80047ce:	d009      	beq.n	80047e4 <prv_double_to_str+0x9c>
        || in_num > (double)(powers_of_10[LWPRINTF_ARRAYSIZE(powers_of_10) - 1])) { /* More vs what float can hold */
 80047d0:	a391      	add	r3, pc, #580	@ (adr r3, 8004a18 <prv_double_to_str+0x2d0>)
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	4640      	mov	r0, r8
 80047d8:	4649      	mov	r1, r9
 80047da:	f7fc f995 	bl	8000b08 <__aeabi_dcmpgt>
 80047de:	2800      	cmp	r0, #0
 80047e0:	f000 8087 	beq.w	80048f2 <prv_double_to_str+0x1aa>
        if (lwi->m.type != 'g') {
 80047e4:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80047e8:	2b67      	cmp	r3, #103	@ 0x67
 80047ea:	d002      	beq.n	80047f2 <prv_double_to_str+0xaa>
            lwi->m.type = 'e';
 80047ec:	2365      	movs	r3, #101	@ 0x65
 80047ee:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
        }

        /* Normalize number to be between 0 and 1 and count decimals for exponent */
        if (in_num < 1) {
 80047f2:	2200      	movs	r2, #0
 80047f4:	4b8b      	ldr	r3, [pc, #556]	@ (8004a24 <prv_double_to_str+0x2dc>)
 80047f6:	4640      	mov	r0, r8
 80047f8:	4649      	mov	r1, r9
 80047fa:	f7fc f967 	bl	8000acc <__aeabi_dcmplt>
 80047fe:	2800      	cmp	r0, #0
 8004800:	d172      	bne.n	80048e8 <prv_double_to_str+0x1a0>
 8004802:	4646      	mov	r6, r8
 8004804:	464f      	mov	r7, r9
            for (exp_cnt = 0; in_num < 1 && in_num > 0; in_num *= 10, --exp_cnt) {}
        } else {
            for (exp_cnt = 0; in_num >= 10; in_num /= 10, ++exp_cnt) {}
 8004806:	f04f 0a00 	mov.w	sl, #0
 800480a:	2200      	movs	r2, #0
 800480c:	4b86      	ldr	r3, [pc, #536]	@ (8004a28 <prv_double_to_str+0x2e0>)
 800480e:	4630      	mov	r0, r6
 8004810:	4639      	mov	r1, r7
 8004812:	f7fc f96f 	bl	8000af4 <__aeabi_dcmpge>
 8004816:	2800      	cmp	r0, #0
 8004818:	d06f      	beq.n	80048fa <prv_double_to_str+0x1b2>
 800481a:	2200      	movs	r2, #0
 800481c:	4b82      	ldr	r3, [pc, #520]	@ (8004a28 <prv_double_to_str+0x2e0>)
 800481e:	4630      	mov	r0, r6
 8004820:	4639      	mov	r1, r7
 8004822:	f7fc f80b 	bl	800083c <__aeabi_ddiv>
 8004826:	4606      	mov	r6, r0
 8004828:	460f      	mov	r7, r1
 800482a:	f10a 0a01 	add.w	sl, sl, #1
 800482e:	e7ec      	b.n	800480a <prv_double_to_str+0xc2>
        return prv_out_str(lwi, lwi->m.flags.uc ? "NAN" : "nan", 3);
 8004830:	7f63      	ldrb	r3, [r4, #29]
 8004832:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004836:	d007      	beq.n	8004848 <prv_double_to_str+0x100>
 8004838:	497c      	ldr	r1, [pc, #496]	@ (8004a2c <prv_double_to_str+0x2e4>)
 800483a:	2203      	movs	r2, #3
 800483c:	4620      	mov	r0, r4
 800483e:	f7ff fd94 	bl	800436a <prv_out_str>
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    prv_out_str_after(lwi, digits_cnt);

    return 1;
}
 8004842:	b013      	add	sp, #76	@ 0x4c
 8004844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return prv_out_str(lwi, lwi->m.flags.uc ? "NAN" : "nan", 3);
 8004848:	4979      	ldr	r1, [pc, #484]	@ (8004a30 <prv_double_to_str+0x2e8>)
 800484a:	e7f6      	b.n	800483a <prv_double_to_str+0xf2>
        return prv_out_str(lwi, lwi->m.flags.uc ? "-INF" : "-inf", 4);
 800484c:	7f63      	ldrb	r3, [r4, #29]
 800484e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004852:	d005      	beq.n	8004860 <prv_double_to_str+0x118>
 8004854:	4977      	ldr	r1, [pc, #476]	@ (8004a34 <prv_double_to_str+0x2ec>)
 8004856:	2204      	movs	r2, #4
 8004858:	4620      	mov	r0, r4
 800485a:	f7ff fd86 	bl	800436a <prv_out_str>
 800485e:	e7f0      	b.n	8004842 <prv_double_to_str+0xfa>
 8004860:	4975      	ldr	r1, [pc, #468]	@ (8004a38 <prv_double_to_str+0x2f0>)
 8004862:	e7f8      	b.n	8004856 <prv_double_to_str+0x10e>
        if (lwi->m.flags.plus) {
 8004864:	7f23      	ldrb	r3, [r4, #28]
 8004866:	f013 0f02 	tst.w	r3, #2
 800486a:	d015      	beq.n	8004898 <prv_double_to_str+0x150>
            *s_ptr++ = '+';
 800486c:	232b      	movs	r3, #43	@ 0x2b
 800486e:	f88d 3000 	strb.w	r3, [sp]
 8004872:	f10d 0201 	add.w	r2, sp, #1
        strcpy(s_ptr, lwi->m.flags.uc ? "INF" : "inf");
 8004876:	7f63      	ldrb	r3, [r4, #29]
 8004878:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800487c:	d00e      	beq.n	800489c <prv_double_to_str+0x154>
 800487e:	4b6f      	ldr	r3, [pc, #444]	@ (8004a3c <prv_double_to_str+0x2f4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6013      	str	r3, [r2, #0]
        return prv_out_str(lwi, str, lwi->m.flags.plus ? 4 : 3);
 8004884:	7f23      	ldrb	r3, [r4, #28]
 8004886:	f013 0f02 	tst.w	r3, #2
 800488a:	d009      	beq.n	80048a0 <prv_double_to_str+0x158>
 800488c:	2204      	movs	r2, #4
 800488e:	4669      	mov	r1, sp
 8004890:	4620      	mov	r0, r4
 8004892:	f7ff fd6a 	bl	800436a <prv_out_str>
 8004896:	e7d4      	b.n	8004842 <prv_double_to_str+0xfa>
        char str[5], *s_ptr = str;
 8004898:	466a      	mov	r2, sp
 800489a:	e7ec      	b.n	8004876 <prv_double_to_str+0x12e>
        strcpy(s_ptr, lwi->m.flags.uc ? "INF" : "inf");
 800489c:	4b68      	ldr	r3, [pc, #416]	@ (8004a40 <prv_double_to_str+0x2f8>)
 800489e:	e7ef      	b.n	8004880 <prv_double_to_str+0x138>
        return prv_out_str(lwi, str, lwi->m.flags.plus ? 4 : 3);
 80048a0:	2203      	movs	r2, #3
 80048a2:	e7f4      	b.n	800488e <prv_double_to_str+0x146>
    SIGNED_CHECK_NEGATIVE(lwi, in_num);
 80048a4:	7f63      	ldrb	r3, [r4, #29]
 80048a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048aa:	7763      	strb	r3, [r4, #29]
 80048ac:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80048b0:	4699      	mov	r9, r3
 80048b2:	e789      	b.n	80047c8 <prv_double_to_str+0x80>
            for (exp_cnt = 0; in_num < 1 && in_num > 0; in_num *= 10, --exp_cnt) {}
 80048b4:	2200      	movs	r2, #0
 80048b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004a28 <prv_double_to_str+0x2e0>)
 80048b8:	4630      	mov	r0, r6
 80048ba:	4639      	mov	r1, r7
 80048bc:	f7fb fe94 	bl	80005e8 <__aeabi_dmul>
 80048c0:	4606      	mov	r6, r0
 80048c2:	460f      	mov	r7, r1
 80048c4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80048c8:	2200      	movs	r2, #0
 80048ca:	4b56      	ldr	r3, [pc, #344]	@ (8004a24 <prv_double_to_str+0x2dc>)
 80048cc:	4630      	mov	r0, r6
 80048ce:	4639      	mov	r1, r7
 80048d0:	f7fc f8fc 	bl	8000acc <__aeabi_dcmplt>
 80048d4:	b188      	cbz	r0, 80048fa <prv_double_to_str+0x1b2>
 80048d6:	2200      	movs	r2, #0
 80048d8:	2300      	movs	r3, #0
 80048da:	4630      	mov	r0, r6
 80048dc:	4639      	mov	r1, r7
 80048de:	f7fc f913 	bl	8000b08 <__aeabi_dcmpgt>
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d1e6      	bne.n	80048b4 <prv_double_to_str+0x16c>
 80048e6:	e008      	b.n	80048fa <prv_double_to_str+0x1b2>
 80048e8:	4646      	mov	r6, r8
 80048ea:	464f      	mov	r7, r9
 80048ec:	f04f 0a00 	mov.w	sl, #0
 80048f0:	e7ea      	b.n	80048c8 <prv_double_to_str+0x180>
 80048f2:	4646      	mov	r6, r8
 80048f4:	464f      	mov	r7, r9
    int exp_cnt = 0;
 80048f6:	f04f 0a00 	mov.w	sl, #0
    chosen_precision = lwi->m.precision; /* This is default value coming from app */
 80048fa:	f8d4 b020 	ldr.w	fp, [r4, #32]
    if (lwi->m.precision >= (int)LWPRINTF_ARRAYSIZE(powers_of_10)) {
 80048fe:	f1bb 0f12 	cmp.w	fp, #18
 8004902:	dd36      	ble.n	8004972 <prv_double_to_str+0x22a>
        lwi->m.precision = (int)LWPRINTF_ARRAYSIZE(powers_of_10) - 1; /* Limit to maximum precision */
 8004904:	2312      	movs	r3, #18
 8004906:	6223      	str	r3, [r4, #32]
    prv_calculate_dbl_num_data(lwi, &dblnum, def_type == 'e' ? in_num : orig_num, def_type);
 8004908:	2d65      	cmp	r5, #101	@ 0x65
 800490a:	d044      	beq.n	8004996 <prv_double_to_str+0x24e>
 800490c:	ec49 8b10 	vmov	d0, r8, r9
 8004910:	462a      	mov	r2, r5
 8004912:	a908      	add	r1, sp, #32
 8004914:	4620      	mov	r0, r4
 8004916:	f7ff fda3 	bl	8004460 <prv_calculate_dbl_num_data>
    if (def_type == 'g') {
 800491a:	2d67      	cmp	r5, #103	@ 0x67
 800491c:	d03e      	beq.n	800499c <prv_double_to_str+0x254>
    digits_cnt = dblnum.digits_cnt_integer_part;
 800491e:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
        if (chosen_precision > 0 && lwi->m.flags.precision) {
 8004922:	f1bb 0f00 	cmp.w	fp, #0
 8004926:	dd06      	ble.n	8004936 <prv_double_to_str+0x1ee>
 8004928:	7f23      	ldrb	r3, [r4, #28]
 800492a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800492e:	d002      	beq.n	8004936 <prv_double_to_str+0x1ee>
            digits_cnt += chosen_precision + 1;
 8004930:	f10b 0301 	add.w	r3, fp, #1
 8004934:	4419      	add	r1, r3
    if (lwi->m.type == 'e') {
 8004936:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 800493a:	2b65      	cmp	r3, #101	@ 0x65
 800493c:	d05d      	beq.n	80049fa <prv_double_to_str+0x2b2>
    prv_out_str_before(lwi, digits_cnt);
 800493e:	460f      	mov	r7, r1
 8004940:	4620      	mov	r0, r4
 8004942:	f7ff fc3d 	bl	80041c0 <prv_out_str_before>
    if (dblnum.integer_part == 0) {
 8004946:	9b08      	ldr	r3, [sp, #32]
 8004948:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800494a:	4313      	orrs	r3, r2
 800494c:	d17a      	bne.n	8004a44 <prv_double_to_str+0x2fc>
        lwi->out_fn(lwi, '0');
 800494e:	6963      	ldr	r3, [r4, #20]
 8004950:	2130      	movs	r1, #48	@ 0x30
 8004952:	4620      	mov	r0, r4
 8004954:	4798      	blx	r3
    if (lwi->m.precision > 0) {
 8004956:	6a23      	ldr	r3, [r4, #32]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f340 81a8 	ble.w	8004cae <prv_double_to_str+0x566>
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 800495e:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8004962:	2b00      	cmp	r3, #0
 8004964:	dd03      	ble.n	800496e <prv_double_to_str+0x226>
            lwi->out_fn(lwi, '.');
 8004966:	6963      	ldr	r3, [r4, #20]
 8004968:	212e      	movs	r1, #46	@ 0x2e
 800496a:	4620      	mov	r0, r4
 800496c:	4798      	blx	r3
        for (i = 0; dblnum.integer_part > 0; dblnum.integer_part /= 10, ++i) {
 800496e:	2600      	movs	r6, #0
 8004970:	e153      	b.n	8004c1a <prv_double_to_str+0x4d2>
    } else if (!lwi->m.flags.precision) {
 8004972:	7f23      	ldrb	r3, [r4, #28]
 8004974:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004978:	d103      	bne.n	8004982 <prv_double_to_str+0x23a>
        lwi->m.precision = LWPRINTF_CFG_FLOAT_DEFAULT_PRECISION; /* Default precision when not used */
 800497a:	2306      	movs	r3, #6
 800497c:	6223      	str	r3, [r4, #32]
        chosen_precision = lwi->m.precision;                     /* There was no precision, update chosen precision */
 800497e:	469b      	mov	fp, r3
 8004980:	e7c2      	b.n	8004908 <prv_double_to_str+0x1c0>
    } else if (lwi->m.flags.precision && lwi->m.precision == 0) {
 8004982:	f1bb 0f00 	cmp.w	fp, #0
 8004986:	d1bf      	bne.n	8004908 <prv_double_to_str+0x1c0>
        if (def_type == 'g') {
 8004988:	2d67      	cmp	r5, #103	@ 0x67
 800498a:	d1bd      	bne.n	8004908 <prv_double_to_str+0x1c0>
            lwi->m.precision = 1;
 800498c:	2301      	movs	r3, #1
 800498e:	6223      	str	r3, [r4, #32]
    prv_calculate_dbl_num_data(lwi, &dblnum, def_type == 'e' ? in_num : orig_num, def_type);
 8004990:	ec49 8b10 	vmov	d0, r8, r9
 8004994:	e7bc      	b.n	8004910 <prv_double_to_str+0x1c8>
 8004996:	ec47 6b10 	vmov	d0, r6, r7
 800499a:	e7b9      	b.n	8004910 <prv_double_to_str+0x1c8>
        if (exp_cnt >= -4 && exp_cnt < lwi->m.precision) {
 800499c:	f11a 0f04 	cmn.w	sl, #4
 80049a0:	db0e      	blt.n	80049c0 <prv_double_to_str+0x278>
 80049a2:	6a23      	ldr	r3, [r4, #32]
 80049a4:	4553      	cmp	r3, sl
 80049a6:	dd0b      	ble.n	80049c0 <prv_double_to_str+0x278>
            lwi->m.precision -= exp_cnt + 1;
 80049a8:	f10a 0201 	add.w	r2, sl, #1
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	6223      	str	r3, [r4, #32]
            chosen_precision -= exp_cnt + 1;
 80049b0:	ebab 0b02 	sub.w	fp, fp, r2
            lwi->m.type = 'f';
 80049b4:	2366      	movs	r3, #102	@ 0x66
 80049b6:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
            in_num = orig_num;
 80049ba:	4646      	mov	r6, r8
 80049bc:	464f      	mov	r7, r9
 80049be:	e009      	b.n	80049d4 <prv_double_to_str+0x28c>
            lwi->m.type = 'e';
 80049c0:	2365      	movs	r3, #101	@ 0x65
 80049c2:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
            if (lwi->m.precision > 0) {
 80049c6:	6a23      	ldr	r3, [r4, #32]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	dd03      	ble.n	80049d4 <prv_double_to_str+0x28c>
                --lwi->m.precision;
 80049cc:	3b01      	subs	r3, #1
 80049ce:	6223      	str	r3, [r4, #32]
                --chosen_precision;
 80049d0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
        prv_calculate_dbl_num_data(lwi, &dblnum, in_num, def_type);
 80049d4:	462a      	mov	r2, r5
 80049d6:	ec47 6b10 	vmov	d0, r6, r7
 80049da:	a908      	add	r1, sp, #32
 80049dc:	4620      	mov	r0, r4
 80049de:	f7ff fd3f 	bl	8004460 <prv_calculate_dbl_num_data>
    digits_cnt = dblnum.digits_cnt_integer_part;
 80049e2:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
    } else if (def_type == 'g' && lwi->m.precision > 0) {
 80049e6:	6a23      	ldr	r3, [r4, #32]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	dd9a      	ble.n	8004922 <prv_double_to_str+0x1da>
        digits_cnt += dblnum.digits_cnt_decimal_part_useful;
 80049ec:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 80049f0:	4419      	add	r1, r3
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	dd9f      	ble.n	8004936 <prv_double_to_str+0x1ee>
            ++digits_cnt;
 80049f6:	3101      	adds	r1, #1
 80049f8:	e79d      	b.n	8004936 <prv_double_to_str+0x1ee>
        digits_cnt += 4 + (exp_cnt >= 100 || exp_cnt <= -100);
 80049fa:	f10a 0363 	add.w	r3, sl, #99	@ 0x63
 80049fe:	2bc6      	cmp	r3, #198	@ 0xc6
 8004a00:	d902      	bls.n	8004a08 <prv_double_to_str+0x2c0>
 8004a02:	2305      	movs	r3, #5
 8004a04:	4419      	add	r1, r3
 8004a06:	e79a      	b.n	800493e <prv_double_to_str+0x1f6>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	e7fb      	b.n	8004a04 <prv_double_to_str+0x2bc>
 8004a0c:	f3af 8000 	nop.w
 8004a10:	674ec800 	.word	0x674ec800
 8004a14:	c3abc16d 	.word	0xc3abc16d
 8004a18:	674ec800 	.word	0x674ec800
 8004a1c:	43abc16d 	.word	0x43abc16d
 8004a20:	7fefffff 	.word	0x7fefffff
 8004a24:	3ff00000 	.word	0x3ff00000
 8004a28:	40240000 	.word	0x40240000
 8004a2c:	080073dc 	.word	0x080073dc
 8004a30:	080073e0 	.word	0x080073e0
 8004a34:	080073e4 	.word	0x080073e4
 8004a38:	080073ec 	.word	0x080073ec
 8004a3c:	080073f4 	.word	0x080073f4
 8004a40:	080073f8 	.word	0x080073f8
        for (i = 0; dblnum.integer_part > 0; dblnum.integer_part /= 10, ++i) {
 8004a44:	2600      	movs	r6, #0
 8004a46:	9a08      	ldr	r2, [sp, #32]
 8004a48:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004a4a:	2a01      	cmp	r2, #1
 8004a4c:	f171 0300 	sbcs.w	r3, r1, #0
 8004a50:	db6b      	blt.n	8004b2a <prv_double_to_str+0x3e2>
            str[i] = (char)'0' + (char)(dblnum.integer_part % 10);
 8004a52:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8004a56:	f00c 0e03 	and.w	lr, ip, #3
 8004a5a:	f022 4370 	bic.w	r3, r2, #4026531840	@ 0xf0000000
 8004a5e:	0f10      	lsrs	r0, r2, #28
 8004a60:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8004a64:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
 8004a68:	4403      	add	r3, r0
 8004a6a:	eb03 6311 	add.w	r3, r3, r1, lsr #24
 8004a6e:	4473      	add	r3, lr
 8004a70:	48b4      	ldr	r0, [pc, #720]	@ (8004d44 <prv_double_to_str+0x5fc>)
 8004a72:	fba0 e803 	umull	lr, r8, r0, r3
 8004a76:	f028 0e03 	bic.w	lr, r8, #3
 8004a7a:	eb0e 0e98 	add.w	lr, lr, r8, lsr #2
 8004a7e:	eba3 030e 	sub.w	r3, r3, lr
 8004a82:	f02c 0c03 	bic.w	ip, ip, #3
 8004a86:	4463      	add	r3, ip
 8004a88:	ebb2 0c03 	subs.w	ip, r2, r3
 8004a8c:	eb61 73e3 	sbc.w	r3, r1, r3, asr #31
 8004a90:	f04f 3ecc 	mov.w	lr, #3435973836	@ 0xcccccccc
 8004a94:	fb0e fe0c 	mul.w	lr, lr, ip
 8004a98:	fb00 e303 	mla	r3, r0, r3, lr
 8004a9c:	fbac c000 	umull	ip, r0, ip, r0
 8004aa0:	4418      	add	r0, r3
 8004aa2:	0fc3      	lsrs	r3, r0, #31
 8004aa4:	eb13 030c 	adds.w	r3, r3, ip
 8004aa8:	f140 0000 	adc.w	r0, r0, #0
 8004aac:	085b      	lsrs	r3, r3, #1
 8004aae:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8004ab2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ab6:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	3330      	adds	r3, #48	@ 0x30
 8004abe:	f106 0048 	add.w	r0, r6, #72	@ 0x48
 8004ac2:	4468      	add	r0, sp
 8004ac4:	f800 3c40 	strb.w	r3, [r0, #-64]
        for (i = 0; dblnum.integer_part > 0; dblnum.integer_part /= 10, ++i) {
 8004ac8:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8004acc:	f00c 0e03 	and.w	lr, ip, #3
 8004ad0:	f022 4070 	bic.w	r0, r2, #4026531840	@ 0xf0000000
 8004ad4:	0f13      	lsrs	r3, r2, #28
 8004ad6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004ada:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004ade:	4418      	add	r0, r3
 8004ae0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
 8004ae4:	4470      	add	r0, lr
 8004ae6:	4b97      	ldr	r3, [pc, #604]	@ (8004d44 <prv_double_to_str+0x5fc>)
 8004ae8:	f028 0e03 	bic.w	lr, r8, #3
 8004aec:	eb0e 0e98 	add.w	lr, lr, r8, lsr #2
 8004af0:	eba0 000e 	sub.w	r0, r0, lr
 8004af4:	f02c 0c03 	bic.w	ip, ip, #3
 8004af8:	4460      	add	r0, ip
 8004afa:	1a12      	subs	r2, r2, r0
 8004afc:	eb61 70e0 	sbc.w	r0, r1, r0, asr #31
 8004b00:	f04f 31cc 	mov.w	r1, #3435973836	@ 0xcccccccc
 8004b04:	fb02 f101 	mul.w	r1, r2, r1
 8004b08:	fb03 1000 	mla	r0, r3, r0, r1
 8004b0c:	fba2 1303 	umull	r1, r3, r2, r3
 8004b10:	4403      	add	r3, r0
 8004b12:	0fda      	lsrs	r2, r3, #31
 8004b14:	1852      	adds	r2, r2, r1
 8004b16:	f143 0300 	adc.w	r3, r3, #0
 8004b1a:	0852      	lsrs	r2, r2, #1
 8004b1c:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8004b20:	105b      	asrs	r3, r3, #1
 8004b22:	9208      	str	r2, [sp, #32]
 8004b24:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b26:	3601      	adds	r6, #1
 8004b28:	e78d      	b.n	8004a46 <prv_double_to_str+0x2fe>
        for (; i > 0; --i) {
 8004b2a:	2e00      	cmp	r6, #0
 8004b2c:	f77f af13 	ble.w	8004956 <prv_double_to_str+0x20e>
            lwi->out_fn(lwi, str[i - 1]);
 8004b30:	6963      	ldr	r3, [r4, #20]
 8004b32:	3e01      	subs	r6, #1
 8004b34:	f106 0248 	add.w	r2, r6, #72	@ 0x48
 8004b38:	446a      	add	r2, sp
 8004b3a:	f812 1c40 	ldrb.w	r1, [r2, #-64]
 8004b3e:	4620      	mov	r0, r4
 8004b40:	4798      	blx	r3
        for (; i > 0; --i) {
 8004b42:	e7f2      	b.n	8004b2a <prv_double_to_str+0x3e2>
            str[i] = (char)'0' + (char)(dblnum.decimal_part % 10);
 8004b44:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8004b48:	f00c 0e03 	and.w	lr, ip, #3
 8004b4c:	f022 4370 	bic.w	r3, r2, #4026531840	@ 0xf0000000
 8004b50:	0f10      	lsrs	r0, r2, #28
 8004b52:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8004b56:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
 8004b5a:	4403      	add	r3, r0
 8004b5c:	eb03 6311 	add.w	r3, r3, r1, lsr #24
 8004b60:	4473      	add	r3, lr
 8004b62:	4878      	ldr	r0, [pc, #480]	@ (8004d44 <prv_double_to_str+0x5fc>)
 8004b64:	fba0 e803 	umull	lr, r8, r0, r3
 8004b68:	f028 0e03 	bic.w	lr, r8, #3
 8004b6c:	eb0e 0e98 	add.w	lr, lr, r8, lsr #2
 8004b70:	eba3 030e 	sub.w	r3, r3, lr
 8004b74:	f02c 0c03 	bic.w	ip, ip, #3
 8004b78:	4463      	add	r3, ip
 8004b7a:	ebb2 0c03 	subs.w	ip, r2, r3
 8004b7e:	eb61 73e3 	sbc.w	r3, r1, r3, asr #31
 8004b82:	f04f 3ecc 	mov.w	lr, #3435973836	@ 0xcccccccc
 8004b86:	fb0e fe0c 	mul.w	lr, lr, ip
 8004b8a:	fb00 e303 	mla	r3, r0, r3, lr
 8004b8e:	fbac c000 	umull	ip, r0, ip, r0
 8004b92:	4418      	add	r0, r3
 8004b94:	0fc3      	lsrs	r3, r0, #31
 8004b96:	eb13 030c 	adds.w	r3, r3, ip
 8004b9a:	f140 0000 	adc.w	r0, r0, #0
 8004b9e:	085b      	lsrs	r3, r3, #1
 8004ba0:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8004ba4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ba8:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	3330      	adds	r3, #48	@ 0x30
 8004bb0:	f106 0048 	add.w	r0, r6, #72	@ 0x48
 8004bb4:	4468      	add	r0, sp
 8004bb6:	f800 3c40 	strb.w	r3, [r0, #-64]
        for (i = 0; dblnum.decimal_part > 0; dblnum.decimal_part /= 10, ++i) {
 8004bba:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8004bbe:	f00c 0e03 	and.w	lr, ip, #3
 8004bc2:	f022 4070 	bic.w	r0, r2, #4026531840	@ 0xf0000000
 8004bc6:	0f13      	lsrs	r3, r2, #28
 8004bc8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004bcc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004bd0:	4418      	add	r0, r3
 8004bd2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
 8004bd6:	4470      	add	r0, lr
 8004bd8:	4b5a      	ldr	r3, [pc, #360]	@ (8004d44 <prv_double_to_str+0x5fc>)
 8004bda:	f028 0e03 	bic.w	lr, r8, #3
 8004bde:	eb0e 0e98 	add.w	lr, lr, r8, lsr #2
 8004be2:	eba0 000e 	sub.w	r0, r0, lr
 8004be6:	f02c 0c03 	bic.w	ip, ip, #3
 8004bea:	4460      	add	r0, ip
 8004bec:	1a12      	subs	r2, r2, r0
 8004bee:	eb61 70e0 	sbc.w	r0, r1, r0, asr #31
 8004bf2:	f04f 31cc 	mov.w	r1, #3435973836	@ 0xcccccccc
 8004bf6:	fb02 f101 	mul.w	r1, r2, r1
 8004bfa:	fb03 1100 	mla	r1, r3, r0, r1
 8004bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004c02:	440b      	add	r3, r1
 8004c04:	0fd9      	lsrs	r1, r3, #31
 8004c06:	188a      	adds	r2, r1, r2
 8004c08:	f143 0300 	adc.w	r3, r3, #0
 8004c0c:	0852      	lsrs	r2, r2, #1
 8004c0e:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8004c12:	105b      	asrs	r3, r3, #1
 8004c14:	920c      	str	r2, [sp, #48]	@ 0x30
 8004c16:	930d      	str	r3, [sp, #52]	@ 0x34
 8004c18:	3601      	adds	r6, #1
 8004c1a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004c1c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004c1e:	2a01      	cmp	r2, #1
 8004c20:	f171 0300 	sbcs.w	r3, r1, #0
 8004c24:	da8e      	bge.n	8004b44 <prv_double_to_str+0x3fc>
        if (def_type == 'g') {
 8004c26:	2d67      	cmp	r5, #103	@ 0x67
 8004c28:	d015      	beq.n	8004c56 <prv_double_to_str+0x50e>
            for (x = i; x < lwi->m.precision; ++x) {
 8004c2a:	46b0      	mov	r8, r6
 8004c2c:	e01c      	b.n	8004c68 <prv_double_to_str+0x520>
                lwi->out_fn(lwi, '0');
 8004c2e:	6963      	ldr	r3, [r4, #20]
 8004c30:	2130      	movs	r1, #48	@ 0x30
 8004c32:	4620      	mov	r0, r4
 8004c34:	4798      	blx	r3
                 ++x, --dblnum.digits_cnt_decimal_part_useful) {
 8004c36:	f108 0801 	add.w	r8, r8, #1
 8004c3a:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
            for (x = 0; x < (lwi->m.precision - i) && dblnum.digits_cnt_decimal_part_useful > 0;
 8004c44:	6a23      	ldr	r3, [r4, #32]
 8004c46:	1b9b      	subs	r3, r3, r6
 8004c48:	4543      	cmp	r3, r8
 8004c4a:	dd10      	ble.n	8004c6e <prv_double_to_str+0x526>
 8004c4c:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	dcec      	bgt.n	8004c2e <prv_double_to_str+0x4e6>
 8004c54:	e00b      	b.n	8004c6e <prv_double_to_str+0x526>
 8004c56:	f04f 0800 	mov.w	r8, #0
 8004c5a:	e7f3      	b.n	8004c44 <prv_double_to_str+0x4fc>
                lwi->out_fn(lwi, '0');
 8004c5c:	6963      	ldr	r3, [r4, #20]
 8004c5e:	2130      	movs	r1, #48	@ 0x30
 8004c60:	4620      	mov	r0, r4
 8004c62:	4798      	blx	r3
            for (x = i; x < lwi->m.precision; ++x) {
 8004c64:	f108 0801 	add.w	r8, r8, #1
 8004c68:	6a23      	ldr	r3, [r4, #32]
 8004c6a:	4543      	cmp	r3, r8
 8004c6c:	dcf6      	bgt.n	8004c5c <prv_double_to_str+0x514>
        for (; i > 0; --i) {
 8004c6e:	2e00      	cmp	r6, #0
 8004c70:	dd12      	ble.n	8004c98 <prv_double_to_str+0x550>
            lwi->out_fn(lwi, str[i - 1]);
 8004c72:	6963      	ldr	r3, [r4, #20]
 8004c74:	3e01      	subs	r6, #1
 8004c76:	f106 0248 	add.w	r2, r6, #72	@ 0x48
 8004c7a:	446a      	add	r2, sp
 8004c7c:	f812 1c40 	ldrb.w	r1, [r2, #-64]
 8004c80:	4620      	mov	r0, r4
 8004c82:	4798      	blx	r3
            if (def_type == 'g' && --dblnum.digits_cnt_decimal_part_useful == 0) {
 8004c84:	2d67      	cmp	r5, #103	@ 0x67
 8004c86:	d1f2      	bne.n	8004c6e <prv_double_to_str+0x526>
 8004c88:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b21b      	sxth	r3, r3
 8004c90:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1ea      	bne.n	8004c6e <prv_double_to_str+0x526>
        if (def_type != 'g') {
 8004c98:	2d67      	cmp	r5, #103	@ 0x67
 8004c9a:	d106      	bne.n	8004caa <prv_double_to_str+0x562>
 8004c9c:	e007      	b.n	8004cae <prv_double_to_str+0x566>
                lwi->out_fn(lwi, '0');
 8004c9e:	6963      	ldr	r3, [r4, #20]
 8004ca0:	2130      	movs	r1, #48	@ 0x30
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	4798      	blx	r3
            for (; x < chosen_precision; ++x) {
 8004ca6:	f108 0801 	add.w	r8, r8, #1
 8004caa:	45c3      	cmp	fp, r8
 8004cac:	dcf7      	bgt.n	8004c9e <prv_double_to_str+0x556>
    if (lwi->m.type == 'e') {
 8004cae:	f894 1029 	ldrb.w	r1, [r4, #41]	@ 0x29
 8004cb2:	2965      	cmp	r1, #101	@ 0x65
 8004cb4:	d005      	beq.n	8004cc2 <prv_double_to_str+0x57a>
    prv_out_str_after(lwi, digits_cnt);
 8004cb6:	4639      	mov	r1, r7
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f7ff fb35 	bl	8004328 <prv_out_str_after>
    return 1;
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	e5bf      	b.n	8004842 <prv_double_to_str+0xfa>
        lwi->out_fn(lwi, lwi->m.flags.uc ? 'E' : 'e');
 8004cc2:	6963      	ldr	r3, [r4, #20]
 8004cc4:	7f62      	ldrb	r2, [r4, #29]
 8004cc6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004cca:	d000      	beq.n	8004cce <prv_double_to_str+0x586>
 8004ccc:	2145      	movs	r1, #69	@ 0x45
 8004cce:	4620      	mov	r0, r4
 8004cd0:	4798      	blx	r3
        lwi->out_fn(lwi, exp_cnt >= 0 ? '+' : '-');
 8004cd2:	6963      	ldr	r3, [r4, #20]
 8004cd4:	f1ba 0f00 	cmp.w	sl, #0
 8004cd8:	db2e      	blt.n	8004d38 <prv_double_to_str+0x5f0>
 8004cda:	212b      	movs	r1, #43	@ 0x2b
 8004cdc:	4620      	mov	r0, r4
 8004cde:	4798      	blx	r3
        if (exp_cnt < 0) {
 8004ce0:	f1ba 0f00 	cmp.w	sl, #0
 8004ce4:	db2a      	blt.n	8004d3c <prv_double_to_str+0x5f4>
        if (exp_cnt >= 100) {
 8004ce6:	f1ba 0f63 	cmp.w	sl, #99	@ 0x63
 8004cea:	dd0d      	ble.n	8004d08 <prv_double_to_str+0x5c0>
            lwi->out_fn(lwi, (char)'0' + (char)(exp_cnt / 100));
 8004cec:	6963      	ldr	r3, [r4, #20]
 8004cee:	4a16      	ldr	r2, [pc, #88]	@ (8004d48 <prv_double_to_str+0x600>)
 8004cf0:	fb82 120a 	smull	r1, r2, r2, sl
 8004cf4:	ea4f 7aea 	mov.w	sl, sl, asr #31
 8004cf8:	ebca 1a62 	rsb	sl, sl, r2, asr #5
 8004cfc:	fa5f f18a 	uxtb.w	r1, sl
 8004d00:	3130      	adds	r1, #48	@ 0x30
 8004d02:	b2c9      	uxtb	r1, r1
 8004d04:	4620      	mov	r0, r4
 8004d06:	4798      	blx	r3
        lwi->out_fn(lwi, (char)'0' + (char)(exp_cnt / 10));
 8004d08:	6963      	ldr	r3, [r4, #20]
 8004d0a:	4a10      	ldr	r2, [pc, #64]	@ (8004d4c <prv_double_to_str+0x604>)
 8004d0c:	fb82 120a 	smull	r1, r2, r2, sl
 8004d10:	ea4f 75ea 	mov.w	r5, sl, asr #31
 8004d14:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
 8004d18:	b2e9      	uxtb	r1, r5
 8004d1a:	3130      	adds	r1, #48	@ 0x30
 8004d1c:	b2c9      	uxtb	r1, r1
 8004d1e:	4620      	mov	r0, r4
 8004d20:	4798      	blx	r3
        lwi->out_fn(lwi, (char)'0' + (char)(exp_cnt % 10));
 8004d22:	6963      	ldr	r3, [r4, #20]
 8004d24:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004d28:	ebaa 0145 	sub.w	r1, sl, r5, lsl #1
 8004d2c:	b2c9      	uxtb	r1, r1
 8004d2e:	3130      	adds	r1, #48	@ 0x30
 8004d30:	b2c9      	uxtb	r1, r1
 8004d32:	4620      	mov	r0, r4
 8004d34:	4798      	blx	r3
 8004d36:	e7be      	b.n	8004cb6 <prv_double_to_str+0x56e>
        lwi->out_fn(lwi, exp_cnt >= 0 ? '+' : '-');
 8004d38:	212d      	movs	r1, #45	@ 0x2d
 8004d3a:	e7cf      	b.n	8004cdc <prv_double_to_str+0x594>
            exp_cnt = -exp_cnt;
 8004d3c:	f1ca 0a00 	rsb	sl, sl, #0
 8004d40:	e7d1      	b.n	8004ce6 <prv_double_to_str+0x59e>
 8004d42:	bf00      	nop
 8004d44:	cccccccd 	.word	0xcccccccd
 8004d48:	51eb851f 	.word	0x51eb851f
 8004d4c:	66666667 	.word	0x66666667

08004d50 <prv_strnlen>:
prv_strnlen(const char* str, size_t max_n) {
 8004d50:	4603      	mov	r3, r0
    size_t length = 0;
 8004d52:	2000      	movs	r0, #0
    for (; *str != '\0' && length < max_n; ++length, ++str) {}
 8004d54:	e001      	b.n	8004d5a <prv_strnlen+0xa>
 8004d56:	3001      	adds	r0, #1
 8004d58:	3301      	adds	r3, #1
 8004d5a:	781a      	ldrb	r2, [r3, #0]
 8004d5c:	b10a      	cbz	r2, 8004d62 <prv_strnlen+0x12>
 8004d5e:	4288      	cmp	r0, r1
 8004d60:	d3f9      	bcc.n	8004d56 <prv_strnlen+0x6>
}
 8004d62:	4770      	bx	lr

08004d64 <prv_format>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       arg: Variable parameters list
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_format(lwprintf_int_t* lwi, va_list arg) {
 8004d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	9101      	str	r1, [sp, #4]
    uint8_t detected = 0;
    const char* fmt = lwi->fmt;
 8004d6e:	6843      	ldr	r3, [r0, #4]
 8004d70:	9303      	str	r3, [sp, #12]
         || !lwprintf_sys_mutex_wait(&lwi->lwobj->mutex))) { /* Cannot acquire mutex */
        return 0;
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */

    while (fmt != NULL && *fmt != '\0') {
 8004d72:	e161      	b.n	8005038 <prv_format+0x2d4>
        if (*fmt != '%') {
            lwi->out_fn(lwi, *fmt); /* Output character */
            ++fmt;
            continue;
        }
        ++fmt;
 8004d74:	3301      	adds	r3, #1
 8004d76:	9303      	str	r3, [sp, #12]
        memset(&lwi->m, 0x00, sizeof(lwi->m)); /* Reset structure */
 8004d78:	2300      	movs	r3, #0
 8004d7a:	61e3      	str	r3, [r4, #28]
 8004d7c:	6223      	str	r3, [r4, #32]
 8004d7e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d80:	62a3      	str	r3, [r4, #40]	@ 0x28
        /* %[flags][width][.precision][length]type */
        /* Go to https://docs.majerle.eu for more info about supported features */

        /* Check [flags] */
        /* It can have multiple flags in any order */
        detected = 1;
 8004d82:	2501      	movs	r5, #1
 8004d84:	e022      	b.n	8004dcc <prv_format+0x68>
        do {
            switch (*fmt) {
                case '-': lwi->m.flags.left_align = 1; break;
 8004d86:	7f23      	ldrb	r3, [r4, #28]
 8004d88:	f043 0301 	orr.w	r3, r3, #1
 8004d8c:	7723      	strb	r3, [r4, #28]
                case '0': lwi->m.flags.zero = 1; break;
                case '\'': lwi->m.flags.thousands = 1; break;
                case '#': lwi->m.flags.alt = 1; break;
                default: detected = 0; break;
            }
            if (detected) {
 8004d8e:	b1e5      	cbz	r5, 8004dca <prv_format+0x66>
                ++fmt;
 8004d90:	3201      	adds	r2, #1
 8004d92:	9203      	str	r2, [sp, #12]
 8004d94:	e019      	b.n	8004dca <prv_format+0x66>
                case '+': lwi->m.flags.plus = 1; break;
 8004d96:	7f23      	ldrb	r3, [r4, #28]
 8004d98:	f043 0302 	orr.w	r3, r3, #2
 8004d9c:	7723      	strb	r3, [r4, #28]
 8004d9e:	e7f6      	b.n	8004d8e <prv_format+0x2a>
                case ' ': lwi->m.flags.space = 1; break;
 8004da0:	7f23      	ldrb	r3, [r4, #28]
 8004da2:	f043 0304 	orr.w	r3, r3, #4
 8004da6:	7723      	strb	r3, [r4, #28]
 8004da8:	e7f1      	b.n	8004d8e <prv_format+0x2a>
                case '0': lwi->m.flags.zero = 1; break;
 8004daa:	7f23      	ldrb	r3, [r4, #28]
 8004dac:	f043 0308 	orr.w	r3, r3, #8
 8004db0:	7723      	strb	r3, [r4, #28]
 8004db2:	e7ec      	b.n	8004d8e <prv_format+0x2a>
                case '\'': lwi->m.flags.thousands = 1; break;
 8004db4:	7f23      	ldrb	r3, [r4, #28]
 8004db6:	f043 0310 	orr.w	r3, r3, #16
 8004dba:	7723      	strb	r3, [r4, #28]
 8004dbc:	e7e7      	b.n	8004d8e <prv_format+0x2a>
                case '#': lwi->m.flags.alt = 1; break;
 8004dbe:	7f23      	ldrb	r3, [r4, #28]
 8004dc0:	f043 0320 	orr.w	r3, r3, #32
 8004dc4:	7723      	strb	r3, [r4, #28]
 8004dc6:	e7e2      	b.n	8004d8e <prv_format+0x2a>
            switch (*fmt) {
 8004dc8:	4605      	mov	r5, r0
            }
        } while (detected);
 8004dca:	b34d      	cbz	r5, 8004e20 <prv_format+0xbc>
            switch (*fmt) {
 8004dcc:	9a03      	ldr	r2, [sp, #12]
 8004dce:	7813      	ldrb	r3, [r2, #0]
 8004dd0:	3b20      	subs	r3, #32
 8004dd2:	2b10      	cmp	r3, #16
 8004dd4:	d8f8      	bhi.n	8004dc8 <prv_format+0x64>
 8004dd6:	a101      	add	r1, pc, #4	@ (adr r1, 8004ddc <prv_format+0x78>)
 8004dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ddc:	08004da1 	.word	0x08004da1
 8004de0:	08004dc9 	.word	0x08004dc9
 8004de4:	08004dc9 	.word	0x08004dc9
 8004de8:	08004dbf 	.word	0x08004dbf
 8004dec:	08004dc9 	.word	0x08004dc9
 8004df0:	08004dc9 	.word	0x08004dc9
 8004df4:	08004dc9 	.word	0x08004dc9
 8004df8:	08004db5 	.word	0x08004db5
 8004dfc:	08004dc9 	.word	0x08004dc9
 8004e00:	08004dc9 	.word	0x08004dc9
 8004e04:	08004dc9 	.word	0x08004dc9
 8004e08:	08004d97 	.word	0x08004d97
 8004e0c:	08004dc9 	.word	0x08004dc9
 8004e10:	08004d87 	.word	0x08004d87
 8004e14:	08004dc9 	.word	0x08004dc9
 8004e18:	08004dc9 	.word	0x08004dc9
 8004e1c:	08004dab 	.word	0x08004dab

        /* Check [width] */
        lwi->m.width = 0;
        if (CHARISNUM(*fmt)) { /* Fixed width check */
 8004e20:	9b03      	ldr	r3, [sp, #12]
 8004e22:	781a      	ldrb	r2, [r3, #0]
 8004e24:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b09      	cmp	r3, #9
 8004e2c:	d921      	bls.n	8004e72 <prv_format+0x10e>
            /* If number is negative, it has been captured from previous step (left align) */
            lwi->m.width = prv_parse_num(&fmt); /* Number from string directly */
        } else if (*fmt == '*') {               /* Or variable check */
 8004e2e:	2a2a      	cmp	r2, #42	@ 0x2a
 8004e30:	d024      	beq.n	8004e7c <prv_format+0x118>
            }
            ++fmt;
        }

        /* Check [.precision] */
        lwi->m.precision = 0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	6223      	str	r3, [r4, #32]
        if (*fmt == '.') { /* Precision flag is detected */
 8004e36:	9b03      	ldr	r3, [sp, #12]
 8004e38:	781a      	ldrb	r2, [r3, #0]
 8004e3a:	2a2e      	cmp	r2, #46	@ 0x2e
 8004e3c:	d030      	beq.n	8004ea0 <prv_format+0x13c>
            }
        }

        /* Check [length] */
        detected = 1;
        switch (*fmt) {
 8004e3e:	9a03      	ldr	r2, [sp, #12]
 8004e40:	7813      	ldrb	r3, [r2, #0]
 8004e42:	3b68      	subs	r3, #104	@ 0x68
 8004e44:	2b12      	cmp	r3, #18
 8004e46:	d872      	bhi.n	8004f2e <prv_format+0x1ca>
 8004e48:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004e4c:	00710047 	.word	0x00710047
 8004e50:	007100e1 	.word	0x007100e1
 8004e54:	00710059 	.word	0x00710059
 8004e58:	00710071 	.word	0x00710071
 8004e5c:	00710071 	.word	0x00710071
 8004e60:	00710071 	.word	0x00710071
 8004e64:	00710071 	.word	0x00710071
 8004e68:	00710071 	.word	0x00710071
 8004e6c:	00710071 	.word	0x00710071
 8004e70:	006b      	.short	0x006b
            lwi->m.width = prv_parse_num(&fmt); /* Number from string directly */
 8004e72:	a803      	add	r0, sp, #12
 8004e74:	f7ff f98f 	bl	8004196 <prv_parse_num>
 8004e78:	6260      	str	r0, [r4, #36]	@ 0x24
 8004e7a:	e7da      	b.n	8004e32 <prv_format+0xce>
            const int w = (int)va_arg(arg, int);
 8004e7c:	9b01      	ldr	r3, [sp, #4]
 8004e7e:	1d1a      	adds	r2, r3, #4
 8004e80:	9201      	str	r2, [sp, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
            if (w < 0) {
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	db04      	blt.n	8004e92 <prv_format+0x12e>
                lwi->m.width = w;
 8004e88:	6263      	str	r3, [r4, #36]	@ 0x24
            ++fmt;
 8004e8a:	9b03      	ldr	r3, [sp, #12]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	9303      	str	r3, [sp, #12]
 8004e90:	e7cf      	b.n	8004e32 <prv_format+0xce>
                lwi->m.flags.left_align = 1; /* Negative width means left aligned */
 8004e92:	7f22      	ldrb	r2, [r4, #28]
 8004e94:	f042 0201 	orr.w	r2, r2, #1
 8004e98:	7722      	strb	r2, [r4, #28]
                lwi->m.width = -w;
 8004e9a:	425b      	negs	r3, r3
 8004e9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e9e:	e7f4      	b.n	8004e8a <prv_format+0x126>
            lwi->m.flags.precision = 1;
 8004ea0:	7f22      	ldrb	r2, [r4, #28]
 8004ea2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ea6:	7722      	strb	r2, [r4, #28]
            if (*++fmt == '*') { /* Variable check */
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	9203      	str	r2, [sp, #12]
 8004eac:	785b      	ldrb	r3, [r3, #1]
 8004eae:	2b2a      	cmp	r3, #42	@ 0x2a
 8004eb0:	d008      	beq.n	8004ec4 <prv_format+0x160>
            } else if (CHARISNUM(*fmt)) { /* Directly in the string */
 8004eb2:	3b30      	subs	r3, #48	@ 0x30
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b09      	cmp	r3, #9
 8004eb8:	d8c1      	bhi.n	8004e3e <prv_format+0xda>
                lwi->m.precision = prv_parse_num(&fmt);
 8004eba:	a803      	add	r0, sp, #12
 8004ebc:	f7ff f96b 	bl	8004196 <prv_parse_num>
 8004ec0:	6220      	str	r0, [r4, #32]
 8004ec2:	e7bc      	b.n	8004e3e <prv_format+0xda>
                const int pr = (int)va_arg(arg, int);
 8004ec4:	9b01      	ldr	r3, [sp, #4]
 8004ec6:	1d1a      	adds	r2, r3, #4
 8004ec8:	9201      	str	r2, [sp, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
                lwi->m.precision = pr > 0 ? pr : 0;
 8004ecc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004ed0:	6223      	str	r3, [r4, #32]
                ++fmt;
 8004ed2:	9b03      	ldr	r3, [sp, #12]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	9303      	str	r3, [sp, #12]
 8004ed8:	e7b1      	b.n	8004e3e <prv_format+0xda>
            case 'h':
                lwi->m.flags.char_short = 1;     /* Single h detected */
 8004eda:	7f63      	ldrb	r3, [r4, #29]
 8004edc:	2101      	movs	r1, #1
 8004ede:	f361 0383 	bfi	r3, r1, #2, #2
 8004ee2:	7763      	strb	r3, [r4, #29]
                if (*++fmt == 'h') {             /* Does it follow by another h? */
 8004ee4:	1853      	adds	r3, r2, r1
 8004ee6:	9303      	str	r3, [sp, #12]
 8004ee8:	7853      	ldrb	r3, [r2, #1]
 8004eea:	2b68      	cmp	r3, #104	@ 0x68
 8004eec:	d11f      	bne.n	8004f2e <prv_format+0x1ca>
                    lwi->m.flags.char_short = 2; /* Second h detected */
 8004eee:	7f63      	ldrb	r3, [r4, #29]
 8004ef0:	2102      	movs	r1, #2
 8004ef2:	f361 0383 	bfi	r3, r1, #2, #2
 8004ef6:	7763      	strb	r3, [r4, #29]
                    ++fmt;
 8004ef8:	440a      	add	r2, r1
 8004efa:	9203      	str	r2, [sp, #12]
 8004efc:	e017      	b.n	8004f2e <prv_format+0x1ca>
                }
                break;
            case 'l':
                lwi->m.flags.longlong = 1;     /* Single l detected */
 8004efe:	7f63      	ldrb	r3, [r4, #29]
 8004f00:	2101      	movs	r1, #1
 8004f02:	f361 0301 	bfi	r3, r1, #0, #2
 8004f06:	7763      	strb	r3, [r4, #29]
                if (*++fmt == 'l') {           /* Does it follow by another l? */
 8004f08:	1853      	adds	r3, r2, r1
 8004f0a:	9303      	str	r3, [sp, #12]
 8004f0c:	7853      	ldrb	r3, [r2, #1]
 8004f0e:	2b6c      	cmp	r3, #108	@ 0x6c
 8004f10:	d10d      	bne.n	8004f2e <prv_format+0x1ca>
                    lwi->m.flags.longlong = 2; /* Second l detected */
 8004f12:	7f63      	ldrb	r3, [r4, #29]
 8004f14:	2102      	movs	r1, #2
 8004f16:	f361 0301 	bfi	r3, r1, #0, #2
 8004f1a:	7763      	strb	r3, [r4, #29]
                    ++fmt;
 8004f1c:	440a      	add	r2, r1
 8004f1e:	9203      	str	r2, [sp, #12]
 8004f20:	e005      	b.n	8004f2e <prv_format+0x1ca>
                }
                break;
            case 'L': break;
            case 'z':
                lwi->m.flags.sz_t = 1; /* Size T flag */
 8004f22:	7f63      	ldrb	r3, [r4, #29]
 8004f24:	f043 0310 	orr.w	r3, r3, #16
 8004f28:	7763      	strb	r3, [r4, #29]
                ++fmt;
 8004f2a:	3201      	adds	r2, #1
 8004f2c:	9203      	str	r2, [sp, #12]
            case 't': break;
            default: detected = 0;
        }

        /* Check type */
        lwi->m.type = *fmt + (char)((*fmt >= 'A' && *fmt <= 'Z') ? 0x20 : 0x00);
 8004f2e:	9a03      	ldr	r2, [sp, #12]
 8004f30:	7813      	ldrb	r3, [r2, #0]
 8004f32:	f1a3 0141 	sub.w	r1, r3, #65	@ 0x41
 8004f36:	b2c9      	uxtb	r1, r1
 8004f38:	2919      	cmp	r1, #25
 8004f3a:	d800      	bhi.n	8004f3e <prv_format+0x1da>
 8004f3c:	2520      	movs	r5, #32
 8004f3e:	442b      	add	r3, r5
 8004f40:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
        if (*fmt >= 'A' && *fmt <= 'Z') {
 8004f44:	7813      	ldrb	r3, [r2, #0]
 8004f46:	3b41      	subs	r3, #65	@ 0x41
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b19      	cmp	r3, #25
 8004f4c:	d803      	bhi.n	8004f56 <prv_format+0x1f2>
            lwi->m.flags.uc = 1;
 8004f4e:	7f63      	ldrb	r3, [r4, #29]
 8004f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f54:	7763      	strb	r3, [r4, #29]
        }
        switch (*fmt) {
 8004f56:	7811      	ldrb	r1, [r2, #0]
 8004f58:	f1a1 0325 	sub.w	r3, r1, #37	@ 0x25
 8004f5c:	2b53      	cmp	r3, #83	@ 0x53
 8004f5e:	f200 81e7 	bhi.w	8005330 <prv_format+0x5cc>
 8004f62:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004f66:	0179      	.short	0x0179
 8004f68:	01e501e5 	.word	0x01e501e5
 8004f6c:	01e501e5 	.word	0x01e501e5
 8004f70:	01e501e5 	.word	0x01e501e5
 8004f74:	01e501e5 	.word	0x01e501e5
 8004f78:	01e501e5 	.word	0x01e501e5
 8004f7c:	01e501e5 	.word	0x01e501e5
 8004f80:	01e501e5 	.word	0x01e501e5
 8004f84:	01e501e5 	.word	0x01e501e5
 8004f88:	01e501e5 	.word	0x01e501e5
 8004f8c:	01e501e5 	.word	0x01e501e5
 8004f90:	01e501e5 	.word	0x01e501e5
 8004f94:	01e501e5 	.word	0x01e501e5
 8004f98:	01e501e5 	.word	0x01e501e5
 8004f9c:	005b01e5 	.word	0x005b01e5
 8004fa0:	01e500b2 	.word	0x01e500b2
 8004fa4:	016501e5 	.word	0x016501e5
 8004fa8:	01650165 	.word	0x01650165
 8004fac:	01e501e5 	.word	0x01e501e5
 8004fb0:	018301e5 	.word	0x018301e5
 8004fb4:	01e501e5 	.word	0x01e501e5
 8004fb8:	01e501e5 	.word	0x01e501e5
 8004fbc:	01e501e5 	.word	0x01e501e5
 8004fc0:	01e501e5 	.word	0x01e501e5
 8004fc4:	01e501e5 	.word	0x01e501e5
 8004fc8:	01e501e5 	.word	0x01e501e5
 8004fcc:	01e500b2 	.word	0x01e500b2
 8004fd0:	01e501e5 	.word	0x01e501e5
 8004fd4:	01e501e5 	.word	0x01e501e5
 8004fd8:	01e501e5 	.word	0x01e501e5
 8004fdc:	005b01e5 	.word	0x005b01e5
 8004fe0:	007f00b2 	.word	0x007f00b2
 8004fe4:	01650087 	.word	0x01650087
 8004fe8:	01650165 	.word	0x01650165
 8004fec:	008701e5 	.word	0x008701e5
 8004ff0:	018301e5 	.word	0x018301e5
 8004ff4:	01e501e5 	.word	0x01e501e5
 8004ff8:	00b20172 	.word	0x00b20172
 8004ffc:	01e5014f 	.word	0x01e5014f
 8005000:	013701e5 	.word	0x013701e5
 8005004:	00b201e5 	.word	0x00b201e5
 8005008:	01e501e5 	.word	0x01e501e5
 800500c:	00b2      	.short	0x00b2
                lwi->m.flags.umax_t = 1; /* uintmax_t flag */
 800500e:	7f63      	ldrb	r3, [r4, #29]
 8005010:	f043 0320 	orr.w	r3, r3, #32
 8005014:	7763      	strb	r3, [r4, #29]
                ++fmt;
 8005016:	3201      	adds	r2, #1
 8005018:	9203      	str	r2, [sp, #12]
                break;
 800501a:	e788      	b.n	8004f2e <prv_format+0x1ca>
            case 'a':
            case 'A':
                /* Double in hexadecimal notation */
                (void)va_arg(arg, double);      /* Read argument to ignore it and move to next one */
 800501c:	9b01      	ldr	r3, [sp, #4]
 800501e:	3307      	adds	r3, #7
 8005020:	f023 0307 	bic.w	r3, r3, #7
 8005024:	3308      	adds	r3, #8
 8005026:	9301      	str	r3, [sp, #4]
                prv_out_str_raw(lwi, "NaN", 3); /* Print string */
 8005028:	2203      	movs	r2, #3
 800502a:	498e      	ldr	r1, [pc, #568]	@ (8005264 <prv_format+0x500>)
 800502c:	4620      	mov	r0, r4
 800502e:	f7ff f98d 	bl	800434c <prv_out_str_raw>
                break;
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_BYTE_ARRAY */
            default: lwi->out_fn(lwi, *fmt);
        }
        ++fmt;
 8005032:	9b03      	ldr	r3, [sp, #12]
 8005034:	3301      	adds	r3, #1
 8005036:	9303      	str	r3, [sp, #12]
    while (fmt != NULL && *fmt != '\0') {
 8005038:	9b03      	ldr	r3, [sp, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 817c 	beq.w	8005338 <prv_format+0x5d4>
 8005040:	7819      	ldrb	r1, [r3, #0]
 8005042:	2900      	cmp	r1, #0
 8005044:	f000 8178 	beq.w	8005338 <prv_format+0x5d4>
        if (lwi->is_print_cancelled) {
 8005048:	7e20      	ldrb	r0, [r4, #24]
 800504a:	2800      	cmp	r0, #0
 800504c:	f040 8174 	bne.w	8005338 <prv_format+0x5d4>
        if (*fmt != '%') {
 8005050:	2925      	cmp	r1, #37	@ 0x25
 8005052:	f43f ae8f 	beq.w	8004d74 <prv_format+0x10>
            lwi->out_fn(lwi, *fmt); /* Output character */
 8005056:	6963      	ldr	r3, [r4, #20]
 8005058:	4620      	mov	r0, r4
 800505a:	4798      	blx	r3
            ++fmt;
 800505c:	9b03      	ldr	r3, [sp, #12]
 800505e:	3301      	adds	r3, #1
 8005060:	9303      	str	r3, [sp, #12]
            continue;
 8005062:	e7e9      	b.n	8005038 <prv_format+0x2d4>
            case 'c': lwi->out_fn(lwi, (char)va_arg(arg, int)); break;
 8005064:	6962      	ldr	r2, [r4, #20]
 8005066:	9b01      	ldr	r3, [sp, #4]
 8005068:	1d19      	adds	r1, r3, #4
 800506a:	9101      	str	r1, [sp, #4]
 800506c:	7819      	ldrb	r1, [r3, #0]
 800506e:	4620      	mov	r0, r4
 8005070:	4790      	blx	r2
 8005072:	e7de      	b.n	8005032 <prv_format+0x2ce>
                lwi->m.base = 10;
 8005074:	230a      	movs	r3, #10
 8005076:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                if (lwi->m.flags.longlong == 0) {
 800507a:	7f63      	ldrb	r3, [r4, #29]
 800507c:	f013 0303 	ands.w	r3, r3, #3
 8005080:	d010      	beq.n	80050a4 <prv_format+0x340>
                } else if (lwi->m.flags.longlong == 1) {
 8005082:	2b01      	cmp	r3, #1
 8005084:	d017      	beq.n	80050b6 <prv_format+0x352>
                } else if (lwi->m.flags.longlong == 2) {
 8005086:	2b02      	cmp	r3, #2
 8005088:	d1d3      	bne.n	8005032 <prv_format+0x2ce>
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed long long int));
 800508a:	9b01      	ldr	r3, [sp, #4]
 800508c:	3307      	adds	r3, #7
 800508e:	f023 0307 	bic.w	r3, r3, #7
 8005092:	f103 0208 	add.w	r2, r3, #8
 8005096:	9201      	str	r2, [sp, #4]
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	4620      	mov	r0, r4
 800509e:	f7ff f9d0 	bl	8004442 <prv_longest_signed_int_to_str>
 80050a2:	e7c6      	b.n	8005032 <prv_format+0x2ce>
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed int));
 80050a4:	9b01      	ldr	r3, [sp, #4]
 80050a6:	1d1a      	adds	r2, r3, #4
 80050a8:	9201      	str	r2, [sp, #4]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	17d3      	asrs	r3, r2, #31
 80050ae:	4620      	mov	r0, r4
 80050b0:	f7ff f9c7 	bl	8004442 <prv_longest_signed_int_to_str>
 80050b4:	e7bd      	b.n	8005032 <prv_format+0x2ce>
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed long int));
 80050b6:	9b01      	ldr	r3, [sp, #4]
 80050b8:	1d1a      	adds	r2, r3, #4
 80050ba:	9201      	str	r2, [sp, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	17db      	asrs	r3, r3, #31
 80050c2:	4620      	mov	r0, r4
 80050c4:	f7ff f9bd 	bl	8004442 <prv_longest_signed_int_to_str>
 80050c8:	e7b3      	b.n	8005032 <prv_format+0x2ce>
                if (*fmt == 'b' || *fmt == 'B') {
 80050ca:	2942      	cmp	r1, #66	@ 0x42
 80050cc:	d01a      	beq.n	8005104 <prv_format+0x3a0>
 80050ce:	d31c      	bcc.n	800510a <prv_format+0x3a6>
 80050d0:	2978      	cmp	r1, #120	@ 0x78
 80050d2:	d81a      	bhi.n	800510a <prv_format+0x3a6>
 80050d4:	2958      	cmp	r1, #88	@ 0x58
 80050d6:	d318      	bcc.n	800510a <prv_format+0x3a6>
 80050d8:	3958      	subs	r1, #88	@ 0x58
 80050da:	2920      	cmp	r1, #32
 80050dc:	d815      	bhi.n	800510a <prv_format+0x3a6>
 80050de:	e8df f001 	tbb	[pc, r1]
 80050e2:	1440      	.short	0x1440
 80050e4:	14141414 	.word	0x14141414
 80050e8:	14141414 	.word	0x14141414
 80050ec:	14141411 	.word	0x14141411
 80050f0:	14141414 	.word	0x14141414
 80050f4:	14141414 	.word	0x14141414
 80050f8:	14143814 	.word	0x14143814
 80050fc:	3c141414 	.word	0x3c141414
 8005100:	1414      	.short	0x1414
 8005102:	40          	.byte	0x40
 8005103:	00          	.byte	0x00
                    lwi->m.base = 2;
 8005104:	2302      	movs	r3, #2
 8005106:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                lwi->m.flags.space = 0; /* Space flag has no meaning here */
 800510a:	7f23      	ldrb	r3, [r4, #28]
 800510c:	f023 0304 	bic.w	r3, r3, #4
 8005110:	7723      	strb	r3, [r4, #28]
                } else if (lwi->m.flags.sz_t) {
 8005112:	7f63      	ldrb	r3, [r4, #29]
 8005114:	f013 0f10 	tst.w	r3, #16
 8005118:	d127      	bne.n	800516a <prv_format+0x406>
                } else if (lwi->m.flags.umax_t) {
 800511a:	f013 0f20 	tst.w	r3, #32
 800511e:	d12d      	bne.n	800517c <prv_format+0x418>
                } else if (lwi->m.flags.longlong == 0 || lwi->m.base == 2) {
 8005120:	f013 0303 	ands.w	r3, r3, #3
 8005124:	d037      	beq.n	8005196 <prv_format+0x432>
 8005126:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800512a:	2a02      	cmp	r2, #2
 800512c:	d033      	beq.n	8005196 <prv_format+0x432>
                } else if (lwi->m.flags.longlong == 1) {
 800512e:	2b01      	cmp	r3, #1
 8005130:	d047      	beq.n	80051c2 <prv_format+0x45e>
                } else if (lwi->m.flags.longlong == 2) {
 8005132:	2b02      	cmp	r3, #2
 8005134:	f47f af7d 	bne.w	8005032 <prv_format+0x2ce>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, unsigned long long int));
 8005138:	9b01      	ldr	r3, [sp, #4]
 800513a:	3307      	adds	r3, #7
 800513c:	f023 0307 	bic.w	r3, r3, #7
 8005140:	f103 0208 	add.w	r2, r3, #8
 8005144:	9201      	str	r2, [sp, #4]
 8005146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514a:	4620      	mov	r0, r4
 800514c:	f7ff f91f 	bl	800438e <prv_longest_unsigned_int_to_str>
 8005150:	e76f      	b.n	8005032 <prv_format+0x2ce>
                    lwi->m.base = 8;
 8005152:	2308      	movs	r3, #8
 8005154:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8005158:	e7d7      	b.n	800510a <prv_format+0x3a6>
                    lwi->m.base = 10;
 800515a:	230a      	movs	r3, #10
 800515c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8005160:	e7d3      	b.n	800510a <prv_format+0x3a6>
                    lwi->m.base = 16;
 8005162:	2310      	movs	r3, #16
 8005164:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8005168:	e7cf      	b.n	800510a <prv_format+0x3a6>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, size_t));
 800516a:	9b01      	ldr	r3, [sp, #4]
 800516c:	1d1a      	adds	r2, r3, #4
 800516e:	9201      	str	r2, [sp, #4]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	2300      	movs	r3, #0
 8005174:	4620      	mov	r0, r4
 8005176:	f7ff f90a 	bl	800438e <prv_longest_unsigned_int_to_str>
 800517a:	e75a      	b.n	8005032 <prv_format+0x2ce>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, uintmax_t));
 800517c:	9b01      	ldr	r3, [sp, #4]
 800517e:	3307      	adds	r3, #7
 8005180:	f023 0307 	bic.w	r3, r3, #7
 8005184:	f103 0208 	add.w	r2, r3, #8
 8005188:	9201      	str	r2, [sp, #4]
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	4620      	mov	r0, r4
 8005190:	f7ff f8fd 	bl	800438e <prv_longest_unsigned_int_to_str>
 8005194:	e74d      	b.n	8005032 <prv_format+0x2ce>
                    uint_maxtype_t v = va_arg(arg, unsigned int);
 8005196:	9b01      	ldr	r3, [sp, #4]
 8005198:	1d1a      	adds	r2, r3, #4
 800519a:	9201      	str	r2, [sp, #4]
 800519c:	681a      	ldr	r2, [r3, #0]
                    switch (lwi->m.flags.char_short) {
 800519e:	7f63      	ldrb	r3, [r4, #29]
 80051a0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d007      	beq.n	80051b8 <prv_format+0x454>
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d108      	bne.n	80051be <prv_format+0x45a>
                        case 2: v = (uint_maxtype_t)((unsigned char)v); break;
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	2300      	movs	r3, #0
                    prv_longest_unsigned_int_to_str(lwi, v);
 80051b0:	4620      	mov	r0, r4
 80051b2:	f7ff f8ec 	bl	800438e <prv_longest_unsigned_int_to_str>
                } else if (lwi->m.flags.longlong == 0 || lwi->m.base == 2) {
 80051b6:	e73c      	b.n	8005032 <prv_format+0x2ce>
                        case 1: v = (uint_maxtype_t)((unsigned short int)v); break;
 80051b8:	b292      	uxth	r2, r2
 80051ba:	2300      	movs	r3, #0
 80051bc:	e7f8      	b.n	80051b0 <prv_format+0x44c>
                        default: v = (uint_maxtype_t)((unsigned int)v); break;
 80051be:	2300      	movs	r3, #0
 80051c0:	e7f6      	b.n	80051b0 <prv_format+0x44c>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, unsigned long int));
 80051c2:	9b01      	ldr	r3, [sp, #4]
 80051c4:	1d1a      	adds	r2, r3, #4
 80051c6:	9201      	str	r2, [sp, #4]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	2300      	movs	r3, #0
 80051cc:	4620      	mov	r0, r4
 80051ce:	f7ff f8de 	bl	800438e <prv_longest_unsigned_int_to_str>
 80051d2:	e72e      	b.n	8005032 <prv_format+0x2ce>
                const char* b = va_arg(arg, const char*);
 80051d4:	9b01      	ldr	r3, [sp, #4]
 80051d6:	1d1a      	adds	r2, r3, #4
 80051d8:	9201      	str	r2, [sp, #4]
 80051da:	681d      	ldr	r5, [r3, #0]
                if (b == NULL) {
 80051dc:	b12d      	cbz	r5, 80051ea <prv_format+0x486>
                prv_out_str(lwi, b, prv_strnlen(b, lwi->m.flags.precision ? (size_t)lwi->m.precision : (SIZE_MAX)));
 80051de:	7f23      	ldrb	r3, [r4, #28]
 80051e0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80051e4:	d003      	beq.n	80051ee <prv_format+0x48a>
 80051e6:	6a21      	ldr	r1, [r4, #32]
 80051e8:	e003      	b.n	80051f2 <prv_format+0x48e>
                    b = "(null)";
 80051ea:	4d1f      	ldr	r5, [pc, #124]	@ (8005268 <prv_format+0x504>)
 80051ec:	e7f7      	b.n	80051de <prv_format+0x47a>
                prv_out_str(lwi, b, prv_strnlen(b, lwi->m.flags.precision ? (size_t)lwi->m.precision : (SIZE_MAX)));
 80051ee:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80051f2:	4628      	mov	r0, r5
 80051f4:	f7ff fdac 	bl	8004d50 <prv_strnlen>
 80051f8:	4602      	mov	r2, r0
 80051fa:	4629      	mov	r1, r5
 80051fc:	4620      	mov	r0, r4
 80051fe:	f7ff f8b4 	bl	800436a <prv_out_str>
                break;
 8005202:	e716      	b.n	8005032 <prv_format+0x2ce>
                lwi->m.base = 16;      /* Go to hex format */
 8005204:	2310      	movs	r3, #16
 8005206:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                lwi->m.flags.uc = 0;   /* Uppercase characters */
 800520a:	7f63      	ldrb	r3, [r4, #29]
 800520c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005210:	7763      	strb	r3, [r4, #29]
                lwi->m.flags.zero = 1; /* Zero padding */
 8005212:	7f23      	ldrb	r3, [r4, #28]
 8005214:	f043 0308 	orr.w	r3, r3, #8
 8005218:	7723      	strb	r3, [r4, #28]
                lwi->m.width =
 800521a:	2308      	movs	r3, #8
 800521c:	6263      	str	r3, [r4, #36]	@ 0x24
                prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, uintptr_t));
 800521e:	9b01      	ldr	r3, [sp, #4]
 8005220:	1d1a      	adds	r2, r3, #4
 8005222:	9201      	str	r2, [sp, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	2300      	movs	r3, #0
 8005228:	4620      	mov	r0, r4
 800522a:	f7ff f8b0 	bl	800438e <prv_longest_unsigned_int_to_str>
                break;
 800522e:	e700      	b.n	8005032 <prv_format+0x2ce>
                prv_double_to_str(lwi, (double)va_arg(arg, double));
 8005230:	9b01      	ldr	r3, [sp, #4]
 8005232:	3307      	adds	r3, #7
 8005234:	f023 0307 	bic.w	r3, r3, #7
 8005238:	f103 0208 	add.w	r2, r3, #8
 800523c:	9201      	str	r2, [sp, #4]
 800523e:	ed93 0b00 	vldr	d0, [r3]
 8005242:	4620      	mov	r0, r4
 8005244:	f7ff fa80 	bl	8004748 <prv_double_to_str>
                break;
 8005248:	e6f3      	b.n	8005032 <prv_format+0x2ce>
                int* ptr = (void*)va_arg(arg, int*);
 800524a:	9b01      	ldr	r3, [sp, #4]
 800524c:	1d1a      	adds	r2, r3, #4
 800524e:	9201      	str	r2, [sp, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
                *ptr = (int)lwi->n_len; /* Write current length */
 8005252:	6922      	ldr	r2, [r4, #16]
 8005254:	601a      	str	r2, [r3, #0]
                break;
 8005256:	e6ec      	b.n	8005032 <prv_format+0x2ce>
            case '%': lwi->out_fn(lwi, '%'); break;
 8005258:	6963      	ldr	r3, [r4, #20]
 800525a:	2125      	movs	r1, #37	@ 0x25
 800525c:	4620      	mov	r0, r4
 800525e:	4798      	blx	r3
 8005260:	e6e7      	b.n	8005032 <prv_format+0x2ce>
 8005262:	bf00      	nop
 8005264:	08007404 	.word	0x08007404
 8005268:	080073fc 	.word	0x080073fc
                unsigned char* ptr =
 800526c:	9b01      	ldr	r3, [sp, #4]
 800526e:	1d1a      	adds	r2, r3, #4
 8005270:	9201      	str	r2, [sp, #4]
 8005272:	681d      	ldr	r5, [r3, #0]
                int len = lwi->m.width, full_width;
 8005274:	6a67      	ldr	r7, [r4, #36]	@ 0x24
                uint8_t is_space = lwi->m.flags.space == 1;
 8005276:	7f23      	ldrb	r3, [r4, #28]
 8005278:	f003 0804 	and.w	r8, r3, #4
 800527c:	f3c3 0380 	ubfx	r3, r3, #2, #1
                if (ptr == NULL || len == 0) {
 8005280:	2d00      	cmp	r5, #0
 8005282:	f43f aed6 	beq.w	8005032 <prv_format+0x2ce>
 8005286:	2f00      	cmp	r7, #0
 8005288:	f43f aed3 	beq.w	8005032 <prv_format+0x2ce>
                lwi->m.flags.zero = 1;  /* Prepend with zeros if necessary */
 800528c:	7f22      	ldrb	r2, [r4, #28]
 800528e:	f042 0208 	orr.w	r2, r2, #8
 8005292:	7722      	strb	r2, [r4, #28]
                lwi->m.width = 0;       /* No width parameter */
 8005294:	2100      	movs	r1, #0
 8005296:	6261      	str	r1, [r4, #36]	@ 0x24
                lwi->m.base = 16;       /* Hex format */
 8005298:	2210      	movs	r2, #16
 800529a:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
                lwi->m.flags.space = 0; /* Delete any flag for space */
 800529e:	7f22      	ldrb	r2, [r4, #28]
 80052a0:	f361 0282 	bfi	r2, r1, #2, #1
 80052a4:	7722      	strb	r2, [r4, #28]
                full_width = len * (2 + (int)is_space);
 80052a6:	3302      	adds	r3, #2
 80052a8:	fb07 f103 	mul.w	r1, r7, r3
                if (is_space && full_width > 0) {
 80052ac:	f1b8 0f00 	cmp.w	r8, #0
 80052b0:	d002      	beq.n	80052b8 <prv_format+0x554>
 80052b2:	2900      	cmp	r1, #0
 80052b4:	dd00      	ble.n	80052b8 <prv_format+0x554>
                    --full_width; /* Remove space after last number */
 80052b6:	3901      	subs	r1, #1
                prv_out_str_before(lwi, full_width);
 80052b8:	4689      	mov	r9, r1
 80052ba:	4620      	mov	r0, r4
 80052bc:	f7fe ff80 	bl	80041c0 <prv_out_str_before>
                for (int i = 0; i < len; ++i, ++ptr) {
 80052c0:	2600      	movs	r6, #0
 80052c2:	e021      	b.n	8005308 <prv_format+0x5a4>
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 80052c4:	2330      	movs	r3, #48	@ 0x30
 80052c6:	4419      	add	r1, r3
 80052c8:	4620      	mov	r0, r4
 80052ca:	4790      	blx	r2
                    d = *ptr & 0x0F; /* Print LSB */
 80052cc:	782b      	ldrb	r3, [r5, #0]
 80052ce:	f003 030f 	and.w	r3, r3, #15
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 80052d2:	6962      	ldr	r2, [r4, #20]
 80052d4:	2b09      	cmp	r3, #9
 80052d6:	d907      	bls.n	80052e8 <prv_format+0x584>
 80052d8:	7f61      	ldrb	r1, [r4, #29]
 80052da:	f011 0f40 	tst.w	r1, #64	@ 0x40
 80052de:	d020      	beq.n	8005322 <prv_format+0x5be>
 80052e0:	2137      	movs	r1, #55	@ 0x37
 80052e2:	e002      	b.n	80052ea <prv_format+0x586>
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 80052e4:	2357      	movs	r3, #87	@ 0x57
 80052e6:	e7ee      	b.n	80052c6 <prv_format+0x562>
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 80052e8:	2130      	movs	r1, #48	@ 0x30
 80052ea:	4419      	add	r1, r3
 80052ec:	4620      	mov	r0, r4
 80052ee:	4790      	blx	r2
                    if (is_space && i < (len - 1)) {
 80052f0:	f1b8 0f00 	cmp.w	r8, #0
 80052f4:	d006      	beq.n	8005304 <prv_format+0x5a0>
 80052f6:	1e7b      	subs	r3, r7, #1
 80052f8:	42b3      	cmp	r3, r6
 80052fa:	dd03      	ble.n	8005304 <prv_format+0x5a0>
                        lwi->out_fn(lwi, ' '); /* Generate space between numbers */
 80052fc:	6963      	ldr	r3, [r4, #20]
 80052fe:	2120      	movs	r1, #32
 8005300:	4620      	mov	r0, r4
 8005302:	4798      	blx	r3
                for (int i = 0; i < len; ++i, ++ptr) {
 8005304:	3601      	adds	r6, #1
 8005306:	3501      	adds	r5, #1
 8005308:	42be      	cmp	r6, r7
 800530a:	da0c      	bge.n	8005326 <prv_format+0x5c2>
                    d = (*ptr >> 0x04) & 0x0F; /* Print MSB */
 800530c:	782b      	ldrb	r3, [r5, #0]
 800530e:	0919      	lsrs	r1, r3, #4
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 8005310:	6962      	ldr	r2, [r4, #20]
 8005312:	2b9f      	cmp	r3, #159	@ 0x9f
 8005314:	d9d6      	bls.n	80052c4 <prv_format+0x560>
 8005316:	7f63      	ldrb	r3, [r4, #29]
 8005318:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800531c:	d0e2      	beq.n	80052e4 <prv_format+0x580>
 800531e:	2337      	movs	r3, #55	@ 0x37
 8005320:	e7d1      	b.n	80052c6 <prv_format+0x562>
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 8005322:	2157      	movs	r1, #87	@ 0x57
 8005324:	e7e1      	b.n	80052ea <prv_format+0x586>
                prv_out_str_after(lwi, full_width);
 8005326:	4649      	mov	r1, r9
 8005328:	4620      	mov	r0, r4
 800532a:	f7fe fffd 	bl	8004328 <prv_out_str_after>
                break;
 800532e:	e680      	b.n	8005032 <prv_format+0x2ce>
            default: lwi->out_fn(lwi, *fmt);
 8005330:	6963      	ldr	r3, [r4, #20]
 8005332:	4620      	mov	r0, r4
 8005334:	4798      	blx	r3
 8005336:	e67c      	b.n	8005032 <prv_format+0x2ce>
    }
    lwi->out_fn(lwi, '\0'); /* Output last zero number */
 8005338:	6963      	ldr	r3, [r4, #20]
 800533a:	2100      	movs	r1, #0
 800533c:	4620      	mov	r0, r4
 800533e:	4798      	blx	r3
    if (IS_PRINT_MODE(lwi)) { /* Mutex only for print operation */
        lwprintf_sys_mutex_release(&lwi->lwobj->mutex);
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */
    return 1;
}
 8005340:	2001      	movs	r0, #1
 8005342:	b005      	add	sp, #20
 8005344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005348 <lwprintf_init_ex>:
 *                      are thread safe. Library utilizes stack-based variables
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwprintf_init_ex(lwprintf_t* lwobj, lwprintf_output_fn out_fn) {
    LWPRINTF_GET_LWOBJ(lwobj)->out_fn = out_fn;
 8005348:	4603      	mov	r3, r0
 800534a:	b110      	cbz	r0, 8005352 <lwprintf_init_ex+0xa>
 800534c:	6019      	str	r1, [r3, #0]
            || !lwprintf_sys_mutex_create(&LWPRINTF_GET_LWOBJ(lwobj)->mutex))) {
        return 0;
    }
#endif /* LWPRINTF_CFG_OS */
    return 1;
}
 800534e:	2001      	movs	r0, #1
 8005350:	4770      	bx	lr
    LWPRINTF_GET_LWOBJ(lwobj)->out_fn = out_fn;
 8005352:	4b01      	ldr	r3, [pc, #4]	@ (8005358 <lwprintf_init_ex+0x10>)
 8005354:	e7fa      	b.n	800534c <lwprintf_init_ex+0x4>
 8005356:	bf00      	nop
 8005358:	2000036c 	.word	0x2000036c

0800535c <lwprintf_vprintf_ex>:
 *                      `va_list` is a special type defined in `<cstdarg>`.
 * \return          The number of characters that would have been written if `n` had been sufficiently large,
 *                      not counting the terminating null character.
 */
int
lwprintf_vprintf_ex(lwprintf_t* const lwobj, const char* format, va_list arg) {
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	b08c      	sub	sp, #48	@ 0x30
 8005360:	4604      	mov	r4, r0
 8005362:	460d      	mov	r5, r1
 8005364:	4616      	mov	r6, r2
    lwprintf_int_t fobj = {
 8005366:	222c      	movs	r2, #44	@ 0x2c
 8005368:	2100      	movs	r1, #0
 800536a:	a801      	add	r0, sp, #4
 800536c:	f000 ff12 	bl	8006194 <memset>
        .lwobj = LWPRINTF_GET_LWOBJ(lwobj),
 8005370:	b16c      	cbz	r4, 800538e <lwprintf_vprintf_ex+0x32>
    lwprintf_int_t fobj = {
 8005372:	9401      	str	r4, [sp, #4]
 8005374:	9502      	str	r5, [sp, #8]
 8005376:	4b09      	ldr	r3, [pc, #36]	@ (800539c <lwprintf_vprintf_ex+0x40>)
 8005378:	9306      	str	r3, [sp, #24]
        .fmt = format,
        .buff = NULL,
        .buff_size = 0,
    };
    /* For direct print, output function must be set by user */
    if (fobj.lwobj->out_fn == NULL) {
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	b15b      	cbz	r3, 8005396 <lwprintf_vprintf_ex+0x3a>
        return 0;
    }
    if (prv_format(&fobj, arg)) {
 800537e:	4631      	mov	r1, r6
 8005380:	a801      	add	r0, sp, #4
 8005382:	f7ff fcef 	bl	8004d64 <prv_format>
 8005386:	b920      	cbnz	r0, 8005392 <lwprintf_vprintf_ex+0x36>
        return (int)fobj.n_len;
    }
    return 0;
 8005388:	2000      	movs	r0, #0
}
 800538a:	b00c      	add	sp, #48	@ 0x30
 800538c:	bd70      	pop	{r4, r5, r6, pc}
        .lwobj = LWPRINTF_GET_LWOBJ(lwobj),
 800538e:	4c04      	ldr	r4, [pc, #16]	@ (80053a0 <lwprintf_vprintf_ex+0x44>)
 8005390:	e7ef      	b.n	8005372 <lwprintf_vprintf_ex+0x16>
        return (int)fobj.n_len;
 8005392:	9805      	ldr	r0, [sp, #20]
 8005394:	e7f9      	b.n	800538a <lwprintf_vprintf_ex+0x2e>
        return 0;
 8005396:	2000      	movs	r0, #0
 8005398:	e7f7      	b.n	800538a <lwprintf_vprintf_ex+0x2e>
 800539a:	bf00      	nop
 800539c:	08004163 	.word	0x08004163
 80053a0:	2000036c 	.word	0x2000036c

080053a4 <stm32_log_init>:
#include "main.h"

static lwprintf_t debug;

uint8_t stm32_log_init(lwprintf_output_fn out_fn)
{
 80053a4:	b508      	push	{r3, lr}

	if(out_fn == NULL)
 80053a6:	b128      	cbz	r0, 80053b4 <stm32_log_init+0x10>
 80053a8:	4601      	mov	r1, r0
	{
		lwprintf_init_ex(&debug, stm32_log_out);
	}
	else
	{
		lwprintf_init_ex(&debug, out_fn);
 80053aa:	4805      	ldr	r0, [pc, #20]	@ (80053c0 <stm32_log_init+0x1c>)
 80053ac:	f7ff ffcc 	bl	8005348 <lwprintf_init_ex>
	}
	return 0;

}
 80053b0:	2000      	movs	r0, #0
 80053b2:	bd08      	pop	{r3, pc}
		lwprintf_init_ex(&debug, stm32_log_out);
 80053b4:	4903      	ldr	r1, [pc, #12]	@ (80053c4 <stm32_log_init+0x20>)
 80053b6:	4802      	ldr	r0, [pc, #8]	@ (80053c0 <stm32_log_init+0x1c>)
 80053b8:	f7ff ffc6 	bl	8005348 <lwprintf_init_ex>
 80053bc:	e7f8      	b.n	80053b0 <stm32_log_init+0xc>
 80053be:	bf00      	nop
 80053c0:	20000374 	.word	0x20000374
 80053c4:	08001081 	.word	0x08001081

080053c8 <stm32_log_timestamp>:
// Función para obtener la marca de tiempo (adapta según sea necesario)
__attribute__((weak)) uint32_t stm32_log_timestamp(void) {
 80053c8:	b508      	push	{r3, lr}
    // Implementa la obtención de la marca de tiempo aquí (puede ser un contador o un reloj en tiempo real)
    return HAL_GetTick() ;
 80053ca:	f7fc f9b5 	bl	8001738 <HAL_GetTick>
}
 80053ce:	bd08      	pop	{r3, pc}

080053d0 <stm32_log_write>:

// Función para escribir un mensaje de registro (adapta según sea necesario)
void stm32_log_write(int level, const char* tag, const char* format, ...) {
    if (level <= STM32_LOG_LEVEL) {
 80053d0:	2804      	cmp	r0, #4
 80053d2:	dd00      	ble.n	80053d6 <stm32_log_write+0x6>
 80053d4:	4770      	bx	lr
void stm32_log_write(int level, const char* tag, const char* format, ...) {
 80053d6:	b40c      	push	{r2, r3}
 80053d8:	b500      	push	{lr}
 80053da:	b083      	sub	sp, #12
        va_list args;
        va_start(args, format);
 80053dc:	aa05      	add	r2, sp, #20
 80053de:	9201      	str	r2, [sp, #4]
        lwprintf_vprintf_ex(&debug, format, args);
 80053e0:	9904      	ldr	r1, [sp, #16]
 80053e2:	4804      	ldr	r0, [pc, #16]	@ (80053f4 <stm32_log_write+0x24>)
 80053e4:	f7ff ffba 	bl	800535c <lwprintf_vprintf_ex>
        va_end(args);
    }
    return;
}
 80053e8:	b003      	add	sp, #12
 80053ea:	f85d eb04 	ldr.w	lr, [sp], #4
 80053ee:	b002      	add	sp, #8
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20000374 	.word	0x20000374

080053f8 <w25q_build_address_command>:
/**
 * @brief Construye comando con dirección según el modo
 */
static size_t w25q_build_address_command(uint8_t *cmd, uint8_t command, uint32_t addr, w25q_addr_mode_t addr_mode)
{
	cmd[0] = command;
 80053f8:	7001      	strb	r1, [r0, #0]

	if (addr_mode == W25Q_ADDR_4BYTE) {
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d008      	beq.n	8005410 <w25q_build_address_command+0x18>
		cmd[3] = (uint8_t)((addr >> 8) & 0xFF);
		cmd[4] = (uint8_t)(addr & 0xFF);
		return 5;
	} else {
		// Modo 3 bytes
		cmd[1] = (uint8_t)((addr >> 16) & 0xFF);
 80053fe:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8005402:	7043      	strb	r3, [r0, #1]
		cmd[2] = (uint8_t)((addr >> 8) & 0xFF);
 8005404:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8005408:	7083      	strb	r3, [r0, #2]
		cmd[3] = (uint8_t)(addr & 0xFF);
 800540a:	70c2      	strb	r2, [r0, #3]
		return 4;
 800540c:	2004      	movs	r0, #4
	}
}
 800540e:	4770      	bx	lr
		cmd[1] = (uint8_t)((addr >> 24) & 0xFF);
 8005410:	0e13      	lsrs	r3, r2, #24
 8005412:	7043      	strb	r3, [r0, #1]
		cmd[2] = (uint8_t)((addr >> 16) & 0xFF);
 8005414:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8005418:	7083      	strb	r3, [r0, #2]
		cmd[3] = (uint8_t)((addr >> 8) & 0xFF);
 800541a:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800541e:	70c3      	strb	r3, [r0, #3]
		cmd[4] = (uint8_t)(addr & 0xFF);
 8005420:	7102      	strb	r2, [r0, #4]
		return 5;
 8005422:	2005      	movs	r0, #5
 8005424:	4770      	bx	lr

08005426 <w25q_spi_command>:

/**
 * @brief Ejecuta comando SPI simple
 */
static w25q_err_t w25q_spi_command(w25q_handle_t *handle, uint8_t cmd)
{
 8005426:	b530      	push	{r4, r5, lr}
 8005428:	b083      	sub	sp, #12
 800542a:	4604      	mov	r4, r0
 800542c:	f88d 1007 	strb.w	r1, [sp, #7]
	if (handle->software_cs && handle->hw->cs_control) {
 8005430:	7f03      	ldrb	r3, [r0, #28]
 8005432:	b12b      	cbz	r3, 8005440 <w25q_spi_command+0x1a>
 8005434:	6803      	ldr	r3, [r0, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	b113      	cbz	r3, 8005440 <w25q_spi_command+0x1a>
		handle->hw->cs_control(handle->user_ctx, true);
 800543a:	2101      	movs	r1, #1
 800543c:	6840      	ldr	r0, [r0, #4]
 800543e:	4798      	blx	r3
	}

	w25q_err_t ret = W25Q_OK;
	if (handle->hw->spi_write_read(handle->user_ctx, &cmd, NULL, 1) != 0) {
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	685d      	ldr	r5, [r3, #4]
 8005444:	2301      	movs	r3, #1
 8005446:	2200      	movs	r2, #0
 8005448:	f10d 0107 	add.w	r1, sp, #7
 800544c:	6860      	ldr	r0, [r4, #4]
 800544e:	47a8      	blx	r5
 8005450:	b958      	cbnz	r0, 800546a <w25q_spi_command+0x44>
	w25q_err_t ret = W25Q_OK;
 8005452:	2500      	movs	r5, #0
		ret = W25Q_ERR_SPI;
	}

	if (handle->software_cs && handle->hw->cs_control) {
 8005454:	7f23      	ldrb	r3, [r4, #28]
 8005456:	b12b      	cbz	r3, 8005464 <w25q_spi_command+0x3e>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	b113      	cbz	r3, 8005464 <w25q_spi_command+0x3e>
		handle->hw->cs_control(handle->user_ctx, false);
 800545e:	2100      	movs	r1, #0
 8005460:	6860      	ldr	r0, [r4, #4]
 8005462:	4798      	blx	r3
	}

	return ret;
}
 8005464:	4628      	mov	r0, r5
 8005466:	b003      	add	sp, #12
 8005468:	bd30      	pop	{r4, r5, pc}
		ret = W25Q_ERR_SPI;
 800546a:	f06f 0501 	mvn.w	r5, #1
 800546e:	e7f1      	b.n	8005454 <w25q_spi_command+0x2e>

08005470 <w25q_spi_transfer>:
 * @brief Transferencia SPI con datos
 */
static w25q_err_t w25q_spi_transfer(w25q_handle_t *handle,
		const uint8_t *tx_data, uint8_t *rx_data,
		size_t len)
{
 8005470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005474:	4604      	mov	r4, r0
 8005476:	460d      	mov	r5, r1
 8005478:	4616      	mov	r6, r2
 800547a:	461f      	mov	r7, r3
	if (handle->software_cs && handle->hw->cs_control) {
 800547c:	7f03      	ldrb	r3, [r0, #28]
 800547e:	b12b      	cbz	r3, 800548c <w25q_spi_transfer+0x1c>
 8005480:	6803      	ldr	r3, [r0, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	b113      	cbz	r3, 800548c <w25q_spi_transfer+0x1c>
		handle->hw->cs_control(handle->user_ctx, true);
 8005486:	2101      	movs	r1, #1
 8005488:	6840      	ldr	r0, [r0, #4]
 800548a:	4798      	blx	r3
	}

	w25q_err_t ret = W25Q_OK;
	if (handle->hw->spi_write_read(handle->user_ctx, tx_data, rx_data, len) != 0) {
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8005492:	463b      	mov	r3, r7
 8005494:	4632      	mov	r2, r6
 8005496:	4629      	mov	r1, r5
 8005498:	6860      	ldr	r0, [r4, #4]
 800549a:	47c0      	blx	r8
 800549c:	b958      	cbnz	r0, 80054b6 <w25q_spi_transfer+0x46>
	w25q_err_t ret = W25Q_OK;
 800549e:	2500      	movs	r5, #0
		ret = W25Q_ERR_SPI;
	}

	if (handle->software_cs && handle->hw->cs_control) {
 80054a0:	7f23      	ldrb	r3, [r4, #28]
 80054a2:	b12b      	cbz	r3, 80054b0 <w25q_spi_transfer+0x40>
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	b113      	cbz	r3, 80054b0 <w25q_spi_transfer+0x40>
		handle->hw->cs_control(handle->user_ctx, false);
 80054aa:	2100      	movs	r1, #0
 80054ac:	6860      	ldr	r0, [r4, #4]
 80054ae:	4798      	blx	r3
	}

	return ret;
}
 80054b0:	4628      	mov	r0, r5
 80054b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = W25Q_ERR_SPI;
 80054b6:	f06f 0501 	mvn.w	r5, #1
 80054ba:	e7f1      	b.n	80054a0 <w25q_spi_transfer+0x30>

080054bc <w25q_lock>:

/**
 * @brief Lock para thread safety
 */
static void w25q_lock(w25q_handle_t *handle)
{
 80054bc:	b508      	push	{r3, lr}
	if (handle->hw->lock) {
 80054be:	6803      	ldr	r3, [r0, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	b10b      	cbz	r3, 80054c8 <w25q_lock+0xc>
		handle->hw->lock(handle->user_ctx);
 80054c4:	6840      	ldr	r0, [r0, #4]
 80054c6:	4798      	blx	r3
	}
}
 80054c8:	bd08      	pop	{r3, pc}

080054ca <w25q_unlock>:

/**
 * @brief Unlock para thread safety
 */
static void w25q_unlock(w25q_handle_t *handle)
{
 80054ca:	b508      	push	{r3, lr}
	if (handle->hw->unlock) {
 80054cc:	6803      	ldr	r3, [r0, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	b10b      	cbz	r3, 80054d6 <w25q_unlock+0xc>
		handle->hw->unlock(handle->user_ctx);
 80054d2:	6840      	ldr	r0, [r0, #4]
 80054d4:	4798      	blx	r3
	}
}
 80054d6:	bd08      	pop	{r3, pc}

080054d8 <w25q_detect_capacity>:
 */
static w25q_err_t w25q_detect_capacity(w25q_handle_t *handle, uint8_t manufacturer_id,
		uint8_t memory_type, uint8_t capacity_id)
{
	// Verificar fabricante Winbond
	if (manufacturer_id != 0xEF) {
 80054d8:	29ef      	cmp	r1, #239	@ 0xef
 80054da:	d162      	bne.n	80055a2 <w25q_detect_capacity+0xca>
		return W25Q_ERR_UNSUPPORTED;
	}

	// Verificar que sea de la familia W25Q (Memory Type = 0x40)
	if (memory_type != 0x40) {
 80054dc:	2a40      	cmp	r2, #64	@ 0x40
 80054de:	d163      	bne.n	80055a8 <w25q_detect_capacity+0xd0>
{
 80054e0:	b410      	push	{r4}
		return W25Q_ERR_UNSUPPORTED;
	}

	// Combinar memory_type y capacity_id para comparar
	uint16_t device_id = (memory_type << 8) | capacity_id;
 80054e2:	ea43 2c02 	orr.w	ip, r3, r2, lsl #8
 80054e6:	fa0f fc8c 	sxth.w	ip, ip

	switch (device_id) {
 80054ea:	f5ac 4c80 	sub.w	ip, ip, #16384	@ 0x4000
 80054ee:	f1ac 0c11 	sub.w	ip, ip, #17
 80054f2:	f1bc 0f0f 	cmp.w	ip, #15
 80054f6:	d85a      	bhi.n	80055ae <w25q_detect_capacity+0xd6>
 80054f8:	e8df f00c 	tbb	[pc, ip]
 80054fc:	29231d08 	.word	0x29231d08
 8005500:	413b352f 	.word	0x413b352f
 8005504:	59595947 	.word	0x59595947
 8005508:	4d595959 	.word	0x4d595959
	case W25Q_CAPACITY_1MBIT:
		handle->info.capacity_bytes = 131072;      // 1Mbit = 128KB
 800550c:	f44f 3400 	mov.w	r4, #131072	@ 0x20000
 8005510:	6084      	str	r4, [r0, #8]
		handle->info.addr_mode = W25Q_ADDR_3BYTE;
 8005512:	2400      	movs	r4, #0
 8005514:	75c4      	strb	r4, [r0, #23]
	default:
		return W25Q_ERR_UNSUPPORTED;
	}

	// Configurar tamaños estándar
	handle->info.page_size = W25Q_PAGE_SIZE;
 8005516:	f44f 7480 	mov.w	r4, #256	@ 0x100
 800551a:	8184      	strh	r4, [r0, #12]
	handle->info.sector_size = W25Q_SECTOR_SIZE;
 800551c:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8005520:	81c4      	strh	r4, [r0, #14]
	handle->info.num_sectors = handle->info.capacity_bytes / W25Q_SECTOR_SIZE;
 8005522:	6884      	ldr	r4, [r0, #8]
 8005524:	0b24      	lsrs	r4, r4, #12
 8005526:	6104      	str	r4, [r0, #16]
	handle->info.manufacturer_id = manufacturer_id;
 8005528:	7501      	strb	r1, [r0, #20]
	handle->info.memory_type = memory_type;
 800552a:	7542      	strb	r2, [r0, #21]
	handle->info.capacity_id = capacity_id;
 800552c:	7583      	strb	r3, [r0, #22]

	return W25Q_OK;
 800552e:	2000      	movs	r0, #0
}
 8005530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005534:	4770      	bx	lr
		handle->info.capacity_bytes = 262144;      // 2Mbit = 256KB
 8005536:	f44f 2480 	mov.w	r4, #262144	@ 0x40000
 800553a:	6084      	str	r4, [r0, #8]
		handle->info.addr_mode = W25Q_ADDR_3BYTE;
 800553c:	2400      	movs	r4, #0
 800553e:	75c4      	strb	r4, [r0, #23]
		break;
 8005540:	e7e9      	b.n	8005516 <w25q_detect_capacity+0x3e>
		handle->info.capacity_bytes = 524288;      // 4Mbit = 512KB
 8005542:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
 8005546:	6084      	str	r4, [r0, #8]
		handle->info.addr_mode = W25Q_ADDR_3BYTE;
 8005548:	2400      	movs	r4, #0
 800554a:	75c4      	strb	r4, [r0, #23]
		break;
 800554c:	e7e3      	b.n	8005516 <w25q_detect_capacity+0x3e>
		handle->info.capacity_bytes = 1048576;     // 8Mbit = 1MB
 800554e:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
 8005552:	6084      	str	r4, [r0, #8]
		handle->info.addr_mode = W25Q_ADDR_3BYTE;
 8005554:	2400      	movs	r4, #0
 8005556:	75c4      	strb	r4, [r0, #23]
		break;
 8005558:	e7dd      	b.n	8005516 <w25q_detect_capacity+0x3e>
		handle->info.capacity_bytes = 2097152;     // 16Mbit = 2MB
 800555a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800555e:	6084      	str	r4, [r0, #8]
		handle->info.addr_mode = W25Q_ADDR_3BYTE;
 8005560:	2400      	movs	r4, #0
 8005562:	75c4      	strb	r4, [r0, #23]
		break;
 8005564:	e7d7      	b.n	8005516 <w25q_detect_capacity+0x3e>
		handle->info.capacity_bytes = 4194304;     // 32Mbit = 4MB
 8005566:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
 800556a:	6084      	str	r4, [r0, #8]
		handle->info.addr_mode = W25Q_ADDR_3BYTE;
 800556c:	2400      	movs	r4, #0
 800556e:	75c4      	strb	r4, [r0, #23]
		break;
 8005570:	e7d1      	b.n	8005516 <w25q_detect_capacity+0x3e>
		handle->info.capacity_bytes = 8388608;     // 64Mbit = 8MB
 8005572:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8005576:	6084      	str	r4, [r0, #8]
		handle->info.addr_mode = W25Q_ADDR_3BYTE;
 8005578:	2400      	movs	r4, #0
 800557a:	75c4      	strb	r4, [r0, #23]
		break;
 800557c:	e7cb      	b.n	8005516 <w25q_detect_capacity+0x3e>
		handle->info.capacity_bytes = 16777216;    // 128Mbit = 16MB
 800557e:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 8005582:	6084      	str	r4, [r0, #8]
		handle->info.addr_mode = W25Q_ADDR_3BYTE;
 8005584:	2400      	movs	r4, #0
 8005586:	75c4      	strb	r4, [r0, #23]
		break;
 8005588:	e7c5      	b.n	8005516 <w25q_detect_capacity+0x3e>
		handle->info.capacity_bytes = 33554432;    // 256Mbit = 32MB
 800558a:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
 800558e:	6084      	str	r4, [r0, #8]
		handle->info.addr_mode = W25Q_ADDR_4BYTE;
 8005590:	2401      	movs	r4, #1
 8005592:	75c4      	strb	r4, [r0, #23]
		break;
 8005594:	e7bf      	b.n	8005516 <w25q_detect_capacity+0x3e>
		handle->info.capacity_bytes = 67108864;    // 512Mbit = 64MB
 8005596:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 800559a:	6084      	str	r4, [r0, #8]
		handle->info.addr_mode = W25Q_ADDR_4BYTE;
 800559c:	2401      	movs	r4, #1
 800559e:	75c4      	strb	r4, [r0, #23]
		break;
 80055a0:	e7b9      	b.n	8005516 <w25q_detect_capacity+0x3e>
		return W25Q_ERR_UNSUPPORTED;
 80055a2:	f06f 0008 	mvn.w	r0, #8
 80055a6:	4770      	bx	lr
		return W25Q_ERR_UNSUPPORTED;
 80055a8:	f06f 0008 	mvn.w	r0, #8
}
 80055ac:	4770      	bx	lr
	switch (device_id) {
 80055ae:	f06f 0008 	mvn.w	r0, #8
 80055b2:	e7bd      	b.n	8005530 <w25q_detect_capacity+0x58>

080055b4 <w25q_check_address>:
/**
 * @brief Verifica parámetros de dirección y longitud
 */
static w25q_err_t w25q_check_address(w25q_handle_t *handle, uint32_t addr, size_t len)
{
	if (!handle->initialized) {
 80055b4:	7f43      	ldrb	r3, [r0, #29]
 80055b6:	b143      	cbz	r3, 80055ca <w25q_check_address+0x16>
		return W25Q_ERR_PARAM;
	}

	if (addr >= handle->info.capacity_bytes) {
 80055b8:	6883      	ldr	r3, [r0, #8]
 80055ba:	428b      	cmp	r3, r1
 80055bc:	d908      	bls.n	80055d0 <w25q_check_address+0x1c>
		return W25Q_ERR_ADDR;
	}

	if (len == 0) {
 80055be:	b152      	cbz	r2, 80055d6 <w25q_check_address+0x22>
		return W25Q_ERR_SIZE;
	}

	if ((addr + len) > handle->info.capacity_bytes) {
 80055c0:	4411      	add	r1, r2
 80055c2:	428b      	cmp	r3, r1
 80055c4:	d30a      	bcc.n	80055dc <w25q_check_address+0x28>
		return W25Q_ERR_SIZE;
	}

	return W25Q_OK;
 80055c6:	2000      	movs	r0, #0
 80055c8:	4770      	bx	lr
		return W25Q_ERR_PARAM;
 80055ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055ce:	4770      	bx	lr
		return W25Q_ERR_ADDR;
 80055d0:	f06f 0006 	mvn.w	r0, #6
 80055d4:	4770      	bx	lr
		return W25Q_ERR_SIZE;
 80055d6:	f06f 0007 	mvn.w	r0, #7
 80055da:	4770      	bx	lr
		return W25Q_ERR_SIZE;
 80055dc:	f06f 0007 	mvn.w	r0, #7
}
 80055e0:	4770      	bx	lr

080055e2 <w25q_get_info>:
	return W25Q_OK;
}

w25q_err_t w25q_get_info(w25q_handle_t *handle, w25q_info_t *info)
{
	if (!handle || !info || !handle->initialized) {
 80055e2:	4603      	mov	r3, r0
 80055e4:	b170      	cbz	r0, 8005604 <w25q_get_info+0x22>
 80055e6:	b181      	cbz	r1, 800560a <w25q_get_info+0x28>
 80055e8:	7f42      	ldrb	r2, [r0, #29]
 80055ea:	b18a      	cbz	r2, 8005610 <w25q_get_info+0x2e>
		return W25Q_ERR_PARAM;
	}

	memcpy(info, &handle->info, sizeof(w25q_info_t));
 80055ec:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80055f0:	68c0      	ldr	r0, [r0, #12]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f8c1 c000 	str.w	ip, [r1]
 80055fa:	6048      	str	r0, [r1, #4]
 80055fc:	608a      	str	r2, [r1, #8]
 80055fe:	60cb      	str	r3, [r1, #12]
	return W25Q_OK;
 8005600:	2000      	movs	r0, #0
 8005602:	4770      	bx	lr
		return W25Q_ERR_PARAM;
 8005604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005608:	4770      	bx	lr
 800560a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800560e:	4770      	bx	lr
 8005610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8005614:	4770      	bx	lr

08005616 <w25q_read_jedec_id>:

w25q_err_t w25q_read_jedec_id(w25q_handle_t *handle, uint8_t id[3])
{
	if (!handle || !id) {
 8005616:	2800      	cmp	r0, #0
 8005618:	d04d      	beq.n	80056b6 <w25q_read_jedec_id+0xa0>
{
 800561a:	b570      	push	{r4, r5, r6, lr}
 800561c:	b082      	sub	sp, #8
 800561e:	460d      	mov	r5, r1
 8005620:	4604      	mov	r4, r0
	if (!handle || !id) {
 8005622:	2900      	cmp	r1, #0
 8005624:	d04a      	beq.n	80056bc <w25q_read_jedec_id+0xa6>
		return W25Q_ERR_PARAM;
	}

	uint8_t cmd = W25Q_CMD_JEDEC_ID;
 8005626:	239f      	movs	r3, #159	@ 0x9f
 8005628:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t rx_buf[4] = {0};
 800562c:	2300      	movs	r3, #0
 800562e:	9300      	str	r3, [sp, #0]

	if (handle->software_cs && handle->hw->cs_control) {
 8005630:	7f03      	ldrb	r3, [r0, #28]
 8005632:	b12b      	cbz	r3, 8005640 <w25q_read_jedec_id+0x2a>
 8005634:	6803      	ldr	r3, [r0, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	b113      	cbz	r3, 8005640 <w25q_read_jedec_id+0x2a>
		handle->hw->cs_control(handle->user_ctx, true);
 800563a:	2101      	movs	r1, #1
 800563c:	6840      	ldr	r0, [r0, #4]
 800563e:	4798      	blx	r3
	}

	// Enviar comando y leer 3 bytes de ID
	if (handle->hw->spi_write_read(handle->user_ctx, &cmd, NULL, 1) != 0) {
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	685e      	ldr	r6, [r3, #4]
 8005644:	2301      	movs	r3, #1
 8005646:	2200      	movs	r2, #0
 8005648:	f10d 0107 	add.w	r1, sp, #7
 800564c:	6860      	ldr	r0, [r4, #4]
 800564e:	47b0      	blx	r6
 8005650:	b9d8      	cbnz	r0, 800568a <w25q_read_jedec_id+0x74>
			handle->hw->cs_control(handle->user_ctx, false);
		}
		return W25Q_ERR_SPI;
	}

	if (handle->hw->spi_write_read(handle->user_ctx, NULL, rx_buf, 3) != 0) {
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	685e      	ldr	r6, [r3, #4]
 8005656:	2303      	movs	r3, #3
 8005658:	466a      	mov	r2, sp
 800565a:	2100      	movs	r1, #0
 800565c:	6860      	ldr	r0, [r4, #4]
 800565e:	47b0      	blx	r6
 8005660:	b9f0      	cbnz	r0, 80056a0 <w25q_read_jedec_id+0x8a>
			handle->hw->cs_control(handle->user_ctx, false);
		}
		return W25Q_ERR_SPI;
	}

	if (handle->software_cs && handle->hw->cs_control) {
 8005662:	7f23      	ldrb	r3, [r4, #28]
 8005664:	b12b      	cbz	r3, 8005672 <w25q_read_jedec_id+0x5c>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	b113      	cbz	r3, 8005672 <w25q_read_jedec_id+0x5c>
		handle->hw->cs_control(handle->user_ctx, false);
 800566c:	2100      	movs	r1, #0
 800566e:	6860      	ldr	r0, [r4, #4]
 8005670:	4798      	blx	r3
	}

	id[0] = rx_buf[0]; // Manufacturer ID
 8005672:	f89d 3000 	ldrb.w	r3, [sp]
 8005676:	702b      	strb	r3, [r5, #0]
	id[1] = rx_buf[1]; // Memory Type
 8005678:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800567c:	706b      	strb	r3, [r5, #1]
	id[2] = rx_buf[2]; // Capacity ID
 800567e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8005682:	70ab      	strb	r3, [r5, #2]

	return W25Q_OK;
 8005684:	2000      	movs	r0, #0
}
 8005686:	b002      	add	sp, #8
 8005688:	bd70      	pop	{r4, r5, r6, pc}
		if (handle->software_cs && handle->hw->cs_control) {
 800568a:	7f23      	ldrb	r3, [r4, #28]
 800568c:	b12b      	cbz	r3, 800569a <w25q_read_jedec_id+0x84>
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	b113      	cbz	r3, 800569a <w25q_read_jedec_id+0x84>
			handle->hw->cs_control(handle->user_ctx, false);
 8005694:	2100      	movs	r1, #0
 8005696:	6860      	ldr	r0, [r4, #4]
 8005698:	4798      	blx	r3
		return W25Q_ERR_SPI;
 800569a:	f06f 0001 	mvn.w	r0, #1
 800569e:	e7f2      	b.n	8005686 <w25q_read_jedec_id+0x70>
		if (handle->software_cs && handle->hw->cs_control) {
 80056a0:	7f23      	ldrb	r3, [r4, #28]
 80056a2:	b12b      	cbz	r3, 80056b0 <w25q_read_jedec_id+0x9a>
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	b113      	cbz	r3, 80056b0 <w25q_read_jedec_id+0x9a>
			handle->hw->cs_control(handle->user_ctx, false);
 80056aa:	2100      	movs	r1, #0
 80056ac:	6860      	ldr	r0, [r4, #4]
 80056ae:	4798      	blx	r3
		return W25Q_ERR_SPI;
 80056b0:	f06f 0001 	mvn.w	r0, #1
 80056b4:	e7e7      	b.n	8005686 <w25q_read_jedec_id+0x70>
		return W25Q_ERR_PARAM;
 80056b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80056ba:	4770      	bx	lr
		return W25Q_ERR_PARAM;
 80056bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056c0:	e7e1      	b.n	8005686 <w25q_read_jedec_id+0x70>

080056c2 <w25q_read_status>:
	return W25Q_OK;
}

w25q_err_t w25q_read_status(w25q_handle_t *handle, uint8_t *status)
{
	if (!handle || !status) {
 80056c2:	2800      	cmp	r0, #0
 80056c4:	d041      	beq.n	800574a <w25q_read_status+0x88>
{
 80056c6:	b570      	push	{r4, r5, r6, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	460d      	mov	r5, r1
 80056cc:	4604      	mov	r4, r0
	if (!handle || !status) {
 80056ce:	2900      	cmp	r1, #0
 80056d0:	d03e      	beq.n	8005750 <w25q_read_status+0x8e>
		return W25Q_ERR_PARAM;
	}

	uint8_t cmd = W25Q_CMD_READ_STATUS_REG1;
 80056d2:	2305      	movs	r3, #5
 80056d4:	f88d 3007 	strb.w	r3, [sp, #7]

	if (handle->software_cs && handle->hw->cs_control) {
 80056d8:	7f03      	ldrb	r3, [r0, #28]
 80056da:	b12b      	cbz	r3, 80056e8 <w25q_read_status+0x26>
 80056dc:	6803      	ldr	r3, [r0, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	b113      	cbz	r3, 80056e8 <w25q_read_status+0x26>
		handle->hw->cs_control(handle->user_ctx, true);
 80056e2:	2101      	movs	r1, #1
 80056e4:	6840      	ldr	r0, [r0, #4]
 80056e6:	4798      	blx	r3
	}

	// Enviar comando y leer status
	if (handle->hw->spi_write_read(handle->user_ctx, &cmd, NULL, 1) != 0) {
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	685e      	ldr	r6, [r3, #4]
 80056ec:	2301      	movs	r3, #1
 80056ee:	2200      	movs	r2, #0
 80056f0:	f10d 0107 	add.w	r1, sp, #7
 80056f4:	6860      	ldr	r0, [r4, #4]
 80056f6:	47b0      	blx	r6
 80056f8:	b988      	cbnz	r0, 800571e <w25q_read_status+0x5c>
			handle->hw->cs_control(handle->user_ctx, false);
		}
		return W25Q_ERR_SPI;
	}

	if (handle->hw->spi_write_read(handle->user_ctx, NULL, status, 1) != 0) {
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	685e      	ldr	r6, [r3, #4]
 80056fe:	2301      	movs	r3, #1
 8005700:	462a      	mov	r2, r5
 8005702:	2100      	movs	r1, #0
 8005704:	6860      	ldr	r0, [r4, #4]
 8005706:	47b0      	blx	r6
 8005708:	b9a0      	cbnz	r0, 8005734 <w25q_read_status+0x72>
			handle->hw->cs_control(handle->user_ctx, false);
		}
		return W25Q_ERR_SPI;
	}

	if (handle->software_cs && handle->hw->cs_control) {
 800570a:	7f23      	ldrb	r3, [r4, #28]
 800570c:	b31b      	cbz	r3, 8005756 <w25q_read_status+0x94>
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	b31b      	cbz	r3, 800575c <w25q_read_status+0x9a>
		handle->hw->cs_control(handle->user_ctx, false);
 8005714:	2100      	movs	r1, #0
 8005716:	6860      	ldr	r0, [r4, #4]
 8005718:	4798      	blx	r3
	}

	return W25Q_OK;
 800571a:	2000      	movs	r0, #0
 800571c:	e01c      	b.n	8005758 <w25q_read_status+0x96>
		if (handle->software_cs && handle->hw->cs_control) {
 800571e:	7f23      	ldrb	r3, [r4, #28]
 8005720:	b12b      	cbz	r3, 800572e <w25q_read_status+0x6c>
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	b113      	cbz	r3, 800572e <w25q_read_status+0x6c>
			handle->hw->cs_control(handle->user_ctx, false);
 8005728:	2100      	movs	r1, #0
 800572a:	6860      	ldr	r0, [r4, #4]
 800572c:	4798      	blx	r3
		return W25Q_ERR_SPI;
 800572e:	f06f 0001 	mvn.w	r0, #1
 8005732:	e011      	b.n	8005758 <w25q_read_status+0x96>
		if (handle->software_cs && handle->hw->cs_control) {
 8005734:	7f23      	ldrb	r3, [r4, #28]
 8005736:	b12b      	cbz	r3, 8005744 <w25q_read_status+0x82>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	b113      	cbz	r3, 8005744 <w25q_read_status+0x82>
			handle->hw->cs_control(handle->user_ctx, false);
 800573e:	2100      	movs	r1, #0
 8005740:	6860      	ldr	r0, [r4, #4]
 8005742:	4798      	blx	r3
		return W25Q_ERR_SPI;
 8005744:	f06f 0001 	mvn.w	r0, #1
 8005748:	e006      	b.n	8005758 <w25q_read_status+0x96>
		return W25Q_ERR_PARAM;
 800574a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 800574e:	4770      	bx	lr
		return W25Q_ERR_PARAM;
 8005750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005754:	e000      	b.n	8005758 <w25q_read_status+0x96>
	return W25Q_OK;
 8005756:	2000      	movs	r0, #0
}
 8005758:	b002      	add	sp, #8
 800575a:	bd70      	pop	{r4, r5, r6, pc}
	return W25Q_OK;
 800575c:	2000      	movs	r0, #0
 800575e:	e7fb      	b.n	8005758 <w25q_read_status+0x96>

08005760 <w25q_write_enable>:
	return ret;
}

w25q_err_t w25q_write_enable(w25q_handle_t *handle)
{
	if (!handle) {
 8005760:	b120      	cbz	r0, 800576c <w25q_write_enable+0xc>
{
 8005762:	b508      	push	{r3, lr}
		return W25Q_ERR_PARAM;
	}

	return w25q_spi_command(handle, W25Q_CMD_WRITE_ENABLE);
 8005764:	2106      	movs	r1, #6
 8005766:	f7ff fe5e 	bl	8005426 <w25q_spi_command>
}
 800576a:	bd08      	pop	{r3, pc}
		return W25Q_ERR_PARAM;
 800576c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8005770:	4770      	bx	lr

08005772 <w25q_wait_busy>:
	return w25q_spi_command(handle, W25Q_CMD_WRITE_DISABLE);
}

w25q_err_t w25q_wait_busy(w25q_handle_t *handle, uint32_t timeout_ms)
{
	if (!handle) {
 8005772:	b1f0      	cbz	r0, 80057b2 <w25q_wait_busy+0x40>
{
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	460e      	mov	r6, r1
 800577a:	4605      	mov	r5, r0
		return W25Q_ERR_PARAM;
	}


	uint32_t elapsed = 0;
 800577c:	2400      	movs	r4, #0
 800577e:	e004      	b.n	800578a <w25q_wait_busy+0x18>

		if (!(status & W25Q_STATUS_BUSY)) {
			return W25Q_OK;
		}

		handle->hw->delay_ms(1);
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	2001      	movs	r0, #1
 8005786:	4798      	blx	r3
		elapsed++;
 8005788:	3401      	adds	r4, #1
	while (elapsed < timeout_ms) {
 800578a:	42b4      	cmp	r4, r6
 800578c:	d20c      	bcs.n	80057a8 <w25q_wait_busy+0x36>
		w25q_err_t ret = w25q_read_status(handle, &status);
 800578e:	f10d 0107 	add.w	r1, sp, #7
 8005792:	4628      	mov	r0, r5
 8005794:	f7ff ff95 	bl	80056c2 <w25q_read_status>
		if (ret != W25Q_OK) {
 8005798:	4602      	mov	r2, r0
 800579a:	b938      	cbnz	r0, 80057ac <w25q_wait_busy+0x3a>
		if (!(status & W25Q_STATUS_BUSY)) {
 800579c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80057a0:	f013 0f01 	tst.w	r3, #1
 80057a4:	d1ec      	bne.n	8005780 <w25q_wait_busy+0xe>
 80057a6:	e001      	b.n	80057ac <w25q_wait_busy+0x3a>
	}

	return W25Q_ERR_TIMEOUT;
 80057a8:	f06f 0202 	mvn.w	r2, #2
}
 80057ac:	4610      	mov	r0, r2
 80057ae:	b002      	add	sp, #8
 80057b0:	bd70      	pop	{r4, r5, r6, pc}
		return W25Q_ERR_PARAM;
 80057b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
}
 80057b6:	4610      	mov	r0, r2
 80057b8:	4770      	bx	lr

080057ba <w25q_read>:

w25q_err_t w25q_read(w25q_handle_t *handle, uint32_t addr, uint8_t *data, size_t len)
{
 80057ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057be:	b083      	sub	sp, #12
	if (!handle || !data) {
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d063      	beq.n	800588c <w25q_read+0xd2>
 80057c4:	460e      	mov	r6, r1
 80057c6:	4615      	mov	r5, r2
 80057c8:	461f      	mov	r7, r3
 80057ca:	4604      	mov	r4, r0
 80057cc:	2a00      	cmp	r2, #0
 80057ce:	d060      	beq.n	8005892 <w25q_read+0xd8>
		return W25Q_ERR_PARAM;
	}

	w25q_err_t ret = w25q_check_address(handle, addr, len);
 80057d0:	461a      	mov	r2, r3
 80057d2:	f7ff feef 	bl	80055b4 <w25q_check_address>
	if (ret != W25Q_OK) {
 80057d6:	4680      	mov	r8, r0
 80057d8:	b118      	cbz	r0, 80057e2 <w25q_read+0x28>
		handle->hw->cs_control(handle->user_ctx, false);
	}

	w25q_unlock(handle);
	return W25Q_OK;
}
 80057da:	4640      	mov	r0, r8
 80057dc:	b003      	add	sp, #12
 80057de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	w25q_lock(handle);
 80057e2:	4620      	mov	r0, r4
 80057e4:	f7ff fe6a 	bl	80054bc <w25q_lock>
	ret = w25q_wait_busy(handle, handle->timeout_ms);
 80057e8:	69a1      	ldr	r1, [r4, #24]
 80057ea:	4620      	mov	r0, r4
 80057ec:	f7ff ffc1 	bl	8005772 <w25q_wait_busy>
	if (ret != W25Q_OK) {
 80057f0:	4680      	mov	r8, r0
 80057f2:	bb58      	cbnz	r0, 800584c <w25q_read+0x92>
	size_t cmd_len = w25q_build_address_command(cmd, W25Q_CMD_READ_DATA, addr, handle->info.addr_mode);
 80057f4:	7de3      	ldrb	r3, [r4, #23]
 80057f6:	4632      	mov	r2, r6
 80057f8:	2103      	movs	r1, #3
 80057fa:	4668      	mov	r0, sp
 80057fc:	f7ff fdfc 	bl	80053f8 <w25q_build_address_command>
 8005800:	4606      	mov	r6, r0
	if (handle->software_cs && handle->hw->cs_control) {
 8005802:	7f23      	ldrb	r3, [r4, #28]
 8005804:	b12b      	cbz	r3, 8005812 <w25q_read+0x58>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	b113      	cbz	r3, 8005812 <w25q_read+0x58>
		handle->hw->cs_control(handle->user_ctx, true);
 800580c:	2101      	movs	r1, #1
 800580e:	6860      	ldr	r0, [r4, #4]
 8005810:	4798      	blx	r3
	if (handle->hw->spi_write_read(handle->user_ctx, cmd, NULL, cmd_len) != 0) {
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8005818:	4633      	mov	r3, r6
 800581a:	2200      	movs	r2, #0
 800581c:	4669      	mov	r1, sp
 800581e:	6860      	ldr	r0, [r4, #4]
 8005820:	47c8      	blx	r9
 8005822:	b9b8      	cbnz	r0, 8005854 <w25q_read+0x9a>
	if (handle->hw->spi_write_read(handle->user_ctx, NULL, data, len) != 0) {
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	685e      	ldr	r6, [r3, #4]
 8005828:	463b      	mov	r3, r7
 800582a:	462a      	mov	r2, r5
 800582c:	2100      	movs	r1, #0
 800582e:	6860      	ldr	r0, [r4, #4]
 8005830:	47b0      	blx	r6
 8005832:	b9e8      	cbnz	r0, 8005870 <w25q_read+0xb6>
	if (handle->software_cs && handle->hw->cs_control) {
 8005834:	7f23      	ldrb	r3, [r4, #28]
 8005836:	b12b      	cbz	r3, 8005844 <w25q_read+0x8a>
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	b113      	cbz	r3, 8005844 <w25q_read+0x8a>
		handle->hw->cs_control(handle->user_ctx, false);
 800583e:	2100      	movs	r1, #0
 8005840:	6860      	ldr	r0, [r4, #4]
 8005842:	4798      	blx	r3
	w25q_unlock(handle);
 8005844:	4620      	mov	r0, r4
 8005846:	f7ff fe40 	bl	80054ca <w25q_unlock>
	return W25Q_OK;
 800584a:	e7c6      	b.n	80057da <w25q_read+0x20>
		w25q_unlock(handle);
 800584c:	4620      	mov	r0, r4
 800584e:	f7ff fe3c 	bl	80054ca <w25q_unlock>
		return ret;
 8005852:	e7c2      	b.n	80057da <w25q_read+0x20>
		if (handle->software_cs && handle->hw->cs_control) {
 8005854:	7f23      	ldrb	r3, [r4, #28]
 8005856:	b12b      	cbz	r3, 8005864 <w25q_read+0xaa>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	b113      	cbz	r3, 8005864 <w25q_read+0xaa>
			handle->hw->cs_control(handle->user_ctx, false);
 800585e:	2100      	movs	r1, #0
 8005860:	6860      	ldr	r0, [r4, #4]
 8005862:	4798      	blx	r3
		w25q_unlock(handle);
 8005864:	4620      	mov	r0, r4
 8005866:	f7ff fe30 	bl	80054ca <w25q_unlock>
		return W25Q_ERR_SPI;
 800586a:	f06f 0801 	mvn.w	r8, #1
 800586e:	e7b4      	b.n	80057da <w25q_read+0x20>
		if (handle->software_cs && handle->hw->cs_control) {
 8005870:	7f23      	ldrb	r3, [r4, #28]
 8005872:	b12b      	cbz	r3, 8005880 <w25q_read+0xc6>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	b113      	cbz	r3, 8005880 <w25q_read+0xc6>
			handle->hw->cs_control(handle->user_ctx, false);
 800587a:	2100      	movs	r1, #0
 800587c:	6860      	ldr	r0, [r4, #4]
 800587e:	4798      	blx	r3
		w25q_unlock(handle);
 8005880:	4620      	mov	r0, r4
 8005882:	f7ff fe22 	bl	80054ca <w25q_unlock>
		return W25Q_ERR_SPI;
 8005886:	f06f 0801 	mvn.w	r8, #1
 800588a:	e7a6      	b.n	80057da <w25q_read+0x20>
		return W25Q_ERR_PARAM;
 800588c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8005890:	e7a3      	b.n	80057da <w25q_read+0x20>
 8005892:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8005896:	e7a0      	b.n	80057da <w25q_read+0x20>

08005898 <w25q_page_program>:

w25q_err_t w25q_page_program(w25q_handle_t *handle, uint32_t addr, const uint8_t *data, size_t len)
{
 8005898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800589c:	b082      	sub	sp, #8
	if (!handle || !data) {
 800589e:	2800      	cmp	r0, #0
 80058a0:	d07c      	beq.n	800599c <w25q_page_program+0x104>
 80058a2:	460e      	mov	r6, r1
 80058a4:	4617      	mov	r7, r2
 80058a6:	461d      	mov	r5, r3
 80058a8:	4604      	mov	r4, r0
 80058aa:	2a00      	cmp	r2, #0
 80058ac:	d079      	beq.n	80059a2 <w25q_page_program+0x10a>
		return W25Q_ERR_PARAM;
	}

	if (len > W25Q_PAGE_SIZE) {
 80058ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058b2:	d879      	bhi.n	80059a8 <w25q_page_program+0x110>
		return W25Q_ERR_SIZE;
	}

	// Verificar que no cruce límite de página
	uint32_t page_start = addr & ~(W25Q_PAGE_SIZE - 1);
	uint32_t page_end = page_start + W25Q_PAGE_SIZE - 1;
 80058b4:	f041 03ff 	orr.w	r3, r1, #255	@ 0xff
	if ((addr + len - 1) > page_end) {
 80058b8:	186a      	adds	r2, r5, r1
 80058ba:	3a01      	subs	r2, #1
 80058bc:	429a      	cmp	r2, r3
 80058be:	d876      	bhi.n	80059ae <w25q_page_program+0x116>
		return W25Q_ERR_SIZE;
	}

	w25q_err_t ret = w25q_check_address(handle, addr, len);
 80058c0:	462a      	mov	r2, r5
 80058c2:	f7ff fe77 	bl	80055b4 <w25q_check_address>
	if (ret != W25Q_OK) {
 80058c6:	4680      	mov	r8, r0
 80058c8:	b118      	cbz	r0, 80058d2 <w25q_page_program+0x3a>
	// Esperar a que termine la programación
	ret = w25q_wait_busy(handle, handle->timeout_ms);

	w25q_unlock(handle);
	return ret;
}
 80058ca:	4640      	mov	r0, r8
 80058cc:	b002      	add	sp, #8
 80058ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	w25q_lock(handle);
 80058d2:	4620      	mov	r0, r4
 80058d4:	f7ff fdf2 	bl	80054bc <w25q_lock>
	ret = w25q_wait_busy(handle, handle->timeout_ms);
 80058d8:	69a1      	ldr	r1, [r4, #24]
 80058da:	4620      	mov	r0, r4
 80058dc:	f7ff ff49 	bl	8005772 <w25q_wait_busy>
	if (ret != W25Q_OK) {
 80058e0:	4680      	mov	r8, r0
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d136      	bne.n	8005954 <w25q_page_program+0xbc>
	ret = w25q_write_enable(handle);
 80058e6:	4620      	mov	r0, r4
 80058e8:	f7ff ff3a 	bl	8005760 <w25q_write_enable>
	if (ret != W25Q_OK) {
 80058ec:	4680      	mov	r8, r0
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d134      	bne.n	800595c <w25q_page_program+0xc4>
	size_t cmd_len = w25q_build_address_command(cmd, W25Q_CMD_PAGE_PROGRAM, addr, handle->info.addr_mode);
 80058f2:	7de3      	ldrb	r3, [r4, #23]
 80058f4:	4632      	mov	r2, r6
 80058f6:	2102      	movs	r1, #2
 80058f8:	4668      	mov	r0, sp
 80058fa:	f7ff fd7d 	bl	80053f8 <w25q_build_address_command>
 80058fe:	4606      	mov	r6, r0
	if (handle->software_cs && handle->hw->cs_control) {
 8005900:	7f23      	ldrb	r3, [r4, #28]
 8005902:	b12b      	cbz	r3, 8005910 <w25q_page_program+0x78>
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	b113      	cbz	r3, 8005910 <w25q_page_program+0x78>
		handle->hw->cs_control(handle->user_ctx, true);
 800590a:	2101      	movs	r1, #1
 800590c:	6860      	ldr	r0, [r4, #4]
 800590e:	4798      	blx	r3
	if (handle->hw->spi_write_read(handle->user_ctx, cmd, NULL, cmd_len) != 0) {
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8005916:	4633      	mov	r3, r6
 8005918:	2200      	movs	r2, #0
 800591a:	4669      	mov	r1, sp
 800591c:	6860      	ldr	r0, [r4, #4]
 800591e:	47c0      	blx	r8
 8005920:	bb00      	cbnz	r0, 8005964 <w25q_page_program+0xcc>
	if (handle->hw->spi_write_read(handle->user_ctx, data, NULL, len) != 0) {
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	685e      	ldr	r6, [r3, #4]
 8005926:	462b      	mov	r3, r5
 8005928:	2200      	movs	r2, #0
 800592a:	4639      	mov	r1, r7
 800592c:	6860      	ldr	r0, [r4, #4]
 800592e:	47b0      	blx	r6
 8005930:	bb30      	cbnz	r0, 8005980 <w25q_page_program+0xe8>
	if (handle->software_cs && handle->hw->cs_control) {
 8005932:	7f23      	ldrb	r3, [r4, #28]
 8005934:	b12b      	cbz	r3, 8005942 <w25q_page_program+0xaa>
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	b113      	cbz	r3, 8005942 <w25q_page_program+0xaa>
		handle->hw->cs_control(handle->user_ctx, false);
 800593c:	2100      	movs	r1, #0
 800593e:	6860      	ldr	r0, [r4, #4]
 8005940:	4798      	blx	r3
	ret = w25q_wait_busy(handle, handle->timeout_ms);
 8005942:	69a1      	ldr	r1, [r4, #24]
 8005944:	4620      	mov	r0, r4
 8005946:	f7ff ff14 	bl	8005772 <w25q_wait_busy>
 800594a:	4680      	mov	r8, r0
	w25q_unlock(handle);
 800594c:	4620      	mov	r0, r4
 800594e:	f7ff fdbc 	bl	80054ca <w25q_unlock>
	return ret;
 8005952:	e7ba      	b.n	80058ca <w25q_page_program+0x32>
		w25q_unlock(handle);
 8005954:	4620      	mov	r0, r4
 8005956:	f7ff fdb8 	bl	80054ca <w25q_unlock>
		return ret;
 800595a:	e7b6      	b.n	80058ca <w25q_page_program+0x32>
		w25q_unlock(handle);
 800595c:	4620      	mov	r0, r4
 800595e:	f7ff fdb4 	bl	80054ca <w25q_unlock>
		return ret;
 8005962:	e7b2      	b.n	80058ca <w25q_page_program+0x32>
		if (handle->software_cs && handle->hw->cs_control) {
 8005964:	7f23      	ldrb	r3, [r4, #28]
 8005966:	b12b      	cbz	r3, 8005974 <w25q_page_program+0xdc>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	b113      	cbz	r3, 8005974 <w25q_page_program+0xdc>
			handle->hw->cs_control(handle->user_ctx, false);
 800596e:	2100      	movs	r1, #0
 8005970:	6860      	ldr	r0, [r4, #4]
 8005972:	4798      	blx	r3
		w25q_unlock(handle);
 8005974:	4620      	mov	r0, r4
 8005976:	f7ff fda8 	bl	80054ca <w25q_unlock>
		return W25Q_ERR_SPI;
 800597a:	f06f 0801 	mvn.w	r8, #1
 800597e:	e7a4      	b.n	80058ca <w25q_page_program+0x32>
		if (handle->software_cs && handle->hw->cs_control) {
 8005980:	7f23      	ldrb	r3, [r4, #28]
 8005982:	b12b      	cbz	r3, 8005990 <w25q_page_program+0xf8>
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	b113      	cbz	r3, 8005990 <w25q_page_program+0xf8>
			handle->hw->cs_control(handle->user_ctx, false);
 800598a:	2100      	movs	r1, #0
 800598c:	6860      	ldr	r0, [r4, #4]
 800598e:	4798      	blx	r3
		w25q_unlock(handle);
 8005990:	4620      	mov	r0, r4
 8005992:	f7ff fd9a 	bl	80054ca <w25q_unlock>
		return W25Q_ERR_SPI;
 8005996:	f06f 0801 	mvn.w	r8, #1
 800599a:	e796      	b.n	80058ca <w25q_page_program+0x32>
		return W25Q_ERR_PARAM;
 800599c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80059a0:	e793      	b.n	80058ca <w25q_page_program+0x32>
 80059a2:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80059a6:	e790      	b.n	80058ca <w25q_page_program+0x32>
		return W25Q_ERR_SIZE;
 80059a8:	f06f 0807 	mvn.w	r8, #7
 80059ac:	e78d      	b.n	80058ca <w25q_page_program+0x32>
		return W25Q_ERR_SIZE;
 80059ae:	f06f 0807 	mvn.w	r8, #7
 80059b2:	e78a      	b.n	80058ca <w25q_page_program+0x32>

080059b4 <w25q_write>:

w25q_err_t w25q_write(w25q_handle_t *handle, uint32_t addr, const uint8_t *data, size_t len)
{
 80059b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!handle || !data) {
 80059b8:	b358      	cbz	r0, 8005a12 <w25q_write+0x5e>
 80059ba:	4688      	mov	r8, r1
 80059bc:	4617      	mov	r7, r2
 80059be:	461e      	mov	r6, r3
 80059c0:	4681      	mov	r9, r0
 80059c2:	b34a      	cbz	r2, 8005a18 <w25q_write+0x64>
		return W25Q_ERR_PARAM;
	}

	w25q_err_t ret = w25q_check_address(handle, addr, len);
 80059c4:	461a      	mov	r2, r3
 80059c6:	f7ff fdf5 	bl	80055b4 <w25q_check_address>
	if (ret != W25Q_OK) {
 80059ca:	4682      	mov	sl, r0
 80059cc:	b110      	cbz	r0, 80059d4 <w25q_write+0x20>
		bytes_written += chunk_size;
	}

	w25q_unlock(handle);
	return ret;
}
 80059ce:	4650      	mov	r0, sl
 80059d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	w25q_lock(handle);
 80059d4:	4648      	mov	r0, r9
 80059d6:	f7ff fd71 	bl	80054bc <w25q_lock>
	size_t bytes_written = 0;
 80059da:	2400      	movs	r4, #0
	while (bytes_written < len) {
 80059dc:	e007      	b.n	80059ee <w25q_write+0x3a>
		ret = w25q_page_program(handle, current_addr, data + bytes_written, chunk_size);
 80059de:	462b      	mov	r3, r5
 80059e0:	193a      	adds	r2, r7, r4
 80059e2:	4648      	mov	r0, r9
 80059e4:	f7ff ff58 	bl	8005898 <w25q_page_program>
		if (ret != W25Q_OK) {
 80059e8:	4682      	mov	sl, r0
 80059ea:	b970      	cbnz	r0, 8005a0a <w25q_write+0x56>
		bytes_written += chunk_size;
 80059ec:	442c      	add	r4, r5
	while (bytes_written < len) {
 80059ee:	42b4      	cmp	r4, r6
 80059f0:	d20b      	bcs.n	8005a0a <w25q_write+0x56>
		uint32_t current_addr = addr + bytes_written;
 80059f2:	eb04 0108 	add.w	r1, r4, r8
		size_t remaining = len - bytes_written;
 80059f6:	1b35      	subs	r5, r6, r4
		uint32_t page_boundary = (current_addr & ~(W25Q_PAGE_SIZE - 1)) + W25Q_PAGE_SIZE;
 80059f8:	f021 00ff 	bic.w	r0, r1, #255	@ 0xff
 80059fc:	f500 7080 	add.w	r0, r0, #256	@ 0x100
		size_t chunk_size = page_boundary - current_addr;
 8005a00:	1a40      	subs	r0, r0, r1
		if (chunk_size > remaining) {
 8005a02:	4285      	cmp	r5, r0
 8005a04:	d3eb      	bcc.n	80059de <w25q_write+0x2a>
		size_t chunk_size = page_boundary - current_addr;
 8005a06:	4605      	mov	r5, r0
 8005a08:	e7e9      	b.n	80059de <w25q_write+0x2a>
	w25q_unlock(handle);
 8005a0a:	4648      	mov	r0, r9
 8005a0c:	f7ff fd5d 	bl	80054ca <w25q_unlock>
	return ret;
 8005a10:	e7dd      	b.n	80059ce <w25q_write+0x1a>
		return W25Q_ERR_PARAM;
 8005a12:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005a16:	e7da      	b.n	80059ce <w25q_write+0x1a>
 8005a18:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005a1c:	e7d7      	b.n	80059ce <w25q_write+0x1a>

08005a1e <w25q_erase_sector>:

w25q_err_t w25q_erase_sector(w25q_handle_t *handle, uint32_t sector_addr)
{
 8005a1e:	b570      	push	{r4, r5, r6, lr}
 8005a20:	b082      	sub	sp, #8
	if (!handle) {
 8005a22:	b3d8      	cbz	r0, 8005a9c <w25q_erase_sector+0x7e>
 8005a24:	460c      	mov	r4, r1
 8005a26:	4605      	mov	r5, r0
		return W25Q_ERR_PARAM;
	}

	// Verificar alineación a sector
	if ((sector_addr & (W25Q_SECTOR_SIZE - 1)) != 0) {
 8005a28:	f3c1 030b 	ubfx	r3, r1, #0, #12
 8005a2c:	bbcb      	cbnz	r3, 8005aa2 <w25q_erase_sector+0x84>
		return W25Q_ERR_ADDR;
	}

	w25q_err_t ret = w25q_check_address(handle, sector_addr, W25Q_SECTOR_SIZE);
 8005a2e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005a32:	f7ff fdbf 	bl	80055b4 <w25q_check_address>
	if (ret != W25Q_OK) {
 8005a36:	4606      	mov	r6, r0
 8005a38:	b110      	cbz	r0, 8005a40 <w25q_erase_sector+0x22>
		ret = w25q_wait_busy(handle, handle->timeout_ms);
	}

	w25q_unlock(handle);
	return ret;
}
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	b002      	add	sp, #8
 8005a3e:	bd70      	pop	{r4, r5, r6, pc}
	w25q_lock(handle);
 8005a40:	4628      	mov	r0, r5
 8005a42:	f7ff fd3b 	bl	80054bc <w25q_lock>
	ret = w25q_wait_busy(handle, handle->timeout_ms);
 8005a46:	69a9      	ldr	r1, [r5, #24]
 8005a48:	4628      	mov	r0, r5
 8005a4a:	f7ff fe92 	bl	8005772 <w25q_wait_busy>
	if (ret != W25Q_OK) {
 8005a4e:	4606      	mov	r6, r0
 8005a50:	b9b0      	cbnz	r0, 8005a80 <w25q_erase_sector+0x62>
	ret = w25q_write_enable(handle);
 8005a52:	4628      	mov	r0, r5
 8005a54:	f7ff fe84 	bl	8005760 <w25q_write_enable>
	if (ret != W25Q_OK) {
 8005a58:	4606      	mov	r6, r0
 8005a5a:	b9a8      	cbnz	r0, 8005a88 <w25q_erase_sector+0x6a>
	size_t cmd_len = w25q_build_address_command(cmd, W25Q_CMD_BLOCK_ERASE_4KB, sector_addr, handle->info.addr_mode);
 8005a5c:	7deb      	ldrb	r3, [r5, #23]
 8005a5e:	4622      	mov	r2, r4
 8005a60:	2120      	movs	r1, #32
 8005a62:	4668      	mov	r0, sp
 8005a64:	f7ff fcc8 	bl	80053f8 <w25q_build_address_command>
 8005a68:	4603      	mov	r3, r0
	ret = w25q_spi_transfer(handle, cmd, NULL, cmd_len);
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	4669      	mov	r1, sp
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f7ff fcfe 	bl	8005470 <w25q_spi_transfer>
	if (ret == W25Q_OK) {
 8005a74:	4606      	mov	r6, r0
 8005a76:	b158      	cbz	r0, 8005a90 <w25q_erase_sector+0x72>
	w25q_unlock(handle);
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f7ff fd26 	bl	80054ca <w25q_unlock>
	return ret;
 8005a7e:	e7dc      	b.n	8005a3a <w25q_erase_sector+0x1c>
		w25q_unlock(handle);
 8005a80:	4628      	mov	r0, r5
 8005a82:	f7ff fd22 	bl	80054ca <w25q_unlock>
		return ret;
 8005a86:	e7d8      	b.n	8005a3a <w25q_erase_sector+0x1c>
		w25q_unlock(handle);
 8005a88:	4628      	mov	r0, r5
 8005a8a:	f7ff fd1e 	bl	80054ca <w25q_unlock>
		return ret;
 8005a8e:	e7d4      	b.n	8005a3a <w25q_erase_sector+0x1c>
		ret = w25q_wait_busy(handle, handle->timeout_ms);
 8005a90:	69a9      	ldr	r1, [r5, #24]
 8005a92:	4628      	mov	r0, r5
 8005a94:	f7ff fe6d 	bl	8005772 <w25q_wait_busy>
 8005a98:	4606      	mov	r6, r0
 8005a9a:	e7ed      	b.n	8005a78 <w25q_erase_sector+0x5a>
		return W25Q_ERR_PARAM;
 8005a9c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8005aa0:	e7cb      	b.n	8005a3a <w25q_erase_sector+0x1c>
		return W25Q_ERR_ADDR;
 8005aa2:	f06f 0606 	mvn.w	r6, #6
 8005aa6:	e7c8      	b.n	8005a3a <w25q_erase_sector+0x1c>

08005aa8 <w25q_power_down>:
	return ret;
}

w25q_err_t w25q_power_down(w25q_handle_t *handle)
{
	if (!handle) {
 8005aa8:	b120      	cbz	r0, 8005ab4 <w25q_power_down+0xc>
{
 8005aaa:	b508      	push	{r3, lr}
		return W25Q_ERR_PARAM;
	}

	return w25q_spi_command(handle, W25Q_CMD_POWER_DOWN);
 8005aac:	21b9      	movs	r1, #185	@ 0xb9
 8005aae:	f7ff fcba 	bl	8005426 <w25q_spi_command>
}
 8005ab2:	bd08      	pop	{r3, pc}
		return W25Q_ERR_PARAM;
 8005ab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8005ab8:	4770      	bx	lr

08005aba <w25q_deinit>:
	if (!handle || !handle->initialized) {
 8005aba:	b1b8      	cbz	r0, 8005aec <w25q_deinit+0x32>
{
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4604      	mov	r4, r0
	if (!handle || !handle->initialized) {
 8005ac0:	7f43      	ldrb	r3, [r0, #29]
 8005ac2:	b1b3      	cbz	r3, 8005af2 <w25q_deinit+0x38>
	w25q_lock(handle);
 8005ac4:	f7ff fcfa 	bl	80054bc <w25q_lock>
	if (handle->info.addr_mode == W25Q_ADDR_4BYTE) {
 8005ac8:	7de3      	ldrb	r3, [r4, #23]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d009      	beq.n	8005ae2 <w25q_deinit+0x28>
	w25q_power_down(handle);
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f7ff ffea 	bl	8005aa8 <w25q_power_down>
	handle->initialized = false;
 8005ad4:	2500      	movs	r5, #0
 8005ad6:	7765      	strb	r5, [r4, #29]
	w25q_unlock(handle);
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f7ff fcf6 	bl	80054ca <w25q_unlock>
	return W25Q_OK;
 8005ade:	4628      	mov	r0, r5
}
 8005ae0:	bd38      	pop	{r3, r4, r5, pc}
		w25q_spi_command(handle, W25Q_CMD_EXIT_4BYTE_ADDR);
 8005ae2:	21e9      	movs	r1, #233	@ 0xe9
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f7ff fc9e 	bl	8005426 <w25q_spi_command>
 8005aea:	e7f0      	b.n	8005ace <w25q_deinit+0x14>
		return W25Q_ERR_PARAM;
 8005aec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8005af0:	4770      	bx	lr
		return W25Q_ERR_PARAM;
 8005af2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005af6:	e7f3      	b.n	8005ae0 <w25q_deinit+0x26>

08005af8 <w25q_release_power_down>:

w25q_err_t w25q_release_power_down(w25q_handle_t *handle)
{
	if (!handle) {
 8005af8:	b120      	cbz	r0, 8005b04 <w25q_release_power_down+0xc>
{
 8005afa:	b508      	push	{r3, lr}
		return W25Q_ERR_PARAM;
	}

	return w25q_spi_command(handle, W25Q_CMD_RELEASE_POWER_DOWN);
 8005afc:	21ab      	movs	r1, #171	@ 0xab
 8005afe:	f7ff fc92 	bl	8005426 <w25q_spi_command>
}
 8005b02:	bd08      	pop	{r3, pc}
		return W25Q_ERR_PARAM;
 8005b04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8005b08:	4770      	bx	lr

08005b0a <w25q_init>:
{
 8005b0a:	b570      	push	{r4, r5, r6, lr}
 8005b0c:	b082      	sub	sp, #8
	if (!handle || !config || !config->hw || !config->hw->spi_write_read || !config->hw->delay_ms) {
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	d059      	beq.n	8005bc6 <w25q_init+0xbc>
 8005b12:	460d      	mov	r5, r1
 8005b14:	4604      	mov	r4, r0
 8005b16:	2900      	cmp	r1, #0
 8005b18:	d058      	beq.n	8005bcc <w25q_init+0xc2>
 8005b1a:	680b      	ldr	r3, [r1, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d058      	beq.n	8005bd2 <w25q_init+0xc8>
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	2a00      	cmp	r2, #0
 8005b24:	d058      	beq.n	8005bd8 <w25q_init+0xce>
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d058      	beq.n	8005bde <w25q_init+0xd4>
	memset(handle, 0, sizeof(w25q_handle_t));
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	2100      	movs	r1, #0
 8005b30:	f000 fb30 	bl	8006194 <memset>
	handle->hw = config->hw;
 8005b34:	682a      	ldr	r2, [r5, #0]
 8005b36:	6022      	str	r2, [r4, #0]
	handle->user_ctx = config->user_ctx;
 8005b38:	6868      	ldr	r0, [r5, #4]
 8005b3a:	6060      	str	r0, [r4, #4]
	handle->timeout_ms = config->timeout_ms ? config->timeout_ms : W25Q_DEFAULT_TIMEOUT_MS;
 8005b3c:	68ab      	ldr	r3, [r5, #8]
 8005b3e:	b90b      	cbnz	r3, 8005b44 <w25q_init+0x3a>
 8005b40:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005b44:	61a3      	str	r3, [r4, #24]
	handle->software_cs = config->software_cs;
 8005b46:	7b2b      	ldrb	r3, [r5, #12]
 8005b48:	7723      	strb	r3, [r4, #28]
	if (handle->hw->spi_init) {
 8005b4a:	6813      	ldr	r3, [r2, #0]
 8005b4c:	b113      	cbz	r3, 8005b54 <w25q_init+0x4a>
		if (handle->hw->spi_init(handle->user_ctx) != 0) {
 8005b4e:	4798      	blx	r3
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d147      	bne.n	8005be4 <w25q_init+0xda>
	w25q_lock(handle);
 8005b54:	4620      	mov	r0, r4
 8005b56:	f7ff fcb1 	bl	80054bc <w25q_lock>
	w25q_release_power_down(handle);
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f7ff ffcc 	bl	8005af8 <w25q_release_power_down>
	w25q_err_t ret = w25q_read_jedec_id(handle, jedec_id);
 8005b60:	a901      	add	r1, sp, #4
 8005b62:	4620      	mov	r0, r4
 8005b64:	f7ff fd57 	bl	8005616 <w25q_read_jedec_id>
	if (ret != W25Q_OK) {
 8005b68:	4605      	mov	r5, r0
 8005b6a:	b9c0      	cbnz	r0, 8005b9e <w25q_init+0x94>
	ret = w25q_detect_capacity(handle, jedec_id[0], jedec_id[1], jedec_id[2]);
 8005b6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005b70:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005b74:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f7ff fcad 	bl	80054d8 <w25q_detect_capacity>
	if (ret != W25Q_OK) {
 8005b7e:	4605      	mov	r5, r0
 8005b80:	b988      	cbnz	r0, 8005ba6 <w25q_init+0x9c>
	if (handle->info.addr_mode == W25Q_ADDR_4BYTE) {
 8005b82:	7de3      	ldrb	r3, [r4, #23]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d012      	beq.n	8005bae <w25q_init+0xa4>
	w25q_release_power_down(handle);
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f7ff ffb5 	bl	8005af8 <w25q_release_power_down>
	handle->initialized = true;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	7763      	strb	r3, [r4, #29]
	w25q_unlock(handle);
 8005b92:	4620      	mov	r0, r4
 8005b94:	f7ff fc99 	bl	80054ca <w25q_unlock>
}
 8005b98:	4628      	mov	r0, r5
 8005b9a:	b002      	add	sp, #8
 8005b9c:	bd70      	pop	{r4, r5, r6, pc}
		w25q_unlock(handle);
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	f7ff fc93 	bl	80054ca <w25q_unlock>
		return ret;
 8005ba4:	e7f8      	b.n	8005b98 <w25q_init+0x8e>
		w25q_unlock(handle);
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f7ff fc8f 	bl	80054ca <w25q_unlock>
		return ret;
 8005bac:	e7f4      	b.n	8005b98 <w25q_init+0x8e>
		ret = w25q_spi_command(handle, W25Q_CMD_ENABLE_4BYTE_ADDR);
 8005bae:	21b7      	movs	r1, #183	@ 0xb7
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f7ff fc38 	bl	8005426 <w25q_spi_command>
		if (ret != W25Q_OK) {
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d0e5      	beq.n	8005b88 <w25q_init+0x7e>
			w25q_unlock(handle);
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f7ff fc84 	bl	80054ca <w25q_unlock>
			return ret;
 8005bc2:	4635      	mov	r5, r6
 8005bc4:	e7e8      	b.n	8005b98 <w25q_init+0x8e>
		return W25Q_ERR_PARAM;
 8005bc6:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005bca:	e7e5      	b.n	8005b98 <w25q_init+0x8e>
 8005bcc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005bd0:	e7e2      	b.n	8005b98 <w25q_init+0x8e>
 8005bd2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005bd6:	e7df      	b.n	8005b98 <w25q_init+0x8e>
 8005bd8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005bdc:	e7dc      	b.n	8005b98 <w25q_init+0x8e>
 8005bde:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005be2:	e7d9      	b.n	8005b98 <w25q_init+0x8e>
			return W25Q_ERR_SPI;
 8005be4:	f06f 0501 	mvn.w	r5, #1
 8005be8:	e7d6      	b.n	8005b98 <w25q_init+0x8e>
	...

08005bec <malloc>:
 8005bec:	4b02      	ldr	r3, [pc, #8]	@ (8005bf8 <malloc+0xc>)
 8005bee:	4601      	mov	r1, r0
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	f000 b82d 	b.w	8005c50 <_malloc_r>
 8005bf6:	bf00      	nop
 8005bf8:	20000068 	.word	0x20000068

08005bfc <free>:
 8005bfc:	4b02      	ldr	r3, [pc, #8]	@ (8005c08 <free+0xc>)
 8005bfe:	4601      	mov	r1, r0
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	f000 bb61 	b.w	80062c8 <_free_r>
 8005c06:	bf00      	nop
 8005c08:	20000068 	.word	0x20000068

08005c0c <sbrk_aligned>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	4e0f      	ldr	r6, [pc, #60]	@ (8005c4c <sbrk_aligned+0x40>)
 8005c10:	460c      	mov	r4, r1
 8005c12:	6831      	ldr	r1, [r6, #0]
 8005c14:	4605      	mov	r5, r0
 8005c16:	b911      	cbnz	r1, 8005c1e <sbrk_aligned+0x12>
 8005c18:	f000 faf8 	bl	800620c <_sbrk_r>
 8005c1c:	6030      	str	r0, [r6, #0]
 8005c1e:	4621      	mov	r1, r4
 8005c20:	4628      	mov	r0, r5
 8005c22:	f000 faf3 	bl	800620c <_sbrk_r>
 8005c26:	1c43      	adds	r3, r0, #1
 8005c28:	d103      	bne.n	8005c32 <sbrk_aligned+0x26>
 8005c2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005c2e:	4620      	mov	r0, r4
 8005c30:	bd70      	pop	{r4, r5, r6, pc}
 8005c32:	1cc4      	adds	r4, r0, #3
 8005c34:	f024 0403 	bic.w	r4, r4, #3
 8005c38:	42a0      	cmp	r0, r4
 8005c3a:	d0f8      	beq.n	8005c2e <sbrk_aligned+0x22>
 8005c3c:	1a21      	subs	r1, r4, r0
 8005c3e:	4628      	mov	r0, r5
 8005c40:	f000 fae4 	bl	800620c <_sbrk_r>
 8005c44:	3001      	adds	r0, #1
 8005c46:	d1f2      	bne.n	8005c2e <sbrk_aligned+0x22>
 8005c48:	e7ef      	b.n	8005c2a <sbrk_aligned+0x1e>
 8005c4a:	bf00      	nop
 8005c4c:	2000037c 	.word	0x2000037c

08005c50 <_malloc_r>:
 8005c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c54:	1ccd      	adds	r5, r1, #3
 8005c56:	f025 0503 	bic.w	r5, r5, #3
 8005c5a:	3508      	adds	r5, #8
 8005c5c:	2d0c      	cmp	r5, #12
 8005c5e:	bf38      	it	cc
 8005c60:	250c      	movcc	r5, #12
 8005c62:	2d00      	cmp	r5, #0
 8005c64:	4606      	mov	r6, r0
 8005c66:	db01      	blt.n	8005c6c <_malloc_r+0x1c>
 8005c68:	42a9      	cmp	r1, r5
 8005c6a:	d904      	bls.n	8005c76 <_malloc_r+0x26>
 8005c6c:	230c      	movs	r3, #12
 8005c6e:	6033      	str	r3, [r6, #0]
 8005c70:	2000      	movs	r0, #0
 8005c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d4c <_malloc_r+0xfc>
 8005c7a:	f000 f869 	bl	8005d50 <__malloc_lock>
 8005c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c82:	461c      	mov	r4, r3
 8005c84:	bb44      	cbnz	r4, 8005cd8 <_malloc_r+0x88>
 8005c86:	4629      	mov	r1, r5
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f7ff ffbf 	bl	8005c0c <sbrk_aligned>
 8005c8e:	1c43      	adds	r3, r0, #1
 8005c90:	4604      	mov	r4, r0
 8005c92:	d158      	bne.n	8005d46 <_malloc_r+0xf6>
 8005c94:	f8d8 4000 	ldr.w	r4, [r8]
 8005c98:	4627      	mov	r7, r4
 8005c9a:	2f00      	cmp	r7, #0
 8005c9c:	d143      	bne.n	8005d26 <_malloc_r+0xd6>
 8005c9e:	2c00      	cmp	r4, #0
 8005ca0:	d04b      	beq.n	8005d3a <_malloc_r+0xea>
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	4639      	mov	r1, r7
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	eb04 0903 	add.w	r9, r4, r3
 8005cac:	f000 faae 	bl	800620c <_sbrk_r>
 8005cb0:	4581      	cmp	r9, r0
 8005cb2:	d142      	bne.n	8005d3a <_malloc_r+0xea>
 8005cb4:	6821      	ldr	r1, [r4, #0]
 8005cb6:	1a6d      	subs	r5, r5, r1
 8005cb8:	4629      	mov	r1, r5
 8005cba:	4630      	mov	r0, r6
 8005cbc:	f7ff ffa6 	bl	8005c0c <sbrk_aligned>
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d03a      	beq.n	8005d3a <_malloc_r+0xea>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	442b      	add	r3, r5
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	f8d8 3000 	ldr.w	r3, [r8]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	bb62      	cbnz	r2, 8005d2c <_malloc_r+0xdc>
 8005cd2:	f8c8 7000 	str.w	r7, [r8]
 8005cd6:	e00f      	b.n	8005cf8 <_malloc_r+0xa8>
 8005cd8:	6822      	ldr	r2, [r4, #0]
 8005cda:	1b52      	subs	r2, r2, r5
 8005cdc:	d420      	bmi.n	8005d20 <_malloc_r+0xd0>
 8005cde:	2a0b      	cmp	r2, #11
 8005ce0:	d917      	bls.n	8005d12 <_malloc_r+0xc2>
 8005ce2:	1961      	adds	r1, r4, r5
 8005ce4:	42a3      	cmp	r3, r4
 8005ce6:	6025      	str	r5, [r4, #0]
 8005ce8:	bf18      	it	ne
 8005cea:	6059      	strne	r1, [r3, #4]
 8005cec:	6863      	ldr	r3, [r4, #4]
 8005cee:	bf08      	it	eq
 8005cf0:	f8c8 1000 	streq.w	r1, [r8]
 8005cf4:	5162      	str	r2, [r4, r5]
 8005cf6:	604b      	str	r3, [r1, #4]
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	f000 f82f 	bl	8005d5c <__malloc_unlock>
 8005cfe:	f104 000b 	add.w	r0, r4, #11
 8005d02:	1d23      	adds	r3, r4, #4
 8005d04:	f020 0007 	bic.w	r0, r0, #7
 8005d08:	1ac2      	subs	r2, r0, r3
 8005d0a:	bf1c      	itt	ne
 8005d0c:	1a1b      	subne	r3, r3, r0
 8005d0e:	50a3      	strne	r3, [r4, r2]
 8005d10:	e7af      	b.n	8005c72 <_malloc_r+0x22>
 8005d12:	6862      	ldr	r2, [r4, #4]
 8005d14:	42a3      	cmp	r3, r4
 8005d16:	bf0c      	ite	eq
 8005d18:	f8c8 2000 	streq.w	r2, [r8]
 8005d1c:	605a      	strne	r2, [r3, #4]
 8005d1e:	e7eb      	b.n	8005cf8 <_malloc_r+0xa8>
 8005d20:	4623      	mov	r3, r4
 8005d22:	6864      	ldr	r4, [r4, #4]
 8005d24:	e7ae      	b.n	8005c84 <_malloc_r+0x34>
 8005d26:	463c      	mov	r4, r7
 8005d28:	687f      	ldr	r7, [r7, #4]
 8005d2a:	e7b6      	b.n	8005c9a <_malloc_r+0x4a>
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	42a3      	cmp	r3, r4
 8005d32:	d1fb      	bne.n	8005d2c <_malloc_r+0xdc>
 8005d34:	2300      	movs	r3, #0
 8005d36:	6053      	str	r3, [r2, #4]
 8005d38:	e7de      	b.n	8005cf8 <_malloc_r+0xa8>
 8005d3a:	230c      	movs	r3, #12
 8005d3c:	6033      	str	r3, [r6, #0]
 8005d3e:	4630      	mov	r0, r6
 8005d40:	f000 f80c 	bl	8005d5c <__malloc_unlock>
 8005d44:	e794      	b.n	8005c70 <_malloc_r+0x20>
 8005d46:	6005      	str	r5, [r0, #0]
 8005d48:	e7d6      	b.n	8005cf8 <_malloc_r+0xa8>
 8005d4a:	bf00      	nop
 8005d4c:	20000380 	.word	0x20000380

08005d50 <__malloc_lock>:
 8005d50:	4801      	ldr	r0, [pc, #4]	@ (8005d58 <__malloc_lock+0x8>)
 8005d52:	f000 baa8 	b.w	80062a6 <__retarget_lock_acquire_recursive>
 8005d56:	bf00      	nop
 8005d58:	200004c4 	.word	0x200004c4

08005d5c <__malloc_unlock>:
 8005d5c:	4801      	ldr	r0, [pc, #4]	@ (8005d64 <__malloc_unlock+0x8>)
 8005d5e:	f000 baa3 	b.w	80062a8 <__retarget_lock_release_recursive>
 8005d62:	bf00      	nop
 8005d64:	200004c4 	.word	0x200004c4

08005d68 <std>:
 8005d68:	2300      	movs	r3, #0
 8005d6a:	b510      	push	{r4, lr}
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d76:	6083      	str	r3, [r0, #8]
 8005d78:	8181      	strh	r1, [r0, #12]
 8005d7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d7c:	81c2      	strh	r2, [r0, #14]
 8005d7e:	6183      	str	r3, [r0, #24]
 8005d80:	4619      	mov	r1, r3
 8005d82:	2208      	movs	r2, #8
 8005d84:	305c      	adds	r0, #92	@ 0x5c
 8005d86:	f000 fa05 	bl	8006194 <memset>
 8005d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc0 <std+0x58>)
 8005d8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc4 <std+0x5c>)
 8005d90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d92:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc8 <std+0x60>)
 8005d94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d96:	4b0d      	ldr	r3, [pc, #52]	@ (8005dcc <std+0x64>)
 8005d98:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd0 <std+0x68>)
 8005d9c:	6224      	str	r4, [r4, #32]
 8005d9e:	429c      	cmp	r4, r3
 8005da0:	d006      	beq.n	8005db0 <std+0x48>
 8005da2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005da6:	4294      	cmp	r4, r2
 8005da8:	d002      	beq.n	8005db0 <std+0x48>
 8005daa:	33d0      	adds	r3, #208	@ 0xd0
 8005dac:	429c      	cmp	r4, r3
 8005dae:	d105      	bne.n	8005dbc <std+0x54>
 8005db0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005db8:	f000 ba74 	b.w	80062a4 <__retarget_lock_init_recursive>
 8005dbc:	bd10      	pop	{r4, pc}
 8005dbe:	bf00      	nop
 8005dc0:	08005fc5 	.word	0x08005fc5
 8005dc4:	08005fe7 	.word	0x08005fe7
 8005dc8:	0800601f 	.word	0x0800601f
 8005dcc:	08006043 	.word	0x08006043
 8005dd0:	20000384 	.word	0x20000384

08005dd4 <stdio_exit_handler>:
 8005dd4:	4a02      	ldr	r2, [pc, #8]	@ (8005de0 <stdio_exit_handler+0xc>)
 8005dd6:	4903      	ldr	r1, [pc, #12]	@ (8005de4 <stdio_exit_handler+0x10>)
 8005dd8:	4803      	ldr	r0, [pc, #12]	@ (8005de8 <stdio_exit_handler+0x14>)
 8005dda:	f000 b87b 	b.w	8005ed4 <_fwalk_sglue>
 8005dde:	bf00      	nop
 8005de0:	2000005c 	.word	0x2000005c
 8005de4:	08006a01 	.word	0x08006a01
 8005de8:	2000006c 	.word	0x2000006c

08005dec <cleanup_stdio>:
 8005dec:	6841      	ldr	r1, [r0, #4]
 8005dee:	4b0c      	ldr	r3, [pc, #48]	@ (8005e20 <cleanup_stdio+0x34>)
 8005df0:	4299      	cmp	r1, r3
 8005df2:	b510      	push	{r4, lr}
 8005df4:	4604      	mov	r4, r0
 8005df6:	d001      	beq.n	8005dfc <cleanup_stdio+0x10>
 8005df8:	f000 fe02 	bl	8006a00 <_fflush_r>
 8005dfc:	68a1      	ldr	r1, [r4, #8]
 8005dfe:	4b09      	ldr	r3, [pc, #36]	@ (8005e24 <cleanup_stdio+0x38>)
 8005e00:	4299      	cmp	r1, r3
 8005e02:	d002      	beq.n	8005e0a <cleanup_stdio+0x1e>
 8005e04:	4620      	mov	r0, r4
 8005e06:	f000 fdfb 	bl	8006a00 <_fflush_r>
 8005e0a:	68e1      	ldr	r1, [r4, #12]
 8005e0c:	4b06      	ldr	r3, [pc, #24]	@ (8005e28 <cleanup_stdio+0x3c>)
 8005e0e:	4299      	cmp	r1, r3
 8005e10:	d004      	beq.n	8005e1c <cleanup_stdio+0x30>
 8005e12:	4620      	mov	r0, r4
 8005e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e18:	f000 bdf2 	b.w	8006a00 <_fflush_r>
 8005e1c:	bd10      	pop	{r4, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000384 	.word	0x20000384
 8005e24:	200003ec 	.word	0x200003ec
 8005e28:	20000454 	.word	0x20000454

08005e2c <global_stdio_init.part.0>:
 8005e2c:	b510      	push	{r4, lr}
 8005e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e5c <global_stdio_init.part.0+0x30>)
 8005e30:	4c0b      	ldr	r4, [pc, #44]	@ (8005e60 <global_stdio_init.part.0+0x34>)
 8005e32:	4a0c      	ldr	r2, [pc, #48]	@ (8005e64 <global_stdio_init.part.0+0x38>)
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	4620      	mov	r0, r4
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2104      	movs	r1, #4
 8005e3c:	f7ff ff94 	bl	8005d68 <std>
 8005e40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e44:	2201      	movs	r2, #1
 8005e46:	2109      	movs	r1, #9
 8005e48:	f7ff ff8e 	bl	8005d68 <std>
 8005e4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e50:	2202      	movs	r2, #2
 8005e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e56:	2112      	movs	r1, #18
 8005e58:	f7ff bf86 	b.w	8005d68 <std>
 8005e5c:	200004bc 	.word	0x200004bc
 8005e60:	20000384 	.word	0x20000384
 8005e64:	08005dd5 	.word	0x08005dd5

08005e68 <__sfp_lock_acquire>:
 8005e68:	4801      	ldr	r0, [pc, #4]	@ (8005e70 <__sfp_lock_acquire+0x8>)
 8005e6a:	f000 ba1c 	b.w	80062a6 <__retarget_lock_acquire_recursive>
 8005e6e:	bf00      	nop
 8005e70:	200004c5 	.word	0x200004c5

08005e74 <__sfp_lock_release>:
 8005e74:	4801      	ldr	r0, [pc, #4]	@ (8005e7c <__sfp_lock_release+0x8>)
 8005e76:	f000 ba17 	b.w	80062a8 <__retarget_lock_release_recursive>
 8005e7a:	bf00      	nop
 8005e7c:	200004c5 	.word	0x200004c5

08005e80 <__sinit>:
 8005e80:	b510      	push	{r4, lr}
 8005e82:	4604      	mov	r4, r0
 8005e84:	f7ff fff0 	bl	8005e68 <__sfp_lock_acquire>
 8005e88:	6a23      	ldr	r3, [r4, #32]
 8005e8a:	b11b      	cbz	r3, 8005e94 <__sinit+0x14>
 8005e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e90:	f7ff bff0 	b.w	8005e74 <__sfp_lock_release>
 8005e94:	4b04      	ldr	r3, [pc, #16]	@ (8005ea8 <__sinit+0x28>)
 8005e96:	6223      	str	r3, [r4, #32]
 8005e98:	4b04      	ldr	r3, [pc, #16]	@ (8005eac <__sinit+0x2c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1f5      	bne.n	8005e8c <__sinit+0xc>
 8005ea0:	f7ff ffc4 	bl	8005e2c <global_stdio_init.part.0>
 8005ea4:	e7f2      	b.n	8005e8c <__sinit+0xc>
 8005ea6:	bf00      	nop
 8005ea8:	08005ded 	.word	0x08005ded
 8005eac:	200004bc 	.word	0x200004bc

08005eb0 <fiprintf>:
 8005eb0:	b40e      	push	{r1, r2, r3}
 8005eb2:	b503      	push	{r0, r1, lr}
 8005eb4:	4601      	mov	r1, r0
 8005eb6:	ab03      	add	r3, sp, #12
 8005eb8:	4805      	ldr	r0, [pc, #20]	@ (8005ed0 <fiprintf+0x20>)
 8005eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ebe:	6800      	ldr	r0, [r0, #0]
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	f000 fa75 	bl	80063b0 <_vfiprintf_r>
 8005ec6:	b002      	add	sp, #8
 8005ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ecc:	b003      	add	sp, #12
 8005ece:	4770      	bx	lr
 8005ed0:	20000068 	.word	0x20000068

08005ed4 <_fwalk_sglue>:
 8005ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ed8:	4607      	mov	r7, r0
 8005eda:	4688      	mov	r8, r1
 8005edc:	4614      	mov	r4, r2
 8005ede:	2600      	movs	r6, #0
 8005ee0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ee4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ee8:	d505      	bpl.n	8005ef6 <_fwalk_sglue+0x22>
 8005eea:	6824      	ldr	r4, [r4, #0]
 8005eec:	2c00      	cmp	r4, #0
 8005eee:	d1f7      	bne.n	8005ee0 <_fwalk_sglue+0xc>
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ef6:	89ab      	ldrh	r3, [r5, #12]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d907      	bls.n	8005f0c <_fwalk_sglue+0x38>
 8005efc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f00:	3301      	adds	r3, #1
 8005f02:	d003      	beq.n	8005f0c <_fwalk_sglue+0x38>
 8005f04:	4629      	mov	r1, r5
 8005f06:	4638      	mov	r0, r7
 8005f08:	47c0      	blx	r8
 8005f0a:	4306      	orrs	r6, r0
 8005f0c:	3568      	adds	r5, #104	@ 0x68
 8005f0e:	e7e9      	b.n	8005ee4 <_fwalk_sglue+0x10>

08005f10 <_fwrite_r>:
 8005f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f14:	9c08      	ldr	r4, [sp, #32]
 8005f16:	468a      	mov	sl, r1
 8005f18:	4690      	mov	r8, r2
 8005f1a:	fb02 f903 	mul.w	r9, r2, r3
 8005f1e:	4606      	mov	r6, r0
 8005f20:	b118      	cbz	r0, 8005f2a <_fwrite_r+0x1a>
 8005f22:	6a03      	ldr	r3, [r0, #32]
 8005f24:	b90b      	cbnz	r3, 8005f2a <_fwrite_r+0x1a>
 8005f26:	f7ff ffab 	bl	8005e80 <__sinit>
 8005f2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f2c:	07dd      	lsls	r5, r3, #31
 8005f2e:	d405      	bmi.n	8005f3c <_fwrite_r+0x2c>
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	0598      	lsls	r0, r3, #22
 8005f34:	d402      	bmi.n	8005f3c <_fwrite_r+0x2c>
 8005f36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f38:	f000 f9b5 	bl	80062a6 <__retarget_lock_acquire_recursive>
 8005f3c:	89a3      	ldrh	r3, [r4, #12]
 8005f3e:	0719      	lsls	r1, r3, #28
 8005f40:	d516      	bpl.n	8005f70 <_fwrite_r+0x60>
 8005f42:	6923      	ldr	r3, [r4, #16]
 8005f44:	b1a3      	cbz	r3, 8005f70 <_fwrite_r+0x60>
 8005f46:	2500      	movs	r5, #0
 8005f48:	454d      	cmp	r5, r9
 8005f4a:	d01f      	beq.n	8005f8c <_fwrite_r+0x7c>
 8005f4c:	68a7      	ldr	r7, [r4, #8]
 8005f4e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8005f52:	3f01      	subs	r7, #1
 8005f54:	2f00      	cmp	r7, #0
 8005f56:	60a7      	str	r7, [r4, #8]
 8005f58:	da04      	bge.n	8005f64 <_fwrite_r+0x54>
 8005f5a:	69a3      	ldr	r3, [r4, #24]
 8005f5c:	429f      	cmp	r7, r3
 8005f5e:	db0f      	blt.n	8005f80 <_fwrite_r+0x70>
 8005f60:	290a      	cmp	r1, #10
 8005f62:	d00d      	beq.n	8005f80 <_fwrite_r+0x70>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	6022      	str	r2, [r4, #0]
 8005f6a:	7019      	strb	r1, [r3, #0]
 8005f6c:	3501      	adds	r5, #1
 8005f6e:	e7eb      	b.n	8005f48 <_fwrite_r+0x38>
 8005f70:	4621      	mov	r1, r4
 8005f72:	4630      	mov	r0, r6
 8005f74:	f000 f8a8 	bl	80060c8 <__swsetup_r>
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d0e4      	beq.n	8005f46 <_fwrite_r+0x36>
 8005f7c:	2500      	movs	r5, #0
 8005f7e:	e005      	b.n	8005f8c <_fwrite_r+0x7c>
 8005f80:	4622      	mov	r2, r4
 8005f82:	4630      	mov	r0, r6
 8005f84:	f000 f861 	bl	800604a <__swbuf_r>
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d1ef      	bne.n	8005f6c <_fwrite_r+0x5c>
 8005f8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f8e:	07da      	lsls	r2, r3, #31
 8005f90:	d405      	bmi.n	8005f9e <_fwrite_r+0x8e>
 8005f92:	89a3      	ldrh	r3, [r4, #12]
 8005f94:	059b      	lsls	r3, r3, #22
 8005f96:	d402      	bmi.n	8005f9e <_fwrite_r+0x8e>
 8005f98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f9a:	f000 f985 	bl	80062a8 <__retarget_lock_release_recursive>
 8005f9e:	fbb5 f0f8 	udiv	r0, r5, r8
 8005fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08005fa8 <fwrite>:
 8005fa8:	b507      	push	{r0, r1, r2, lr}
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	4613      	mov	r3, r2
 8005fae:	460a      	mov	r2, r1
 8005fb0:	4601      	mov	r1, r0
 8005fb2:	4803      	ldr	r0, [pc, #12]	@ (8005fc0 <fwrite+0x18>)
 8005fb4:	6800      	ldr	r0, [r0, #0]
 8005fb6:	f7ff ffab 	bl	8005f10 <_fwrite_r>
 8005fba:	b003      	add	sp, #12
 8005fbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fc0:	20000068 	.word	0x20000068

08005fc4 <__sread>:
 8005fc4:	b510      	push	{r4, lr}
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fcc:	f000 f90c 	bl	80061e8 <_read_r>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	bfab      	itete	ge
 8005fd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8005fd8:	181b      	addge	r3, r3, r0
 8005fda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005fde:	bfac      	ite	ge
 8005fe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005fe2:	81a3      	strhlt	r3, [r4, #12]
 8005fe4:	bd10      	pop	{r4, pc}

08005fe6 <__swrite>:
 8005fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fea:	461f      	mov	r7, r3
 8005fec:	898b      	ldrh	r3, [r1, #12]
 8005fee:	05db      	lsls	r3, r3, #23
 8005ff0:	4605      	mov	r5, r0
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	4616      	mov	r6, r2
 8005ff6:	d505      	bpl.n	8006004 <__swrite+0x1e>
 8005ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	2200      	movs	r2, #0
 8006000:	f000 f8e0 	bl	80061c4 <_lseek_r>
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800600a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800600e:	81a3      	strh	r3, [r4, #12]
 8006010:	4632      	mov	r2, r6
 8006012:	463b      	mov	r3, r7
 8006014:	4628      	mov	r0, r5
 8006016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800601a:	f000 b907 	b.w	800622c <_write_r>

0800601e <__sseek>:
 800601e:	b510      	push	{r4, lr}
 8006020:	460c      	mov	r4, r1
 8006022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006026:	f000 f8cd 	bl	80061c4 <_lseek_r>
 800602a:	1c43      	adds	r3, r0, #1
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	bf15      	itete	ne
 8006030:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006032:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006036:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800603a:	81a3      	strheq	r3, [r4, #12]
 800603c:	bf18      	it	ne
 800603e:	81a3      	strhne	r3, [r4, #12]
 8006040:	bd10      	pop	{r4, pc}

08006042 <__sclose>:
 8006042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006046:	f000 b8ad 	b.w	80061a4 <_close_r>

0800604a <__swbuf_r>:
 800604a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604c:	460e      	mov	r6, r1
 800604e:	4614      	mov	r4, r2
 8006050:	4605      	mov	r5, r0
 8006052:	b118      	cbz	r0, 800605c <__swbuf_r+0x12>
 8006054:	6a03      	ldr	r3, [r0, #32]
 8006056:	b90b      	cbnz	r3, 800605c <__swbuf_r+0x12>
 8006058:	f7ff ff12 	bl	8005e80 <__sinit>
 800605c:	69a3      	ldr	r3, [r4, #24]
 800605e:	60a3      	str	r3, [r4, #8]
 8006060:	89a3      	ldrh	r3, [r4, #12]
 8006062:	071a      	lsls	r2, r3, #28
 8006064:	d501      	bpl.n	800606a <__swbuf_r+0x20>
 8006066:	6923      	ldr	r3, [r4, #16]
 8006068:	b943      	cbnz	r3, 800607c <__swbuf_r+0x32>
 800606a:	4621      	mov	r1, r4
 800606c:	4628      	mov	r0, r5
 800606e:	f000 f82b 	bl	80060c8 <__swsetup_r>
 8006072:	b118      	cbz	r0, 800607c <__swbuf_r+0x32>
 8006074:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006078:	4638      	mov	r0, r7
 800607a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	6922      	ldr	r2, [r4, #16]
 8006080:	1a98      	subs	r0, r3, r2
 8006082:	6963      	ldr	r3, [r4, #20]
 8006084:	b2f6      	uxtb	r6, r6
 8006086:	4283      	cmp	r3, r0
 8006088:	4637      	mov	r7, r6
 800608a:	dc05      	bgt.n	8006098 <__swbuf_r+0x4e>
 800608c:	4621      	mov	r1, r4
 800608e:	4628      	mov	r0, r5
 8006090:	f000 fcb6 	bl	8006a00 <_fflush_r>
 8006094:	2800      	cmp	r0, #0
 8006096:	d1ed      	bne.n	8006074 <__swbuf_r+0x2a>
 8006098:	68a3      	ldr	r3, [r4, #8]
 800609a:	3b01      	subs	r3, #1
 800609c:	60a3      	str	r3, [r4, #8]
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	6022      	str	r2, [r4, #0]
 80060a4:	701e      	strb	r6, [r3, #0]
 80060a6:	6962      	ldr	r2, [r4, #20]
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d004      	beq.n	80060b8 <__swbuf_r+0x6e>
 80060ae:	89a3      	ldrh	r3, [r4, #12]
 80060b0:	07db      	lsls	r3, r3, #31
 80060b2:	d5e1      	bpl.n	8006078 <__swbuf_r+0x2e>
 80060b4:	2e0a      	cmp	r6, #10
 80060b6:	d1df      	bne.n	8006078 <__swbuf_r+0x2e>
 80060b8:	4621      	mov	r1, r4
 80060ba:	4628      	mov	r0, r5
 80060bc:	f000 fca0 	bl	8006a00 <_fflush_r>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d0d9      	beq.n	8006078 <__swbuf_r+0x2e>
 80060c4:	e7d6      	b.n	8006074 <__swbuf_r+0x2a>
	...

080060c8 <__swsetup_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4b29      	ldr	r3, [pc, #164]	@ (8006170 <__swsetup_r+0xa8>)
 80060cc:	4605      	mov	r5, r0
 80060ce:	6818      	ldr	r0, [r3, #0]
 80060d0:	460c      	mov	r4, r1
 80060d2:	b118      	cbz	r0, 80060dc <__swsetup_r+0x14>
 80060d4:	6a03      	ldr	r3, [r0, #32]
 80060d6:	b90b      	cbnz	r3, 80060dc <__swsetup_r+0x14>
 80060d8:	f7ff fed2 	bl	8005e80 <__sinit>
 80060dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060e0:	0719      	lsls	r1, r3, #28
 80060e2:	d422      	bmi.n	800612a <__swsetup_r+0x62>
 80060e4:	06da      	lsls	r2, r3, #27
 80060e6:	d407      	bmi.n	80060f8 <__swsetup_r+0x30>
 80060e8:	2209      	movs	r2, #9
 80060ea:	602a      	str	r2, [r5, #0]
 80060ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060f0:	81a3      	strh	r3, [r4, #12]
 80060f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060f6:	e033      	b.n	8006160 <__swsetup_r+0x98>
 80060f8:	0758      	lsls	r0, r3, #29
 80060fa:	d512      	bpl.n	8006122 <__swsetup_r+0x5a>
 80060fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060fe:	b141      	cbz	r1, 8006112 <__swsetup_r+0x4a>
 8006100:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006104:	4299      	cmp	r1, r3
 8006106:	d002      	beq.n	800610e <__swsetup_r+0x46>
 8006108:	4628      	mov	r0, r5
 800610a:	f000 f8dd 	bl	80062c8 <_free_r>
 800610e:	2300      	movs	r3, #0
 8006110:	6363      	str	r3, [r4, #52]	@ 0x34
 8006112:	89a3      	ldrh	r3, [r4, #12]
 8006114:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006118:	81a3      	strh	r3, [r4, #12]
 800611a:	2300      	movs	r3, #0
 800611c:	6063      	str	r3, [r4, #4]
 800611e:	6923      	ldr	r3, [r4, #16]
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	89a3      	ldrh	r3, [r4, #12]
 8006124:	f043 0308 	orr.w	r3, r3, #8
 8006128:	81a3      	strh	r3, [r4, #12]
 800612a:	6923      	ldr	r3, [r4, #16]
 800612c:	b94b      	cbnz	r3, 8006142 <__swsetup_r+0x7a>
 800612e:	89a3      	ldrh	r3, [r4, #12]
 8006130:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006138:	d003      	beq.n	8006142 <__swsetup_r+0x7a>
 800613a:	4621      	mov	r1, r4
 800613c:	4628      	mov	r0, r5
 800613e:	f000 fcad 	bl	8006a9c <__smakebuf_r>
 8006142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006146:	f013 0201 	ands.w	r2, r3, #1
 800614a:	d00a      	beq.n	8006162 <__swsetup_r+0x9a>
 800614c:	2200      	movs	r2, #0
 800614e:	60a2      	str	r2, [r4, #8]
 8006150:	6962      	ldr	r2, [r4, #20]
 8006152:	4252      	negs	r2, r2
 8006154:	61a2      	str	r2, [r4, #24]
 8006156:	6922      	ldr	r2, [r4, #16]
 8006158:	b942      	cbnz	r2, 800616c <__swsetup_r+0xa4>
 800615a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800615e:	d1c5      	bne.n	80060ec <__swsetup_r+0x24>
 8006160:	bd38      	pop	{r3, r4, r5, pc}
 8006162:	0799      	lsls	r1, r3, #30
 8006164:	bf58      	it	pl
 8006166:	6962      	ldrpl	r2, [r4, #20]
 8006168:	60a2      	str	r2, [r4, #8]
 800616a:	e7f4      	b.n	8006156 <__swsetup_r+0x8e>
 800616c:	2000      	movs	r0, #0
 800616e:	e7f7      	b.n	8006160 <__swsetup_r+0x98>
 8006170:	20000068 	.word	0x20000068

08006174 <memcmp>:
 8006174:	b510      	push	{r4, lr}
 8006176:	3901      	subs	r1, #1
 8006178:	4402      	add	r2, r0
 800617a:	4290      	cmp	r0, r2
 800617c:	d101      	bne.n	8006182 <memcmp+0xe>
 800617e:	2000      	movs	r0, #0
 8006180:	e005      	b.n	800618e <memcmp+0x1a>
 8006182:	7803      	ldrb	r3, [r0, #0]
 8006184:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006188:	42a3      	cmp	r3, r4
 800618a:	d001      	beq.n	8006190 <memcmp+0x1c>
 800618c:	1b18      	subs	r0, r3, r4
 800618e:	bd10      	pop	{r4, pc}
 8006190:	3001      	adds	r0, #1
 8006192:	e7f2      	b.n	800617a <memcmp+0x6>

08006194 <memset>:
 8006194:	4402      	add	r2, r0
 8006196:	4603      	mov	r3, r0
 8006198:	4293      	cmp	r3, r2
 800619a:	d100      	bne.n	800619e <memset+0xa>
 800619c:	4770      	bx	lr
 800619e:	f803 1b01 	strb.w	r1, [r3], #1
 80061a2:	e7f9      	b.n	8006198 <memset+0x4>

080061a4 <_close_r>:
 80061a4:	b538      	push	{r3, r4, r5, lr}
 80061a6:	4d06      	ldr	r5, [pc, #24]	@ (80061c0 <_close_r+0x1c>)
 80061a8:	2300      	movs	r3, #0
 80061aa:	4604      	mov	r4, r0
 80061ac:	4608      	mov	r0, r1
 80061ae:	602b      	str	r3, [r5, #0]
 80061b0:	f7fb f97c 	bl	80014ac <_close>
 80061b4:	1c43      	adds	r3, r0, #1
 80061b6:	d102      	bne.n	80061be <_close_r+0x1a>
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	b103      	cbz	r3, 80061be <_close_r+0x1a>
 80061bc:	6023      	str	r3, [r4, #0]
 80061be:	bd38      	pop	{r3, r4, r5, pc}
 80061c0:	200004c0 	.word	0x200004c0

080061c4 <_lseek_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4d07      	ldr	r5, [pc, #28]	@ (80061e4 <_lseek_r+0x20>)
 80061c8:	4604      	mov	r4, r0
 80061ca:	4608      	mov	r0, r1
 80061cc:	4611      	mov	r1, r2
 80061ce:	2200      	movs	r2, #0
 80061d0:	602a      	str	r2, [r5, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	f7fb f974 	bl	80014c0 <_lseek>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d102      	bne.n	80061e2 <_lseek_r+0x1e>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	b103      	cbz	r3, 80061e2 <_lseek_r+0x1e>
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	200004c0 	.word	0x200004c0

080061e8 <_read_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4d07      	ldr	r5, [pc, #28]	@ (8006208 <_read_r+0x20>)
 80061ec:	4604      	mov	r4, r0
 80061ee:	4608      	mov	r0, r1
 80061f0:	4611      	mov	r1, r2
 80061f2:	2200      	movs	r2, #0
 80061f4:	602a      	str	r2, [r5, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	f7fb f93a 	bl	8001470 <_read>
 80061fc:	1c43      	adds	r3, r0, #1
 80061fe:	d102      	bne.n	8006206 <_read_r+0x1e>
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	b103      	cbz	r3, 8006206 <_read_r+0x1e>
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	bd38      	pop	{r3, r4, r5, pc}
 8006208:	200004c0 	.word	0x200004c0

0800620c <_sbrk_r>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	4d06      	ldr	r5, [pc, #24]	@ (8006228 <_sbrk_r+0x1c>)
 8006210:	2300      	movs	r3, #0
 8006212:	4604      	mov	r4, r0
 8006214:	4608      	mov	r0, r1
 8006216:	602b      	str	r3, [r5, #0]
 8006218:	f7fb f954 	bl	80014c4 <_sbrk>
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d102      	bne.n	8006226 <_sbrk_r+0x1a>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	b103      	cbz	r3, 8006226 <_sbrk_r+0x1a>
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	bd38      	pop	{r3, r4, r5, pc}
 8006228:	200004c0 	.word	0x200004c0

0800622c <_write_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4d07      	ldr	r5, [pc, #28]	@ (800624c <_write_r+0x20>)
 8006230:	4604      	mov	r4, r0
 8006232:	4608      	mov	r0, r1
 8006234:	4611      	mov	r1, r2
 8006236:	2200      	movs	r2, #0
 8006238:	602a      	str	r2, [r5, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	f7fb f928 	bl	8001490 <_write>
 8006240:	1c43      	adds	r3, r0, #1
 8006242:	d102      	bne.n	800624a <_write_r+0x1e>
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	b103      	cbz	r3, 800624a <_write_r+0x1e>
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	bd38      	pop	{r3, r4, r5, pc}
 800624c:	200004c0 	.word	0x200004c0

08006250 <__errno>:
 8006250:	4b01      	ldr	r3, [pc, #4]	@ (8006258 <__errno+0x8>)
 8006252:	6818      	ldr	r0, [r3, #0]
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	20000068 	.word	0x20000068

0800625c <__libc_init_array>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	4d0d      	ldr	r5, [pc, #52]	@ (8006294 <__libc_init_array+0x38>)
 8006260:	4c0d      	ldr	r4, [pc, #52]	@ (8006298 <__libc_init_array+0x3c>)
 8006262:	1b64      	subs	r4, r4, r5
 8006264:	10a4      	asrs	r4, r4, #2
 8006266:	2600      	movs	r6, #0
 8006268:	42a6      	cmp	r6, r4
 800626a:	d109      	bne.n	8006280 <__libc_init_array+0x24>
 800626c:	4d0b      	ldr	r5, [pc, #44]	@ (800629c <__libc_init_array+0x40>)
 800626e:	4c0c      	ldr	r4, [pc, #48]	@ (80062a0 <__libc_init_array+0x44>)
 8006270:	f000 fc72 	bl	8006b58 <_init>
 8006274:	1b64      	subs	r4, r4, r5
 8006276:	10a4      	asrs	r4, r4, #2
 8006278:	2600      	movs	r6, #0
 800627a:	42a6      	cmp	r6, r4
 800627c:	d105      	bne.n	800628a <__libc_init_array+0x2e>
 800627e:	bd70      	pop	{r4, r5, r6, pc}
 8006280:	f855 3b04 	ldr.w	r3, [r5], #4
 8006284:	4798      	blx	r3
 8006286:	3601      	adds	r6, #1
 8006288:	e7ee      	b.n	8006268 <__libc_init_array+0xc>
 800628a:	f855 3b04 	ldr.w	r3, [r5], #4
 800628e:	4798      	blx	r3
 8006290:	3601      	adds	r6, #1
 8006292:	e7f2      	b.n	800627a <__libc_init_array+0x1e>
 8006294:	080079ec 	.word	0x080079ec
 8006298:	080079ec 	.word	0x080079ec
 800629c:	080079ec 	.word	0x080079ec
 80062a0:	080079f0 	.word	0x080079f0

080062a4 <__retarget_lock_init_recursive>:
 80062a4:	4770      	bx	lr

080062a6 <__retarget_lock_acquire_recursive>:
 80062a6:	4770      	bx	lr

080062a8 <__retarget_lock_release_recursive>:
 80062a8:	4770      	bx	lr

080062aa <memcpy>:
 80062aa:	440a      	add	r2, r1
 80062ac:	4291      	cmp	r1, r2
 80062ae:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80062b2:	d100      	bne.n	80062b6 <memcpy+0xc>
 80062b4:	4770      	bx	lr
 80062b6:	b510      	push	{r4, lr}
 80062b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062c0:	4291      	cmp	r1, r2
 80062c2:	d1f9      	bne.n	80062b8 <memcpy+0xe>
 80062c4:	bd10      	pop	{r4, pc}
	...

080062c8 <_free_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	4605      	mov	r5, r0
 80062cc:	2900      	cmp	r1, #0
 80062ce:	d041      	beq.n	8006354 <_free_r+0x8c>
 80062d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062d4:	1f0c      	subs	r4, r1, #4
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	bfb8      	it	lt
 80062da:	18e4      	addlt	r4, r4, r3
 80062dc:	f7ff fd38 	bl	8005d50 <__malloc_lock>
 80062e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006358 <_free_r+0x90>)
 80062e2:	6813      	ldr	r3, [r2, #0]
 80062e4:	b933      	cbnz	r3, 80062f4 <_free_r+0x2c>
 80062e6:	6063      	str	r3, [r4, #4]
 80062e8:	6014      	str	r4, [r2, #0]
 80062ea:	4628      	mov	r0, r5
 80062ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062f0:	f7ff bd34 	b.w	8005d5c <__malloc_unlock>
 80062f4:	42a3      	cmp	r3, r4
 80062f6:	d908      	bls.n	800630a <_free_r+0x42>
 80062f8:	6820      	ldr	r0, [r4, #0]
 80062fa:	1821      	adds	r1, r4, r0
 80062fc:	428b      	cmp	r3, r1
 80062fe:	bf01      	itttt	eq
 8006300:	6819      	ldreq	r1, [r3, #0]
 8006302:	685b      	ldreq	r3, [r3, #4]
 8006304:	1809      	addeq	r1, r1, r0
 8006306:	6021      	streq	r1, [r4, #0]
 8006308:	e7ed      	b.n	80062e6 <_free_r+0x1e>
 800630a:	461a      	mov	r2, r3
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	b10b      	cbz	r3, 8006314 <_free_r+0x4c>
 8006310:	42a3      	cmp	r3, r4
 8006312:	d9fa      	bls.n	800630a <_free_r+0x42>
 8006314:	6811      	ldr	r1, [r2, #0]
 8006316:	1850      	adds	r0, r2, r1
 8006318:	42a0      	cmp	r0, r4
 800631a:	d10b      	bne.n	8006334 <_free_r+0x6c>
 800631c:	6820      	ldr	r0, [r4, #0]
 800631e:	4401      	add	r1, r0
 8006320:	1850      	adds	r0, r2, r1
 8006322:	4283      	cmp	r3, r0
 8006324:	6011      	str	r1, [r2, #0]
 8006326:	d1e0      	bne.n	80062ea <_free_r+0x22>
 8006328:	6818      	ldr	r0, [r3, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	6053      	str	r3, [r2, #4]
 800632e:	4408      	add	r0, r1
 8006330:	6010      	str	r0, [r2, #0]
 8006332:	e7da      	b.n	80062ea <_free_r+0x22>
 8006334:	d902      	bls.n	800633c <_free_r+0x74>
 8006336:	230c      	movs	r3, #12
 8006338:	602b      	str	r3, [r5, #0]
 800633a:	e7d6      	b.n	80062ea <_free_r+0x22>
 800633c:	6820      	ldr	r0, [r4, #0]
 800633e:	1821      	adds	r1, r4, r0
 8006340:	428b      	cmp	r3, r1
 8006342:	bf04      	itt	eq
 8006344:	6819      	ldreq	r1, [r3, #0]
 8006346:	685b      	ldreq	r3, [r3, #4]
 8006348:	6063      	str	r3, [r4, #4]
 800634a:	bf04      	itt	eq
 800634c:	1809      	addeq	r1, r1, r0
 800634e:	6021      	streq	r1, [r4, #0]
 8006350:	6054      	str	r4, [r2, #4]
 8006352:	e7ca      	b.n	80062ea <_free_r+0x22>
 8006354:	bd38      	pop	{r3, r4, r5, pc}
 8006356:	bf00      	nop
 8006358:	20000380 	.word	0x20000380

0800635c <__sfputc_r>:
 800635c:	6893      	ldr	r3, [r2, #8]
 800635e:	3b01      	subs	r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	b410      	push	{r4}
 8006364:	6093      	str	r3, [r2, #8]
 8006366:	da08      	bge.n	800637a <__sfputc_r+0x1e>
 8006368:	6994      	ldr	r4, [r2, #24]
 800636a:	42a3      	cmp	r3, r4
 800636c:	db01      	blt.n	8006372 <__sfputc_r+0x16>
 800636e:	290a      	cmp	r1, #10
 8006370:	d103      	bne.n	800637a <__sfputc_r+0x1e>
 8006372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006376:	f7ff be68 	b.w	800604a <__swbuf_r>
 800637a:	6813      	ldr	r3, [r2, #0]
 800637c:	1c58      	adds	r0, r3, #1
 800637e:	6010      	str	r0, [r2, #0]
 8006380:	7019      	strb	r1, [r3, #0]
 8006382:	4608      	mov	r0, r1
 8006384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006388:	4770      	bx	lr

0800638a <__sfputs_r>:
 800638a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638c:	4606      	mov	r6, r0
 800638e:	460f      	mov	r7, r1
 8006390:	4614      	mov	r4, r2
 8006392:	18d5      	adds	r5, r2, r3
 8006394:	42ac      	cmp	r4, r5
 8006396:	d101      	bne.n	800639c <__sfputs_r+0x12>
 8006398:	2000      	movs	r0, #0
 800639a:	e007      	b.n	80063ac <__sfputs_r+0x22>
 800639c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063a0:	463a      	mov	r2, r7
 80063a2:	4630      	mov	r0, r6
 80063a4:	f7ff ffda 	bl	800635c <__sfputc_r>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d1f3      	bne.n	8006394 <__sfputs_r+0xa>
 80063ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063b0 <_vfiprintf_r>:
 80063b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b4:	460d      	mov	r5, r1
 80063b6:	b09d      	sub	sp, #116	@ 0x74
 80063b8:	4614      	mov	r4, r2
 80063ba:	4698      	mov	r8, r3
 80063bc:	4606      	mov	r6, r0
 80063be:	b118      	cbz	r0, 80063c8 <_vfiprintf_r+0x18>
 80063c0:	6a03      	ldr	r3, [r0, #32]
 80063c2:	b90b      	cbnz	r3, 80063c8 <_vfiprintf_r+0x18>
 80063c4:	f7ff fd5c 	bl	8005e80 <__sinit>
 80063c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063ca:	07d9      	lsls	r1, r3, #31
 80063cc:	d405      	bmi.n	80063da <_vfiprintf_r+0x2a>
 80063ce:	89ab      	ldrh	r3, [r5, #12]
 80063d0:	059a      	lsls	r2, r3, #22
 80063d2:	d402      	bmi.n	80063da <_vfiprintf_r+0x2a>
 80063d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063d6:	f7ff ff66 	bl	80062a6 <__retarget_lock_acquire_recursive>
 80063da:	89ab      	ldrh	r3, [r5, #12]
 80063dc:	071b      	lsls	r3, r3, #28
 80063de:	d501      	bpl.n	80063e4 <_vfiprintf_r+0x34>
 80063e0:	692b      	ldr	r3, [r5, #16]
 80063e2:	b99b      	cbnz	r3, 800640c <_vfiprintf_r+0x5c>
 80063e4:	4629      	mov	r1, r5
 80063e6:	4630      	mov	r0, r6
 80063e8:	f7ff fe6e 	bl	80060c8 <__swsetup_r>
 80063ec:	b170      	cbz	r0, 800640c <_vfiprintf_r+0x5c>
 80063ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063f0:	07dc      	lsls	r4, r3, #31
 80063f2:	d504      	bpl.n	80063fe <_vfiprintf_r+0x4e>
 80063f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063f8:	b01d      	add	sp, #116	@ 0x74
 80063fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fe:	89ab      	ldrh	r3, [r5, #12]
 8006400:	0598      	lsls	r0, r3, #22
 8006402:	d4f7      	bmi.n	80063f4 <_vfiprintf_r+0x44>
 8006404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006406:	f7ff ff4f 	bl	80062a8 <__retarget_lock_release_recursive>
 800640a:	e7f3      	b.n	80063f4 <_vfiprintf_r+0x44>
 800640c:	2300      	movs	r3, #0
 800640e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006410:	2320      	movs	r3, #32
 8006412:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006416:	f8cd 800c 	str.w	r8, [sp, #12]
 800641a:	2330      	movs	r3, #48	@ 0x30
 800641c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80065cc <_vfiprintf_r+0x21c>
 8006420:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006424:	f04f 0901 	mov.w	r9, #1
 8006428:	4623      	mov	r3, r4
 800642a:	469a      	mov	sl, r3
 800642c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006430:	b10a      	cbz	r2, 8006436 <_vfiprintf_r+0x86>
 8006432:	2a25      	cmp	r2, #37	@ 0x25
 8006434:	d1f9      	bne.n	800642a <_vfiprintf_r+0x7a>
 8006436:	ebba 0b04 	subs.w	fp, sl, r4
 800643a:	d00b      	beq.n	8006454 <_vfiprintf_r+0xa4>
 800643c:	465b      	mov	r3, fp
 800643e:	4622      	mov	r2, r4
 8006440:	4629      	mov	r1, r5
 8006442:	4630      	mov	r0, r6
 8006444:	f7ff ffa1 	bl	800638a <__sfputs_r>
 8006448:	3001      	adds	r0, #1
 800644a:	f000 80a7 	beq.w	800659c <_vfiprintf_r+0x1ec>
 800644e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006450:	445a      	add	r2, fp
 8006452:	9209      	str	r2, [sp, #36]	@ 0x24
 8006454:	f89a 3000 	ldrb.w	r3, [sl]
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 809f 	beq.w	800659c <_vfiprintf_r+0x1ec>
 800645e:	2300      	movs	r3, #0
 8006460:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006468:	f10a 0a01 	add.w	sl, sl, #1
 800646c:	9304      	str	r3, [sp, #16]
 800646e:	9307      	str	r3, [sp, #28]
 8006470:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006474:	931a      	str	r3, [sp, #104]	@ 0x68
 8006476:	4654      	mov	r4, sl
 8006478:	2205      	movs	r2, #5
 800647a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800647e:	4853      	ldr	r0, [pc, #332]	@ (80065cc <_vfiprintf_r+0x21c>)
 8006480:	f7f9 fea6 	bl	80001d0 <memchr>
 8006484:	9a04      	ldr	r2, [sp, #16]
 8006486:	b9d8      	cbnz	r0, 80064c0 <_vfiprintf_r+0x110>
 8006488:	06d1      	lsls	r1, r2, #27
 800648a:	bf44      	itt	mi
 800648c:	2320      	movmi	r3, #32
 800648e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006492:	0713      	lsls	r3, r2, #28
 8006494:	bf44      	itt	mi
 8006496:	232b      	movmi	r3, #43	@ 0x2b
 8006498:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800649c:	f89a 3000 	ldrb.w	r3, [sl]
 80064a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80064a2:	d015      	beq.n	80064d0 <_vfiprintf_r+0x120>
 80064a4:	9a07      	ldr	r2, [sp, #28]
 80064a6:	4654      	mov	r4, sl
 80064a8:	2000      	movs	r0, #0
 80064aa:	f04f 0c0a 	mov.w	ip, #10
 80064ae:	4621      	mov	r1, r4
 80064b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064b4:	3b30      	subs	r3, #48	@ 0x30
 80064b6:	2b09      	cmp	r3, #9
 80064b8:	d94b      	bls.n	8006552 <_vfiprintf_r+0x1a2>
 80064ba:	b1b0      	cbz	r0, 80064ea <_vfiprintf_r+0x13a>
 80064bc:	9207      	str	r2, [sp, #28]
 80064be:	e014      	b.n	80064ea <_vfiprintf_r+0x13a>
 80064c0:	eba0 0308 	sub.w	r3, r0, r8
 80064c4:	fa09 f303 	lsl.w	r3, r9, r3
 80064c8:	4313      	orrs	r3, r2
 80064ca:	9304      	str	r3, [sp, #16]
 80064cc:	46a2      	mov	sl, r4
 80064ce:	e7d2      	b.n	8006476 <_vfiprintf_r+0xc6>
 80064d0:	9b03      	ldr	r3, [sp, #12]
 80064d2:	1d19      	adds	r1, r3, #4
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	9103      	str	r1, [sp, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	bfbb      	ittet	lt
 80064dc:	425b      	neglt	r3, r3
 80064de:	f042 0202 	orrlt.w	r2, r2, #2
 80064e2:	9307      	strge	r3, [sp, #28]
 80064e4:	9307      	strlt	r3, [sp, #28]
 80064e6:	bfb8      	it	lt
 80064e8:	9204      	strlt	r2, [sp, #16]
 80064ea:	7823      	ldrb	r3, [r4, #0]
 80064ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80064ee:	d10a      	bne.n	8006506 <_vfiprintf_r+0x156>
 80064f0:	7863      	ldrb	r3, [r4, #1]
 80064f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80064f4:	d132      	bne.n	800655c <_vfiprintf_r+0x1ac>
 80064f6:	9b03      	ldr	r3, [sp, #12]
 80064f8:	1d1a      	adds	r2, r3, #4
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	9203      	str	r2, [sp, #12]
 80064fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006502:	3402      	adds	r4, #2
 8006504:	9305      	str	r3, [sp, #20]
 8006506:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80065dc <_vfiprintf_r+0x22c>
 800650a:	7821      	ldrb	r1, [r4, #0]
 800650c:	2203      	movs	r2, #3
 800650e:	4650      	mov	r0, sl
 8006510:	f7f9 fe5e 	bl	80001d0 <memchr>
 8006514:	b138      	cbz	r0, 8006526 <_vfiprintf_r+0x176>
 8006516:	9b04      	ldr	r3, [sp, #16]
 8006518:	eba0 000a 	sub.w	r0, r0, sl
 800651c:	2240      	movs	r2, #64	@ 0x40
 800651e:	4082      	lsls	r2, r0
 8006520:	4313      	orrs	r3, r2
 8006522:	3401      	adds	r4, #1
 8006524:	9304      	str	r3, [sp, #16]
 8006526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800652a:	4829      	ldr	r0, [pc, #164]	@ (80065d0 <_vfiprintf_r+0x220>)
 800652c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006530:	2206      	movs	r2, #6
 8006532:	f7f9 fe4d 	bl	80001d0 <memchr>
 8006536:	2800      	cmp	r0, #0
 8006538:	d03f      	beq.n	80065ba <_vfiprintf_r+0x20a>
 800653a:	4b26      	ldr	r3, [pc, #152]	@ (80065d4 <_vfiprintf_r+0x224>)
 800653c:	bb1b      	cbnz	r3, 8006586 <_vfiprintf_r+0x1d6>
 800653e:	9b03      	ldr	r3, [sp, #12]
 8006540:	3307      	adds	r3, #7
 8006542:	f023 0307 	bic.w	r3, r3, #7
 8006546:	3308      	adds	r3, #8
 8006548:	9303      	str	r3, [sp, #12]
 800654a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800654c:	443b      	add	r3, r7
 800654e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006550:	e76a      	b.n	8006428 <_vfiprintf_r+0x78>
 8006552:	fb0c 3202 	mla	r2, ip, r2, r3
 8006556:	460c      	mov	r4, r1
 8006558:	2001      	movs	r0, #1
 800655a:	e7a8      	b.n	80064ae <_vfiprintf_r+0xfe>
 800655c:	2300      	movs	r3, #0
 800655e:	3401      	adds	r4, #1
 8006560:	9305      	str	r3, [sp, #20]
 8006562:	4619      	mov	r1, r3
 8006564:	f04f 0c0a 	mov.w	ip, #10
 8006568:	4620      	mov	r0, r4
 800656a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800656e:	3a30      	subs	r2, #48	@ 0x30
 8006570:	2a09      	cmp	r2, #9
 8006572:	d903      	bls.n	800657c <_vfiprintf_r+0x1cc>
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0c6      	beq.n	8006506 <_vfiprintf_r+0x156>
 8006578:	9105      	str	r1, [sp, #20]
 800657a:	e7c4      	b.n	8006506 <_vfiprintf_r+0x156>
 800657c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006580:	4604      	mov	r4, r0
 8006582:	2301      	movs	r3, #1
 8006584:	e7f0      	b.n	8006568 <_vfiprintf_r+0x1b8>
 8006586:	ab03      	add	r3, sp, #12
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	462a      	mov	r2, r5
 800658c:	4b12      	ldr	r3, [pc, #72]	@ (80065d8 <_vfiprintf_r+0x228>)
 800658e:	a904      	add	r1, sp, #16
 8006590:	4630      	mov	r0, r6
 8006592:	f3af 8000 	nop.w
 8006596:	4607      	mov	r7, r0
 8006598:	1c78      	adds	r0, r7, #1
 800659a:	d1d6      	bne.n	800654a <_vfiprintf_r+0x19a>
 800659c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800659e:	07d9      	lsls	r1, r3, #31
 80065a0:	d405      	bmi.n	80065ae <_vfiprintf_r+0x1fe>
 80065a2:	89ab      	ldrh	r3, [r5, #12]
 80065a4:	059a      	lsls	r2, r3, #22
 80065a6:	d402      	bmi.n	80065ae <_vfiprintf_r+0x1fe>
 80065a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065aa:	f7ff fe7d 	bl	80062a8 <__retarget_lock_release_recursive>
 80065ae:	89ab      	ldrh	r3, [r5, #12]
 80065b0:	065b      	lsls	r3, r3, #25
 80065b2:	f53f af1f 	bmi.w	80063f4 <_vfiprintf_r+0x44>
 80065b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065b8:	e71e      	b.n	80063f8 <_vfiprintf_r+0x48>
 80065ba:	ab03      	add	r3, sp, #12
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	462a      	mov	r2, r5
 80065c0:	4b05      	ldr	r3, [pc, #20]	@ (80065d8 <_vfiprintf_r+0x228>)
 80065c2:	a904      	add	r1, sp, #16
 80065c4:	4630      	mov	r0, r6
 80065c6:	f000 f879 	bl	80066bc <_printf_i>
 80065ca:	e7e4      	b.n	8006596 <_vfiprintf_r+0x1e6>
 80065cc:	080079b0 	.word	0x080079b0
 80065d0:	080079ba 	.word	0x080079ba
 80065d4:	00000000 	.word	0x00000000
 80065d8:	0800638b 	.word	0x0800638b
 80065dc:	080079b6 	.word	0x080079b6

080065e0 <_printf_common>:
 80065e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e4:	4616      	mov	r6, r2
 80065e6:	4698      	mov	r8, r3
 80065e8:	688a      	ldr	r2, [r1, #8]
 80065ea:	690b      	ldr	r3, [r1, #16]
 80065ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065f0:	4293      	cmp	r3, r2
 80065f2:	bfb8      	it	lt
 80065f4:	4613      	movlt	r3, r2
 80065f6:	6033      	str	r3, [r6, #0]
 80065f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065fc:	4607      	mov	r7, r0
 80065fe:	460c      	mov	r4, r1
 8006600:	b10a      	cbz	r2, 8006606 <_printf_common+0x26>
 8006602:	3301      	adds	r3, #1
 8006604:	6033      	str	r3, [r6, #0]
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	0699      	lsls	r1, r3, #26
 800660a:	bf42      	ittt	mi
 800660c:	6833      	ldrmi	r3, [r6, #0]
 800660e:	3302      	addmi	r3, #2
 8006610:	6033      	strmi	r3, [r6, #0]
 8006612:	6825      	ldr	r5, [r4, #0]
 8006614:	f015 0506 	ands.w	r5, r5, #6
 8006618:	d106      	bne.n	8006628 <_printf_common+0x48>
 800661a:	f104 0a19 	add.w	sl, r4, #25
 800661e:	68e3      	ldr	r3, [r4, #12]
 8006620:	6832      	ldr	r2, [r6, #0]
 8006622:	1a9b      	subs	r3, r3, r2
 8006624:	42ab      	cmp	r3, r5
 8006626:	dc26      	bgt.n	8006676 <_printf_common+0x96>
 8006628:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800662c:	6822      	ldr	r2, [r4, #0]
 800662e:	3b00      	subs	r3, #0
 8006630:	bf18      	it	ne
 8006632:	2301      	movne	r3, #1
 8006634:	0692      	lsls	r2, r2, #26
 8006636:	d42b      	bmi.n	8006690 <_printf_common+0xb0>
 8006638:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800663c:	4641      	mov	r1, r8
 800663e:	4638      	mov	r0, r7
 8006640:	47c8      	blx	r9
 8006642:	3001      	adds	r0, #1
 8006644:	d01e      	beq.n	8006684 <_printf_common+0xa4>
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	6922      	ldr	r2, [r4, #16]
 800664a:	f003 0306 	and.w	r3, r3, #6
 800664e:	2b04      	cmp	r3, #4
 8006650:	bf02      	ittt	eq
 8006652:	68e5      	ldreq	r5, [r4, #12]
 8006654:	6833      	ldreq	r3, [r6, #0]
 8006656:	1aed      	subeq	r5, r5, r3
 8006658:	68a3      	ldr	r3, [r4, #8]
 800665a:	bf0c      	ite	eq
 800665c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006660:	2500      	movne	r5, #0
 8006662:	4293      	cmp	r3, r2
 8006664:	bfc4      	itt	gt
 8006666:	1a9b      	subgt	r3, r3, r2
 8006668:	18ed      	addgt	r5, r5, r3
 800666a:	2600      	movs	r6, #0
 800666c:	341a      	adds	r4, #26
 800666e:	42b5      	cmp	r5, r6
 8006670:	d11a      	bne.n	80066a8 <_printf_common+0xc8>
 8006672:	2000      	movs	r0, #0
 8006674:	e008      	b.n	8006688 <_printf_common+0xa8>
 8006676:	2301      	movs	r3, #1
 8006678:	4652      	mov	r2, sl
 800667a:	4641      	mov	r1, r8
 800667c:	4638      	mov	r0, r7
 800667e:	47c8      	blx	r9
 8006680:	3001      	adds	r0, #1
 8006682:	d103      	bne.n	800668c <_printf_common+0xac>
 8006684:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800668c:	3501      	adds	r5, #1
 800668e:	e7c6      	b.n	800661e <_printf_common+0x3e>
 8006690:	18e1      	adds	r1, r4, r3
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	2030      	movs	r0, #48	@ 0x30
 8006696:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800669a:	4422      	add	r2, r4
 800669c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066a4:	3302      	adds	r3, #2
 80066a6:	e7c7      	b.n	8006638 <_printf_common+0x58>
 80066a8:	2301      	movs	r3, #1
 80066aa:	4622      	mov	r2, r4
 80066ac:	4641      	mov	r1, r8
 80066ae:	4638      	mov	r0, r7
 80066b0:	47c8      	blx	r9
 80066b2:	3001      	adds	r0, #1
 80066b4:	d0e6      	beq.n	8006684 <_printf_common+0xa4>
 80066b6:	3601      	adds	r6, #1
 80066b8:	e7d9      	b.n	800666e <_printf_common+0x8e>
	...

080066bc <_printf_i>:
 80066bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066c0:	7e0f      	ldrb	r7, [r1, #24]
 80066c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066c4:	2f78      	cmp	r7, #120	@ 0x78
 80066c6:	4691      	mov	r9, r2
 80066c8:	4680      	mov	r8, r0
 80066ca:	460c      	mov	r4, r1
 80066cc:	469a      	mov	sl, r3
 80066ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066d2:	d807      	bhi.n	80066e4 <_printf_i+0x28>
 80066d4:	2f62      	cmp	r7, #98	@ 0x62
 80066d6:	d80a      	bhi.n	80066ee <_printf_i+0x32>
 80066d8:	2f00      	cmp	r7, #0
 80066da:	f000 80d1 	beq.w	8006880 <_printf_i+0x1c4>
 80066de:	2f58      	cmp	r7, #88	@ 0x58
 80066e0:	f000 80b8 	beq.w	8006854 <_printf_i+0x198>
 80066e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066ec:	e03a      	b.n	8006764 <_printf_i+0xa8>
 80066ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066f2:	2b15      	cmp	r3, #21
 80066f4:	d8f6      	bhi.n	80066e4 <_printf_i+0x28>
 80066f6:	a101      	add	r1, pc, #4	@ (adr r1, 80066fc <_printf_i+0x40>)
 80066f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066fc:	08006755 	.word	0x08006755
 8006700:	08006769 	.word	0x08006769
 8006704:	080066e5 	.word	0x080066e5
 8006708:	080066e5 	.word	0x080066e5
 800670c:	080066e5 	.word	0x080066e5
 8006710:	080066e5 	.word	0x080066e5
 8006714:	08006769 	.word	0x08006769
 8006718:	080066e5 	.word	0x080066e5
 800671c:	080066e5 	.word	0x080066e5
 8006720:	080066e5 	.word	0x080066e5
 8006724:	080066e5 	.word	0x080066e5
 8006728:	08006867 	.word	0x08006867
 800672c:	08006793 	.word	0x08006793
 8006730:	08006821 	.word	0x08006821
 8006734:	080066e5 	.word	0x080066e5
 8006738:	080066e5 	.word	0x080066e5
 800673c:	08006889 	.word	0x08006889
 8006740:	080066e5 	.word	0x080066e5
 8006744:	08006793 	.word	0x08006793
 8006748:	080066e5 	.word	0x080066e5
 800674c:	080066e5 	.word	0x080066e5
 8006750:	08006829 	.word	0x08006829
 8006754:	6833      	ldr	r3, [r6, #0]
 8006756:	1d1a      	adds	r2, r3, #4
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6032      	str	r2, [r6, #0]
 800675c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006760:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006764:	2301      	movs	r3, #1
 8006766:	e09c      	b.n	80068a2 <_printf_i+0x1e6>
 8006768:	6833      	ldr	r3, [r6, #0]
 800676a:	6820      	ldr	r0, [r4, #0]
 800676c:	1d19      	adds	r1, r3, #4
 800676e:	6031      	str	r1, [r6, #0]
 8006770:	0606      	lsls	r6, r0, #24
 8006772:	d501      	bpl.n	8006778 <_printf_i+0xbc>
 8006774:	681d      	ldr	r5, [r3, #0]
 8006776:	e003      	b.n	8006780 <_printf_i+0xc4>
 8006778:	0645      	lsls	r5, r0, #25
 800677a:	d5fb      	bpl.n	8006774 <_printf_i+0xb8>
 800677c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006780:	2d00      	cmp	r5, #0
 8006782:	da03      	bge.n	800678c <_printf_i+0xd0>
 8006784:	232d      	movs	r3, #45	@ 0x2d
 8006786:	426d      	negs	r5, r5
 8006788:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800678c:	4858      	ldr	r0, [pc, #352]	@ (80068f0 <_printf_i+0x234>)
 800678e:	230a      	movs	r3, #10
 8006790:	e011      	b.n	80067b6 <_printf_i+0xfa>
 8006792:	6821      	ldr	r1, [r4, #0]
 8006794:	6833      	ldr	r3, [r6, #0]
 8006796:	0608      	lsls	r0, r1, #24
 8006798:	f853 5b04 	ldr.w	r5, [r3], #4
 800679c:	d402      	bmi.n	80067a4 <_printf_i+0xe8>
 800679e:	0649      	lsls	r1, r1, #25
 80067a0:	bf48      	it	mi
 80067a2:	b2ad      	uxthmi	r5, r5
 80067a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80067a6:	4852      	ldr	r0, [pc, #328]	@ (80068f0 <_printf_i+0x234>)
 80067a8:	6033      	str	r3, [r6, #0]
 80067aa:	bf14      	ite	ne
 80067ac:	230a      	movne	r3, #10
 80067ae:	2308      	moveq	r3, #8
 80067b0:	2100      	movs	r1, #0
 80067b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067b6:	6866      	ldr	r6, [r4, #4]
 80067b8:	60a6      	str	r6, [r4, #8]
 80067ba:	2e00      	cmp	r6, #0
 80067bc:	db05      	blt.n	80067ca <_printf_i+0x10e>
 80067be:	6821      	ldr	r1, [r4, #0]
 80067c0:	432e      	orrs	r6, r5
 80067c2:	f021 0104 	bic.w	r1, r1, #4
 80067c6:	6021      	str	r1, [r4, #0]
 80067c8:	d04b      	beq.n	8006862 <_printf_i+0x1a6>
 80067ca:	4616      	mov	r6, r2
 80067cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80067d0:	fb03 5711 	mls	r7, r3, r1, r5
 80067d4:	5dc7      	ldrb	r7, [r0, r7]
 80067d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067da:	462f      	mov	r7, r5
 80067dc:	42bb      	cmp	r3, r7
 80067de:	460d      	mov	r5, r1
 80067e0:	d9f4      	bls.n	80067cc <_printf_i+0x110>
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	d10b      	bne.n	80067fe <_printf_i+0x142>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	07df      	lsls	r7, r3, #31
 80067ea:	d508      	bpl.n	80067fe <_printf_i+0x142>
 80067ec:	6923      	ldr	r3, [r4, #16]
 80067ee:	6861      	ldr	r1, [r4, #4]
 80067f0:	4299      	cmp	r1, r3
 80067f2:	bfde      	ittt	le
 80067f4:	2330      	movle	r3, #48	@ 0x30
 80067f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067fa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80067fe:	1b92      	subs	r2, r2, r6
 8006800:	6122      	str	r2, [r4, #16]
 8006802:	f8cd a000 	str.w	sl, [sp]
 8006806:	464b      	mov	r3, r9
 8006808:	aa03      	add	r2, sp, #12
 800680a:	4621      	mov	r1, r4
 800680c:	4640      	mov	r0, r8
 800680e:	f7ff fee7 	bl	80065e0 <_printf_common>
 8006812:	3001      	adds	r0, #1
 8006814:	d14a      	bne.n	80068ac <_printf_i+0x1f0>
 8006816:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800681a:	b004      	add	sp, #16
 800681c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	f043 0320 	orr.w	r3, r3, #32
 8006826:	6023      	str	r3, [r4, #0]
 8006828:	4832      	ldr	r0, [pc, #200]	@ (80068f4 <_printf_i+0x238>)
 800682a:	2778      	movs	r7, #120	@ 0x78
 800682c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	6831      	ldr	r1, [r6, #0]
 8006834:	061f      	lsls	r7, r3, #24
 8006836:	f851 5b04 	ldr.w	r5, [r1], #4
 800683a:	d402      	bmi.n	8006842 <_printf_i+0x186>
 800683c:	065f      	lsls	r7, r3, #25
 800683e:	bf48      	it	mi
 8006840:	b2ad      	uxthmi	r5, r5
 8006842:	6031      	str	r1, [r6, #0]
 8006844:	07d9      	lsls	r1, r3, #31
 8006846:	bf44      	itt	mi
 8006848:	f043 0320 	orrmi.w	r3, r3, #32
 800684c:	6023      	strmi	r3, [r4, #0]
 800684e:	b11d      	cbz	r5, 8006858 <_printf_i+0x19c>
 8006850:	2310      	movs	r3, #16
 8006852:	e7ad      	b.n	80067b0 <_printf_i+0xf4>
 8006854:	4826      	ldr	r0, [pc, #152]	@ (80068f0 <_printf_i+0x234>)
 8006856:	e7e9      	b.n	800682c <_printf_i+0x170>
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	f023 0320 	bic.w	r3, r3, #32
 800685e:	6023      	str	r3, [r4, #0]
 8006860:	e7f6      	b.n	8006850 <_printf_i+0x194>
 8006862:	4616      	mov	r6, r2
 8006864:	e7bd      	b.n	80067e2 <_printf_i+0x126>
 8006866:	6833      	ldr	r3, [r6, #0]
 8006868:	6825      	ldr	r5, [r4, #0]
 800686a:	6961      	ldr	r1, [r4, #20]
 800686c:	1d18      	adds	r0, r3, #4
 800686e:	6030      	str	r0, [r6, #0]
 8006870:	062e      	lsls	r6, r5, #24
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	d501      	bpl.n	800687a <_printf_i+0x1be>
 8006876:	6019      	str	r1, [r3, #0]
 8006878:	e002      	b.n	8006880 <_printf_i+0x1c4>
 800687a:	0668      	lsls	r0, r5, #25
 800687c:	d5fb      	bpl.n	8006876 <_printf_i+0x1ba>
 800687e:	8019      	strh	r1, [r3, #0]
 8006880:	2300      	movs	r3, #0
 8006882:	6123      	str	r3, [r4, #16]
 8006884:	4616      	mov	r6, r2
 8006886:	e7bc      	b.n	8006802 <_printf_i+0x146>
 8006888:	6833      	ldr	r3, [r6, #0]
 800688a:	1d1a      	adds	r2, r3, #4
 800688c:	6032      	str	r2, [r6, #0]
 800688e:	681e      	ldr	r6, [r3, #0]
 8006890:	6862      	ldr	r2, [r4, #4]
 8006892:	2100      	movs	r1, #0
 8006894:	4630      	mov	r0, r6
 8006896:	f7f9 fc9b 	bl	80001d0 <memchr>
 800689a:	b108      	cbz	r0, 80068a0 <_printf_i+0x1e4>
 800689c:	1b80      	subs	r0, r0, r6
 800689e:	6060      	str	r0, [r4, #4]
 80068a0:	6863      	ldr	r3, [r4, #4]
 80068a2:	6123      	str	r3, [r4, #16]
 80068a4:	2300      	movs	r3, #0
 80068a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068aa:	e7aa      	b.n	8006802 <_printf_i+0x146>
 80068ac:	6923      	ldr	r3, [r4, #16]
 80068ae:	4632      	mov	r2, r6
 80068b0:	4649      	mov	r1, r9
 80068b2:	4640      	mov	r0, r8
 80068b4:	47d0      	blx	sl
 80068b6:	3001      	adds	r0, #1
 80068b8:	d0ad      	beq.n	8006816 <_printf_i+0x15a>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	079b      	lsls	r3, r3, #30
 80068be:	d413      	bmi.n	80068e8 <_printf_i+0x22c>
 80068c0:	68e0      	ldr	r0, [r4, #12]
 80068c2:	9b03      	ldr	r3, [sp, #12]
 80068c4:	4298      	cmp	r0, r3
 80068c6:	bfb8      	it	lt
 80068c8:	4618      	movlt	r0, r3
 80068ca:	e7a6      	b.n	800681a <_printf_i+0x15e>
 80068cc:	2301      	movs	r3, #1
 80068ce:	4632      	mov	r2, r6
 80068d0:	4649      	mov	r1, r9
 80068d2:	4640      	mov	r0, r8
 80068d4:	47d0      	blx	sl
 80068d6:	3001      	adds	r0, #1
 80068d8:	d09d      	beq.n	8006816 <_printf_i+0x15a>
 80068da:	3501      	adds	r5, #1
 80068dc:	68e3      	ldr	r3, [r4, #12]
 80068de:	9903      	ldr	r1, [sp, #12]
 80068e0:	1a5b      	subs	r3, r3, r1
 80068e2:	42ab      	cmp	r3, r5
 80068e4:	dcf2      	bgt.n	80068cc <_printf_i+0x210>
 80068e6:	e7eb      	b.n	80068c0 <_printf_i+0x204>
 80068e8:	2500      	movs	r5, #0
 80068ea:	f104 0619 	add.w	r6, r4, #25
 80068ee:	e7f5      	b.n	80068dc <_printf_i+0x220>
 80068f0:	080079c1 	.word	0x080079c1
 80068f4:	080079d2 	.word	0x080079d2

080068f8 <__sflush_r>:
 80068f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006900:	0716      	lsls	r6, r2, #28
 8006902:	4605      	mov	r5, r0
 8006904:	460c      	mov	r4, r1
 8006906:	d454      	bmi.n	80069b2 <__sflush_r+0xba>
 8006908:	684b      	ldr	r3, [r1, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	dc02      	bgt.n	8006914 <__sflush_r+0x1c>
 800690e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006910:	2b00      	cmp	r3, #0
 8006912:	dd48      	ble.n	80069a6 <__sflush_r+0xae>
 8006914:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006916:	2e00      	cmp	r6, #0
 8006918:	d045      	beq.n	80069a6 <__sflush_r+0xae>
 800691a:	2300      	movs	r3, #0
 800691c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006920:	682f      	ldr	r7, [r5, #0]
 8006922:	6a21      	ldr	r1, [r4, #32]
 8006924:	602b      	str	r3, [r5, #0]
 8006926:	d030      	beq.n	800698a <__sflush_r+0x92>
 8006928:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	0759      	lsls	r1, r3, #29
 800692e:	d505      	bpl.n	800693c <__sflush_r+0x44>
 8006930:	6863      	ldr	r3, [r4, #4]
 8006932:	1ad2      	subs	r2, r2, r3
 8006934:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006936:	b10b      	cbz	r3, 800693c <__sflush_r+0x44>
 8006938:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800693a:	1ad2      	subs	r2, r2, r3
 800693c:	2300      	movs	r3, #0
 800693e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006940:	6a21      	ldr	r1, [r4, #32]
 8006942:	4628      	mov	r0, r5
 8006944:	47b0      	blx	r6
 8006946:	1c43      	adds	r3, r0, #1
 8006948:	89a3      	ldrh	r3, [r4, #12]
 800694a:	d106      	bne.n	800695a <__sflush_r+0x62>
 800694c:	6829      	ldr	r1, [r5, #0]
 800694e:	291d      	cmp	r1, #29
 8006950:	d82b      	bhi.n	80069aa <__sflush_r+0xb2>
 8006952:	4a2a      	ldr	r2, [pc, #168]	@ (80069fc <__sflush_r+0x104>)
 8006954:	40ca      	lsrs	r2, r1
 8006956:	07d6      	lsls	r6, r2, #31
 8006958:	d527      	bpl.n	80069aa <__sflush_r+0xb2>
 800695a:	2200      	movs	r2, #0
 800695c:	6062      	str	r2, [r4, #4]
 800695e:	04d9      	lsls	r1, r3, #19
 8006960:	6922      	ldr	r2, [r4, #16]
 8006962:	6022      	str	r2, [r4, #0]
 8006964:	d504      	bpl.n	8006970 <__sflush_r+0x78>
 8006966:	1c42      	adds	r2, r0, #1
 8006968:	d101      	bne.n	800696e <__sflush_r+0x76>
 800696a:	682b      	ldr	r3, [r5, #0]
 800696c:	b903      	cbnz	r3, 8006970 <__sflush_r+0x78>
 800696e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006970:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006972:	602f      	str	r7, [r5, #0]
 8006974:	b1b9      	cbz	r1, 80069a6 <__sflush_r+0xae>
 8006976:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800697a:	4299      	cmp	r1, r3
 800697c:	d002      	beq.n	8006984 <__sflush_r+0x8c>
 800697e:	4628      	mov	r0, r5
 8006980:	f7ff fca2 	bl	80062c8 <_free_r>
 8006984:	2300      	movs	r3, #0
 8006986:	6363      	str	r3, [r4, #52]	@ 0x34
 8006988:	e00d      	b.n	80069a6 <__sflush_r+0xae>
 800698a:	2301      	movs	r3, #1
 800698c:	4628      	mov	r0, r5
 800698e:	47b0      	blx	r6
 8006990:	4602      	mov	r2, r0
 8006992:	1c50      	adds	r0, r2, #1
 8006994:	d1c9      	bne.n	800692a <__sflush_r+0x32>
 8006996:	682b      	ldr	r3, [r5, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0c6      	beq.n	800692a <__sflush_r+0x32>
 800699c:	2b1d      	cmp	r3, #29
 800699e:	d001      	beq.n	80069a4 <__sflush_r+0xac>
 80069a0:	2b16      	cmp	r3, #22
 80069a2:	d11e      	bne.n	80069e2 <__sflush_r+0xea>
 80069a4:	602f      	str	r7, [r5, #0]
 80069a6:	2000      	movs	r0, #0
 80069a8:	e022      	b.n	80069f0 <__sflush_r+0xf8>
 80069aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069ae:	b21b      	sxth	r3, r3
 80069b0:	e01b      	b.n	80069ea <__sflush_r+0xf2>
 80069b2:	690f      	ldr	r7, [r1, #16]
 80069b4:	2f00      	cmp	r7, #0
 80069b6:	d0f6      	beq.n	80069a6 <__sflush_r+0xae>
 80069b8:	0793      	lsls	r3, r2, #30
 80069ba:	680e      	ldr	r6, [r1, #0]
 80069bc:	bf08      	it	eq
 80069be:	694b      	ldreq	r3, [r1, #20]
 80069c0:	600f      	str	r7, [r1, #0]
 80069c2:	bf18      	it	ne
 80069c4:	2300      	movne	r3, #0
 80069c6:	eba6 0807 	sub.w	r8, r6, r7
 80069ca:	608b      	str	r3, [r1, #8]
 80069cc:	f1b8 0f00 	cmp.w	r8, #0
 80069d0:	dde9      	ble.n	80069a6 <__sflush_r+0xae>
 80069d2:	6a21      	ldr	r1, [r4, #32]
 80069d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80069d6:	4643      	mov	r3, r8
 80069d8:	463a      	mov	r2, r7
 80069da:	4628      	mov	r0, r5
 80069dc:	47b0      	blx	r6
 80069de:	2800      	cmp	r0, #0
 80069e0:	dc08      	bgt.n	80069f4 <__sflush_r+0xfc>
 80069e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069ea:	81a3      	strh	r3, [r4, #12]
 80069ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f4:	4407      	add	r7, r0
 80069f6:	eba8 0800 	sub.w	r8, r8, r0
 80069fa:	e7e7      	b.n	80069cc <__sflush_r+0xd4>
 80069fc:	20400001 	.word	0x20400001

08006a00 <_fflush_r>:
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	690b      	ldr	r3, [r1, #16]
 8006a04:	4605      	mov	r5, r0
 8006a06:	460c      	mov	r4, r1
 8006a08:	b913      	cbnz	r3, 8006a10 <_fflush_r+0x10>
 8006a0a:	2500      	movs	r5, #0
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
 8006a10:	b118      	cbz	r0, 8006a1a <_fflush_r+0x1a>
 8006a12:	6a03      	ldr	r3, [r0, #32]
 8006a14:	b90b      	cbnz	r3, 8006a1a <_fflush_r+0x1a>
 8006a16:	f7ff fa33 	bl	8005e80 <__sinit>
 8006a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0f3      	beq.n	8006a0a <_fflush_r+0xa>
 8006a22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a24:	07d0      	lsls	r0, r2, #31
 8006a26:	d404      	bmi.n	8006a32 <_fflush_r+0x32>
 8006a28:	0599      	lsls	r1, r3, #22
 8006a2a:	d402      	bmi.n	8006a32 <_fflush_r+0x32>
 8006a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a2e:	f7ff fc3a 	bl	80062a6 <__retarget_lock_acquire_recursive>
 8006a32:	4628      	mov	r0, r5
 8006a34:	4621      	mov	r1, r4
 8006a36:	f7ff ff5f 	bl	80068f8 <__sflush_r>
 8006a3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a3c:	07da      	lsls	r2, r3, #31
 8006a3e:	4605      	mov	r5, r0
 8006a40:	d4e4      	bmi.n	8006a0c <_fflush_r+0xc>
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	059b      	lsls	r3, r3, #22
 8006a46:	d4e1      	bmi.n	8006a0c <_fflush_r+0xc>
 8006a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a4a:	f7ff fc2d 	bl	80062a8 <__retarget_lock_release_recursive>
 8006a4e:	e7dd      	b.n	8006a0c <_fflush_r+0xc>

08006a50 <__swhatbuf_r>:
 8006a50:	b570      	push	{r4, r5, r6, lr}
 8006a52:	460c      	mov	r4, r1
 8006a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a58:	2900      	cmp	r1, #0
 8006a5a:	b096      	sub	sp, #88	@ 0x58
 8006a5c:	4615      	mov	r5, r2
 8006a5e:	461e      	mov	r6, r3
 8006a60:	da0d      	bge.n	8006a7e <__swhatbuf_r+0x2e>
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a68:	f04f 0100 	mov.w	r1, #0
 8006a6c:	bf14      	ite	ne
 8006a6e:	2340      	movne	r3, #64	@ 0x40
 8006a70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a74:	2000      	movs	r0, #0
 8006a76:	6031      	str	r1, [r6, #0]
 8006a78:	602b      	str	r3, [r5, #0]
 8006a7a:	b016      	add	sp, #88	@ 0x58
 8006a7c:	bd70      	pop	{r4, r5, r6, pc}
 8006a7e:	466a      	mov	r2, sp
 8006a80:	f000 f848 	bl	8006b14 <_fstat_r>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	dbec      	blt.n	8006a62 <__swhatbuf_r+0x12>
 8006a88:	9901      	ldr	r1, [sp, #4]
 8006a8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a92:	4259      	negs	r1, r3
 8006a94:	4159      	adcs	r1, r3
 8006a96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a9a:	e7eb      	b.n	8006a74 <__swhatbuf_r+0x24>

08006a9c <__smakebuf_r>:
 8006a9c:	898b      	ldrh	r3, [r1, #12]
 8006a9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aa0:	079d      	lsls	r5, r3, #30
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	460c      	mov	r4, r1
 8006aa6:	d507      	bpl.n	8006ab8 <__smakebuf_r+0x1c>
 8006aa8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	6123      	str	r3, [r4, #16]
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	6163      	str	r3, [r4, #20]
 8006ab4:	b003      	add	sp, #12
 8006ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ab8:	ab01      	add	r3, sp, #4
 8006aba:	466a      	mov	r2, sp
 8006abc:	f7ff ffc8 	bl	8006a50 <__swhatbuf_r>
 8006ac0:	9f00      	ldr	r7, [sp, #0]
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	4639      	mov	r1, r7
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f7ff f8c2 	bl	8005c50 <_malloc_r>
 8006acc:	b948      	cbnz	r0, 8006ae2 <__smakebuf_r+0x46>
 8006ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ad2:	059a      	lsls	r2, r3, #22
 8006ad4:	d4ee      	bmi.n	8006ab4 <__smakebuf_r+0x18>
 8006ad6:	f023 0303 	bic.w	r3, r3, #3
 8006ada:	f043 0302 	orr.w	r3, r3, #2
 8006ade:	81a3      	strh	r3, [r4, #12]
 8006ae0:	e7e2      	b.n	8006aa8 <__smakebuf_r+0xc>
 8006ae2:	89a3      	ldrh	r3, [r4, #12]
 8006ae4:	6020      	str	r0, [r4, #0]
 8006ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aea:	81a3      	strh	r3, [r4, #12]
 8006aec:	9b01      	ldr	r3, [sp, #4]
 8006aee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006af2:	b15b      	cbz	r3, 8006b0c <__smakebuf_r+0x70>
 8006af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006af8:	4630      	mov	r0, r6
 8006afa:	f000 f81d 	bl	8006b38 <_isatty_r>
 8006afe:	b128      	cbz	r0, 8006b0c <__smakebuf_r+0x70>
 8006b00:	89a3      	ldrh	r3, [r4, #12]
 8006b02:	f023 0303 	bic.w	r3, r3, #3
 8006b06:	f043 0301 	orr.w	r3, r3, #1
 8006b0a:	81a3      	strh	r3, [r4, #12]
 8006b0c:	89a3      	ldrh	r3, [r4, #12]
 8006b0e:	431d      	orrs	r5, r3
 8006b10:	81a5      	strh	r5, [r4, #12]
 8006b12:	e7cf      	b.n	8006ab4 <__smakebuf_r+0x18>

08006b14 <_fstat_r>:
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	4d07      	ldr	r5, [pc, #28]	@ (8006b34 <_fstat_r+0x20>)
 8006b18:	2300      	movs	r3, #0
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	4608      	mov	r0, r1
 8006b1e:	4611      	mov	r1, r2
 8006b20:	602b      	str	r3, [r5, #0]
 8006b22:	f7fa fcc6 	bl	80014b2 <_fstat>
 8006b26:	1c43      	adds	r3, r0, #1
 8006b28:	d102      	bne.n	8006b30 <_fstat_r+0x1c>
 8006b2a:	682b      	ldr	r3, [r5, #0]
 8006b2c:	b103      	cbz	r3, 8006b30 <_fstat_r+0x1c>
 8006b2e:	6023      	str	r3, [r4, #0]
 8006b30:	bd38      	pop	{r3, r4, r5, pc}
 8006b32:	bf00      	nop
 8006b34:	200004c0 	.word	0x200004c0

08006b38 <_isatty_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4d06      	ldr	r5, [pc, #24]	@ (8006b54 <_isatty_r+0x1c>)
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4604      	mov	r4, r0
 8006b40:	4608      	mov	r0, r1
 8006b42:	602b      	str	r3, [r5, #0]
 8006b44:	f7fa fcba 	bl	80014bc <_isatty>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	d102      	bne.n	8006b52 <_isatty_r+0x1a>
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	b103      	cbz	r3, 8006b52 <_isatty_r+0x1a>
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
 8006b54:	200004c0 	.word	0x200004c0

08006b58 <_init>:
 8006b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5a:	bf00      	nop
 8006b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b5e:	bc08      	pop	{r3}
 8006b60:	469e      	mov	lr, r3
 8006b62:	4770      	bx	lr

08006b64 <_fini>:
 8006b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b66:	bf00      	nop
 8006b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b6a:	bc08      	pop	{r3}
 8006b6c:	469e      	mov	lr, r3
 8006b6e:	4770      	bx	lr

Disassembly of section .code_in_ram:

08006b70 <mcuJumpToApplication>:
{
 8006b70:	b510      	push	{r4, lr}
 8006b72:	4604      	mov	r4, r0
   FLASH->CR |= FLASH_CR_LOCK;
 8006b74:	4a26      	ldr	r2, [pc, #152]	@ (8006c10 <mcuJumpToApplication+0xa0>)
 8006b76:	6913      	ldr	r3, [r2, #16]
 8006b78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b7c:	6113      	str	r3, [r2, #16]
   NVIC->ICER[0] = 0xFFFFFFFF;
 8006b7e:	4b25      	ldr	r3, [pc, #148]	@ (8006c14 <mcuJumpToApplication+0xa4>)
 8006b80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
   NVIC->ICER[1] = 0xFFFFFFFF;
 8006b88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   NVIC->ICER[2] = 0xFFFFFFFF;
 8006b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
   NVIC->ICER[3] = 0xFFFFFFFF;
 8006b90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
   NVIC->ICER[4] = 0xFFFFFFFF;
 8006b94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
   NVIC->ICER[5] = 0xFFFFFFFF;
 8006b98:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
   NVIC->ICER[6] = 0xFFFFFFFF;
 8006b9c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
   NVIC->ICER[7] = 0xFFFFFFFF;
 8006ba0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
   NVIC->ICPR[0] = 0xFFFFFFFF;
 8006ba4:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
   NVIC->ICPR[1] = 0xFFFFFFFF;
 8006ba8:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
   NVIC->ICPR[2] = 0xFFFFFFFF;
 8006bac:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
   NVIC->ICPR[3] = 0xFFFFFFFF;
 8006bb0:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
   NVIC->ICPR[4] = 0xFFFFFFFF;
 8006bb4:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
   NVIC->ICPR[5] = 0xFFFFFFFF;
 8006bb8:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
   NVIC->ICPR[6] = 0xFFFFFFFF;
 8006bbc:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
   NVIC->ICPR[7] = 0xFFFFFFFF;
 8006bc0:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
   SysTick->CTRL = 0;
 8006bc4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006bc8:	2200      	movs	r2, #0
 8006bca:	611a      	str	r2, [r3, #16]
   SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;
 8006bcc:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8006bd6:	605a      	str	r2, [r3, #4]
   SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk |
 8006bd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bda:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8006bde:	625a      	str	r2, [r3, #36]	@ 0x24
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8006be0:	f3ef 8314 	mrs	r3, CONTROL
   if(__get_CONTROL() & CONTROL_SPSEL_Msk)
 8006be4:	f013 0f02 	tst.w	r3, #2
 8006be8:	d00b      	beq.n	8006c02 <mcuJumpToApplication+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8006bea:	f3ef 8309 	mrs	r3, PSP
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8006bee:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8006bf2:	f3ef 8314 	mrs	r3, CONTROL
     __set_CONTROL( __get_CONTROL() & ~CONTROL_SPSEL_Msk);
 8006bf6:	f023 0302 	bic.w	r3, r3, #2
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8006bfa:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8006bfe:	f3bf 8f6f 	isb	sy
   stackPointer = *((uint32_t*)address);
 8006c02:	6820      	ldr	r0, [r4, #0]
   programCounter = *((uint32_t*)(address+4));
 8006c04:	6861      	ldr	r1, [r4, #4]
   SCB->VTOR = (uint32_t) address;
 8006c06:	4b04      	ldr	r3, [pc, #16]	@ (8006c18 <mcuJumpToApplication+0xa8>)
 8006c08:	609c      	str	r4, [r3, #8]
   mcuBootAppImageAsm(stackPointer, programCounter);
 8006c0a:	f7fc fd99 	bl	8003740 <mcuBootAppImageAsm>
 8006c0e:	bf00      	nop
 8006c10:	40023c00 	.word	0x40023c00
 8006c14:	e000e100 	.word	0xe000e100
 8006c18:	e000ed00 	.word	0xe000ed00
